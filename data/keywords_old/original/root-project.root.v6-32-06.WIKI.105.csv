id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://root.cern/doc/master/namespaceRooFit.html:6130,Modifiability,variab,variables,6130,"UUD func, RooAbsReal &x, RooAbsReal &y, RooAbsReal &z);  ; RooAbsReal * bindFunction (const char *name, CFUNCD4DDDB func, RooAbsReal &x, RooAbsReal &y, RooAbsReal &z, RooAbsReal &w);  ; RooAbsReal * bindFunction (const char *name, CFUNCD4DDDD func, RooAbsReal &x, RooAbsReal &y, RooAbsReal &z, RooAbsReal &w);  ; RooAbsReal * bindFunction (const char *name, CFUNCD4DDDI func, RooAbsReal &x, RooAbsReal &y, RooAbsReal &z, RooAbsReal &w);  ; RooAbsReal * bindFunction (const char *name, const ROOT::Math::IBaseFunctionMultiDim &ftor, const RooArgList &vars);  ; RooAbsReal * bindFunction (const char *name, const ROOT::Math::IBaseFunctionOneDim &ftor, RooAbsReal &vars);  ; RooAbsReal * bindFunction (TF1 *func, RooAbsReal &x);  Bind a TFx function to RooFit variables. Also see RooTFnBinding. ;  ; RooAbsReal * bindFunction (TF1 *func, RooAbsReal &x, const RooArgList &params);  Bind a TFx function to RooFit variables. Also see RooTFnBinding. ;  ; RooAbsReal * bindFunction (TF2 *func, RooAbsReal &x, RooAbsReal &y);  Bind a TFx function to RooFit variables. Also see RooTFnBinding. ;  ; RooAbsReal * bindFunction (TF2 *func, RooAbsReal &x, RooAbsReal &y, const RooArgList &params);  Bind a TFx function to RooFit variables. Also see RooTFnBinding. ;  ; RooAbsReal * bindFunction (TF3 *func, RooAbsReal &x, RooAbsReal &y, RooAbsReal &z);  Bind a TFx function to RooFit variables. Also see RooTFnBinding. ;  ; RooAbsReal * bindFunction (TF3 *func, RooAbsReal &x, RooAbsReal &y, RooAbsReal &z, const RooArgList &params);  Bind a TFx function to RooFit variables. Also see RooTFnBinding. ;  ; RooAbsPdf * bindPdf (const char *name, CFUNCD1D func, RooAbsReal &x);  ; RooAbsPdf * bindPdf (const char *name, CFUNCD1I func, RooAbsReal &x);  ; RooAbsPdf * bindPdf (const char *name, CFUNCD2DD func, RooAbsReal &x, RooAbsReal &y);  ; RooAbsPdf * bindPdf (const char *name, CFUNCD2DI func, RooAbsReal &x, RooAbsReal &y);  ; RooAbsPdf * bindPdf (const char *name, CFUNCD2ID func, RooAbsReal &x, RooAbsReal &y); ",MatchSource.WIKI,doc/master/namespaceRooFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit.html
https://root.cern/doc/master/namespaceRooFit.html:6296,Modifiability,variab,variables,6296,"ooAbsReal &z, RooAbsReal &w);  ; RooAbsReal * bindFunction (const char *name, CFUNCD4DDDD func, RooAbsReal &x, RooAbsReal &y, RooAbsReal &z, RooAbsReal &w);  ; RooAbsReal * bindFunction (const char *name, CFUNCD4DDDI func, RooAbsReal &x, RooAbsReal &y, RooAbsReal &z, RooAbsReal &w);  ; RooAbsReal * bindFunction (const char *name, const ROOT::Math::IBaseFunctionMultiDim &ftor, const RooArgList &vars);  ; RooAbsReal * bindFunction (const char *name, const ROOT::Math::IBaseFunctionOneDim &ftor, RooAbsReal &vars);  ; RooAbsReal * bindFunction (TF1 *func, RooAbsReal &x);  Bind a TFx function to RooFit variables. Also see RooTFnBinding. ;  ; RooAbsReal * bindFunction (TF1 *func, RooAbsReal &x, const RooArgList &params);  Bind a TFx function to RooFit variables. Also see RooTFnBinding. ;  ; RooAbsReal * bindFunction (TF2 *func, RooAbsReal &x, RooAbsReal &y);  Bind a TFx function to RooFit variables. Also see RooTFnBinding. ;  ; RooAbsReal * bindFunction (TF2 *func, RooAbsReal &x, RooAbsReal &y, const RooArgList &params);  Bind a TFx function to RooFit variables. Also see RooTFnBinding. ;  ; RooAbsReal * bindFunction (TF3 *func, RooAbsReal &x, RooAbsReal &y, RooAbsReal &z);  Bind a TFx function to RooFit variables. Also see RooTFnBinding. ;  ; RooAbsReal * bindFunction (TF3 *func, RooAbsReal &x, RooAbsReal &y, RooAbsReal &z, const RooArgList &params);  Bind a TFx function to RooFit variables. Also see RooTFnBinding. ;  ; RooAbsPdf * bindPdf (const char *name, CFUNCD1D func, RooAbsReal &x);  ; RooAbsPdf * bindPdf (const char *name, CFUNCD1I func, RooAbsReal &x);  ; RooAbsPdf * bindPdf (const char *name, CFUNCD2DD func, RooAbsReal &x, RooAbsReal &y);  ; RooAbsPdf * bindPdf (const char *name, CFUNCD2DI func, RooAbsReal &x, RooAbsReal &y);  ; RooAbsPdf * bindPdf (const char *name, CFUNCD2ID func, RooAbsReal &x, RooAbsReal &y);  ; RooAbsPdf * bindPdf (const char *name, CFUNCD2II func, RooAbsReal &x, RooAbsReal &y);  ; RooAbsPdf * bindPdf (const char *name, CFUNCD2UD func, RooAbs",MatchSource.WIKI,doc/master/namespaceRooFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit.html
https://root.cern/doc/master/namespaceRooFit.html:6451,Modifiability,variab,variables,6451,"RooAbsReal * bindFunction (const char *name, CFUNCD4DDDI func, RooAbsReal &x, RooAbsReal &y, RooAbsReal &z, RooAbsReal &w);  ; RooAbsReal * bindFunction (const char *name, const ROOT::Math::IBaseFunctionMultiDim &ftor, const RooArgList &vars);  ; RooAbsReal * bindFunction (const char *name, const ROOT::Math::IBaseFunctionOneDim &ftor, RooAbsReal &vars);  ; RooAbsReal * bindFunction (TF1 *func, RooAbsReal &x);  Bind a TFx function to RooFit variables. Also see RooTFnBinding. ;  ; RooAbsReal * bindFunction (TF1 *func, RooAbsReal &x, const RooArgList &params);  Bind a TFx function to RooFit variables. Also see RooTFnBinding. ;  ; RooAbsReal * bindFunction (TF2 *func, RooAbsReal &x, RooAbsReal &y);  Bind a TFx function to RooFit variables. Also see RooTFnBinding. ;  ; RooAbsReal * bindFunction (TF2 *func, RooAbsReal &x, RooAbsReal &y, const RooArgList &params);  Bind a TFx function to RooFit variables. Also see RooTFnBinding. ;  ; RooAbsReal * bindFunction (TF3 *func, RooAbsReal &x, RooAbsReal &y, RooAbsReal &z);  Bind a TFx function to RooFit variables. Also see RooTFnBinding. ;  ; RooAbsReal * bindFunction (TF3 *func, RooAbsReal &x, RooAbsReal &y, RooAbsReal &z, const RooArgList &params);  Bind a TFx function to RooFit variables. Also see RooTFnBinding. ;  ; RooAbsPdf * bindPdf (const char *name, CFUNCD1D func, RooAbsReal &x);  ; RooAbsPdf * bindPdf (const char *name, CFUNCD1I func, RooAbsReal &x);  ; RooAbsPdf * bindPdf (const char *name, CFUNCD2DD func, RooAbsReal &x, RooAbsReal &y);  ; RooAbsPdf * bindPdf (const char *name, CFUNCD2DI func, RooAbsReal &x, RooAbsReal &y);  ; RooAbsPdf * bindPdf (const char *name, CFUNCD2ID func, RooAbsReal &x, RooAbsReal &y);  ; RooAbsPdf * bindPdf (const char *name, CFUNCD2II func, RooAbsReal &x, RooAbsReal &y);  ; RooAbsPdf * bindPdf (const char *name, CFUNCD2UD func, RooAbsReal &x, RooAbsReal &y);  ; RooAbsPdf * bindPdf (const char *name, CFUNCD3DDB func, RooAbsReal &x, RooAbsReal &y, RooAbsReal &z);  ; RooAbsPdf * bindPdf (const c",MatchSource.WIKI,doc/master/namespaceRooFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit.html
https://root.cern/doc/master/namespaceRooFit.html:6632,Modifiability,variab,variables,6632,"me, const ROOT::Math::IBaseFunctionMultiDim &ftor, const RooArgList &vars);  ; RooAbsReal * bindFunction (const char *name, const ROOT::Math::IBaseFunctionOneDim &ftor, RooAbsReal &vars);  ; RooAbsReal * bindFunction (TF1 *func, RooAbsReal &x);  Bind a TFx function to RooFit variables. Also see RooTFnBinding. ;  ; RooAbsReal * bindFunction (TF1 *func, RooAbsReal &x, const RooArgList &params);  Bind a TFx function to RooFit variables. Also see RooTFnBinding. ;  ; RooAbsReal * bindFunction (TF2 *func, RooAbsReal &x, RooAbsReal &y);  Bind a TFx function to RooFit variables. Also see RooTFnBinding. ;  ; RooAbsReal * bindFunction (TF2 *func, RooAbsReal &x, RooAbsReal &y, const RooArgList &params);  Bind a TFx function to RooFit variables. Also see RooTFnBinding. ;  ; RooAbsReal * bindFunction (TF3 *func, RooAbsReal &x, RooAbsReal &y, RooAbsReal &z);  Bind a TFx function to RooFit variables. Also see RooTFnBinding. ;  ; RooAbsReal * bindFunction (TF3 *func, RooAbsReal &x, RooAbsReal &y, RooAbsReal &z, const RooArgList &params);  Bind a TFx function to RooFit variables. Also see RooTFnBinding. ;  ; RooAbsPdf * bindPdf (const char *name, CFUNCD1D func, RooAbsReal &x);  ; RooAbsPdf * bindPdf (const char *name, CFUNCD1I func, RooAbsReal &x);  ; RooAbsPdf * bindPdf (const char *name, CFUNCD2DD func, RooAbsReal &x, RooAbsReal &y);  ; RooAbsPdf * bindPdf (const char *name, CFUNCD2DI func, RooAbsReal &x, RooAbsReal &y);  ; RooAbsPdf * bindPdf (const char *name, CFUNCD2ID func, RooAbsReal &x, RooAbsReal &y);  ; RooAbsPdf * bindPdf (const char *name, CFUNCD2II func, RooAbsReal &x, RooAbsReal &y);  ; RooAbsPdf * bindPdf (const char *name, CFUNCD2UD func, RooAbsReal &x, RooAbsReal &y);  ; RooAbsPdf * bindPdf (const char *name, CFUNCD3DDB func, RooAbsReal &x, RooAbsReal &y, RooAbsReal &z);  ; RooAbsPdf * bindPdf (const char *name, CFUNCD3DDD func, RooAbsReal &x, RooAbsReal &y, RooAbsReal &z);  ; RooAbsPdf * bindPdf (const char *name, CFUNCD3DII func, RooAbsReal &x, RooAbsReal &y, RooAb",MatchSource.WIKI,doc/master/namespaceRooFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit.html
https://root.cern/doc/master/namespaceRooFit.html:28161,Modifiability,variab,variables,28161,"(; const char * ; name, . CFUNCD4DDDD ; func, . RooAbsReal & ; x, . RooAbsReal & ; y, . RooAbsReal & ; z, . RooAbsReal & ; w . ). Definition at line 37 of file RooCFunction4Binding.cxx. ◆ bindFunction() [16/24]. RooAbsReal * RooFit::bindFunction ; (; const char * ; name, . CFUNCD4DDDI ; func, . RooAbsReal & ; x, . RooAbsReal & ; y, . RooAbsReal & ; z, . RooAbsReal & ; w . ). Definition at line 41 of file RooCFunction4Binding.cxx. ◆ bindFunction() [17/24]. RooAbsReal * RooFit::bindFunction ; (; const char * ; name, . const ROOT::Math::IBaseFunctionMultiDim & ; ftor, . const RooArgList & ; vars . ). Definition at line 155 of file RooFunctorBinding.cxx. ◆ bindFunction() [18/24]. RooAbsReal * RooFit::bindFunction ; (; const char * ; name, . const ROOT::Math::IBaseFunctionOneDim & ; ftor, . RooAbsReal & ; vars . ). Definition at line 121 of file RooFunctor1DBinding.cxx. ◆ bindFunction() [19/24]. RooAbsReal * RooFit::bindFunction ; (; TF1 * ; func, . RooAbsReal & ; x . ). Bind a TFx function to RooFit variables. Also see RooTFnBinding. ; Definition at line 93 of file RooTFnBinding.cxx. ◆ bindFunction() [20/24]. RooAbsReal * RooFit::bindFunction ; (; TF1 * ; func, . RooAbsReal & ; x, . const RooArgList & ; params . ). Bind a TFx function to RooFit variables. Also see RooTFnBinding. ; Definition at line 105 of file RooTFnBinding.cxx. ◆ bindFunction() [21/24]. RooAbsReal * RooFit::bindFunction ; (; TF2 * ; func, . RooAbsReal & ; x, . RooAbsReal & ; y . ). Bind a TFx function to RooFit variables. Also see RooTFnBinding. ; Definition at line 97 of file RooTFnBinding.cxx. ◆ bindFunction() [22/24]. RooAbsReal * RooFit::bindFunction ; (; TF2 * ; func, . RooAbsReal & ; x, . RooAbsReal & ; y, . const RooArgList & ; params . ). Bind a TFx function to RooFit variables. Also see RooTFnBinding. ; Definition at line 109 of file RooTFnBinding.cxx. ◆ bindFunction() [23/24]. RooAbsReal * RooFit::bindFunction ; (; TF3 * ; func, . RooAbsReal & ; x, . RooAbsReal & ; y, . RooAbsReal & ; z . ). ",MatchSource.WIKI,doc/master/namespaceRooFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit.html
https://root.cern/doc/master/namespaceRooFit.html:28411,Modifiability,variab,variables,28411," const char * ; name, . CFUNCD4DDDI ; func, . RooAbsReal & ; x, . RooAbsReal & ; y, . RooAbsReal & ; z, . RooAbsReal & ; w . ). Definition at line 41 of file RooCFunction4Binding.cxx. ◆ bindFunction() [17/24]. RooAbsReal * RooFit::bindFunction ; (; const char * ; name, . const ROOT::Math::IBaseFunctionMultiDim & ; ftor, . const RooArgList & ; vars . ). Definition at line 155 of file RooFunctorBinding.cxx. ◆ bindFunction() [18/24]. RooAbsReal * RooFit::bindFunction ; (; const char * ; name, . const ROOT::Math::IBaseFunctionOneDim & ; ftor, . RooAbsReal & ; vars . ). Definition at line 121 of file RooFunctor1DBinding.cxx. ◆ bindFunction() [19/24]. RooAbsReal * RooFit::bindFunction ; (; TF1 * ; func, . RooAbsReal & ; x . ). Bind a TFx function to RooFit variables. Also see RooTFnBinding. ; Definition at line 93 of file RooTFnBinding.cxx. ◆ bindFunction() [20/24]. RooAbsReal * RooFit::bindFunction ; (; TF1 * ; func, . RooAbsReal & ; x, . const RooArgList & ; params . ). Bind a TFx function to RooFit variables. Also see RooTFnBinding. ; Definition at line 105 of file RooTFnBinding.cxx. ◆ bindFunction() [21/24]. RooAbsReal * RooFit::bindFunction ; (; TF2 * ; func, . RooAbsReal & ; x, . RooAbsReal & ; y . ). Bind a TFx function to RooFit variables. Also see RooTFnBinding. ; Definition at line 97 of file RooTFnBinding.cxx. ◆ bindFunction() [22/24]. RooAbsReal * RooFit::bindFunction ; (; TF2 * ; func, . RooAbsReal & ; x, . RooAbsReal & ; y, . const RooArgList & ; params . ). Bind a TFx function to RooFit variables. Also see RooTFnBinding. ; Definition at line 109 of file RooTFnBinding.cxx. ◆ bindFunction() [23/24]. RooAbsReal * RooFit::bindFunction ; (; TF3 * ; func, . RooAbsReal & ; x, . RooAbsReal & ; y, . RooAbsReal & ; z . ). Bind a TFx function to RooFit variables. Also see RooTFnBinding. ; Definition at line 101 of file RooTFnBinding.cxx. ◆ bindFunction() [24/24]. RooAbsReal * RooFit::bindFunction ; (; TF3 * ; func, . RooAbsReal & ; x, . RooAbsReal & ; y, . RooAbsReal &",MatchSource.WIKI,doc/master/namespaceRooFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit.html
https://root.cern/doc/master/namespaceRooFit.html:28651,Modifiability,variab,variables,28651,"ion ; (; const char * ; name, . const ROOT::Math::IBaseFunctionMultiDim & ; ftor, . const RooArgList & ; vars . ). Definition at line 155 of file RooFunctorBinding.cxx. ◆ bindFunction() [18/24]. RooAbsReal * RooFit::bindFunction ; (; const char * ; name, . const ROOT::Math::IBaseFunctionOneDim & ; ftor, . RooAbsReal & ; vars . ). Definition at line 121 of file RooFunctor1DBinding.cxx. ◆ bindFunction() [19/24]. RooAbsReal * RooFit::bindFunction ; (; TF1 * ; func, . RooAbsReal & ; x . ). Bind a TFx function to RooFit variables. Also see RooTFnBinding. ; Definition at line 93 of file RooTFnBinding.cxx. ◆ bindFunction() [20/24]. RooAbsReal * RooFit::bindFunction ; (; TF1 * ; func, . RooAbsReal & ; x, . const RooArgList & ; params . ). Bind a TFx function to RooFit variables. Also see RooTFnBinding. ; Definition at line 105 of file RooTFnBinding.cxx. ◆ bindFunction() [21/24]. RooAbsReal * RooFit::bindFunction ; (; TF2 * ; func, . RooAbsReal & ; x, . RooAbsReal & ; y . ). Bind a TFx function to RooFit variables. Also see RooTFnBinding. ; Definition at line 97 of file RooTFnBinding.cxx. ◆ bindFunction() [22/24]. RooAbsReal * RooFit::bindFunction ; (; TF2 * ; func, . RooAbsReal & ; x, . RooAbsReal & ; y, . const RooArgList & ; params . ). Bind a TFx function to RooFit variables. Also see RooTFnBinding. ; Definition at line 109 of file RooTFnBinding.cxx. ◆ bindFunction() [23/24]. RooAbsReal * RooFit::bindFunction ; (; TF3 * ; func, . RooAbsReal & ; x, . RooAbsReal & ; y, . RooAbsReal & ; z . ). Bind a TFx function to RooFit variables. Also see RooTFnBinding. ; Definition at line 101 of file RooTFnBinding.cxx. ◆ bindFunction() [24/24]. RooAbsReal * RooFit::bindFunction ; (; TF3 * ; func, . RooAbsReal & ; x, . RooAbsReal & ; y, . RooAbsReal & ; z, . const RooArgList & ; params . ). Bind a TFx function to RooFit variables. Also see RooTFnBinding. ; Definition at line 113 of file RooTFnBinding.cxx. ◆ bindPdf() [1/21]. RooAbsPdf * RooFit::bindPdf ; (; const char * ; name, . CFUNCD",MatchSource.WIKI,doc/master/namespaceRooFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit.html
https://root.cern/doc/master/namespaceRooFit.html:28921,Modifiability,variab,variables,28921,"ath::IBaseFunctionOneDim & ; ftor, . RooAbsReal & ; vars . ). Definition at line 121 of file RooFunctor1DBinding.cxx. ◆ bindFunction() [19/24]. RooAbsReal * RooFit::bindFunction ; (; TF1 * ; func, . RooAbsReal & ; x . ). Bind a TFx function to RooFit variables. Also see RooTFnBinding. ; Definition at line 93 of file RooTFnBinding.cxx. ◆ bindFunction() [20/24]. RooAbsReal * RooFit::bindFunction ; (; TF1 * ; func, . RooAbsReal & ; x, . const RooArgList & ; params . ). Bind a TFx function to RooFit variables. Also see RooTFnBinding. ; Definition at line 105 of file RooTFnBinding.cxx. ◆ bindFunction() [21/24]. RooAbsReal * RooFit::bindFunction ; (; TF2 * ; func, . RooAbsReal & ; x, . RooAbsReal & ; y . ). Bind a TFx function to RooFit variables. Also see RooTFnBinding. ; Definition at line 97 of file RooTFnBinding.cxx. ◆ bindFunction() [22/24]. RooAbsReal * RooFit::bindFunction ; (; TF2 * ; func, . RooAbsReal & ; x, . RooAbsReal & ; y, . const RooArgList & ; params . ). Bind a TFx function to RooFit variables. Also see RooTFnBinding. ; Definition at line 109 of file RooTFnBinding.cxx. ◆ bindFunction() [23/24]. RooAbsReal * RooFit::bindFunction ; (; TF3 * ; func, . RooAbsReal & ; x, . RooAbsReal & ; y, . RooAbsReal & ; z . ). Bind a TFx function to RooFit variables. Also see RooTFnBinding. ; Definition at line 101 of file RooTFnBinding.cxx. ◆ bindFunction() [24/24]. RooAbsReal * RooFit::bindFunction ; (; TF3 * ; func, . RooAbsReal & ; x, . RooAbsReal & ; y, . RooAbsReal & ; z, . const RooArgList & ; params . ). Bind a TFx function to RooFit variables. Also see RooTFnBinding. ; Definition at line 113 of file RooTFnBinding.cxx. ◆ bindPdf() [1/21]. RooAbsPdf * RooFit::bindPdf ; (; const char * ; name, . CFUNCD1D ; func, . RooAbsReal & ; x . ). Definition at line 65 of file RooCFunction1Binding.cxx. ◆ bindPdf() [2/21]. RooAbsPdf * RooFit::bindPdf ; (; const char * ; name, . CFUNCD1I ; func, . RooAbsReal & ; x . ). Definition at line 69 of file RooCFunction1Binding.cxx. ◆ bind",MatchSource.WIKI,doc/master/namespaceRooFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit.html
https://root.cern/doc/master/namespaceRooFit.html:29181,Modifiability,variab,variables,29181,". Also see RooTFnBinding. ; Definition at line 93 of file RooTFnBinding.cxx. ◆ bindFunction() [20/24]. RooAbsReal * RooFit::bindFunction ; (; TF1 * ; func, . RooAbsReal & ; x, . const RooArgList & ; params . ). Bind a TFx function to RooFit variables. Also see RooTFnBinding. ; Definition at line 105 of file RooTFnBinding.cxx. ◆ bindFunction() [21/24]. RooAbsReal * RooFit::bindFunction ; (; TF2 * ; func, . RooAbsReal & ; x, . RooAbsReal & ; y . ). Bind a TFx function to RooFit variables. Also see RooTFnBinding. ; Definition at line 97 of file RooTFnBinding.cxx. ◆ bindFunction() [22/24]. RooAbsReal * RooFit::bindFunction ; (; TF2 * ; func, . RooAbsReal & ; x, . RooAbsReal & ; y, . const RooArgList & ; params . ). Bind a TFx function to RooFit variables. Also see RooTFnBinding. ; Definition at line 109 of file RooTFnBinding.cxx. ◆ bindFunction() [23/24]. RooAbsReal * RooFit::bindFunction ; (; TF3 * ; func, . RooAbsReal & ; x, . RooAbsReal & ; y, . RooAbsReal & ; z . ). Bind a TFx function to RooFit variables. Also see RooTFnBinding. ; Definition at line 101 of file RooTFnBinding.cxx. ◆ bindFunction() [24/24]. RooAbsReal * RooFit::bindFunction ; (; TF3 * ; func, . RooAbsReal & ; x, . RooAbsReal & ; y, . RooAbsReal & ; z, . const RooArgList & ; params . ). Bind a TFx function to RooFit variables. Also see RooTFnBinding. ; Definition at line 113 of file RooTFnBinding.cxx. ◆ bindPdf() [1/21]. RooAbsPdf * RooFit::bindPdf ; (; const char * ; name, . CFUNCD1D ; func, . RooAbsReal & ; x . ). Definition at line 65 of file RooCFunction1Binding.cxx. ◆ bindPdf() [2/21]. RooAbsPdf * RooFit::bindPdf ; (; const char * ; name, . CFUNCD1I ; func, . RooAbsReal & ; x . ). Definition at line 69 of file RooCFunction1Binding.cxx. ◆ bindPdf() [3/21]. RooAbsPdf * RooFit::bindPdf ; (; const char * ; name, . CFUNCD2DD ; func, . RooAbsReal & ; x, . RooAbsReal & ; y . ). Definition at line 57 of file RooCFunction2Binding.cxx. ◆ bindPdf() [4/21]. RooAbsPdf * RooFit::bindPdf ; (; const char * ; name",MatchSource.WIKI,doc/master/namespaceRooFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit.html
https://root.cern/doc/master/namespaceRooFit.html:29472,Modifiability,variab,variables,29472," line 105 of file RooTFnBinding.cxx. ◆ bindFunction() [21/24]. RooAbsReal * RooFit::bindFunction ; (; TF2 * ; func, . RooAbsReal & ; x, . RooAbsReal & ; y . ). Bind a TFx function to RooFit variables. Also see RooTFnBinding. ; Definition at line 97 of file RooTFnBinding.cxx. ◆ bindFunction() [22/24]. RooAbsReal * RooFit::bindFunction ; (; TF2 * ; func, . RooAbsReal & ; x, . RooAbsReal & ; y, . const RooArgList & ; params . ). Bind a TFx function to RooFit variables. Also see RooTFnBinding. ; Definition at line 109 of file RooTFnBinding.cxx. ◆ bindFunction() [23/24]. RooAbsReal * RooFit::bindFunction ; (; TF3 * ; func, . RooAbsReal & ; x, . RooAbsReal & ; y, . RooAbsReal & ; z . ). Bind a TFx function to RooFit variables. Also see RooTFnBinding. ; Definition at line 101 of file RooTFnBinding.cxx. ◆ bindFunction() [24/24]. RooAbsReal * RooFit::bindFunction ; (; TF3 * ; func, . RooAbsReal & ; x, . RooAbsReal & ; y, . RooAbsReal & ; z, . const RooArgList & ; params . ). Bind a TFx function to RooFit variables. Also see RooTFnBinding. ; Definition at line 113 of file RooTFnBinding.cxx. ◆ bindPdf() [1/21]. RooAbsPdf * RooFit::bindPdf ; (; const char * ; name, . CFUNCD1D ; func, . RooAbsReal & ; x . ). Definition at line 65 of file RooCFunction1Binding.cxx. ◆ bindPdf() [2/21]. RooAbsPdf * RooFit::bindPdf ; (; const char * ; name, . CFUNCD1I ; func, . RooAbsReal & ; x . ). Definition at line 69 of file RooCFunction1Binding.cxx. ◆ bindPdf() [3/21]. RooAbsPdf * RooFit::bindPdf ; (; const char * ; name, . CFUNCD2DD ; func, . RooAbsReal & ; x, . RooAbsReal & ; y . ). Definition at line 57 of file RooCFunction2Binding.cxx. ◆ bindPdf() [4/21]. RooAbsPdf * RooFit::bindPdf ; (; const char * ; name, . CFUNCD2DI ; func, . RooAbsReal & ; x, . RooAbsReal & ; y . ). Definition at line 69 of file RooCFunction2Binding.cxx. ◆ bindPdf() [5/21]. RooAbsPdf * RooFit::bindPdf ; (; const char * ; name, . CFUNCD2ID ; func, . RooAbsReal & ; x, . RooAbsReal & ; y . ). Definition at line 61 of file R",MatchSource.WIKI,doc/master/namespaceRooFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit.html
https://root.cern/doc/master/namespaceRooFit.html:509,Testability,test,test,509,". ROOT: RooFit Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions ; RooFit Namespace Reference. The namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or other types of arguments). ; More... Namespaces; namespace  Detail;  ; namespace  Experimental;  ; namespace  JSONIO;  ; namespace  MultiProcess;  ; namespace  TestStatistics;  Namespace for new RooFit test statistic calculation. ;  . Classes; class  EvalBackend;  ; class  EvalContext;  ; class  Evaluator;  Evaluates a RooAbsReal object in other ways than recursive graph traversal. More...;  ; struct  NodeInfo;  A struct used by the Evaluator to store information on the RooAbsArgs in the computation graph. More...;  ; struct  UniqueId;  A UniqueId can be added as a class member to enhance any class with a unique identifier for each instantiated object. More...;  . Typedefs; typedef double(* CFUNCD1D) (double);  ; typedef double(* CFUNCD1I) (Int_t);  ; typedef double(* CFUNCD2DD) (double, double);  ; typedef double(* CFUNCD2DI) (double, Int_t);  ; typedef double(* CFUNCD2ID) (Int_t, double);  ; typedef double(* CFUNCD2II) (Int_t, Int_t);  ; typedef double(* CFUNCD2UD) (UInt_t, double);  ; typedef double(* CFUNCD3DDB) (double, double, bool);  ; typedef double(* CFUNCD3DDD) (double, double, double);  ; typedef double(* CFUNCD3DII) (double, Int_t, Int_t);  ; typedef double(* CFUNCD3UDD) (UInt_t, double, double);  ; typedef double(* CFUNCD3UDU) (UInt_t, double, UInt_t);  ; typedef double(* CFUNCD3UUD) (UInt_t, UInt_t, double);  ; typedef double(* CFUNCD4DDDB) (double, double, double, bool);  ; typedef double(* CFUNCD4DDDD) (double, double, double, double);  ; typedef double(* CFUNCD4DDDI) (double, double, double, Int_t);  ; using ModelConfig = RooStats::ModelConfig;  ; template<typename T > ; using OwningPtr = T *;  An alias for raw pointers for indicating that the retur",MatchSource.WIKI,doc/master/namespaceRooFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit.html
https://root.cern/doc/master/namespaceRooFit.html:19934,Usability,guid,guides,19934," Z=1);  ; RooCmdArg VisualizeError (const RooFitResult &fitres, const RooArgSet &param, double Z=1, bool linearMethod=true);  ; RooCmdArg VisualizeError (const RooFitResult &fitres, double Z=1, bool linearMethod=true);  ; RooCmdArg VLines ();  ; RooCmdArg Warnings (bool flag=true);  ; RooCmdArg Weight (double wgt);  ; RooCmdArg WeightVar (const char *name=""weight"", bool reinterpretAsWeight=false);  ; RooCmdArg WeightVar (const RooRealVar &arg, bool reinterpretAsWeight=false);  ; RooCmdArg What (const char *str);  ; RooCmdArg XErrorSize (double width);  ; RooCmdArg YVar (const RooAbsRealLValue &var, const RooCmdArg &arg={});  ; RooCmdArg ZVar (const RooAbsRealLValue &var, const RooCmdArg &arg={});  . Detailed Description; The namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or other types of arguments). ; These switches are documented with the relevant functions, e.g. RooAbsPdf::fitTo(). For an introduction to RooFit (not the namespace), check the user's guides, courses or the RooFit chapter of the Manual. ; Typedef Documentation. ◆ CFUNCD1D. typedef double(* RooFit::CFUNCD1D) (double). Definition at line 31 of file RooCFunction1Binding.h. ◆ CFUNCD1I. typedef double(* RooFit::CFUNCD1I) (Int_t). Definition at line 32 of file RooCFunction1Binding.h. ◆ CFUNCD2DD. typedef double(* RooFit::CFUNCD2DD) (double, double). Definition at line 30 of file RooCFunction2Binding.h. ◆ CFUNCD2DI. typedef double(* RooFit::CFUNCD2DI) (double, Int_t). Definition at line 33 of file RooCFunction2Binding.h. ◆ CFUNCD2ID. typedef double(* RooFit::CFUNCD2ID) (Int_t, double). Definition at line 31 of file RooCFunction2Binding.h. ◆ CFUNCD2II. typedef double(* RooFit::CFUNCD2II) (Int_t, Int_t). Definition at line 34 of file RooCFunction2Binding.h. ◆ CFUNCD2UD. typedef double(* RooFit::CFUNCD2UD) (UInt_t, double). Definition at line 32 of file RooCFunction2Binding.h. ◆ CFUNCD3DDB. typedef double(* RooFit::CFUNCD3DDB) (double, double, bool). Definition at lin",MatchSource.WIKI,doc/master/namespaceRooFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit.html
https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html:1515,Availability,avail,available,1515,"east one coefficient. ;  ; double bernsteinIntegral (double xlo, double xhi, double xmin, double xmax, double *coefs, int nCoefs);  ; double bifurGauss (double x, double mean, double sigmaL, double sigmaR);  ; double bifurGaussIntegral (double xMin, double xMax, double mean, double sigmaL, double sigmaR);  ; double binomial (int n, int k);  Calculates the binomial coefficient n over k. ;  ; double cbShape (double m, double m0, double sigma, double alpha, double n);  ; double cbShapeIntegral (double mMin, double mMax, double m0, double sigma, double alpha, double n);  ; double chebychev (double *coeffs, unsigned int nCoeffs, double x_in, double xMin, double xMax);  ; double chebychevIntegral (double const *coeffs, unsigned int nCoeffs, double xMin, double xMax, double xMinFull, double xMaxFull);  ; double constraintSum (double const *comp, unsigned int compSize);  ; double efficiency (double effFuncVal, int catIndex, int sigCatIndex);  ; double effProd (double eff, double pdf);  ; double exponentialIntegral (double xMin, double xMax, double constant);  ; double fast_fma (double x, double y, double z) noexcept;  use fast FMA if available, fall back to normal arithmetic if not ;  ; double flexibleInterp (unsigned int code, double const *params, unsigned int n, double const *low, double const *high, double boundary, double nominal, int doCutoff);  ; double flexibleInterpSingle (unsigned int code, double low, double high, double boundary, double nominal, double paramVal, double res);  ; double gaussian (double x, double mean, double sigma);  Function to evaluate an un-normalized RooGaussian. ;  ; double gaussianIntegral (double xMin, double xMax, double mean, double sigma);  Function to calculate the integral of an un-normalized RooGaussian over x. ;  ; unsigned int getUniformBinning (double low, double high, double val, unsigned int numBins);  ; double interpolate1d (double low, double high, double val, unsigned int numBins, double const *vals);  ; double landau (double ",MatchSource.WIKI,doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html
https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html:6612,Availability,avail,available,6612,"Min, . double ; xMax, . double ; xMinFull, . double ; xMaxFull . ). inline . Definition at line 513 of file MathFuncs.h. ◆ constraintSum(). double RooFit::Detail::MathFuncs::constraintSum ; (; double const * ; comp, . unsigned int ; compSize . ). inline . Definition at line 163 of file MathFuncs.h. ◆ efficiency(). double RooFit::Detail::MathFuncs::efficiency ; (; double ; effFuncVal, . int ; catIndex, . int ; sigCatIndex . ). inline . Definition at line 117 of file MathFuncs.h. ◆ effProd(). double RooFit::Detail::MathFuncs::effProd ; (; double ; eff, . double ; pdf . ). inline . Definition at line 348 of file MathFuncs.h. ◆ exponentialIntegral(). double RooFit::Detail::MathFuncs::exponentialIntegral ; (; double ; xMin, . double ; xMax, . double ; constant . ). inline . Definition at line 470 of file MathFuncs.h. ◆ fast_fma(). double RooFit::Detail::MathFuncs::fast_fma ; (; double ; x, . double ; y, . double ; z . ). inlinenoexcept . use fast FMA if available, fall back to normal arithmetic if not ; Definition at line 500 of file MathFuncs.h. ◆ flexibleInterp(). double RooFit::Detail::MathFuncs::flexibleInterp ; (; unsigned int ; code, . double const * ; params, . unsigned int ; n, . double const * ; low, . double const * ; high, . double ; boundary, . double ; nominal, . int ; doCutoff . ). inline . Definition at line 320 of file MathFuncs.h. ◆ flexibleInterpSingle(). double RooFit::Detail::MathFuncs::flexibleInterpSingle ; (; unsigned int ; code, . double ; low, . double ; high, . double ; boundary, . double ; nominal, . double ; paramVal, . double ; res . ). inline . Definition at line 213 of file MathFuncs.h. ◆ gaussian(). double RooFit::Detail::MathFuncs::gaussian ; (; double ; x, . double ; mean, . double ; sigma . ). inline . Function to evaluate an un-normalized RooGaussian. ; Definition at line 86 of file MathFuncs.h. ◆ gaussianIntegral(). double RooFit::Detail::MathFuncs::gaussianIntegral ; (; double ; xMin, . double ; xMax, . double ; mean, . double ; sigma",MatchSource.WIKI,doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html
https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html:7878,Deployability,integrat,integrate,7878,"low, . double const * ; high, . double ; boundary, . double ; nominal, . int ; doCutoff . ). inline . Definition at line 320 of file MathFuncs.h. ◆ flexibleInterpSingle(). double RooFit::Detail::MathFuncs::flexibleInterpSingle ; (; unsigned int ; code, . double ; low, . double ; high, . double ; boundary, . double ; nominal, . double ; paramVal, . double ; res . ). inline . Definition at line 213 of file MathFuncs.h. ◆ gaussian(). double RooFit::Detail::MathFuncs::gaussian ; (; double ; x, . double ; mean, . double ; sigma . ). inline . Function to evaluate an un-normalized RooGaussian. ; Definition at line 86 of file MathFuncs.h. ◆ gaussianIntegral(). double RooFit::Detail::MathFuncs::gaussianIntegral ; (; double ; xMin, . double ; xMax, . double ; mean, . double ; sigma . ). inline . Function to calculate the integral of an un-normalized RooGaussian over x. ; To calculate the integral over mean, just interchange the respective values of x and mean. Parameters. xMinMinimum value of variable to integrate wrt. ; xMaxMaximum value of of variable to integrate wrt. ; meanMean. ; sigmaSigma. . ReturnsThe integral of an un-normalized RooGaussian over the value in x. ; Definition at line 418 of file MathFuncs.h. ◆ getUniformBinning(). unsigned int RooFit::Detail::MathFuncs::getUniformBinning ; (; double ; low, . double ; high, . double ; val, . unsigned int ; numBins . ). inline . Definition at line 172 of file MathFuncs.h. ◆ interpolate1d(). double RooFit::Detail::MathFuncs::interpolate1d ; (; double ; low, . double ; high, . double ; val, . unsigned int ; numBins, . double const * ; vals . ). inline . Definition at line 178 of file MathFuncs.h. ◆ landau(). double RooFit::Detail::MathFuncs::landau ; (; double ; x, . double ; mu, . double ; sigma . ). inline . Definition at line 331 of file MathFuncs.h. ◆ logNormal(). double RooFit::Detail::MathFuncs::logNormal ; (; double ; x, . double ; k, . double ; m0 . ). inline . Definition at line 338 of file MathFuncs.h. ◆ logNorma",MatchSource.WIKI,doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html
https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html:7931,Deployability,integrat,integrate,7931," . double ; nominal, . int ; doCutoff . ). inline . Definition at line 320 of file MathFuncs.h. ◆ flexibleInterpSingle(). double RooFit::Detail::MathFuncs::flexibleInterpSingle ; (; unsigned int ; code, . double ; low, . double ; high, . double ; boundary, . double ; nominal, . double ; paramVal, . double ; res . ). inline . Definition at line 213 of file MathFuncs.h. ◆ gaussian(). double RooFit::Detail::MathFuncs::gaussian ; (; double ; x, . double ; mean, . double ; sigma . ). inline . Function to evaluate an un-normalized RooGaussian. ; Definition at line 86 of file MathFuncs.h. ◆ gaussianIntegral(). double RooFit::Detail::MathFuncs::gaussianIntegral ; (; double ; xMin, . double ; xMax, . double ; mean, . double ; sigma . ). inline . Function to calculate the integral of an un-normalized RooGaussian over x. ; To calculate the integral over mean, just interchange the respective values of x and mean. Parameters. xMinMinimum value of variable to integrate wrt. ; xMaxMaximum value of of variable to integrate wrt. ; meanMean. ; sigmaSigma. . ReturnsThe integral of an un-normalized RooGaussian over the value in x. ; Definition at line 418 of file MathFuncs.h. ◆ getUniformBinning(). unsigned int RooFit::Detail::MathFuncs::getUniformBinning ; (; double ; low, . double ; high, . double ; val, . unsigned int ; numBins . ). inline . Definition at line 172 of file MathFuncs.h. ◆ interpolate1d(). double RooFit::Detail::MathFuncs::interpolate1d ; (; double ; low, . double ; high, . double ; val, . unsigned int ; numBins, . double const * ; vals . ). inline . Definition at line 178 of file MathFuncs.h. ◆ landau(). double RooFit::Detail::MathFuncs::landau ; (; double ; x, . double ; mu, . double ; sigma . ). inline . Definition at line 331 of file MathFuncs.h. ◆ logNormal(). double RooFit::Detail::MathFuncs::logNormal ; (; double ; x, . double ; k, . double ; m0 . ). inline . Definition at line 338 of file MathFuncs.h. ◆ logNormalIntegral(). double RooFit::Detail::MathFuncs::logN",MatchSource.WIKI,doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html
https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html:7878,Integrability,integrat,integrate,7878,"low, . double const * ; high, . double ; boundary, . double ; nominal, . int ; doCutoff . ). inline . Definition at line 320 of file MathFuncs.h. ◆ flexibleInterpSingle(). double RooFit::Detail::MathFuncs::flexibleInterpSingle ; (; unsigned int ; code, . double ; low, . double ; high, . double ; boundary, . double ; nominal, . double ; paramVal, . double ; res . ). inline . Definition at line 213 of file MathFuncs.h. ◆ gaussian(). double RooFit::Detail::MathFuncs::gaussian ; (; double ; x, . double ; mean, . double ; sigma . ). inline . Function to evaluate an un-normalized RooGaussian. ; Definition at line 86 of file MathFuncs.h. ◆ gaussianIntegral(). double RooFit::Detail::MathFuncs::gaussianIntegral ; (; double ; xMin, . double ; xMax, . double ; mean, . double ; sigma . ). inline . Function to calculate the integral of an un-normalized RooGaussian over x. ; To calculate the integral over mean, just interchange the respective values of x and mean. Parameters. xMinMinimum value of variable to integrate wrt. ; xMaxMaximum value of of variable to integrate wrt. ; meanMean. ; sigmaSigma. . ReturnsThe integral of an un-normalized RooGaussian over the value in x. ; Definition at line 418 of file MathFuncs.h. ◆ getUniformBinning(). unsigned int RooFit::Detail::MathFuncs::getUniformBinning ; (; double ; low, . double ; high, . double ; val, . unsigned int ; numBins . ). inline . Definition at line 172 of file MathFuncs.h. ◆ interpolate1d(). double RooFit::Detail::MathFuncs::interpolate1d ; (; double ; low, . double ; high, . double ; val, . unsigned int ; numBins, . double const * ; vals . ). inline . Definition at line 178 of file MathFuncs.h. ◆ landau(). double RooFit::Detail::MathFuncs::landau ; (; double ; x, . double ; mu, . double ; sigma . ). inline . Definition at line 331 of file MathFuncs.h. ◆ logNormal(). double RooFit::Detail::MathFuncs::logNormal ; (; double ; x, . double ; k, . double ; m0 . ). inline . Definition at line 338 of file MathFuncs.h. ◆ logNorma",MatchSource.WIKI,doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html
https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html:7931,Integrability,integrat,integrate,7931," . double ; nominal, . int ; doCutoff . ). inline . Definition at line 320 of file MathFuncs.h. ◆ flexibleInterpSingle(). double RooFit::Detail::MathFuncs::flexibleInterpSingle ; (; unsigned int ; code, . double ; low, . double ; high, . double ; boundary, . double ; nominal, . double ; paramVal, . double ; res . ). inline . Definition at line 213 of file MathFuncs.h. ◆ gaussian(). double RooFit::Detail::MathFuncs::gaussian ; (; double ; x, . double ; mean, . double ; sigma . ). inline . Function to evaluate an un-normalized RooGaussian. ; Definition at line 86 of file MathFuncs.h. ◆ gaussianIntegral(). double RooFit::Detail::MathFuncs::gaussianIntegral ; (; double ; xMin, . double ; xMax, . double ; mean, . double ; sigma . ). inline . Function to calculate the integral of an un-normalized RooGaussian over x. ; To calculate the integral over mean, just interchange the respective values of x and mean. Parameters. xMinMinimum value of variable to integrate wrt. ; xMaxMaximum value of of variable to integrate wrt. ; meanMean. ; sigmaSigma. . ReturnsThe integral of an un-normalized RooGaussian over the value in x. ; Definition at line 418 of file MathFuncs.h. ◆ getUniformBinning(). unsigned int RooFit::Detail::MathFuncs::getUniformBinning ; (; double ; low, . double ; high, . double ; val, . unsigned int ; numBins . ). inline . Definition at line 172 of file MathFuncs.h. ◆ interpolate1d(). double RooFit::Detail::MathFuncs::interpolate1d ; (; double ; low, . double ; high, . double ; val, . unsigned int ; numBins, . double const * ; vals . ). inline . Definition at line 178 of file MathFuncs.h. ◆ landau(). double RooFit::Detail::MathFuncs::landau ; (; double ; x, . double ; mu, . double ; sigma . ). inline . Definition at line 331 of file MathFuncs.h. ◆ logNormal(). double RooFit::Detail::MathFuncs::logNormal ; (; double ; x, . double ; k, . double ; m0 . ). inline . Definition at line 338 of file MathFuncs.h. ◆ logNormalIntegral(). double RooFit::Detail::MathFuncs::logN",MatchSource.WIKI,doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html
https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html:1576,Modifiability,flexible,flexibleInterp,1576,"east one coefficient. ;  ; double bernsteinIntegral (double xlo, double xhi, double xmin, double xmax, double *coefs, int nCoefs);  ; double bifurGauss (double x, double mean, double sigmaL, double sigmaR);  ; double bifurGaussIntegral (double xMin, double xMax, double mean, double sigmaL, double sigmaR);  ; double binomial (int n, int k);  Calculates the binomial coefficient n over k. ;  ; double cbShape (double m, double m0, double sigma, double alpha, double n);  ; double cbShapeIntegral (double mMin, double mMax, double m0, double sigma, double alpha, double n);  ; double chebychev (double *coeffs, unsigned int nCoeffs, double x_in, double xMin, double xMax);  ; double chebychevIntegral (double const *coeffs, unsigned int nCoeffs, double xMin, double xMax, double xMinFull, double xMaxFull);  ; double constraintSum (double const *comp, unsigned int compSize);  ; double efficiency (double effFuncVal, int catIndex, int sigCatIndex);  ; double effProd (double eff, double pdf);  ; double exponentialIntegral (double xMin, double xMax, double constant);  ; double fast_fma (double x, double y, double z) noexcept;  use fast FMA if available, fall back to normal arithmetic if not ;  ; double flexibleInterp (unsigned int code, double const *params, unsigned int n, double const *low, double const *high, double boundary, double nominal, int doCutoff);  ; double flexibleInterpSingle (unsigned int code, double low, double high, double boundary, double nominal, double paramVal, double res);  ; double gaussian (double x, double mean, double sigma);  Function to evaluate an un-normalized RooGaussian. ;  ; double gaussianIntegral (double xMin, double xMax, double mean, double sigma);  Function to calculate the integral of an un-normalized RooGaussian over x. ;  ; unsigned int getUniformBinning (double low, double high, double val, unsigned int numBins);  ; double interpolate1d (double low, double high, double val, unsigned int numBins, double const *vals);  ; double landau (double ",MatchSource.WIKI,doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html
https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html:1746,Modifiability,flexible,flexibleInterpSingle,1746,"east one coefficient. ;  ; double bernsteinIntegral (double xlo, double xhi, double xmin, double xmax, double *coefs, int nCoefs);  ; double bifurGauss (double x, double mean, double sigmaL, double sigmaR);  ; double bifurGaussIntegral (double xMin, double xMax, double mean, double sigmaL, double sigmaR);  ; double binomial (int n, int k);  Calculates the binomial coefficient n over k. ;  ; double cbShape (double m, double m0, double sigma, double alpha, double n);  ; double cbShapeIntegral (double mMin, double mMax, double m0, double sigma, double alpha, double n);  ; double chebychev (double *coeffs, unsigned int nCoeffs, double x_in, double xMin, double xMax);  ; double chebychevIntegral (double const *coeffs, unsigned int nCoeffs, double xMin, double xMax, double xMinFull, double xMaxFull);  ; double constraintSum (double const *comp, unsigned int compSize);  ; double efficiency (double effFuncVal, int catIndex, int sigCatIndex);  ; double effProd (double eff, double pdf);  ; double exponentialIntegral (double xMin, double xMax, double constant);  ; double fast_fma (double x, double y, double z) noexcept;  use fast FMA if available, fall back to normal arithmetic if not ;  ; double flexibleInterp (unsigned int code, double const *params, unsigned int n, double const *low, double const *high, double boundary, double nominal, int doCutoff);  ; double flexibleInterpSingle (unsigned int code, double low, double high, double boundary, double nominal, double paramVal, double res);  ; double gaussian (double x, double mean, double sigma);  Function to evaluate an un-normalized RooGaussian. ;  ; double gaussianIntegral (double xMin, double xMax, double mean, double sigma);  Function to calculate the integral of an un-normalized RooGaussian over x. ;  ; unsigned int getUniformBinning (double low, double high, double val, unsigned int numBins);  ; double interpolate1d (double low, double high, double val, unsigned int numBins, double const *vals);  ; double landau (double ",MatchSource.WIKI,doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html
https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html:6709,Modifiability,flexible,flexibleInterp,6709," inline . Definition at line 513 of file MathFuncs.h. ◆ constraintSum(). double RooFit::Detail::MathFuncs::constraintSum ; (; double const * ; comp, . unsigned int ; compSize . ). inline . Definition at line 163 of file MathFuncs.h. ◆ efficiency(). double RooFit::Detail::MathFuncs::efficiency ; (; double ; effFuncVal, . int ; catIndex, . int ; sigCatIndex . ). inline . Definition at line 117 of file MathFuncs.h. ◆ effProd(). double RooFit::Detail::MathFuncs::effProd ; (; double ; eff, . double ; pdf . ). inline . Definition at line 348 of file MathFuncs.h. ◆ exponentialIntegral(). double RooFit::Detail::MathFuncs::exponentialIntegral ; (; double ; xMin, . double ; xMax, . double ; constant . ). inline . Definition at line 470 of file MathFuncs.h. ◆ fast_fma(). double RooFit::Detail::MathFuncs::fast_fma ; (; double ; x, . double ; y, . double ; z . ). inlinenoexcept . use fast FMA if available, fall back to normal arithmetic if not ; Definition at line 500 of file MathFuncs.h. ◆ flexibleInterp(). double RooFit::Detail::MathFuncs::flexibleInterp ; (; unsigned int ; code, . double const * ; params, . unsigned int ; n, . double const * ; low, . double const * ; high, . double ; boundary, . double ; nominal, . int ; doCutoff . ). inline . Definition at line 320 of file MathFuncs.h. ◆ flexibleInterpSingle(). double RooFit::Detail::MathFuncs::flexibleInterpSingle ; (; unsigned int ; code, . double ; low, . double ; high, . double ; boundary, . double ; nominal, . double ; paramVal, . double ; res . ). inline . Definition at line 213 of file MathFuncs.h. ◆ gaussian(). double RooFit::Detail::MathFuncs::gaussian ; (; double ; x, . double ; mean, . double ; sigma . ). inline . Function to evaluate an un-normalized RooGaussian. ; Definition at line 86 of file MathFuncs.h. ◆ gaussianIntegral(). double RooFit::Detail::MathFuncs::gaussianIntegral ; (; double ; xMin, . double ; xMax, . double ; mean, . double ; sigma . ). inline . Function to calculate the integral of an un-normali",MatchSource.WIKI,doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html
https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html:6761,Modifiability,flexible,flexibleInterp,6761,"cs.h. ◆ constraintSum(). double RooFit::Detail::MathFuncs::constraintSum ; (; double const * ; comp, . unsigned int ; compSize . ). inline . Definition at line 163 of file MathFuncs.h. ◆ efficiency(). double RooFit::Detail::MathFuncs::efficiency ; (; double ; effFuncVal, . int ; catIndex, . int ; sigCatIndex . ). inline . Definition at line 117 of file MathFuncs.h. ◆ effProd(). double RooFit::Detail::MathFuncs::effProd ; (; double ; eff, . double ; pdf . ). inline . Definition at line 348 of file MathFuncs.h. ◆ exponentialIntegral(). double RooFit::Detail::MathFuncs::exponentialIntegral ; (; double ; xMin, . double ; xMax, . double ; constant . ). inline . Definition at line 470 of file MathFuncs.h. ◆ fast_fma(). double RooFit::Detail::MathFuncs::fast_fma ; (; double ; x, . double ; y, . double ; z . ). inlinenoexcept . use fast FMA if available, fall back to normal arithmetic if not ; Definition at line 500 of file MathFuncs.h. ◆ flexibleInterp(). double RooFit::Detail::MathFuncs::flexibleInterp ; (; unsigned int ; code, . double const * ; params, . unsigned int ; n, . double const * ; low, . double const * ; high, . double ; boundary, . double ; nominal, . int ; doCutoff . ). inline . Definition at line 320 of file MathFuncs.h. ◆ flexibleInterpSingle(). double RooFit::Detail::MathFuncs::flexibleInterpSingle ; (; unsigned int ; code, . double ; low, . double ; high, . double ; boundary, . double ; nominal, . double ; paramVal, . double ; res . ). inline . Definition at line 213 of file MathFuncs.h. ◆ gaussian(). double RooFit::Detail::MathFuncs::gaussian ; (; double ; x, . double ; mean, . double ; sigma . ). inline . Function to evaluate an un-normalized RooGaussian. ; Definition at line 86 of file MathFuncs.h. ◆ gaussianIntegral(). double RooFit::Detail::MathFuncs::gaussianIntegral ; (; double ; xMin, . double ; xMax, . double ; mean, . double ; sigma . ). inline . Function to calculate the integral of an un-normalized RooGaussian over x. ; To calculate the integr",MatchSource.WIKI,doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html
https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html:7016,Modifiability,flexible,flexibleInterpSingle,7016,"fFuncVal, . int ; catIndex, . int ; sigCatIndex . ). inline . Definition at line 117 of file MathFuncs.h. ◆ effProd(). double RooFit::Detail::MathFuncs::effProd ; (; double ; eff, . double ; pdf . ). inline . Definition at line 348 of file MathFuncs.h. ◆ exponentialIntegral(). double RooFit::Detail::MathFuncs::exponentialIntegral ; (; double ; xMin, . double ; xMax, . double ; constant . ). inline . Definition at line 470 of file MathFuncs.h. ◆ fast_fma(). double RooFit::Detail::MathFuncs::fast_fma ; (; double ; x, . double ; y, . double ; z . ). inlinenoexcept . use fast FMA if available, fall back to normal arithmetic if not ; Definition at line 500 of file MathFuncs.h. ◆ flexibleInterp(). double RooFit::Detail::MathFuncs::flexibleInterp ; (; unsigned int ; code, . double const * ; params, . unsigned int ; n, . double const * ; low, . double const * ; high, . double ; boundary, . double ; nominal, . int ; doCutoff . ). inline . Definition at line 320 of file MathFuncs.h. ◆ flexibleInterpSingle(). double RooFit::Detail::MathFuncs::flexibleInterpSingle ; (; unsigned int ; code, . double ; low, . double ; high, . double ; boundary, . double ; nominal, . double ; paramVal, . double ; res . ). inline . Definition at line 213 of file MathFuncs.h. ◆ gaussian(). double RooFit::Detail::MathFuncs::gaussian ; (; double ; x, . double ; mean, . double ; sigma . ). inline . Function to evaluate an un-normalized RooGaussian. ; Definition at line 86 of file MathFuncs.h. ◆ gaussianIntegral(). double RooFit::Detail::MathFuncs::gaussianIntegral ; (; double ; xMin, . double ; xMax, . double ; mean, . double ; sigma . ). inline . Function to calculate the integral of an un-normalized RooGaussian over x. ; To calculate the integral over mean, just interchange the respective values of x and mean. Parameters. xMinMinimum value of variable to integrate wrt. ; xMaxMaximum value of of variable to integrate wrt. ; meanMean. ; sigmaSigma. . ReturnsThe integral of an un-normalized RooGaussian ",MatchSource.WIKI,doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html
https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html:7074,Modifiability,flexible,flexibleInterpSingle,7074,"nline . Definition at line 117 of file MathFuncs.h. ◆ effProd(). double RooFit::Detail::MathFuncs::effProd ; (; double ; eff, . double ; pdf . ). inline . Definition at line 348 of file MathFuncs.h. ◆ exponentialIntegral(). double RooFit::Detail::MathFuncs::exponentialIntegral ; (; double ; xMin, . double ; xMax, . double ; constant . ). inline . Definition at line 470 of file MathFuncs.h. ◆ fast_fma(). double RooFit::Detail::MathFuncs::fast_fma ; (; double ; x, . double ; y, . double ; z . ). inlinenoexcept . use fast FMA if available, fall back to normal arithmetic if not ; Definition at line 500 of file MathFuncs.h. ◆ flexibleInterp(). double RooFit::Detail::MathFuncs::flexibleInterp ; (; unsigned int ; code, . double const * ; params, . unsigned int ; n, . double const * ; low, . double const * ; high, . double ; boundary, . double ; nominal, . int ; doCutoff . ). inline . Definition at line 320 of file MathFuncs.h. ◆ flexibleInterpSingle(). double RooFit::Detail::MathFuncs::flexibleInterpSingle ; (; unsigned int ; code, . double ; low, . double ; high, . double ; boundary, . double ; nominal, . double ; paramVal, . double ; res . ). inline . Definition at line 213 of file MathFuncs.h. ◆ gaussian(). double RooFit::Detail::MathFuncs::gaussian ; (; double ; x, . double ; mean, . double ; sigma . ). inline . Function to evaluate an un-normalized RooGaussian. ; Definition at line 86 of file MathFuncs.h. ◆ gaussianIntegral(). double RooFit::Detail::MathFuncs::gaussianIntegral ; (; double ; xMin, . double ; xMax, . double ; mean, . double ; sigma . ). inline . Function to calculate the integral of an un-normalized RooGaussian over x. ; To calculate the integral over mean, just interchange the respective values of x and mean. Parameters. xMinMinimum value of variable to integrate wrt. ; xMaxMaximum value of of variable to integrate wrt. ; meanMean. ; sigmaSigma. . ReturnsThe integral of an un-normalized RooGaussian over the value in x. ; Definition at line 418 of file M",MatchSource.WIKI,doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html
https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html:7866,Modifiability,variab,variable,7866,"low, . double const * ; high, . double ; boundary, . double ; nominal, . int ; doCutoff . ). inline . Definition at line 320 of file MathFuncs.h. ◆ flexibleInterpSingle(). double RooFit::Detail::MathFuncs::flexibleInterpSingle ; (; unsigned int ; code, . double ; low, . double ; high, . double ; boundary, . double ; nominal, . double ; paramVal, . double ; res . ). inline . Definition at line 213 of file MathFuncs.h. ◆ gaussian(). double RooFit::Detail::MathFuncs::gaussian ; (; double ; x, . double ; mean, . double ; sigma . ). inline . Function to evaluate an un-normalized RooGaussian. ; Definition at line 86 of file MathFuncs.h. ◆ gaussianIntegral(). double RooFit::Detail::MathFuncs::gaussianIntegral ; (; double ; xMin, . double ; xMax, . double ; mean, . double ; sigma . ). inline . Function to calculate the integral of an un-normalized RooGaussian over x. ; To calculate the integral over mean, just interchange the respective values of x and mean. Parameters. xMinMinimum value of variable to integrate wrt. ; xMaxMaximum value of of variable to integrate wrt. ; meanMean. ; sigmaSigma. . ReturnsThe integral of an un-normalized RooGaussian over the value in x. ; Definition at line 418 of file MathFuncs.h. ◆ getUniformBinning(). unsigned int RooFit::Detail::MathFuncs::getUniformBinning ; (; double ; low, . double ; high, . double ; val, . unsigned int ; numBins . ). inline . Definition at line 172 of file MathFuncs.h. ◆ interpolate1d(). double RooFit::Detail::MathFuncs::interpolate1d ; (; double ; low, . double ; high, . double ; val, . unsigned int ; numBins, . double const * ; vals . ). inline . Definition at line 178 of file MathFuncs.h. ◆ landau(). double RooFit::Detail::MathFuncs::landau ; (; double ; x, . double ; mu, . double ; sigma . ). inline . Definition at line 331 of file MathFuncs.h. ◆ logNormal(). double RooFit::Detail::MathFuncs::logNormal ; (; double ; x, . double ; k, . double ; m0 . ). inline . Definition at line 338 of file MathFuncs.h. ◆ logNorma",MatchSource.WIKI,doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html
https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html:7919,Modifiability,variab,variable,7919," . double ; nominal, . int ; doCutoff . ). inline . Definition at line 320 of file MathFuncs.h. ◆ flexibleInterpSingle(). double RooFit::Detail::MathFuncs::flexibleInterpSingle ; (; unsigned int ; code, . double ; low, . double ; high, . double ; boundary, . double ; nominal, . double ; paramVal, . double ; res . ). inline . Definition at line 213 of file MathFuncs.h. ◆ gaussian(). double RooFit::Detail::MathFuncs::gaussian ; (; double ; x, . double ; mean, . double ; sigma . ). inline . Function to evaluate an un-normalized RooGaussian. ; Definition at line 86 of file MathFuncs.h. ◆ gaussianIntegral(). double RooFit::Detail::MathFuncs::gaussianIntegral ; (; double ; xMin, . double ; xMax, . double ; mean, . double ; sigma . ). inline . Function to calculate the integral of an un-normalized RooGaussian over x. ; To calculate the integral over mean, just interchange the respective values of x and mean. Parameters. xMinMinimum value of variable to integrate wrt. ; xMaxMaximum value of of variable to integrate wrt. ; meanMean. ; sigmaSigma. . ReturnsThe integral of an un-normalized RooGaussian over the value in x. ; Definition at line 418 of file MathFuncs.h. ◆ getUniformBinning(). unsigned int RooFit::Detail::MathFuncs::getUniformBinning ; (; double ; low, . double ; high, . double ; val, . unsigned int ; numBins . ). inline . Definition at line 172 of file MathFuncs.h. ◆ interpolate1d(). double RooFit::Detail::MathFuncs::interpolate1d ; (; double ; low, . double ; high, . double ; val, . unsigned int ; numBins, . double const * ; vals . ). inline . Definition at line 178 of file MathFuncs.h. ◆ landau(). double RooFit::Detail::MathFuncs::landau ; (; double ; x, . double ; mu, . double ; sigma . ). inline . Definition at line 331 of file MathFuncs.h. ◆ logNormal(). double RooFit::Detail::MathFuncs::logNormal ; (; double ; x, . double ; k, . double ; m0 . ). inline . Definition at line 338 of file MathFuncs.h. ◆ logNormalIntegral(). double RooFit::Detail::MathFuncs::logN",MatchSource.WIKI,doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html
https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html:2411,Testability,log,logNormal,2411," *params, unsigned int n, double const *low, double const *high, double boundary, double nominal, int doCutoff);  ; double flexibleInterpSingle (unsigned int code, double low, double high, double boundary, double nominal, double paramVal, double res);  ; double gaussian (double x, double mean, double sigma);  Function to evaluate an un-normalized RooGaussian. ;  ; double gaussianIntegral (double xMin, double xMax, double mean, double sigma);  Function to calculate the integral of an un-normalized RooGaussian over x. ;  ; unsigned int getUniformBinning (double low, double high, double val, unsigned int numBins);  ; double interpolate1d (double low, double high, double val, unsigned int numBins, double const *vals);  ; double landau (double x, double mu, double sigma);  ; double logNormal (double x, double k, double m0);  ; double logNormalIntegral (double xMin, double xMax, double m0, double k);  ; double logNormalIntegralStandard (double xMin, double xMax, double mu, double sigma);  ; double logNormalStandard (double x, double sigma, double mu);  ; double nll (double pdf, double weight, int binnedL, int doBinOffset);  ; double poisson (double x, double par);  ; double poissonIntegral (int code, double mu, double x, double integrandMin, double integrandMax, unsigned int protectNegative);  ; template<bool pdfMode = false> ; double polynomial (double const *coeffs, int nCoeffs, int lowestOrder, double x);  In pdfMode, a coefficient for the constant term of 1.0 is implied if lowestOrder > 0. ;  ; template<bool pdfMode = false> ; double polynomialIntegral (double const *coeffs, int nCoeffs, int lowestOrder, double xMin, double xMax);  In pdfMode, a coefficient for the constant term of 1.0 is implied if lowestOrder > 0. ;  ; double product (double const *factors, std::size_t nFactors);  ; double ratio (double numerator, double denominator);  ; double recursiveFraction (double *a, unsigned int n);  . Function Documentation. ◆ approxErf(). double RooFit::Detail::MathFuncs::a",MatchSource.WIKI,doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html
https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html:2464,Testability,log,logNormalIntegral,2464," *params, unsigned int n, double const *low, double const *high, double boundary, double nominal, int doCutoff);  ; double flexibleInterpSingle (unsigned int code, double low, double high, double boundary, double nominal, double paramVal, double res);  ; double gaussian (double x, double mean, double sigma);  Function to evaluate an un-normalized RooGaussian. ;  ; double gaussianIntegral (double xMin, double xMax, double mean, double sigma);  Function to calculate the integral of an un-normalized RooGaussian over x. ;  ; unsigned int getUniformBinning (double low, double high, double val, unsigned int numBins);  ; double interpolate1d (double low, double high, double val, unsigned int numBins, double const *vals);  ; double landau (double x, double mu, double sigma);  ; double logNormal (double x, double k, double m0);  ; double logNormalIntegral (double xMin, double xMax, double m0, double k);  ; double logNormalIntegralStandard (double xMin, double xMax, double mu, double sigma);  ; double logNormalStandard (double x, double sigma, double mu);  ; double nll (double pdf, double weight, int binnedL, int doBinOffset);  ; double poisson (double x, double par);  ; double poissonIntegral (int code, double mu, double x, double integrandMin, double integrandMax, unsigned int protectNegative);  ; template<bool pdfMode = false> ; double polynomial (double const *coeffs, int nCoeffs, int lowestOrder, double x);  In pdfMode, a coefficient for the constant term of 1.0 is implied if lowestOrder > 0. ;  ; template<bool pdfMode = false> ; double polynomialIntegral (double const *coeffs, int nCoeffs, int lowestOrder, double xMin, double xMax);  In pdfMode, a coefficient for the constant term of 1.0 is implied if lowestOrder > 0. ;  ; double product (double const *factors, std::size_t nFactors);  ; double ratio (double numerator, double denominator);  ; double recursiveFraction (double *a, unsigned int n);  . Function Documentation. ◆ approxErf(). double RooFit::Detail::MathFuncs::a",MatchSource.WIKI,doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html
https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html:2541,Testability,log,logNormalIntegralStandard,2541," *params, unsigned int n, double const *low, double const *high, double boundary, double nominal, int doCutoff);  ; double flexibleInterpSingle (unsigned int code, double low, double high, double boundary, double nominal, double paramVal, double res);  ; double gaussian (double x, double mean, double sigma);  Function to evaluate an un-normalized RooGaussian. ;  ; double gaussianIntegral (double xMin, double xMax, double mean, double sigma);  Function to calculate the integral of an un-normalized RooGaussian over x. ;  ; unsigned int getUniformBinning (double low, double high, double val, unsigned int numBins);  ; double interpolate1d (double low, double high, double val, unsigned int numBins, double const *vals);  ; double landau (double x, double mu, double sigma);  ; double logNormal (double x, double k, double m0);  ; double logNormalIntegral (double xMin, double xMax, double m0, double k);  ; double logNormalIntegralStandard (double xMin, double xMax, double mu, double sigma);  ; double logNormalStandard (double x, double sigma, double mu);  ; double nll (double pdf, double weight, int binnedL, int doBinOffset);  ; double poisson (double x, double par);  ; double poissonIntegral (int code, double mu, double x, double integrandMin, double integrandMax, unsigned int protectNegative);  ; template<bool pdfMode = false> ; double polynomial (double const *coeffs, int nCoeffs, int lowestOrder, double x);  In pdfMode, a coefficient for the constant term of 1.0 is implied if lowestOrder > 0. ;  ; template<bool pdfMode = false> ; double polynomialIntegral (double const *coeffs, int nCoeffs, int lowestOrder, double xMin, double xMax);  In pdfMode, a coefficient for the constant term of 1.0 is implied if lowestOrder > 0. ;  ; double product (double const *factors, std::size_t nFactors);  ; double ratio (double numerator, double denominator);  ; double recursiveFraction (double *a, unsigned int n);  . Function Documentation. ◆ approxErf(). double RooFit::Detail::MathFuncs::a",MatchSource.WIKI,doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html
https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html:2630,Testability,log,logNormalStandard,2630," *params, unsigned int n, double const *low, double const *high, double boundary, double nominal, int doCutoff);  ; double flexibleInterpSingle (unsigned int code, double low, double high, double boundary, double nominal, double paramVal, double res);  ; double gaussian (double x, double mean, double sigma);  Function to evaluate an un-normalized RooGaussian. ;  ; double gaussianIntegral (double xMin, double xMax, double mean, double sigma);  Function to calculate the integral of an un-normalized RooGaussian over x. ;  ; unsigned int getUniformBinning (double low, double high, double val, unsigned int numBins);  ; double interpolate1d (double low, double high, double val, unsigned int numBins, double const *vals);  ; double landau (double x, double mu, double sigma);  ; double logNormal (double x, double k, double m0);  ; double logNormalIntegral (double xMin, double xMax, double m0, double k);  ; double logNormalIntegralStandard (double xMin, double xMax, double mu, double sigma);  ; double logNormalStandard (double x, double sigma, double mu);  ; double nll (double pdf, double weight, int binnedL, int doBinOffset);  ; double poisson (double x, double par);  ; double poissonIntegral (int code, double mu, double x, double integrandMin, double integrandMax, unsigned int protectNegative);  ; template<bool pdfMode = false> ; double polynomial (double const *coeffs, int nCoeffs, int lowestOrder, double x);  In pdfMode, a coefficient for the constant term of 1.0 is implied if lowestOrder > 0. ;  ; template<bool pdfMode = false> ; double polynomialIntegral (double const *coeffs, int nCoeffs, int lowestOrder, double xMin, double xMax);  In pdfMode, a coefficient for the constant term of 1.0 is implied if lowestOrder > 0. ;  ; double product (double const *factors, std::size_t nFactors);  ; double ratio (double numerator, double denominator);  ; double recursiveFraction (double *a, unsigned int n);  . Function Documentation. ◆ approxErf(). double RooFit::Detail::MathFuncs::a",MatchSource.WIKI,doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html
https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html:8698,Testability,log,logNormal,8698," an un-normalized RooGaussian over x. ; To calculate the integral over mean, just interchange the respective values of x and mean. Parameters. xMinMinimum value of variable to integrate wrt. ; xMaxMaximum value of of variable to integrate wrt. ; meanMean. ; sigmaSigma. . ReturnsThe integral of an un-normalized RooGaussian over the value in x. ; Definition at line 418 of file MathFuncs.h. ◆ getUniformBinning(). unsigned int RooFit::Detail::MathFuncs::getUniformBinning ; (; double ; low, . double ; high, . double ; val, . unsigned int ; numBins . ). inline . Definition at line 172 of file MathFuncs.h. ◆ interpolate1d(). double RooFit::Detail::MathFuncs::interpolate1d ; (; double ; low, . double ; high, . double ; val, . unsigned int ; numBins, . double const * ; vals . ). inline . Definition at line 178 of file MathFuncs.h. ◆ landau(). double RooFit::Detail::MathFuncs::landau ; (; double ; x, . double ; mu, . double ; sigma . ). inline . Definition at line 331 of file MathFuncs.h. ◆ logNormal(). double RooFit::Detail::MathFuncs::logNormal ; (; double ; x, . double ; k, . double ; m0 . ). inline . Definition at line 338 of file MathFuncs.h. ◆ logNormalIntegral(). double RooFit::Detail::MathFuncs::logNormalIntegral ; (; double ; xMin, . double ; xMax, . double ; m0, . double ; k . ). inline . Definition at line 627 of file MathFuncs.h. ◆ logNormalIntegralStandard(). double RooFit::Detail::MathFuncs::logNormalIntegralStandard ; (; double ; xMin, . double ; xMax, . double ; mu, . double ; sigma . ). inline . Definition at line 638 of file MathFuncs.h. ◆ logNormalStandard(). double RooFit::Detail::MathFuncs::logNormalStandard ; (; double ; x, . double ; sigma, . double ; mu . ). inline . Definition at line 343 of file MathFuncs.h. ◆ nll(). double RooFit::Detail::MathFuncs::nll ; (; double ; pdf, . double ; weight, . int ; binnedL, . int ; doBinOffset . ). inline . Definition at line 353 of file MathFuncs.h. ◆ poisson(). double RooFit::Detail::MathFuncs::poisson ; (; double ",MatchSource.WIKI,doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html
https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html:8745,Testability,log,logNormal,8745," To calculate the integral over mean, just interchange the respective values of x and mean. Parameters. xMinMinimum value of variable to integrate wrt. ; xMaxMaximum value of of variable to integrate wrt. ; meanMean. ; sigmaSigma. . ReturnsThe integral of an un-normalized RooGaussian over the value in x. ; Definition at line 418 of file MathFuncs.h. ◆ getUniformBinning(). unsigned int RooFit::Detail::MathFuncs::getUniformBinning ; (; double ; low, . double ; high, . double ; val, . unsigned int ; numBins . ). inline . Definition at line 172 of file MathFuncs.h. ◆ interpolate1d(). double RooFit::Detail::MathFuncs::interpolate1d ; (; double ; low, . double ; high, . double ; val, . unsigned int ; numBins, . double const * ; vals . ). inline . Definition at line 178 of file MathFuncs.h. ◆ landau(). double RooFit::Detail::MathFuncs::landau ; (; double ; x, . double ; mu, . double ; sigma . ). inline . Definition at line 331 of file MathFuncs.h. ◆ logNormal(). double RooFit::Detail::MathFuncs::logNormal ; (; double ; x, . double ; k, . double ; m0 . ). inline . Definition at line 338 of file MathFuncs.h. ◆ logNormalIntegral(). double RooFit::Detail::MathFuncs::logNormalIntegral ; (; double ; xMin, . double ; xMax, . double ; m0, . double ; k . ). inline . Definition at line 627 of file MathFuncs.h. ◆ logNormalIntegralStandard(). double RooFit::Detail::MathFuncs::logNormalIntegralStandard ; (; double ; xMin, . double ; xMax, . double ; mu, . double ; sigma . ). inline . Definition at line 638 of file MathFuncs.h. ◆ logNormalStandard(). double RooFit::Detail::MathFuncs::logNormalStandard ; (; double ; x, . double ; sigma, . double ; mu . ). inline . Definition at line 343 of file MathFuncs.h. ◆ nll(). double RooFit::Detail::MathFuncs::nll ; (; double ; pdf, . double ; weight, . int ; binnedL, . int ; doBinOffset . ). inline . Definition at line 353 of file MathFuncs.h. ◆ poisson(). double RooFit::Detail::MathFuncs::poisson ; (; double ; x, . double ; par . ). inline . Defin",MatchSource.WIKI,doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html
https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html:8860,Testability,log,logNormalIntegral,8860,"riable to integrate wrt. ; xMaxMaximum value of of variable to integrate wrt. ; meanMean. ; sigmaSigma. . ReturnsThe integral of an un-normalized RooGaussian over the value in x. ; Definition at line 418 of file MathFuncs.h. ◆ getUniformBinning(). unsigned int RooFit::Detail::MathFuncs::getUniformBinning ; (; double ; low, . double ; high, . double ; val, . unsigned int ; numBins . ). inline . Definition at line 172 of file MathFuncs.h. ◆ interpolate1d(). double RooFit::Detail::MathFuncs::interpolate1d ; (; double ; low, . double ; high, . double ; val, . unsigned int ; numBins, . double const * ; vals . ). inline . Definition at line 178 of file MathFuncs.h. ◆ landau(). double RooFit::Detail::MathFuncs::landau ; (; double ; x, . double ; mu, . double ; sigma . ). inline . Definition at line 331 of file MathFuncs.h. ◆ logNormal(). double RooFit::Detail::MathFuncs::logNormal ; (; double ; x, . double ; k, . double ; m0 . ). inline . Definition at line 338 of file MathFuncs.h. ◆ logNormalIntegral(). double RooFit::Detail::MathFuncs::logNormalIntegral ; (; double ; xMin, . double ; xMax, . double ; m0, . double ; k . ). inline . Definition at line 627 of file MathFuncs.h. ◆ logNormalIntegralStandard(). double RooFit::Detail::MathFuncs::logNormalIntegralStandard ; (; double ; xMin, . double ; xMax, . double ; mu, . double ; sigma . ). inline . Definition at line 638 of file MathFuncs.h. ◆ logNormalStandard(). double RooFit::Detail::MathFuncs::logNormalStandard ; (; double ; x, . double ; sigma, . double ; mu . ). inline . Definition at line 343 of file MathFuncs.h. ◆ nll(). double RooFit::Detail::MathFuncs::nll ; (; double ; pdf, . double ; weight, . int ; binnedL, . int ; doBinOffset . ). inline . Definition at line 353 of file MathFuncs.h. ◆ poisson(). double RooFit::Detail::MathFuncs::poisson ; (; double ; x, . double ; par . ). inline . Definition at line 198 of file MathFuncs.h. ◆ poissonIntegral(). double RooFit::Detail::MathFuncs::poissonIntegral ; (; int ; code, ",MatchSource.WIKI,doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html
https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html:8915,Testability,log,logNormalIntegral,8915,"f variable to integrate wrt. ; meanMean. ; sigmaSigma. . ReturnsThe integral of an un-normalized RooGaussian over the value in x. ; Definition at line 418 of file MathFuncs.h. ◆ getUniformBinning(). unsigned int RooFit::Detail::MathFuncs::getUniformBinning ; (; double ; low, . double ; high, . double ; val, . unsigned int ; numBins . ). inline . Definition at line 172 of file MathFuncs.h. ◆ interpolate1d(). double RooFit::Detail::MathFuncs::interpolate1d ; (; double ; low, . double ; high, . double ; val, . unsigned int ; numBins, . double const * ; vals . ). inline . Definition at line 178 of file MathFuncs.h. ◆ landau(). double RooFit::Detail::MathFuncs::landau ; (; double ; x, . double ; mu, . double ; sigma . ). inline . Definition at line 331 of file MathFuncs.h. ◆ logNormal(). double RooFit::Detail::MathFuncs::logNormal ; (; double ; x, . double ; k, . double ; m0 . ). inline . Definition at line 338 of file MathFuncs.h. ◆ logNormalIntegral(). double RooFit::Detail::MathFuncs::logNormalIntegral ; (; double ; xMin, . double ; xMax, . double ; m0, . double ; k . ). inline . Definition at line 627 of file MathFuncs.h. ◆ logNormalIntegralStandard(). double RooFit::Detail::MathFuncs::logNormalIntegralStandard ; (; double ; xMin, . double ; xMax, . double ; mu, . double ; sigma . ). inline . Definition at line 638 of file MathFuncs.h. ◆ logNormalStandard(). double RooFit::Detail::MathFuncs::logNormalStandard ; (; double ; x, . double ; sigma, . double ; mu . ). inline . Definition at line 343 of file MathFuncs.h. ◆ nll(). double RooFit::Detail::MathFuncs::nll ; (; double ; pdf, . double ; weight, . int ; binnedL, . int ; doBinOffset . ). inline . Definition at line 353 of file MathFuncs.h. ◆ poisson(). double RooFit::Detail::MathFuncs::poisson ; (; double ; x, . double ; par . ). inline . Definition at line 198 of file MathFuncs.h. ◆ poissonIntegral(). double RooFit::Detail::MathFuncs::poissonIntegral ; (; int ; code, . double ; mu, . double ; x, . double ; integran",MatchSource.WIKI,doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html
https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html:9058,Testability,log,logNormalIntegralStandard,9058,"8 of file MathFuncs.h. ◆ getUniformBinning(). unsigned int RooFit::Detail::MathFuncs::getUniformBinning ; (; double ; low, . double ; high, . double ; val, . unsigned int ; numBins . ). inline . Definition at line 172 of file MathFuncs.h. ◆ interpolate1d(). double RooFit::Detail::MathFuncs::interpolate1d ; (; double ; low, . double ; high, . double ; val, . unsigned int ; numBins, . double const * ; vals . ). inline . Definition at line 178 of file MathFuncs.h. ◆ landau(). double RooFit::Detail::MathFuncs::landau ; (; double ; x, . double ; mu, . double ; sigma . ). inline . Definition at line 331 of file MathFuncs.h. ◆ logNormal(). double RooFit::Detail::MathFuncs::logNormal ; (; double ; x, . double ; k, . double ; m0 . ). inline . Definition at line 338 of file MathFuncs.h. ◆ logNormalIntegral(). double RooFit::Detail::MathFuncs::logNormalIntegral ; (; double ; xMin, . double ; xMax, . double ; m0, . double ; k . ). inline . Definition at line 627 of file MathFuncs.h. ◆ logNormalIntegralStandard(). double RooFit::Detail::MathFuncs::logNormalIntegralStandard ; (; double ; xMin, . double ; xMax, . double ; mu, . double ; sigma . ). inline . Definition at line 638 of file MathFuncs.h. ◆ logNormalStandard(). double RooFit::Detail::MathFuncs::logNormalStandard ; (; double ; x, . double ; sigma, . double ; mu . ). inline . Definition at line 343 of file MathFuncs.h. ◆ nll(). double RooFit::Detail::MathFuncs::nll ; (; double ; pdf, . double ; weight, . int ; binnedL, . int ; doBinOffset . ). inline . Definition at line 353 of file MathFuncs.h. ◆ poisson(). double RooFit::Detail::MathFuncs::poisson ; (; double ; x, . double ; par . ). inline . Definition at line 198 of file MathFuncs.h. ◆ poissonIntegral(). double RooFit::Detail::MathFuncs::poissonIntegral ; (; int ; code, . double ; mu, . double ; x, . double ; integrandMin, . double ; integrandMax, . unsigned int ; protectNegative . ). inline . Definition at line 580 of file MathFuncs.h. ◆ polynomial(). template<bool pd",MatchSource.WIKI,doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html
https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html:9121,Testability,log,logNormalIntegralStandard,9121,"t RooFit::Detail::MathFuncs::getUniformBinning ; (; double ; low, . double ; high, . double ; val, . unsigned int ; numBins . ). inline . Definition at line 172 of file MathFuncs.h. ◆ interpolate1d(). double RooFit::Detail::MathFuncs::interpolate1d ; (; double ; low, . double ; high, . double ; val, . unsigned int ; numBins, . double const * ; vals . ). inline . Definition at line 178 of file MathFuncs.h. ◆ landau(). double RooFit::Detail::MathFuncs::landau ; (; double ; x, . double ; mu, . double ; sigma . ). inline . Definition at line 331 of file MathFuncs.h. ◆ logNormal(). double RooFit::Detail::MathFuncs::logNormal ; (; double ; x, . double ; k, . double ; m0 . ). inline . Definition at line 338 of file MathFuncs.h. ◆ logNormalIntegral(). double RooFit::Detail::MathFuncs::logNormalIntegral ; (; double ; xMin, . double ; xMax, . double ; m0, . double ; k . ). inline . Definition at line 627 of file MathFuncs.h. ◆ logNormalIntegralStandard(). double RooFit::Detail::MathFuncs::logNormalIntegralStandard ; (; double ; xMin, . double ; xMax, . double ; mu, . double ; sigma . ). inline . Definition at line 638 of file MathFuncs.h. ◆ logNormalStandard(). double RooFit::Detail::MathFuncs::logNormalStandard ; (; double ; x, . double ; sigma, . double ; mu . ). inline . Definition at line 343 of file MathFuncs.h. ◆ nll(). double RooFit::Detail::MathFuncs::nll ; (; double ; pdf, . double ; weight, . int ; binnedL, . int ; doBinOffset . ). inline . Definition at line 353 of file MathFuncs.h. ◆ poisson(). double RooFit::Detail::MathFuncs::poisson ; (; double ; x, . double ; par . ). inline . Definition at line 198 of file MathFuncs.h. ◆ poissonIntegral(). double RooFit::Detail::MathFuncs::poissonIntegral ; (; int ; code, . double ; mu, . double ; x, . double ; integrandMin, . double ; integrandMax, . unsigned int ; protectNegative . ). inline . Definition at line 580 of file MathFuncs.h. ◆ polynomial(). template<bool pdfMode = false> . double RooFit::Detail::MathFuncs::polyn",MatchSource.WIKI,doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html
https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html:9276,Testability,log,logNormalStandard,9276,"172 of file MathFuncs.h. ◆ interpolate1d(). double RooFit::Detail::MathFuncs::interpolate1d ; (; double ; low, . double ; high, . double ; val, . unsigned int ; numBins, . double const * ; vals . ). inline . Definition at line 178 of file MathFuncs.h. ◆ landau(). double RooFit::Detail::MathFuncs::landau ; (; double ; x, . double ; mu, . double ; sigma . ). inline . Definition at line 331 of file MathFuncs.h. ◆ logNormal(). double RooFit::Detail::MathFuncs::logNormal ; (; double ; x, . double ; k, . double ; m0 . ). inline . Definition at line 338 of file MathFuncs.h. ◆ logNormalIntegral(). double RooFit::Detail::MathFuncs::logNormalIntegral ; (; double ; xMin, . double ; xMax, . double ; m0, . double ; k . ). inline . Definition at line 627 of file MathFuncs.h. ◆ logNormalIntegralStandard(). double RooFit::Detail::MathFuncs::logNormalIntegralStandard ; (; double ; xMin, . double ; xMax, . double ; mu, . double ; sigma . ). inline . Definition at line 638 of file MathFuncs.h. ◆ logNormalStandard(). double RooFit::Detail::MathFuncs::logNormalStandard ; (; double ; x, . double ; sigma, . double ; mu . ). inline . Definition at line 343 of file MathFuncs.h. ◆ nll(). double RooFit::Detail::MathFuncs::nll ; (; double ; pdf, . double ; weight, . int ; binnedL, . int ; doBinOffset . ). inline . Definition at line 353 of file MathFuncs.h. ◆ poisson(). double RooFit::Detail::MathFuncs::poisson ; (; double ; x, . double ; par . ). inline . Definition at line 198 of file MathFuncs.h. ◆ poissonIntegral(). double RooFit::Detail::MathFuncs::poissonIntegral ; (; int ; code, . double ; mu, . double ; x, . double ; integrandMin, . double ; integrandMax, . unsigned int ; protectNegative . ). inline . Definition at line 580 of file MathFuncs.h. ◆ polynomial(). template<bool pdfMode = false> . double RooFit::Detail::MathFuncs::polynomial ; (; double const * ; coeffs, . int ; nCoeffs, . int ; lowestOrder, . double ; x . ). inline . In pdfMode, a coefficient for the constant term of 1.0 is",MatchSource.WIKI,doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html
https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html:9331,Testability,log,logNormalStandard,9331,"ble RooFit::Detail::MathFuncs::interpolate1d ; (; double ; low, . double ; high, . double ; val, . unsigned int ; numBins, . double const * ; vals . ). inline . Definition at line 178 of file MathFuncs.h. ◆ landau(). double RooFit::Detail::MathFuncs::landau ; (; double ; x, . double ; mu, . double ; sigma . ). inline . Definition at line 331 of file MathFuncs.h. ◆ logNormal(). double RooFit::Detail::MathFuncs::logNormal ; (; double ; x, . double ; k, . double ; m0 . ). inline . Definition at line 338 of file MathFuncs.h. ◆ logNormalIntegral(). double RooFit::Detail::MathFuncs::logNormalIntegral ; (; double ; xMin, . double ; xMax, . double ; m0, . double ; k . ). inline . Definition at line 627 of file MathFuncs.h. ◆ logNormalIntegralStandard(). double RooFit::Detail::MathFuncs::logNormalIntegralStandard ; (; double ; xMin, . double ; xMax, . double ; mu, . double ; sigma . ). inline . Definition at line 638 of file MathFuncs.h. ◆ logNormalStandard(). double RooFit::Detail::MathFuncs::logNormalStandard ; (; double ; x, . double ; sigma, . double ; mu . ). inline . Definition at line 343 of file MathFuncs.h. ◆ nll(). double RooFit::Detail::MathFuncs::nll ; (; double ; pdf, . double ; weight, . int ; binnedL, . int ; doBinOffset . ). inline . Definition at line 353 of file MathFuncs.h. ◆ poisson(). double RooFit::Detail::MathFuncs::poisson ; (; double ; x, . double ; par . ). inline . Definition at line 198 of file MathFuncs.h. ◆ poissonIntegral(). double RooFit::Detail::MathFuncs::poissonIntegral ; (; int ; code, . double ; mu, . double ; x, . double ; integrandMin, . double ; integrandMax, . unsigned int ; protectNegative . ). inline . Definition at line 580 of file MathFuncs.h. ◆ polynomial(). template<bool pdfMode = false> . double RooFit::Detail::MathFuncs::polynomial ; (; double const * ; coeffs, . int ; nCoeffs, . int ; lowestOrder, . double ; x . ). inline . In pdfMode, a coefficient for the constant term of 1.0 is implied if lowestOrder > 0. ; Definition at li",MatchSource.WIKI,doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html
https://root.cern/doc/master/namespaceRooStats.html:9952,Availability,error,error,9952,"ONENTIALTOYDISTRIBUTION; };  . Functions; double AsimovSignificance (double s, double b, double sigma_b=0.0);  Compute the Asimov Median significance for a Poisson process with s = expected number of signal events, b = expected number of background events and optionally sigma_b = expected uncertainty of background events. ;  ; BranchStore * CreateBranchStore (const RooDataSet &data);  ; void FactorizePdf (const RooArgSet &observables, RooAbsPdf &pdf, RooArgList &obsTerms, RooArgList &constraints);  ; void FactorizePdf (RooStats::ModelConfig &model, RooAbsPdf &pdf, RooArgList &obsTerms, RooArgList &constraints);  ; void FillTree (TTree &myTree, const RooDataSet &data);  ; TTree * GetAsTTree (TString name, TString desc, const RooDataSet &data);  Create a TTree with the given name and description. All RooRealVars in the RooDataSet are represented as branches that contain values of type double. ;  ; RooStatsConfig & GetGlobalRooStatsConfig ();  Retrieve the config object which can be used to set flags for things like offsetting the likelihood or using the error wall for the minimiser. ;  ; bool IsNLLOffset ();  function returning if the flag to check if the flag to use NLLOffset is set ;  ; RooAbsPdf * MakeNuisancePdf (const RooStats::ModelConfig &model, const char *name);  ; RooAbsPdf * MakeNuisancePdf (RooAbsPdf &pdf, const RooArgSet &observables, const char *name);  extract constraint terms from pdf ;  ; RooWorkspace * MakeReducedWorkspace (RooWorkspace *oldWS, const char *newName, bool copySnapshots, const char *mcname, const char *newmcname, bool copyData=true);  function that clones a workspace, copying all needed components and discarding all others ;  ; RooAbsPdf * MakeUnconstrainedPdf (const RooStats::ModelConfig &model, const char *name=nullptr);  ; RooAbsPdf * MakeUnconstrainedPdf (RooAbsPdf &pdf, const RooArgSet &observables, const char *name=nullptr);  remove constraints from pdf and return the unconstrained pdf ;  ; void PrintListContent (const RooArgList ",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:14122,Availability,error,error,14122,"ooArgSet & ; observables, . RooAbsPdf & ; pdf, . RooArgList & ; obsTerms, . RooArgList & ; constraints . ). Definition at line 91 of file RooStatsUtils.cxx. ◆ FactorizePdf() [2/2]. void RooStats::FactorizePdf ; (; RooStats::ModelConfig & ; model, . RooAbsPdf & ; pdf, . RooArgList & ; obsTerms, . RooArgList & ; constraints . ). Definition at line 124 of file RooStatsUtils.cxx. ◆ FillTree(). void RooStats::FillTree ; (; TTree & ; myTree, . const RooDataSet & ; data . ). Definition at line 297 of file RooStatsUtils.cxx. ◆ GetAsTTree(). TTree * RooStats::GetAsTTree ; (; TString ; name, . TString ; desc, . const RooDataSet & ; data . ). Create a TTree with the given name and description. All RooRealVars in the RooDataSet are represented as branches that contain values of type double. ; Definition at line 321 of file RooStatsUtils.cxx. ◆ GetGlobalRooStatsConfig(). RooStatsConfig & RooStats::GetGlobalRooStatsConfig ; (; ). Retrieve the config object which can be used to set flags for things like offsetting the likelihood or using the error wall for the minimiser. ; Definition at line 54 of file RooStatsUtils.cxx. ◆ IsNLLOffset(). bool RooStats::IsNLLOffset ; (; ). function returning if the flag to check if the flag to use NLLOffset is set ; Test of RooStats should by default offset NLL calculations. ; Definition at line 87 of file RooStatsUtils.cxx. ◆ MakeNuisancePdf() [1/2]. RooAbsPdf * RooStats::MakeNuisancePdf ; (; const RooStats::ModelConfig & ; model, . const char * ; name . ). Definition at line 147 of file RooStatsUtils.cxx. ◆ MakeNuisancePdf() [2/2]. RooAbsPdf * RooStats::MakeNuisancePdf ; (; RooAbsPdf & ; pdf, . const RooArgSet & ; observables, . const char * ; name . ). extract constraint terms from pdf ; Definition at line 135 of file RooStatsUtils.cxx. ◆ MakeReducedWorkspace(). RooWorkspace * RooStats::MakeReducedWorkspace ; (; RooWorkspace * ; oldWS, . const char * ; newName, . bool ; copySnapshots, . const char * ; mcname, . const char * ; newmcname, . bool ; ",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:1683,Deployability,configurat,configuration,1683,"ntation of IntervalCalculator, providing the computation of a credible interval using a Bayesian method. More...;  ; class  BernsteinCorrection;  BernsteinCorrection is a utility in RooStats to augment a nominal PDF with a polynomial correction term. More...;  ; class  BranchStore;  ; class  CombinedCalculator;  CombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals. More...;  ; class  ConfidenceBelt;  ConfidenceBelt is a concrete implementation of the ConfInterval interface. More...;  ; class  ConfInterval;  ConfInterval is an interface class for a generic interval in the RooStats framework. More...;  ; class  DebuggingSampler;  ; class  DebuggingTestStat;  ; class  DetailedOutputAggregator;  This class is designed to aid in the construction of RooDataSets and RooArgSets, particularly those naturally arising in fitting operations. More...;  ; class  FeldmanCousins;  The FeldmanCousins class (like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction. More...;  ; class  FrequentistCalculator;  Does a frequentist hypothesis test. More...;  ; class  Heaviside;  Represents the Heaviside function. More...;  ; class  HLFactory;  HLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool. More...;  ; class  HybridCalculator;  Same purpose as HybridCalculatorOriginal, but different implementation. More...;  ; class  HybridPlot;  This class provides the plots for the result of a study performed with the HybridCalculatorOriginal class. More...;  ; class  HybridResult;  Class encapsulating the result of the HybridCalculatorOriginal. More...;  ; class  HypoTestCalculator;  HypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults. More...;  ; class  HypoTestCalculatorGeneric;  Common base class for the Hypothesis Test Calcula",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:1994,Deployability,configurat,configuration,1994,"or is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals. More...;  ; class  ConfidenceBelt;  ConfidenceBelt is a concrete implementation of the ConfInterval interface. More...;  ; class  ConfInterval;  ConfInterval is an interface class for a generic interval in the RooStats framework. More...;  ; class  DebuggingSampler;  ; class  DebuggingTestStat;  ; class  DetailedOutputAggregator;  This class is designed to aid in the construction of RooDataSets and RooArgSets, particularly those naturally arising in fitting operations. More...;  ; class  FeldmanCousins;  The FeldmanCousins class (like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction. More...;  ; class  FrequentistCalculator;  Does a frequentist hypothesis test. More...;  ; class  Heaviside;  Represents the Heaviside function. More...;  ; class  HLFactory;  HLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool. More...;  ; class  HybridCalculator;  Same purpose as HybridCalculatorOriginal, but different implementation. More...;  ; class  HybridPlot;  This class provides the plots for the result of a study performed with the HybridCalculatorOriginal class. More...;  ; class  HybridResult;  Class encapsulating the result of the HybridCalculatorOriginal. More...;  ; class  HypoTestCalculator;  HypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults. More...;  ; class  HypoTestCalculatorGeneric;  Common base class for the Hypothesis Test Calculators. More...;  ; class  HypoTestInverter;  A class for performing a hypothesis test inversion by scanning the hypothesis test results of a HypoTestCalculator for various values of the parameter of interest. More...;  ; class  HypoTestInverterPlot;  Class to plot a HypoTestInverterResult, the output of the HypoTestInverter calcul",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:4205,Deployability,integrat,integrate,4205, class provides the plots for the result of a study performed with any of the HypoTestCalculatorGeneric (e.g. More...;  ; class  HypoTestResult;  HypoTestResult is a base class for results from hypothesis tests. More...;  ; class  IntervalCalculator;  IntervalCalculator is an interface class for a tools which produce RooStats ConfIntervals. More...;  ; struct  LikelihoodFunction;  ; class  LikelihoodInterval;  LikelihoodInterval is a concrete implementation of the RooStats::ConfInterval interface. More...;  ; class  LikelihoodIntervalPlot;  This class provides simple and straightforward utilities to plot a LikelihoodInterval object. More...;  ; class  MarkovChain;  Stores the steps in a Markov Chain of points. More...;  ; class  MaxLikelihoodEstimateTestStat;  MaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood estimate of a specified parameter. More...;  ; class  MCMCCalculator;  Bayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function. More...;  ; class  MCMCInterval;  MCMCInterval is a concrete implementation of the RooStats::ConfInterval interface. More...;  ; class  MCMCIntervalPlot;  This class provides simple and straightforward utilities to plot a MCMCInterval object. More...;  ; class  MetropolisHastings;  This class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo. More...;  ; class  MinNLLTestStat;  MinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic. More...;  ; class  ModelConfig;  ModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools. More...;  ; class  NeymanConstruction;  NeymanConstruction is a concrete implementation of the Neyman,MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:4970,Deployability,configurat,configuration,4970,"tic that returns maximum likelihood estimate of a specified parameter. More...;  ; class  MCMCCalculator;  Bayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function. More...;  ; class  MCMCInterval;  MCMCInterval is a concrete implementation of the RooStats::ConfInterval interface. More...;  ; class  MCMCIntervalPlot;  This class provides simple and straightforward utilities to plot a MCMCInterval object. More...;  ; class  MetropolisHastings;  This class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo. More...;  ; class  MinNLLTestStat;  MinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic. More...;  ; class  ModelConfig;  ModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools. More...;  ; class  NeymanConstruction;  NeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction. More...;  ; class  NuisanceParametersSampler;  Helper class for ToyMCSampler. More...;  ; class  NumberCountingPdfFactory;  A factory for building PDFs and data for a number counting combination. More...;  ; class  NumEventsTestStat;  NumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting. More...;  ; class  PdfProposal;  PdfProposal is a concrete implementation of the ProposalFunction interface. More...;  ; class  PointSetInterval;  PointSetInterval is a concrete implementation of the ConfInterval interface. More...;  ; class  PosteriorCdfFunction;  ; class  PosteriorFunction;  ; class  PosteriorFunctionFromToyMC;  Posterior function obtaining sampling toy MC for the ",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:6614,Deployability,configurat,configuration,6614, PdfProposal;  PdfProposal is a concrete implementation of the ProposalFunction interface. More...;  ; class  PointSetInterval;  PointSetInterval is a concrete implementation of the ConfInterval interface. More...;  ; class  PosteriorCdfFunction;  ; class  PosteriorFunction;  ; class  PosteriorFunctionFromToyMC;  Posterior function obtaining sampling toy MC for the nuisance according to their pdf. More...;  ; class  ProfileInspector;  Utility class to plot conditional MLE of nuisance parameters vs. More...;  ; class  ProfileLikelihoodCalculator;  The ProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for tools which can produce both a RooStats HypoTestResult and ConfInterval). More...;  ; class  ProfileLikelihoodTestStat;  ProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset. More...;  ; class  ProofConfig;  Holds configuration options for proof and proof-lite. More...;  ; class  ProposalFunction;  ProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm. More...;  ; class  ProposalHelper;  ; class  RatioOfProfiledLikelihoodsTestStat;  TestStatistic that returns the ratio of profiled likelihoods. More...;  ; struct  RooStatsConfig;  ; class  SamplingDistPlot;  This class provides simple and straightforward utilities to plot SamplingDistribution objects. More...;  ; class  SamplingDistribution;  This class simply holds a sampling distribution of some test statistic. More...;  ; class  SamplingSummary;  ; class  SamplingSummaryLookup;  ; class  SequentialProposal;  Class implementing a proposal function that samples the parameter space by moving only in one coordinate (chosen randomly) at each step. More...;  ; class  SimpleInterval;  SimpleInterval is a concrete implementation of the ConfInterval interface. More...;  ; class  SimpleLikelihoo,MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:990,Integrability,interface,interface,990,". ROOT: RooStats Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Enumerations |; Functions |; Variables ; RooStats Namespace ReferenceRooFit » RooStats » HistFactory | RooFit » RooStats. Namespace for the RooStats classes. ; More... Namespaces; namespace  HistFactory;  ; namespace  NumberCountingUtils;  ; namespace  ROOTDict;  . Classes; class  AcceptanceRegion;  ; class  AsymptoticCalculator;  Hypothesis Test Calculator based on the asymptotic formulae for the profile likelihood ratio. More...;  ; class  BayesianCalculator;  BayesianCalculator is a concrete implementation of IntervalCalculator, providing the computation of a credible interval using a Bayesian method. More...;  ; class  BernsteinCorrection;  BernsteinCorrection is a utility in RooStats to augment a nominal PDF with a polynomial correction term. More...;  ; class  BranchStore;  ; class  CombinedCalculator;  CombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals. More...;  ; class  ConfidenceBelt;  ConfidenceBelt is a concrete implementation of the ConfInterval interface. More...;  ; class  ConfInterval;  ConfInterval is an interface class for a generic interval in the RooStats framework. More...;  ; class  DebuggingSampler;  ; class  DebuggingTestStat;  ; class  DetailedOutputAggregator;  This class is designed to aid in the construction of RooDataSets and RooArgSets, particularly those naturally arising in fitting operations. More...;  ; class  FeldmanCousins;  The FeldmanCousins class (like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction. More...;  ; class  FrequentistCalculator;  Does a frequentist hypothesis test. More...;  ; class  Heaviside;  Represents the Heaviside function. More...;  ; class  HLFactory;  HLFactory is an High Level model Factory allows you to describe your models in a configu",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:1185,Integrability,interface,interface,1185," Enumerations |; Functions |; Variables ; RooStats Namespace ReferenceRooFit » RooStats » HistFactory | RooFit » RooStats. Namespace for the RooStats classes. ; More... Namespaces; namespace  HistFactory;  ; namespace  NumberCountingUtils;  ; namespace  ROOTDict;  . Classes; class  AcceptanceRegion;  ; class  AsymptoticCalculator;  Hypothesis Test Calculator based on the asymptotic formulae for the profile likelihood ratio. More...;  ; class  BayesianCalculator;  BayesianCalculator is a concrete implementation of IntervalCalculator, providing the computation of a credible interval using a Bayesian method. More...;  ; class  BernsteinCorrection;  BernsteinCorrection is a utility in RooStats to augment a nominal PDF with a polynomial correction term. More...;  ; class  BranchStore;  ; class  CombinedCalculator;  CombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals. More...;  ; class  ConfidenceBelt;  ConfidenceBelt is a concrete implementation of the ConfInterval interface. More...;  ; class  ConfInterval;  ConfInterval is an interface class for a generic interval in the RooStats framework. More...;  ; class  DebuggingSampler;  ; class  DebuggingTestStat;  ; class  DetailedOutputAggregator;  This class is designed to aid in the construction of RooDataSets and RooArgSets, particularly those naturally arising in fitting operations. More...;  ; class  FeldmanCousins;  The FeldmanCousins class (like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction. More...;  ; class  FrequentistCalculator;  Does a frequentist hypothesis test. More...;  ; class  Heaviside;  Represents the Heaviside function. More...;  ; class  HLFactory;  HLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool. More...;  ; class  HybridCalculator;  Same purpose as HybridCalculato",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:1249,Integrability,interface,interface,1249,"oStats. Namespace for the RooStats classes. ; More... Namespaces; namespace  HistFactory;  ; namespace  NumberCountingUtils;  ; namespace  ROOTDict;  . Classes; class  AcceptanceRegion;  ; class  AsymptoticCalculator;  Hypothesis Test Calculator based on the asymptotic formulae for the profile likelihood ratio. More...;  ; class  BayesianCalculator;  BayesianCalculator is a concrete implementation of IntervalCalculator, providing the computation of a credible interval using a Bayesian method. More...;  ; class  BernsteinCorrection;  BernsteinCorrection is a utility in RooStats to augment a nominal PDF with a polynomial correction term. More...;  ; class  BranchStore;  ; class  CombinedCalculator;  CombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals. More...;  ; class  ConfidenceBelt;  ConfidenceBelt is a concrete implementation of the ConfInterval interface. More...;  ; class  ConfInterval;  ConfInterval is an interface class for a generic interval in the RooStats framework. More...;  ; class  DebuggingSampler;  ; class  DebuggingTestStat;  ; class  DetailedOutputAggregator;  This class is designed to aid in the construction of RooDataSets and RooArgSets, particularly those naturally arising in fitting operations. More...;  ; class  FeldmanCousins;  The FeldmanCousins class (like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction. More...;  ; class  FrequentistCalculator;  Does a frequentist hypothesis test. More...;  ; class  Heaviside;  Represents the Heaviside function. More...;  ; class  HLFactory;  HLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool. More...;  ; class  HybridCalculator;  Same purpose as HybridCalculatorOriginal, but different implementation. More...;  ; class  HybridPlot;  This class provides the plots for the resu",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:2038,Integrability,interface,interface,2038,"or is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals. More...;  ; class  ConfidenceBelt;  ConfidenceBelt is a concrete implementation of the ConfInterval interface. More...;  ; class  ConfInterval;  ConfInterval is an interface class for a generic interval in the RooStats framework. More...;  ; class  DebuggingSampler;  ; class  DebuggingTestStat;  ; class  DetailedOutputAggregator;  This class is designed to aid in the construction of RooDataSets and RooArgSets, particularly those naturally arising in fitting operations. More...;  ; class  FeldmanCousins;  The FeldmanCousins class (like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction. More...;  ; class  FrequentistCalculator;  Does a frequentist hypothesis test. More...;  ; class  Heaviside;  Represents the Heaviside function. More...;  ; class  HLFactory;  HLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool. More...;  ; class  HybridCalculator;  Same purpose as HybridCalculatorOriginal, but different implementation. More...;  ; class  HybridPlot;  This class provides the plots for the result of a study performed with the HybridCalculatorOriginal class. More...;  ; class  HybridResult;  Class encapsulating the result of the HybridCalculatorOriginal. More...;  ; class  HypoTestCalculator;  HypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults. More...;  ; class  HypoTestCalculatorGeneric;  Common base class for the Hypothesis Test Calculators. More...;  ; class  HypoTestInverter;  A class for performing a hypothesis test inversion by scanning the hypothesis test results of a HypoTestCalculator for various values of the parameter of interest. More...;  ; class  HypoTestInverterPlot;  Class to plot a HypoTestInverterResult, the output of the HypoTestInverter calcul",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:2487,Integrability,interface,interface,2487,"rgSets, particularly those naturally arising in fitting operations. More...;  ; class  FeldmanCousins;  The FeldmanCousins class (like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction. More...;  ; class  FrequentistCalculator;  Does a frequentist hypothesis test. More...;  ; class  Heaviside;  Represents the Heaviside function. More...;  ; class  HLFactory;  HLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool. More...;  ; class  HybridCalculator;  Same purpose as HybridCalculatorOriginal, but different implementation. More...;  ; class  HybridPlot;  This class provides the plots for the result of a study performed with the HybridCalculatorOriginal class. More...;  ; class  HybridResult;  Class encapsulating the result of the HybridCalculatorOriginal. More...;  ; class  HypoTestCalculator;  HypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults. More...;  ; class  HypoTestCalculatorGeneric;  Common base class for the Hypothesis Test Calculators. More...;  ; class  HypoTestInverter;  A class for performing a hypothesis test inversion by scanning the hypothesis test results of a HypoTestCalculator for various values of the parameter of interest. More...;  ; class  HypoTestInverterPlot;  Class to plot a HypoTestInverterResult, the output of the HypoTestInverter calculator. More...;  ; class  HypoTestInverterResult;  HypoTestInverterResult class holds the array of hypothesis test results and compute a confidence interval. More...;  ; class  HypoTestPlot;  This class provides the plots for the result of a study performed with any of the HypoTestCalculatorGeneric (e.g. More...;  ; class  HypoTestResult;  HypoTestResult is a base class for results from hypothesis tests. More...;  ; class  IntervalCalculator;  IntervalCalculator is an interface class for a tools which prod",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:3454,Integrability,interface,interface,3454,"or;  HypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults. More...;  ; class  HypoTestCalculatorGeneric;  Common base class for the Hypothesis Test Calculators. More...;  ; class  HypoTestInverter;  A class for performing a hypothesis test inversion by scanning the hypothesis test results of a HypoTestCalculator for various values of the parameter of interest. More...;  ; class  HypoTestInverterPlot;  Class to plot a HypoTestInverterResult, the output of the HypoTestInverter calculator. More...;  ; class  HypoTestInverterResult;  HypoTestInverterResult class holds the array of hypothesis test results and compute a confidence interval. More...;  ; class  HypoTestPlot;  This class provides the plots for the result of a study performed with any of the HypoTestCalculatorGeneric (e.g. More...;  ; class  HypoTestResult;  HypoTestResult is a base class for results from hypothesis tests. More...;  ; class  IntervalCalculator;  IntervalCalculator is an interface class for a tools which produce RooStats ConfIntervals. More...;  ; struct  LikelihoodFunction;  ; class  LikelihoodInterval;  LikelihoodInterval is a concrete implementation of the RooStats::ConfInterval interface. More...;  ; class  LikelihoodIntervalPlot;  This class provides simple and straightforward utilities to plot a LikelihoodInterval object. More...;  ; class  MarkovChain;  Stores the steps in a Markov Chain of points. More...;  ; class  MaxLikelihoodEstimateTestStat;  MaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood estimate of a specified parameter. More...;  ; class  MCMCCalculator;  Bayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function. More...;  ; class  MCMCInterval;  MCMCInterval is a concrete implementation of the RooStats::ConfInterval interface. More...;  ; class  MCMCIntervalPlot;  This class prov",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:3669,Integrability,interface,interface,3669,"ommon base class for the Hypothesis Test Calculators. More...;  ; class  HypoTestInverter;  A class for performing a hypothesis test inversion by scanning the hypothesis test results of a HypoTestCalculator for various values of the parameter of interest. More...;  ; class  HypoTestInverterPlot;  Class to plot a HypoTestInverterResult, the output of the HypoTestInverter calculator. More...;  ; class  HypoTestInverterResult;  HypoTestInverterResult class holds the array of hypothesis test results and compute a confidence interval. More...;  ; class  HypoTestPlot;  This class provides the plots for the result of a study performed with any of the HypoTestCalculatorGeneric (e.g. More...;  ; class  HypoTestResult;  HypoTestResult is a base class for results from hypothesis tests. More...;  ; class  IntervalCalculator;  IntervalCalculator is an interface class for a tools which produce RooStats ConfIntervals. More...;  ; struct  LikelihoodFunction;  ; class  LikelihoodInterval;  LikelihoodInterval is a concrete implementation of the RooStats::ConfInterval interface. More...;  ; class  LikelihoodIntervalPlot;  This class provides simple and straightforward utilities to plot a LikelihoodInterval object. More...;  ; class  MarkovChain;  Stores the steps in a Markov Chain of points. More...;  ; class  MaxLikelihoodEstimateTestStat;  MaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood estimate of a specified parameter. More...;  ; class  MCMCCalculator;  Bayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function. More...;  ; class  MCMCInterval;  MCMCInterval is a concrete implementation of the RooStats::ConfInterval interface. More...;  ; class  MCMCIntervalPlot;  This class provides simple and straightforward utilities to plot a MCMCInterval object. More...;  ; class  MetropolisHastings;  This class uses the Metropolis-H",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:4205,Integrability,integrat,integrate,4205, class provides the plots for the result of a study performed with any of the HypoTestCalculatorGeneric (e.g. More...;  ; class  HypoTestResult;  HypoTestResult is a base class for results from hypothesis tests. More...;  ; class  IntervalCalculator;  IntervalCalculator is an interface class for a tools which produce RooStats ConfIntervals. More...;  ; struct  LikelihoodFunction;  ; class  LikelihoodInterval;  LikelihoodInterval is a concrete implementation of the RooStats::ConfInterval interface. More...;  ; class  LikelihoodIntervalPlot;  This class provides simple and straightforward utilities to plot a LikelihoodInterval object. More...;  ; class  MarkovChain;  Stores the steps in a Markov Chain of points. More...;  ; class  MaxLikelihoodEstimateTestStat;  MaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood estimate of a specified parameter. More...;  ; class  MCMCCalculator;  Bayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function. More...;  ; class  MCMCInterval;  MCMCInterval is a concrete implementation of the RooStats::ConfInterval interface. More...;  ; class  MCMCIntervalPlot;  This class provides simple and straightforward utilities to plot a MCMCInterval object. More...;  ; class  MetropolisHastings;  This class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo. More...;  ; class  MinNLLTestStat;  MinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic. More...;  ; class  ModelConfig;  ModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools. More...;  ; class  NeymanConstruction;  NeymanConstruction is a concrete implementation of the Neyman,MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:4394,Integrability,interface,interface,4394,"lass for results from hypothesis tests. More...;  ; class  IntervalCalculator;  IntervalCalculator is an interface class for a tools which produce RooStats ConfIntervals. More...;  ; struct  LikelihoodFunction;  ; class  LikelihoodInterval;  LikelihoodInterval is a concrete implementation of the RooStats::ConfInterval interface. More...;  ; class  LikelihoodIntervalPlot;  This class provides simple and straightforward utilities to plot a LikelihoodInterval object. More...;  ; class  MarkovChain;  Stores the steps in a Markov Chain of points. More...;  ; class  MaxLikelihoodEstimateTestStat;  MaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood estimate of a specified parameter. More...;  ; class  MCMCCalculator;  Bayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function. More...;  ; class  MCMCInterval;  MCMCInterval is a concrete implementation of the RooStats::ConfInterval interface. More...;  ; class  MCMCIntervalPlot;  This class provides simple and straightforward utilities to plot a MCMCInterval object. More...;  ; class  MetropolisHastings;  This class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo. More...;  ; class  MinNLLTestStat;  MinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic. More...;  ; class  ModelConfig;  ModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools. More...;  ; class  NeymanConstruction;  NeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction. More...;  ; class  NuisanceParametersSampler;  Helper class for ToyMCSampler. More...;  ; c",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:4776,Integrability,interface,interface,4776,"ikelihoodInterval object. More...;  ; class  MarkovChain;  Stores the steps in a Markov Chain of points. More...;  ; class  MaxLikelihoodEstimateTestStat;  MaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood estimate of a specified parameter. More...;  ; class  MCMCCalculator;  Bayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function. More...;  ; class  MCMCInterval;  MCMCInterval is a concrete implementation of the RooStats::ConfInterval interface. More...;  ; class  MCMCIntervalPlot;  This class provides simple and straightforward utilities to plot a MCMCInterval object. More...;  ; class  MetropolisHastings;  This class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo. More...;  ; class  MinNLLTestStat;  MinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic. More...;  ; class  ModelConfig;  ModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools. More...;  ; class  NeymanConstruction;  NeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction. More...;  ; class  NuisanceParametersSampler;  Helper class for ToyMCSampler. More...;  ; class  NumberCountingPdfFactory;  A factory for building PDFs and data for a number counting combination. More...;  ; class  NumEventsTestStat;  NumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting. More...;  ; class  PdfProposal;  PdfProposal is a concrete implementation of the ProposalFunction interface. More...;  ; class  PointSetInterval;  PointSetInterval is a concrete implementati",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:5190,Integrability,interface,interface,5190,"Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function. More...;  ; class  MCMCInterval;  MCMCInterval is a concrete implementation of the RooStats::ConfInterval interface. More...;  ; class  MCMCIntervalPlot;  This class provides simple and straightforward utilities to plot a MCMCInterval object. More...;  ; class  MetropolisHastings;  This class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo. More...;  ; class  MinNLLTestStat;  MinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic. More...;  ; class  ModelConfig;  ModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools. More...;  ; class  NeymanConstruction;  NeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction. More...;  ; class  NuisanceParametersSampler;  Helper class for ToyMCSampler. More...;  ; class  NumberCountingPdfFactory;  A factory for building PDFs and data for a number counting combination. More...;  ; class  NumEventsTestStat;  NumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting. More...;  ; class  PdfProposal;  PdfProposal is a concrete implementation of the ProposalFunction interface. More...;  ; class  PointSetInterval;  PointSetInterval is a concrete implementation of the ConfInterval interface. More...;  ; class  PosteriorCdfFunction;  ; class  PosteriorFunction;  ; class  PosteriorFunctionFromToyMC;  Posterior function obtaining sampling toy MC for the nuisance according to their pdf. More...;  ; class  ProfileInspector;  Utility class to plot conditional MLE of nuisance parameters vs. More...;  ; class  ProfileLikelihoodCalculator",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:5560,Integrability,interface,interface,5560,"ore...;  ; class  MetropolisHastings;  This class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo. More...;  ; class  MinNLLTestStat;  MinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic. More...;  ; class  ModelConfig;  ModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools. More...;  ; class  NeymanConstruction;  NeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction. More...;  ; class  NuisanceParametersSampler;  Helper class for ToyMCSampler. More...;  ; class  NumberCountingPdfFactory;  A factory for building PDFs and data for a number counting combination. More...;  ; class  NumEventsTestStat;  NumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting. More...;  ; class  PdfProposal;  PdfProposal is a concrete implementation of the ProposalFunction interface. More...;  ; class  PointSetInterval;  PointSetInterval is a concrete implementation of the ConfInterval interface. More...;  ; class  PosteriorCdfFunction;  ; class  PosteriorFunction;  ; class  PosteriorFunctionFromToyMC;  Posterior function obtaining sampling toy MC for the nuisance according to their pdf. More...;  ; class  ProfileInspector;  Utility class to plot conditional MLE of nuisance parameters vs. More...;  ; class  ProfileLikelihoodCalculator;  The ProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for tools which can produce both a RooStats HypoTestResult and ConfInterval). More...;  ; class  ProfileLikelihoodTestStat;  ProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a p",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:5701,Integrability,interface,interface,5701,"nts using Monte Carlo. More...;  ; class  MinNLLTestStat;  MinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic. More...;  ; class  ModelConfig;  ModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools. More...;  ; class  NeymanConstruction;  NeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction. More...;  ; class  NuisanceParametersSampler;  Helper class for ToyMCSampler. More...;  ; class  NumberCountingPdfFactory;  A factory for building PDFs and data for a number counting combination. More...;  ; class  NumEventsTestStat;  NumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting. More...;  ; class  PdfProposal;  PdfProposal is a concrete implementation of the ProposalFunction interface. More...;  ; class  PointSetInterval;  PointSetInterval is a concrete implementation of the ConfInterval interface. More...;  ; class  PosteriorCdfFunction;  ; class  PosteriorFunction;  ; class  PosteriorFunctionFromToyMC;  Posterior function obtaining sampling toy MC for the nuisance according to their pdf. More...;  ; class  ProfileInspector;  Utility class to plot conditional MLE of nuisance parameters vs. More...;  ; class  ProfileLikelihoodCalculator;  The ProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for tools which can produce both a RooStats HypoTestResult and ConfInterval). More...;  ; class  ProfileLikelihoodTestStat;  ProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset. More...;  ; class  ProofConfig;  Holds configuration options for proof and proof-lite.",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:5816,Integrability,interface,interface,5816,"tic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic. More...;  ; class  ModelConfig;  ModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools. More...;  ; class  NeymanConstruction;  NeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction. More...;  ; class  NuisanceParametersSampler;  Helper class for ToyMCSampler. More...;  ; class  NumberCountingPdfFactory;  A factory for building PDFs and data for a number counting combination. More...;  ; class  NumEventsTestStat;  NumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting. More...;  ; class  PdfProposal;  PdfProposal is a concrete implementation of the ProposalFunction interface. More...;  ; class  PointSetInterval;  PointSetInterval is a concrete implementation of the ConfInterval interface. More...;  ; class  PosteriorCdfFunction;  ; class  PosteriorFunction;  ; class  PosteriorFunctionFromToyMC;  Posterior function obtaining sampling toy MC for the nuisance according to their pdf. More...;  ; class  ProfileInspector;  Utility class to plot conditional MLE of nuisance parameters vs. More...;  ; class  ProfileLikelihoodCalculator;  The ProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for tools which can produce both a RooStats HypoTestResult and ConfInterval). More...;  ; class  ProfileLikelihoodTestStat;  ProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset. More...;  ; class  ProofConfig;  Holds configuration options for proof and proof-lite. More...;  ; class  ProposalFunction;  ProposalFunction is an interface for all proposal functions that would be",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:6262,Integrability,interface,interface,6262,anConstruction. More...;  ; class  NuisanceParametersSampler;  Helper class for ToyMCSampler. More...;  ; class  NumberCountingPdfFactory;  A factory for building PDFs and data for a number counting combination. More...;  ; class  NumEventsTestStat;  NumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting. More...;  ; class  PdfProposal;  PdfProposal is a concrete implementation of the ProposalFunction interface. More...;  ; class  PointSetInterval;  PointSetInterval is a concrete implementation of the ConfInterval interface. More...;  ; class  PosteriorCdfFunction;  ; class  PosteriorFunction;  ; class  PosteriorFunctionFromToyMC;  Posterior function obtaining sampling toy MC for the nuisance according to their pdf. More...;  ; class  ProfileInspector;  Utility class to plot conditional MLE of nuisance parameters vs. More...;  ; class  ProfileLikelihoodCalculator;  The ProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for tools which can produce both a RooStats HypoTestResult and ConfInterval). More...;  ; class  ProfileLikelihoodTestStat;  ProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset. More...;  ; class  ProofConfig;  Holds configuration options for proof and proof-lite. More...;  ; class  ProposalFunction;  ProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm. More...;  ; class  ProposalHelper;  ; class  RatioOfProfiledLikelihoodsTestStat;  TestStatistic that returns the ratio of profiled likelihoods. More...;  ; struct  RooStatsConfig;  ; class  SamplingDistPlot;  This class provides simple and straightforward utilities to plot SamplingDistribution objects. More...;  ; class  SamplingDistribution;  This class simply holds a sampling distribution of some test statistic. More,MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:6471,Integrability,interface,interface,6471,lass  NumEventsTestStat;  NumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting. More...;  ; class  PdfProposal;  PdfProposal is a concrete implementation of the ProposalFunction interface. More...;  ; class  PointSetInterval;  PointSetInterval is a concrete implementation of the ConfInterval interface. More...;  ; class  PosteriorCdfFunction;  ; class  PosteriorFunction;  ; class  PosteriorFunctionFromToyMC;  Posterior function obtaining sampling toy MC for the nuisance according to their pdf. More...;  ; class  ProfileInspector;  Utility class to plot conditional MLE of nuisance parameters vs. More...;  ; class  ProfileLikelihoodCalculator;  The ProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for tools which can produce both a RooStats HypoTestResult and ConfInterval). More...;  ; class  ProfileLikelihoodTestStat;  ProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset. More...;  ; class  ProofConfig;  Holds configuration options for proof and proof-lite. More...;  ; class  ProposalFunction;  ProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm. More...;  ; class  ProposalHelper;  ; class  RatioOfProfiledLikelihoodsTestStat;  TestStatistic that returns the ratio of profiled likelihoods. More...;  ; struct  RooStatsConfig;  ; class  SamplingDistPlot;  This class provides simple and straightforward utilities to plot SamplingDistribution objects. More...;  ; class  SamplingDistribution;  This class simply holds a sampling distribution of some test statistic. More...;  ; class  SamplingSummary;  ; class  SamplingSummaryLookup;  ; class  SequentialProposal;  Class implementing a proposal function that samples the parameter space by moving only in one coordinate (chosen randomly) at eac,MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:6723,Integrability,interface,interface,6723,al;  PointSetInterval is a concrete implementation of the ConfInterval interface. More...;  ; class  PosteriorCdfFunction;  ; class  PosteriorFunction;  ; class  PosteriorFunctionFromToyMC;  Posterior function obtaining sampling toy MC for the nuisance according to their pdf. More...;  ; class  ProfileInspector;  Utility class to plot conditional MLE of nuisance parameters vs. More...;  ; class  ProfileLikelihoodCalculator;  The ProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for tools which can produce both a RooStats HypoTestResult and ConfInterval). More...;  ; class  ProfileLikelihoodTestStat;  ProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset. More...;  ; class  ProofConfig;  Holds configuration options for proof and proof-lite. More...;  ; class  ProposalFunction;  ProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm. More...;  ; class  ProposalHelper;  ; class  RatioOfProfiledLikelihoodsTestStat;  TestStatistic that returns the ratio of profiled likelihoods. More...;  ; struct  RooStatsConfig;  ; class  SamplingDistPlot;  This class provides simple and straightforward utilities to plot SamplingDistribution objects. More...;  ; class  SamplingDistribution;  This class simply holds a sampling distribution of some test statistic. More...;  ; class  SamplingSummary;  ; class  SamplingSummaryLookup;  ; class  SequentialProposal;  Class implementing a proposal function that samples the parameter space by moving only in one coordinate (chosen randomly) at each step. More...;  ; class  SimpleInterval;  SimpleInterval is a concrete implementation of the ConfInterval interface. More...;  ; class  SimpleLikelihoodRatioTestStat;  TestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood. More...;  ; class  SPlo,MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:7577,Integrability,interface,interface,7577,"icular parameter point given a dataset. More...;  ; class  ProofConfig;  Holds configuration options for proof and proof-lite. More...;  ; class  ProposalFunction;  ProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm. More...;  ; class  ProposalHelper;  ; class  RatioOfProfiledLikelihoodsTestStat;  TestStatistic that returns the ratio of profiled likelihoods. More...;  ; struct  RooStatsConfig;  ; class  SamplingDistPlot;  This class provides simple and straightforward utilities to plot SamplingDistribution objects. More...;  ; class  SamplingDistribution;  This class simply holds a sampling distribution of some test statistic. More...;  ; class  SamplingSummary;  ; class  SamplingSummaryLookup;  ; class  SequentialProposal;  Class implementing a proposal function that samples the parameter space by moving only in one coordinate (chosen randomly) at each step. More...;  ; class  SimpleInterval;  SimpleInterval is a concrete implementation of the ConfInterval interface. More...;  ; class  SimpleLikelihoodRatioTestStat;  TestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood. More...;  ; class  SPlot;  A class to calculate ""sWeights"" used to create an ""sPlot"". More...;  ; class  TestStatistic;  TestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class. More...;  ; class  TestStatSampler;  TestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions. More...;  ; class  ToyMCImportanceSampler;  ToyMCImportanceSampler is an extension of the ToyMCSampler for Importance Sampling. More...;  ; class  ToyMCPayload;  ; class  ToyMCSampler;  ToyMCSampler is an implementation of the TestStatSampler interface. More...;  ; class  ToyMCStudy;  ToyMCStudy is an implementation of RooAbsStudy for toy Monte Carlo sampling. More...;  ; class  UniformProposal;  UniformProposal is a c",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:7863,Integrability,interface,interface,7863,"Stat;  TestStatistic that returns the ratio of profiled likelihoods. More...;  ; struct  RooStatsConfig;  ; class  SamplingDistPlot;  This class provides simple and straightforward utilities to plot SamplingDistribution objects. More...;  ; class  SamplingDistribution;  This class simply holds a sampling distribution of some test statistic. More...;  ; class  SamplingSummary;  ; class  SamplingSummaryLookup;  ; class  SequentialProposal;  Class implementing a proposal function that samples the parameter space by moving only in one coordinate (chosen randomly) at each step. More...;  ; class  SimpleInterval;  SimpleInterval is a concrete implementation of the ConfInterval interface. More...;  ; class  SimpleLikelihoodRatioTestStat;  TestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood. More...;  ; class  SPlot;  A class to calculate ""sWeights"" used to create an ""sPlot"". More...;  ; class  TestStatistic;  TestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class. More...;  ; class  TestStatSampler;  TestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions. More...;  ; class  ToyMCImportanceSampler;  ToyMCImportanceSampler is an extension of the ToyMCSampler for Importance Sampling. More...;  ; class  ToyMCPayload;  ; class  ToyMCSampler;  ToyMCSampler is an implementation of the TestStatSampler interface. More...;  ; class  ToyMCStudy;  ToyMCStudy is an implementation of RooAbsStudy for toy Monte Carlo sampling. More...;  ; class  UniformProposal;  UniformProposal is a concrete implementation of the ProposalFunction interface for use with a Markov Chain Monte Carlo algorithm. More...;  ; class  UpperLimitMCSModule;  This class allow to compute in the ToyMcStudy framework the ProfileLikelihood upper limit for each toy-MC sample generated. More...;  . Enumerations; enum  toysStrategies { EQUALTOYSPERDENSITY; , EXPONENTIALTOYDIS",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:8040,Integrability,interface,interface,8040," simple and straightforward utilities to plot SamplingDistribution objects. More...;  ; class  SamplingDistribution;  This class simply holds a sampling distribution of some test statistic. More...;  ; class  SamplingSummary;  ; class  SamplingSummaryLookup;  ; class  SequentialProposal;  Class implementing a proposal function that samples the parameter space by moving only in one coordinate (chosen randomly) at each step. More...;  ; class  SimpleInterval;  SimpleInterval is a concrete implementation of the ConfInterval interface. More...;  ; class  SimpleLikelihoodRatioTestStat;  TestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood. More...;  ; class  SPlot;  A class to calculate ""sWeights"" used to create an ""sPlot"". More...;  ; class  TestStatistic;  TestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class. More...;  ; class  TestStatSampler;  TestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions. More...;  ; class  ToyMCImportanceSampler;  ToyMCImportanceSampler is an extension of the ToyMCSampler for Importance Sampling. More...;  ; class  ToyMCPayload;  ; class  ToyMCSampler;  ToyMCSampler is an implementation of the TestStatSampler interface. More...;  ; class  ToyMCStudy;  ToyMCStudy is an implementation of RooAbsStudy for toy Monte Carlo sampling. More...;  ; class  UniformProposal;  UniformProposal is a concrete implementation of the ProposalFunction interface for use with a Markov Chain Monte Carlo algorithm. More...;  ; class  UpperLimitMCSModule;  This class allow to compute in the ToyMcStudy framework the ProfileLikelihood upper limit for each toy-MC sample generated. More...;  . Enumerations; enum  toysStrategies { EQUALTOYSPERDENSITY; , EXPONENTIALTOYDISTRIBUTION; };  . Functions; double AsimovSignificance (double s, double b, double sigma_b=0.0);  Compute the Asimov Median significance for a Poisson pro",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:8357,Integrability,interface,interface,8357,"  ; class  SequentialProposal;  Class implementing a proposal function that samples the parameter space by moving only in one coordinate (chosen randomly) at each step. More...;  ; class  SimpleInterval;  SimpleInterval is a concrete implementation of the ConfInterval interface. More...;  ; class  SimpleLikelihoodRatioTestStat;  TestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood. More...;  ; class  SPlot;  A class to calculate ""sWeights"" used to create an ""sPlot"". More...;  ; class  TestStatistic;  TestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class. More...;  ; class  TestStatSampler;  TestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions. More...;  ; class  ToyMCImportanceSampler;  ToyMCImportanceSampler is an extension of the ToyMCSampler for Importance Sampling. More...;  ; class  ToyMCPayload;  ; class  ToyMCSampler;  ToyMCSampler is an implementation of the TestStatSampler interface. More...;  ; class  ToyMCStudy;  ToyMCStudy is an implementation of RooAbsStudy for toy Monte Carlo sampling. More...;  ; class  UniformProposal;  UniformProposal is a concrete implementation of the ProposalFunction interface for use with a Markov Chain Monte Carlo algorithm. More...;  ; class  UpperLimitMCSModule;  This class allow to compute in the ToyMcStudy framework the ProfileLikelihood upper limit for each toy-MC sample generated. More...;  . Enumerations; enum  toysStrategies { EQUALTOYSPERDENSITY; , EXPONENTIALTOYDISTRIBUTION; };  . Functions; double AsimovSignificance (double s, double b, double sigma_b=0.0);  Compute the Asimov Median significance for a Poisson process with s = expected number of signal events, b = expected number of background events and optionally sigma_b = expected uncertainty of background events. ;  ; BranchStore * CreateBranchStore (const RooDataSet &data);  ; void FactorizePdf (const RooArgSet",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:8583,Integrability,interface,interface,8583," ConfInterval interface. More...;  ; class  SimpleLikelihoodRatioTestStat;  TestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood. More...;  ; class  SPlot;  A class to calculate ""sWeights"" used to create an ""sPlot"". More...;  ; class  TestStatistic;  TestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class. More...;  ; class  TestStatSampler;  TestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions. More...;  ; class  ToyMCImportanceSampler;  ToyMCImportanceSampler is an extension of the ToyMCSampler for Importance Sampling. More...;  ; class  ToyMCPayload;  ; class  ToyMCSampler;  ToyMCSampler is an implementation of the TestStatSampler interface. More...;  ; class  ToyMCStudy;  ToyMCStudy is an implementation of RooAbsStudy for toy Monte Carlo sampling. More...;  ; class  UniformProposal;  UniformProposal is a concrete implementation of the ProposalFunction interface for use with a Markov Chain Monte Carlo algorithm. More...;  ; class  UpperLimitMCSModule;  This class allow to compute in the ToyMcStudy framework the ProfileLikelihood upper limit for each toy-MC sample generated. More...;  . Enumerations; enum  toysStrategies { EQUALTOYSPERDENSITY; , EXPONENTIALTOYDISTRIBUTION; };  . Functions; double AsimovSignificance (double s, double b, double sigma_b=0.0);  Compute the Asimov Median significance for a Poisson process with s = expected number of signal events, b = expected number of background events and optionally sigma_b = expected uncertainty of background events. ;  ; BranchStore * CreateBranchStore (const RooDataSet &data);  ; void FactorizePdf (const RooArgSet &observables, RooAbsPdf &pdf, RooArgList &obsTerms, RooArgList &constraints);  ; void FactorizePdf (RooStats::ModelConfig &model, RooAbsPdf &pdf, RooArgList &obsTerms, RooArgList &constraints);  ; void FillTree (TTree &myTree, const RooDataSet &data);  ; ",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:1683,Modifiability,config,configuration,1683,"ntation of IntervalCalculator, providing the computation of a credible interval using a Bayesian method. More...;  ; class  BernsteinCorrection;  BernsteinCorrection is a utility in RooStats to augment a nominal PDF with a polynomial correction term. More...;  ; class  BranchStore;  ; class  CombinedCalculator;  CombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals. More...;  ; class  ConfidenceBelt;  ConfidenceBelt is a concrete implementation of the ConfInterval interface. More...;  ; class  ConfInterval;  ConfInterval is an interface class for a generic interval in the RooStats framework. More...;  ; class  DebuggingSampler;  ; class  DebuggingTestStat;  ; class  DetailedOutputAggregator;  This class is designed to aid in the construction of RooDataSets and RooArgSets, particularly those naturally arising in fitting operations. More...;  ; class  FeldmanCousins;  The FeldmanCousins class (like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction. More...;  ; class  FrequentistCalculator;  Does a frequentist hypothesis test. More...;  ; class  Heaviside;  Represents the Heaviside function. More...;  ; class  HLFactory;  HLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool. More...;  ; class  HybridCalculator;  Same purpose as HybridCalculatorOriginal, but different implementation. More...;  ; class  HybridPlot;  This class provides the plots for the result of a study performed with the HybridCalculatorOriginal class. More...;  ; class  HybridResult;  Class encapsulating the result of the HybridCalculatorOriginal. More...;  ; class  HypoTestCalculator;  HypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults. More...;  ; class  HypoTestCalculatorGeneric;  Common base class for the Hypothesis Test Calcula",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:1994,Modifiability,config,configuration,1994,"or is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals. More...;  ; class  ConfidenceBelt;  ConfidenceBelt is a concrete implementation of the ConfInterval interface. More...;  ; class  ConfInterval;  ConfInterval is an interface class for a generic interval in the RooStats framework. More...;  ; class  DebuggingSampler;  ; class  DebuggingTestStat;  ; class  DetailedOutputAggregator;  This class is designed to aid in the construction of RooDataSets and RooArgSets, particularly those naturally arising in fitting operations. More...;  ; class  FeldmanCousins;  The FeldmanCousins class (like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction. More...;  ; class  FrequentistCalculator;  Does a frequentist hypothesis test. More...;  ; class  Heaviside;  Represents the Heaviside function. More...;  ; class  HLFactory;  HLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool. More...;  ; class  HybridCalculator;  Same purpose as HybridCalculatorOriginal, but different implementation. More...;  ; class  HybridPlot;  This class provides the plots for the result of a study performed with the HybridCalculatorOriginal class. More...;  ; class  HybridResult;  Class encapsulating the result of the HybridCalculatorOriginal. More...;  ; class  HypoTestCalculator;  HypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults. More...;  ; class  HypoTestCalculatorGeneric;  Common base class for the Hypothesis Test Calculators. More...;  ; class  HypoTestInverter;  A class for performing a hypothesis test inversion by scanning the hypothesis test results of a HypoTestCalculator for various values of the parameter of interest. More...;  ; class  HypoTestInverterPlot;  Class to plot a HypoTestInverterResult, the output of the HypoTestInverter calcul",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:4970,Modifiability,config,configuration,4970,"tic that returns maximum likelihood estimate of a specified parameter. More...;  ; class  MCMCCalculator;  Bayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function. More...;  ; class  MCMCInterval;  MCMCInterval is a concrete implementation of the RooStats::ConfInterval interface. More...;  ; class  MCMCIntervalPlot;  This class provides simple and straightforward utilities to plot a MCMCInterval object. More...;  ; class  MetropolisHastings;  This class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo. More...;  ; class  MinNLLTestStat;  MinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic. More...;  ; class  ModelConfig;  ModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools. More...;  ; class  NeymanConstruction;  NeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction. More...;  ; class  NuisanceParametersSampler;  Helper class for ToyMCSampler. More...;  ; class  NumberCountingPdfFactory;  A factory for building PDFs and data for a number counting combination. More...;  ; class  NumEventsTestStat;  NumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting. More...;  ; class  PdfProposal;  PdfProposal is a concrete implementation of the ProposalFunction interface. More...;  ; class  PointSetInterval;  PointSetInterval is a concrete implementation of the ConfInterval interface. More...;  ; class  PosteriorCdfFunction;  ; class  PosteriorFunction;  ; class  PosteriorFunctionFromToyMC;  Posterior function obtaining sampling toy MC for the ",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:6614,Modifiability,config,configuration,6614, PdfProposal;  PdfProposal is a concrete implementation of the ProposalFunction interface. More...;  ; class  PointSetInterval;  PointSetInterval is a concrete implementation of the ConfInterval interface. More...;  ; class  PosteriorCdfFunction;  ; class  PosteriorFunction;  ; class  PosteriorFunctionFromToyMC;  Posterior function obtaining sampling toy MC for the nuisance according to their pdf. More...;  ; class  ProfileInspector;  Utility class to plot conditional MLE of nuisance parameters vs. More...;  ; class  ProfileLikelihoodCalculator;  The ProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for tools which can produce both a RooStats HypoTestResult and ConfInterval). More...;  ; class  ProfileLikelihoodTestStat;  ProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset. More...;  ; class  ProofConfig;  Holds configuration options for proof and proof-lite. More...;  ; class  ProposalFunction;  ProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm. More...;  ; class  ProposalHelper;  ; class  RatioOfProfiledLikelihoodsTestStat;  TestStatistic that returns the ratio of profiled likelihoods. More...;  ; struct  RooStatsConfig;  ; class  SamplingDistPlot;  This class provides simple and straightforward utilities to plot SamplingDistribution objects. More...;  ; class  SamplingDistribution;  This class simply holds a sampling distribution of some test statistic. More...;  ; class  SamplingSummary;  ; class  SamplingSummaryLookup;  ; class  SequentialProposal;  Class implementing a proposal function that samples the parameter space by moving only in one coordinate (chosen randomly) at each step. More...;  ; class  SimpleInterval;  SimpleInterval is a concrete implementation of the ConfInterval interface. More...;  ; class  SimpleLikelihoo,MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:9852,Modifiability,config,config,9852,"ONENTIALTOYDISTRIBUTION; };  . Functions; double AsimovSignificance (double s, double b, double sigma_b=0.0);  Compute the Asimov Median significance for a Poisson process with s = expected number of signal events, b = expected number of background events and optionally sigma_b = expected uncertainty of background events. ;  ; BranchStore * CreateBranchStore (const RooDataSet &data);  ; void FactorizePdf (const RooArgSet &observables, RooAbsPdf &pdf, RooArgList &obsTerms, RooArgList &constraints);  ; void FactorizePdf (RooStats::ModelConfig &model, RooAbsPdf &pdf, RooArgList &obsTerms, RooArgList &constraints);  ; void FillTree (TTree &myTree, const RooDataSet &data);  ; TTree * GetAsTTree (TString name, TString desc, const RooDataSet &data);  Create a TTree with the given name and description. All RooRealVars in the RooDataSet are represented as branches that contain values of type double. ;  ; RooStatsConfig & GetGlobalRooStatsConfig ();  Retrieve the config object which can be used to set flags for things like offsetting the likelihood or using the error wall for the minimiser. ;  ; bool IsNLLOffset ();  function returning if the flag to check if the flag to use NLLOffset is set ;  ; RooAbsPdf * MakeNuisancePdf (const RooStats::ModelConfig &model, const char *name);  ; RooAbsPdf * MakeNuisancePdf (RooAbsPdf &pdf, const RooArgSet &observables, const char *name);  extract constraint terms from pdf ;  ; RooWorkspace * MakeReducedWorkspace (RooWorkspace *oldWS, const char *newName, bool copySnapshots, const char *mcname, const char *newmcname, bool copyData=true);  function that clones a workspace, copying all needed components and discarding all others ;  ; RooAbsPdf * MakeUnconstrainedPdf (const RooStats::ModelConfig &model, const char *name=nullptr);  ; RooAbsPdf * MakeUnconstrainedPdf (RooAbsPdf &pdf, const RooArgSet &observables, const char *name=nullptr);  remove constraints from pdf and return the unconstrained pdf ;  ; void PrintListContent (const RooArgList ",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:11465,Modifiability,variab,variable,11465,"ranches that contain values of type double. ;  ; RooStatsConfig & GetGlobalRooStatsConfig ();  Retrieve the config object which can be used to set flags for things like offsetting the likelihood or using the error wall for the minimiser. ;  ; bool IsNLLOffset ();  function returning if the flag to check if the flag to use NLLOffset is set ;  ; RooAbsPdf * MakeNuisancePdf (const RooStats::ModelConfig &model, const char *name);  ; RooAbsPdf * MakeNuisancePdf (RooAbsPdf &pdf, const RooArgSet &observables, const char *name);  extract constraint terms from pdf ;  ; RooWorkspace * MakeReducedWorkspace (RooWorkspace *oldWS, const char *newName, bool copySnapshots, const char *mcname, const char *newmcname, bool copyData=true);  function that clones a workspace, copying all needed components and discarding all others ;  ; RooAbsPdf * MakeUnconstrainedPdf (const RooStats::ModelConfig &model, const char *name=nullptr);  ; RooAbsPdf * MakeUnconstrainedPdf (RooAbsPdf &pdf, const RooArgSet &observables, const char *name=nullptr);  remove constraints from pdf and return the unconstrained pdf ;  ; void PrintListContent (const RooArgList &l, std::ostream &os=std::cout);  useful function to print in one line the content of a set with their values ;  ; double PValueToSignificance (double pvalue);  returns one-sided significance corresponding to a p-value ;  ; void RandomizeCollection (RooAbsCollection &set, bool randomizeConstants=true);  assuming all values in set are RooRealVars, randomize their values ;  ; void RemoveConstantParameters (RooArgList &set);  ; void RemoveConstantParameters (RooArgSet *set);  ; bool SetAllConstant (const RooAbsCollection &coll, bool constant=true);  utility function to set all variable constant in a collection (from G. ;  ; void SetParameters (const RooArgSet *desiredVals, RooArgSet *paramsToChange);  ; double SignificanceToPValue (double Z);  returns p-value corresponding to a 1-sided significance ;  ; RooAbsPdf * StripConstraints (RooAbsPdf &pdf, co",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:14022,Modifiability,config,config,14022,"ooArgSet & ; observables, . RooAbsPdf & ; pdf, . RooArgList & ; obsTerms, . RooArgList & ; constraints . ). Definition at line 91 of file RooStatsUtils.cxx. ◆ FactorizePdf() [2/2]. void RooStats::FactorizePdf ; (; RooStats::ModelConfig & ; model, . RooAbsPdf & ; pdf, . RooArgList & ; obsTerms, . RooArgList & ; constraints . ). Definition at line 124 of file RooStatsUtils.cxx. ◆ FillTree(). void RooStats::FillTree ; (; TTree & ; myTree, . const RooDataSet & ; data . ). Definition at line 297 of file RooStatsUtils.cxx. ◆ GetAsTTree(). TTree * RooStats::GetAsTTree ; (; TString ; name, . TString ; desc, . const RooDataSet & ; data . ). Create a TTree with the given name and description. All RooRealVars in the RooDataSet are represented as branches that contain values of type double. ; Definition at line 321 of file RooStatsUtils.cxx. ◆ GetGlobalRooStatsConfig(). RooStatsConfig & RooStats::GetGlobalRooStatsConfig ; (; ). Retrieve the config object which can be used to set flags for things like offsetting the likelihood or using the error wall for the minimiser. ; Definition at line 54 of file RooStatsUtils.cxx. ◆ IsNLLOffset(). bool RooStats::IsNLLOffset ; (; ). function returning if the flag to check if the flag to use NLLOffset is set ; Test of RooStats should by default offset NLL calculations. ; Definition at line 87 of file RooStatsUtils.cxx. ◆ MakeNuisancePdf() [1/2]. RooAbsPdf * RooStats::MakeNuisancePdf ; (; const RooStats::ModelConfig & ; model, . const char * ; name . ). Definition at line 147 of file RooStatsUtils.cxx. ◆ MakeNuisancePdf() [2/2]. RooAbsPdf * RooStats::MakeNuisancePdf ; (; RooAbsPdf & ; pdf, . const RooArgSet & ; observables, . const char * ; name . ). extract constraint terms from pdf ; Definition at line 135 of file RooStatsUtils.cxx. ◆ MakeReducedWorkspace(). RooWorkspace * RooStats::MakeReducedWorkspace ; (; RooWorkspace * ; oldWS, . const char * ; newName, . bool ; copySnapshots, . const char * ; mcname, . const char * ; newmcname, . bool ; ",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:16912,Modifiability,variab,variable,16912,"their values ; Definition at line 329 of file RooStatsUtils.cxx. ◆ PValueToSignificance(). double RooStats::PValueToSignificance ; (; double ; pvalue). inline . returns one-sided significance corresponding to a p-value ; Definition at line 49 of file RooStatsUtils.h. ◆ RandomizeCollection(). void RooStats::RandomizeCollection ; (; RooAbsCollection & ; set, . bool ; randomizeConstants = true . ). inline . assuming all values in set are RooRealVars, randomize their values ; Definition at line 98 of file RooStatsUtils.h. ◆ RemoveConstantParameters() [1/2]. void RooStats::RemoveConstantParameters ; (; RooArgList & ; set). inline . Definition at line 75 of file RooStatsUtils.h. ◆ RemoveConstantParameters() [2/2]. void RooStats::RemoveConstantParameters ; (; RooArgSet * ; set). inline . Definition at line 67 of file RooStatsUtils.h. ◆ SetAllConstant(). bool RooStats::SetAllConstant ; (; const RooAbsCollection & ; coll, . bool ; constant = true . ). inline . utility function to set all variable constant in a collection (from G. ; Petrucciani) ; Definition at line 85 of file RooStatsUtils.h. ◆ SetParameters(). void RooStats::SetParameters ; (; const RooArgSet * ; desiredVals, . RooArgSet * ; paramsToChange . ). inline . Definition at line 63 of file RooStatsUtils.h. ◆ SignificanceToPValue(). double RooStats::SignificanceToPValue ; (; double ; Z). inline . returns p-value corresponding to a 1-sided significance ; Definition at line 54 of file RooStatsUtils.h. ◆ StripConstraints(). RooAbsPdf * RooStats::StripConstraints ; (; RooAbsPdf & ; pdf, . const RooArgSet & ; observables . ). Definition at line 156 of file RooStatsUtils.cxx. ◆ UseNLLOffset(). void RooStats::UseNLLOffset ; (; bool ; on). function to set a global flag in RooStats to use NLL offset when performing nll computations Note that not all ROoStats tools implement this capabilities ; Use an offset in NLL calculations. ; Definition at line 82 of file RooStatsUtils.cxx. Variable Documentation. ◆ kRootFinderType. cons",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:2273,Performance,perform,performed,2273,"e class for a generic interval in the RooStats framework. More...;  ; class  DebuggingSampler;  ; class  DebuggingTestStat;  ; class  DetailedOutputAggregator;  This class is designed to aid in the construction of RooDataSets and RooArgSets, particularly those naturally arising in fitting operations. More...;  ; class  FeldmanCousins;  The FeldmanCousins class (like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction. More...;  ; class  FrequentistCalculator;  Does a frequentist hypothesis test. More...;  ; class  Heaviside;  Represents the Heaviside function. More...;  ; class  HLFactory;  HLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool. More...;  ; class  HybridCalculator;  Same purpose as HybridCalculatorOriginal, but different implementation. More...;  ; class  HybridPlot;  This class provides the plots for the result of a study performed with the HybridCalculatorOriginal class. More...;  ; class  HybridResult;  Class encapsulating the result of the HybridCalculatorOriginal. More...;  ; class  HypoTestCalculator;  HypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults. More...;  ; class  HypoTestCalculatorGeneric;  Common base class for the Hypothesis Test Calculators. More...;  ; class  HypoTestInverter;  A class for performing a hypothesis test inversion by scanning the hypothesis test results of a HypoTestCalculator for various values of the parameter of interest. More...;  ; class  HypoTestInverterPlot;  Class to plot a HypoTestInverterResult, the output of the HypoTestInverter calculator. More...;  ; class  HypoTestInverterResult;  HypoTestInverterResult class holds the array of hypothesis test results and compute a confidence interval. More...;  ; class  HypoTestPlot;  This class provides the plots for the result of a study performed with any of the Hyp",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:2707,Performance,perform,performing,2707,"entistCalculator;  Does a frequentist hypothesis test. More...;  ; class  Heaviside;  Represents the Heaviside function. More...;  ; class  HLFactory;  HLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool. More...;  ; class  HybridCalculator;  Same purpose as HybridCalculatorOriginal, but different implementation. More...;  ; class  HybridPlot;  This class provides the plots for the result of a study performed with the HybridCalculatorOriginal class. More...;  ; class  HybridResult;  Class encapsulating the result of the HybridCalculatorOriginal. More...;  ; class  HypoTestCalculator;  HypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults. More...;  ; class  HypoTestCalculatorGeneric;  Common base class for the Hypothesis Test Calculators. More...;  ; class  HypoTestInverter;  A class for performing a hypothesis test inversion by scanning the hypothesis test results of a HypoTestCalculator for various values of the parameter of interest. More...;  ; class  HypoTestInverterPlot;  Class to plot a HypoTestInverterResult, the output of the HypoTestInverter calculator. More...;  ; class  HypoTestInverterResult;  HypoTestInverterResult class holds the array of hypothesis test results and compute a confidence interval. More...;  ; class  HypoTestPlot;  This class provides the plots for the result of a study performed with any of the HypoTestCalculatorGeneric (e.g. More...;  ; class  HypoTestResult;  HypoTestResult is a base class for results from hypothesis tests. More...;  ; class  IntervalCalculator;  IntervalCalculator is an interface class for a tools which produce RooStats ConfIntervals. More...;  ; struct  LikelihoodFunction;  ; class  LikelihoodInterval;  LikelihoodInterval is a concrete implementation of the RooStats::ConfInterval interface. More...;  ; class  LikelihoodIntervalPlot;  This class provides simple and straig",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:3229,Performance,perform,performed,3229,"  This class provides the plots for the result of a study performed with the HybridCalculatorOriginal class. More...;  ; class  HybridResult;  Class encapsulating the result of the HybridCalculatorOriginal. More...;  ; class  HypoTestCalculator;  HypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults. More...;  ; class  HypoTestCalculatorGeneric;  Common base class for the Hypothesis Test Calculators. More...;  ; class  HypoTestInverter;  A class for performing a hypothesis test inversion by scanning the hypothesis test results of a HypoTestCalculator for various values of the parameter of interest. More...;  ; class  HypoTestInverterPlot;  Class to plot a HypoTestInverterResult, the output of the HypoTestInverter calculator. More...;  ; class  HypoTestInverterResult;  HypoTestInverterResult class holds the array of hypothesis test results and compute a confidence interval. More...;  ; class  HypoTestPlot;  This class provides the plots for the result of a study performed with any of the HypoTestCalculatorGeneric (e.g. More...;  ; class  HypoTestResult;  HypoTestResult is a base class for results from hypothesis tests. More...;  ; class  IntervalCalculator;  IntervalCalculator is an interface class for a tools which produce RooStats ConfIntervals. More...;  ; struct  LikelihoodFunction;  ; class  LikelihoodInterval;  LikelihoodInterval is a concrete implementation of the RooStats::ConfInterval interface. More...;  ; class  LikelihoodIntervalPlot;  This class provides simple and straightforward utilities to plot a LikelihoodInterval object. More...;  ; class  MarkovChain;  Stores the steps in a Markov Chain of points. More...;  ; class  MaxLikelihoodEstimateTestStat;  MaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood estimate of a specified parameter. More...;  ; class  MCMCCalculator;  Bayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate ",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:5228,Performance,perform,performs,5228,"Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function. More...;  ; class  MCMCInterval;  MCMCInterval is a concrete implementation of the RooStats::ConfInterval interface. More...;  ; class  MCMCIntervalPlot;  This class provides simple and straightforward utilities to plot a MCMCInterval object. More...;  ; class  MetropolisHastings;  This class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo. More...;  ; class  MinNLLTestStat;  MinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic. More...;  ; class  ModelConfig;  ModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools. More...;  ; class  NeymanConstruction;  NeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction. More...;  ; class  NuisanceParametersSampler;  Helper class for ToyMCSampler. More...;  ; class  NumberCountingPdfFactory;  A factory for building PDFs and data for a number counting combination. More...;  ; class  NumEventsTestStat;  NumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting. More...;  ; class  PdfProposal;  PdfProposal is a concrete implementation of the ProposalFunction interface. More...;  ; class  PointSetInterval;  PointSetInterval is a concrete implementation of the ConfInterval interface. More...;  ; class  PosteriorCdfFunction;  ; class  PosteriorFunction;  ; class  PosteriorFunctionFromToyMC;  Posterior function obtaining sampling toy MC for the nuisance according to their pdf. More...;  ; class  ProfileInspector;  Utility class to plot conditional MLE of nuisance parameters vs. More...;  ; class  ProfileLikelihoodCalculator",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:11871,Performance,perform,performing,11871," &observables, const char *name=nullptr);  remove constraints from pdf and return the unconstrained pdf ;  ; void PrintListContent (const RooArgList &l, std::ostream &os=std::cout);  useful function to print in one line the content of a set with their values ;  ; double PValueToSignificance (double pvalue);  returns one-sided significance corresponding to a p-value ;  ; void RandomizeCollection (RooAbsCollection &set, bool randomizeConstants=true);  assuming all values in set are RooRealVars, randomize their values ;  ; void RemoveConstantParameters (RooArgList &set);  ; void RemoveConstantParameters (RooArgSet *set);  ; bool SetAllConstant (const RooAbsCollection &coll, bool constant=true);  utility function to set all variable constant in a collection (from G. ;  ; void SetParameters (const RooArgSet *desiredVals, RooArgSet *paramsToChange);  ; double SignificanceToPValue (double Z);  returns p-value corresponding to a 1-sided significance ;  ; RooAbsPdf * StripConstraints (RooAbsPdf &pdf, const RooArgSet &observables);  ; void UseNLLOffset (bool on);  function to set a global flag in RooStats to use NLL offset when performing nll computations Note that not all ROoStats tools implement this capabilities ;  . Variables; const ROOT::Math::RootFinder::EType kRootFinderType = ROOT::Math::RootFinder::kBRENT;  . Detailed Description; Namespace for the RooStats classes. ; All the classes of the RooStats package are in the RooStats namespace. In addition the namespace contain a set of utility functions. ; Enumeration Type Documentation. ◆ toysStrategies. enum RooStats::toysStrategies. EnumeratorEQUALTOYSPERDENSITY ; EXPONENTIALTOYDISTRIBUTION . Definition at line 20 of file ToyMCImportanceSampler.h. Function Documentation. ◆ AsimovSignificance(). double RooStats::AsimovSignificance ; (; double ; s, . double ; b, . double ; sigma_b = 0.0 . ). Compute the Asimov Median significance for a Poisson process with s = expected number of signal events, b = expected number of backgr",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:17695,Performance,perform,performing,17695,"ls.h. ◆ RandomizeCollection(). void RooStats::RandomizeCollection ; (; RooAbsCollection & ; set, . bool ; randomizeConstants = true . ). inline . assuming all values in set are RooRealVars, randomize their values ; Definition at line 98 of file RooStatsUtils.h. ◆ RemoveConstantParameters() [1/2]. void RooStats::RemoveConstantParameters ; (; RooArgList & ; set). inline . Definition at line 75 of file RooStatsUtils.h. ◆ RemoveConstantParameters() [2/2]. void RooStats::RemoveConstantParameters ; (; RooArgSet * ; set). inline . Definition at line 67 of file RooStatsUtils.h. ◆ SetAllConstant(). bool RooStats::SetAllConstant ; (; const RooAbsCollection & ; coll, . bool ; constant = true . ). inline . utility function to set all variable constant in a collection (from G. ; Petrucciani) ; Definition at line 85 of file RooStatsUtils.h. ◆ SetParameters(). void RooStats::SetParameters ; (; const RooArgSet * ; desiredVals, . RooArgSet * ; paramsToChange . ). inline . Definition at line 63 of file RooStatsUtils.h. ◆ SignificanceToPValue(). double RooStats::SignificanceToPValue ; (; double ; Z). inline . returns p-value corresponding to a 1-sided significance ; Definition at line 54 of file RooStatsUtils.h. ◆ StripConstraints(). RooAbsPdf * RooStats::StripConstraints ; (; RooAbsPdf & ; pdf, . const RooArgSet & ; observables . ). Definition at line 156 of file RooStatsUtils.cxx. ◆ UseNLLOffset(). void RooStats::UseNLLOffset ; (; bool ; on). function to set a global flag in RooStats to use NLL offset when performing nll computations Note that not all ROoStats tools implement this capabilities ; Use an offset in NLL calculations. ; Definition at line 82 of file RooStatsUtils.cxx. Variable Documentation. ◆ kRootFinderType. const ROOT::Math::RootFinder::EType RooStats::kRootFinderType = ROOT::Math::RootFinder::kBRENT. Definition at line 100 of file BayesianCalculator.cxx. RooStats. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:53 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:1810,Testability,test,test,1810,"steinCorrection;  BernsteinCorrection is a utility in RooStats to augment a nominal PDF with a polynomial correction term. More...;  ; class  BranchStore;  ; class  CombinedCalculator;  CombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals. More...;  ; class  ConfidenceBelt;  ConfidenceBelt is a concrete implementation of the ConfInterval interface. More...;  ; class  ConfInterval;  ConfInterval is an interface class for a generic interval in the RooStats framework. More...;  ; class  DebuggingSampler;  ; class  DebuggingTestStat;  ; class  DetailedOutputAggregator;  This class is designed to aid in the construction of RooDataSets and RooArgSets, particularly those naturally arising in fitting operations. More...;  ; class  FeldmanCousins;  The FeldmanCousins class (like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction. More...;  ; class  FrequentistCalculator;  Does a frequentist hypothesis test. More...;  ; class  Heaviside;  Represents the Heaviside function. More...;  ; class  HLFactory;  HLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool. More...;  ; class  HybridCalculator;  Same purpose as HybridCalculatorOriginal, but different implementation. More...;  ; class  HybridPlot;  This class provides the plots for the result of a study performed with the HybridCalculatorOriginal class. More...;  ; class  HybridResult;  Class encapsulating the result of the HybridCalculatorOriginal. More...;  ; class  HypoTestCalculator;  HypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults. More...;  ; class  HypoTestCalculatorGeneric;  Common base class for the Hypothesis Test Calculators. More...;  ; class  HypoTestInverter;  A class for performing a hypothesis test inversion by scanning the hypothesis test re",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:2731,Testability,test,test,2731,"entistCalculator;  Does a frequentist hypothesis test. More...;  ; class  Heaviside;  Represents the Heaviside function. More...;  ; class  HLFactory;  HLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool. More...;  ; class  HybridCalculator;  Same purpose as HybridCalculatorOriginal, but different implementation. More...;  ; class  HybridPlot;  This class provides the plots for the result of a study performed with the HybridCalculatorOriginal class. More...;  ; class  HybridResult;  Class encapsulating the result of the HybridCalculatorOriginal. More...;  ; class  HypoTestCalculator;  HypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults. More...;  ; class  HypoTestCalculatorGeneric;  Common base class for the Hypothesis Test Calculators. More...;  ; class  HypoTestInverter;  A class for performing a hypothesis test inversion by scanning the hypothesis test results of a HypoTestCalculator for various values of the parameter of interest. More...;  ; class  HypoTestInverterPlot;  Class to plot a HypoTestInverterResult, the output of the HypoTestInverter calculator. More...;  ; class  HypoTestInverterResult;  HypoTestInverterResult class holds the array of hypothesis test results and compute a confidence interval. More...;  ; class  HypoTestPlot;  This class provides the plots for the result of a study performed with any of the HypoTestCalculatorGeneric (e.g. More...;  ; class  HypoTestResult;  HypoTestResult is a base class for results from hypothesis tests. More...;  ; class  IntervalCalculator;  IntervalCalculator is an interface class for a tools which produce RooStats ConfIntervals. More...;  ; struct  LikelihoodFunction;  ; class  LikelihoodInterval;  LikelihoodInterval is a concrete implementation of the RooStats::ConfInterval interface. More...;  ; class  LikelihoodIntervalPlot;  This class provides simple and straig",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:2773,Testability,test,test,2773,"entistCalculator;  Does a frequentist hypothesis test. More...;  ; class  Heaviside;  Represents the Heaviside function. More...;  ; class  HLFactory;  HLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool. More...;  ; class  HybridCalculator;  Same purpose as HybridCalculatorOriginal, but different implementation. More...;  ; class  HybridPlot;  This class provides the plots for the result of a study performed with the HybridCalculatorOriginal class. More...;  ; class  HybridResult;  Class encapsulating the result of the HybridCalculatorOriginal. More...;  ; class  HypoTestCalculator;  HypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults. More...;  ; class  HypoTestCalculatorGeneric;  Common base class for the Hypothesis Test Calculators. More...;  ; class  HypoTestInverter;  A class for performing a hypothesis test inversion by scanning the hypothesis test results of a HypoTestCalculator for various values of the parameter of interest. More...;  ; class  HypoTestInverterPlot;  Class to plot a HypoTestInverterResult, the output of the HypoTestInverter calculator. More...;  ; class  HypoTestInverterResult;  HypoTestInverterResult class holds the array of hypothesis test results and compute a confidence interval. More...;  ; class  HypoTestPlot;  This class provides the plots for the result of a study performed with any of the HypoTestCalculatorGeneric (e.g. More...;  ; class  HypoTestResult;  HypoTestResult is a base class for results from hypothesis tests. More...;  ; class  IntervalCalculator;  IntervalCalculator is an interface class for a tools which produce RooStats ConfIntervals. More...;  ; struct  LikelihoodFunction;  ; class  LikelihoodInterval;  LikelihoodInterval is a concrete implementation of the RooStats::ConfInterval interface. More...;  ; class  LikelihoodIntervalPlot;  This class provides simple and straig",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:3091,Testability,test,test,3091,"yWSTool. More...;  ; class  HybridCalculator;  Same purpose as HybridCalculatorOriginal, but different implementation. More...;  ; class  HybridPlot;  This class provides the plots for the result of a study performed with the HybridCalculatorOriginal class. More...;  ; class  HybridResult;  Class encapsulating the result of the HybridCalculatorOriginal. More...;  ; class  HypoTestCalculator;  HypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults. More...;  ; class  HypoTestCalculatorGeneric;  Common base class for the Hypothesis Test Calculators. More...;  ; class  HypoTestInverter;  A class for performing a hypothesis test inversion by scanning the hypothesis test results of a HypoTestCalculator for various values of the parameter of interest. More...;  ; class  HypoTestInverterPlot;  Class to plot a HypoTestInverterResult, the output of the HypoTestInverter calculator. More...;  ; class  HypoTestInverterResult;  HypoTestInverterResult class holds the array of hypothesis test results and compute a confidence interval. More...;  ; class  HypoTestPlot;  This class provides the plots for the result of a study performed with any of the HypoTestCalculatorGeneric (e.g. More...;  ; class  HypoTestResult;  HypoTestResult is a base class for results from hypothesis tests. More...;  ; class  IntervalCalculator;  IntervalCalculator is an interface class for a tools which produce RooStats ConfIntervals. More...;  ; struct  LikelihoodFunction;  ; class  LikelihoodInterval;  LikelihoodInterval is a concrete implementation of the RooStats::ConfInterval interface. More...;  ; class  LikelihoodIntervalPlot;  This class provides simple and straightforward utilities to plot a LikelihoodInterval object. More...;  ; class  MarkovChain;  Stores the steps in a Markov Chain of points. More...;  ; class  MaxLikelihoodEstimateTestStat;  MaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood estimate of a specified parameter. More...",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:3382,Testability,test,tests,3382,"  HybridResult;  Class encapsulating the result of the HybridCalculatorOriginal. More...;  ; class  HypoTestCalculator;  HypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults. More...;  ; class  HypoTestCalculatorGeneric;  Common base class for the Hypothesis Test Calculators. More...;  ; class  HypoTestInverter;  A class for performing a hypothesis test inversion by scanning the hypothesis test results of a HypoTestCalculator for various values of the parameter of interest. More...;  ; class  HypoTestInverterPlot;  Class to plot a HypoTestInverterResult, the output of the HypoTestInverter calculator. More...;  ; class  HypoTestInverterResult;  HypoTestInverterResult class holds the array of hypothesis test results and compute a confidence interval. More...;  ; class  HypoTestPlot;  This class provides the plots for the result of a study performed with any of the HypoTestCalculatorGeneric (e.g. More...;  ; class  HypoTestResult;  HypoTestResult is a base class for results from hypothesis tests. More...;  ; class  IntervalCalculator;  IntervalCalculator is an interface class for a tools which produce RooStats ConfIntervals. More...;  ; struct  LikelihoodFunction;  ; class  LikelihoodInterval;  LikelihoodInterval is a concrete implementation of the RooStats::ConfInterval interface. More...;  ; class  LikelihoodIntervalPlot;  This class provides simple and straightforward utilities to plot a LikelihoodInterval object. More...;  ; class  MarkovChain;  Stores the steps in a Markov Chain of points. More...;  ; class  MaxLikelihoodEstimateTestStat;  MaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood estimate of a specified parameter. More...;  ; class  MCMCCalculator;  Bayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function. More...;  ; class  MCMCInterval;  MCMCInterval is a c",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:4836,Testability,log,log,4836,"ikelihoodInterval object. More...;  ; class  MarkovChain;  Stores the steps in a Markov Chain of points. More...;  ; class  MaxLikelihoodEstimateTestStat;  MaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood estimate of a specified parameter. More...;  ; class  MCMCCalculator;  Bayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function. More...;  ; class  MCMCInterval;  MCMCInterval is a concrete implementation of the RooStats::ConfInterval interface. More...;  ; class  MCMCIntervalPlot;  This class provides simple and straightforward utilities to plot a MCMCInterval object. More...;  ; class  MetropolisHastings;  This class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo. More...;  ; class  MinNLLTestStat;  MinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic. More...;  ; class  ModelConfig;  ModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools. More...;  ; class  NeymanConstruction;  NeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction. More...;  ; class  NuisanceParametersSampler;  Helper class for ToyMCSampler. More...;  ; class  NumberCountingPdfFactory;  A factory for building PDFs and data for a number counting combination. More...;  ; class  NumEventsTestStat;  NumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting. More...;  ; class  PdfProposal;  PdfProposal is a concrete implementation of the ProposalFunction interface. More...;  ; class  PointSetInterval;  PointSetInterval is a concrete implementati",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:4880,Testability,test,test,4880,"ikelihoodInterval object. More...;  ; class  MarkovChain;  Stores the steps in a Markov Chain of points. More...;  ; class  MaxLikelihoodEstimateTestStat;  MaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood estimate of a specified parameter. More...;  ; class  MCMCCalculator;  Bayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function. More...;  ; class  MCMCInterval;  MCMCInterval is a concrete implementation of the RooStats::ConfInterval interface. More...;  ; class  MCMCIntervalPlot;  This class provides simple and straightforward utilities to plot a MCMCInterval object. More...;  ; class  MetropolisHastings;  This class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo. More...;  ; class  MinNLLTestStat;  MinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic. More...;  ; class  ModelConfig;  ModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools. More...;  ; class  NeymanConstruction;  NeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction. More...;  ; class  NuisanceParametersSampler;  Helper class for ToyMCSampler. More...;  ; class  NumberCountingPdfFactory;  A factory for building PDFs and data for a number counting combination. More...;  ; class  NumEventsTestStat;  NumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting. More...;  ; class  PdfProposal;  PdfProposal is a concrete implementation of the ProposalFunction interface. More...;  ; class  PointSetInterval;  PointSetInterval is a concrete implementati",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:7224,Testability,test,test,7224,"ikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for tools which can produce both a RooStats HypoTestResult and ConfInterval). More...;  ; class  ProfileLikelihoodTestStat;  ProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset. More...;  ; class  ProofConfig;  Holds configuration options for proof and proof-lite. More...;  ; class  ProposalFunction;  ProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm. More...;  ; class  ProposalHelper;  ; class  RatioOfProfiledLikelihoodsTestStat;  TestStatistic that returns the ratio of profiled likelihoods. More...;  ; struct  RooStatsConfig;  ; class  SamplingDistPlot;  This class provides simple and straightforward utilities to plot SamplingDistribution objects. More...;  ; class  SamplingDistribution;  This class simply holds a sampling distribution of some test statistic. More...;  ; class  SamplingSummary;  ; class  SamplingSummaryLookup;  ; class  SequentialProposal;  Class implementing a proposal function that samples the parameter space by moving only in one coordinate (chosen randomly) at each step. More...;  ; class  SimpleInterval;  SimpleInterval is a concrete implementation of the ConfInterval interface. More...;  ; class  SimpleLikelihoodRatioTestStat;  TestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood. More...;  ; class  SPlot;  A class to calculate ""sWeights"" used to create an ""sPlot"". More...;  ; class  TestStatistic;  TestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class. More...;  ; class  TestStatSampler;  TestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions. More...;  ; class  ToyMCImportanceSampler;  ToyMCImportanceSampler is an",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:7673,Testability,log,log,7673,"te. More...;  ; class  ProposalFunction;  ProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm. More...;  ; class  ProposalHelper;  ; class  RatioOfProfiledLikelihoodsTestStat;  TestStatistic that returns the ratio of profiled likelihoods. More...;  ; struct  RooStatsConfig;  ; class  SamplingDistPlot;  This class provides simple and straightforward utilities to plot SamplingDistribution objects. More...;  ; class  SamplingDistribution;  This class simply holds a sampling distribution of some test statistic. More...;  ; class  SamplingSummary;  ; class  SamplingSummaryLookup;  ; class  SequentialProposal;  Class implementing a proposal function that samples the parameter space by moving only in one coordinate (chosen randomly) at each step. More...;  ; class  SimpleInterval;  SimpleInterval is a concrete implementation of the ConfInterval interface. More...;  ; class  SimpleLikelihoodRatioTestStat;  TestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood. More...;  ; class  SPlot;  A class to calculate ""sWeights"" used to create an ""sPlot"". More...;  ; class  TestStatistic;  TestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class. More...;  ; class  TestStatSampler;  TestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions. More...;  ; class  ToyMCImportanceSampler;  ToyMCImportanceSampler is an extension of the ToyMCSampler for Importance Sampling. More...;  ; class  ToyMCPayload;  ; class  ToyMCSampler;  ToyMCSampler is an implementation of the TestStatSampler interface. More...;  ; class  ToyMCStudy;  ToyMCStudy is an implementation of RooAbsStudy for toy Monte Carlo sampling. More...;  ; class  UniformProposal;  UniformProposal is a concrete implementation of the ProposalFunction interface for use with a Markov Chain Monte Carlo algorithm. More...;  ; cl",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:7918,Testability,test,test,7918,"Stat;  TestStatistic that returns the ratio of profiled likelihoods. More...;  ; struct  RooStatsConfig;  ; class  SamplingDistPlot;  This class provides simple and straightforward utilities to plot SamplingDistribution objects. More...;  ; class  SamplingDistribution;  This class simply holds a sampling distribution of some test statistic. More...;  ; class  SamplingSummary;  ; class  SamplingSummaryLookup;  ; class  SequentialProposal;  Class implementing a proposal function that samples the parameter space by moving only in one coordinate (chosen randomly) at each step. More...;  ; class  SimpleInterval;  SimpleInterval is a concrete implementation of the ConfInterval interface. More...;  ; class  SimpleLikelihoodRatioTestStat;  TestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood. More...;  ; class  SPlot;  A class to calculate ""sWeights"" used to create an ""sPlot"". More...;  ; class  TestStatistic;  TestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class. More...;  ; class  TestStatSampler;  TestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions. More...;  ; class  ToyMCImportanceSampler;  ToyMCImportanceSampler is an extension of the ToyMCSampler for Importance Sampling. More...;  ; class  ToyMCPayload;  ; class  ToyMCSampler;  ToyMCSampler is an implementation of the TestStatSampler interface. More...;  ; class  ToyMCStudy;  ToyMCStudy is an implementation of RooAbsStudy for toy Monte Carlo sampling. More...;  ; class  UniformProposal;  UniformProposal is a concrete implementation of the ProposalFunction interface for use with a Markov Chain Monte Carlo algorithm. More...;  ; class  UpperLimitMCSModule;  This class allow to compute in the ToyMcStudy framework the ProfileLikelihood upper limit for each toy-MC sample generated. More...;  . Enumerations; enum  toysStrategies { EQUALTOYSPERDENSITY; , EXPONENTIALTOYDIS",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:3744,Usability,simpl,simple,3744,"nning the hypothesis test results of a HypoTestCalculator for various values of the parameter of interest. More...;  ; class  HypoTestInverterPlot;  Class to plot a HypoTestInverterResult, the output of the HypoTestInverter calculator. More...;  ; class  HypoTestInverterResult;  HypoTestInverterResult class holds the array of hypothesis test results and compute a confidence interval. More...;  ; class  HypoTestPlot;  This class provides the plots for the result of a study performed with any of the HypoTestCalculatorGeneric (e.g. More...;  ; class  HypoTestResult;  HypoTestResult is a base class for results from hypothesis tests. More...;  ; class  IntervalCalculator;  IntervalCalculator is an interface class for a tools which produce RooStats ConfIntervals. More...;  ; struct  LikelihoodFunction;  ; class  LikelihoodInterval;  LikelihoodInterval is a concrete implementation of the RooStats::ConfInterval interface. More...;  ; class  LikelihoodIntervalPlot;  This class provides simple and straightforward utilities to plot a LikelihoodInterval object. More...;  ; class  MarkovChain;  Stores the steps in a Markov Chain of points. More...;  ; class  MaxLikelihoodEstimateTestStat;  MaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood estimate of a specified parameter. More...;  ; class  MCMCCalculator;  Bayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function. More...;  ; class  MCMCInterval;  MCMCInterval is a concrete implementation of the RooStats::ConfInterval interface. More...;  ; class  MCMCIntervalPlot;  This class provides simple and straightforward utilities to plot a MCMCInterval object. More...;  ; class  MetropolisHastings;  This class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo. More...;  ; class  MinNLLTestStat;  MinNLLTestStat is an implementati",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:4463,Usability,simpl,simple,4463,"or a tools which produce RooStats ConfIntervals. More...;  ; struct  LikelihoodFunction;  ; class  LikelihoodInterval;  LikelihoodInterval is a concrete implementation of the RooStats::ConfInterval interface. More...;  ; class  LikelihoodIntervalPlot;  This class provides simple and straightforward utilities to plot a LikelihoodInterval object. More...;  ; class  MarkovChain;  Stores the steps in a Markov Chain of points. More...;  ; class  MaxLikelihoodEstimateTestStat;  MaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood estimate of a specified parameter. More...;  ; class  MCMCCalculator;  Bayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function. More...;  ; class  MCMCInterval;  MCMCInterval is a concrete implementation of the RooStats::ConfInterval interface. More...;  ; class  MCMCIntervalPlot;  This class provides simple and straightforward utilities to plot a MCMCInterval object. More...;  ; class  MetropolisHastings;  This class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo. More...;  ; class  MinNLLTestStat;  MinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic. More...;  ; class  ModelConfig;  ModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools. More...;  ; class  NeymanConstruction;  NeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction. More...;  ; class  NuisanceParametersSampler;  Helper class for ToyMCSampler. More...;  ; class  NumberCountingPdfFactory;  A factory for building PDFs and data for a number counting combination. More...;  ; clas",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:4946,Usability,simpl,simple,4946,"tic that returns maximum likelihood estimate of a specified parameter. More...;  ; class  MCMCCalculator;  Bayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function. More...;  ; class  MCMCInterval;  MCMCInterval is a concrete implementation of the RooStats::ConfInterval interface. More...;  ; class  MCMCIntervalPlot;  This class provides simple and straightforward utilities to plot a MCMCInterval object. More...;  ; class  MetropolisHastings;  This class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo. More...;  ; class  MinNLLTestStat;  MinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic. More...;  ; class  ModelConfig;  ModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools. More...;  ; class  NeymanConstruction;  NeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction. More...;  ; class  NuisanceParametersSampler;  Helper class for ToyMCSampler. More...;  ; class  NumberCountingPdfFactory;  A factory for building PDFs and data for a number counting combination. More...;  ; class  NumEventsTestStat;  NumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting. More...;  ; class  PdfProposal;  PdfProposal is a concrete implementation of the ProposalFunction interface. More...;  ; class  PointSetInterval;  PointSetInterval is a concrete implementation of the ConfInterval interface. More...;  ; class  PosteriorCdfFunction;  ; class  PosteriorFunction;  ; class  PosteriorFunctionFromToyMC;  Posterior function obtaining sampling toy MC for the ",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:5517,Usability,simpl,simple,5517,"ore...;  ; class  MetropolisHastings;  This class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo. More...;  ; class  MinNLLTestStat;  MinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic. More...;  ; class  ModelConfig;  ModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools. More...;  ; class  NeymanConstruction;  NeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction. More...;  ; class  NuisanceParametersSampler;  Helper class for ToyMCSampler. More...;  ; class  NumberCountingPdfFactory;  A factory for building PDFs and data for a number counting combination. More...;  ; class  NumEventsTestStat;  NumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting. More...;  ; class  PdfProposal;  PdfProposal is a concrete implementation of the ProposalFunction interface. More...;  ; class  PointSetInterval;  PointSetInterval is a concrete implementation of the ConfInterval interface. More...;  ; class  PosteriorCdfFunction;  ; class  PosteriorFunction;  ; class  PosteriorFunctionFromToyMC;  Posterior function obtaining sampling toy MC for the nuisance according to their pdf. More...;  ; class  ProfileInspector;  Utility class to plot conditional MLE of nuisance parameters vs. More...;  ; class  ProfileLikelihoodCalculator;  The ProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for tools which can produce both a RooStats HypoTestResult and ConfInterval). More...;  ; class  ProfileLikelihoodTestStat;  ProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a p",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:5579,Usability,simpl,simple,5579,"ore...;  ; class  MetropolisHastings;  This class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo. More...;  ; class  MinNLLTestStat;  MinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic. More...;  ; class  ModelConfig;  ModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools. More...;  ; class  NeymanConstruction;  NeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction. More...;  ; class  NuisanceParametersSampler;  Helper class for ToyMCSampler. More...;  ; class  NumberCountingPdfFactory;  A factory for building PDFs and data for a number counting combination. More...;  ; class  NumEventsTestStat;  NumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting. More...;  ; class  PdfProposal;  PdfProposal is a concrete implementation of the ProposalFunction interface. More...;  ; class  PointSetInterval;  PointSetInterval is a concrete implementation of the ConfInterval interface. More...;  ; class  PosteriorCdfFunction;  ; class  PosteriorFunction;  ; class  PosteriorFunctionFromToyMC;  Posterior function obtaining sampling toy MC for the nuisance according to their pdf. More...;  ; class  ProfileInspector;  Utility class to plot conditional MLE of nuisance parameters vs. More...;  ; class  ProfileLikelihoodCalculator;  The ProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for tools which can produce both a RooStats HypoTestResult and ConfInterval). More...;  ; class  ProfileLikelihoodTestStat;  ProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a p",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:7051,Usability,simpl,simple,7051,"nspector;  Utility class to plot conditional MLE of nuisance parameters vs. More...;  ; class  ProfileLikelihoodCalculator;  The ProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for tools which can produce both a RooStats HypoTestResult and ConfInterval). More...;  ; class  ProfileLikelihoodTestStat;  ProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset. More...;  ; class  ProofConfig;  Holds configuration options for proof and proof-lite. More...;  ; class  ProposalFunction;  ProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm. More...;  ; class  ProposalHelper;  ; class  RatioOfProfiledLikelihoodsTestStat;  TestStatistic that returns the ratio of profiled likelihoods. More...;  ; struct  RooStatsConfig;  ; class  SamplingDistPlot;  This class provides simple and straightforward utilities to plot SamplingDistribution objects. More...;  ; class  SamplingDistribution;  This class simply holds a sampling distribution of some test statistic. More...;  ; class  SamplingSummary;  ; class  SamplingSummaryLookup;  ; class  SequentialProposal;  Class implementing a proposal function that samples the parameter space by moving only in one coordinate (chosen randomly) at each step. More...;  ; class  SimpleInterval;  SimpleInterval is a concrete implementation of the ConfInterval interface. More...;  ; class  SimpleLikelihoodRatioTestStat;  TestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood. More...;  ; class  SPlot;  A class to calculate ""sWeights"" used to create an ""sPlot"". More...;  ; class  TestStatistic;  TestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class. More...;  ; class  TestStatSampler;  TestStatSampler is an interface",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceRooStats.html:7179,Usability,simpl,simply,7179,"ikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for tools which can produce both a RooStats HypoTestResult and ConfInterval). More...;  ; class  ProfileLikelihoodTestStat;  ProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset. More...;  ; class  ProofConfig;  Holds configuration options for proof and proof-lite. More...;  ; class  ProposalFunction;  ProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm. More...;  ; class  ProposalHelper;  ; class  RatioOfProfiledLikelihoodsTestStat;  TestStatistic that returns the ratio of profiled likelihoods. More...;  ; struct  RooStatsConfig;  ; class  SamplingDistPlot;  This class provides simple and straightforward utilities to plot SamplingDistribution objects. More...;  ; class  SamplingDistribution;  This class simply holds a sampling distribution of some test statistic. More...;  ; class  SamplingSummary;  ; class  SamplingSummaryLookup;  ; class  SequentialProposal;  Class implementing a proposal function that samples the parameter space by moving only in one coordinate (chosen randomly) at each step. More...;  ; class  SimpleInterval;  SimpleInterval is a concrete implementation of the ConfInterval interface. More...;  ; class  SimpleLikelihoodRatioTestStat;  TestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood. More...;  ; class  SPlot;  A class to calculate ""sWeights"" used to create an ""sPlot"". More...;  ; class  TestStatistic;  TestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class. More...;  ; class  TestStatSampler;  TestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions. More...;  ; class  ToyMCImportanceSampler;  ToyMCImportanceSampler is an",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
https://root.cern/doc/master/namespaceROOT.html:18322,Availability,down,down,18322,"al::RLogChannel & RGeomLog ();  Log channel for Geomviewer diagnostics. ;  ; template<class RootClass > ; Short_t SetClassVersion (RootClass *);  ; std::vector< std::string > Split (std::string_view str, std::string_view delims, bool skipEmpty);  Splits a string at each character in delims. ;  ; static void StrReplace (std::string &proc, const std::string &pat, const std::string &tr);  Replace all accurances of given string with other string. ;  ; template<typename value_type > ; void ToHumanReadableSize (value_type bytes, Bool_t si, Double_t *coeff, const char **units);  Return the size expressed in 'human readable' format. ;  ; static Bool_t ValidateRule (const std::map< std::string, std::string > &rule, std::string &error_string);  Validate if the user specified rules are correct. ;  ; ROOT::Experimental::RLogChannel & WebGUILog ();  Log channel for WebGUI diagnostics. ;  ; static void WriteAutoVariables (const std::list< std::string > &target, const SourceTypeList_t &source, MembersTypeMap_t &members, std::string &className, std::string &mappedName, std::ostream &output);  Write down the sources. ;  ; void WriteReadRawRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output);  Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""]. ;  ; void WriteReadRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output);  Write the conversion function for Read rule, the function name is being written to rule[""funcname""]. ;  ; void WriteSchemaList (std::list< SchemaRuleMap_t > &rules, const std::string &listName, std::ostream &output);  Write schema rules. ;  . Variables; R__EXTERN TVirtualRWMutex * gCoreMutex = nullptr;  ; R__EXTERN SchemaRuleClassMap_t gReadRawRules;  ; R__EXTERN SchemaRuleClassMap_t gReadRules;  ; int Use the overload accepting RCompressionSetting::EAlgorithm instead;  ; struct ROOT::RQt5Crea",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:31584,Availability,avail,available,31584,"951 of file TClass.cxx. ◆ CreateClass() [2/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Version_t ; id, . const std::type_info & ; info, . TVirtualIsAProxy * ; isa, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5936 of file TClass.cxx. ◆ DisableImplicitMT(). void ROOT::DisableImplicitMT ; (; ). Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ; Definition at line 556 of file TROOT.cxx. ◆ EnableImplicitMT(). void ROOT::EnableImplicitMT ; (; UInt_t ; numthreads = 0). Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ; Parameters. [in]numthreadsNumber of threads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if R",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:35414,Availability,failure,failure,35414," thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 501 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize(). template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv.hxx. ◆ GetClass() [1/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T * ; ). Definition at line 664 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 669 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 671 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 663 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ; ). Definition at line 668 of file TClass.h. ◆ GetDelayedAddClass(). std::vector< std::unique_ptr< TClassRec > > & ROOT::GetDelayedAddClass ; (; ). Definition at line 248 of file TClassTable.cxx. ◆ GetDelayedAddClassAlternate(). std::vector< std::pair< const char *, const char * > > & ROOT::GetDelayedAdd",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:45276,Availability,down,down,45276," 'human readable' format. ; Parameters. bytesthe size in bytes to be converted ; siwhether to use the SI units or not. ; coeffreturn the size expressed in the new unit. ; unitsreturn a pointer to the string representation of the new unit . Definition at line 38 of file StringConv.hxx. ◆ ValidateRule(). static Bool_t ROOT::ValidateRule ; (; const std::map< std::string, std::string > & ; rule, . std::string & ; error_string . ). static . Validate if the user specified rules are correct. ; Definition at line 291 of file RConversionRuleParser.cxx. ◆ WebGUILog(). ROOT::Experimental::RLogChannel & ROOT::WebGUILog ; (; ). Log channel for WebGUI diagnostics. ; Definition at line 24 of file RWebDisplayArgs.cxx. ◆ WriteAutoVariables(). static void ROOT::WriteAutoVariables ; (; const std::list< std::string > & ; target, . const SourceTypeList_t & ; source, . MembersTypeMap_t & ; members, . std::string & ; className, . std::string & ; mappedName, . std::ostream & ; output . ). static . Write down the sources. ; Definition at line 490 of file RConversionRuleParser.cxx. ◆ WriteReadRawRuleFunc(). void ROOT::WriteReadRawRuleFunc ; (; SchemaRuleMap_t & ; rule, . int ; index, . std::string & ; mappedName, . MembersTypeMap_t & ; members, . std::ostream & ; output . ). Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""]. ; Definition at line 708 of file RConversionRuleParser.cxx. ◆ WriteReadRuleFunc(). void ROOT::WriteReadRuleFunc ; (; SchemaRuleMap_t & ; rule, . int ; index, . std::string & ; mappedName, . MembersTypeMap_t & ; members, . std::ostream & ; output . ). Write the conversion function for Read rule, the function name is being written to rule[""funcname""]. ; Definition at line 655 of file RConversionRuleParser.cxx. ◆ WriteSchemaList(). void ROOT::WriteSchemaList ; (; std::list< SchemaRuleMap_t > & ; rules, . const std::string & ; listName, . std::ostream & ; output . ). Write schema rules. ; Definition at line 779 of file RCo",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:17180,Deployability,update,update,17180,"nge_t > RangeDynCast (Range_t &&coll);  Takes any collection that can be used in range-based loops and applies dynamic_cast<T> to each element. ;  ; template<typename T , typename U , std::size_t N> ; RRangeCast< T, true, std::span< U > > RangeDynCast (U(&arr)[N]);  ; template<typename T , typename Range_t > ; RRangeCast< T, false, Range_t > RangeStaticCast (Range_t &&coll);  Takes any collection that can be used in range-based loops and applies static_cast<T> to each element. ;  ; template<typename T , typename U , std::size_t N> ; RRangeCast< T, false, std::span< U > > RangeStaticCast (U(&arr)[N]);  ; TNamed * RegisterClassTemplate (const char *name, const char *file, Int_t line);  Global function to register the implementation file and line of a class template (i.e. ;  ; void RemoveClass (const char *cname, TClass *cl);  Global function called by the dtor of a class's init class (see the ClassImp macro). ;  ; void RemoveClassAlternate (ROOT::TClassAlt *);  ; void ResetClassVersion (TClass *, const char *, Short_t);  Global function to update the version number. ;  ; Experimental::RLogChannel & RGeomLog ();  Log channel for Geomviewer diagnostics. ;  ; template<class RootClass > ; Short_t SetClassVersion (RootClass *);  ; std::vector< std::string > Split (std::string_view str, std::string_view delims, bool skipEmpty);  Splits a string at each character in delims. ;  ; static void StrReplace (std::string &proc, const std::string &pat, const std::string &tr);  Replace all accurances of given string with other string. ;  ; template<typename value_type > ; void ToHumanReadableSize (value_type bytes, Bool_t si, Double_t *coeff, const char **units);  Return the size expressed in 'human readable' format. ;  ; static Bool_t ValidateRule (const std::map< std::string, std::string > &rule, std::string &error_string);  Validate if the user specified rules are correct. ;  ; ROOT::Experimental::RLogChannel & WebGUILog ();  Log channel for WebGUI diagnostics. ;  ; static void Wr",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:35228,Deployability,update,updated,35228,"ing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 501 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize(). template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv.hxx. ◆ GetClass() [1/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T * ; ). Definition at line 664 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 669 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 671 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 663 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ; ). Definition at line 668 of file TClass.h. ◆ GetDelayedAddClass(). std::vector< std::unique_ptr< TClassRec > > & ROOT::GetDelayedAddClass ; (; ). Definition at line 248 of file ",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:42525,Deployability,update,update,42525,"geStaticCast() [2/2]. template<typename T , typename U , std::size_t N> . RRangeCast< T, false, std::span< U > > ROOT::RangeStaticCast ; (; U(&) ; arr[N]). Definition at line 186 of file RRangeCast.hxx. ◆ RegisterClassTemplate(). TNamed * ROOT::RegisterClassTemplate ; (; const char * ; name, . const char * ; file, . Int_t ; line . ). Global function to register the implementation file and line of a class template (i.e. ; NOT a concrete class). ; Definition at line 1005 of file TClassTable.cxx. ◆ RemoveClass(). void ROOT::RemoveClass ; (; const char * ; cname, . TClass * ; cl . ). Global function called by the dtor of a class's init class (see the ClassImp macro). ; Definition at line 985 of file TClassTable.cxx. ◆ RemoveClassAlternate(). void ROOT::RemoveClassAlternate ; (; ROOT::TClassAlt * ; alt). Definition at line 931 of file TClassTable.cxx. ◆ ResetClassVersion(). void ROOT::ResetClassVersion ; (; TClass * ; cl, . const char * ; cname, . Short_t ; newid . ). Global function to update the version number. ; This is called via the RootClassVersion macro.; if cl!=0 and cname==-1, set the new class version if and only is greater than the existing one and greater or equal to 2; and also ignore the request if fVersionUsed is true.; Note on class version number:; If no class has been specified, TClass::GetVersion will return -1; The Class Version 0 request the whole object to be transient; The Class Version 1, unless specify via ClassDef indicates that the I/O should use the TClass checksum to distinguish the layout of the class . Definition at line 951 of file TClassTable.cxx. ◆ RGeomLog(). ROOT::Experimental::RLogChannel & ROOT::RGeomLog ; (; ). Log channel for Geomviewer diagnostics. ; Definition at line 49 of file RGeomData.cxx. ◆ SetClassVersion(). template<class RootClass > . Short_t ROOT::SetClassVersion ; (; RootClass * ; ). ◆ Split(). std::vector< std::string > ROOT::Split ; (; std::string_view ; str, . std::string_view ; delims, . bool ; skipEmpty . ). Splits",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:32588,Energy Efficiency,schedul,scheduler,32588,"The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. The maximum number of threads can be influenced by the environment variable ROOT_MAX_THREADS: export ROOT_MAX_THREADS=2 will try to set the maximum number of active threads to 2, if the scheduling library (such as tbb) ""permits"".; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT ob",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:32845,Energy Efficiency,schedul,scheduling,32845,"loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. The maximum number of threads can be influenced by the environment variable ROOT_MAX_THREADS: export ROOT_MAX_THREADS=2 will try to set the maximum number of active threads to 2, if the scheduling library (such as tbb) ""permits"".; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:35117,Energy Efficiency,power,power,35117,"letion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 501 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize(). template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv.hxx. ◆ GetClass() [1/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T * ; ). Definition at line 664 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 669 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 671 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 663 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ;",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:2320,Integrability,depend,depend,2320,"or ROOT. ;  ; namespace  RDF;  ; namespace  TestSupport;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; class  RBrowser;  Web-based ROOT files and objects browser. More...;  ; class  RBrowserCatchedWidget;  ; class  RBrowserData;  Way to browse (hopefully) everything in ROOT. More...;  ; class  RBrowserDataCleanup;  ; class  RBrowserEditorWidget;  ; class  RBrowserInfoWidget;  ; class  RBrowserReply;  Reply on browser request. More...;  ; class  RBrowserRequest;  Request send from client to get content of path element. More...;  ; class  RBrowserTimer;  ; class  RBrowserWidget;  Abstract Web-based widget, which can be used in the RBrowser Used to embed canvas, geometry viewer and potentially any other widgets. More...;  ; class  RBrowserWidgetProvider;  ; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python. More...;  ; class  RFileDialog;  Web-based FileDialog. More...;  ; class  RGeoItem;  Representation of single item in the geometry browser. More...;  ; class  RGeomBrowserIter;  Iterator of hierarchical geometry structures. More...;  ; class  RGeomConfig;  Configuration parameters which can be configured on the client Send as is to-from client. More...;  ; class  RGeomDescription;  ; class  RGeomDrawing;  Object with full description for drawing geometry It includes list of visible items and list of nodes required to build them. More...;  ; class  RGeomHierarchy;  Web-based ROOT geometry hierarchy viewer. More...;  ; class  RGeomNode;  Full node description including matrices and other attributes. More...;  ; class  RG",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:2507,Integrability,interface,interface,2507,"aits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; class  RBrowser;  Web-based ROOT files and objects browser. More...;  ; class  RBrowserCatchedWidget;  ; class  RBrowserData;  Way to browse (hopefully) everything in ROOT. More...;  ; class  RBrowserDataCleanup;  ; class  RBrowserEditorWidget;  ; class  RBrowserInfoWidget;  ; class  RBrowserReply;  Reply on browser request. More...;  ; class  RBrowserRequest;  Request send from client to get content of path element. More...;  ; class  RBrowserTimer;  ; class  RBrowserWidget;  Abstract Web-based widget, which can be used in the RBrowser Used to embed canvas, geometry viewer and potentially any other widgets. More...;  ; class  RBrowserWidgetProvider;  ; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python. More...;  ; class  RFileDialog;  Web-based FileDialog. More...;  ; class  RGeoItem;  Representation of single item in the geometry browser. More...;  ; class  RGeomBrowserIter;  Iterator of hierarchical geometry structures. More...;  ; class  RGeomConfig;  Configuration parameters which can be configured on the client Send as is to-from client. More...;  ; class  RGeomDescription;  ; class  RGeomDrawing;  Object with full description for drawing geometry It includes list of visible items and list of nodes required to build them. More...;  ; class  RGeomHierarchy;  Web-based ROOT geometry hierarchy viewer. More...;  ; class  RGeomNode;  Full node description including matrices and other attributes. More...;  ; class  RGeomNodeBase;  Base description of geometry node, required only to build hierarchy. More...;  ; class  RGeomNodeInfo;  Node information including rendering data. More...;  ; class  RGeomNode",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:5523,Integrability,wrap,wrapper,5523," each element. More...;  ; class  RTreeDrawInvokeTimer;  ; class  RTreeDrawMonitoring;  ; class  RTreeViewer;  Web-based ROOT TTree viewer. More...;  ; class  RWebBrowserHandle;  Specialized handle to hold information about running browser process Used to correctly cleanup all processes and temporary directories. More...;  ; class  RWebBrowserImp;  ; class  RWebDisplayArgs;  Holds different arguments for starting browser with RWebDisplayHandle::Display() method. More...;  ; class  RWebDisplayHandle;  Handle of created web-based display Depending from type of web display, holds handle of started browser process or other display-specific information to correctly stop and cleanup display. More...;  ; class  RWebWindow;  Represents web window, which can be shown in web browser or any other supported environment. More...;  ; class  RWebWindowsManager;  Central instance to create and show web-based windows like Canvas or FitPanel. More...;  ; class  RWebWindowWSHandler;  just wrapper to deliver websockets call-backs to the RWebWindow class More...;  ; class  TBufferMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TClassAlt;  ; class  TClassRec;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TForNamespace;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This clas",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:6008,Integrability,interface,interface,6008,"lass  RWebDisplayHandle;  Handle of created web-based display Depending from type of web display, holds handle of started browser process or other display-specific information to correctly stop and cleanup display. More...;  ; class  RWebWindow;  Represents web window, which can be shown in web browser or any other supported environment. More...;  ; class  RWebWindowsManager;  Central instance to create and show web-based windows like Canvas or FitPanel. More...;  ; class  RWebWindowWSHandler;  just wrapper to deliver websockets call-backs to the RWebWindow class More...;  ; class  TBufferMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TClassAlt;  ; class  TClassRec;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TForNamespace;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex cl",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:6480,Integrability,interface,interfaces,6480,"ager;  Central instance to create and show web-based windows like Canvas or FitPanel. More...;  ; class  RWebWindowWSHandler;  just wrapper to deliver websockets call-backs to the RWebWindow class More...;  ; class  TBufferMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TClassAlt;  ; class  TClassRec;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TForNamespace;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This cl",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:6559,Integrability,interface,interface,6559,"lass More...;  ; class  TBufferMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TClassAlt;  ; class  TClassRec;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TForNamespace;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. Mo",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:7045,Integrability,interface,interface,7045," interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TForNamespace;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:7107,Integrability,wrap,wrapper,7107,". More...;  ; class  TForNamespace;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ; typedef std::map< std::string, ROOT::Internal::TSchemaType > MembersTypeMap_t;  ; typedef Long64_t(* MergeFunc",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:7230,Integrability,interface,interface,7230," data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ; typedef std::map< std::string, ROOT::Internal::TSchemaType > MembersTypeMap_t;  ; typedef Long64_t(* MergeFunc_t) (void *, TCollection *, TFileMergeInfo *);  ; typedef void *(* NewArrFunc_t) (Long_t size, void *arena);  ; typedef void *(* NewFunc_t) ",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:7408,Integrability,interface,interface,7408,"TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ; typedef std::map< std::string, ROOT::Internal::TSchemaType > MembersTypeMap_t;  ; typedef Long64_t(* MergeFunc_t) (void *, TCollection *, TFileMergeInfo *);  ; typedef void *(* NewArrFunc_t) (Long_t size, void *arena);  ; typedef void *(* NewFunc_t) (void *);  ; typedef void(* ResetAfterMergeFunc_t) (void *, TFileMergeInfo *);  ; using RFileDialogCallback_t = std::function< void(const std::string &)>;  functi",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:20121,Integrability,depend,dependents,20121,"TERN SchemaRuleClassMap_t gReadRules;  ; int Use the overload accepting RCompressionSetting::EAlgorithm instead;  ; struct ROOT::RQt5CreatorReg newRQt5CreatorReg;  ; struct ROOT::RQt6CreatorReg newRQt6CreatorReg;  . Detailed Description; tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ; ClassImp for building the THtml documentation of the class.; To build the THtml documentation.; Class RooRealSumFunc implements a PDF constructed from a sum of functions:; Namespace for new ROOT classes and functions.; VSD Structures.; Sum(i=1,n-1) coef_i * func_i(x) + [ 1 - (Sum(i=1,n-1) coef_i ] * func_n(x); pdf(x) = ------------------------------------------------------------------------------; Sum(i=1,n-1) coef_i * Int(func_i)dx + [ 1 - (Sum(i=1,n-1) coef_i ] * Int(func_n)dx; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; where coef_i and func_i are RooAbsReal objects, and x is the collection of dependents. In the present version coef_i may not depend on x, but this limitation may be removed in the future. Difference between RooAddPdf / RooRealSum{Func|Pdf}. RooAddPdf is a PDF of PDFs, i.e. its components need to be normalised and non-negative.; RooRealSumPdf is a PDF of functions, i.e., its components can be negative, but their sum cannot be. The normalisation is computed automatically, unless the PDF is extended (see above).; RooRealSumFunc is a sum of functions. It is neither normalised, nor need it be positive. . Typedef Documentation. ◆ ColumnNamesPtr_t. using ROOT::ColumnNamesPtr_t = typedef std::shared_ptr<const ColumnNames_t>. Definition at line 1723 of file RDataFrame.cxx. ◆ DelArrFunc_t. typedef void(* ROOT::DelArrFunc_t) (void *). Definition at line 117 of file Rtypes.h. ◆ DelFunc_t. typedef void(* ROOT::DelFunc_t) (void *). Definition at line 116 of file Rtypes.h. ◆ DesFunc_t. typedef void(* ROOT::DesFunc_t) (void *). Definition a",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:20171,Integrability,depend,depend,20171,"gorithm instead;  ; struct ROOT::RQt5CreatorReg newRQt5CreatorReg;  ; struct ROOT::RQt6CreatorReg newRQt6CreatorReg;  . Detailed Description; tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ; ClassImp for building the THtml documentation of the class.; To build the THtml documentation.; Class RooRealSumFunc implements a PDF constructed from a sum of functions:; Namespace for new ROOT classes and functions.; VSD Structures.; Sum(i=1,n-1) coef_i * func_i(x) + [ 1 - (Sum(i=1,n-1) coef_i ] * func_n(x); pdf(x) = ------------------------------------------------------------------------------; Sum(i=1,n-1) coef_i * Int(func_i)dx + [ 1 - (Sum(i=1,n-1) coef_i ] * Int(func_n)dx; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; where coef_i and func_i are RooAbsReal objects, and x is the collection of dependents. In the present version coef_i may not depend on x, but this limitation may be removed in the future. Difference between RooAddPdf / RooRealSum{Func|Pdf}. RooAddPdf is a PDF of PDFs, i.e. its components need to be normalised and non-negative.; RooRealSumPdf is a PDF of functions, i.e., its components can be negative, but their sum cannot be. The normalisation is computed automatically, unless the PDF is extended (see above).; RooRealSumFunc is a sum of functions. It is neither normalised, nor need it be positive. . Typedef Documentation. ◆ ColumnNamesPtr_t. using ROOT::ColumnNamesPtr_t = typedef std::shared_ptr<const ColumnNames_t>. Definition at line 1723 of file RDataFrame.cxx. ◆ DelArrFunc_t. typedef void(* ROOT::DelArrFunc_t) (void *). Definition at line 117 of file Rtypes.h. ◆ DelFunc_t. typedef void(* ROOT::DelFunc_t) (void *). Definition at line 116 of file Rtypes.h. ◆ DesFunc_t. typedef void(* ROOT::DesFunc_t) (void *). Definition at line 118 of file Rtypes.h. ◆ DirAutoAdd_t. typedef void(* ROOT::DirAutoAdd_t) (void *, TDirecto",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:35038,Integrability,rout,routine,35038,"letion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 501 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize(). template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv.hxx. ◆ GetClass() [1/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T * ; ). Definition at line 664 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 669 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 671 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 663 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ;",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:634,Modifiability,inherit,inherits,634,". ROOT: ROOT Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables ; ROOT Namespace ReferenceMath » MathCore | Math » MathMore » Statistical functions. tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ; More... Namespaces; namespace  Browsable;  ; namespace  CocoaTutorials;  ; namespace  Detail;  Special implementation of ROOT::RRangeCast for TCollection, including a check that the cast target type inherits from TObject and a new constructor that takes the TCollection by pointer. ;  ; namespace  Details;  ; namespace  ExecutorUtils;  This namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce. ;  ; namespace  Experimental;  ; namespace  Fit;  Namespace for the fitting classes. ;  ; namespace  FoundationUtils;  ; namespace  Geom;  ; namespace  Internal;  ; namespace  MacOSX;  ; namespace  Math;  ; namespace  MathMore;  ; namespace  Meta;  ; namespace  Minuit;  ; namespace  Minuit2;  ; namespace  option;  The namespace of The Lean Mean C++ Option Parser. ;  ; namespace  Quartz;  ; namespace  R;  namespace associated R package for ROOT. ;  ; namespace  RDF;  ; namespace  TestSupport;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; class  RBrowser;  Web-based ROOT files and objects browser. More...;  ; class  RBrowserCatchedWidget;  ; class  RBrowserData;  Way to browse (hopefully) everything in ROOT. More...;  ; class  RBrowserDataCleanup;  ; class  RBrowserEditorWidget;  ; class  RBrowserInfoWidget;  ; class  RBrowserReply;  Reply on browser request. More...;  ; class  RBrowserRequest;  Request send from client to g",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:2339,Modifiability,variab,variable,2339,"or ROOT. ;  ; namespace  RDF;  ; namespace  TestSupport;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; class  RBrowser;  Web-based ROOT files and objects browser. More...;  ; class  RBrowserCatchedWidget;  ; class  RBrowserData;  Way to browse (hopefully) everything in ROOT. More...;  ; class  RBrowserDataCleanup;  ; class  RBrowserEditorWidget;  ; class  RBrowserInfoWidget;  ; class  RBrowserReply;  Reply on browser request. More...;  ; class  RBrowserRequest;  Request send from client to get content of path element. More...;  ; class  RBrowserTimer;  ; class  RBrowserWidget;  Abstract Web-based widget, which can be used in the RBrowser Used to embed canvas, geometry viewer and potentially any other widgets. More...;  ; class  RBrowserWidgetProvider;  ; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python. More...;  ; class  RFileDialog;  Web-based FileDialog. More...;  ; class  RGeoItem;  Representation of single item in the geometry browser. More...;  ; class  RGeomBrowserIter;  Iterator of hierarchical geometry structures. More...;  ; class  RGeomConfig;  Configuration parameters which can be configured on the client Send as is to-from client. More...;  ; class  RGeomDescription;  ; class  RGeomDrawing;  Object with full description for drawing geometry It includes list of visible items and list of nodes required to build them. More...;  ; class  RGeomHierarchy;  Web-based ROOT geometry hierarchy viewer. More...;  ; class  RGeomNode;  Full node description including matrices and other attributes. More...;  ; class  RG",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:2897,Modifiability,config,configured,2897,"s  RBrowserReply;  Reply on browser request. More...;  ; class  RBrowserRequest;  Request send from client to get content of path element. More...;  ; class  RBrowserTimer;  ; class  RBrowserWidget;  Abstract Web-based widget, which can be used in the RBrowser Used to embed canvas, geometry viewer and potentially any other widgets. More...;  ; class  RBrowserWidgetProvider;  ; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python. More...;  ; class  RFileDialog;  Web-based FileDialog. More...;  ; class  RGeoItem;  Representation of single item in the geometry browser. More...;  ; class  RGeomBrowserIter;  Iterator of hierarchical geometry structures. More...;  ; class  RGeomConfig;  Configuration parameters which can be configured on the client Send as is to-from client. More...;  ; class  RGeomDescription;  ; class  RGeomDrawing;  Object with full description for drawing geometry It includes list of visible items and list of nodes required to build them. More...;  ; class  RGeomHierarchy;  Web-based ROOT geometry hierarchy viewer. More...;  ; class  RGeomNode;  Full node description including matrices and other attributes. More...;  ; class  RGeomNodeBase;  Base description of geometry node, required only to build hierarchy. More...;  ; class  RGeomNodeInfo;  Node information including rendering data. More...;  ; class  RGeomNodeVisibility;  Custom settings for physical Node visibility. More...;  ; class  RGeomRawRenderInfo;  Render info with raw data. More...;  ; class  RGeomRenderInfo;  Base class for render info block. More...;  ; class  RGeomShapeRenderInfo;  Render info with shape itself - client can produce shape better. More...;  ; class  RGeomViewer;  Web-based ROOT geometry viewer. Mor",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:20539,Modifiability,extend,extended,20539,"cumentation of the class.; To build the THtml documentation.; Class RooRealSumFunc implements a PDF constructed from a sum of functions:; Namespace for new ROOT classes and functions.; VSD Structures.; Sum(i=1,n-1) coef_i * func_i(x) + [ 1 - (Sum(i=1,n-1) coef_i ] * func_n(x); pdf(x) = ------------------------------------------------------------------------------; Sum(i=1,n-1) coef_i * Int(func_i)dx + [ 1 - (Sum(i=1,n-1) coef_i ] * Int(func_n)dx; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; where coef_i and func_i are RooAbsReal objects, and x is the collection of dependents. In the present version coef_i may not depend on x, but this limitation may be removed in the future. Difference between RooAddPdf / RooRealSum{Func|Pdf}. RooAddPdf is a PDF of PDFs, i.e. its components need to be normalised and non-negative.; RooRealSumPdf is a PDF of functions, i.e., its components can be negative, but their sum cannot be. The normalisation is computed automatically, unless the PDF is extended (see above).; RooRealSumFunc is a sum of functions. It is neither normalised, nor need it be positive. . Typedef Documentation. ◆ ColumnNamesPtr_t. using ROOT::ColumnNamesPtr_t = typedef std::shared_ptr<const ColumnNames_t>. Definition at line 1723 of file RDataFrame.cxx. ◆ DelArrFunc_t. typedef void(* ROOT::DelArrFunc_t) (void *). Definition at line 117 of file Rtypes.h. ◆ DelFunc_t. typedef void(* ROOT::DelFunc_t) (void *). Definition at line 116 of file Rtypes.h. ◆ DesFunc_t. typedef void(* ROOT::DesFunc_t) (void *). Definition at line 118 of file Rtypes.h. ◆ DirAutoAdd_t. typedef void(* ROOT::DirAutoAdd_t) (void *, TDirectory *). Definition at line 119 of file Rtypes.h. ◆ Double_v. using ROOT::Double_v = typedef Double_t. Definition at line 55 of file Types.h. ◆ Float_v. using ROOT::Float_v = typedef Float_t. Definition at line 54 of file Types.h. ◆ Int32_v. using ROOT::Int32_v = typedef Int_t. Definition at line 57 of file Types.h. ◆ Int_v. using ROOT",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:32558,Modifiability,config,configured,32558,"The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. The maximum number of threads can be influenced by the environment variable ROOT_MAX_THREADS: export ROOT_MAX_THREADS=2 will try to set the maximum number of active threads to 2, if the scheduling library (such as tbb) ""permits"".; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT ob",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:32726,Modifiability,variab,variable,32726,"loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. The maximum number of threads can be influenced by the environment variable ROOT_MAX_THREADS: export ROOT_MAX_THREADS=2 will try to set the maximum number of active threads to 2, if the scheduling library (such as tbb) ""permits"".; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:33898,Modifiability,plug-in,plug-ins,33898,"uling library (such as tbb) ""permits"".; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 501 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize(). template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str,",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:33970,Modifiability,variab,variable,33970,"g (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 501 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize(). template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:5902,Performance,queue,queue,5902,"mporary directories. More...;  ; class  RWebBrowserImp;  ; class  RWebDisplayArgs;  Holds different arguments for starting browser with RWebDisplayHandle::Display() method. More...;  ; class  RWebDisplayHandle;  Handle of created web-based display Depending from type of web display, holds handle of started browser process or other display-specific information to correctly stop and cleanup display. More...;  ; class  RWebWindow;  Represents web window, which can be shown in web browser or any other supported environment. More...;  ; class  RWebWindowsManager;  Central instance to create and show web-based windows like Canvas or FitPanel. More...;  ; class  RWebWindowWSHandler;  just wrapper to deliver websockets call-backs to the RWebWindow class More...;  ; class  TBufferMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TClassAlt;  ; class  TClassRec;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TForNamespace;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWr",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:10655,Performance,perform,performed,10655," ; using RVecC = ROOT::VecOps::RVec< char >;  ; using RVecD = ROOT::VecOps::RVec< double >;  ; using RVecF = ROOT::VecOps::RVec< float >;  ; using RVecI = ROOT::VecOps::RVec< int >;  ; using RVecL = ROOT::VecOps::RVec< long int >;  ; using RVecLL = ROOT::VecOps::RVec< long long int >;  ; using RVecU = ROOT::VecOps::RVec< unsigned int >;  ; using RVecUL = ROOT::VecOps::RVec< unsigned long int >;  ; using RVecULL = ROOT::VecOps::RVec< unsigned long long int >;  ; typedef std::map< std::string, std::list< SchemaRuleMap_t > > SchemaRuleClassMap_t;  ; typedef std::map< std::string, std::string > SchemaRuleMap_t;  ; typedef std::list< std::pair< ROOT::Internal::TSchemaType, std::string > > SourceTypeList_t;  ; using TDataFrame = ROOT::RDataFrame;  ; using TSeqI = TSeq< int >;  ; using TSeqL = TSeq< long >;  ; using TSeqU = TSeq< unsigned int >;  ; using TSeqUL = TSeq< unsigned long >;  ; using UInt32_v = UInt_t;  ; using UInt_v = UInt_t;  ; using WebWindowConnectCallback_t = std::function< void(unsigned)>;  function signature for connect/disconnect call-backs argument is connection id ;  ; using WebWindowDataCallback_t = std::function< void(unsigned, const std::string &)>;  function signature for call-backs from the window clients first argument is connection id, second is received data ;  ; using WebWindowDeleteCallback_t = std::function< void(RWebWindow &)>;  function signature for callback when RWebWindow destroyed ;  ; using WebWindowShowCallback_t = std::function< bool(RWebWindow &, const RWebDisplayArgs &)>;  function signature for catching show calls of arbitrary RWebWindow if returns true, normal show procedure will not be invoked ;  ; using WebWindowWaitFunc_t = std::function< int(double)>;  function signature for waiting call-backs Such callback used when calling thread need to waits for some special data, but wants to run application event loop As argument, spent time in second will be provided Waiting will be performed until function returns non-zero value ;  .",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:13552,Performance,multi-thread,multi-threading,13552,"ue. ;  ; void Class_ShowMembers (TClass *cl, const void *obj, TMemberInspector &);  Indirect call to the implementation of ShowMember allowing [forward] declaration with out a full definition of the TClass class. ;  ; static UInt_t ClassTableHash (const char *name, UInt_t size);  ; int CompressionSettings (RCompressionSetting::EAlgorithm::EValues algorithm, int compressionLevel);  ; int CompressionSettings (ROOT::ECompressionAlgorithm algorithm, int compressionLevel) R__DEPRECATED(6;  ; TClass * CreateClass (const char *cname, Version_t id, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; TClass * CreateClass (const char *cname, Version_t id, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; void DisableImplicitMT ();  Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ;  ; void EnableImplicitMT (UInt_t numthreads=0);  Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ;  ; void EnableThreadSafety ();  Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ;  ; static std::string::size_type FindEndSymbol (std::string &command);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (std::string_view str, T &value);  Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ;  ; template<typename T > ; TClass * GetClass (const T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass (const T *const *);  ; template<typename T > ; TClass * GetClass (T *);  ; template<typename T > ; TClass * GetClass",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:13674,Performance,multi-thread,multi-threading,13674,"owing [forward] declaration with out a full definition of the TClass class. ;  ; static UInt_t ClassTableHash (const char *name, UInt_t size);  ; int CompressionSettings (RCompressionSetting::EAlgorithm::EValues algorithm, int compressionLevel);  ; int CompressionSettings (ROOT::ECompressionAlgorithm algorithm, int compressionLevel) R__DEPRECATED(6;  ; TClass * CreateClass (const char *cname, Version_t id, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; TClass * CreateClass (const char *cname, Version_t id, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; void DisableImplicitMT ();  Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ;  ; void EnableImplicitMT (UInt_t numthreads=0);  Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ;  ; void EnableThreadSafety ();  Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ;  ; static std::string::size_type FindEndSymbol (std::string &command);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (std::string_view str, T &value);  Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ;  ; template<typename T > ; TClass * GetClass (const T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass (const T *const *);  ; template<typename T > ; TClass * GetClass (T *);  ; template<typename T > ; TClass * GetClass (T **);  ; std::vector< std::unique_ptr< TClassRec > > & GetDelayedAddClass ();  ; std::vector< std::pair< const char *, const char * >",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:13823,Performance,multi-thread,multi-threading,13823,"ngs (RCompressionSetting::EAlgorithm::EValues algorithm, int compressionLevel);  ; int CompressionSettings (ROOT::ECompressionAlgorithm algorithm, int compressionLevel) R__DEPRECATED(6;  ; TClass * CreateClass (const char *cname, Version_t id, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; TClass * CreateClass (const char *cname, Version_t id, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; void DisableImplicitMT ();  Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ;  ; void EnableImplicitMT (UInt_t numthreads=0);  Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ;  ; void EnableThreadSafety ();  Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ;  ; static std::string::size_type FindEndSymbol (std::string &command);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (std::string_view str, T &value);  Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ;  ; template<typename T > ; TClass * GetClass (const T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass (const T *const *);  ; template<typename T > ; TClass * GetClass (T *);  ; template<typename T > ; TClass * GetClass (T **);  ; std::vector< std::unique_ptr< TClassRec > > & GetDelayedAddClass ();  ; std::vector< std::pair< const char *, const char * > > & GetDelayedAddClassAlternate ();  ; TString & GetMacroPath ();  ; TROOT * GetROOT ();  ; void GetRuleIncludes (std::list< std::string > &result);  Get the list of",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:15204,Performance,multi-thread,multi-threading,15204,"3b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ;  ; template<typename T > ; TClass * GetClass (const T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass (const T *const *);  ; template<typename T > ; TClass * GetClass (T *);  ; template<typename T > ; TClass * GetClass (T **);  ; std::vector< std::unique_ptr< TClassRec > > & GetDelayedAddClass ();  ; std::vector< std::pair< const char *, const char * > > & GetDelayedAddClassAlternate ();  ; TString & GetMacroPath ();  ; TROOT * GetROOT ();  ; void GetRuleIncludes (std::list< std::string > &result);  Get the list of includes specified in the shema rules. ;  ; UInt_t GetThreadPoolSize ();  Returns the size of ROOT's thread pool. ;  ; bool HasValidDataMembers (SchemaRuleMap_t &rule, MembersTypeMap_t &members, std::string &error_string);  Check if given rule contains references to valid data members. ;  ; Bool_t IsImplicitMTEnabled ();  Returns true if the implicit multi-threading in ROOT is enabled. ;  ; template<class StringCollection_t > ; std::string Join (const std::string &sep, StringCollection_t &&strings);  Concatenate a list of strings with a separator. ;  ; template<class T > ; TSeq< T > MakeSeq (T begin, T end, T step=1);  ; template<class T > ; TSeq< T > MakeSeq (T end);  ; bool ParseRule (std::string command, ROOT::Internal::MembersMap_t &result, std::string &error_string);  Parse the schema rule as specified in the LinkDef file. ;  ; void ProcessReadPragma (const char *args, std::string &error_string);  I am being called when a read pragma is encountered. ;  ; void ProcessReadRawPragma (const char *args, std::string &error_string);  I am being called then a readraw pragma is encountered. ;  ; enum R__DEPRECATED (6, 34, ""Use RCompressionSetting::EAlgorithm instead"") ECompressionAlgorithm;  ; template<typename T , typename Range_t > ; RRangeCast< T, true, Range_t > RangeDynCast (Range_t &&coll);  Takes any collection t",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:26428,Performance,perform,performed,26428,"unction<void(unsigned, const std::string &)>. function signature for call-backs from the window clients first argument is connection id, second is received data ; Definition at line 41 of file RWebWindow.hxx. ◆ WebWindowDeleteCallback_t. using ROOT::WebWindowDeleteCallback_t = typedef std::function<void(RWebWindow &)>. function signature for callback when RWebWindow destroyed ; Definition at line 37 of file RWebWindowsManager.hxx. ◆ WebWindowShowCallback_t. using ROOT::WebWindowShowCallback_t = typedef std::function<bool(RWebWindow &, const RWebDisplayArgs &)>. function signature for catching show calls of arbitrary RWebWindow if returns true, normal show procedure will not be invoked ; Definition at line 34 of file RWebWindowsManager.hxx. ◆ WebWindowWaitFunc_t. using ROOT::WebWindowWaitFunc_t = typedef std::function<int(double)>. function signature for waiting call-backs Such callback used when calling thread need to waits for some special data, but wants to run application event loop As argument, spent time in second will be provided Waiting will be performed until function returns non-zero value ; Definition at line 48 of file RWebWindow.hxx. Enumeration Type Documentation. ◆ EExecutionPolicy. enum class ROOT::EExecutionPolicy. strong . EnumeratorkSequential ; kMultiThread ; kMultiProcess . Definition at line 5 of file EExecutionPolicy.hxx. ◆ EFromHumanReadableSize. enum class ROOT::EFromHumanReadableSize. strong . EnumeratorkSuccess ; kParseFail ; kOverflow . Definition at line 69 of file StringConv.hxx. ◆ EFunctionMatchMode. enum ROOT::EFunctionMatchMode. EnumeratorkExactMatch ; kConversionMatch . Definition at line 161 of file TDictionary.h. ◆ EIOFeatures. enum class ROOT::EIOFeatures. strong . EnumeratorkSupported . Definition at line 39 of file TIOFeatures.hxx. ◆ ESTLType. enum ROOT::ESTLType. EnumeratorkNotSTL ; kSTLvector ; kSTLlist ; kSTLdeque ; kSTLmap ; kSTLmultimap ; kSTLset ; kSTLmultiset ; kSTLbitset ; kSTLforwardlist ; kSTLunorderedset ; kSTLunordere",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:31025,Performance,multi-thread,multi-threading,31025,"ings ; (; RCompressionSetting::EAlgorithm::EValues ; algorithm, . int ; compressionLevel . ). ◆ CompressionSettings() [2/2]. int ROOT::CompressionSettings ; (; ROOT::ECompressionAlgorithm ; algorithm, . int ; compressionLevel . ). ◆ CreateClass() [1/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Version_t ; id, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5951 of file TClass.cxx. ◆ CreateClass() [2/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Version_t ; id, . const std::type_info & ; info, . TVirtualIsAProxy * ; isa, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5936 of file TClass.cxx. ◆ DisableImplicitMT(). void ROOT::DisableImplicitMT ; (; ). Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ; Definition at line 556 of file TROOT.cxx. ◆ EnableImplicitMT(). void ROOT::EnableImplicitMT ; (; UInt_t ; numthreads = 0). Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ; Parameters. [in]numthreadsNumber of threads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs ",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:31221,Performance,multi-thread,multi-threading,31221,"nLevel . ). ◆ CreateClass() [1/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Version_t ; id, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5951 of file TClass.cxx. ◆ CreateClass() [2/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Version_t ; id, . const std::type_info & ; info, . TVirtualIsAProxy * ; isa, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5936 of file TClass.cxx. ◆ DisableImplicitMT(). void ROOT::DisableImplicitMT ; (; ). Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ; Definition at line 556 of file TROOT.cxx. ◆ EnableImplicitMT(). void ROOT::EnableImplicitMT ; (; UInt_t ; numthreads = 0). Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ; Parameters. [in]numthreadsNumber of threads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. Enable",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:31661,Performance,multi-thread,multi-threading,31661,"; id, . const std::type_info & ; info, . TVirtualIsAProxy * ; isa, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5936 of file TClass.cxx. ◆ DisableImplicitMT(). void ROOT::DisableImplicitMT ; (; ). Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ; Definition at line 556 of file TROOT.cxx. ◆ EnableImplicitMT(). void ROOT::EnableImplicitMT ; (; UInt_t ; numthreads = 0). Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ; Parameters. [in]numthreadsNumber of threads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. The ma",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:32028,Performance,perform,performs,32028,"MT ; (; ). Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ; Definition at line 556 of file TROOT.cxx. ◆ EnableImplicitMT(). void ROOT::EnableImplicitMT ; (; UInt_t ; numthreads = 0). Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ; Parameters. [in]numthreadsNumber of threads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. The maximum number of threads can be influenced by the environment variable ROOT_MAX_THREADS: export ROOT_MAX_THREADS=2 will try to set the maximum number of active threads to 2, if the scheduling library (such as tbb) ""permits"".; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:32396,Performance,multi-thread,multi-threading,32396,"hreads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. The maximum number of threads can be influenced by the environment variable ROOT_MAX_THREADS: export ROOT_MAX_THREADS=2 will try to set the maximum number of active threads to 2, if the scheduling library (such as tbb) ""permits"".; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/a",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:32929,Performance,multi-thread,multi-threading,32929,"ip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. The maximum number of threads can be influenced by the environment variable ROOT_MAX_THREADS: export ROOT_MAX_THREADS=2 will try to set the maximum number of active threads to 2, if the scheduling library (such as tbb) ""permits"".; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad beco",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:33195,Performance,multi-thread,multi-threading,33195,"n parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. The maximum number of threads can be influenced by the environment variable ROOT_MAX_THREADS: export ROOT_MAX_THREADS=2 will try to set the maximum number of active threads to 2, if the scheduling library (such as tbb) ""permits"".; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this metho",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:33393,Performance,concurren,concurrent,33393,"eter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. The maximum number of threads can be influenced by the environment variable ROOT_MAX_THREADS: export ROOT_MAX_THREADS=2 will try to set the maximum number of active threads to 2, if the scheduling library (such as tbb) ""permits"".; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableTh",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:33559,Performance,concurren,concurrent,33559,"rnal scheduler, setting a value for 'numthreads' might not have any effect. The maximum number of threads can be influenced by the environment variable ROOT_MAX_THREADS: export ROOT_MAX_THREADS=2 will try to set the maximum number of active threads to 2, if the scheduling library (such as tbb) ""permits"".; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 501 of file TROOT.cxx. ◆ FindEndSymbol(). static st",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:33742,Performance,concurren,concurrent,33742,"OOT_MAX_THREADS=2 will try to set the maximum number of active threads to 2, if the scheduling library (such as tbb) ""permits"".; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 501 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize(). template<typen",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:33813,Performance,concurren,concurrent,33813,"uling library (such as tbb) ""permits"".; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 501 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize(). template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str,",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:33871,Performance,concurren,concurrent,33871,"uling library (such as tbb) ""permits"".; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 501 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize(). template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str,",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:33882,Performance,load,loading,33882,"uling library (such as tbb) ""permits"".; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 501 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize(). template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str,",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:37364,Performance,multi-thread,multi-threading,37364," ROOT::GetDelayedAddClassAlternate ; (; ). Definition at line 254 of file TClassTable.cxx. ◆ GetMacroPath(). TString & ROOT::GetMacroPath ; (; ). Definition at line 476 of file TROOT.cxx. ◆ GetROOT(). TROOT * ROOT::GetROOT ; (; ). Definition at line 472 of file TROOT.cxx. ◆ GetRuleIncludes(). void ROOT::GetRuleIncludes ; (; std::list< std::string > & ; result). Get the list of includes specified in the shema rules. ; Definition at line 855 of file RConversionRuleParser.cxx. ◆ GetThreadPoolSize(). UInt_t ROOT::GetThreadPoolSize ; (; ). Returns the size of ROOT's thread pool. ; Definition at line 577 of file TROOT.cxx. ◆ HasValidDataMembers(). Bool_t ROOT::HasValidDataMembers ; (; SchemaRuleMap_t & ; rule, . MembersTypeMap_t & ; members, . std::string & ; error_string . ). Check if given rule contains references to valid data members. ; Definition at line 461 of file RConversionRuleParser.cxx. ◆ IsImplicitMTEnabled(). bool ROOT::IsImplicitMTEnabled ; (; ). Returns true if the implicit multi-threading in ROOT is enabled. ; Definition at line 570 of file TROOT.cxx. ◆ Join(). template<class StringCollection_t > . std::string ROOT::Join ; (; const std::string & ; sep, . StringCollection_t && ; strings . ). Concatenate a list of strings with a separator. ; Template Parameters. StringCollection_tAny container of strings (vector, initializer_list, ...) . Parameters. [in]sepSeparator inbetween the strings. ; [in]stringscontainer of strings . Returnsthe sep-delimited concatenation of strings ; Definition at line 35 of file StringUtils.hxx. ◆ MakeSeq() [1/2]. template<class T > . TSeq< T > ROOT::MakeSeq ; (; T ; begin, . T ; end, . T ; step = 1 . ). Definition at line 215 of file TSeq.hxx. ◆ MakeSeq() [2/2]. template<class T > . TSeq< T > ROOT::MakeSeq ; (; T ; end). Definition at line 209 of file TSeq.hxx. ◆ ParseRule(). Bool_t ROOT::ParseRule ; (; std::string ; rule, . ROOT::Internal::MembersMap_t & ; result, . std::string & ; error_string . ). Parse the schema rule as specifi",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:13920,Safety,safe,safe,13920,"ngs (RCompressionSetting::EAlgorithm::EValues algorithm, int compressionLevel);  ; int CompressionSettings (ROOT::ECompressionAlgorithm algorithm, int compressionLevel) R__DEPRECATED(6;  ; TClass * CreateClass (const char *cname, Version_t id, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; TClass * CreateClass (const char *cname, Version_t id, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; void DisableImplicitMT ();  Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ;  ; void EnableImplicitMT (UInt_t numthreads=0);  Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ;  ; void EnableThreadSafety ();  Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ;  ; static std::string::size_type FindEndSymbol (std::string &command);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (std::string_view str, T &value);  Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ;  ; template<typename T > ; TClass * GetClass (const T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass (const T *const *);  ; template<typename T > ; TClass * GetClass (T *);  ; template<typename T > ; TClass * GetClass (T **);  ; std::vector< std::unique_ptr< TClassRec > > & GetDelayedAddClass ();  ; std::vector< std::pair< const char *, const char * > > & GetDelayedAddClassAlternate ();  ; TString & GetMacroPath ();  ; TROOT * GetROOT ();  ; void GetRuleIncludes (std::list< std::string > &result);  Get the list of",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:33292,Safety,safe,safe,33292,"n parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. The maximum number of threads can be influenced by the environment variable ROOT_MAX_THREADS: export ROOT_MAX_THREADS=2 will try to set the maximum number of active threads to 2, if the scheduling library (such as tbb) ""permits"".; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this metho",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:33351,Safety,safe,safe,33351,"ows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. The maximum number of threads can be influenced by the environment variable ROOT_MAX_THREADS: export ROOT_MAX_THREADS=2 will try to set the maximum number of active threads to 2, if the scheduling library (such as tbb) ""permits"".; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous ",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:33386,Safety,safe,safe,33386,"eter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. The maximum number of threads can be influenced by the environment variable ROOT_MAX_THREADS: export ROOT_MAX_THREADS=2 will try to set the maximum number of active threads to 2, if the scheduling library (such as tbb) ""permits"".; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableTh",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:34060,Safety,safe,safe,34060,"eates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 501 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize(). template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this ro",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:34221,Safety,safe,safe,34221,"ding within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 501 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize(). template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be p",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:34394,Safety,safe,safe,34394,"obal mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 501 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize(). template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:34460,Safety,safe,safety,34460,"n ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 501 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize(). template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:43032,Security,checksum,checksum,43032,"a class template (i.e. ; NOT a concrete class). ; Definition at line 1005 of file TClassTable.cxx. ◆ RemoveClass(). void ROOT::RemoveClass ; (; const char * ; cname, . TClass * ; cl . ). Global function called by the dtor of a class's init class (see the ClassImp macro). ; Definition at line 985 of file TClassTable.cxx. ◆ RemoveClassAlternate(). void ROOT::RemoveClassAlternate ; (; ROOT::TClassAlt * ; alt). Definition at line 931 of file TClassTable.cxx. ◆ ResetClassVersion(). void ROOT::ResetClassVersion ; (; TClass * ; cl, . const char * ; cname, . Short_t ; newid . ). Global function to update the version number. ; This is called via the RootClassVersion macro.; if cl!=0 and cname==-1, set the new class version if and only is greater than the existing one and greater or equal to 2; and also ignore the request if fVersionUsed is true.; Note on class version number:; If no class has been specified, TClass::GetVersion will return -1; The Class Version 0 request the whole object to be transient; The Class Version 1, unless specify via ClassDef indicates that the I/O should use the TClass checksum to distinguish the layout of the class . Definition at line 951 of file TClassTable.cxx. ◆ RGeomLog(). ROOT::Experimental::RLogChannel & ROOT::RGeomLog ; (; ). Log channel for Geomviewer diagnostics. ; Definition at line 49 of file RGeomData.cxx. ◆ SetClassVersion(). template<class RootClass > . Short_t ROOT::SetClassVersion ; (; RootClass * ; ). ◆ Split(). std::vector< std::string > ROOT::Split ; (; std::string_view ; str, . std::string_view ; delims, . bool ; skipEmpty . ). Splits a string at each character in delims. ; The behavior mimics str.split from Python, Parameters. [in]strString to tokenise. ; [in]delimsOne or more delimiters used to split the string. ; [in]skipEmptyStrip empty strings from the output. . Definition at line 23 of file StringUtils.cxx. ◆ StrReplace(). static void ROOT::StrReplace ; (; std::string & ; proc, . const std::string & ; pat, . const std::st",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:6552,Usability,simpl,simple,6552,"lass More...;  ; class  TBufferMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TClassAlt;  ; class  TClassRec;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TForNamespace;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. Mo",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT.html:7223,Usability,simpl,simple,7223," data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ; typedef std::map< std::string, ROOT::Internal::TSchemaType > MembersTypeMap_t;  ; typedef Long64_t(* MergeFunc_t) (void *, TCollection *, TFileMergeInfo *);  ; typedef void *(* NewArrFunc_t) (Long_t size, void *arena);  ; typedef void *(* NewFunc_t) ",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
https://root.cern/doc/master/namespaceROOT_1_1Detail.html:4402,Availability,error,error,4402,"lection to contain elements of the type requested (or a derived class). Any deviation from this expectation will only be caught/reported by an assert in debug builds.; This is best used with a TClonesArray, for other cases prefered TRangeDynCast.; The typical use is: for(auto bcl : TRangeStaticCast<TBaseClass>( *tbaseClassClonesArrayPtr )) {; ... use bcl as a TBaseClass*; }; for(auto bcl : TRangeStaticCast<TBaseClass>( tbaseClassClonesArrayPtr )) {; ... use bcl as a TBaseClass*; }; a#define a(i)Definition RSha256.hxx:99; ROOT::Detail::TRangeCastDefinition TCollection.h:311; TBaseClassEach class (see TClass) has a linked list of its base class(es).Definition TBaseClass.h:33; Template Parameters. TThe new type to convert to. . Definition at line 337 of file TCollection.h. Function Documentation. ◆ HasBeenDeleted(). R__ALWAYS_INLINE bool ROOT::Detail::HasBeenDeleted ; (; const TObject * ; obj). Check if the TObject's memory has been deleted. ; WarningThis should be only used for error mitigation as the answer is only sometimes correct. It actually just checks whether the object has been deleted, so this will falsely return true for an object that has been destructed but its memory has not been deleted. This will return an undefined value if the memory is re-used between the deletion and the check. i.e. This is useful to prevent a segmentation fault in case where the problem can be detected when the deletion and the usage are 'close-by' . In enviroment where delete taints (changes) the memory, this function always returns false as the marker left by ~TObject will be overwritten. ; Parameters. objThe memory to check . Returnstrue if the object has been destructed and it can be inferred that it has been deleted ; Definition at line 402 of file TObject.h. ◆ HasCallOp() [1/2]. template<typename T > . constexpr bool ROOT::Detail::HasCallOp ; (; char ; ). constexpr . Definition at line 32 of file TypeTraits.hxx. ◆ HasCallOp() [2/2]. template<typename T > . constexpr auto ROOT",MatchSource.WIKI,doc/master/namespaceROOT_1_1Detail.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Detail.html
https://root.cern/doc/master/namespaceROOT_1_1Detail.html:4773,Availability,fault,fault,4773,"l : TRangeStaticCast<TBaseClass>( tbaseClassClonesArrayPtr )) {; ... use bcl as a TBaseClass*; }; a#define a(i)Definition RSha256.hxx:99; ROOT::Detail::TRangeCastDefinition TCollection.h:311; TBaseClassEach class (see TClass) has a linked list of its base class(es).Definition TBaseClass.h:33; Template Parameters. TThe new type to convert to. . Definition at line 337 of file TCollection.h. Function Documentation. ◆ HasBeenDeleted(). R__ALWAYS_INLINE bool ROOT::Detail::HasBeenDeleted ; (; const TObject * ; obj). Check if the TObject's memory has been deleted. ; WarningThis should be only used for error mitigation as the answer is only sometimes correct. It actually just checks whether the object has been deleted, so this will falsely return true for an object that has been destructed but its memory has not been deleted. This will return an undefined value if the memory is re-used between the deletion and the check. i.e. This is useful to prevent a segmentation fault in case where the problem can be detected when the deletion and the usage are 'close-by' . In enviroment where delete taints (changes) the memory, this function always returns false as the marker left by ~TObject will be overwritten. ; Parameters. objThe memory to check . Returnstrue if the object has been destructed and it can be inferred that it has been deleted ; Definition at line 402 of file TObject.h. ◆ HasCallOp() [1/2]. template<typename T > . constexpr bool ROOT::Detail::HasCallOp ; (; char ; ). constexpr . Definition at line 32 of file TypeTraits.hxx. ◆ HasCallOp() [2/2]. template<typename T > . constexpr auto ROOT::Detail::HasCallOp ; (; int ; ); -> decltype(&T::operator(), true) . constexpr . Definition at line 31 of file TypeTraits.hxx. ◆ operator_equal_impl(). template<class ArrayL , class ArrayR > . bool ROOT::Detail::operator_equal_impl ; (; ArrayL const & ; lhs, . size_t const ; lhs_size, . ArrayR const & ; rhs, . size_t const ; rhs_size . ). inline . Definition at line 456 of file span.hx",MatchSource.WIKI,doc/master/namespaceROOT_1_1Detail.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Detail.html
https://root.cern/doc/master/namespaceROOT_1_1Detail.html:2112,Energy Efficiency,adapt,adapter,2112,"; struct  is_array_class< std::vector< T > >;  ; struct  make_indices_;  ; struct  make_indices_impl;  ; struct  make_indices_impl< First, Step, N, typename std::enable_if<(N > 1 &&N % 2==0)>::type >;  ; struct  make_indices_impl< First, Step, N, typename std::enable_if<(N > 1 &&N % 2==1)>::type >;  ; struct  make_indices_impl< First, Step, N, typename std::enable_if<(N==0)>::type >;  ; struct  make_indices_impl< First, Step, N, typename std::enable_if<(N==1)>::type >;  ; struct  make_indices_next;  ; struct  make_indices_next2;  ; struct  make_indices_next2< indices< Indices... >, Next, Tail >;  ; struct  make_indices_next< indices< Indices... >, Next >;  ; class  TBranchProxy;  Base class for all the proxy object. More...;  ; class  TCollectionProxyInfo;  ; class  TRangeCast;  ; class  TSchemaRuleSet;  ; class  TStatusBitsChecker;  . Typedefs; template<size_t Start, size_t Last, size_t Step = 1> ; using make_indices = typename make_indices_< Start, Last, Step >::type;  ; template<typename T > ; using TRangeStaticCast = TRangeCast< T, false >;  TRangeStaticCast is an adapter class that allows the typed iteration through a TCollection. ;  . Functions; R__ALWAYS_INLINE bool HasBeenDeleted (const TObject *obj);  Check if the TObject's memory has been deleted. ;  ; template<typename T > ; constexpr bool HasCallOp (char);  ; template<typename T > ; constexpr auto HasCallOp (int) -> decltype(&T::operator(), true);  ; template<class ArrayL , class ArrayR > ; bool operator_equal_impl (ArrayL const &lhs, size_t const lhs_size, ArrayR const &rhs, size_t const rhs_size);  . Detailed Description; Special implementation of ROOT::RRangeCast for TCollection, including a check that the cast target type inherits from TObject and a new constructor that takes the TCollection by pointer. ; Template Parameters. TThe new type to convert to. ; isDynamicIf true, dynamic_cast is used, otherwise static_cast is used. . Typedef Documentation. ◆ make_indices. template<size_t Start, size_t Last",MatchSource.WIKI,doc/master/namespaceROOT_1_1Detail.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Detail.html
https://root.cern/doc/master/namespaceROOT_1_1Detail.html:3319,Energy Efficiency,adapt,adapter,3319,"pr bool HasCallOp (char);  ; template<typename T > ; constexpr auto HasCallOp (int) -> decltype(&T::operator(), true);  ; template<class ArrayL , class ArrayR > ; bool operator_equal_impl (ArrayL const &lhs, size_t const lhs_size, ArrayR const &rhs, size_t const rhs_size);  . Detailed Description; Special implementation of ROOT::RRangeCast for TCollection, including a check that the cast target type inherits from TObject and a new constructor that takes the TCollection by pointer. ; Template Parameters. TThe new type to convert to. ; isDynamicIf true, dynamic_cast is used, otherwise static_cast is used. . Typedef Documentation. ◆ make_indices. template<size_t Start, size_t Last, size_t Step = 1> . using ROOT::Detail::make_indices = typedef typename make_indices_< Start, Last, Step >::type. Definition at line 148 of file span.hxx. ◆ TRangeStaticCast. template<typename T > . using ROOT::Detail::TRangeStaticCast = typedef TRangeCast<T, false>. TRangeStaticCast is an adapter class that allows the typed iteration through a TCollection. ; This requires the collection to contain elements of the type requested (or a derived class). Any deviation from this expectation will only be caught/reported by an assert in debug builds.; This is best used with a TClonesArray, for other cases prefered TRangeDynCast.; The typical use is: for(auto bcl : TRangeStaticCast<TBaseClass>( *tbaseClassClonesArrayPtr )) {; ... use bcl as a TBaseClass*; }; for(auto bcl : TRangeStaticCast<TBaseClass>( tbaseClassClonesArrayPtr )) {; ... use bcl as a TBaseClass*; }; a#define a(i)Definition RSha256.hxx:99; ROOT::Detail::TRangeCastDefinition TCollection.h:311; TBaseClassEach class (see TClass) has a linked list of its base class(es).Definition TBaseClass.h:33; Template Parameters. TThe new type to convert to. . Definition at line 337 of file TCollection.h. Function Documentation. ◆ HasBeenDeleted(). R__ALWAYS_INLINE bool ROOT::Detail::HasBeenDeleted ; (; const TObject * ; obj). Check if the TObject's me",MatchSource.WIKI,doc/master/namespaceROOT_1_1Detail.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Detail.html
https://root.cern/doc/master/namespaceROOT_1_1Detail.html:2112,Integrability,adapter,adapter,2112,"; struct  is_array_class< std::vector< T > >;  ; struct  make_indices_;  ; struct  make_indices_impl;  ; struct  make_indices_impl< First, Step, N, typename std::enable_if<(N > 1 &&N % 2==0)>::type >;  ; struct  make_indices_impl< First, Step, N, typename std::enable_if<(N > 1 &&N % 2==1)>::type >;  ; struct  make_indices_impl< First, Step, N, typename std::enable_if<(N==0)>::type >;  ; struct  make_indices_impl< First, Step, N, typename std::enable_if<(N==1)>::type >;  ; struct  make_indices_next;  ; struct  make_indices_next2;  ; struct  make_indices_next2< indices< Indices... >, Next, Tail >;  ; struct  make_indices_next< indices< Indices... >, Next >;  ; class  TBranchProxy;  Base class for all the proxy object. More...;  ; class  TCollectionProxyInfo;  ; class  TRangeCast;  ; class  TSchemaRuleSet;  ; class  TStatusBitsChecker;  . Typedefs; template<size_t Start, size_t Last, size_t Step = 1> ; using make_indices = typename make_indices_< Start, Last, Step >::type;  ; template<typename T > ; using TRangeStaticCast = TRangeCast< T, false >;  TRangeStaticCast is an adapter class that allows the typed iteration through a TCollection. ;  . Functions; R__ALWAYS_INLINE bool HasBeenDeleted (const TObject *obj);  Check if the TObject's memory has been deleted. ;  ; template<typename T > ; constexpr bool HasCallOp (char);  ; template<typename T > ; constexpr auto HasCallOp (int) -> decltype(&T::operator(), true);  ; template<class ArrayL , class ArrayR > ; bool operator_equal_impl (ArrayL const &lhs, size_t const lhs_size, ArrayR const &rhs, size_t const rhs_size);  . Detailed Description; Special implementation of ROOT::RRangeCast for TCollection, including a check that the cast target type inherits from TObject and a new constructor that takes the TCollection by pointer. ; Template Parameters. TThe new type to convert to. ; isDynamicIf true, dynamic_cast is used, otherwise static_cast is used. . Typedef Documentation. ◆ make_indices. template<size_t Start, size_t Last",MatchSource.WIKI,doc/master/namespaceROOT_1_1Detail.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Detail.html
https://root.cern/doc/master/namespaceROOT_1_1Detail.html:3319,Integrability,adapter,adapter,3319,"pr bool HasCallOp (char);  ; template<typename T > ; constexpr auto HasCallOp (int) -> decltype(&T::operator(), true);  ; template<class ArrayL , class ArrayR > ; bool operator_equal_impl (ArrayL const &lhs, size_t const lhs_size, ArrayR const &rhs, size_t const rhs_size);  . Detailed Description; Special implementation of ROOT::RRangeCast for TCollection, including a check that the cast target type inherits from TObject and a new constructor that takes the TCollection by pointer. ; Template Parameters. TThe new type to convert to. ; isDynamicIf true, dynamic_cast is used, otherwise static_cast is used. . Typedef Documentation. ◆ make_indices. template<size_t Start, size_t Last, size_t Step = 1> . using ROOT::Detail::make_indices = typedef typename make_indices_< Start, Last, Step >::type. Definition at line 148 of file span.hxx. ◆ TRangeStaticCast. template<typename T > . using ROOT::Detail::TRangeStaticCast = typedef TRangeCast<T, false>. TRangeStaticCast is an adapter class that allows the typed iteration through a TCollection. ; This requires the collection to contain elements of the type requested (or a derived class). Any deviation from this expectation will only be caught/reported by an assert in debug builds.; This is best used with a TClonesArray, for other cases prefered TRangeDynCast.; The typical use is: for(auto bcl : TRangeStaticCast<TBaseClass>( *tbaseClassClonesArrayPtr )) {; ... use bcl as a TBaseClass*; }; for(auto bcl : TRangeStaticCast<TBaseClass>( tbaseClassClonesArrayPtr )) {; ... use bcl as a TBaseClass*; }; a#define a(i)Definition RSha256.hxx:99; ROOT::Detail::TRangeCastDefinition TCollection.h:311; TBaseClassEach class (see TClass) has a linked list of its base class(es).Definition TBaseClass.h:33; Template Parameters. TThe new type to convert to. . Definition at line 337 of file TCollection.h. Function Documentation. ◆ HasBeenDeleted(). R__ALWAYS_INLINE bool ROOT::Detail::HasBeenDeleted ; (; const TObject * ; obj). Check if the TObject's me",MatchSource.WIKI,doc/master/namespaceROOT_1_1Detail.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Detail.html
https://root.cern/doc/master/namespaceROOT_1_1Detail.html:310,Modifiability,inherit,inherits,310,". ROOT: ROOT::Detail Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Functions ; ROOT::Detail Namespace Reference. Special implementation of ROOT::RRangeCast for TCollection, including a check that the cast target type inherits from TObject and a new constructor that takes the TCollection by pointer. ; More... Namespaces; namespace  Internal;  ; namespace  RDF;  ; namespace  VecOps;  . Classes; struct  CallableTraitsImpl;  Extract types from the signature of a callable object. See CallableTraits. More...;  ; struct  CallableTraitsImpl< R(*)(Args...), false >;  ; struct  CallableTraitsImpl< R(Args...), false >;  ; struct  CallableTraitsImpl< R(T::*)(Args...) const, false >;  ; struct  CallableTraitsImpl< R(T::*)(Args...), false >;  ; struct  CallableTraitsImpl< T, true >;  ; struct  indices;  ; struct  is_array_class;  ; struct  is_array_class< std::array< T, N > >;  ; struct  is_array_class< std::initializer_list< T > >;  ; struct  is_array_class< std::vector< T > >;  ; struct  make_indices_;  ; struct  make_indices_impl;  ; struct  make_indices_impl< First, Step, N, typename std::enable_if<(N > 1 &&N % 2==0)>::type >;  ; struct  make_indices_impl< First, Step, N, typename std::enable_if<(N > 1 &&N % 2==1)>::type >;  ; struct  make_indices_impl< First, Step, N, typename std::enable_if<(N==0)>::type >;  ; struct  make_indices_impl< First, Step, N, typename std::enable_if<(N==1)>::type >;  ; struct  make_indices_next;  ; struct  make_indices_next2;  ; struct  make_indices_next2< indices< Indices... >, Next, Tail >;  ; struct  make_indices_next< indices< Indices... >, Next >;  ; class  TBranchProxy;  Base class for all the proxy object. More...;  ; class  TCollectionProxyInfo;  ; class  TRangeCast;  ; class  TSchemaRuleSet;  ; class  TStatusBitsChecker;  . Typedefs; template<size_t Start, size_t Last, size_t Step = 1> ; using make_indices = typename make_indices_< Start, Last, Ste",MatchSource.WIKI,doc/master/namespaceROOT_1_1Detail.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Detail.html
https://root.cern/doc/master/namespaceROOT_1_1Detail.html:2112,Modifiability,adapt,adapter,2112,"; struct  is_array_class< std::vector< T > >;  ; struct  make_indices_;  ; struct  make_indices_impl;  ; struct  make_indices_impl< First, Step, N, typename std::enable_if<(N > 1 &&N % 2==0)>::type >;  ; struct  make_indices_impl< First, Step, N, typename std::enable_if<(N > 1 &&N % 2==1)>::type >;  ; struct  make_indices_impl< First, Step, N, typename std::enable_if<(N==0)>::type >;  ; struct  make_indices_impl< First, Step, N, typename std::enable_if<(N==1)>::type >;  ; struct  make_indices_next;  ; struct  make_indices_next2;  ; struct  make_indices_next2< indices< Indices... >, Next, Tail >;  ; struct  make_indices_next< indices< Indices... >, Next >;  ; class  TBranchProxy;  Base class for all the proxy object. More...;  ; class  TCollectionProxyInfo;  ; class  TRangeCast;  ; class  TSchemaRuleSet;  ; class  TStatusBitsChecker;  . Typedefs; template<size_t Start, size_t Last, size_t Step = 1> ; using make_indices = typename make_indices_< Start, Last, Step >::type;  ; template<typename T > ; using TRangeStaticCast = TRangeCast< T, false >;  TRangeStaticCast is an adapter class that allows the typed iteration through a TCollection. ;  . Functions; R__ALWAYS_INLINE bool HasBeenDeleted (const TObject *obj);  Check if the TObject's memory has been deleted. ;  ; template<typename T > ; constexpr bool HasCallOp (char);  ; template<typename T > ; constexpr auto HasCallOp (int) -> decltype(&T::operator(), true);  ; template<class ArrayL , class ArrayR > ; bool operator_equal_impl (ArrayL const &lhs, size_t const lhs_size, ArrayR const &rhs, size_t const rhs_size);  . Detailed Description; Special implementation of ROOT::RRangeCast for TCollection, including a check that the cast target type inherits from TObject and a new constructor that takes the TCollection by pointer. ; Template Parameters. TThe new type to convert to. ; isDynamicIf true, dynamic_cast is used, otherwise static_cast is used. . Typedef Documentation. ◆ make_indices. template<size_t Start, size_t Last",MatchSource.WIKI,doc/master/namespaceROOT_1_1Detail.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Detail.html
https://root.cern/doc/master/namespaceROOT_1_1Detail.html:2744,Modifiability,inherit,inherits,2744,"class for all the proxy object. More...;  ; class  TCollectionProxyInfo;  ; class  TRangeCast;  ; class  TSchemaRuleSet;  ; class  TStatusBitsChecker;  . Typedefs; template<size_t Start, size_t Last, size_t Step = 1> ; using make_indices = typename make_indices_< Start, Last, Step >::type;  ; template<typename T > ; using TRangeStaticCast = TRangeCast< T, false >;  TRangeStaticCast is an adapter class that allows the typed iteration through a TCollection. ;  . Functions; R__ALWAYS_INLINE bool HasBeenDeleted (const TObject *obj);  Check if the TObject's memory has been deleted. ;  ; template<typename T > ; constexpr bool HasCallOp (char);  ; template<typename T > ; constexpr auto HasCallOp (int) -> decltype(&T::operator(), true);  ; template<class ArrayL , class ArrayR > ; bool operator_equal_impl (ArrayL const &lhs, size_t const lhs_size, ArrayR const &rhs, size_t const rhs_size);  . Detailed Description; Special implementation of ROOT::RRangeCast for TCollection, including a check that the cast target type inherits from TObject and a new constructor that takes the TCollection by pointer. ; Template Parameters. TThe new type to convert to. ; isDynamicIf true, dynamic_cast is used, otherwise static_cast is used. . Typedef Documentation. ◆ make_indices. template<size_t Start, size_t Last, size_t Step = 1> . using ROOT::Detail::make_indices = typedef typename make_indices_< Start, Last, Step >::type. Definition at line 148 of file span.hxx. ◆ TRangeStaticCast. template<typename T > . using ROOT::Detail::TRangeStaticCast = typedef TRangeCast<T, false>. TRangeStaticCast is an adapter class that allows the typed iteration through a TCollection. ; This requires the collection to contain elements of the type requested (or a derived class). Any deviation from this expectation will only be caught/reported by an assert in debug builds.; This is best used with a TClonesArray, for other cases prefered TRangeDynCast.; The typical use is: for(auto bcl : TRangeStaticCast<TBaseClass>",MatchSource.WIKI,doc/master/namespaceROOT_1_1Detail.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Detail.html
https://root.cern/doc/master/namespaceROOT_1_1Detail.html:3319,Modifiability,adapt,adapter,3319,"pr bool HasCallOp (char);  ; template<typename T > ; constexpr auto HasCallOp (int) -> decltype(&T::operator(), true);  ; template<class ArrayL , class ArrayR > ; bool operator_equal_impl (ArrayL const &lhs, size_t const lhs_size, ArrayR const &rhs, size_t const rhs_size);  . Detailed Description; Special implementation of ROOT::RRangeCast for TCollection, including a check that the cast target type inherits from TObject and a new constructor that takes the TCollection by pointer. ; Template Parameters. TThe new type to convert to. ; isDynamicIf true, dynamic_cast is used, otherwise static_cast is used. . Typedef Documentation. ◆ make_indices. template<size_t Start, size_t Last, size_t Step = 1> . using ROOT::Detail::make_indices = typedef typename make_indices_< Start, Last, Step >::type. Definition at line 148 of file span.hxx. ◆ TRangeStaticCast. template<typename T > . using ROOT::Detail::TRangeStaticCast = typedef TRangeCast<T, false>. TRangeStaticCast is an adapter class that allows the typed iteration through a TCollection. ; This requires the collection to contain elements of the type requested (or a derived class). Any deviation from this expectation will only be caught/reported by an assert in debug builds.; This is best used with a TClonesArray, for other cases prefered TRangeDynCast.; The typical use is: for(auto bcl : TRangeStaticCast<TBaseClass>( *tbaseClassClonesArrayPtr )) {; ... use bcl as a TBaseClass*; }; for(auto bcl : TRangeStaticCast<TBaseClass>( tbaseClassClonesArrayPtr )) {; ... use bcl as a TBaseClass*; }; a#define a(i)Definition RSha256.hxx:99; ROOT::Detail::TRangeCastDefinition TCollection.h:311; TBaseClassEach class (see TClass) has a linked list of its base class(es).Definition TBaseClass.h:33; Template Parameters. TThe new type to convert to. . Definition at line 337 of file TCollection.h. Function Documentation. ◆ HasBeenDeleted(). R__ALWAYS_INLINE bool ROOT::Detail::HasBeenDeleted ; (; const TObject * ; obj). Check if the TObject's me",MatchSource.WIKI,doc/master/namespaceROOT_1_1Detail.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Detail.html
https://root.cern/doc/master/namespaceROOT_1_1Detail.html:4812,Safety,detect,detected,4812,"l : TRangeStaticCast<TBaseClass>( tbaseClassClonesArrayPtr )) {; ... use bcl as a TBaseClass*; }; a#define a(i)Definition RSha256.hxx:99; ROOT::Detail::TRangeCastDefinition TCollection.h:311; TBaseClassEach class (see TClass) has a linked list of its base class(es).Definition TBaseClass.h:33; Template Parameters. TThe new type to convert to. . Definition at line 337 of file TCollection.h. Function Documentation. ◆ HasBeenDeleted(). R__ALWAYS_INLINE bool ROOT::Detail::HasBeenDeleted ; (; const TObject * ; obj). Check if the TObject's memory has been deleted. ; WarningThis should be only used for error mitigation as the answer is only sometimes correct. It actually just checks whether the object has been deleted, so this will falsely return true for an object that has been destructed but its memory has not been deleted. This will return an undefined value if the memory is re-used between the deletion and the check. i.e. This is useful to prevent a segmentation fault in case where the problem can be detected when the deletion and the usage are 'close-by' . In enviroment where delete taints (changes) the memory, this function always returns false as the marker left by ~TObject will be overwritten. ; Parameters. objThe memory to check . Returnstrue if the object has been destructed and it can be inferred that it has been deleted ; Definition at line 402 of file TObject.h. ◆ HasCallOp() [1/2]. template<typename T > . constexpr bool ROOT::Detail::HasCallOp ; (; char ; ). constexpr . Definition at line 32 of file TypeTraits.hxx. ◆ HasCallOp() [2/2]. template<typename T > . constexpr auto ROOT::Detail::HasCallOp ; (; int ; ); -> decltype(&T::operator(), true) . constexpr . Definition at line 31 of file TypeTraits.hxx. ◆ operator_equal_impl(). template<class ArrayL , class ArrayR > . bool ROOT::Detail::operator_equal_impl ; (; ArrayL const & ; lhs, . size_t const ; lhs_size, . ArrayR const & ; rhs, . size_t const ; rhs_size . ). inline . Definition at line 456 of file span.hx",MatchSource.WIKI,doc/master/namespaceROOT_1_1Detail.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Detail.html
https://root.cern/doc/master/namespaceROOT_1_1Detail.html:3554,Testability,assert,assert,3554,"(ArrayL const &lhs, size_t const lhs_size, ArrayR const &rhs, size_t const rhs_size);  . Detailed Description; Special implementation of ROOT::RRangeCast for TCollection, including a check that the cast target type inherits from TObject and a new constructor that takes the TCollection by pointer. ; Template Parameters. TThe new type to convert to. ; isDynamicIf true, dynamic_cast is used, otherwise static_cast is used. . Typedef Documentation. ◆ make_indices. template<size_t Start, size_t Last, size_t Step = 1> . using ROOT::Detail::make_indices = typedef typename make_indices_< Start, Last, Step >::type. Definition at line 148 of file span.hxx. ◆ TRangeStaticCast. template<typename T > . using ROOT::Detail::TRangeStaticCast = typedef TRangeCast<T, false>. TRangeStaticCast is an adapter class that allows the typed iteration through a TCollection. ; This requires the collection to contain elements of the type requested (or a derived class). Any deviation from this expectation will only be caught/reported by an assert in debug builds.; This is best used with a TClonesArray, for other cases prefered TRangeDynCast.; The typical use is: for(auto bcl : TRangeStaticCast<TBaseClass>( *tbaseClassClonesArrayPtr )) {; ... use bcl as a TBaseClass*; }; for(auto bcl : TRangeStaticCast<TBaseClass>( tbaseClassClonesArrayPtr )) {; ... use bcl as a TBaseClass*; }; a#define a(i)Definition RSha256.hxx:99; ROOT::Detail::TRangeCastDefinition TCollection.h:311; TBaseClassEach class (see TClass) has a linked list of its base class(es).Definition TBaseClass.h:33; Template Parameters. TThe new type to convert to. . Definition at line 337 of file TCollection.h. Function Documentation. ◆ HasBeenDeleted(). R__ALWAYS_INLINE bool ROOT::Detail::HasBeenDeleted ; (; const TObject * ; obj). Check if the TObject's memory has been deleted. ; WarningThis should be only used for error mitigation as the answer is only sometimes correct. It actually just checks whether the object has been deleted, so this w",MatchSource.WIKI,doc/master/namespaceROOT_1_1Detail.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Detail.html
https://root.cern/doc/master/namespaceROOT_1_1Detail_1_1RDF.html:871,Integrability,wrap,wrapper,871,". ROOT: ROOT::Detail::RDF Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Functions ; ROOT::Detail::RDF Namespace Reference. Namespaces; namespace  ExtraArgsForDefine;  . Classes; class  RActionImpl;  Base class for action helpers, see RInterface::Book() for more information. More...;  ; struct  RCallCleanUpTask;  A RAII object that calls RLoopManager::CleanUpTask at destruction. More...;  ; class  RColumnReaderBase;  ; class  RDefaultValueFor;  The implementation of the DefaultValueFor transformation. More...;  ; class  RDefine;  ; class  RDefineBase;  ; class  RDefinePerSample;  ; class  RFilter;  ; class  RFilterBase;  ; class  RFilterWithMissingValues;  implementation of FilterAvailable and FilterMissing operations More...;  ; struct  RInferredType;  ; class  RJittedDefine;  A wrapper around a concrete RDefine, which forwards all calls to it RJittedDefine is a placeholder that is put in the collection of custom columns in place of a RDefine that will be just-in-time compiled. More...;  ; class  RJittedFilter;  A wrapper around a concrete RFilter, which forwards all calls to it RJittedFilter is the type of the node returned by jitted Filter calls: the concrete filter can be created and set at a later time, from jitted code. More...;  ; class  RLoopManager;  The head node of a RDF computation graph. More...;  ; class  RMergeableCount;  Specialization of RMergeableValue for the Count action. More...;  ; class  RMergeableFill;  Specialization of RMergeableValue for histograms and statistics. More...;  ; class  RMergeableMax;  ; class  RMergeableMean;  Specialization of RMergeableValue for the Mean action. More...;  ; class  RMergeableMin;  ; class  RMergeableStdDev;  Specialization of RMergeableValue for the StdDev action. More...;  ; class  RMergeableSum;  ; class  RMergeableValue;  A result of an RDataFrame execution, that knows how to merge with other results of the same type. More...; ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Detail_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Detail_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1Detail_1_1RDF.html:1111,Integrability,wrap,wrapper,1111," Namespaces; namespace  ExtraArgsForDefine;  . Classes; class  RActionImpl;  Base class for action helpers, see RInterface::Book() for more information. More...;  ; struct  RCallCleanUpTask;  A RAII object that calls RLoopManager::CleanUpTask at destruction. More...;  ; class  RColumnReaderBase;  ; class  RDefaultValueFor;  The implementation of the DefaultValueFor transformation. More...;  ; class  RDefine;  ; class  RDefineBase;  ; class  RDefinePerSample;  ; class  RFilter;  ; class  RFilterBase;  ; class  RFilterWithMissingValues;  implementation of FilterAvailable and FilterMissing operations More...;  ; struct  RInferredType;  ; class  RJittedDefine;  A wrapper around a concrete RDefine, which forwards all calls to it RJittedDefine is a placeholder that is put in the collection of custom columns in place of a RDefine that will be just-in-time compiled. More...;  ; class  RJittedFilter;  A wrapper around a concrete RFilter, which forwards all calls to it RJittedFilter is the type of the node returned by jitted Filter calls: the concrete filter can be created and set at a later time, from jitted code. More...;  ; class  RLoopManager;  The head node of a RDF computation graph. More...;  ; class  RMergeableCount;  Specialization of RMergeableValue for the Count action. More...;  ; class  RMergeableFill;  Specialization of RMergeableValue for histograms and statistics. More...;  ; class  RMergeableMax;  ; class  RMergeableMean;  Specialization of RMergeableValue for the Mean action. More...;  ; class  RMergeableMin;  ; class  RMergeableStdDev;  Specialization of RMergeableValue for the StdDev action. More...;  ; class  RMergeableSum;  ; class  RMergeableValue;  A result of an RDataFrame execution, that knows how to merge with other results of the same type. More...;  ; class  RMergeableValueBase;  Base class of RMergeableValue. More...;  ; class  RMergeableVariations;  A container for variation names and variation results that knows how to merge with others of the ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Detail_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Detail_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1Detail_1_1RDF.html:7065,Integrability,interface,interface,7065,"n variation values.; This function triggers the execution of the RDataFrame computation graph. Then retrieves an RMergeableVariations object created with the results held by the RResultMap input. The user obtains ownership of the mergeable, which in turn holds a copy variation names and variation results. The RResultMap is not destroyed in the process and will still retain (shared) ownership of the original results.; Example usage: auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });; auto h = df.Vary(""x"", [](){return ROOT::RVecI{-1, 2};}, {}, 2).Histo1D<int>(""x"");; auto hs = ROOT::RDF::Experimental::VariationsFor(h);; std::unique_ptr<RMergeableVariations<T>> m = ROOT::Detail::RDF::GetMergeableValue(hs);; h#define h(i)Definition RSha256.hxx:106; ROOT::RDF::RInterface::DefineRInterface< Proxied, DS_t > Define(std::string_view name, F expression, const ColumnNames_t &columns={})Define a new column.Definition RInterface.hxx:441; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::VecOps::RVec< int >; ROOT::Detail::RDF::GetMergeableValuestd::unique_ptr< RMergeableVariations< T > > GetMergeableValue(ROOT::RDF::Experimental::RResultMap< T > &rmap)Retrieve mergeable values after calling ROOT::RDF::VariationsFor .Definition RResultMap.hxx:211; ROOT::RDF::Experimental::VariationsForRResultMap< T > VariationsFor(RResultPtr< T > resPtr)Produce all required systematic variations for the given result.Definition RDFHelpers.hxx:219; mTMarker mDefinition textangle.C:8. Definition at line 211 of file RResultMap.hxx. ◆ GetMergeableValue() [2/2]. template<typename T > . std::unique_ptr< RMergeableValue< T > > ROOT::Detail::RDF::GetMergeableValue ; (; RResultPtr< T > & ; rptr). Retrieve a mergeable value from an RDataFrame action. ; Parameters. [in]rptrlvalue reference of an RResultPtr object. . ReturnsAn RMergeableValue holding the result of the action, wrapped in an std::unique_p",MatchSource.WIKI,doc/master/namespaceROOT_1_1Detail_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Detail_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1Detail_1_1RDF.html:8027,Integrability,wrap,wrapped,8027,"ataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::VecOps::RVec< int >; ROOT::Detail::RDF::GetMergeableValuestd::unique_ptr< RMergeableVariations< T > > GetMergeableValue(ROOT::RDF::Experimental::RResultMap< T > &rmap)Retrieve mergeable values after calling ROOT::RDF::VariationsFor .Definition RResultMap.hxx:211; ROOT::RDF::Experimental::VariationsForRResultMap< T > VariationsFor(RResultPtr< T > resPtr)Produce all required systematic variations for the given result.Definition RDFHelpers.hxx:219; mTMarker mDefinition textangle.C:8. Definition at line 211 of file RResultMap.hxx. ◆ GetMergeableValue() [2/2]. template<typename T > . std::unique_ptr< RMergeableValue< T > > ROOT::Detail::RDF::GetMergeableValue ; (; RResultPtr< T > & ; rptr). Retrieve a mergeable value from an RDataFrame action. ; Parameters. [in]rptrlvalue reference of an RResultPtr object. . ReturnsAn RMergeableValue holding the result of the action, wrapped in an std::unique_ptr.; This function triggers the execution of the RDataFrame computation graph. Then retrieves an RMergeableValue object created with the result wrapped by the RResultPtr argument. The user obtains ownership of the mergeable, which in turn holds a copy of the result of the action. The RResultPtr is not destroyed in the process and will still retain (shared) ownership of the original result.; Example usage: using namespace ROOT::Detail::RDF;; ROOT::RDataFrame d(""myTree"", ""file_*.root"");; auto h = d.Histo1D(""Branch_A"");; auto mergeablehisto = GetMergeableValue(h);; d#define d(i)Definition RSha256.hxx:102; ROOT::Detail::RDFDefinition RooAbsDataHelper.h:80. Definition at line 470 of file RResultPtr.hxx. ◆ MakeResultPtr(). template<typename T > . RResultPtr< T > ROOT::Detail::RDF::MakeResultPtr ; (; const std::shared_ptr< T > & ; r, . RLoopManager & ; df, . std::shared_ptr< ROOT::Internal::RDF::RActionBase > ; actionPtr . ). Create a RResultPtr and s",MatchSource.WIKI,doc/master/namespaceROOT_1_1Detail_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Detail_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1Detail_1_1RDF.html:8198,Integrability,wrap,wrapped,8198,"ail::RDF::GetMergeableValuestd::unique_ptr< RMergeableVariations< T > > GetMergeableValue(ROOT::RDF::Experimental::RResultMap< T > &rmap)Retrieve mergeable values after calling ROOT::RDF::VariationsFor .Definition RResultMap.hxx:211; ROOT::RDF::Experimental::VariationsForRResultMap< T > VariationsFor(RResultPtr< T > resPtr)Produce all required systematic variations for the given result.Definition RDFHelpers.hxx:219; mTMarker mDefinition textangle.C:8. Definition at line 211 of file RResultMap.hxx. ◆ GetMergeableValue() [2/2]. template<typename T > . std::unique_ptr< RMergeableValue< T > > ROOT::Detail::RDF::GetMergeableValue ; (; RResultPtr< T > & ; rptr). Retrieve a mergeable value from an RDataFrame action. ; Parameters. [in]rptrlvalue reference of an RResultPtr object. . ReturnsAn RMergeableValue holding the result of the action, wrapped in an std::unique_ptr.; This function triggers the execution of the RDataFrame computation graph. Then retrieves an RMergeableValue object created with the result wrapped by the RResultPtr argument. The user obtains ownership of the mergeable, which in turn holds a copy of the result of the action. The RResultPtr is not destroyed in the process and will still retain (shared) ownership of the original result.; Example usage: using namespace ROOT::Detail::RDF;; ROOT::RDataFrame d(""myTree"", ""file_*.root"");; auto h = d.Histo1D(""Branch_A"");; auto mergeablehisto = GetMergeableValue(h);; d#define d(i)Definition RSha256.hxx:102; ROOT::Detail::RDFDefinition RooAbsDataHelper.h:80. Definition at line 470 of file RResultPtr.hxx. ◆ MakeResultPtr(). template<typename T > . RResultPtr< T > ROOT::Detail::RDF::MakeResultPtr ; (; const std::shared_ptr< T > & ; r, . RLoopManager & ; df, . std::shared_ptr< ROOT::Internal::RDF::RActionBase > ; actionPtr . ). Create a RResultPtr and set its pointer to the corresponding RAction This overload is invoked by non-jitted actions, as they have access to RAction before constructing RResultPtr. ; Definition at ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Detail_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Detail_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1Detail_1_1RDF.html:12154,Integrability,wrap,wrapped,12154,"he values contained in the other arguments merged into itself. This is a convenience overload introduced for the ROOT Python API.; Example usage: // mv1, mv2 are std::unique_ptr<RMergeableVariations<TH1D>>; ROOT::Detail::RDF::MergeValues(*mv1, *mv2);; const auto &keys = mv1->GetKeys(); // Names of the variations; // Do stuff with the variations; for(const auto &key: keys){; const auto &histo = mv1->GetVariation(key); // Varied histogram; std::cout << histo.GetEntries() << ""\n"";; }. Definition at line 795 of file RMergeableValue.hxx. ◆ MergeValues() [3/3]. template<typename T , typename... Ts> . std::unique_ptr< RMergeableValue< T > > ROOT::Detail::RDF::MergeValues ; (; std::unique_ptr< RMergeableValue< T > > ; OutputMergeable, . std::unique_ptr< RMergeableValue< Ts > >... ; InputMergeables . ). Merge multiple RMergeableValue objects into one. ; Parameters. [in]OutputMergeableThe mergeable object where all the information will be aggregated. ; [in]InputMergeablesOther mergeables containing the partial results. . ReturnsAn RMergeableValue holding the aggregated value wrapped in an std::unique_ptr.; This is the recommended way of merging multiple RMergeableValue objects. This overload takes ownership of the mergeables and gives back to the user a mergeable with the aggregated information. All the mergeables with the partial results get destroyed in the process.; Example usage: using namespace ROOT::Detail::RDF;; // mh1, mh2, mh3 are std::unique_ptr<RMergeableValue<TH1D>>; auto mergedptr = MergeValues(std::move(mh1), std::move(mh2), std::move(mh3));; const auto &mergedhisto = mergedptr->GetValue(); // Final merged histogram; // Do stuff with it; mergedhisto.Draw();. Definition at line 727 of file RMergeableValue.hxx. ◆ RDFLogChannel(). ROOT::Experimental::RLogChannel & ROOT::Detail::RDF::RDFLogChannel ; (; ). Definition at line 37 of file RDFUtils.cxx. ROOTDetailRDF. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Detail_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Detail_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1Detail_1_1RDF.html:3659,Security,access,access,3659," (std::string_view datasetName, const std::vector< std::string > &fileNameGlobs, const std::vector< std::string > &defaultColumns, bool checkFile=true);  Create an RLoopManager that reads a TChain. ;  ; std::shared_ptr< ROOT::Detail::RDF::RLoopManager > CreateLMFromTTree (std::string_view datasetName, std::string_view fileNameGlob, const std::vector< std::string > &defaultColumns, bool checkFile=true);  Create an RLoopManager that reads a TChain. ;  ; template<typename T > ; std::unique_ptr< RMergeableVariations< T > > GetMergeableValue (ROOT::RDF::Experimental::RResultMap< T > &rmap);  Retrieve mergeable values after calling ROOT::RDF::VariationsFor . ;  ; template<typename T > ; std::unique_ptr< RMergeableValue< T > > GetMergeableValue (RResultPtr< T > &rptr);  Retrieve a mergeable value from an RDataFrame action. ;  ; template<typename T > ; RResultPtr< T > MakeResultPtr (const std::shared_ptr< T > &r, RLoopManager &lm, std::shared_ptr< RDFInternal::RActionBase > actionPtr);  Create a RResultPtr and set its pointer to the corresponding RAction This overload is invoked by non-jitted actions, as they have access to RAction before constructing RResultPtr. ;  ; template<typename T , typename... Ts> ; void MergeValues (RMergeableValue< T > &OutputMergeable, const RMergeableValue< Ts > &... InputMergeables);  Merge multiple RMergeableValue objects into one. ;  ; template<typename T , typename... Ts> ; void MergeValues (RMergeableVariations< T > &OutputMergeable, const RMergeableVariations< Ts > &... InputMergeables);  Merge multiple RMergeableVariations objects into one. ;  ; template<typename T , typename... Ts> ; std::unique_ptr< RMergeableValue< T > > MergeValues (std::unique_ptr< RMergeableValue< T > > OutputMergeable, std::unique_ptr< RMergeableValue< Ts > >... InputMergeables);  Merge multiple RMergeableValue objects into one. ;  ; ROOT::Experimental::RLogChannel & RDFLogChannel ();  . Function Documentation. ◆ CreateLMFromTTree() [1/2]. std::shared_ptr< ROOT::De",MatchSource.WIKI,doc/master/namespaceROOT_1_1Detail_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Detail_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1Detail_1_1RDF.html:9117,Security,access,access,9117,"ggers the execution of the RDataFrame computation graph. Then retrieves an RMergeableValue object created with the result wrapped by the RResultPtr argument. The user obtains ownership of the mergeable, which in turn holds a copy of the result of the action. The RResultPtr is not destroyed in the process and will still retain (shared) ownership of the original result.; Example usage: using namespace ROOT::Detail::RDF;; ROOT::RDataFrame d(""myTree"", ""file_*.root"");; auto h = d.Histo1D(""Branch_A"");; auto mergeablehisto = GetMergeableValue(h);; d#define d(i)Definition RSha256.hxx:102; ROOT::Detail::RDFDefinition RooAbsDataHelper.h:80. Definition at line 470 of file RResultPtr.hxx. ◆ MakeResultPtr(). template<typename T > . RResultPtr< T > ROOT::Detail::RDF::MakeResultPtr ; (; const std::shared_ptr< T > & ; r, . RLoopManager & ; df, . std::shared_ptr< ROOT::Internal::RDF::RActionBase > ; actionPtr . ). Create a RResultPtr and set its pointer to the corresponding RAction This overload is invoked by non-jitted actions, as they have access to RAction before constructing RResultPtr. ; Definition at line 444 of file RResultPtr.hxx. ◆ MergeValues() [1/3]. template<typename T , typename... Ts> . void ROOT::Detail::RDF::MergeValues ; (; RMergeableValue< T > & ; OutputMergeable, . const RMergeableValue< Ts > &... ; InputMergeables . ). Merge multiple RMergeableValue objects into one. ; Parameters. [in,out]OutputMergeableThe mergeable object where all the information will be aggregated. ; [in]InputMergeablesOther mergeables containing the partial results. This overload modifies the mergeable objects in-place. The ownership is left to the caller. The first argument to the function will get all the values contained in the other arguments merged into itself. This is a convenience overload introduced for the ROOT Python API.; Example usage: // mh1, mh2, mh3 are std::unique_ptr<RMergeableValue<TH1D>>; ROOT::Detail::RDF::MergeValues(*mh1, *mh2, *mh3);; const auto &mergedhisto = mh1->Get",MatchSource.WIKI,doc/master/namespaceROOT_1_1Detail_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Detail_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1Detail_1_1VecOps.html:299,Energy Efficiency,reduce,reduce,299,. ROOT: ROOT::Detail::VecOps Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions ; ROOT::Detail::VecOps Namespace Reference. Classes; class  RVecImpl;  This class consists of common code factored out of the SmallVector class to reduce code duplication based on the SmallVector 'N' template parameter. More...;  . Functions; template<typename T > ; bool IsAdopting (const ROOT::VecOps::RVec< T > &v);  ; template<typename T > ; bool IsSmall (const ROOT::VecOps::RVec< T > &v);  . Function Documentation. ◆ IsAdopting(). template<typename T > . bool ROOT::Detail::VecOps::IsAdopting ; (; const ROOT::VecOps::RVec< T > & ; v). Definition at line 1124 of file RVec.hxx. ◆ IsSmall(). template<typename T > . bool ROOT::Detail::VecOps::IsSmall ; (; const ROOT::VecOps::RVec< T > & ; v). Definition at line 1118 of file RVec.hxx. ROOTDetailVecOps. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:02 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/namespaceROOT_1_1Detail_1_1VecOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Detail_1_1VecOps.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:5529,Availability,error,error,5529,"ent for display of RHistStat, required to avoid sending histogram to the client. More...;  ; class  RDisplayItem;  Base class for painting data for JS. More...;  ; class  RDrawable;  Base class for drawable entities: objects that can be painted on a RPad. More...;  ; class  RDrawableDisplayItem;  Generic display item for RDrawable, just reference drawable itself. More...;  ; class  RDrawableExecRequest;  Request execution of method of referenced drawable, no reply. More...;  ; class  RDrawableMenuRequest;  Request menu items for the drawable object. More...;  ; class  RDrawableReply;  Base class for replies on RDrawableRequest. More...;  ; class  RDrawableRequest;  Base class for requests which can be submitted from the clients. More...;  ; class  REntry;  The REntry is a collection of values in an ntuple corresponding to a complete row in the data set. More...;  ; class  REnumField;  The field for an unscoped or scoped enum with dictionary. More...;  ; class  RError;  Captures diagnostics related to a ROOT runtime error. More...;  ; class  REve3DProjection;  ; class  REveAunt;  ; class  REveAuntAsList;  ; class  REveBox;  ; class  REveBoxProjected;  ; class  REveBoxSet;  ; class  REveCalo2D;  ; class  REveCalo3D;  ; class  REveCaloData;  ; class  REveCaloDataHist;  ; class  REveCaloDataSelector;  ; class  REveCaloDataSliceSelector;  ; class  REveCaloDataVec;  ; class  REveCaloLego;  ; class  REveCaloViz;  ; class  REveChunkManager;  ; class  REveChunkVector;  ; class  REveClient;  ; class  REveCluster;  REveCluster Reconstructed cluster (also used in VSD). More...;  ; class  REveCollectionCompound;  ; class  REveCompound;  ; class  REveCompoundProjected;  ; class  REveDataCollection;  ; class  REveDataColumn;  ; class  REveDataItem;  ; class  REveDataItemList;  ; class  REveDataProxyBuilderBase;  ; class  REveDataSimpleProxyBuilder;  ; class  REveDataSimpleProxyBuilderTemplate;  ; class  REveDataTable;  ; class  REveDigitSet;  ; class  REveElement;  ; class  REveEl",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:16503,Availability,failure,failures,16503,"keeping track of the bin content and the total number of calls to Fill(). More...;  ; class  RHistStatRuntime;  Interface implementing a pure virtual functions DoFill(), DoFillN(). More...;  ; class  RHistStatTotalSumOfSquaredWeights;  Keeps track of the histogram's total sum of squared weights. More...;  ; class  RHistStatTotalSumOfWeights;  Keeps track of the histogram's total sum of weights. More...;  ; class  RHistStatUncertainty;  Histogram statistics to keep track of the Poisson uncertainty per bin. More...;  ; class  RHistView;  A view on a histogram, selecting a range on a subset of dimensions. More...;  ; struct  RHistViewOutOfRange;  ; class  RIndirectDisplayItem;  Extract (reference) only basic attributes from drawable, but not drawable itself. More...;  ; class  RIntegralField;  ; class  RIntegralField< std::int16_t >;  ; class  RIntegralField< std::int32_t >;  ; class  RIntegralField< std::int64_t >;  ; class  RIntegralField< std::int8_t >;  ; class  RIntegralField< std::uint16_t >;  ; class  RIntegralField< std::uint32_t >;  ; class  RIntegralField< std::uint64_t >;  ; class  RIntegralField< std::uint8_t >;  ; class  RInvalidField;  Used in RFieldBase::Check() to record field creation failures. More...;  ; class  RLogChannel;  A log configuration for a channel, e.g. More...;  ; class  RLogDiagCount;  Keep track of emitted errors and warnings. More...;  ; class  RLogEntry;  A diagnostic that can be emitted by the RLogManager. More...;  ; class  RLogHandler;  Abstract RLogHandler base class. More...;  ; struct  RLogLocation;  A diagnostic location, part of an RLogEntry. More...;  ; class  RLogManager;  A RLogHandler that multiplexes diagnostics to different client RLogHandlers and keeps track of the sum of RLogDiagCounts for all channels. More...;  ; class  RLogScopedDiagCount;  Object to count the number of warnings and errors emitted by a section of code, after construction of this type. More...;  ; class  RLogScopedVerbosity;  Change the verbosity lev",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:16643,Availability,error,errors,16643,"  Keeps track of the histogram's total sum of weights. More...;  ; class  RHistStatUncertainty;  Histogram statistics to keep track of the Poisson uncertainty per bin. More...;  ; class  RHistView;  A view on a histogram, selecting a range on a subset of dimensions. More...;  ; struct  RHistViewOutOfRange;  ; class  RIndirectDisplayItem;  Extract (reference) only basic attributes from drawable, but not drawable itself. More...;  ; class  RIntegralField;  ; class  RIntegralField< std::int16_t >;  ; class  RIntegralField< std::int32_t >;  ; class  RIntegralField< std::int64_t >;  ; class  RIntegralField< std::int8_t >;  ; class  RIntegralField< std::uint16_t >;  ; class  RIntegralField< std::uint32_t >;  ; class  RIntegralField< std::uint64_t >;  ; class  RIntegralField< std::uint8_t >;  ; class  RInvalidField;  Used in RFieldBase::Check() to record field creation failures. More...;  ; class  RLogChannel;  A log configuration for a channel, e.g. More...;  ; class  RLogDiagCount;  Keep track of emitted errors and warnings. More...;  ; class  RLogEntry;  A diagnostic that can be emitted by the RLogManager. More...;  ; class  RLogHandler;  Abstract RLogHandler base class. More...;  ; struct  RLogLocation;  A diagnostic location, part of an RLogEntry. More...;  ; class  RLogManager;  A RLogHandler that multiplexes diagnostics to different client RLogHandlers and keeps track of the sum of RLogDiagCounts for all channels. More...;  ; class  RLogScopedDiagCount;  Object to count the number of warnings and errors emitted by a section of code, after construction of this type. More...;  ; class  RLogScopedVerbosity;  Change the verbosity level (global or specific to the RLogChannel passed to the constructor) for the lifetime of this object. More...;  ; class  RMapField;  Template specializations for C++ std::[unordered_][multi]map. More...;  ; class  RMenuItems;  List of items for object context menu. More...;  ; class  RNTupleChainProcessor;  Processor specializiation for vert",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:17150,Availability,error,errors,17150,"lField< std::int32_t >;  ; class  RIntegralField< std::int64_t >;  ; class  RIntegralField< std::int8_t >;  ; class  RIntegralField< std::uint16_t >;  ; class  RIntegralField< std::uint32_t >;  ; class  RIntegralField< std::uint64_t >;  ; class  RIntegralField< std::uint8_t >;  ; class  RInvalidField;  Used in RFieldBase::Check() to record field creation failures. More...;  ; class  RLogChannel;  A log configuration for a channel, e.g. More...;  ; class  RLogDiagCount;  Keep track of emitted errors and warnings. More...;  ; class  RLogEntry;  A diagnostic that can be emitted by the RLogManager. More...;  ; class  RLogHandler;  Abstract RLogHandler base class. More...;  ; struct  RLogLocation;  A diagnostic location, part of an RLogEntry. More...;  ; class  RLogManager;  A RLogHandler that multiplexes diagnostics to different client RLogHandlers and keeps track of the sum of RLogDiagCounts for all channels. More...;  ; class  RLogScopedDiagCount;  Object to count the number of warnings and errors emitted by a section of code, after construction of this type. More...;  ; class  RLogScopedVerbosity;  Change the verbosity level (global or specific to the RLogChannel passed to the constructor) for the lifetime of this object. More...;  ; class  RMapField;  Template specializations for C++ std::[unordered_][multi]map. More...;  ; class  RMenuItems;  List of items for object context menu. More...;  ; class  RNTupleChainProcessor;  Processor specializiation for vertically concatenated RNTuples (chains). More...;  ; class  RNTupleClusterRange;  Used to loop over entries of collections in a single cluster. More...;  ; class  RNTupleCollectionView;  A view for a collection, that can itself generate new ntuple views for its nested fields. More...;  ; class  RNTupleDescriptor;  The on-storage meta-data of an ntuple. More...;  ; class  RNTupleDirectAccessView;  A view variant that provides direct access to the I/O buffers. More...;  ; class  RNTupleDS;  The RDataSource implementa",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:22061,Availability,error,error,22061,";  Base class for paves with text, statistic, legends, placed relative to RFrame position and adjustable height. More...;  ; class  RPrepareVisitor;  Visitor used for a pre-processing run to collect information needed by another visitor class. More...;  ; class  RPrintSchemaVisitor;  Contains settings for printing and prints a summary of an RField instance. More...;  ; class  RPrintValueVisitor;  Renders a JSON value corresponding to the field. More...;  ; class  RProxiedCollectionField;  The field for a class representing a collection of elements via TVirtualCollectionProxy. More...;  ; class  RRealField;  ; class  RRecordField;  The field for an untyped record. More...;  ; class  RResult;  The class is used as a return type for operations that can fail; wraps a value of type T or an RError. More...;  ; class  RResult< void >;  RResult<void> has no data member and no Inspect() method but instead a Success() factory method. More...;  ; class  RResultBase;  Common handling of the error case for RResult<T> (T != void) and RResult<void> More...;  ; class  RRVecField;  Template specializations for ROOT's RVec. More...;  ; class  RSetField;  Template specializations for C++ std::[unordered_][multi]set. More...;  ; class  RSimpleField;  ; class  RStreamerField;  The field for a class using ROOT standard streaming. More...;  ; class  RStyle;  A set of defaults for graphics attributes, e.g. More...;  ; class  RTupleField;  Template specializations for C++ std::tuple. More...;  ; class  RUniquePtrField;  ; class  RVariantField;  Template specializations for C++ std::variant. More...;  ; class  RVectorField;  Template specializations for C++ std::vector. More...;  ; class  TObjectDisplayItem;  Display item for TObject with drawing options. More...;  ; class  TObjectDrawable;  Provides v7 drawing facilities for TObject types (TGraph, TH1, TH2, etc). More...;  ; class  TTaskGroup;  A class to manage the asynchronous execution of work items. More...;  ; class  TTreeReaderFast;  ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:41980,Availability,error,error,41980,kReal32 ; kReal16 ; kInt64 ; kUInt64 ; kInt32 ; kUInt32 ; kInt16 ; kUInt16 ; kInt8 ; kUInt8 ; kSplitIndex64 ; kSplitIndex32 ; kSplitReal64 ; kSplitReal32 ; kSplitInt64 ; kSplitUInt64 ; kSplitInt32 ; kSplitUInt32 ; kSplitInt16 ; kSplitUInt16 ; kReal32Trunc ; kReal32Quant ; kMax . Definition at line 72 of file RNTupleUtil.hxx. ◆ EExtraTypeInfoIds. enum class ROOT::Experimental::EExtraTypeInfoIds. strong . Used in RExtraTypeInfoDescriptor. . EnumeratorkInvalid ; kStreamerInfo . Definition at line 467 of file RNTupleDescriptor.hxx. ◆ EIOFeatures. enum class ROOT::Experimental::EIOFeatures. strong . EnumeratorkGenerateOffsetMap ; kSupported . Definition at line 52 of file TIOFeatures.hxx. ◆ EIOUnsupportedFeatures. enum class ROOT::Experimental::EIOUnsupportedFeatures. strong . EnumeratorkUnsupported . Definition at line 61 of file TIOFeatures.hxx. ◆ ELogLevel. enum class ROOT::Experimental::ELogLevel : unsigned char. strong . Kinds of diagnostics. . EnumeratorkUnset ; kFatal An error which causes further processing to be unreliable. . kError An error. . kWarning Warnings about likely unexpected behavior. . kInfo Informational messages; used for instance for tracing. . kDebug Debug information; only useful for developers; can have added verbosity up to 255-kDebug. . Definition at line 36 of file RLogger.hxx. ◆ ENTupleInfo. enum class ROOT::Experimental::ENTupleInfo. strong . Listing of the different options that can be printed by RNTupleReader::GetInfo() . EnumeratorkSummary ; kStorageDetails ; kMetrics . Definition at line 43 of file RNTupleReader.hxx. ◆ ENTupleInspectorHist. enum class ROOT::Experimental::ENTupleInspectorHist. strong . EnumeratorkCount ; kNElems ; kCompressedSize ; kUncompressedSize . Definition at line 43 of file RNTupleInspector.hxx. ◆ ENTupleInspectorPrintFormat. enum class ROOT::Experimental::ENTupleInspectorPrintFormat. strong . EnumeratorkTable ; kCSV . Definition at line 42 of file RNTupleInspector.hxx. ◆ ENTupleStructure. enum ROOT::Experimental:,MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:42048,Availability,error,error,42048,32 ; kInt16 ; kUInt16 ; kInt8 ; kUInt8 ; kSplitIndex64 ; kSplitIndex32 ; kSplitReal64 ; kSplitReal32 ; kSplitInt64 ; kSplitUInt64 ; kSplitInt32 ; kSplitUInt32 ; kSplitInt16 ; kSplitUInt16 ; kReal32Trunc ; kReal32Quant ; kMax . Definition at line 72 of file RNTupleUtil.hxx. ◆ EExtraTypeInfoIds. enum class ROOT::Experimental::EExtraTypeInfoIds. strong . Used in RExtraTypeInfoDescriptor. . EnumeratorkInvalid ; kStreamerInfo . Definition at line 467 of file RNTupleDescriptor.hxx. ◆ EIOFeatures. enum class ROOT::Experimental::EIOFeatures. strong . EnumeratorkGenerateOffsetMap ; kSupported . Definition at line 52 of file TIOFeatures.hxx. ◆ EIOUnsupportedFeatures. enum class ROOT::Experimental::EIOUnsupportedFeatures. strong . EnumeratorkUnsupported . Definition at line 61 of file TIOFeatures.hxx. ◆ ELogLevel. enum class ROOT::Experimental::ELogLevel : unsigned char. strong . Kinds of diagnostics. . EnumeratorkUnset ; kFatal An error which causes further processing to be unreliable. . kError An error. . kWarning Warnings about likely unexpected behavior. . kInfo Informational messages; used for instance for tracing. . kDebug Debug information; only useful for developers; can have added verbosity up to 255-kDebug. . Definition at line 36 of file RLogger.hxx. ◆ ENTupleInfo. enum class ROOT::Experimental::ENTupleInfo. strong . Listing of the different options that can be printed by RNTupleReader::GetInfo() . EnumeratorkSummary ; kStorageDetails ; kMetrics . Definition at line 43 of file RNTupleReader.hxx. ◆ ENTupleInspectorHist. enum class ROOT::Experimental::ENTupleInspectorHist. strong . EnumeratorkCount ; kNElems ; kCompressedSize ; kUncompressedSize . Definition at line 43 of file RNTupleInspector.hxx. ◆ ENTupleInspectorPrintFormat. enum class ROOT::Experimental::ENTupleInspectorPrintFormat. strong . EnumeratorkTable ; kCSV . Definition at line 42 of file RNTupleInspector.hxx. ◆ ENTupleStructure. enum ROOT::Experimental::ENTupleStructure : std::uint16_t. The fields in the ,MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:44188,Availability,error,error,44188,"fields contain just data, collection fields resolve to offset columns, record fields have no materialization on the primitive column layer. . EnumeratorkInvalid ; kLeaf ; kCollection ; kRecord ; kVariant ; kStreamer ; kUnknown . Definition at line 112 of file RNTupleUtil.hxx. Function Documentation. ◆ Add(). template<int DIMENSIONS, class PRECISION , template< int D_, class P_ > class... STAT_TO, template< int D_, class P_ > class... STAT_FROM> . void ROOT::Experimental::Add ; (; RHist< DIMENSIONS, PRECISION, STAT_TO... > & ; to, . const RHist< DIMENSIONS, PRECISION, STAT_FROM... > & ; from . ). Add two histograms. ; This operation may currently only be performed if the two histograms have the same axis configuration, use the same precision, and if from records at least the same statistics as to (recording more stats is fine).; Adding histograms with incompatible axis binning will be reported at runtime with an std::runtime_error. Insufficient statistics in the source histogram will be detected at compile-time and result in a compiler error.; In the future, we may either adopt a more relaxed definition of histogram addition or provide a mechanism to convert from one histogram type to another. We currently favor the latter path. ; Definition at line 342 of file RHist.hxx. ◆ CanMap(). ROOT::Experimental::EAxisCompatibility ROOT::Experimental::CanMap ; (; const RAxisEquidistant & ; target, . const RAxisEquidistant & ; source . ). noexcept . Whether (and how) the source axis can be merged into the target axis. ; Definition at line 126 of file RAxis.cxx. ◆ FitPanelLog(). ROOT::Experimental::RLogChannel & ROOT::Experimental::FitPanelLog ; (; ). Log channel for FitPanel diagnostics. ; Definition at line 22 of file RFitPanelModel.cxx. ◆ FitTo(). template<int DIMENSIONS, class PRECISION , template< int D_, class P_ > class... STAT> . RFitResult ROOT::Experimental::FitTo ; (; const RHist< DIMENSIONS, PRECISION, STAT... > & ; hist, . const RFunction< DIMENSIONS > & ; func, . st",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:16552,Deployability,configurat,configuration,16552," total sum of squared weights. More...;  ; class  RHistStatTotalSumOfWeights;  Keeps track of the histogram's total sum of weights. More...;  ; class  RHistStatUncertainty;  Histogram statistics to keep track of the Poisson uncertainty per bin. More...;  ; class  RHistView;  A view on a histogram, selecting a range on a subset of dimensions. More...;  ; struct  RHistViewOutOfRange;  ; class  RIndirectDisplayItem;  Extract (reference) only basic attributes from drawable, but not drawable itself. More...;  ; class  RIntegralField;  ; class  RIntegralField< std::int16_t >;  ; class  RIntegralField< std::int32_t >;  ; class  RIntegralField< std::int64_t >;  ; class  RIntegralField< std::int8_t >;  ; class  RIntegralField< std::uint16_t >;  ; class  RIntegralField< std::uint32_t >;  ; class  RIntegralField< std::uint64_t >;  ; class  RIntegralField< std::uint8_t >;  ; class  RInvalidField;  Used in RFieldBase::Check() to record field creation failures. More...;  ; class  RLogChannel;  A log configuration for a channel, e.g. More...;  ; class  RLogDiagCount;  Keep track of emitted errors and warnings. More...;  ; class  RLogEntry;  A diagnostic that can be emitted by the RLogManager. More...;  ; class  RLogHandler;  Abstract RLogHandler base class. More...;  ; struct  RLogLocation;  A diagnostic location, part of an RLogEntry. More...;  ; class  RLogManager;  A RLogHandler that multiplexes diagnostics to different client RLogHandlers and keeps track of the sum of RLogDiagCounts for all channels. More...;  ; class  RLogScopedDiagCount;  Object to count the number of warnings and errors emitted by a section of code, after construction of this type. More...;  ; class  RLogScopedVerbosity;  Change the verbosity level (global or specific to the RLogChannel passed to the constructor) for the lifetime of this object. More...;  ; class  RMapField;  Template specializations for C++ std::[unordered_][multi]map. More...;  ; class  RMenuItems;  List of items for object context menu. M",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:43850,Deployability,configurat,configuration,43850,"g . EnumeratorkTable ; kCSV . Definition at line 42 of file RNTupleInspector.hxx. ◆ ENTupleStructure. enum ROOT::Experimental::ENTupleStructure : std::uint16_t. The fields in the ntuple model tree can carry different structural information about the type system. ; Leaf fields contain just data, collection fields resolve to offset columns, record fields have no materialization on the primitive column layer. . EnumeratorkInvalid ; kLeaf ; kCollection ; kRecord ; kVariant ; kStreamer ; kUnknown . Definition at line 112 of file RNTupleUtil.hxx. Function Documentation. ◆ Add(). template<int DIMENSIONS, class PRECISION , template< int D_, class P_ > class... STAT_TO, template< int D_, class P_ > class... STAT_FROM> . void ROOT::Experimental::Add ; (; RHist< DIMENSIONS, PRECISION, STAT_TO... > & ; to, . const RHist< DIMENSIONS, PRECISION, STAT_FROM... > & ; from . ). Add two histograms. ; This operation may currently only be performed if the two histograms have the same axis configuration, use the same precision, and if from records at least the same statistics as to (recording more stats is fine).; Adding histograms with incompatible axis binning will be reported at runtime with an std::runtime_error. Insufficient statistics in the source histogram will be detected at compile-time and result in a compiler error.; In the future, we may either adopt a more relaxed definition of histogram addition or provide a mechanism to convert from one histogram type to another. We currently favor the latter path. ; Definition at line 342 of file RHist.hxx. ◆ CanMap(). ROOT::Experimental::EAxisCompatibility ROOT::Experimental::CanMap ; (; const RAxisEquidistant & ; target, . const RAxisEquidistant & ; source . ). noexcept . Whether (and how) the source axis can be merged into the target axis. ; Definition at line 126 of file RAxis.cxx. ◆ FitPanelLog(). ROOT::Experimental::RLogChannel & ROOT::Experimental::FitPanelLog ; (; ). Log channel for FitPanel diagnostics. ; Definition at line 22 o",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:57678,Energy Efficiency,efficient,efficient,57678,". template<> . const RAttrMap::Value_t * ROOT::Experimental::RAttrMap::Value_t::GetValue< const RAttrMap::Value_t *, RColor > ; (; const Value_t * ; rec). ◆ RAttrMap::Value_t::GetValue< const RAttrMap::Value_t *, RPadLength >(). template<> . const RAttrMap::Value_t * ROOT::Experimental::RAttrMap::Value_t::GetValue< const RAttrMap::Value_t *, RPadLength > ; (; const Value_t * ; rec). ◆ RAttrMap::Value_t::GetValue< const RAttrMap::Value_t *, void >(). template<> . const RAttrMap::Value_t * ROOT::Experimental::RAttrMap::Value_t::GetValue< const RAttrMap::Value_t *, void > ; (; const Value_t * ; rec). ◆ REveLog(). REX::RLogChannel & ROOT::Experimental::REveLog ; (; ). Log channel for Eve diagnostics. ; Definition at line 51 of file REveTypes.cxx. ◆ swap(). template<int DIMENSIONS, class PRECISION , template< int D_, class P_ > class... STAT> . void ROOT::Experimental::swap ; (; RHist< DIMENSIONS, PRECISION, STAT... > & ; a, . RHist< DIMENSIONS, PRECISION, STAT... > & ; b . ). noexcept . Swap two histograms. ; Very efficient; swaps the fImpl pointers. ; Definition at line 210 of file RHist.hxx. Variable Documentation. ◆ gEve. REveManager * ROOT::Experimental::gEve = nullptr. Definition at line 286 of file REveManager.hxx. ◆ kInvalidColumnId. constexpr ColumnId_t ROOT::Experimental::kInvalidColumnId = -1. constexpr . Definition at line 163 of file RNTupleUtil.hxx. ◆ kInvalidDescriptorId. constexpr DescriptorId_t ROOT::Experimental::kInvalidDescriptorId = std::uint64_t(-1). constexpr . Definition at line 167 of file RNTupleUtil.hxx. ◆ kInvalidNTupleIndex. constexpr NTupleSize_t ROOT::Experimental::kInvalidNTupleIndex = std::uint64_t(-1). constexpr . Definition at line 116 of file RNTupleUtil.hxx. ◆ kUnknownCompressionSettings. constexpr int ROOT::Experimental::kUnknownCompressionSettings = -1. constexpr . Definition at line 146 of file RNTupleUtil.hxx. ROOTExperimental. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:7234,Integrability,interface,interface,7234,n;  ; class  REveDataColumn;  ; class  REveDataItem;  ; class  REveDataItemList;  ; class  REveDataProxyBuilderBase;  ; class  REveDataSimpleProxyBuilder;  ; class  REveDataSimpleProxyBuilderTemplate;  ; class  REveDataTable;  ; class  REveDigitSet;  ; class  REveElement;  ; class  REveEllipsoid;  ; class  REveEllipsoidProjected;  ; class  REveException;  REveException Exception-type thrown by Eve classes. More...;  ; class  REveFrameBox;  ; class  REveGeoManagerHolder;  REveGeoManagerHolder Exception-safe global variable holders. More...;  ; class  REveGeoPolyShape;  ; class  REveGeoShape;  ; class  REveGeoShapeExtract;  ; class  REveGeoShapeProjected;  ; class  REveGeoTopNodeData;  ; class  REveGeoTopNodeViz;  ; class  REveHit;  REveHit Monte Carlo hit (also used in VSD). More...;  ; class  REveJetCone;  ; class  REveJetConeProjected;  ; class  REveLine;  REveLine An arbitrary polyline with fixed line and marker attributes. More...;  ; class  REveLineProjected;  ; class  REveMagField;  REveMagField Abstract interface to magnetic field. More...;  ; class  REveMagFieldConst;  REveMagFieldConst Interface to constant magnetic field. More...;  ; class  REveMagFieldDuo;  REveMagFieldDuo Interface to magnetic field with two different values depending on radius. More...;  ; class  REveManager;  ; class  REveMCRecCrossRef;  REveMCRecCrossRef Cross-reference of sim/rec data per particle (also used in VSD). More...;  ; class  REveMCTrack;  REveMCTrack. More...;  ; class  REvePathMarkT;  Special-point on track: More...;  ; class  REvePointSelector;  REvePointSelector TSelector for direct extraction of point-like data from a Tree. More...;  ; class  REvePointSelectorConsumer;  ; class  REvePointSet;  ; class  REvePointSetArray;  ; class  REvePointSetProjected;  ; class  REvePolygonSetProjected;  ; class  REveProjectable;  ; class  REveProjected;  ; class  REveProjection;  REveProjection Base for specific classes that implement non-linear projections. More...;  ; class  REvePro,MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:7465,Integrability,depend,depending,7465,ataTable;  ; class  REveDigitSet;  ; class  REveElement;  ; class  REveEllipsoid;  ; class  REveEllipsoidProjected;  ; class  REveException;  REveException Exception-type thrown by Eve classes. More...;  ; class  REveFrameBox;  ; class  REveGeoManagerHolder;  REveGeoManagerHolder Exception-safe global variable holders. More...;  ; class  REveGeoPolyShape;  ; class  REveGeoShape;  ; class  REveGeoShapeExtract;  ; class  REveGeoShapeProjected;  ; class  REveGeoTopNodeData;  ; class  REveGeoTopNodeViz;  ; class  REveHit;  REveHit Monte Carlo hit (also used in VSD). More...;  ; class  REveJetCone;  ; class  REveJetConeProjected;  ; class  REveLine;  REveLine An arbitrary polyline with fixed line and marker attributes. More...;  ; class  REveLineProjected;  ; class  REveMagField;  REveMagField Abstract interface to magnetic field. More...;  ; class  REveMagFieldConst;  REveMagFieldConst Interface to constant magnetic field. More...;  ; class  REveMagFieldDuo;  REveMagFieldDuo Interface to magnetic field with two different values depending on radius. More...;  ; class  REveManager;  ; class  REveMCRecCrossRef;  REveMCRecCrossRef Cross-reference of sim/rec data per particle (also used in VSD). More...;  ; class  REveMCTrack;  REveMCTrack. More...;  ; class  REvePathMarkT;  Special-point on track: More...;  ; class  REvePointSelector;  REvePointSelector TSelector for direct extraction of point-like data from a Tree. More...;  ; class  REvePointSelectorConsumer;  ; class  REvePointSet;  ; class  REvePointSetArray;  ; class  REvePointSetProjected;  ; class  REvePolygonSetProjected;  ; class  REveProjectable;  ; class  REveProjected;  ; class  REveProjection;  REveProjection Base for specific classes that implement non-linear projections. More...;  ; class  REveProjectionManager;  REveProjectionManager Manager class for steering of projections and managing projected objects. More...;  ; class  REveRecCascade;  REveRecCascade. More...;  ; class  REveRecKink;  REveRecKink Recons,MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:8754,Integrability,interface,interface,8754,ck: More...;  ; class  REvePointSelector;  REvePointSelector TSelector for direct extraction of point-like data from a Tree. More...;  ; class  REvePointSelectorConsumer;  ; class  REvePointSet;  ; class  REvePointSetArray;  ; class  REvePointSetProjected;  ; class  REvePolygonSetProjected;  ; class  REveProjectable;  ; class  REveProjected;  ; class  REveProjection;  REveProjection Base for specific classes that implement non-linear projections. More...;  ; class  REveProjectionManager;  REveProjectionManager Manager class for steering of projections and managing projected objects. More...;  ; class  REveRecCascade;  REveRecCascade. More...;  ; class  REveRecKink;  REveRecKink Reconstructed kink (also used in VSD). More...;  ; class  REveRecTrackT;  REveRecTrack Template for reconstructed track (also used in VSD). More...;  ; class  REveRecV0;  REveRecV0. More...;  ; class  REveRefBackPtr;  REveRefBackPtr reference-count with back pointers. More...;  ; class  REveRefCnt;  REveRefCnt REveRefCnt base-class (interface) More...;  ; class  REveRenderData;  ; class  REveRGBAPalette;  ; class  REveRhoZProjection;  ; class  REveRPhiProjection;  ; class  REveScalableStraightLineSet;  ; class  REveScene;  ; class  REveSceneInfo;  REveSceneInfo Scene in a viewer. More...;  ; class  REveSceneList;  ; class  REveSecondarySelectable;  ; class  REveSelection;  REveSelection Container for selected and highlighted elements. More...;  ; class  REveSelectorToEventList;  REveSelectorToEventList TSelector that stores entry numbers of matching TTree entries into an event-list. More...;  ; struct  REveServerStatus;  ; class  REveShape;  ; class  REveStraightLineSet;  REveStraightLineSet Set of straight lines with optional markers along the lines. More...;  ; class  REveStraightLineSetProjected;  REveStraightLineSetProjected Projected copy of a REveStraightLineSet. More...;  ; class  REveTableEntry;  REveTableEntry. More...;  ; class  REveTableHandle;  REveTableHandle. More...;  ; class  R,MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:12955,Integrability,interface,interface,12955,"s  RField< std::map< KeyT, ValueT > >;  ; class  RField< std::multimap< KeyT, ValueT > >;  ; class  RField< std::multiset< ItemT > >;  ; class  RField< std::optional< ItemT > >;  ; class  RField< std::pair< T1, T2 > >;  ; class  RField< std::set< ItemT > >;  ; class  RField< std::string >;  Template specializations for C++ std::string. ;  ; class  RField< std::tuple< ItemTs... > >;  ; class  RField< std::unique_ptr< ItemT > >;  ; class  RField< std::unordered_map< KeyT, ValueT > >;  ; class  RField< std::unordered_multimap< KeyT, ValueT > >;  ; class  RField< std::unordered_multiset< ItemT > >;  ; class  RField< std::unordered_set< ItemT > >;  ; class  RField< std::variant< ItemTs... > >;  ; class  RField< std::vector< bool > >;  ; class  RField< std::vector< ItemT > >;  ; class  RField< T, typename std::enable_if< IsCollectionProxy< T >::value >::type >;  Classes behaving as a collection of elements that can be queried via the TVirtualCollectionProxy interface The use of a collection proxy for a particular class can be enabled via: ;  ; class  RField< T, typename std::enable_if< std::is_enum_v< T > >::type >;  ; class  RField< T, typename std::enable_if< std::is_integral_v< T > >::type >;  ; class  RField< TObject >;  TObject requires special handling of the fBits and fUniqueID members. More...;  ; class  RField< void >;  Template specializations for concrete C++ fundamental types. More...;  ; class  RFieldBase;  A field translates read and write calls from/to underlying columns to/from tree values. More...;  ; class  RFieldDescriptor;  Meta-data stored for every field of an ntuple. More...;  ; class  RFieldZero;  The container field for an ntuple model, which itself has no physical representation. More...;  ; class  RFile;  A ROOT file. More...;  ; class  RFilePtr;  Points to an object that stores or reads objects in ROOT's binary format. More...;  ; class  RFitPanel;  ; struct  RFitPanelModel;  Data structure for the fit panel. More...;  ; class  RFitResult;  ; c",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:14761,Integrability,synchroniz,synchronization,14761,"file. More...;  ; class  RFilePtr;  Points to an object that stores or reads objects in ROOT's binary format. More...;  ; class  RFitPanel;  ; struct  RFitPanelModel;  Data structure for the fit panel. More...;  ; class  RFitResult;  ; class  RFrame;  Holds an area where drawing on user coordinate-system can be performed. More...;  ; class  RFunction;  ; class  RHist;  Histogram class for histograms with DIMENSIONS dimensions, where each bin count is stored by a value of type PRECISION. More...;  ; class  RHist1Drawable;  ; class  RHist1StatBox;  ; class  RHist2Drawable;  ; class  RHist2StatBox;  ; class  RHist3Drawable;  ; class  RHist3StatBox;  ; class  RHist< DIMENSIONS, PRECISION >;  RHist with no STAT parameter uses RHistStatContent by default. More...;  ; class  RHistBufferedFill;  Buffers calls to Fill(). More...;  ; class  RHistConcurrentFiller;  Buffers a thread's Fill calls and submits them to the RHistConcurrentFillManager. More...;  ; class  RHistConcurrentFillManager;  Manages the synchronization of calls to FillN(). More...;  ; class  RHistDataMomentUncert;  For now do as RH1: calculate first (xw) and second (x^2w) moment. More...;  ; class  RHistDisplayItem;  ; class  RHistDrawable;  ; class  RHistDrawableBase;  ; class  RHistStatBox;  Template class for statistic box for RHist class. More...;  ; class  RHistStatBoxBase;  Base class for histogram statistic box, provides graphics attributes and virtual method for fill statistic. More...;  ; class  RHistStatContent;  Basic histogram statistics, keeping track of the bin content and the total number of calls to Fill(). More...;  ; class  RHistStatRuntime;  Interface implementing a pure virtual functions DoFill(), DoFillN(). More...;  ; class  RHistStatTotalSumOfSquaredWeights;  Keeps track of the histogram's total sum of squared weights. More...;  ; class  RHistStatTotalSumOfWeights;  Keeps track of the histogram's total sum of weights. More...;  ; class  RHistStatUncertainty;  Histogram statistics to keep",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:21833,Integrability,wrap,wraps,21833,"(horizontal and vertical) in a RPad. More...;  ; class  RPairField;  Template specializations for C++ std::pair. More...;  ; class  RPalette;  A set of colors. More...;  ; class  RPaletteDrawable;  A color palette draw near the frame. More...;  ; class  RPave;  Base class for paves with text, statistic, legends, placed relative to RFrame position and adjustable height. More...;  ; class  RPrepareVisitor;  Visitor used for a pre-processing run to collect information needed by another visitor class. More...;  ; class  RPrintSchemaVisitor;  Contains settings for printing and prints a summary of an RField instance. More...;  ; class  RPrintValueVisitor;  Renders a JSON value corresponding to the field. More...;  ; class  RProxiedCollectionField;  The field for a class representing a collection of elements via TVirtualCollectionProxy. More...;  ; class  RRealField;  ; class  RRecordField;  The field for an untyped record. More...;  ; class  RResult;  The class is used as a return type for operations that can fail; wraps a value of type T or an RError. More...;  ; class  RResult< void >;  RResult<void> has no data member and no Inspect() method but instead a Success() factory method. More...;  ; class  RResultBase;  Common handling of the error case for RResult<T> (T != void) and RResult<void> More...;  ; class  RRVecField;  Template specializations for ROOT's RVec. More...;  ; class  RSetField;  Template specializations for C++ std::[unordered_][multi]set. More...;  ; class  RSimpleField;  ; class  RStreamerField;  The field for a class using ROOT standard streaming. More...;  ; class  RStyle;  A set of defaults for graphics attributes, e.g. More...;  ; class  RTupleField;  Template specializations for C++ std::tuple. More...;  ; class  RUniquePtrField;  ; class  RVariantField;  Template specializations for C++ std::variant. More...;  ; class  RVectorField;  Template specializations for C++ std::vector. More...;  ; class  TObjectDisplayItem;  Display item for TObject wit",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:42131,Integrability,message,messages,42131,eal32 ; kSplitInt64 ; kSplitUInt64 ; kSplitInt32 ; kSplitUInt32 ; kSplitInt16 ; kSplitUInt16 ; kReal32Trunc ; kReal32Quant ; kMax . Definition at line 72 of file RNTupleUtil.hxx. ◆ EExtraTypeInfoIds. enum class ROOT::Experimental::EExtraTypeInfoIds. strong . Used in RExtraTypeInfoDescriptor. . EnumeratorkInvalid ; kStreamerInfo . Definition at line 467 of file RNTupleDescriptor.hxx. ◆ EIOFeatures. enum class ROOT::Experimental::EIOFeatures. strong . EnumeratorkGenerateOffsetMap ; kSupported . Definition at line 52 of file TIOFeatures.hxx. ◆ EIOUnsupportedFeatures. enum class ROOT::Experimental::EIOUnsupportedFeatures. strong . EnumeratorkUnsupported . Definition at line 61 of file TIOFeatures.hxx. ◆ ELogLevel. enum class ROOT::Experimental::ELogLevel : unsigned char. strong . Kinds of diagnostics. . EnumeratorkUnset ; kFatal An error which causes further processing to be unreliable. . kError An error. . kWarning Warnings about likely unexpected behavior. . kInfo Informational messages; used for instance for tracing. . kDebug Debug information; only useful for developers; can have added verbosity up to 255-kDebug. . Definition at line 36 of file RLogger.hxx. ◆ ENTupleInfo. enum class ROOT::Experimental::ENTupleInfo. strong . Listing of the different options that can be printed by RNTupleReader::GetInfo() . EnumeratorkSummary ; kStorageDetails ; kMetrics . Definition at line 43 of file RNTupleReader.hxx. ◆ ENTupleInspectorHist. enum class ROOT::Experimental::ENTupleInspectorHist. strong . EnumeratorkCount ; kNElems ; kCompressedSize ; kUncompressedSize . Definition at line 43 of file RNTupleInspector.hxx. ◆ ENTupleInspectorPrintFormat. enum class ROOT::Experimental::ENTupleInspectorPrintFormat. strong . EnumeratorkTable ; kCSV . Definition at line 42 of file RNTupleInspector.hxx. ◆ ENTupleStructure. enum ROOT::Experimental::ENTupleStructure : std::uint16_t. The fields in the ntuple model tree can carry different structural information about the type system. ; Leaf fiel,MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:2421,Modifiability,config,configure,2421,"ticks attributes. More...;  ; class  RAttrAxisTitle;  Axis title and its drawing attributes. More...;  ; class  RAttrBase;  Base class for all attributes, used with RDrawable. More...;  ; class  RAttrBorder;  Drawing line attributes for different objects. More...;  ; class  RAttrFill;  Drawing fill attributes for different objects. More...;  ; class  RAttrFont;  A font attributes, used together with text attributes. More...;  ; class  RAttrLine;  Drawing line attributes for different objects. More...;  ; class  RAttrLineEnding;  Attributes for line ending. More...;  ; class  RAttrMap;  ; class  RAttrMargins;  A margins attributes. Only relative and pixel coordinates are allowed. More...;  ; class  RAttrMarker;  A marker attributes. More...;  ; class  RAttrText;  A text attributes. More...;  ; class  RAttrValue;  Template class to access single value from drawable or other attributes. More...;  ; class  RAxisBase;  Histogram axis base class. More...;  ; class  RAxisConfig;  Objects used to configure the different axis types. More...;  ; class  RAxisDrawable;  Axis drawing. More...;  ; class  RAxisEquidistant;  Axis with equidistant bin borders. More...;  ; class  RAxisGrow;  An axis that can extend its range, keeping the number of its bins unchanged. More...;  ; class  RAxisIrregular;  An axis with non-equidistant bins (also known as ""variable binning""). More...;  ; class  RAxisLabels;  A RAxisGrow that has a label assigned to each bin and a bin width of 1. More...;  ; class  RBitsetField;  Template specializations for C++ std::bitset. More...;  ; class  RCanvas;  A window's topmost RPad. More...;  ; class  RCanvasDisplayItem;  class RCanvasDisplayItem More...;  ; class  RCanvasPainter;  Implementation of painter for ROOT::Experimental::RCanvas, using RWebWindow. More...;  ; class  RCardinalityField;  An artificial field that transforms an RNTuple column that contains the offset of collections into collection sizes. More...;  ; class  RChangeAttrRequest;  ; class  RCl",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:2627,Modifiability,extend,extend,2627,"ne attributes for different objects. More...;  ; class  RAttrFill;  Drawing fill attributes for different objects. More...;  ; class  RAttrFont;  A font attributes, used together with text attributes. More...;  ; class  RAttrLine;  Drawing line attributes for different objects. More...;  ; class  RAttrLineEnding;  Attributes for line ending. More...;  ; class  RAttrMap;  ; class  RAttrMargins;  A margins attributes. Only relative and pixel coordinates are allowed. More...;  ; class  RAttrMarker;  A marker attributes. More...;  ; class  RAttrText;  A text attributes. More...;  ; class  RAttrValue;  Template class to access single value from drawable or other attributes. More...;  ; class  RAxisBase;  Histogram axis base class. More...;  ; class  RAxisConfig;  Objects used to configure the different axis types. More...;  ; class  RAxisDrawable;  Axis drawing. More...;  ; class  RAxisEquidistant;  Axis with equidistant bin borders. More...;  ; class  RAxisGrow;  An axis that can extend its range, keeping the number of its bins unchanged. More...;  ; class  RAxisIrregular;  An axis with non-equidistant bins (also known as ""variable binning""). More...;  ; class  RAxisLabels;  A RAxisGrow that has a label assigned to each bin and a bin width of 1. More...;  ; class  RBitsetField;  Template specializations for C++ std::bitset. More...;  ; class  RCanvas;  A window's topmost RPad. More...;  ; class  RCanvasDisplayItem;  class RCanvasDisplayItem More...;  ; class  RCanvasPainter;  Implementation of painter for ROOT::Experimental::RCanvas, using RWebWindow. More...;  ; class  RCardinalityField;  An artificial field that transforms an RNTuple column that contains the offset of collections into collection sizes. More...;  ; class  RChangeAttrRequest;  ; class  RClassField;  The field for a class with dictionary. More...;  ; class  RClusterDescriptor;  Meta-data for a set of ntuple clusters. More...;  ; class  RClusterGroupDescriptor;  Clusters are bundled in cluster groups. Mor",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:2773,Modifiability,variab,variable,2773,"bjects. More...;  ; class  RAttrFont;  A font attributes, used together with text attributes. More...;  ; class  RAttrLine;  Drawing line attributes for different objects. More...;  ; class  RAttrLineEnding;  Attributes for line ending. More...;  ; class  RAttrMap;  ; class  RAttrMargins;  A margins attributes. Only relative and pixel coordinates are allowed. More...;  ; class  RAttrMarker;  A marker attributes. More...;  ; class  RAttrText;  A text attributes. More...;  ; class  RAttrValue;  Template class to access single value from drawable or other attributes. More...;  ; class  RAxisBase;  Histogram axis base class. More...;  ; class  RAxisConfig;  Objects used to configure the different axis types. More...;  ; class  RAxisDrawable;  Axis drawing. More...;  ; class  RAxisEquidistant;  Axis with equidistant bin borders. More...;  ; class  RAxisGrow;  An axis that can extend its range, keeping the number of its bins unchanged. More...;  ; class  RAxisIrregular;  An axis with non-equidistant bins (also known as ""variable binning""). More...;  ; class  RAxisLabels;  A RAxisGrow that has a label assigned to each bin and a bin width of 1. More...;  ; class  RBitsetField;  Template specializations for C++ std::bitset. More...;  ; class  RCanvas;  A window's topmost RPad. More...;  ; class  RCanvasDisplayItem;  class RCanvasDisplayItem More...;  ; class  RCanvasPainter;  Implementation of painter for ROOT::Experimental::RCanvas, using RWebWindow. More...;  ; class  RCardinalityField;  An artificial field that transforms an RNTuple column that contains the offset of collections into collection sizes. More...;  ; class  RChangeAttrRequest;  ; class  RClassField;  The field for a class with dictionary. More...;  ; class  RClusterDescriptor;  Meta-data for a set of ntuple clusters. More...;  ; class  RClusterGroupDescriptor;  Clusters are bundled in cluster groups. More...;  ; class  RClusterIndex;  Addresses a column element or field item relative to a particular cluster, ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:6728,Modifiability,variab,variable,6728,t;  ; class  REveCalo2D;  ; class  REveCalo3D;  ; class  REveCaloData;  ; class  REveCaloDataHist;  ; class  REveCaloDataSelector;  ; class  REveCaloDataSliceSelector;  ; class  REveCaloDataVec;  ; class  REveCaloLego;  ; class  REveCaloViz;  ; class  REveChunkManager;  ; class  REveChunkVector;  ; class  REveClient;  ; class  REveCluster;  REveCluster Reconstructed cluster (also used in VSD). More...;  ; class  REveCollectionCompound;  ; class  REveCompound;  ; class  REveCompoundProjected;  ; class  REveDataCollection;  ; class  REveDataColumn;  ; class  REveDataItem;  ; class  REveDataItemList;  ; class  REveDataProxyBuilderBase;  ; class  REveDataSimpleProxyBuilder;  ; class  REveDataSimpleProxyBuilderTemplate;  ; class  REveDataTable;  ; class  REveDigitSet;  ; class  REveElement;  ; class  REveEllipsoid;  ; class  REveEllipsoidProjected;  ; class  REveException;  REveException Exception-type thrown by Eve classes. More...;  ; class  REveFrameBox;  ; class  REveGeoManagerHolder;  REveGeoManagerHolder Exception-safe global variable holders. More...;  ; class  REveGeoPolyShape;  ; class  REveGeoShape;  ; class  REveGeoShapeExtract;  ; class  REveGeoShapeProjected;  ; class  REveGeoTopNodeData;  ; class  REveGeoTopNodeViz;  ; class  REveHit;  REveHit Monte Carlo hit (also used in VSD). More...;  ; class  REveJetCone;  ; class  REveJetConeProjected;  ; class  REveLine;  REveLine An arbitrary polyline with fixed line and marker attributes. More...;  ; class  REveLineProjected;  ; class  REveMagField;  REveMagField Abstract interface to magnetic field. More...;  ; class  REveMagFieldConst;  REveMagFieldConst Interface to constant magnetic field. More...;  ; class  REveMagFieldDuo;  REveMagFieldDuo Interface to magnetic field with two different values depending on radius. More...;  ; class  REveManager;  ; class  REveMCRecCrossRef;  REveMCRecCrossRef Cross-reference of sim/rec data per particle (also used in VSD). More...;  ; class  REveMCTrack;  REveMCTrack. More...; ,MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:10668,Modifiability,inherit,inheritance,10668,"eTableEntry. More...;  ; class  REveTableHandle;  REveTableHandle. More...;  ; class  REveTableProxyBuilder;  ; class  REveTableViewInfo;  REveTableViewInfo. More...;  ; class  REveText;  ; class  REveTrack;  REveTrack Track with given vertex, momentum and optional referece-points (path-marks) along its path. More...;  ; class  REveTrackList;  REveTrackList A list of tracks supporting change of common attributes and selection based on track parameters. More...;  ; class  REveTrackListProjected;  REveTrackListProjected Specialization of REveTrackList for holding REveTrackProjected objects. More...;  ; class  REveTrackProjected;  REveTrackProjected Projected copy of a REveTrack. More...;  ; class  REveTrackPropagator;  REveTrackPropagator Calculates path of a particle taking into account special path-marks and imposed boundaries. More...;  ; class  REveTrans;  ; class  REveUtil;  REveUtil Standard utility functions for Reve. More...;  ; class  REveVector2T;  REveVector2T A two-vector template without TObject inheritance and virtual functions. More...;  ; class  REveVector4T;  REveVector4T A four-vector template without TObject inheritance and virtual functions. More...;  ; class  REveVectorT;  REveVectorT A three-vector template without TObject inheritance and virtual functions. More...;  ; class  REveViewContext;  ; class  REveViewer;  REveViewer Reve representation of TGLViewer. More...;  ; class  REveViewerList;  REveViewerList List of Viewers providing common operations on REveViewer collections. More...;  ; class  REveVSD;  ; class  REveXZProjection;  ; class  REveYZProjection;  ; class  REveZXProjection;  ; class  REveZYProjection;  ; class  RException;  Base class for all ROOT issued exceptions. More...;  ; class  RExtraTypeInfoDescriptor;  Field specific extra type information from the header / extenstion header. More...;  ; class  RField;  Classes with dictionaries that can be inspected by TClass. More...;  ; class  RField< bool >;  ; class  RField< char >;  ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:10789,Modifiability,inherit,inheritance,10789,"EveTableViewInfo;  REveTableViewInfo. More...;  ; class  REveText;  ; class  REveTrack;  REveTrack Track with given vertex, momentum and optional referece-points (path-marks) along its path. More...;  ; class  REveTrackList;  REveTrackList A list of tracks supporting change of common attributes and selection based on track parameters. More...;  ; class  REveTrackListProjected;  REveTrackListProjected Specialization of REveTrackList for holding REveTrackProjected objects. More...;  ; class  REveTrackProjected;  REveTrackProjected Projected copy of a REveTrack. More...;  ; class  REveTrackPropagator;  REveTrackPropagator Calculates path of a particle taking into account special path-marks and imposed boundaries. More...;  ; class  REveTrans;  ; class  REveUtil;  REveUtil Standard utility functions for Reve. More...;  ; class  REveVector2T;  REveVector2T A two-vector template without TObject inheritance and virtual functions. More...;  ; class  REveVector4T;  REveVector4T A four-vector template without TObject inheritance and virtual functions. More...;  ; class  REveVectorT;  REveVectorT A three-vector template without TObject inheritance and virtual functions. More...;  ; class  REveViewContext;  ; class  REveViewer;  REveViewer Reve representation of TGLViewer. More...;  ; class  REveViewerList;  REveViewerList List of Viewers providing common operations on REveViewer collections. More...;  ; class  REveVSD;  ; class  REveXZProjection;  ; class  REveYZProjection;  ; class  REveZXProjection;  ; class  REveZYProjection;  ; class  RException;  Base class for all ROOT issued exceptions. More...;  ; class  RExtraTypeInfoDescriptor;  Field specific extra type information from the header / extenstion header. More...;  ; class  RField;  Classes with dictionaries that can be inspected by TClass. More...;  ; class  RField< bool >;  ; class  RField< char >;  ; class  RField< double >;  ; class  RField< float >;  ; class  RField< ItemT[N]>;  ; class  RField< RNTupleCardinality< ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:10909,Modifiability,inherit,inheritance,10909,"x, momentum and optional referece-points (path-marks) along its path. More...;  ; class  REveTrackList;  REveTrackList A list of tracks supporting change of common attributes and selection based on track parameters. More...;  ; class  REveTrackListProjected;  REveTrackListProjected Specialization of REveTrackList for holding REveTrackProjected objects. More...;  ; class  REveTrackProjected;  REveTrackProjected Projected copy of a REveTrack. More...;  ; class  REveTrackPropagator;  REveTrackPropagator Calculates path of a particle taking into account special path-marks and imposed boundaries. More...;  ; class  REveTrans;  ; class  REveUtil;  REveUtil Standard utility functions for Reve. More...;  ; class  REveVector2T;  REveVector2T A two-vector template without TObject inheritance and virtual functions. More...;  ; class  REveVector4T;  REveVector4T A four-vector template without TObject inheritance and virtual functions. More...;  ; class  REveVectorT;  REveVectorT A three-vector template without TObject inheritance and virtual functions. More...;  ; class  REveViewContext;  ; class  REveViewer;  REveViewer Reve representation of TGLViewer. More...;  ; class  REveViewerList;  REveViewerList List of Viewers providing common operations on REveViewer collections. More...;  ; class  REveVSD;  ; class  REveXZProjection;  ; class  REveYZProjection;  ; class  REveZXProjection;  ; class  REveZYProjection;  ; class  RException;  Base class for all ROOT issued exceptions. More...;  ; class  RExtraTypeInfoDescriptor;  Field specific extra type information from the header / extenstion header. More...;  ; class  RField;  Classes with dictionaries that can be inspected by TClass. More...;  ; class  RField< bool >;  ; class  RField< char >;  ; class  RField< double >;  ; class  RField< float >;  ; class  RField< ItemT[N]>;  ; class  RField< RNTupleCardinality< SizeT > >;  ; class  RField< ROOT::VecOps::RVec< ItemT > >;  ; class  RField< std::array< ItemT, N > >;  ; class  RField",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:16552,Modifiability,config,configuration,16552," total sum of squared weights. More...;  ; class  RHistStatTotalSumOfWeights;  Keeps track of the histogram's total sum of weights. More...;  ; class  RHistStatUncertainty;  Histogram statistics to keep track of the Poisson uncertainty per bin. More...;  ; class  RHistView;  A view on a histogram, selecting a range on a subset of dimensions. More...;  ; struct  RHistViewOutOfRange;  ; class  RIndirectDisplayItem;  Extract (reference) only basic attributes from drawable, but not drawable itself. More...;  ; class  RIntegralField;  ; class  RIntegralField< std::int16_t >;  ; class  RIntegralField< std::int32_t >;  ; class  RIntegralField< std::int64_t >;  ; class  RIntegralField< std::int8_t >;  ; class  RIntegralField< std::uint16_t >;  ; class  RIntegralField< std::uint32_t >;  ; class  RIntegralField< std::uint64_t >;  ; class  RIntegralField< std::uint8_t >;  ; class  RInvalidField;  Used in RFieldBase::Check() to record field creation failures. More...;  ; class  RLogChannel;  A log configuration for a channel, e.g. More...;  ; class  RLogDiagCount;  Keep track of emitted errors and warnings. More...;  ; class  RLogEntry;  A diagnostic that can be emitted by the RLogManager. More...;  ; class  RLogHandler;  Abstract RLogHandler base class. More...;  ; struct  RLogLocation;  A diagnostic location, part of an RLogEntry. More...;  ; class  RLogManager;  A RLogHandler that multiplexes diagnostics to different client RLogHandlers and keeps track of the sum of RLogDiagCounts for all channels. More...;  ; class  RLogScopedDiagCount;  Object to count the number of warnings and errors emitted by a section of code, after construction of this type. More...;  ; class  RLogScopedVerbosity;  Change the verbosity level (global or specific to the RLogChannel passed to the constructor) for the lifetime of this object. More...;  ; class  RMapField;  Template specializations for C++ std::[unordered_][multi]map. More...;  ; class  RMenuItems;  List of items for object context menu. M",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:43850,Modifiability,config,configuration,43850,"g . EnumeratorkTable ; kCSV . Definition at line 42 of file RNTupleInspector.hxx. ◆ ENTupleStructure. enum ROOT::Experimental::ENTupleStructure : std::uint16_t. The fields in the ntuple model tree can carry different structural information about the type system. ; Leaf fields contain just data, collection fields resolve to offset columns, record fields have no materialization on the primitive column layer. . EnumeratorkInvalid ; kLeaf ; kCollection ; kRecord ; kVariant ; kStreamer ; kUnknown . Definition at line 112 of file RNTupleUtil.hxx. Function Documentation. ◆ Add(). template<int DIMENSIONS, class PRECISION , template< int D_, class P_ > class... STAT_TO, template< int D_, class P_ > class... STAT_FROM> . void ROOT::Experimental::Add ; (; RHist< DIMENSIONS, PRECISION, STAT_TO... > & ; to, . const RHist< DIMENSIONS, PRECISION, STAT_FROM... > & ; from . ). Add two histograms. ; This operation may currently only be performed if the two histograms have the same axis configuration, use the same precision, and if from records at least the same statistics as to (recording more stats is fine).; Adding histograms with incompatible axis binning will be reported at runtime with an std::runtime_error. Insufficient statistics in the source histogram will be detected at compile-time and result in a compiler error.; In the future, we may either adopt a more relaxed definition of histogram addition or provide a mechanism to convert from one histogram type to another. We currently favor the latter path. ; Definition at line 342 of file RHist.hxx. ◆ CanMap(). ROOT::Experimental::EAxisCompatibility ROOT::Experimental::CanMap ; (; const RAxisEquidistant & ; target, . const RAxisEquidistant & ; source . ). noexcept . Whether (and how) the source axis can be merged into the target axis. ; Definition at line 126 of file RAxis.cxx. ◆ FitPanelLog(). ROOT::Experimental::RLogChannel & ROOT::Experimental::FitPanelLog ; (; ). Log channel for FitPanel diagnostics. ; Definition at line 22 o",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:14065,Performance,perform,performed,14065,"can be enabled via: ;  ; class  RField< T, typename std::enable_if< std::is_enum_v< T > >::type >;  ; class  RField< T, typename std::enable_if< std::is_integral_v< T > >::type >;  ; class  RField< TObject >;  TObject requires special handling of the fBits and fUniqueID members. More...;  ; class  RField< void >;  Template specializations for concrete C++ fundamental types. More...;  ; class  RFieldBase;  A field translates read and write calls from/to underlying columns to/from tree values. More...;  ; class  RFieldDescriptor;  Meta-data stored for every field of an ntuple. More...;  ; class  RFieldZero;  The container field for an ntuple model, which itself has no physical representation. More...;  ; class  RFile;  A ROOT file. More...;  ; class  RFilePtr;  Points to an object that stores or reads objects in ROOT's binary format. More...;  ; class  RFitPanel;  ; struct  RFitPanelModel;  Data structure for the fit panel. More...;  ; class  RFitResult;  ; class  RFrame;  Holds an area where drawing on user coordinate-system can be performed. More...;  ; class  RFunction;  ; class  RHist;  Histogram class for histograms with DIMENSIONS dimensions, where each bin count is stored by a value of type PRECISION. More...;  ; class  RHist1Drawable;  ; class  RHist1StatBox;  ; class  RHist2Drawable;  ; class  RHist2StatBox;  ; class  RHist3Drawable;  ; class  RHist3StatBox;  ; class  RHist< DIMENSIONS, PRECISION >;  RHist with no STAT parameter uses RHistStatContent by default. More...;  ; class  RHistBufferedFill;  Buffers calls to Fill(). More...;  ; class  RHistConcurrentFiller;  Buffers a thread's Fill calls and submits them to the RHistConcurrentFillManager. More...;  ; class  RHistConcurrentFillManager;  Manages the synchronization of calls to FillN(). More...;  ; class  RHistDataMomentUncert;  For now do as RH1: calculate first (xw) and second (x^2w) moment. More...;  ; class  RHistDisplayItem;  ; class  RHistDrawable;  ; class  RHistDrawableBase;  ; class  RHistStatB",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:43799,Performance,perform,performed,43799,"g . EnumeratorkTable ; kCSV . Definition at line 42 of file RNTupleInspector.hxx. ◆ ENTupleStructure. enum ROOT::Experimental::ENTupleStructure : std::uint16_t. The fields in the ntuple model tree can carry different structural information about the type system. ; Leaf fields contain just data, collection fields resolve to offset columns, record fields have no materialization on the primitive column layer. . EnumeratorkInvalid ; kLeaf ; kCollection ; kRecord ; kVariant ; kStreamer ; kUnknown . Definition at line 112 of file RNTupleUtil.hxx. Function Documentation. ◆ Add(). template<int DIMENSIONS, class PRECISION , template< int D_, class P_ > class... STAT_TO, template< int D_, class P_ > class... STAT_FROM> . void ROOT::Experimental::Add ; (; RHist< DIMENSIONS, PRECISION, STAT_TO... > & ; to, . const RHist< DIMENSIONS, PRECISION, STAT_FROM... > & ; from . ). Add two histograms. ; This operation may currently only be performed if the two histograms have the same axis configuration, use the same precision, and if from records at least the same statistics as to (recording more stats is fine).; Adding histograms with incompatible axis binning will be reported at runtime with an std::runtime_error. Insufficient statistics in the source histogram will be detected at compile-time and result in a compiler error.; In the future, we may either adopt a more relaxed definition of histogram addition or provide a mechanism to convert from one histogram type to another. We currently favor the latter path. ; Definition at line 342 of file RHist.hxx. ◆ CanMap(). ROOT::Experimental::EAxisCompatibility ROOT::Experimental::CanMap ; (; const RAxisEquidistant & ; target, . const RAxisEquidistant & ; source . ). noexcept . Whether (and how) the source axis can be merged into the target axis. ; Definition at line 126 of file RAxis.cxx. ◆ FitPanelLog(). ROOT::Experimental::RLogChannel & ROOT::Experimental::FitPanelLog ; (; ). Log channel for FitPanel diagnostics. ; Definition at line 22 o",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:3859,Safety,avoid,avoid,3859,"el assigned to each bin and a bin width of 1. More...;  ; class  RBitsetField;  Template specializations for C++ std::bitset. More...;  ; class  RCanvas;  A window's topmost RPad. More...;  ; class  RCanvasDisplayItem;  class RCanvasDisplayItem More...;  ; class  RCanvasPainter;  Implementation of painter for ROOT::Experimental::RCanvas, using RWebWindow. More...;  ; class  RCardinalityField;  An artificial field that transforms an RNTuple column that contains the offset of collections into collection sizes. More...;  ; class  RChangeAttrRequest;  ; class  RClassField;  The field for a class with dictionary. More...;  ; class  RClusterDescriptor;  Meta-data for a set of ntuple clusters. More...;  ; class  RClusterGroupDescriptor;  Clusters are bundled in cluster groups. More...;  ; class  RClusterIndex;  Addresses a column element or field item relative to a particular cluster, instead of a global NTupleSize_t index. More...;  ; struct  RClusterSize;  Wrap the integer in a struct in order to avoid template specialization clash with std::uint64_t. More...;  ; class  RColor;  The color class. More...;  ; class  RColumnDescriptor;  Meta-data stored for every column of an ntuple. More...;  ; class  RColumnSwitch;  Holds the index and the tag of a kSwitch column. More...;  ; class  RDirectory;  Key/value store of objects. More...;  ; class  RDirectoryTypeMismatch;  Objects of this class are thrown to signal that the value known under the given name . More...;  ; class  RDirectoryUnknownKey;  Objects of this class are thrown to signal that no key with that name exists. More...;  ; class  RDisplayHistStat;  Object send to client for display of RHistStat, required to avoid sending histogram to the client. More...;  ; class  RDisplayItem;  Base class for painting data for JS. More...;  ; class  RDrawable;  Base class for drawable entities: objects that can be painted on a RPad. More...;  ; class  RDrawableDisplayItem;  Generic display item for RDrawable, just reference drawa",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:4540,Safety,avoid,avoid,4540,"data for a set of ntuple clusters. More...;  ; class  RClusterGroupDescriptor;  Clusters are bundled in cluster groups. More...;  ; class  RClusterIndex;  Addresses a column element or field item relative to a particular cluster, instead of a global NTupleSize_t index. More...;  ; struct  RClusterSize;  Wrap the integer in a struct in order to avoid template specialization clash with std::uint64_t. More...;  ; class  RColor;  The color class. More...;  ; class  RColumnDescriptor;  Meta-data stored for every column of an ntuple. More...;  ; class  RColumnSwitch;  Holds the index and the tag of a kSwitch column. More...;  ; class  RDirectory;  Key/value store of objects. More...;  ; class  RDirectoryTypeMismatch;  Objects of this class are thrown to signal that the value known under the given name . More...;  ; class  RDirectoryUnknownKey;  Objects of this class are thrown to signal that no key with that name exists. More...;  ; class  RDisplayHistStat;  Object send to client for display of RHistStat, required to avoid sending histogram to the client. More...;  ; class  RDisplayItem;  Base class for painting data for JS. More...;  ; class  RDrawable;  Base class for drawable entities: objects that can be painted on a RPad. More...;  ; class  RDrawableDisplayItem;  Generic display item for RDrawable, just reference drawable itself. More...;  ; class  RDrawableExecRequest;  Request execution of method of referenced drawable, no reply. More...;  ; class  RDrawableMenuRequest;  Request menu items for the drawable object. More...;  ; class  RDrawableReply;  Base class for replies on RDrawableRequest. More...;  ; class  RDrawableRequest;  Base class for requests which can be submitted from the clients. More...;  ; class  REntry;  The REntry is a collection of values in an ntuple corresponding to a complete row in the data set. More...;  ; class  REnumField;  The field for an unscoped or scoped enum with dictionary. More...;  ; class  RError;  Captures diagnostics related to ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:6716,Safety,safe,safe,6716,t;  ; class  REveCalo2D;  ; class  REveCalo3D;  ; class  REveCaloData;  ; class  REveCaloDataHist;  ; class  REveCaloDataSelector;  ; class  REveCaloDataSliceSelector;  ; class  REveCaloDataVec;  ; class  REveCaloLego;  ; class  REveCaloViz;  ; class  REveChunkManager;  ; class  REveChunkVector;  ; class  REveClient;  ; class  REveCluster;  REveCluster Reconstructed cluster (also used in VSD). More...;  ; class  REveCollectionCompound;  ; class  REveCompound;  ; class  REveCompoundProjected;  ; class  REveDataCollection;  ; class  REveDataColumn;  ; class  REveDataItem;  ; class  REveDataItemList;  ; class  REveDataProxyBuilderBase;  ; class  REveDataSimpleProxyBuilder;  ; class  REveDataSimpleProxyBuilderTemplate;  ; class  REveDataTable;  ; class  REveDigitSet;  ; class  REveElement;  ; class  REveEllipsoid;  ; class  REveEllipsoidProjected;  ; class  REveException;  REveException Exception-type thrown by Eve classes. More...;  ; class  REveFrameBox;  ; class  REveGeoManagerHolder;  REveGeoManagerHolder Exception-safe global variable holders. More...;  ; class  REveGeoPolyShape;  ; class  REveGeoShape;  ; class  REveGeoShapeExtract;  ; class  REveGeoShapeProjected;  ; class  REveGeoTopNodeData;  ; class  REveGeoTopNodeViz;  ; class  REveHit;  REveHit Monte Carlo hit (also used in VSD). More...;  ; class  REveJetCone;  ; class  REveJetConeProjected;  ; class  REveLine;  REveLine An arbitrary polyline with fixed line and marker attributes. More...;  ; class  REveLineProjected;  ; class  REveMagField;  REveMagField Abstract interface to magnetic field. More...;  ; class  REveMagFieldConst;  REveMagFieldConst Interface to constant magnetic field. More...;  ; class  REveMagFieldDuo;  REveMagFieldDuo Interface to magnetic field with two different values depending on radius. More...;  ; class  REveManager;  ; class  REveMCRecCrossRef;  REveMCRecCrossRef Cross-reference of sim/rec data per particle (also used in VSD). More...;  ; class  REveMCTrack;  REveMCTrack. More...; ,MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:44138,Safety,detect,detected,44138,"fields contain just data, collection fields resolve to offset columns, record fields have no materialization on the primitive column layer. . EnumeratorkInvalid ; kLeaf ; kCollection ; kRecord ; kVariant ; kStreamer ; kUnknown . Definition at line 112 of file RNTupleUtil.hxx. Function Documentation. ◆ Add(). template<int DIMENSIONS, class PRECISION , template< int D_, class P_ > class... STAT_TO, template< int D_, class P_ > class... STAT_FROM> . void ROOT::Experimental::Add ; (; RHist< DIMENSIONS, PRECISION, STAT_TO... > & ; to, . const RHist< DIMENSIONS, PRECISION, STAT_FROM... > & ; from . ). Add two histograms. ; This operation may currently only be performed if the two histograms have the same axis configuration, use the same precision, and if from records at least the same statistics as to (recording more stats is fine).; Adding histograms with incompatible axis binning will be reported at runtime with an std::runtime_error. Insufficient statistics in the source histogram will be detected at compile-time and result in a compiler error.; In the future, we may either adopt a more relaxed definition of histogram addition or provide a mechanism to convert from one histogram type to another. We currently favor the latter path. ; Definition at line 342 of file RHist.hxx. ◆ CanMap(). ROOT::Experimental::EAxisCompatibility ROOT::Experimental::CanMap ; (; const RAxisEquidistant & ; target, . const RAxisEquidistant & ; source . ). noexcept . Whether (and how) the source axis can be merged into the target axis. ; Definition at line 126 of file RAxis.cxx. ◆ FitPanelLog(). ROOT::Experimental::RLogChannel & ROOT::Experimental::FitPanelLog ; (; ). Log channel for FitPanel diagnostics. ; Definition at line 22 of file RFitPanelModel.cxx. ◆ FitTo(). template<int DIMENSIONS, class PRECISION , template< int D_, class P_ > class... STAT> . RFitResult ROOT::Experimental::FitTo ; (; const RHist< DIMENSIONS, PRECISION, STAT... > & ; hist, . const RFunction< DIMENSIONS > & ; func, . st",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:2259,Security,access,access,2259," labels, title, min/max, log, reverse, ... More...;  ; class  RAttrAxisLabels;  Axis labels drawing attributes. More...;  ; class  RAttrAxisTicks;  Axis ticks attributes. More...;  ; class  RAttrAxisTitle;  Axis title and its drawing attributes. More...;  ; class  RAttrBase;  Base class for all attributes, used with RDrawable. More...;  ; class  RAttrBorder;  Drawing line attributes for different objects. More...;  ; class  RAttrFill;  Drawing fill attributes for different objects. More...;  ; class  RAttrFont;  A font attributes, used together with text attributes. More...;  ; class  RAttrLine;  Drawing line attributes for different objects. More...;  ; class  RAttrLineEnding;  Attributes for line ending. More...;  ; class  RAttrMap;  ; class  RAttrMargins;  A margins attributes. Only relative and pixel coordinates are allowed. More...;  ; class  RAttrMarker;  A marker attributes. More...;  ; class  RAttrText;  A text attributes. More...;  ; class  RAttrValue;  Template class to access single value from drawable or other attributes. More...;  ; class  RAxisBase;  Histogram axis base class. More...;  ; class  RAxisConfig;  Objects used to configure the different axis types. More...;  ; class  RAxisDrawable;  Axis drawing. More...;  ; class  RAxisEquidistant;  Axis with equidistant bin borders. More...;  ; class  RAxisGrow;  An axis that can extend its range, keeping the number of its bins unchanged. More...;  ; class  RAxisIrregular;  An axis with non-equidistant bins (also known as ""variable binning""). More...;  ; class  RAxisLabels;  A RAxisGrow that has a label assigned to each bin and a bin width of 1. More...;  ; class  RBitsetField;  Template specializations for C++ std::bitset. More...;  ; class  RCanvas;  A window's topmost RPad. More...;  ; class  RCanvasDisplayItem;  class RCanvasDisplayItem More...;  ; class  RCanvasPainter;  Implementation of painter for ROOT::Experimental::RCanvas, using RWebWindow. More...;  ; class  RCardinalityField;  An artificial fi",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:18062,Security,access,access,18062,"iagCounts for all channels. More...;  ; class  RLogScopedDiagCount;  Object to count the number of warnings and errors emitted by a section of code, after construction of this type. More...;  ; class  RLogScopedVerbosity;  Change the verbosity level (global or specific to the RLogChannel passed to the constructor) for the lifetime of this object. More...;  ; class  RMapField;  Template specializations for C++ std::[unordered_][multi]map. More...;  ; class  RMenuItems;  List of items for object context menu. More...;  ; class  RNTupleChainProcessor;  Processor specializiation for vertically concatenated RNTuples (chains). More...;  ; class  RNTupleClusterRange;  Used to loop over entries of collections in a single cluster. More...;  ; class  RNTupleCollectionView;  A view for a collection, that can itself generate new ntuple views for its nested fields. More...;  ; class  RNTupleDescriptor;  The on-storage meta-data of an ntuple. More...;  ; class  RNTupleDirectAccessView;  A view variant that provides direct access to the I/O buffers. More...;  ; class  RNTupleDS;  The RDataSource implementation for RNTuple. More...;  ; class  RNTupleFillContext;  A context for filling entries (data) into clusters of an RNTuple. More...;  ; class  RNTupleFillStatus;  A status object after filling an entry. More...;  ; class  RNTupleFormatter;  Contains helper functions for RNTupleReader::PrintInfo() and RPrintSchemaVisitor::VisitField() More...;  ; class  RNTupleGlobalRange;  Used to loop over indexes (entries or collections) between start and end. More...;  ; class  RNTupleImporter;  Converts a TTree into an RNTuple. More...;  ; class  RNTupleInspector;  Inspect on-disk and storage-related information of an RNTuple. More...;  ; struct  RNTupleLocator;  Generic information about the physical location of data. More...;  ; struct  RNTupleLocatorObject64;  RNTupleLocator payload that is common for object stores using 64bit location information. More...;  ; class  RNTupleModel;  The RNT",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:19789,Security,access,access,19789,Tuple. More...;  ; struct  RNTupleLocator;  Generic information about the physical location of data. More...;  ; struct  RNTupleLocatorObject64;  RNTupleLocator payload that is common for object stores using 64bit location information. More...;  ; class  RNTupleModel;  The RNTupleModel encapulates the schema of an ntuple. More...;  ; struct  RNTupleOpenSpec;  Used to specify the underlying RNTuples in RNTupleProcessor and RNTupleReader::OpenFriends() More...;  ; class  RNTupleParallelWriter;  A writer to fill an RNTuple from multiple contexts. More...;  ; class  RNTupleProcessor;  Interface for iterating over entries of RNTuples and vertically concatenated RNTuples (chains). More...;  ; class  RNTupleReader;  An RNTuple that is used to read data from storage. More...;  ; class  RNTupleReadOptions;  Common user-tunable settings for reading ntuples. More...;  ; class  RNTupleView;  An RNTupleView for a known type. More...;  ; class  RNTupleView< void >;  ; class  RNTupleViewBase;  An RNTupleView provides read-only access to a single field of the ntuple. More...;  ; class  RNTupleWriteOptions;  Common user-tunable settings for storing ntuples. More...;  ; class  RNTupleWriteOptionsDaos;  DAOS-specific user-tunable settings for storing ntuples. More...;  ; class  RNTupleWriter;  An RNTuple that gets filled with entries (data) and writes them to storage. More...;  ; class  RNullableField;  Template specializations for C++ std::optional and std::unique_ptr. More...;  ; class  ROnFrameDrawable;  Base class for drawable which can be drawn on frame or on pad. More...;  ; class  ROptionalField;  ; class  RPad;  Graphic container for RDrawable-s. More...;  ; class  RPadBase;  Base class for graphic containers for RDrawable-s. More...;  ; class  RPadBaseDisplayItem;  class RPadBaseDisplayItem More...;  ; class  RPadDisplayItem;  class RPadDisplayItem More...;  ; class  RPadExtent;  An extent / size (horizontal and vertical) in a RPad. More...;  ; class  RPadLength;  A length in,MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:1289,Testability,log,log,1289,"amespaces; namespace  Detail;  ; namespace  EveGlu;  ; namespace  Hist;  ; namespace  Internal;  ; namespace  XRooFit;  xRooFit is a high-level API for RooFit. ;  . Classes; struct  HasCollectionProxyMemberType;  Template specializations for classes with collection proxies. More...;  ; struct  HasCollectionProxyMemberType< T, typename std::enable_if< std::is_same< typename T::IsCollectionProxy, std::true_type >::value >::type >;  ; struct  IsCollectionProxy;  The point here is that we can only tell at run time if a class has an associated collection proxy. More...;  ; class  RArrayAsRVecField;  Additional classes related to sequence containers. More...;  ; class  RArrayField;  Template specializations for C++ std::array and C-style arrays. More...;  ; class  RAtomicField;  Template specializations for C++ std::atomic. More...;  ; class  RAttrAggregation;  Base class for attributes aggregations like lines or fill attributes. More...;  ; class  RAttrAxis;  All supported axes attributes for: line, ticks, labels, title, min/max, log, reverse, ... More...;  ; class  RAttrAxisLabels;  Axis labels drawing attributes. More...;  ; class  RAttrAxisTicks;  Axis ticks attributes. More...;  ; class  RAttrAxisTitle;  Axis title and its drawing attributes. More...;  ; class  RAttrBase;  Base class for all attributes, used with RDrawable. More...;  ; class  RAttrBorder;  Drawing line attributes for different objects. More...;  ; class  RAttrFill;  Drawing fill attributes for different objects. More...;  ; class  RAttrFont;  A font attributes, used together with text attributes. More...;  ; class  RAttrLine;  Drawing line attributes for different objects. More...;  ; class  RAttrLineEnding;  Attributes for line ending. More...;  ; class  RAttrMap;  ; class  RAttrMargins;  A margins attributes. Only relative and pixel coordinates are allowed. More...;  ; class  RAttrMarker;  A marker attributes. More...;  ; class  RAttrText;  A text attributes. More...;  ; class  RAttrValue;  Template",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:16548,Testability,log,log,16548," total sum of squared weights. More...;  ; class  RHistStatTotalSumOfWeights;  Keeps track of the histogram's total sum of weights. More...;  ; class  RHistStatUncertainty;  Histogram statistics to keep track of the Poisson uncertainty per bin. More...;  ; class  RHistView;  A view on a histogram, selecting a range on a subset of dimensions. More...;  ; struct  RHistViewOutOfRange;  ; class  RIndirectDisplayItem;  Extract (reference) only basic attributes from drawable, but not drawable itself. More...;  ; class  RIntegralField;  ; class  RIntegralField< std::int16_t >;  ; class  RIntegralField< std::int32_t >;  ; class  RIntegralField< std::int64_t >;  ; class  RIntegralField< std::int8_t >;  ; class  RIntegralField< std::uint16_t >;  ; class  RIntegralField< std::uint32_t >;  ; class  RIntegralField< std::uint64_t >;  ; class  RIntegralField< std::uint8_t >;  ; class  RInvalidField;  Used in RFieldBase::Check() to record field creation failures. More...;  ; class  RLogChannel;  A log configuration for a channel, e.g. More...;  ; class  RLogDiagCount;  Keep track of emitted errors and warnings. More...;  ; class  RLogEntry;  A diagnostic that can be emitted by the RLogManager. More...;  ; class  RLogHandler;  Abstract RLogHandler base class. More...;  ; struct  RLogLocation;  A diagnostic location, part of an RLogEntry. More...;  ; class  RLogManager;  A RLogHandler that multiplexes diagnostics to different client RLogHandlers and keeps track of the sum of RLogDiagCounts for all channels. More...;  ; class  RLogScopedDiagCount;  Object to count the number of warnings and errors emitted by a section of code, after construction of this type. More...;  ; class  RLogScopedVerbosity;  Change the verbosity level (global or specific to the RLogChannel passed to the constructor) for the lifetime of this object. More...;  ; class  RMapField;  Template specializations for C++ std::[unordered_][multi]map. More...;  ; class  RMenuItems;  List of items for object context menu. M",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html:16552,Availability,error,error,16552,"in edge. . kBinCenter Get the bin center. . kBinTo Get the bin high edge. . Definition at line 252 of file RHistImpl.hxx. ◆ EColumnCppType. enum class ROOT::Experimental::Internal::EColumnCppType. strong . EnumeratorkChar ; kBool ; kByte ; kUint8 ; kUint16 ; kUint32 ; kUint64 ; kInt8 ; kInt16 ; kInt32 ; kInt64 ; kFloat ; kDouble ; kClusterSize ; kColumnSwitch ; kMax . Definition at line 119 of file RColumnElementBase.hxx. ◆ EDaosLocatorFlags. enum ROOT::Experimental::Internal::EDaosLocatorFlags. EnumeratorkCagedPage . Definition at line 43 of file RPageStorageDaos.hxx. ◆ EFindStatus. enum class ROOT::Experimental::Internal::EFindStatus. strong . Status of FindBin(x) and FindAdjustedBin(x) . EnumeratorkCanGrow The coordinate could fit after growing the axis. . kValid The returned bin index is valid. . Definition at line 259 of file RHistImpl.hxx. ◆ ENTupleMergeErrBehavior. enum class ROOT::Experimental::Internal::ENTupleMergeErrBehavior. strong . EnumeratorkAbort The merger will abort merging as soon as an error is encountered. . kSkip Upon errors, the merger will skip the current source and continue. . Definition at line 45 of file RNTupleMerger.hxx. ◆ ENTupleMergingMode. enum class ROOT::Experimental::Internal::ENTupleMergingMode. strong . EnumeratorkFilter The merger will discard all columns that aren't present in the prototype model (i.e. ; the model of the first source) . kStrict The merger will refuse to merge any 2 RNTuples whose schema doesn't match exactly. . kUnion The merger will update the output model to include all columns from all sources. ; Entries corresponding to columns that are not present in a source will be set to the default value of the type. . Definition at line 34 of file RNTupleMerger.hxx. ◆ EPageStorageType. enum class ROOT::Experimental::Internal::EPageStorageType. strong . EnumeratorkSink ; kSource . Definition at line 56 of file RPageStorage.hxx. Function Documentation. ◆ CallCommitClusterOnField(). void ROOT::Experimental::Internal::Cal",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html:16587,Availability,error,errors,16587,"nition at line 252 of file RHistImpl.hxx. ◆ EColumnCppType. enum class ROOT::Experimental::Internal::EColumnCppType. strong . EnumeratorkChar ; kBool ; kByte ; kUint8 ; kUint16 ; kUint32 ; kUint64 ; kInt8 ; kInt16 ; kInt32 ; kInt64 ; kFloat ; kDouble ; kClusterSize ; kColumnSwitch ; kMax . Definition at line 119 of file RColumnElementBase.hxx. ◆ EDaosLocatorFlags. enum ROOT::Experimental::Internal::EDaosLocatorFlags. EnumeratorkCagedPage . Definition at line 43 of file RPageStorageDaos.hxx. ◆ EFindStatus. enum class ROOT::Experimental::Internal::EFindStatus. strong . Status of FindBin(x) and FindAdjustedBin(x) . EnumeratorkCanGrow The coordinate could fit after growing the axis. . kValid The returned bin index is valid. . Definition at line 259 of file RHistImpl.hxx. ◆ ENTupleMergeErrBehavior. enum class ROOT::Experimental::Internal::ENTupleMergeErrBehavior. strong . EnumeratorkAbort The merger will abort merging as soon as an error is encountered. . kSkip Upon errors, the merger will skip the current source and continue. . Definition at line 45 of file RNTupleMerger.hxx. ◆ ENTupleMergingMode. enum class ROOT::Experimental::Internal::ENTupleMergingMode. strong . EnumeratorkFilter The merger will discard all columns that aren't present in the prototype model (i.e. ; the model of the first source) . kStrict The merger will refuse to merge any 2 RNTuples whose schema doesn't match exactly. . kUnion The merger will update the output model to include all columns from all sources. ; Entries corresponding to columns that are not present in a source will be set to the default value of the type. . Definition at line 34 of file RNTupleMerger.hxx. ◆ EPageStorageType. enum class ROOT::Experimental::Internal::EPageStorageType. strong . EnumeratorkSink ; kSource . Definition at line 56 of file RPageStorage.hxx. Function Documentation. ◆ CallCommitClusterOnField(). void ROOT::Experimental::Internal::CallCommitClusterOnField ; (; RFieldBase & ; field). Definition at line 402 of file",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html:7840,Deployability,release,release,7840,"class  RNTupleIndex;  Builds an index on one or several fields of an RNTuple so it can be joined onto other RNTuples. More...;  ; struct  RNTupleMergeData;  ; struct  RNTupleMergeOptions;  ; class  RNTupleMerger;  Given a set of RPageSources merge them into an RPageSink, optionally changing their compression. More...;  ; class  RNTupleModelChangeset;  The incremental changes to a RNTupleModel More...;  ; class  RNTupleSerializer;  A helper class for serializing and deserialization of the RNTuple binary format. More...;  ; class  RNTupleWriteOptionsManip;  ; class  ROnDiskPage;  A page as being stored on disk, that is packed and compressed. More...;  ; class  ROnDiskPageMap;  A memory region that contains packed and compressed pages. More...;  ; class  ROnDiskPageMapHeap;  An ROnDiskPageMap that is used for an fMemory allocated as an array of unsigned char. More...;  ; class  RPage;  A page is a slice of a column that is mapped into memory. More...;  ; class  RPageAllocator;  Abstract interface to allocate and release pages. More...;  ; class  RPageAllocatorHeap;  Uses standard C++ memory allocation for the column data pages. More...;  ; class  RPageNullSink;  Dummy sink that discards all pages. More...;  ; class  RPagePersistentSink;  Base class for a sink with a physical storage backend. More...;  ; class  RPagePool;  A thread-safe cache of pages loaded from the page source. More...;  ; class  RPageRef;  Reference to a page stored in the page pool. More...;  ; class  RPageSink;  Abstract interface to write data into an ntuple. More...;  ; class  RPageSinkBuf;  Wrapper sink that coalesces cluster column page writes. More...;  ; class  RPageSinkDaos;  Storage provider that writes ntuple pages to into a DAOS container. More...;  ; class  RPageSinkFile;  Storage provider that write ntuple pages into a file. More...;  ; class  RPageSource;  Abstract interface to read data from an ntuple. More...;  ; class  RPageSourceDaos;  Storage provider that reads ntuple pages from ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html:9604,Deployability,update,updated,9604,"torage provider that writes ntuple pages to into a DAOS container. More...;  ; class  RPageSinkFile;  Storage provider that write ntuple pages into a file. More...;  ; class  RPageSource;  Abstract interface to read data from an ntuple. More...;  ; class  RPageSourceDaos;  Storage provider that reads ntuple pages from a DAOS container. More...;  ; class  RPageSourceFile;  Storage provider that reads ntuple pages from a file. More...;  ; class  RPageSourceFriends;  Virtual storage that combines several other sources horizontally. More...;  ; class  RPageStorage;  Common functionality of an ntuple storage for both reading and writing. More...;  ; class  RProjectedFields;  The projected fields of a RNTupleModel More...;  ; class  RRDFCardinalityField;  An artificial field that transforms an RNTuple column that contains the offset of collections into collection sizes. More...;  ; struct  RSealedPageMergeData;  ; struct  RTestFutureColumn;  ; struct  RTFileControlBlock;  If a TFile container is written by a C stream (simple file), on dataset commit, the file header and the TFile record need to be updated. More...;  ; struct  RVirtualBinsToLocalBins;  Recursively converts zero-based virtual bins where the underflow bin has index 0 and the overflow bin has index N+1 where N is the axis' number of regular bins, to the standard kUnderflowBin/kOverflowBin for under/overflow bin indexing convention. More...;  ; struct  RVirtualBinsToLocalBins<-1, NDIMS, BINS, AXES >;  ; class  RVirtualCanvasPainter;  Abstract interface for painting a canvas. More...;  ; class  RWritePageMemoryManager;  Helper to maintain a memory budget for the write pages of a set of columns. More...;  ; class  TBulkBranchRead;  Helper class for reading many branch entries at once to optimize throughput. More...;  ; class  TTreeReaderValueFastBase;  . Typedefs; using ntuple_index_t = std::uint32_t;  ; using RIOSharedVector_t = std::vector< RIOSharedBase * >;  . Enumerations; enum class  EColumnCppType { ;   kC",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html:17046,Deployability,update,update,17046,"at line 43 of file RPageStorageDaos.hxx. ◆ EFindStatus. enum class ROOT::Experimental::Internal::EFindStatus. strong . Status of FindBin(x) and FindAdjustedBin(x) . EnumeratorkCanGrow The coordinate could fit after growing the axis. . kValid The returned bin index is valid. . Definition at line 259 of file RHistImpl.hxx. ◆ ENTupleMergeErrBehavior. enum class ROOT::Experimental::Internal::ENTupleMergeErrBehavior. strong . EnumeratorkAbort The merger will abort merging as soon as an error is encountered. . kSkip Upon errors, the merger will skip the current source and continue. . Definition at line 45 of file RNTupleMerger.hxx. ◆ ENTupleMergingMode. enum class ROOT::Experimental::Internal::ENTupleMergingMode. strong . EnumeratorkFilter The merger will discard all columns that aren't present in the prototype model (i.e. ; the model of the first source) . kStrict The merger will refuse to merge any 2 RNTuples whose schema doesn't match exactly. . kUnion The merger will update the output model to include all columns from all sources. ; Entries corresponding to columns that are not present in a source will be set to the default value of the type. . Definition at line 34 of file RNTupleMerger.hxx. ◆ EPageStorageType. enum class ROOT::Experimental::Internal::EPageStorageType. strong . EnumeratorkSink ; kSource . Definition at line 56 of file RPageStorage.hxx. Function Documentation. ◆ CallCommitClusterOnField(). void ROOT::Experimental::Internal::CallCommitClusterOnField ; (; RFieldBase & ; field). Definition at line 402 of file RField.cxx. ◆ CallConnectPageSinkOnField(). void ROOT::Experimental::Internal::CallConnectPageSinkOnField ; (; RFieldBase & ; field, . Internal::RPageSink & ; sink, . NTupleSize_t ; firstEntry = 0 . ). Definition at line 406 of file RField.cxx. ◆ CallConnectPageSourceOnField(). void ROOT::Experimental::Internal::CallConnectPageSourceOnField ; (; RFieldBase & ; field, . Internal::RPageSource & ; source . ). Definition at line 411 of file RField.cxx. ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html:7644,Energy Efficiency,allocate,allocated,7644,"ise construction of an RNTupleDescriptor. More...;  ; class  RNTupleFileWriter;  Write RNTuple data blocks in a TFile or a bare file container. More...;  ; class  RNTupleImtTaskScheduler;  ; class  RNTupleIndex;  Builds an index on one or several fields of an RNTuple so it can be joined onto other RNTuples. More...;  ; struct  RNTupleMergeData;  ; struct  RNTupleMergeOptions;  ; class  RNTupleMerger;  Given a set of RPageSources merge them into an RPageSink, optionally changing their compression. More...;  ; class  RNTupleModelChangeset;  The incremental changes to a RNTupleModel More...;  ; class  RNTupleSerializer;  A helper class for serializing and deserialization of the RNTuple binary format. More...;  ; class  RNTupleWriteOptionsManip;  ; class  ROnDiskPage;  A page as being stored on disk, that is packed and compressed. More...;  ; class  ROnDiskPageMap;  A memory region that contains packed and compressed pages. More...;  ; class  ROnDiskPageMapHeap;  An ROnDiskPageMap that is used for an fMemory allocated as an array of unsigned char. More...;  ; class  RPage;  A page is a slice of a column that is mapped into memory. More...;  ; class  RPageAllocator;  Abstract interface to allocate and release pages. More...;  ; class  RPageAllocatorHeap;  Uses standard C++ memory allocation for the column data pages. More...;  ; class  RPageNullSink;  Dummy sink that discards all pages. More...;  ; class  RPagePersistentSink;  Base class for a sink with a physical storage backend. More...;  ; class  RPagePool;  A thread-safe cache of pages loaded from the page source. More...;  ; class  RPageRef;  Reference to a page stored in the page pool. More...;  ; class  RPageSink;  Abstract interface to write data into an ntuple. More...;  ; class  RPageSinkBuf;  Wrapper sink that coalesces cluster column page writes. More...;  ; class  RPageSinkDaos;  Storage provider that writes ntuple pages to into a DAOS container. More...;  ; class  RPageSinkFile;  Storage provider that write",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html:7827,Energy Efficiency,allocate,allocate,7827,"class  RNTupleIndex;  Builds an index on one or several fields of an RNTuple so it can be joined onto other RNTuples. More...;  ; struct  RNTupleMergeData;  ; struct  RNTupleMergeOptions;  ; class  RNTupleMerger;  Given a set of RPageSources merge them into an RPageSink, optionally changing their compression. More...;  ; class  RNTupleModelChangeset;  The incremental changes to a RNTupleModel More...;  ; class  RNTupleSerializer;  A helper class for serializing and deserialization of the RNTuple binary format. More...;  ; class  RNTupleWriteOptionsManip;  ; class  ROnDiskPage;  A page as being stored on disk, that is packed and compressed. More...;  ; class  ROnDiskPageMap;  A memory region that contains packed and compressed pages. More...;  ; class  ROnDiskPageMapHeap;  An ROnDiskPageMap that is used for an fMemory allocated as an array of unsigned char. More...;  ; class  RPage;  A page is a slice of a column that is mapped into memory. More...;  ; class  RPageAllocator;  Abstract interface to allocate and release pages. More...;  ; class  RPageAllocatorHeap;  Uses standard C++ memory allocation for the column data pages. More...;  ; class  RPageNullSink;  Dummy sink that discards all pages. More...;  ; class  RPagePersistentSink;  Base class for a sink with a physical storage backend. More...;  ; class  RPagePool;  A thread-safe cache of pages loaded from the page source. More...;  ; class  RPageRef;  Reference to a page stored in the page pool. More...;  ; class  RPageSink;  Abstract interface to write data into an ntuple. More...;  ; class  RPageSinkBuf;  Wrapper sink that coalesces cluster column page writes. More...;  ; class  RPageSinkDaos;  Storage provider that writes ntuple pages to into a DAOS container. More...;  ; class  RPageSinkFile;  Storage provider that write ntuple pages into a file. More...;  ; class  RPageSource;  Abstract interface to read data from an ntuple. More...;  ; class  RPageSourceDaos;  Storage provider that reads ntuple pages from ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html:7814,Integrability,interface,interface,7814,"class  RNTupleIndex;  Builds an index on one or several fields of an RNTuple so it can be joined onto other RNTuples. More...;  ; struct  RNTupleMergeData;  ; struct  RNTupleMergeOptions;  ; class  RNTupleMerger;  Given a set of RPageSources merge them into an RPageSink, optionally changing their compression. More...;  ; class  RNTupleModelChangeset;  The incremental changes to a RNTupleModel More...;  ; class  RNTupleSerializer;  A helper class for serializing and deserialization of the RNTuple binary format. More...;  ; class  RNTupleWriteOptionsManip;  ; class  ROnDiskPage;  A page as being stored on disk, that is packed and compressed. More...;  ; class  ROnDiskPageMap;  A memory region that contains packed and compressed pages. More...;  ; class  ROnDiskPageMapHeap;  An ROnDiskPageMap that is used for an fMemory allocated as an array of unsigned char. More...;  ; class  RPage;  A page is a slice of a column that is mapped into memory. More...;  ; class  RPageAllocator;  Abstract interface to allocate and release pages. More...;  ; class  RPageAllocatorHeap;  Uses standard C++ memory allocation for the column data pages. More...;  ; class  RPageNullSink;  Dummy sink that discards all pages. More...;  ; class  RPagePersistentSink;  Base class for a sink with a physical storage backend. More...;  ; class  RPagePool;  A thread-safe cache of pages loaded from the page source. More...;  ; class  RPageRef;  Reference to a page stored in the page pool. More...;  ; class  RPageSink;  Abstract interface to write data into an ntuple. More...;  ; class  RPageSinkBuf;  Wrapper sink that coalesces cluster column page writes. More...;  ; class  RPageSinkDaos;  Storage provider that writes ntuple pages to into a DAOS container. More...;  ; class  RPageSinkFile;  Storage provider that write ntuple pages into a file. More...;  ; class  RPageSource;  Abstract interface to read data from an ntuple. More...;  ; class  RPageSourceDaos;  Storage provider that reads ntuple pages from ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html:8329,Integrability,interface,interface,8329,"ore...;  ; class  RNTupleWriteOptionsManip;  ; class  ROnDiskPage;  A page as being stored on disk, that is packed and compressed. More...;  ; class  ROnDiskPageMap;  A memory region that contains packed and compressed pages. More...;  ; class  ROnDiskPageMapHeap;  An ROnDiskPageMap that is used for an fMemory allocated as an array of unsigned char. More...;  ; class  RPage;  A page is a slice of a column that is mapped into memory. More...;  ; class  RPageAllocator;  Abstract interface to allocate and release pages. More...;  ; class  RPageAllocatorHeap;  Uses standard C++ memory allocation for the column data pages. More...;  ; class  RPageNullSink;  Dummy sink that discards all pages. More...;  ; class  RPagePersistentSink;  Base class for a sink with a physical storage backend. More...;  ; class  RPagePool;  A thread-safe cache of pages loaded from the page source. More...;  ; class  RPageRef;  Reference to a page stored in the page pool. More...;  ; class  RPageSink;  Abstract interface to write data into an ntuple. More...;  ; class  RPageSinkBuf;  Wrapper sink that coalesces cluster column page writes. More...;  ; class  RPageSinkDaos;  Storage provider that writes ntuple pages to into a DAOS container. More...;  ; class  RPageSinkFile;  Storage provider that write ntuple pages into a file. More...;  ; class  RPageSource;  Abstract interface to read data from an ntuple. More...;  ; class  RPageSourceDaos;  Storage provider that reads ntuple pages from a DAOS container. More...;  ; class  RPageSourceFile;  Storage provider that reads ntuple pages from a file. More...;  ; class  RPageSourceFriends;  Virtual storage that combines several other sources horizontally. More...;  ; class  RPageStorage;  Common functionality of an ntuple storage for both reading and writing. More...;  ; class  RProjectedFields;  The projected fields of a RNTupleModel More...;  ; class  RRDFCardinalityField;  An artificial field that transforms an RNTuple column that contains the offse",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html:8693,Integrability,interface,interface,8693,"; class  RPage;  A page is a slice of a column that is mapped into memory. More...;  ; class  RPageAllocator;  Abstract interface to allocate and release pages. More...;  ; class  RPageAllocatorHeap;  Uses standard C++ memory allocation for the column data pages. More...;  ; class  RPageNullSink;  Dummy sink that discards all pages. More...;  ; class  RPagePersistentSink;  Base class for a sink with a physical storage backend. More...;  ; class  RPagePool;  A thread-safe cache of pages loaded from the page source. More...;  ; class  RPageRef;  Reference to a page stored in the page pool. More...;  ; class  RPageSink;  Abstract interface to write data into an ntuple. More...;  ; class  RPageSinkBuf;  Wrapper sink that coalesces cluster column page writes. More...;  ; class  RPageSinkDaos;  Storage provider that writes ntuple pages to into a DAOS container. More...;  ; class  RPageSinkFile;  Storage provider that write ntuple pages into a file. More...;  ; class  RPageSource;  Abstract interface to read data from an ntuple. More...;  ; class  RPageSourceDaos;  Storage provider that reads ntuple pages from a DAOS container. More...;  ; class  RPageSourceFile;  Storage provider that reads ntuple pages from a file. More...;  ; class  RPageSourceFriends;  Virtual storage that combines several other sources horizontally. More...;  ; class  RPageStorage;  Common functionality of an ntuple storage for both reading and writing. More...;  ; class  RProjectedFields;  The projected fields of a RNTupleModel More...;  ; class  RRDFCardinalityField;  An artificial field that transforms an RNTuple column that contains the offset of collections into collection sizes. More...;  ; struct  RSealedPageMergeData;  ; struct  RTestFutureColumn;  ; struct  RTFileControlBlock;  If a TFile container is written by a C stream (simple file), on dataset commit, the file header and the TFile record need to be updated. More...;  ; struct  RVirtualBinsToLocalBins;  Recursively converts zero-based virt",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html:10019,Integrability,interface,interface,10019,"at combines several other sources horizontally. More...;  ; class  RPageStorage;  Common functionality of an ntuple storage for both reading and writing. More...;  ; class  RProjectedFields;  The projected fields of a RNTupleModel More...;  ; class  RRDFCardinalityField;  An artificial field that transforms an RNTuple column that contains the offset of collections into collection sizes. More...;  ; struct  RSealedPageMergeData;  ; struct  RTestFutureColumn;  ; struct  RTFileControlBlock;  If a TFile container is written by a C stream (simple file), on dataset commit, the file header and the TFile record need to be updated. More...;  ; struct  RVirtualBinsToLocalBins;  Recursively converts zero-based virtual bins where the underflow bin has index 0 and the overflow bin has index N+1 where N is the axis' number of regular bins, to the standard kUnderflowBin/kOverflowBin for under/overflow bin indexing convention. More...;  ; struct  RVirtualBinsToLocalBins<-1, NDIMS, BINS, AXES >;  ; class  RVirtualCanvasPainter;  Abstract interface for painting a canvas. More...;  ; class  RWritePageMemoryManager;  Helper to maintain a memory budget for the write pages of a set of columns. More...;  ; class  TBulkBranchRead;  Helper class for reading many branch entries at once to optimize throughput. More...;  ; class  TTreeReaderValueFastBase;  . Typedefs; using ntuple_index_t = std::uint32_t;  ; using RIOSharedVector_t = std::vector< RIOSharedBase * >;  . Enumerations; enum class  EColumnCppType { ;   kChar; , kBool; , kByte; , kUint8; , ;   kUint16; , kUint32; , kUint64; , kInt8; , ;   kInt16; , kInt32; , kInt64; , kFloat; , ;   kDouble; , kClusterSize; , kColumnSwitch; , kMax. };  ; enum  EDaosLocatorFlags { kCagedPage = 0x01; };  ; enum class  ENTupleMergeErrBehavior { kAbort; , kSkip; };  ; enum class  ENTupleMergingMode { kFilter; , kStrict; , kUnion; };  ; enum class  EPageStorageType { kSink; , kSource; };  ; Histogram traits; Helper traits for histogram operations. . enum c",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html:8170,Performance,cache,cache,8170," incremental changes to a RNTupleModel More...;  ; class  RNTupleSerializer;  A helper class for serializing and deserialization of the RNTuple binary format. More...;  ; class  RNTupleWriteOptionsManip;  ; class  ROnDiskPage;  A page as being stored on disk, that is packed and compressed. More...;  ; class  ROnDiskPageMap;  A memory region that contains packed and compressed pages. More...;  ; class  ROnDiskPageMapHeap;  An ROnDiskPageMap that is used for an fMemory allocated as an array of unsigned char. More...;  ; class  RPage;  A page is a slice of a column that is mapped into memory. More...;  ; class  RPageAllocator;  Abstract interface to allocate and release pages. More...;  ; class  RPageAllocatorHeap;  Uses standard C++ memory allocation for the column data pages. More...;  ; class  RPageNullSink;  Dummy sink that discards all pages. More...;  ; class  RPagePersistentSink;  Base class for a sink with a physical storage backend. More...;  ; class  RPagePool;  A thread-safe cache of pages loaded from the page source. More...;  ; class  RPageRef;  Reference to a page stored in the page pool. More...;  ; class  RPageSink;  Abstract interface to write data into an ntuple. More...;  ; class  RPageSinkBuf;  Wrapper sink that coalesces cluster column page writes. More...;  ; class  RPageSinkDaos;  Storage provider that writes ntuple pages to into a DAOS container. More...;  ; class  RPageSinkFile;  Storage provider that write ntuple pages into a file. More...;  ; class  RPageSource;  Abstract interface to read data from an ntuple. More...;  ; class  RPageSourceDaos;  Storage provider that reads ntuple pages from a DAOS container. More...;  ; class  RPageSourceFile;  Storage provider that reads ntuple pages from a file. More...;  ; class  RPageSourceFriends;  Virtual storage that combines several other sources horizontally. More...;  ; class  RPageStorage;  Common functionality of an ntuple storage for both reading and writing. More...;  ; class  RProjectedFields; ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html:8185,Performance,load,loaded,8185," incremental changes to a RNTupleModel More...;  ; class  RNTupleSerializer;  A helper class for serializing and deserialization of the RNTuple binary format. More...;  ; class  RNTupleWriteOptionsManip;  ; class  ROnDiskPage;  A page as being stored on disk, that is packed and compressed. More...;  ; class  ROnDiskPageMap;  A memory region that contains packed and compressed pages. More...;  ; class  ROnDiskPageMapHeap;  An ROnDiskPageMap that is used for an fMemory allocated as an array of unsigned char. More...;  ; class  RPage;  A page is a slice of a column that is mapped into memory. More...;  ; class  RPageAllocator;  Abstract interface to allocate and release pages. More...;  ; class  RPageAllocatorHeap;  Uses standard C++ memory allocation for the column data pages. More...;  ; class  RPageNullSink;  Dummy sink that discards all pages. More...;  ; class  RPagePersistentSink;  Base class for a sink with a physical storage backend. More...;  ; class  RPagePool;  A thread-safe cache of pages loaded from the page source. More...;  ; class  RPageRef;  Reference to a page stored in the page pool. More...;  ; class  RPageSink;  Abstract interface to write data into an ntuple. More...;  ; class  RPageSinkBuf;  Wrapper sink that coalesces cluster column page writes. More...;  ; class  RPageSinkDaos;  Storage provider that writes ntuple pages to into a DAOS container. More...;  ; class  RPageSinkFile;  Storage provider that write ntuple pages into a file. More...;  ; class  RPageSource;  Abstract interface to read data from an ntuple. More...;  ; class  RPageSourceDaos;  Storage provider that reads ntuple pages from a DAOS container. More...;  ; class  RPageSourceFile;  Storage provider that reads ntuple pages from a file. More...;  ; class  RPageSourceFriends;  Virtual storage that combines several other sources horizontally. More...;  ; class  RPageStorage;  Common functionality of an ntuple storage for both reading and writing. More...;  ; class  RProjectedFields; ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html:10266,Performance,optimiz,optimize,10266,"RDFCardinalityField;  An artificial field that transforms an RNTuple column that contains the offset of collections into collection sizes. More...;  ; struct  RSealedPageMergeData;  ; struct  RTestFutureColumn;  ; struct  RTFileControlBlock;  If a TFile container is written by a C stream (simple file), on dataset commit, the file header and the TFile record need to be updated. More...;  ; struct  RVirtualBinsToLocalBins;  Recursively converts zero-based virtual bins where the underflow bin has index 0 and the overflow bin has index N+1 where N is the axis' number of regular bins, to the standard kUnderflowBin/kOverflowBin for under/overflow bin indexing convention. More...;  ; struct  RVirtualBinsToLocalBins<-1, NDIMS, BINS, AXES >;  ; class  RVirtualCanvasPainter;  Abstract interface for painting a canvas. More...;  ; class  RWritePageMemoryManager;  Helper to maintain a memory budget for the write pages of a set of columns. More...;  ; class  TBulkBranchRead;  Helper class for reading many branch entries at once to optimize throughput. More...;  ; class  TTreeReaderValueFastBase;  . Typedefs; using ntuple_index_t = std::uint32_t;  ; using RIOSharedVector_t = std::vector< RIOSharedBase * >;  . Enumerations; enum class  EColumnCppType { ;   kChar; , kBool; , kByte; , kUint8; , ;   kUint16; , kUint32; , kUint64; , kInt8; , ;   kInt16; , kInt32; , kInt64; , kFloat; , ;   kDouble; , kClusterSize; , kColumnSwitch; , kMax. };  ; enum  EDaosLocatorFlags { kCagedPage = 0x01; };  ; enum class  ENTupleMergeErrBehavior { kAbort; , kSkip; };  ; enum class  ENTupleMergingMode { kFilter; , kStrict; , kUnion; };  ; enum class  EPageStorageType { kSink; , kSource; };  ; Histogram traits; Helper traits for histogram operations. . enum class  EBinCoord { kBinFrom; , kBinCenter; , kBinTo; };  Specifies if the wanted result is the bin's lower edge, center or higher edge. More...;  ; enum class  EFindStatus { kCanGrow; , kValid; };  Status of FindBin(x) and FindAdjustedBin(x) More...; ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html:10275,Performance,throughput,throughput,10275,"RDFCardinalityField;  An artificial field that transforms an RNTuple column that contains the offset of collections into collection sizes. More...;  ; struct  RSealedPageMergeData;  ; struct  RTestFutureColumn;  ; struct  RTFileControlBlock;  If a TFile container is written by a C stream (simple file), on dataset commit, the file header and the TFile record need to be updated. More...;  ; struct  RVirtualBinsToLocalBins;  Recursively converts zero-based virtual bins where the underflow bin has index 0 and the overflow bin has index N+1 where N is the axis' number of regular bins, to the standard kUnderflowBin/kOverflowBin for under/overflow bin indexing convention. More...;  ; struct  RVirtualBinsToLocalBins<-1, NDIMS, BINS, AXES >;  ; class  RVirtualCanvasPainter;  Abstract interface for painting a canvas. More...;  ; class  RWritePageMemoryManager;  Helper to maintain a memory budget for the write pages of a set of columns. More...;  ; class  TBulkBranchRead;  Helper class for reading many branch entries at once to optimize throughput. More...;  ; class  TTreeReaderValueFastBase;  . Typedefs; using ntuple_index_t = std::uint32_t;  ; using RIOSharedVector_t = std::vector< RIOSharedBase * >;  . Enumerations; enum class  EColumnCppType { ;   kChar; , kBool; , kByte; , kUint8; , ;   kUint16; , kUint32; , kUint64; , kInt8; , ;   kInt16; , kInt32; , kInt64; , kFloat; , ;   kDouble; , kClusterSize; , kColumnSwitch; , kMax. };  ; enum  EDaosLocatorFlags { kCagedPage = 0x01; };  ; enum class  ENTupleMergeErrBehavior { kAbort; , kSkip; };  ; enum class  ENTupleMergingMode { kFilter; , kStrict; , kUnion; };  ; enum class  EPageStorageType { kSink; , kSource; };  ; Histogram traits; Helper traits for histogram operations. . enum class  EBinCoord { kBinFrom; , kBinCenter; , kBinTo; };  Specifies if the wanted result is the bin's lower edge, center or higher edge. More...;  ; enum class  EFindStatus { kCanGrow; , kValid; };  Status of FindBin(x) and FindAdjustedBin(x) More...; ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html:8165,Safety,safe,safe,8165," incremental changes to a RNTupleModel More...;  ; class  RNTupleSerializer;  A helper class for serializing and deserialization of the RNTuple binary format. More...;  ; class  RNTupleWriteOptionsManip;  ; class  ROnDiskPage;  A page as being stored on disk, that is packed and compressed. More...;  ; class  ROnDiskPageMap;  A memory region that contains packed and compressed pages. More...;  ; class  ROnDiskPageMapHeap;  An ROnDiskPageMap that is used for an fMemory allocated as an array of unsigned char. More...;  ; class  RPage;  A page is a slice of a column that is mapped into memory. More...;  ; class  RPageAllocator;  Abstract interface to allocate and release pages. More...;  ; class  RPageAllocatorHeap;  Uses standard C++ memory allocation for the column data pages. More...;  ; class  RPageNullSink;  Dummy sink that discards all pages. More...;  ; class  RPagePersistentSink;  Base class for a sink with a physical storage backend. More...;  ; class  RPagePool;  A thread-safe cache of pages loaded from the page source. More...;  ; class  RPageRef;  Reference to a page stored in the page pool. More...;  ; class  RPageSink;  Abstract interface to write data into an ntuple. More...;  ; class  RPageSinkBuf;  Wrapper sink that coalesces cluster column page writes. More...;  ; class  RPageSinkDaos;  Storage provider that writes ntuple pages to into a DAOS container. More...;  ; class  RPageSinkFile;  Storage provider that write ntuple pages into a file. More...;  ; class  RPageSource;  Abstract interface to read data from an ntuple. More...;  ; class  RPageSourceDaos;  Storage provider that reads ntuple pages from a DAOS container. More...;  ; class  RPageSourceFile;  Storage provider that reads ntuple pages from a file. More...;  ; class  RPageSourceFriends;  Virtual storage that combines several other sources horizontally. More...;  ; class  RPageStorage;  Common functionality of an ntuple storage for both reading and writing. More...;  ; class  RProjectedFields; ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html:16524,Safety,abort,abort,16524,"in edge. . kBinCenter Get the bin center. . kBinTo Get the bin high edge. . Definition at line 252 of file RHistImpl.hxx. ◆ EColumnCppType. enum class ROOT::Experimental::Internal::EColumnCppType. strong . EnumeratorkChar ; kBool ; kByte ; kUint8 ; kUint16 ; kUint32 ; kUint64 ; kInt8 ; kInt16 ; kInt32 ; kInt64 ; kFloat ; kDouble ; kClusterSize ; kColumnSwitch ; kMax . Definition at line 119 of file RColumnElementBase.hxx. ◆ EDaosLocatorFlags. enum ROOT::Experimental::Internal::EDaosLocatorFlags. EnumeratorkCagedPage . Definition at line 43 of file RPageStorageDaos.hxx. ◆ EFindStatus. enum class ROOT::Experimental::Internal::EFindStatus. strong . Status of FindBin(x) and FindAdjustedBin(x) . EnumeratorkCanGrow The coordinate could fit after growing the axis. . kValid The returned bin index is valid. . Definition at line 259 of file RHistImpl.hxx. ◆ ENTupleMergeErrBehavior. enum class ROOT::Experimental::Internal::ENTupleMergeErrBehavior. strong . EnumeratorkAbort The merger will abort merging as soon as an error is encountered. . kSkip Upon errors, the merger will skip the current source and continue. . Definition at line 45 of file RNTupleMerger.hxx. ◆ ENTupleMergingMode. enum class ROOT::Experimental::Internal::ENTupleMergingMode. strong . EnumeratorkFilter The merger will discard all columns that aren't present in the prototype model (i.e. ; the model of the first source) . kStrict The merger will refuse to merge any 2 RNTuples whose schema doesn't match exactly. . kUnion The merger will update the output model to include all columns from all sources. ; Entries corresponding to columns that are not present in a source will be set to the default value of the type. . Definition at line 34 of file RNTupleMerger.hxx. ◆ EPageStorageType. enum class ROOT::Experimental::Internal::EPageStorageType. strong . EnumeratorkSink ; kSource . Definition at line 56 of file RPageStorage.hxx. Function Documentation. ◆ CallCommitClusterOnField(). void ROOT::Experimental::Internal::Cal",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html:2878,Security,access,access,2878,"t  RComputeGlobalBin<-1, NDIMS, BINS, AXES >;  ; struct  RComputeGlobalBinRaw;  Recursively computes a zero-based global bin index, given... More...;  ; struct  RComputeGlobalBinRaw<-1, NDIMS, BINS, AXES, BINTYPE >;  ; struct  RComputeLocalBins;  Recursively computes the number of regular bins before the current dimension, as well as the number of under- and overflow bins left to account for, after the current dimension. More...;  ; struct  RComputeLocalBins< 0, NDIMS, AXES >;  ; struct  RComputeLocalBinsInitialisation;  Recursively compute some quantities needed for ComputeLocalBins, namely the total number of bins per hyperplane (overflow and regular) and the number of regular bins per hyperplane on the hyperplanes that have them. More...;  ; struct  RComputeLocalBinsInitialisation< 0, NDIMS, AXES >;  ; struct  RComputeLocalBinsRaw;  Recursively computes zero-based local bin indices, given... More...;  ; struct  RComputeLocalBinsRaw<-1, NDIMS, BINS, AXES, BINTYPE >;  ; class  RDaosContainer;  A RDaosContainer provides read/write access to objects in a given container. More...;  ; struct  RDaosEventQueue;  ; class  RDaosNTupleAnchor;  Entry point for an RNTuple in a DAOS container. More...;  ; class  RDaosObject;  Provides low-level access to DAOS objects in a container. More...;  ; class  RDaosPool;  A RDaosPool provides access to containers in a specific DAOS pool. More...;  ; class  RDirectoryEntry;  ; class  RExtraTypeInfoDescriptorBuilder;  A helper class for piece-wise construction of an RExtraTypeInfoDescriptor. More...;  ; class  RFieldDescriptorBuilder;  A helper class for piece-wise construction of an RFieldDescriptor. More...;  ; struct  RFieldRepresentationModifier;  ; class  RFileSharedPtrCtor;  ; class  RFileStorageInterface;  Base class for RFile storage backends. More...;  ; struct  RFillIterRange;  Recursively fills the ranges of all axes, excluding under- and overflow. More...;  ; struct  RFillIterRange<-1, AXES >;  ; struct  RFindLocalBins;  Find ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html:3085,Security,access,access,3085,"ursively computes the number of regular bins before the current dimension, as well as the number of under- and overflow bins left to account for, after the current dimension. More...;  ; struct  RComputeLocalBins< 0, NDIMS, AXES >;  ; struct  RComputeLocalBinsInitialisation;  Recursively compute some quantities needed for ComputeLocalBins, namely the total number of bins per hyperplane (overflow and regular) and the number of regular bins per hyperplane on the hyperplanes that have them. More...;  ; struct  RComputeLocalBinsInitialisation< 0, NDIMS, AXES >;  ; struct  RComputeLocalBinsRaw;  Recursively computes zero-based local bin indices, given... More...;  ; struct  RComputeLocalBinsRaw<-1, NDIMS, BINS, AXES, BINTYPE >;  ; class  RDaosContainer;  A RDaosContainer provides read/write access to objects in a given container. More...;  ; struct  RDaosEventQueue;  ; class  RDaosNTupleAnchor;  Entry point for an RNTuple in a DAOS container. More...;  ; class  RDaosObject;  Provides low-level access to DAOS objects in a container. More...;  ; class  RDaosPool;  A RDaosPool provides access to containers in a specific DAOS pool. More...;  ; class  RDirectoryEntry;  ; class  RExtraTypeInfoDescriptorBuilder;  A helper class for piece-wise construction of an RExtraTypeInfoDescriptor. More...;  ; class  RFieldDescriptorBuilder;  A helper class for piece-wise construction of an RFieldDescriptor. More...;  ; struct  RFieldRepresentationModifier;  ; class  RFileSharedPtrCtor;  ; class  RFileStorageInterface;  Base class for RFile storage backends. More...;  ; struct  RFillIterRange;  Recursively fills the ranges of all axes, excluding under- and overflow. More...;  ; struct  RFillIterRange<-1, AXES >;  ; struct  RFindLocalBins;  Find the per-axis local bin indices associated with a certain set of coordinates. More...;  ; struct  RFindLocalBins<-1, NDIMS, BINS, COORD, AXES >;  ; struct  RGetNBinsCount;  Recursively gets the total number of bins in whole hist, including under- and ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html:3176,Security,access,access,3176,"r of under- and overflow bins left to account for, after the current dimension. More...;  ; struct  RComputeLocalBins< 0, NDIMS, AXES >;  ; struct  RComputeLocalBinsInitialisation;  Recursively compute some quantities needed for ComputeLocalBins, namely the total number of bins per hyperplane (overflow and regular) and the number of regular bins per hyperplane on the hyperplanes that have them. More...;  ; struct  RComputeLocalBinsInitialisation< 0, NDIMS, AXES >;  ; struct  RComputeLocalBinsRaw;  Recursively computes zero-based local bin indices, given... More...;  ; struct  RComputeLocalBinsRaw<-1, NDIMS, BINS, AXES, BINTYPE >;  ; class  RDaosContainer;  A RDaosContainer provides read/write access to objects in a given container. More...;  ; struct  RDaosEventQueue;  ; class  RDaosNTupleAnchor;  Entry point for an RNTuple in a DAOS container. More...;  ; class  RDaosObject;  Provides low-level access to DAOS objects in a container. More...;  ; class  RDaosPool;  A RDaosPool provides access to containers in a specific DAOS pool. More...;  ; class  RDirectoryEntry;  ; class  RExtraTypeInfoDescriptorBuilder;  A helper class for piece-wise construction of an RExtraTypeInfoDescriptor. More...;  ; class  RFieldDescriptorBuilder;  A helper class for piece-wise construction of an RFieldDescriptor. More...;  ; struct  RFieldRepresentationModifier;  ; class  RFileSharedPtrCtor;  ; class  RFileStorageInterface;  Base class for RFile storage backends. More...;  ; struct  RFillIterRange;  Recursively fills the ranges of all axes, excluding under- and overflow. More...;  ; struct  RFillIterRange<-1, AXES >;  ; struct  RFindLocalBins;  Find the per-axis local bin indices associated with a certain set of coordinates. More...;  ; struct  RFindLocalBins<-1, NDIMS, BINS, COORD, AXES >;  ; struct  RGetNBinsCount;  Recursively gets the total number of bins in whole hist, including under- and overflow. More...;  ; struct  RGetNBinsCount< 0, AXES >;  ; struct  RGetNBinsNoOverCount;  Rec",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html:1259,Usability,simpl,simple,1259,"nce. Namespaces; namespace  BitPacking;  . Classes; struct  AxisConfigToType;  Converts a RAxisConfig of whatever kind to the corresponding RAxisBase-derived object. More...;  ; struct  AxisConfigToType< RAxisConfig::kEquidistant >;  ; struct  AxisConfigToType< RAxisConfig::kGrow >;  ; struct  AxisConfigToType< RAxisConfig::kIrregular >;  ; struct  AxisConfigToType< RAxisConfig::kLabels >;  ; class  RArraySizeField;  An artificial field that provides the size of a fixed-size array. More...;  ; class  RCluster;  An in-memory subset of the packed and compressed pages of a cluster. More...;  ; class  RClusterDescriptorBuilder;  A helper class for piece-wise construction of an RClusterDescriptor. More...;  ; class  RClusterGroupDescriptorBuilder;  A helper class for piece-wise construction of an RClusterGroupDescriptor. More...;  ; class  RClusterPool;  Managed a set of clusters containing compressed and packed pages. More...;  ; class  RColumn;  A column is a storage-backed array of a simple, fixed-size type, from which pages can be mapped into memory. More...;  ; class  RColumnDescriptorBuilder;  A helper class for piece-wise construction of an RColumnDescriptor. More...;  ; class  RColumnElementBase;  A column element encapsulates the translation between basic C++ types and their column representation. More...;  ; struct  RColumnInfo;  ; struct  RComputeGlobalBin;  Recursively gets the total number of regular bins before the current dimension, when computing a global bin that is in under- or overflow in at least one dimension. More...;  ; struct  RComputeGlobalBin<-1, NDIMS, BINS, AXES >;  ; struct  RComputeGlobalBinRaw;  Recursively computes a zero-based global bin index, given... More...;  ; struct  RComputeGlobalBinRaw<-1, NDIMS, BINS, AXES, BINTYPE >;  ; struct  RComputeLocalBins;  Recursively computes the number of regular bins before the current dimension, as well as the number of under- and overflow bins left to account for, after the current dimension. More..",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html:9523,Usability,simpl,simple,9523,"torage provider that writes ntuple pages to into a DAOS container. More...;  ; class  RPageSinkFile;  Storage provider that write ntuple pages into a file. More...;  ; class  RPageSource;  Abstract interface to read data from an ntuple. More...;  ; class  RPageSourceDaos;  Storage provider that reads ntuple pages from a DAOS container. More...;  ; class  RPageSourceFile;  Storage provider that reads ntuple pages from a file. More...;  ; class  RPageSourceFriends;  Virtual storage that combines several other sources horizontally. More...;  ; class  RPageStorage;  Common functionality of an ntuple storage for both reading and writing. More...;  ; class  RProjectedFields;  The projected fields of a RNTupleModel More...;  ; class  RRDFCardinalityField;  An artificial field that transforms an RNTuple column that contains the offset of collections into collection sizes. More...;  ; struct  RSealedPageMergeData;  ; struct  RTestFutureColumn;  ; struct  RTFileControlBlock;  If a TFile container is written by a C stream (simple file), on dataset commit, the file header and the TFile record need to be updated. More...;  ; struct  RVirtualBinsToLocalBins;  Recursively converts zero-based virtual bins where the underflow bin has index 0 and the overflow bin has index N+1 where N is the axis' number of regular bins, to the standard kUnderflowBin/kOverflowBin for under/overflow bin indexing convention. More...;  ; struct  RVirtualBinsToLocalBins<-1, NDIMS, BINS, AXES >;  ; class  RVirtualCanvasPainter;  Abstract interface for painting a canvas. More...;  ; class  RWritePageMemoryManager;  Helper to maintain a memory budget for the write pages of a set of columns. More...;  ; class  TBulkBranchRead;  Helper class for reading many branch entries at once to optimize throughput. More...;  ; class  TTreeReaderValueFastBase;  . Typedefs; using ntuple_index_t = std::uint32_t;  ; using RIOSharedVector_t = std::vector< RIOSharedBase * >;  . Enumerations; enum class  EColumnCppType { ;   kC",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Fit.html:871,Availability,error,error,871,". ROOT: ROOT::Fit Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables ; ROOT::Fit Namespace ReferenceMath » MathCore » Fitting and Parameter Estimation. Namespace for the fitting classes. ; More... Namespaces; namespace  FitUtil;  namespace defining utility free functions using in Fit for evaluating the various fit method functions (chi2, likelihood, etc..) given the data and the model function ;  ; namespace  HFitInterface;  . Classes; class  AreaComparer;  ; class  BasicFCN;  BasicFCN class: base class for the objective functions used in the fits It has a reference to the data and the model function used in the fit. More...;  ; class  BinData;  Class describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: More...;  ; class  Box;  ; class  BoxContainer;  ; class  Chi2FCN;  Chi2FCN class for binned fits using the least square methods. More...;  ; struct  DataOptions;  DataOptions : simple structure holding the options on how the data are filled. More...;  ; class  DataRange;  class describing the range in the coordinates it supports multiple range in a coordinate. More...;  ; class  FcnAdapter;  ; class  FitConfig;  Class describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class. More...;  ; class  FitData;  Base class for all the fit data types: Stores the coordinates and the DataOptions. More...;  ; class  FitResult;  class containing the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values. More...;  ; class  Fitter;  Fitter class, entry point for performing all type of",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit.html
https://root.cern/doc/master/namespaceROOT_1_1Fit.html:893,Availability,error,error,893,". ROOT: ROOT::Fit Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables ; ROOT::Fit Namespace ReferenceMath » MathCore » Fitting and Parameter Estimation. Namespace for the fitting classes. ; More... Namespaces; namespace  FitUtil;  namespace defining utility free functions using in Fit for evaluating the various fit method functions (chi2, likelihood, etc..) given the data and the model function ;  ; namespace  HFitInterface;  . Classes; class  AreaComparer;  ; class  BasicFCN;  BasicFCN class: base class for the objective functions used in the fits It has a reference to the data and the model function used in the fit. More...;  ; class  BinData;  Class describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: More...;  ; class  Box;  ; class  BoxContainer;  ; class  Chi2FCN;  Chi2FCN class for binned fits using the least square methods. More...;  ; struct  DataOptions;  DataOptions : simple structure holding the options on how the data are filled. More...;  ; class  DataRange;  class describing the range in the coordinates it supports multiple range in a coordinate. More...;  ; class  FcnAdapter;  ; class  FitConfig;  Class describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class. More...;  ; class  FitData;  Base class for all the fit data types: Stores the coordinates and the DataOptions. More...;  ; class  FitResult;  class containing the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values. More...;  ; class  Fitter;  Fitter class, entry point for performing all type of",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit.html
https://root.cern/doc/master/namespaceROOT_1_1Fit.html:1766,Availability,error,error,1766,"lass describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: More...;  ; class  Box;  ; class  BoxContainer;  ; class  Chi2FCN;  Chi2FCN class for binned fits using the least square methods. More...;  ; struct  DataOptions;  DataOptions : simple structure holding the options on how the data are filled. More...;  ; class  DataRange;  class describing the range in the coordinates it supports multiple range in a coordinate. More...;  ; class  FcnAdapter;  ; class  FitConfig;  Class describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class. More...;  ; class  FitData;  Base class for all the fit data types: Stores the coordinates and the DataOptions. More...;  ; class  FitResult;  class containing the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values. More...;  ; class  Fitter;  Fitter class, entry point for performing all type of fits. More...;  ; class  LogLikelihoodFCN;  LogLikelihoodFCN class for likelihood fits. More...;  ; struct  ObjFuncTrait;  ; struct  ObjFuncTrait< ROOT::Math::FitMethodFunction >;  ; struct  ObjFuncTrait< ROOT::Math::FitMethodGradFunction >;  ; class  ParameterSettings;  Class, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters. More...;  ; class  PoissonLikelihoodFCN;  class evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish gradient and non-gradient case More...;  ; class  ProxyListBox;  ; class  SparseData;  SparseData class representing the data of a THNSparse histogram The data needs to be converted to a BinData class before",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit.html
https://root.cern/doc/master/namespaceROOT_1_1Fit.html:4359,Availability,error,error,4359," LogLikelihoodFCN< ROOT::Math::IMultiGenFunction, ROOT::Math::IParamMultiFunction > LogLikelihoodFunction;  ; typedef LogLikelihoodFCN< ROOT::Math::IMultiGradFunction, ROOT::Math::IParamMultiFunction > LogLikelihoodGradFunction;  ; typedef PoissonLikelihoodFCN< ROOT::Math::IMultiGenFunction, ROOT::Math::IParamMultiFunction > PoissonLLFunction;  ; typedef PoissonLikelihoodFCN< ROOT::Math::IMultiGradFunction, ROOT::Math::IParamMultiFunction > PoissonLLGradFunction;  . Enumerations; enum class  EChisquareType { kNeyman = 0; , kPLikeRatio; , kPearson; };  ; enum class  EFitObjectType { kHistogram; , kGraph; };  . Functions; double Chisquare (const TGraph &h1, TF1 &f1, bool useRange);  compute the chi2 value for a graph given a function (see TGraph::Chisquare) ;  ; double Chisquare (const TH1 &h1, TF1 &f1, bool useRange, EChisquareType type);  compute the chi2 value for an histogram given a function (see TH1::Chisquare for the documentation) ;  ; void DivideBox (const vector< double > &min, const vector< double > &max, const vector< double > &bmin, const vector< double > &bmax, const unsigned int size, const unsigned int n, list< Box > &l, const double val, const double error);  ; void DoFillData (BinData &dv, const TGraph *gr, BinData::ErrorType type, TF1 *func);  ; void FillData (BinData &dv, const TGraph *gr, TF1 *func=nullptr);  fill the data vector from a TGraph. ;  ; void FillData (BinData &dv, const TGraph2D *gr, TF1 *func=nullptr);  fill the data vector from a TGraph2D. ;  ; void FillData (BinData &dv, const TH1 *hist, TF1 *func=nullptr);  fill the data vector from a TH1. ;  ; void FillData (BinData &dv, const THnBase *hist, TF1 *func=nullptr);  fill the data vector from a THnBase. ;  ; void FillData (BinData &dv, const TMultiGraph *gr, TF1 *func=nullptr);  fill the data vector from a TMultiGraph. ;  ; void FillData (SparseData &dv, const TH1 *hist, TF1 *func=nullptr);  fill the data vector from a TH1 with sparse data. ;  ; void FillData (SparseData &dv, const THn",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit.html
https://root.cern/doc/master/namespaceROOT_1_1Fit.html:10506,Availability,error,error,10506,"file HFitInterface.h. ◆ EFitObjectType. enum class ROOT::Fit::EFitObjectType. strong . EnumeratorkHistogram ; kGraph . Definition at line 48 of file HFitInterface.h. Function Documentation. ◆ Chisquare() [1/2]. double ROOT::Fit::Chisquare ; (; const TGraph & ; h1, . TF1 & ; f1, . bool ; useRange . ). compute the chi2 value for a graph given a function (see TGraph::Chisquare) ; Definition at line 1031 of file HFitImpl.cxx. ◆ Chisquare() [2/2]. double ROOT::Fit::Chisquare ; (; const TH1 & ; h1, . TF1 & ; f1, . bool ; useRange, . EChisquareType ; type . ). compute the chi2 value for an histogram given a function (see TH1::Chisquare for the documentation) ; Definition at line 1027 of file HFitImpl.cxx. ◆ DivideBox(). void ROOT::Fit::DivideBox ; (; const vector< double > & ; min, . const vector< double > & ; max, . const vector< double > & ; bmin, . const vector< double > & ; bmax, . const unsigned int ; size, . const unsigned int ; n, . list< Box > & ; l, . const double ; val, . const double ; error . ). Definition at line 151 of file SparseData.cxx. ◆ DoFillData(). void ROOT::Fit::DoFillData ; (; BinData & ; dv, . const TGraph * ; gr, . BinData::ErrorType ; type, . TF1 * ; func . ). Definition at line 576 of file HFitInterface.cxx. ◆ FillData() [1/7]. void ROOT::Fit::FillData ; (; BinData & ; dv, . const TGraph * ; gr, . TF1 * ; func = nullptr . ). fill the data vector from a TGraph. ; Pass also the TF1 function which is needed in case to exclude points rejected by the function ; Definition at line 792 of file HFitInterface.cxx. ◆ FillData() [2/7]. void ROOT::Fit::FillData ; (; BinData & ; dv, . const TGraph2D * ; gr, . TF1 * ; func = nullptr . ). fill the data vector from a TGraph2D. ; Pass also the TF1 function which is needed in case of integral option and to reject points rejected by the function ; Definition at line 878 of file HFitInterface.cxx. ◆ FillData() [3/7]. void ROOT::Fit::FillData ; (; BinData & ; dv, . const TH1 * ; hist, . TF1 * ; func = nullptr . ). fi",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit.html
https://root.cern/doc/master/namespaceROOT_1_1Fit.html:1423,Deployability,configurat,configuration,1423,"it method functions (chi2, likelihood, etc..) given the data and the model function ;  ; namespace  HFitInterface;  . Classes; class  AreaComparer;  ; class  BasicFCN;  BasicFCN class: base class for the objective functions used in the fits It has a reference to the data and the model function used in the fit. More...;  ; class  BinData;  Class describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: More...;  ; class  Box;  ; class  BoxContainer;  ; class  Chi2FCN;  Chi2FCN class for binned fits using the least square methods. More...;  ; struct  DataOptions;  DataOptions : simple structure holding the options on how the data are filled. More...;  ; class  DataRange;  class describing the range in the coordinates it supports multiple range in a coordinate. More...;  ; class  FcnAdapter;  ; class  FitConfig;  Class describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class. More...;  ; class  FitData;  Base class for all the fit data types: Stores the coordinates and the DataOptions. More...;  ; class  FitResult;  class containing the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values. More...;  ; class  Fitter;  Fitter class, entry point for performing all type of fits. More...;  ; class  LogLikelihoodFCN;  LogLikelihoodFCN class for likelihood fits. More...;  ; struct  ObjFuncTrait;  ; struct  ObjFuncTrait< ROOT::Math::FitMethodFunction >;  ; struct  ObjFuncTrait< ROOT::Math::FitMethodGradFunction >;  ; class  ParameterSettings;  Class, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters. More...;",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit.html
https://root.cern/doc/master/namespaceROOT_1_1Fit.html:1423,Modifiability,config,configuration,1423,"it method functions (chi2, likelihood, etc..) given the data and the model function ;  ; namespace  HFitInterface;  . Classes; class  AreaComparer;  ; class  BasicFCN;  BasicFCN class: base class for the objective functions used in the fits It has a reference to the data and the model function used in the fit. More...;  ; class  BinData;  Class describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: More...;  ; class  Box;  ; class  BoxContainer;  ; class  Chi2FCN;  Chi2FCN class for binned fits using the least square methods. More...;  ; struct  DataOptions;  DataOptions : simple structure holding the options on how the data are filled. More...;  ; class  DataRange;  class describing the range in the coordinates it supports multiple range in a coordinate. More...;  ; class  FcnAdapter;  ; class  FitConfig;  Class describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class. More...;  ; class  FitData;  Base class for all the fit data types: Stores the coordinates and the DataOptions. More...;  ; class  FitResult;  class containing the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values. More...;  ; class  Fitter;  Fitter class, entry point for performing all type of fits. More...;  ; class  LogLikelihoodFCN;  LogLikelihoodFCN class for likelihood fits. More...;  ; struct  ObjFuncTrait;  ; struct  ObjFuncTrait< ROOT::Math::FitMethodFunction >;  ; struct  ObjFuncTrait< ROOT::Math::FitMethodGradFunction >;  ; class  ParameterSettings;  Class, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters. More...;",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit.html
https://root.cern/doc/master/namespaceROOT_1_1Fit.html:1979,Performance,perform,performing,1979,"ifferent options: More...;  ; class  Box;  ; class  BoxContainer;  ; class  Chi2FCN;  Chi2FCN class for binned fits using the least square methods. More...;  ; struct  DataOptions;  DataOptions : simple structure holding the options on how the data are filled. More...;  ; class  DataRange;  class describing the range in the coordinates it supports multiple range in a coordinate. More...;  ; class  FcnAdapter;  ; class  FitConfig;  Class describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class. More...;  ; class  FitData;  Base class for all the fit data types: Stores the coordinates and the DataOptions. More...;  ; class  FitResult;  class containing the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values. More...;  ; class  Fitter;  Fitter class, entry point for performing all type of fits. More...;  ; class  LogLikelihoodFCN;  LogLikelihoodFCN class for likelihood fits. More...;  ; struct  ObjFuncTrait;  ; struct  ObjFuncTrait< ROOT::Math::FitMethodFunction >;  ; struct  ObjFuncTrait< ROOT::Math::FitMethodGradFunction >;  ; class  ParameterSettings;  Class, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters. More...;  ; class  PoissonLikelihoodFCN;  class evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish gradient and non-gradient case More...;  ; class  ProxyListBox;  ; class  SparseData;  SparseData class representing the data of a THNSparse histogram The data needs to be converted to a BinData class before fitting using the GetBinData functions. More...;  ; class  UnBinData;  Class describing the un-binned data sets (just x coordinates values) of any dimensions. More...;  . Typedefs; typ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit.html
https://root.cern/doc/master/namespaceROOT_1_1Fit.html:2496,Testability,log,log,2496,"More...;  ; class  FitData;  Base class for all the fit data types: Stores the coordinates and the DataOptions. More...;  ; class  FitResult;  class containing the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values. More...;  ; class  Fitter;  Fitter class, entry point for performing all type of fits. More...;  ; class  LogLikelihoodFCN;  LogLikelihoodFCN class for likelihood fits. More...;  ; struct  ObjFuncTrait;  ; struct  ObjFuncTrait< ROOT::Math::FitMethodFunction >;  ; struct  ObjFuncTrait< ROOT::Math::FitMethodGradFunction >;  ; class  ParameterSettings;  Class, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters. More...;  ; class  PoissonLikelihoodFCN;  class evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish gradient and non-gradient case More...;  ; class  ProxyListBox;  ; class  SparseData;  SparseData class representing the data of a THNSparse histogram The data needs to be converted to a BinData class before fitting using the GetBinData functions. More...;  ; class  UnBinData;  Class describing the un-binned data sets (just x coordinates values) of any dimensions. More...;  . Typedefs; typedef Chi2FCN< ROOT::Math::IMultiGenFunction, ROOT::Math::IParamMultiFunction > Chi2Function;  ; typedef Chi2FCN< ROOT::Math::IMultiGradFunction, ROOT::Math::IParamMultiFunction > Chi2GradFunction;  ; typedef LogLikelihoodFCN< ROOT::Math::IMultiGenFunction, ROOT::Math::IParamMultiFunction > LogLikelihoodFunction;  ; typedef LogLikelihoodFCN< ROOT::Math::IMultiGradFunction, ROOT::Math::IParamMultiFunction > LogLikelihoodGradFunction;  ; typedef PoissonLikelihoodFCN< ROOT::Math::IMultiGenFunction, ROOT::Math::IParamMultiFunction > PoissonLLFunction;  ; ty",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit.html
https://root.cern/doc/master/namespaceROOT_1_1Fit.html:1163,Usability,simpl,simple,1163,"unctions |; Variables ; ROOT::Fit Namespace ReferenceMath » MathCore » Fitting and Parameter Estimation. Namespace for the fitting classes. ; More... Namespaces; namespace  FitUtil;  namespace defining utility free functions using in Fit for evaluating the various fit method functions (chi2, likelihood, etc..) given the data and the model function ;  ; namespace  HFitInterface;  . Classes; class  AreaComparer;  ; class  BasicFCN;  BasicFCN class: base class for the objective functions used in the fits It has a reference to the data and the model function used in the fit. More...;  ; class  BinData;  Class describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: More...;  ; class  Box;  ; class  BoxContainer;  ; class  Chi2FCN;  Chi2FCN class for binned fits using the least square methods. More...;  ; struct  DataOptions;  DataOptions : simple structure holding the options on how the data are filled. More...;  ; class  DataRange;  class describing the range in the coordinates it supports multiple range in a coordinate. More...;  ; class  FcnAdapter;  ; class  FitConfig;  Class describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class. More...;  ; class  FitData;  Base class for all the fit data types: Stores the coordinates and the DataOptions. More...;  ; class  FitResult;  class containing the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values. More...;  ; class  Fitter;  Fitter class, entry point for performing all type of fits. More...;  ; class  LogLikelihoodFCN;  LogLikelihoodFCN class for likelihood fits. More...;  ; struct  ObjFuncTrait;  ; struct  ObjFuncTrait< ROOT::Math::FitMethodFunct",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit.html
https://root.cern/doc/master/namespaceROOT_1_1Fit.html:7285,Usability,simpl,simple,7285,"t::DataRange &range);  fitting function for a MultiGraph (called from TMultiGraph::Fit) ;  ; void FitOptionsMake (EFitObjectType type, const char *option, Foption_t &fitOption);  Decode list of options into fitOption. ;  ; bool GetConfidenceIntervals (const TH1 *h1, const ROOT::Fit::FitResult &r, TGraphErrors *gr, double cl=0.95);  compute confidence intervals at level cl for a fitted histogram h1 in a TGraphErrors gr ;  ; BinData::ErrorType GetDataType (const TGraph *gr, DataOptions &fitOpt);  ; BinData::ErrorType GetDataType (const TGraph2D *gr, const DataOptions &fitOpt);  ; void Init2DGaus (const ROOT::Fit::BinData &data, TF1 *f1);  compute initial parameter for 2D gaussian function given the fit data Set the sigma limits for zero top 10* initial rms values Set the initial parameter values in the TF1 ;  ; void InitExpo (const ROOT::Fit::BinData &data, TF1 *f1);  compute initial parameter for an exponential function given the fit data Set the constant and slope assuming a simple exponential going through xmin and xmax of the data set ;  ; void InitGaus (const ROOT::Fit::BinData &data, TF1 *f1);  compute initial parameter for gaussian function given the fit data Set the sigma limits for zero top 10* initial rms values Set the initial parameter values in the TF1 ;  ; bool lessRange (const std::pair< double, double > &r1, const std::pair< double, double > &r2);  ; ostream & operator<< (ostream &os, const ROOT::Fit::Box &b);  ; TFitResultPtr UnBinFit (ROOT::Fit::UnBinData *data, TF1 *f1, Foption_t &option, const ROOT::Math::MinimizerOptions &moption);  fit an unbin data set (from tree or from histogram buffer) using a TF1 pointer and fit options. ;  . Variables; double gDefaultErrorDef = ROOT::Math::MinimizerOptions::DefaultErrorDef();  ; const int gInitialResultStatus = -99;  . Detailed Description; Namespace for the fitting classes. ; Typedef Documentation. ◆ Chi2Function. typedef Chi2FCN<ROOT::Math::IMultiGenFunction,ROOT::Math::IParamMultiFunction> ROOT::Fit::Chi2",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit.html
https://root.cern/doc/master/namespaceROOT_1_1Fit.html:16221,Usability,simpl,simple,16221,"ce.cxx. ◆ GetDataType() [1/2]. BinData::ErrorType ROOT::Fit::GetDataType ; (; const TGraph * ; gr, . DataOptions & ; fitOpt . ). Definition at line 476 of file HFitInterface.cxx. ◆ GetDataType() [2/2]. BinData::ErrorType ROOT::Fit::GetDataType ; (; const TGraph2D * ; gr, . const DataOptions & ; fitOpt . ). Definition at line 545 of file HFitInterface.cxx. ◆ Init2DGaus(). void ROOT::Fit::Init2DGaus ; (; const ROOT::Fit::BinData & ; data, . TF1 * ; f1 . ). compute initial parameter for 2D gaussian function given the fit data Set the sigma limits for zero top 10* initial rms values Set the initial parameter values in the TF1 ; Compute Initial values of parameters for a gaussian derived from function H1InitGaus defined in TH1.cxx. ; Definition at line 388 of file HFitInterface.cxx. ◆ InitExpo(). void ROOT::Fit::InitExpo ; (; const ROOT::Fit::BinData & ; data, . TF1 * ; f1 . ). compute initial parameter for an exponential function given the fit data Set the constant and slope assuming a simple exponential going through xmin and xmax of the data set ; Compute rough values of parameters for an exponential. ; Definition at line 267 of file HFitInterface.cxx. ◆ InitGaus(). void ROOT::Fit::InitGaus ; (; const ROOT::Fit::BinData & ; data, . TF1 * ; f1 . ). compute initial parameter for gaussian function given the fit data Set the sigma limits for zero top 10* initial rms values Set the initial parameter values in the TF1 ; Compute Initial values of parameters for a gaussian derived from function H1InitGaus defined in TH1.cxx. ; Definition at line 306 of file HFitInterface.cxx. ◆ lessRange(). bool ROOT::Fit::lessRange ; (; const std::pair< double, double > & ; r1, . const std::pair< double, double > & ; r2 . ). Definition at line 73 of file DataRange.cxx. ◆ operator<<(). ostream & ROOT::Fit::operator<< ; (; ostream & ; os, . const ROOT::Fit::Box & ; b . ). Definition at line 374 of file SparseData.cxx. ◆ UnBinFit(). TFitResultPtr ROOT::Fit::UnBinFit ; (; ROOT::Fit::UnBinData * ;",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit.html
https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html:6329,Availability,error,errors,6329,"ine 181 of file FitUtil.cxx. ◆ CorrectValue(). double ROOT::Fit::FitUtil::CorrectValue ; (; double ; rval). Definition at line 167 of file FitUtil.cxx. ◆ EvaluateChi2(). double ROOT::Fit::FitUtil::EvaluateChi2 ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy, . unsigned ; nChunks = 0 . ). Chi2 Functions. ; evaluate the Chi2 given a model function and the data at the point x. return also nPoints as the effective number of used points in the Chi2 evaluation ; Definition at line 226 of file FitUtil.cxx. ◆ EvaluateChi2Effective(). double ROOT::Fit::FitUtil::EvaluateChi2Effective ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; x, . unsigned int & ; nPoints . ). evaluate the effective Chi2 given a model function and the data at the point x. ; The effective chi2 uses the errors on the coordinates : W = 1/(sigma_y**2 + ( sigma_x_i * df/dx_i )**2 ) return also nPoints as the effective number of used points in the Chi2 evaluation ; Definition at line 424 of file FitUtil.cxx. ◆ EvaluateChi2Gradient(). void ROOT::Fit::FitUtil::EvaluateChi2Gradient ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . double * ; grad, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential, . unsigned ; nChunks = 0 . ). evaluate the Chi2 gradient given a model function and the data at the point p. ; return also nPoints as the effective number of used points in the Chi2 evaluation . ◆ EvaluateChi2Residual(). double ROOT::Fit::FitUtil::EvaluateChi2Residual ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . unsigned int ; i, . double * ; g = nullptr, . double * ; h = nullptr, . bool ; hasGrad = false, . bool ; useFullHessian = false . ). evaluate the residual contribution to the Chi2 given a model function and the BinPoint data and if the ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html
https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html:7557,Availability,error,errors,7557,"id ROOT::Fit::FitUtil::EvaluateChi2Gradient ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . double * ; grad, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential, . unsigned ; nChunks = 0 . ). evaluate the Chi2 gradient given a model function and the data at the point p. ; return also nPoints as the effective number of used points in the Chi2 evaluation . ◆ EvaluateChi2Residual(). double ROOT::Fit::FitUtil::EvaluateChi2Residual ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . unsigned int ; i, . double * ; g = nullptr, . double * ; h = nullptr, . bool ; hasGrad = false, . bool ; useFullHessian = false . ). evaluate the residual contribution to the Chi2 given a model function and the BinPoint data and if the pointer g is not null evaluate also the gradient of the residual. ; evaluate the chi2 contribution (residual term) only for data with no coord-errors This function is used in the specialized least square algorithms like FUMILI or L.M.; If the function provides parameter derivatives they are used otherwise a simple derivative calculation is used; if we have error on the coordinates the residual weight depends on the function value and the approximation used by Fumili and Levenberg-Marquardt cannot be used. Also the expected error and bin integral options should not be used in this case ; Definition at line 545 of file FitUtil.cxx. ◆ EvaluateLogL(). double ROOT::Fit::FitUtil::EvaluateLogL ; (; const IModelFunction & ; func, . const UnBinData & ; data, . const double * ; p, . int ; iWeight, . bool ; extended, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy, . unsigned ; nChunks = 0 . ). evaluate the LogL given a model function and the data at the point x. ; return also nPoints as the effective number of used points in the LogL evaluation . ◆ EvaluateLogLGradient(). void ROOT::Fit::FitUtil::EvaluateLogLGradient",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html
https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html:7773,Availability,error,error,7773,"ROOT::EExecutionPolicy::kSequential, . unsigned ; nChunks = 0 . ). evaluate the Chi2 gradient given a model function and the data at the point p. ; return also nPoints as the effective number of used points in the Chi2 evaluation . ◆ EvaluateChi2Residual(). double ROOT::Fit::FitUtil::EvaluateChi2Residual ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . unsigned int ; i, . double * ; g = nullptr, . double * ; h = nullptr, . bool ; hasGrad = false, . bool ; useFullHessian = false . ). evaluate the residual contribution to the Chi2 given a model function and the BinPoint data and if the pointer g is not null evaluate also the gradient of the residual. ; evaluate the chi2 contribution (residual term) only for data with no coord-errors This function is used in the specialized least square algorithms like FUMILI or L.M.; If the function provides parameter derivatives they are used otherwise a simple derivative calculation is used; if we have error on the coordinates the residual weight depends on the function value and the approximation used by Fumili and Levenberg-Marquardt cannot be used. Also the expected error and bin integral options should not be used in this case ; Definition at line 545 of file FitUtil.cxx. ◆ EvaluateLogL(). double ROOT::Fit::FitUtil::EvaluateLogL ; (; const IModelFunction & ; func, . const UnBinData & ; data, . const double * ; p, . int ; iWeight, . bool ; extended, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy, . unsigned ; nChunks = 0 . ). evaluate the LogL given a model function and the data at the point x. ; return also nPoints as the effective number of used points in the LogL evaluation . ◆ EvaluateLogLGradient(). void ROOT::Fit::FitUtil::EvaluateLogLGradient ; (; const IModelFunction & ; func, . const UnBinData & ; data, . const double * ; p, . double * ; grad, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential, . u",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html
https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html:7943,Availability,error,error,7943," points in the Chi2 evaluation . ◆ EvaluateChi2Residual(). double ROOT::Fit::FitUtil::EvaluateChi2Residual ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . unsigned int ; i, . double * ; g = nullptr, . double * ; h = nullptr, . bool ; hasGrad = false, . bool ; useFullHessian = false . ). evaluate the residual contribution to the Chi2 given a model function and the BinPoint data and if the pointer g is not null evaluate also the gradient of the residual. ; evaluate the chi2 contribution (residual term) only for data with no coord-errors This function is used in the specialized least square algorithms like FUMILI or L.M.; If the function provides parameter derivatives they are used otherwise a simple derivative calculation is used; if we have error on the coordinates the residual weight depends on the function value and the approximation used by Fumili and Levenberg-Marquardt cannot be used. Also the expected error and bin integral options should not be used in this case ; Definition at line 545 of file FitUtil.cxx. ◆ EvaluateLogL(). double ROOT::Fit::FitUtil::EvaluateLogL ; (; const IModelFunction & ; func, . const UnBinData & ; data, . const double * ; p, . int ; iWeight, . bool ; extended, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy, . unsigned ; nChunks = 0 . ). evaluate the LogL given a model function and the data at the point x. ; return also nPoints as the effective number of used points in the LogL evaluation . ◆ EvaluateLogLGradient(). void ROOT::Fit::FitUtil::EvaluateLogLGradient ; (; const IModelFunction & ; func, . const UnBinData & ; data, . const double * ; p, . double * ; grad, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential, . unsigned ; nChunks = 0 . ). evaluate the LogL gradient given a model function and the data at the point p. ; return also nPoints as the effective number of used points in the LogL evaluation . ◆ Evalua",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html
https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html:7818,Integrability,depend,depends,7818,"ROOT::EExecutionPolicy::kSequential, . unsigned ; nChunks = 0 . ). evaluate the Chi2 gradient given a model function and the data at the point p. ; return also nPoints as the effective number of used points in the Chi2 evaluation . ◆ EvaluateChi2Residual(). double ROOT::Fit::FitUtil::EvaluateChi2Residual ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . unsigned int ; i, . double * ; g = nullptr, . double * ; h = nullptr, . bool ; hasGrad = false, . bool ; useFullHessian = false . ). evaluate the residual contribution to the Chi2 given a model function and the BinPoint data and if the pointer g is not null evaluate also the gradient of the residual. ; evaluate the chi2 contribution (residual term) only for data with no coord-errors This function is used in the specialized least square algorithms like FUMILI or L.M.; If the function provides parameter derivatives they are used otherwise a simple derivative calculation is used; if we have error on the coordinates the residual weight depends on the function value and the approximation used by Fumili and Levenberg-Marquardt cannot be used. Also the expected error and bin integral options should not be used in this case ; Definition at line 545 of file FitUtil.cxx. ◆ EvaluateLogL(). double ROOT::Fit::FitUtil::EvaluateLogL ; (; const IModelFunction & ; func, . const UnBinData & ; data, . const double * ; p, . int ; iWeight, . bool ; extended, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy, . unsigned ; nChunks = 0 . ). evaluate the LogL given a model function and the data at the point x. ; return also nPoints as the effective number of used points in the LogL evaluation . ◆ EvaluateLogLGradient(). void ROOT::Fit::FitUtil::EvaluateLogLGradient ; (; const IModelFunction & ; func, . const UnBinData & ; data, . const double * ; p, . double * ; grad, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential, . u",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html
https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html:2403,Modifiability,extend,extended,2403,"(const IModelFunction &func, const BinData &data, const double *x, unsigned int &nPoints);  evaluate the effective Chi2 given a model function and the data at the point x. ;  ; void EvaluateChi2Gradient (const IModelFunction &func, const BinData &data, const double *p, double *grad, unsigned int &nPoints, ::ROOT::EExecutionPolicy executionPolicy=::ROOT::EExecutionPolicy::kSequential, unsigned nChunks=0);  evaluate the Chi2 gradient given a model function and the data at the point p. ;  ; double EvaluateChi2Residual (const IModelFunction &func, const BinData &data, const double *p, unsigned int ipoint, double *g=nullptr, double *h=nullptr, bool hasGrad=false, bool fullHessian=false);  evaluate the residual contribution to the Chi2 given a model function and the BinPoint data and if the pointer g is not null evaluate also the gradient of the residual. ;  ; double EvaluateLogL (const IModelFunction &func, const UnBinData &data, const double *p, int iWeight, bool extended, unsigned int &nPoints, ::ROOT::EExecutionPolicy executionPolicy, unsigned nChunks=0);  evaluate the LogL given a model function and the data at the point x. ;  ; void EvaluateLogLGradient (const IModelFunction &func, const UnBinData &data, const double *p, double *grad, unsigned int &nPoints, ::ROOT::EExecutionPolicy executionPolicy=::ROOT::EExecutionPolicy::kSequential, unsigned nChunks=0);  evaluate the LogL gradient given a model function and the data at the point p. ;  ; double EvaluatePdf (const IModelFunction &func, const UnBinData &data, const double *p, unsigned int ipoint, double *g=nullptr, double *h=nullptr, bool hasGrad=false, bool fullHessian=false);  evaluate the pdf contribution to the LogL given a model function and the BinPoint data. ;  ; double EvaluatePoissonBinPdf (const IModelFunction &func, const BinData &data, const double *x, unsigned int ipoint, double *g=nullptr, double *h=nullptr, bool hasGrad=false, bool fullHessian=false);  evaluate the pdf contribution to the Poisson LogL ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html
https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html:3593,Modifiability,extend,extended,3593,"n &func, const UnBinData &data, const double *p, double *grad, unsigned int &nPoints, ::ROOT::EExecutionPolicy executionPolicy=::ROOT::EExecutionPolicy::kSequential, unsigned nChunks=0);  evaluate the LogL gradient given a model function and the data at the point p. ;  ; double EvaluatePdf (const IModelFunction &func, const UnBinData &data, const double *p, unsigned int ipoint, double *g=nullptr, double *h=nullptr, bool hasGrad=false, bool fullHessian=false);  evaluate the pdf contribution to the LogL given a model function and the BinPoint data. ;  ; double EvaluatePoissonBinPdf (const IModelFunction &func, const BinData &data, const double *x, unsigned int ipoint, double *g=nullptr, double *h=nullptr, bool hasGrad=false, bool fullHessian=false);  evaluate the pdf contribution to the Poisson LogL given a model function and the BinPoint data. ;  ; double EvaluatePoissonLogL (const IModelFunction &func, const BinData &data, const double *p, int iWeight, bool extended, unsigned int &nPoints, ::ROOT::EExecutionPolicy executionPolicy, unsigned nChunks=0);  evaluate the Poisson LogL given a model function and the data at the point p. ;  ; void EvaluatePoissonLogLGradient (const IModelFunction &func, const BinData &data, const double *p, double *grad, unsigned int &nPoints, ::ROOT::EExecutionPolicy executionPolicy=::ROOT::EExecutionPolicy::kSequential, unsigned nChunks=0);  evaluate the Poisson LogL given a model function and the data at the point p. ;  ; unsigned setAutomaticChunking (unsigned nEvents);  . Detailed Description; namespace defining utility free functions using in Fit for evaluating the various fit method functions (chi2, likelihood, etc..) given the data and the model function ; Typedef Documentation. ◆ IGradModelFunction. typedef ROOT::Math::IParamMultiGradFunction ROOT::Fit::FitUtil::IGradModelFunction. Definition at line 65 of file FitUtil.h. ◆ IGradModelFunctionTempl. template<class T > . using ROOT::Fit::FitUtil::IGradModelFunctionTempl = typedef ROOT",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html
https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html:8222,Modifiability,extend,extended,8222," double * ; h = nullptr, . bool ; hasGrad = false, . bool ; useFullHessian = false . ). evaluate the residual contribution to the Chi2 given a model function and the BinPoint data and if the pointer g is not null evaluate also the gradient of the residual. ; evaluate the chi2 contribution (residual term) only for data with no coord-errors This function is used in the specialized least square algorithms like FUMILI or L.M.; If the function provides parameter derivatives they are used otherwise a simple derivative calculation is used; if we have error on the coordinates the residual weight depends on the function value and the approximation used by Fumili and Levenberg-Marquardt cannot be used. Also the expected error and bin integral options should not be used in this case ; Definition at line 545 of file FitUtil.cxx. ◆ EvaluateLogL(). double ROOT::Fit::FitUtil::EvaluateLogL ; (; const IModelFunction & ; func, . const UnBinData & ; data, . const double * ; p, . int ; iWeight, . bool ; extended, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy, . unsigned ; nChunks = 0 . ). evaluate the LogL given a model function and the data at the point x. ; return also nPoints as the effective number of used points in the LogL evaluation . ◆ EvaluateLogLGradient(). void ROOT::Fit::FitUtil::EvaluateLogLGradient ; (; const IModelFunction & ; func, . const UnBinData & ; data, . const double * ; p, . double * ; grad, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential, . unsigned ; nChunks = 0 . ). evaluate the LogL gradient given a model function and the data at the point p. ; return also nPoints as the effective number of used points in the LogL evaluation . ◆ EvaluatePdf(). double ROOT::Fit::FitUtil::EvaluatePdf ; (; const IModelFunction & ; func, . const UnBinData & ; data, . const double * ; p, . unsigned int ; ipoint, . double * ; g = nullptr, . double * ; h = nullptr, . bool ; hasGrad = false, .",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html
https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html:10505,Modifiability,extend,extended,10505,"calculation is used ; Definition at line 891 of file FitUtil.cxx. ◆ EvaluatePoissonBinPdf(). double ROOT::Fit::FitUtil::EvaluatePoissonBinPdf ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; x, . unsigned int ; ipoint, . double * ; g = nullptr, . double * ; h = nullptr, . bool ; hasGrad = false, . bool ; fullHessian = false . ). evaluate the pdf contribution to the Poisson LogL given a model function and the BinPoint data. ; evaluate the pdf (Poisson) contribution to the logl (return actually log of pdf) and its gradient (gradient of log(pdf)); If the pointer g is not null evaluate also the gradient of the Poisson pdf. If the function provides parameter derivatives they are used otherwise a simple derivative calculation is used ; Definition at line 1297 of file FitUtil.cxx. ◆ EvaluatePoissonLogL(). double ROOT::Fit::FitUtil::EvaluatePoissonLogL ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . int ; iWeight, . bool ; extended, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy, . unsigned ; nChunks = 0 . ). evaluate the Poisson LogL given a model function and the data at the point p. ; return also nPoints as the effective number of used points in the LogL evaluation By default is extended, pass extend to false if want to be not extended (MultiNomial) . ◆ EvaluatePoissonLogLGradient(). void ROOT::Fit::FitUtil::EvaluatePoissonLogLGradient ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . double * ; grad, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential, . unsigned ; nChunks = 0 . ). evaluate the Poisson LogL given a model function and the data at the point p. ; return also nPoints as the effective number of used points in the LogL evaluation . ◆ setAutomaticChunking(). unsigned ROOT::Fit::FitUtil::setAutomaticChunking ; (; unsigned ; nEvents). Definition at line 1841 of file FitUtil",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html
https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html:10795,Modifiability,extend,extended,10795,"ePoissonBinPdf ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; x, . unsigned int ; ipoint, . double * ; g = nullptr, . double * ; h = nullptr, . bool ; hasGrad = false, . bool ; fullHessian = false . ). evaluate the pdf contribution to the Poisson LogL given a model function and the BinPoint data. ; evaluate the pdf (Poisson) contribution to the logl (return actually log of pdf) and its gradient (gradient of log(pdf)); If the pointer g is not null evaluate also the gradient of the Poisson pdf. If the function provides parameter derivatives they are used otherwise a simple derivative calculation is used ; Definition at line 1297 of file FitUtil.cxx. ◆ EvaluatePoissonLogL(). double ROOT::Fit::FitUtil::EvaluatePoissonLogL ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . int ; iWeight, . bool ; extended, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy, . unsigned ; nChunks = 0 . ). evaluate the Poisson LogL given a model function and the data at the point p. ; return also nPoints as the effective number of used points in the LogL evaluation By default is extended, pass extend to false if want to be not extended (MultiNomial) . ◆ EvaluatePoissonLogLGradient(). void ROOT::Fit::FitUtil::EvaluatePoissonLogLGradient ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . double * ; grad, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential, . unsigned ; nChunks = 0 . ). evaluate the Poisson LogL given a model function and the data at the point p. ; return also nPoints as the effective number of used points in the LogL evaluation . ◆ setAutomaticChunking(). unsigned ROOT::Fit::FitUtil::setAutomaticChunking ; (; unsigned ; nEvents). Definition at line 1841 of file FitUtil.cxx. ROOTFitFitUtil. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:16 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html
https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html:10810,Modifiability,extend,extend,10810,"ePoissonBinPdf ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; x, . unsigned int ; ipoint, . double * ; g = nullptr, . double * ; h = nullptr, . bool ; hasGrad = false, . bool ; fullHessian = false . ). evaluate the pdf contribution to the Poisson LogL given a model function and the BinPoint data. ; evaluate the pdf (Poisson) contribution to the logl (return actually log of pdf) and its gradient (gradient of log(pdf)); If the pointer g is not null evaluate also the gradient of the Poisson pdf. If the function provides parameter derivatives they are used otherwise a simple derivative calculation is used ; Definition at line 1297 of file FitUtil.cxx. ◆ EvaluatePoissonLogL(). double ROOT::Fit::FitUtil::EvaluatePoissonLogL ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . int ; iWeight, . bool ; extended, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy, . unsigned ; nChunks = 0 . ). evaluate the Poisson LogL given a model function and the data at the point p. ; return also nPoints as the effective number of used points in the LogL evaluation By default is extended, pass extend to false if want to be not extended (MultiNomial) . ◆ EvaluatePoissonLogLGradient(). void ROOT::Fit::FitUtil::EvaluatePoissonLogLGradient ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . double * ; grad, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential, . unsigned ; nChunks = 0 . ). evaluate the Poisson LogL given a model function and the data at the point p. ; return also nPoints as the effective number of used points in the LogL evaluation . ◆ setAutomaticChunking(). unsigned ROOT::Fit::FitUtil::setAutomaticChunking ; (; unsigned ; nEvents). Definition at line 1841 of file FitUtil.cxx. ROOTFitFitUtil. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:16 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html
https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html:10844,Modifiability,extend,extended,10844,"ePoissonBinPdf ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; x, . unsigned int ; ipoint, . double * ; g = nullptr, . double * ; h = nullptr, . bool ; hasGrad = false, . bool ; fullHessian = false . ). evaluate the pdf contribution to the Poisson LogL given a model function and the BinPoint data. ; evaluate the pdf (Poisson) contribution to the logl (return actually log of pdf) and its gradient (gradient of log(pdf)); If the pointer g is not null evaluate also the gradient of the Poisson pdf. If the function provides parameter derivatives they are used otherwise a simple derivative calculation is used ; Definition at line 1297 of file FitUtil.cxx. ◆ EvaluatePoissonLogL(). double ROOT::Fit::FitUtil::EvaluatePoissonLogL ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . int ; iWeight, . bool ; extended, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy, . unsigned ; nChunks = 0 . ). evaluate the Poisson LogL given a model function and the data at the point p. ; return also nPoints as the effective number of used points in the LogL evaluation By default is extended, pass extend to false if want to be not extended (MultiNomial) . ◆ EvaluatePoissonLogLGradient(). void ROOT::Fit::FitUtil::EvaluatePoissonLogLGradient ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . double * ; grad, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential, . unsigned ; nChunks = 0 . ). evaluate the Poisson LogL given a model function and the data at the point p. ; return also nPoints as the effective number of used points in the LogL evaluation . ◆ setAutomaticChunking(). unsigned ROOT::Fit::FitUtil::setAutomaticChunking ; (; unsigned ; nEvents). Definition at line 1841 of file FitUtil.cxx. ROOTFitFitUtil. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:16 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html
https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html:10014,Testability,log,logl,10014,"func, . const UnBinData & ; data, . const double * ; p, . unsigned int ; ipoint, . double * ; g = nullptr, . double * ; h = nullptr, . bool ; hasGrad = false, . bool ; fullHessian = false . ). evaluate the pdf contribution to the LogL given a model function and the BinPoint data. ; If the pointer g is not null evaluate also the gradient of the pdf. If the function provides parameter derivatives they are used otherwise a simple derivative calculation is used ; Definition at line 891 of file FitUtil.cxx. ◆ EvaluatePoissonBinPdf(). double ROOT::Fit::FitUtil::EvaluatePoissonBinPdf ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; x, . unsigned int ; ipoint, . double * ; g = nullptr, . double * ; h = nullptr, . bool ; hasGrad = false, . bool ; fullHessian = false . ). evaluate the pdf contribution to the Poisson LogL given a model function and the BinPoint data. ; evaluate the pdf (Poisson) contribution to the logl (return actually log of pdf) and its gradient (gradient of log(pdf)); If the pointer g is not null evaluate also the gradient of the Poisson pdf. If the function provides parameter derivatives they are used otherwise a simple derivative calculation is used ; Definition at line 1297 of file FitUtil.cxx. ◆ EvaluatePoissonLogL(). double ROOT::Fit::FitUtil::EvaluatePoissonLogL ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . int ; iWeight, . bool ; extended, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy, . unsigned ; nChunks = 0 . ). evaluate the Poisson LogL given a model function and the data at the point p. ; return also nPoints as the effective number of used points in the LogL evaluation By default is extended, pass extend to false if want to be not extended (MultiNomial) . ◆ EvaluatePoissonLogLGradient(). void ROOT::Fit::FitUtil::EvaluatePoissonLogLGradient ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . double * ; grad, . unsi",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html
https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html:10036,Testability,log,log,10036,"func, . const UnBinData & ; data, . const double * ; p, . unsigned int ; ipoint, . double * ; g = nullptr, . double * ; h = nullptr, . bool ; hasGrad = false, . bool ; fullHessian = false . ). evaluate the pdf contribution to the LogL given a model function and the BinPoint data. ; If the pointer g is not null evaluate also the gradient of the pdf. If the function provides parameter derivatives they are used otherwise a simple derivative calculation is used ; Definition at line 891 of file FitUtil.cxx. ◆ EvaluatePoissonBinPdf(). double ROOT::Fit::FitUtil::EvaluatePoissonBinPdf ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; x, . unsigned int ; ipoint, . double * ; g = nullptr, . double * ; h = nullptr, . bool ; hasGrad = false, . bool ; fullHessian = false . ). evaluate the pdf contribution to the Poisson LogL given a model function and the BinPoint data. ; evaluate the pdf (Poisson) contribution to the logl (return actually log of pdf) and its gradient (gradient of log(pdf)); If the pointer g is not null evaluate also the gradient of the Poisson pdf. If the function provides parameter derivatives they are used otherwise a simple derivative calculation is used ; Definition at line 1297 of file FitUtil.cxx. ◆ EvaluatePoissonLogL(). double ROOT::Fit::FitUtil::EvaluatePoissonLogL ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . int ; iWeight, . bool ; extended, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy, . unsigned ; nChunks = 0 . ). evaluate the Poisson LogL given a model function and the data at the point p. ; return also nPoints as the effective number of used points in the LogL evaluation By default is extended, pass extend to false if want to be not extended (MultiNomial) . ◆ EvaluatePoissonLogLGradient(). void ROOT::Fit::FitUtil::EvaluatePoissonLogLGradient ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . double * ; grad, . unsi",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html
https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html:10078,Testability,log,log,10078,"func, . const UnBinData & ; data, . const double * ; p, . unsigned int ; ipoint, . double * ; g = nullptr, . double * ; h = nullptr, . bool ; hasGrad = false, . bool ; fullHessian = false . ). evaluate the pdf contribution to the LogL given a model function and the BinPoint data. ; If the pointer g is not null evaluate also the gradient of the pdf. If the function provides parameter derivatives they are used otherwise a simple derivative calculation is used ; Definition at line 891 of file FitUtil.cxx. ◆ EvaluatePoissonBinPdf(). double ROOT::Fit::FitUtil::EvaluatePoissonBinPdf ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; x, . unsigned int ; ipoint, . double * ; g = nullptr, . double * ; h = nullptr, . bool ; hasGrad = false, . bool ; fullHessian = false . ). evaluate the pdf contribution to the Poisson LogL given a model function and the BinPoint data. ; evaluate the pdf (Poisson) contribution to the logl (return actually log of pdf) and its gradient (gradient of log(pdf)); If the pointer g is not null evaluate also the gradient of the Poisson pdf. If the function provides parameter derivatives they are used otherwise a simple derivative calculation is used ; Definition at line 1297 of file FitUtil.cxx. ◆ EvaluatePoissonLogL(). double ROOT::Fit::FitUtil::EvaluatePoissonLogL ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . int ; iWeight, . bool ; extended, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy, . unsigned ; nChunks = 0 . ). evaluate the Poisson LogL given a model function and the data at the point p. ; return also nPoints as the effective number of used points in the LogL evaluation By default is extended, pass extend to false if want to be not extended (MultiNomial) . ◆ EvaluatePoissonLogLGradient(). void ROOT::Fit::FitUtil::EvaluatePoissonLogLGradient ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . double * ; grad, . unsi",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html
https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html:7723,Usability,simpl,simple,7723,"ROOT::EExecutionPolicy::kSequential, . unsigned ; nChunks = 0 . ). evaluate the Chi2 gradient given a model function and the data at the point p. ; return also nPoints as the effective number of used points in the Chi2 evaluation . ◆ EvaluateChi2Residual(). double ROOT::Fit::FitUtil::EvaluateChi2Residual ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . unsigned int ; i, . double * ; g = nullptr, . double * ; h = nullptr, . bool ; hasGrad = false, . bool ; useFullHessian = false . ). evaluate the residual contribution to the Chi2 given a model function and the BinPoint data and if the pointer g is not null evaluate also the gradient of the residual. ; evaluate the chi2 contribution (residual term) only for data with no coord-errors This function is used in the specialized least square algorithms like FUMILI or L.M.; If the function provides parameter derivatives they are used otherwise a simple derivative calculation is used; if we have error on the coordinates the residual weight depends on the function value and the approximation used by Fumili and Levenberg-Marquardt cannot be used. Also the expected error and bin integral options should not be used in this case ; Definition at line 545 of file FitUtil.cxx. ◆ EvaluateLogL(). double ROOT::Fit::FitUtil::EvaluateLogL ; (; const IModelFunction & ; func, . const UnBinData & ; data, . const double * ; p, . int ; iWeight, . bool ; extended, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy, . unsigned ; nChunks = 0 . ). evaluate the LogL given a model function and the data at the point x. ; return also nPoints as the effective number of used points in the LogL evaluation . ◆ EvaluateLogLGradient(). void ROOT::Fit::FitUtil::EvaluateLogLGradient ; (; const IModelFunction & ; func, . const UnBinData & ; data, . const double * ; p, . double * ; grad, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential, . u",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html
https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html:9488,Usability,simpl,simple,9488,". ◆ EvaluateLogLGradient(). void ROOT::Fit::FitUtil::EvaluateLogLGradient ; (; const IModelFunction & ; func, . const UnBinData & ; data, . const double * ; p, . double * ; grad, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential, . unsigned ; nChunks = 0 . ). evaluate the LogL gradient given a model function and the data at the point p. ; return also nPoints as the effective number of used points in the LogL evaluation . ◆ EvaluatePdf(). double ROOT::Fit::FitUtil::EvaluatePdf ; (; const IModelFunction & ; func, . const UnBinData & ; data, . const double * ; p, . unsigned int ; ipoint, . double * ; g = nullptr, . double * ; h = nullptr, . bool ; hasGrad = false, . bool ; fullHessian = false . ). evaluate the pdf contribution to the LogL given a model function and the BinPoint data. ; If the pointer g is not null evaluate also the gradient of the pdf. If the function provides parameter derivatives they are used otherwise a simple derivative calculation is used ; Definition at line 891 of file FitUtil.cxx. ◆ EvaluatePoissonBinPdf(). double ROOT::Fit::FitUtil::EvaluatePoissonBinPdf ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; x, . unsigned int ; ipoint, . double * ; g = nullptr, . double * ; h = nullptr, . bool ; hasGrad = false, . bool ; fullHessian = false . ). evaluate the pdf contribution to the Poisson LogL given a model function and the BinPoint data. ; evaluate the pdf (Poisson) contribution to the logl (return actually log of pdf) and its gradient (gradient of log(pdf)); If the pointer g is not null evaluate also the gradient of the Poisson pdf. If the function provides parameter derivatives they are used otherwise a simple derivative calculation is used ; Definition at line 1297 of file FitUtil.cxx. ◆ EvaluatePoissonLogL(). double ROOT::Fit::FitUtil::EvaluatePoissonLogL ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . int ; iWei",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html
https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html:10238,Usability,simpl,simple,10238,"an = false . ). evaluate the pdf contribution to the LogL given a model function and the BinPoint data. ; If the pointer g is not null evaluate also the gradient of the pdf. If the function provides parameter derivatives they are used otherwise a simple derivative calculation is used ; Definition at line 891 of file FitUtil.cxx. ◆ EvaluatePoissonBinPdf(). double ROOT::Fit::FitUtil::EvaluatePoissonBinPdf ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; x, . unsigned int ; ipoint, . double * ; g = nullptr, . double * ; h = nullptr, . bool ; hasGrad = false, . bool ; fullHessian = false . ). evaluate the pdf contribution to the Poisson LogL given a model function and the BinPoint data. ; evaluate the pdf (Poisson) contribution to the logl (return actually log of pdf) and its gradient (gradient of log(pdf)); If the pointer g is not null evaluate also the gradient of the Poisson pdf. If the function provides parameter derivatives they are used otherwise a simple derivative calculation is used ; Definition at line 1297 of file FitUtil.cxx. ◆ EvaluatePoissonLogL(). double ROOT::Fit::FitUtil::EvaluatePoissonLogL ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . int ; iWeight, . bool ; extended, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy, . unsigned ; nChunks = 0 . ). evaluate the Poisson LogL given a model function and the data at the point p. ; return also nPoints as the effective number of used points in the LogL evaluation By default is extended, pass extend to false if want to be not extended (MultiNomial) . ◆ EvaluatePoissonLogLGradient(). void ROOT::Fit::FitUtil::EvaluatePoissonLogLGradient ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . double * ; grad, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential, . unsigned ; nChunks = 0 . ). evaluate the Poisson LogL given a model",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html
https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1HFitInterface.html:257,Availability,error,error,257,". ROOT: ROOT::Fit::HFitInterface Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; ROOT::Fit::HFitInterface Namespace Reference. Functions; bool AdjustError (const DataOptions &option, double &error, double value=1);  ; void ExamineRange (const TAxis *axis, std::pair< double, double > range, int &hxfirst, int &hxlast);  ; bool IsPointOutOfRange (const TF1 *func, const double *x);  . Function Documentation. ◆ AdjustError(). bool ROOT::Fit::HFitInterface::AdjustError ; (; const DataOptions & ; option, . double & ; error, . double ; value = 1 . ). Definition at line 60 of file HFitInterface.cxx. ◆ ExamineRange(). void ROOT::Fit::HFitInterface::ExamineRange ; (; const TAxis * ; axis, . std::pair< double, double > ; range, . int & ; hxfirst, . int & ; hxlast . ). Definition at line 79 of file HFitInterface.cxx. ◆ IsPointOutOfRange(). bool ROOT::Fit::HFitInterface::IsPointOutOfRange ; (; const TF1 * ; func, . const double * ; x . ). Definition at line 54 of file HFitInterface.cxx. ROOTFitHFitInterface. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:16 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit_1_1HFitInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1HFitInterface.html
https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1HFitInterface.html:582,Availability,error,error,582,". ROOT: ROOT::Fit::HFitInterface Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; ROOT::Fit::HFitInterface Namespace Reference. Functions; bool AdjustError (const DataOptions &option, double &error, double value=1);  ; void ExamineRange (const TAxis *axis, std::pair< double, double > range, int &hxfirst, int &hxlast);  ; bool IsPointOutOfRange (const TF1 *func, const double *x);  . Function Documentation. ◆ AdjustError(). bool ROOT::Fit::HFitInterface::AdjustError ; (; const DataOptions & ; option, . double & ; error, . double ; value = 1 . ). Definition at line 60 of file HFitInterface.cxx. ◆ ExamineRange(). void ROOT::Fit::HFitInterface::ExamineRange ; (; const TAxis * ; axis, . std::pair< double, double > ; range, . int & ; hxfirst, . int & ; hxlast . ). Definition at line 79 of file HFitInterface.cxx. ◆ IsPointOutOfRange(). bool ROOT::Fit::HFitInterface::IsPointOutOfRange ; (; const TF1 * ; func, . const double * ; x . ). Definition at line 54 of file HFitInterface.cxx. ROOTFitHFitInterface. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:16 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit_1_1HFitInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1HFitInterface.html
https://root.cern/doc/master/namespaceROOT_1_1FoundationUtils.html:667,Deployability,install,installation,667,". ROOT: ROOT::FoundationUtils Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; ROOT::FoundationUtils Namespace Reference. Functions; bool CanConvertEnvValueToBool (const std::string &value);  ; bool ConvertEnvValueToBool (const std::string &value);  ; void ConvertToUnixPath (std::string &Path);  Transforms a file path by replacing its backslashes with slashes. ;  ; std::string GetCurrentDir ();  ; const char & GetEnvPathSeparator ();  ; const std::string & GetEtcDir ();  ; const std::string & GetFallbackRootSys ();  ; const std::string & GetIncludeDir ();  \ returns the include directory in the installation. ;  ; const std::string & GetPathSeparator ();  ; const std::string & GetRootSys ();  ; std::string MakePathRelative (const std::string &path, const std::string &base, bool isBuildingROOT=false);  ; static std::string str_tolower (std::string s);  . Function Documentation. ◆ CanConvertEnvValueToBool(). bool ROOT::FoundationUtils::CanConvertEnvValueToBool ; (; const std::string & ; value). Returnstrue if lowercase value is 1, on, true, 0, off, false ; Definition at line 214 of file FoundationUtils.cxx. ◆ ConvertEnvValueToBool(). bool ROOT::FoundationUtils::ConvertEnvValueToBool ; (; const std::string & ; value). Returnstrue if the lowercase string is 1, on, true; false if 0, off, false ; Definition at line 224 of file FoundationUtils.cxx. ◆ ConvertToUnixPath(). void ROOT::FoundationUtils::ConvertToUnixPath ; (; std::string & ; Path). Transforms a file path by replacing its backslashes with slashes. ; Definition at line 107 of file FoundationUtils.cxx. ◆ GetCurrentDir(). std::string ROOT::FoundationUtils::GetCurrentDir ; (; ). Returnsthe $PWD. ; Definition at line 47 of file FoundationUtils.cxx. ◆ GetEnvPathSeparator(). const char & ROOT::FoundationUtils::GetEnvPathSeparator ; (; ). inline . Returnsthe path separator for the PATH environment variable on the platform. ; Definition at line 54 of file Fou",MatchSource.WIKI,doc/master/namespaceROOT_1_1FoundationUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1FoundationUtils.html
https://root.cern/doc/master/namespaceROOT_1_1FoundationUtils.html:2133,Deployability,install,installation,2133,", off, false ; Definition at line 214 of file FoundationUtils.cxx. ◆ ConvertEnvValueToBool(). bool ROOT::FoundationUtils::ConvertEnvValueToBool ; (; const std::string & ; value). Returnstrue if the lowercase string is 1, on, true; false if 0, off, false ; Definition at line 224 of file FoundationUtils.cxx. ◆ ConvertToUnixPath(). void ROOT::FoundationUtils::ConvertToUnixPath ; (; std::string & ; Path). Transforms a file path by replacing its backslashes with slashes. ; Definition at line 107 of file FoundationUtils.cxx. ◆ GetCurrentDir(). std::string ROOT::FoundationUtils::GetCurrentDir ; (; ). Returnsthe $PWD. ; Definition at line 47 of file FoundationUtils.cxx. ◆ GetEnvPathSeparator(). const char & ROOT::FoundationUtils::GetEnvPathSeparator ; (; ). inline . Returnsthe path separator for the PATH environment variable on the platform. ; Definition at line 54 of file FoundationUtils.hxx. ◆ GetEtcDir(). const std::string & ROOT::FoundationUtils::GetEtcDir ; (; ). Returnsthe sysconfig directory in the installation. ; Definition at line 195 of file FoundationUtils.cxx. ◆ GetFallbackRootSys(). const std::string & ROOT::FoundationUtils::GetFallbackRootSys ; (; ). Returnsthe fallback directory in the installation (eg. /usr/local/root/). ; Definition at line 111 of file FoundationUtils.cxx. ◆ GetIncludeDir(). const std::string & ROOT::FoundationUtils::GetIncludeDir ; (; ). \ returns the include directory in the installation. ; Definition at line 180 of file FoundationUtils.cxx. ◆ GetPathSeparator(). const std::string & ROOT::FoundationUtils::GetPathSeparator ; (; ). inline . Returnsthe path separator slash or backslash depending on the platform. ; Definition at line 43 of file FoundationUtils.hxx. ◆ GetRootSys(). const std::string & ROOT::FoundationUtils::GetRootSys ; (; ). Returnsthe rootsys directory in the installation. ; Definition at line 158 of file FoundationUtils.cxx. ◆ MakePathRelative(). std::string ROOT::FoundationUtils::MakePathRelative ; (; const std::string & ;",MatchSource.WIKI,doc/master/namespaceROOT_1_1FoundationUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1FoundationUtils.html
https://root.cern/doc/master/namespaceROOT_1_1FoundationUtils.html:2332,Deployability,install,installation,2332,"ercase string is 1, on, true; false if 0, off, false ; Definition at line 224 of file FoundationUtils.cxx. ◆ ConvertToUnixPath(). void ROOT::FoundationUtils::ConvertToUnixPath ; (; std::string & ; Path). Transforms a file path by replacing its backslashes with slashes. ; Definition at line 107 of file FoundationUtils.cxx. ◆ GetCurrentDir(). std::string ROOT::FoundationUtils::GetCurrentDir ; (; ). Returnsthe $PWD. ; Definition at line 47 of file FoundationUtils.cxx. ◆ GetEnvPathSeparator(). const char & ROOT::FoundationUtils::GetEnvPathSeparator ; (; ). inline . Returnsthe path separator for the PATH environment variable on the platform. ; Definition at line 54 of file FoundationUtils.hxx. ◆ GetEtcDir(). const std::string & ROOT::FoundationUtils::GetEtcDir ; (; ). Returnsthe sysconfig directory in the installation. ; Definition at line 195 of file FoundationUtils.cxx. ◆ GetFallbackRootSys(). const std::string & ROOT::FoundationUtils::GetFallbackRootSys ; (; ). Returnsthe fallback directory in the installation (eg. /usr/local/root/). ; Definition at line 111 of file FoundationUtils.cxx. ◆ GetIncludeDir(). const std::string & ROOT::FoundationUtils::GetIncludeDir ; (; ). \ returns the include directory in the installation. ; Definition at line 180 of file FoundationUtils.cxx. ◆ GetPathSeparator(). const std::string & ROOT::FoundationUtils::GetPathSeparator ; (; ). inline . Returnsthe path separator slash or backslash depending on the platform. ; Definition at line 43 of file FoundationUtils.hxx. ◆ GetRootSys(). const std::string & ROOT::FoundationUtils::GetRootSys ; (; ). Returnsthe rootsys directory in the installation. ; Definition at line 158 of file FoundationUtils.cxx. ◆ MakePathRelative(). std::string ROOT::FoundationUtils::MakePathRelative ; (; const std::string & ; path, . const std::string & ; base, . bool ; isBuildingROOT = false . ). Returnsthe relative path of path with respect to base. For instance, for path being ""/a/b/c/d"" and base ""/a/b"", returns ""c/d"".; ",MatchSource.WIKI,doc/master/namespaceROOT_1_1FoundationUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1FoundationUtils.html
https://root.cern/doc/master/namespaceROOT_1_1FoundationUtils.html:2546,Deployability,install,installation,2546,"rms a file path by replacing its backslashes with slashes. ; Definition at line 107 of file FoundationUtils.cxx. ◆ GetCurrentDir(). std::string ROOT::FoundationUtils::GetCurrentDir ; (; ). Returnsthe $PWD. ; Definition at line 47 of file FoundationUtils.cxx. ◆ GetEnvPathSeparator(). const char & ROOT::FoundationUtils::GetEnvPathSeparator ; (; ). inline . Returnsthe path separator for the PATH environment variable on the platform. ; Definition at line 54 of file FoundationUtils.hxx. ◆ GetEtcDir(). const std::string & ROOT::FoundationUtils::GetEtcDir ; (; ). Returnsthe sysconfig directory in the installation. ; Definition at line 195 of file FoundationUtils.cxx. ◆ GetFallbackRootSys(). const std::string & ROOT::FoundationUtils::GetFallbackRootSys ; (; ). Returnsthe fallback directory in the installation (eg. /usr/local/root/). ; Definition at line 111 of file FoundationUtils.cxx. ◆ GetIncludeDir(). const std::string & ROOT::FoundationUtils::GetIncludeDir ; (; ). \ returns the include directory in the installation. ; Definition at line 180 of file FoundationUtils.cxx. ◆ GetPathSeparator(). const std::string & ROOT::FoundationUtils::GetPathSeparator ; (; ). inline . Returnsthe path separator slash or backslash depending on the platform. ; Definition at line 43 of file FoundationUtils.hxx. ◆ GetRootSys(). const std::string & ROOT::FoundationUtils::GetRootSys ; (; ). Returnsthe rootsys directory in the installation. ; Definition at line 158 of file FoundationUtils.cxx. ◆ MakePathRelative(). std::string ROOT::FoundationUtils::MakePathRelative ; (; const std::string & ; path, . const std::string & ; base, . bool ; isBuildingROOT = false . ). Returnsthe relative path of path with respect to base. For instance, for path being ""/a/b/c/d"" and base ""/a/b"", returns ""c/d"".; Parameters. path- the input path; base- the base path to be removed from path.; isBuildingROOT- if true, it converts module directories such as core/base/inc/ to include/ . Definition at line 82 of file Foundati",MatchSource.WIKI,doc/master/namespaceROOT_1_1FoundationUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1FoundationUtils.html
https://root.cern/doc/master/namespaceROOT_1_1FoundationUtils.html:2952,Deployability,install,installation,2952," & ROOT::FoundationUtils::GetEnvPathSeparator ; (; ). inline . Returnsthe path separator for the PATH environment variable on the platform. ; Definition at line 54 of file FoundationUtils.hxx. ◆ GetEtcDir(). const std::string & ROOT::FoundationUtils::GetEtcDir ; (; ). Returnsthe sysconfig directory in the installation. ; Definition at line 195 of file FoundationUtils.cxx. ◆ GetFallbackRootSys(). const std::string & ROOT::FoundationUtils::GetFallbackRootSys ; (; ). Returnsthe fallback directory in the installation (eg. /usr/local/root/). ; Definition at line 111 of file FoundationUtils.cxx. ◆ GetIncludeDir(). const std::string & ROOT::FoundationUtils::GetIncludeDir ; (; ). \ returns the include directory in the installation. ; Definition at line 180 of file FoundationUtils.cxx. ◆ GetPathSeparator(). const std::string & ROOT::FoundationUtils::GetPathSeparator ; (; ). inline . Returnsthe path separator slash or backslash depending on the platform. ; Definition at line 43 of file FoundationUtils.hxx. ◆ GetRootSys(). const std::string & ROOT::FoundationUtils::GetRootSys ; (; ). Returnsthe rootsys directory in the installation. ; Definition at line 158 of file FoundationUtils.cxx. ◆ MakePathRelative(). std::string ROOT::FoundationUtils::MakePathRelative ; (; const std::string & ; path, . const std::string & ; base, . bool ; isBuildingROOT = false . ). Returnsthe relative path of path with respect to base. For instance, for path being ""/a/b/c/d"" and base ""/a/b"", returns ""c/d"".; Parameters. path- the input path; base- the base path to be removed from path.; isBuildingROOT- if true, it converts module directories such as core/base/inc/ to include/ . Definition at line 82 of file FoundationUtils.cxx. ◆ str_tolower(). static std::string ROOT::FoundationUtils::str_tolower ; (; std::string ; s). static . Definition at line 208 of file FoundationUtils.cxx. ROOTFoundationUtils. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:16 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1FoundationUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1FoundationUtils.html
https://root.cern/doc/master/namespaceROOT_1_1FoundationUtils.html:2758,Integrability,depend,depending,2758,"on at line 47 of file FoundationUtils.cxx. ◆ GetEnvPathSeparator(). const char & ROOT::FoundationUtils::GetEnvPathSeparator ; (; ). inline . Returnsthe path separator for the PATH environment variable on the platform. ; Definition at line 54 of file FoundationUtils.hxx. ◆ GetEtcDir(). const std::string & ROOT::FoundationUtils::GetEtcDir ; (; ). Returnsthe sysconfig directory in the installation. ; Definition at line 195 of file FoundationUtils.cxx. ◆ GetFallbackRootSys(). const std::string & ROOT::FoundationUtils::GetFallbackRootSys ; (; ). Returnsthe fallback directory in the installation (eg. /usr/local/root/). ; Definition at line 111 of file FoundationUtils.cxx. ◆ GetIncludeDir(). const std::string & ROOT::FoundationUtils::GetIncludeDir ; (; ). \ returns the include directory in the installation. ; Definition at line 180 of file FoundationUtils.cxx. ◆ GetPathSeparator(). const std::string & ROOT::FoundationUtils::GetPathSeparator ; (; ). inline . Returnsthe path separator slash or backslash depending on the platform. ; Definition at line 43 of file FoundationUtils.hxx. ◆ GetRootSys(). const std::string & ROOT::FoundationUtils::GetRootSys ; (; ). Returnsthe rootsys directory in the installation. ; Definition at line 158 of file FoundationUtils.cxx. ◆ MakePathRelative(). std::string ROOT::FoundationUtils::MakePathRelative ; (; const std::string & ; path, . const std::string & ; base, . bool ; isBuildingROOT = false . ). Returnsthe relative path of path with respect to base. For instance, for path being ""/a/b/c/d"" and base ""/a/b"", returns ""c/d"".; Parameters. path- the input path; base- the base path to be removed from path.; isBuildingROOT- if true, it converts module directories such as core/base/inc/ to include/ . Definition at line 82 of file FoundationUtils.cxx. ◆ str_tolower(). static std::string ROOT::FoundationUtils::str_tolower ; (; std::string ; s). static . Definition at line 208 of file FoundationUtils.cxx. ROOTFoundationUtils. ROOT master - Reference Gu",MatchSource.WIKI,doc/master/namespaceROOT_1_1FoundationUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1FoundationUtils.html
https://root.cern/doc/master/namespaceROOT_1_1FoundationUtils.html:1940,Modifiability,variab,variable,1940,"  . Function Documentation. ◆ CanConvertEnvValueToBool(). bool ROOT::FoundationUtils::CanConvertEnvValueToBool ; (; const std::string & ; value). Returnstrue if lowercase value is 1, on, true, 0, off, false ; Definition at line 214 of file FoundationUtils.cxx. ◆ ConvertEnvValueToBool(). bool ROOT::FoundationUtils::ConvertEnvValueToBool ; (; const std::string & ; value). Returnstrue if the lowercase string is 1, on, true; false if 0, off, false ; Definition at line 224 of file FoundationUtils.cxx. ◆ ConvertToUnixPath(). void ROOT::FoundationUtils::ConvertToUnixPath ; (; std::string & ; Path). Transforms a file path by replacing its backslashes with slashes. ; Definition at line 107 of file FoundationUtils.cxx. ◆ GetCurrentDir(). std::string ROOT::FoundationUtils::GetCurrentDir ; (; ). Returnsthe $PWD. ; Definition at line 47 of file FoundationUtils.cxx. ◆ GetEnvPathSeparator(). const char & ROOT::FoundationUtils::GetEnvPathSeparator ; (; ). inline . Returnsthe path separator for the PATH environment variable on the platform. ; Definition at line 54 of file FoundationUtils.hxx. ◆ GetEtcDir(). const std::string & ROOT::FoundationUtils::GetEtcDir ; (; ). Returnsthe sysconfig directory in the installation. ; Definition at line 195 of file FoundationUtils.cxx. ◆ GetFallbackRootSys(). const std::string & ROOT::FoundationUtils::GetFallbackRootSys ; (; ). Returnsthe fallback directory in the installation (eg. /usr/local/root/). ; Definition at line 111 of file FoundationUtils.cxx. ◆ GetIncludeDir(). const std::string & ROOT::FoundationUtils::GetIncludeDir ; (; ). \ returns the include directory in the installation. ; Definition at line 180 of file FoundationUtils.cxx. ◆ GetPathSeparator(). const std::string & ROOT::FoundationUtils::GetPathSeparator ; (; ). inline . Returnsthe path separator slash or backslash depending on the platform. ; Definition at line 43 of file FoundationUtils.hxx. ◆ GetRootSys(). const std::string & ROOT::FoundationUtils::GetRootSys ; (; ). Returnsthe ",MatchSource.WIKI,doc/master/namespaceROOT_1_1FoundationUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1FoundationUtils.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:6740,Availability,error,error,6740,"ation of the branch proxy around an stl container of array of T. More...;  ; class  TStlImpProxy;  Template of the Concrete Implementation of the branch proxy around an stl container of T. More...;  ; class  TStlObjProxy;  ; class  TStlProxy;  Base class for the proxy around STL containers. More...;  ; class  TStlSimpleProxy;  ; class  TTreeGeneratorBase;  Base class for code generators like TTreeProxyGenerator and TTreeReaderGenerator. More...;  ; class  TTreeProxyGenerator;  ; class  TTreeReaderArrayBase;  Base class of TTreeReaderArray. More...;  ; class  TTreeReaderDescriptor;  ; class  TTreeReaderGenerator;  ; class  TTreeReaderOpaqueValue;  Read a value in a branch without knowledge of its type. More...;  ; class  TTreeReaderValueBase;  Base class of TTreeReaderValue. More...;  ; class  TTreeView;  ; class  TVirtualCollectionReader;  ; class  TypedIter;  ; struct  UniqueLockRecurseCount;  ; struct  Update;  . Typedefs; using ErrorSystemMsgHandlerFunc_t = std::function< const char *()>;  Retrieves the error string associated with the last system error. ;  ; using FreeIfTMapFile_t = bool(void *);  ; using GetMapFileMapllocDesc_t = void *(void *);  ; typedef TROOT *(* GetROOTFun_t) ();  ; typedef std::map< std::string, std::string > MembersMap_t;  ; using RUidColl = std::vector< Int_t >;  ; typedef TArrayProxy< TArrayType< bool > > TArrayBoolProxy;  ; typedef TArrayProxy< TArrayType< Double32_t > > TArrayDouble32Proxy;  ; typedef TArrayProxy< TArrayType< Double_t > > TArrayDoubleProxy;  ; typedef TArrayProxy< TArrayType< Float16_t > > TArrayFloat16Proxy;  ; typedef TArrayProxy< TArrayType< Float_t > > TArrayFloatProxy;  ; typedef TArrayProxy< TArrayType< Int_t > > TArrayIntProxy;  ; typedef TArrayProxy< TArrayType< Long64_t > > TArrayLong64Proxy;  ; typedef TArrayProxy< TArrayType< Long_t > > TArrayLongProxy;  ; typedef TArrayProxy< TArrayType< UShort_t > > TArrayShortProxy;  ; typedef TArrayProxy< TArrayType< UChar_t > > TArrayUCharProxy;  ; typedef TArrayProxy< ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:6785,Availability,error,error,6785,"ation of the branch proxy around an stl container of array of T. More...;  ; class  TStlImpProxy;  Template of the Concrete Implementation of the branch proxy around an stl container of T. More...;  ; class  TStlObjProxy;  ; class  TStlProxy;  Base class for the proxy around STL containers. More...;  ; class  TStlSimpleProxy;  ; class  TTreeGeneratorBase;  Base class for code generators like TTreeProxyGenerator and TTreeReaderGenerator. More...;  ; class  TTreeProxyGenerator;  ; class  TTreeReaderArrayBase;  Base class of TTreeReaderArray. More...;  ; class  TTreeReaderDescriptor;  ; class  TTreeReaderGenerator;  ; class  TTreeReaderOpaqueValue;  Read a value in a branch without knowledge of its type. More...;  ; class  TTreeReaderValueBase;  Base class of TTreeReaderValue. More...;  ; class  TTreeView;  ; class  TVirtualCollectionReader;  ; class  TypedIter;  ; struct  UniqueLockRecurseCount;  ; struct  Update;  . Typedefs; using ErrorSystemMsgHandlerFunc_t = std::function< const char *()>;  Retrieves the error string associated with the last system error. ;  ; using FreeIfTMapFile_t = bool(void *);  ; using GetMapFileMapllocDesc_t = void *(void *);  ; typedef TROOT *(* GetROOTFun_t) ();  ; typedef std::map< std::string, std::string > MembersMap_t;  ; using RUidColl = std::vector< Int_t >;  ; typedef TArrayProxy< TArrayType< bool > > TArrayBoolProxy;  ; typedef TArrayProxy< TArrayType< Double32_t > > TArrayDouble32Proxy;  ; typedef TArrayProxy< TArrayType< Double_t > > TArrayDoubleProxy;  ; typedef TArrayProxy< TArrayType< Float16_t > > TArrayFloat16Proxy;  ; typedef TArrayProxy< TArrayType< Float_t > > TArrayFloatProxy;  ; typedef TArrayProxy< TArrayType< Int_t > > TArrayIntProxy;  ; typedef TArrayProxy< TArrayType< Long64_t > > TArrayLong64Proxy;  ; typedef TArrayProxy< TArrayType< Long_t > > TArrayLongProxy;  ; typedef TArrayProxy< TArrayType< UShort_t > > TArrayShortProxy;  ; typedef TArrayProxy< TArrayType< UChar_t > > TArrayUCharProxy;  ; typedef TArrayProxy< ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:15623,Availability,avail,available,15623,"ltype(opPtr);  Internal class used by TF1 to get the right operator() signature from a Functor with several ones. ;  ; template<typename T , typename F > ; auto GetTheRightOp (T(F::*opPtr)(T *, double *)) -> decltype(opPtr);  ; static TVersionCheck gVersionCheck (ROOT_VERSION_CODE);  ; template<typename > ; constexpr bool hasBeginEnd (...);  ; template<typename T > ; constexpr auto hasBeginEnd (int) -> decltype(std::begin(std::declval< T >()), std::end(std::declval< T >()), true);  ; Bool_t HasConsistentHashMember (const char *clName);  Return true is the Hash/RecursiveRemove setup is consistent, i.e. ;  ; Bool_t HasConsistentHashMember (TClass &clRef);  Return true is the Hash/RecursiveRemove setup is consistent, i.e. ;  ; static Bool_t & IsImplicitMTEnabledImpl ();  Keeps track of the status of ImplicitMT w/o resorting to the load of libImt. ;  ; Bool_t IsParBranchProcessingEnabled ();  Returns true if parallel branch processing is enabled. ;  ; int LogicalCPUBandwidthControl ();  Returns the available number of logical cores. ;  ; void MinimalErrorHandler (Int_t level, Bool_t abort_bool, const char *location, const char *msg);  A very simple error handler that is usually replaced by the TROOT default error handler. ;  ; void NotifyDirected (Detail::TBranchProxy *x);  ; std::ostream & operator<< (std::ostream &os, const RConcurrentHashColl::HashValue &h);  ; bool operator== (const RConcurrentHashColl::HashValue &lhs, const RConcurrentHashColl::HashValue &rhs);  ; template<typename T > ; static T ParallelReduceHelper (const std::vector< T > &objs, const std::function< T(T a, T b)> &redfunc);  A helper function to implement the TThreadExecutor::ParallelReduce methods. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, const char *classname);  Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, TClass *cl);  Add the ""pragma C++ clas",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:15776,Availability,error,error,15776," typename F > ; auto GetTheRightOp (T(F::*opPtr)(T *, double *)) -> decltype(opPtr);  ; static TVersionCheck gVersionCheck (ROOT_VERSION_CODE);  ; template<typename > ; constexpr bool hasBeginEnd (...);  ; template<typename T > ; constexpr auto hasBeginEnd (int) -> decltype(std::begin(std::declval< T >()), std::end(std::declval< T >()), true);  ; Bool_t HasConsistentHashMember (const char *clName);  Return true is the Hash/RecursiveRemove setup is consistent, i.e. ;  ; Bool_t HasConsistentHashMember (TClass &clRef);  Return true is the Hash/RecursiveRemove setup is consistent, i.e. ;  ; static Bool_t & IsImplicitMTEnabledImpl ();  Keeps track of the status of ImplicitMT w/o resorting to the load of libImt. ;  ; Bool_t IsParBranchProcessingEnabled ();  Returns true if parallel branch processing is enabled. ;  ; int LogicalCPUBandwidthControl ();  Returns the available number of logical cores. ;  ; void MinimalErrorHandler (Int_t level, Bool_t abort_bool, const char *location, const char *msg);  A very simple error handler that is usually replaced by the TROOT default error handler. ;  ; void NotifyDirected (Detail::TBranchProxy *x);  ; std::ostream & operator<< (std::ostream &os, const RConcurrentHashColl::HashValue &h);  ; bool operator== (const RConcurrentHashColl::HashValue &lhs, const RConcurrentHashColl::HashValue &rhs);  ; template<typename T > ; static T ParallelReduceHelper (const std::vector< T > &objs, const std::function< T(T a, T b)> &redfunc);  A helper function to implement the TThreadExecutor::ParallelReduce methods. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, const char *classname);  Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, TClass *cl);  Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ;  ; void ReleaseDefaultErrorHandler ();  Destructs res",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:15836,Availability,error,error,15836," typename F > ; auto GetTheRightOp (T(F::*opPtr)(T *, double *)) -> decltype(opPtr);  ; static TVersionCheck gVersionCheck (ROOT_VERSION_CODE);  ; template<typename > ; constexpr bool hasBeginEnd (...);  ; template<typename T > ; constexpr auto hasBeginEnd (int) -> decltype(std::begin(std::declval< T >()), std::end(std::declval< T >()), true);  ; Bool_t HasConsistentHashMember (const char *clName);  Return true is the Hash/RecursiveRemove setup is consistent, i.e. ;  ; Bool_t HasConsistentHashMember (TClass &clRef);  Return true is the Hash/RecursiveRemove setup is consistent, i.e. ;  ; static Bool_t & IsImplicitMTEnabledImpl ();  Keeps track of the status of ImplicitMT w/o resorting to the load of libImt. ;  ; Bool_t IsParBranchProcessingEnabled ();  Returns true if parallel branch processing is enabled. ;  ; int LogicalCPUBandwidthControl ();  Returns the available number of logical cores. ;  ; void MinimalErrorHandler (Int_t level, Bool_t abort_bool, const char *location, const char *msg);  A very simple error handler that is usually replaced by the TROOT default error handler. ;  ; void NotifyDirected (Detail::TBranchProxy *x);  ; std::ostream & operator<< (std::ostream &os, const RConcurrentHashColl::HashValue &h);  ; bool operator== (const RConcurrentHashColl::HashValue &lhs, const RConcurrentHashColl::HashValue &rhs);  ; template<typename T > ; static T ParallelReduceHelper (const std::vector< T > &objs, const std::function< T(T a, T b)> &redfunc);  A helper function to implement the TThreadExecutor::ParallelReduce methods. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, const char *classname);  Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, TClass *cl);  Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ;  ; void ReleaseDefaultErrorHandler ();  Destructs res",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:16797,Availability,error,error,16797,"*msg);  A very simple error handler that is usually replaced by the TROOT default error handler. ;  ; void NotifyDirected (Detail::TBranchProxy *x);  ; std::ostream & operator<< (std::ostream &os, const RConcurrentHashColl::HashValue &h);  ; bool operator== (const RConcurrentHashColl::HashValue &lhs, const RConcurrentHashColl::HashValue &rhs);  ; template<typename T > ; static T ParallelReduceHelper (const std::vector< T > &objs, const std::function< T(T a, T b)> &redfunc);  A helper function to implement the TThreadExecutor::ParallelReduce methods. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, const char *classname);  Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, TClass *cl);  Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ;  ; void ReleaseDefaultErrorHandler ();  Destructs resources that are taken by using the default error handler. ;  ; Bool_t RequiresCleanup (TObject &obj);  ; void ResetReadEntry (TFriendProxy *fp);  Helper function to call SetReadEntry on all TFriendProxy. ;  ; ErrorSystemMsgHandlerFunc_t SetErrorSystemMsgHandler (ErrorSystemMsgHandlerFunc_t h);  Returns the previous system error message handler. ;  ; void SetRequireCleanup (TObject &obj);  ; void Sha256 (const unsigned char *data, int len, ULong64_t *fDigest);  ; template<class T > ; void SwapWithObjAtAddr (T &a, std::intptr_t b);  . Variables; R__EXTERN FreeIfTMapFile_t * gFreeIfTMapFile = nullptr;  ; R__EXTERN GetMapFileMapllocDesc_t * gGetMapFileMallocDesc = nullptr;  ; static GetROOTFun_t gGetROOT = &GetROOT1;  ; R__EXTERN void * gMmallocDesc = nullptr;  ; R__EXTERN TROOT * gROOTLocal = ROOT::GetROOT();  . Typedef Documentation. ◆ ErrorSystemMsgHandlerFunc_t. using ROOT::Internal::ErrorSystemMsgHandlerFunc_t = typedef std::function<const char *()>. Retrieves the error string associat",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:17078,Availability,error,error,17078,"ntHashColl::HashValue &lhs, const RConcurrentHashColl::HashValue &rhs);  ; template<typename T > ; static T ParallelReduceHelper (const std::vector< T > &objs, const std::function< T(T a, T b)> &redfunc);  A helper function to implement the TThreadExecutor::ParallelReduce methods. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, const char *classname);  Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, TClass *cl);  Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ;  ; void ReleaseDefaultErrorHandler ();  Destructs resources that are taken by using the default error handler. ;  ; Bool_t RequiresCleanup (TObject &obj);  ; void ResetReadEntry (TFriendProxy *fp);  Helper function to call SetReadEntry on all TFriendProxy. ;  ; ErrorSystemMsgHandlerFunc_t SetErrorSystemMsgHandler (ErrorSystemMsgHandlerFunc_t h);  Returns the previous system error message handler. ;  ; void SetRequireCleanup (TObject &obj);  ; void Sha256 (const unsigned char *data, int len, ULong64_t *fDigest);  ; template<class T > ; void SwapWithObjAtAddr (T &a, std::intptr_t b);  . Variables; R__EXTERN FreeIfTMapFile_t * gFreeIfTMapFile = nullptr;  ; R__EXTERN GetMapFileMapllocDesc_t * gGetMapFileMallocDesc = nullptr;  ; static GetROOTFun_t gGetROOT = &GetROOT1;  ; R__EXTERN void * gMmallocDesc = nullptr;  ; R__EXTERN TROOT * gROOTLocal = ROOT::GetROOT();  . Typedef Documentation. ◆ ErrorSystemMsgHandlerFunc_t. using ROOT::Internal::ErrorSystemMsgHandlerFunc_t = typedef std::function<const char *()>. Retrieves the error string associated with the last system error. ; Definition at line 60 of file TError.h. ◆ FreeIfTMapFile_t. using ROOT::Internal::FreeIfTMapFile_t = typedef bool(void*). Definition at line 139 of file TStorage.h. ◆ GetMapFileMapllocDesc_t. using ROOT::Internal::GetMapFileMapllocDesc_t = t",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:17734,Availability,error,error,17734,"esources that are taken by using the default error handler. ;  ; Bool_t RequiresCleanup (TObject &obj);  ; void ResetReadEntry (TFriendProxy *fp);  Helper function to call SetReadEntry on all TFriendProxy. ;  ; ErrorSystemMsgHandlerFunc_t SetErrorSystemMsgHandler (ErrorSystemMsgHandlerFunc_t h);  Returns the previous system error message handler. ;  ; void SetRequireCleanup (TObject &obj);  ; void Sha256 (const unsigned char *data, int len, ULong64_t *fDigest);  ; template<class T > ; void SwapWithObjAtAddr (T &a, std::intptr_t b);  . Variables; R__EXTERN FreeIfTMapFile_t * gFreeIfTMapFile = nullptr;  ; R__EXTERN GetMapFileMapllocDesc_t * gGetMapFileMallocDesc = nullptr;  ; static GetROOTFun_t gGetROOT = &GetROOT1;  ; R__EXTERN void * gMmallocDesc = nullptr;  ; R__EXTERN TROOT * gROOTLocal = ROOT::GetROOT();  . Typedef Documentation. ◆ ErrorSystemMsgHandlerFunc_t. using ROOT::Internal::ErrorSystemMsgHandlerFunc_t = typedef std::function<const char *()>. Retrieves the error string associated with the last system error. ; Definition at line 60 of file TError.h. ◆ FreeIfTMapFile_t. using ROOT::Internal::FreeIfTMapFile_t = typedef bool(void*). Definition at line 139 of file TStorage.h. ◆ GetMapFileMapllocDesc_t. using ROOT::Internal::GetMapFileMapllocDesc_t = typedef void *(void*). Definition at line 140 of file TStorage.h. ◆ GetROOTFun_t. typedef TROOT *(* ROOT::Internal::GetROOTFun_t) (). Definition at line 397 of file TROOT.cxx. ◆ MembersMap_t. typedef std::map<std::string, std::string> ROOT::Internal::MembersMap_t. Definition at line 20 of file TSchemaType.h. ◆ RUidColl. using ROOT::Internal::RUidColl = typedef std::vector<Int_t>. Definition at line 25 of file RConcurrentHashColl.hxx. ◆ TArrayBoolProxy. typedef TArrayProxy<TArrayType<bool> > ROOT::Internal::TArrayBoolProxy. Definition at line 941 of file TBranchProxy.h. ◆ TArrayDouble32Proxy. typedef TArrayProxy<TArrayType<Double32_t> > ROOT::Internal::TArrayDouble32Proxy. Definition at line 928 of file TBranchProxy",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:17779,Availability,error,error,17779,"esources that are taken by using the default error handler. ;  ; Bool_t RequiresCleanup (TObject &obj);  ; void ResetReadEntry (TFriendProxy *fp);  Helper function to call SetReadEntry on all TFriendProxy. ;  ; ErrorSystemMsgHandlerFunc_t SetErrorSystemMsgHandler (ErrorSystemMsgHandlerFunc_t h);  Returns the previous system error message handler. ;  ; void SetRequireCleanup (TObject &obj);  ; void Sha256 (const unsigned char *data, int len, ULong64_t *fDigest);  ; template<class T > ; void SwapWithObjAtAddr (T &a, std::intptr_t b);  . Variables; R__EXTERN FreeIfTMapFile_t * gFreeIfTMapFile = nullptr;  ; R__EXTERN GetMapFileMapllocDesc_t * gGetMapFileMallocDesc = nullptr;  ; static GetROOTFun_t gGetROOT = &GetROOT1;  ; R__EXTERN void * gMmallocDesc = nullptr;  ; R__EXTERN TROOT * gROOTLocal = ROOT::GetROOT();  . Typedef Documentation. ◆ ErrorSystemMsgHandlerFunc_t. using ROOT::Internal::ErrorSystemMsgHandlerFunc_t = typedef std::function<const char *()>. Retrieves the error string associated with the last system error. ; Definition at line 60 of file TError.h. ◆ FreeIfTMapFile_t. using ROOT::Internal::FreeIfTMapFile_t = typedef bool(void*). Definition at line 139 of file TStorage.h. ◆ GetMapFileMapllocDesc_t. using ROOT::Internal::GetMapFileMapllocDesc_t = typedef void *(void*). Definition at line 140 of file TStorage.h. ◆ GetROOTFun_t. typedef TROOT *(* ROOT::Internal::GetROOTFun_t) (). Definition at line 397 of file TROOT.cxx. ◆ MembersMap_t. typedef std::map<std::string, std::string> ROOT::Internal::MembersMap_t. Definition at line 20 of file TSchemaType.h. ◆ RUidColl. using ROOT::Internal::RUidColl = typedef std::vector<Int_t>. Definition at line 25 of file RConcurrentHashColl.hxx. ◆ TArrayBoolProxy. typedef TArrayProxy<TArrayType<bool> > ROOT::Internal::TArrayBoolProxy. Definition at line 941 of file TBranchProxy.h. ◆ TArrayDouble32Proxy. typedef TArrayProxy<TArrayType<Double32_t> > ROOT::Internal::TArrayDouble32Proxy. Definition at line 928 of file TBranchProxy",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:37769,Availability,avail,available,37769,"on at line 7412 of file TClass.cxx. ◆ HasConsistentHashMember() [2/2]. Bool_t ROOT::Internal::HasConsistentHashMember ; (; TClass & ; clRef). Return true is the Hash/RecursiveRemove setup is consistent, i.e. ; when all classes in the class hierarchy that overload TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor. i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation. ; Definition at line 7438 of file TClass.cxx. ◆ IsImplicitMTEnabledImpl(). static Bool_t & ROOT::Internal::IsImplicitMTEnabledImpl ; (; ). static . Keeps track of the status of ImplicitMT w/o resorting to the load of libImt. ; Definition at line 463 of file TROOT.cxx. ◆ IsParBranchProcessingEnabled(). Bool_t ROOT::Internal::IsParBranchProcessingEnabled ; (; ). Returns true if parallel branch processing is enabled. ; Definition at line 447 of file TROOT.cxx. ◆ LogicalCPUBandwidthControl(). int ROOT::Internal::LogicalCPUBandwidthControl ; (; ). Returns the available number of logical cores. . Checks if there is CFS bandwidth control in place (linux, via cgroups, assuming standard paths); Otherwise, returns the number of logical cores provided by std::thread::hardware_concurrency() . Definition at line 50 of file RTaskArena.cxx. ◆ MinimalErrorHandler(). void ROOT::Internal::MinimalErrorHandler ; (; Int_t ; level, . Bool_t ; abort_bool, . const char * ; location, . const char * ; msg . ). A very simple error handler that is usually replaced by the TROOT default error handler. ; The minimal error handler is not serialized across threads, so that output of multi-threaded programs can get scrambled Noteabort() is only called if abort_bool is true and level >= gErrorIgnoreLevel ; Definition at line 67 of file TError.cxx. ◆ NotifyDirected(). void ROOT::Internal::NotifyDirected ; (; Detail::TBranchProxy * ; x). Definition at line 36 of file TBranchProxyDirector.cxx. ◆ operator<<(). std::ostream & ROOT::Internal::operator<< ; (; std::ostream & ; os, . const",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:38222,Availability,error,error,38222,"x. ◆ IsImplicitMTEnabledImpl(). static Bool_t & ROOT::Internal::IsImplicitMTEnabledImpl ; (; ). static . Keeps track of the status of ImplicitMT w/o resorting to the load of libImt. ; Definition at line 463 of file TROOT.cxx. ◆ IsParBranchProcessingEnabled(). Bool_t ROOT::Internal::IsParBranchProcessingEnabled ; (; ). Returns true if parallel branch processing is enabled. ; Definition at line 447 of file TROOT.cxx. ◆ LogicalCPUBandwidthControl(). int ROOT::Internal::LogicalCPUBandwidthControl ; (; ). Returns the available number of logical cores. . Checks if there is CFS bandwidth control in place (linux, via cgroups, assuming standard paths); Otherwise, returns the number of logical cores provided by std::thread::hardware_concurrency() . Definition at line 50 of file RTaskArena.cxx. ◆ MinimalErrorHandler(). void ROOT::Internal::MinimalErrorHandler ; (; Int_t ; level, . Bool_t ; abort_bool, . const char * ; location, . const char * ; msg . ). A very simple error handler that is usually replaced by the TROOT default error handler. ; The minimal error handler is not serialized across threads, so that output of multi-threaded programs can get scrambled Noteabort() is only called if abort_bool is true and level >= gErrorIgnoreLevel ; Definition at line 67 of file TError.cxx. ◆ NotifyDirected(). void ROOT::Internal::NotifyDirected ; (; Detail::TBranchProxy * ; x). Definition at line 36 of file TBranchProxyDirector.cxx. ◆ operator<<(). std::ostream & ROOT::Internal::operator<< ; (; std::ostream & ; os, . const RConcurrentHashColl::HashValue & ; h . ). Definition at line 24 of file RConcurrentHashColl.cxx. ◆ operator==(). bool ROOT::Internal::operator== ; (; const RConcurrentHashColl::HashValue & ; lhs, . const RConcurrentHashColl::HashValue & ; rhs . ). inline . Definition at line 69 of file RConcurrentHashColl.hxx. ◆ ParallelReduceHelper(). template<typename T > . static T ROOT::Internal::ParallelReduceHelper ; (; const std::vector< T > & ; objs, . const std::function< T(",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:38282,Availability,error,error,38282,"x. ◆ IsImplicitMTEnabledImpl(). static Bool_t & ROOT::Internal::IsImplicitMTEnabledImpl ; (; ). static . Keeps track of the status of ImplicitMT w/o resorting to the load of libImt. ; Definition at line 463 of file TROOT.cxx. ◆ IsParBranchProcessingEnabled(). Bool_t ROOT::Internal::IsParBranchProcessingEnabled ; (; ). Returns true if parallel branch processing is enabled. ; Definition at line 447 of file TROOT.cxx. ◆ LogicalCPUBandwidthControl(). int ROOT::Internal::LogicalCPUBandwidthControl ; (; ). Returns the available number of logical cores. . Checks if there is CFS bandwidth control in place (linux, via cgroups, assuming standard paths); Otherwise, returns the number of logical cores provided by std::thread::hardware_concurrency() . Definition at line 50 of file RTaskArena.cxx. ◆ MinimalErrorHandler(). void ROOT::Internal::MinimalErrorHandler ; (; Int_t ; level, . Bool_t ; abort_bool, . const char * ; location, . const char * ; msg . ). A very simple error handler that is usually replaced by the TROOT default error handler. ; The minimal error handler is not serialized across threads, so that output of multi-threaded programs can get scrambled Noteabort() is only called if abort_bool is true and level >= gErrorIgnoreLevel ; Definition at line 67 of file TError.cxx. ◆ NotifyDirected(). void ROOT::Internal::NotifyDirected ; (; Detail::TBranchProxy * ; x). Definition at line 36 of file TBranchProxyDirector.cxx. ◆ operator<<(). std::ostream & ROOT::Internal::operator<< ; (; std::ostream & ; os, . const RConcurrentHashColl::HashValue & ; h . ). Definition at line 24 of file RConcurrentHashColl.cxx. ◆ operator==(). bool ROOT::Internal::operator== ; (; const RConcurrentHashColl::HashValue & ; lhs, . const RConcurrentHashColl::HashValue & ; rhs . ). inline . Definition at line 69 of file RConcurrentHashColl.hxx. ◆ ParallelReduceHelper(). template<typename T > . static T ROOT::Internal::ParallelReduceHelper ; (; const std::vector< T > & ; objs, . const std::function< T(",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:38311,Availability,error,error,38311,"load of libImt. ; Definition at line 463 of file TROOT.cxx. ◆ IsParBranchProcessingEnabled(). Bool_t ROOT::Internal::IsParBranchProcessingEnabled ; (; ). Returns true if parallel branch processing is enabled. ; Definition at line 447 of file TROOT.cxx. ◆ LogicalCPUBandwidthControl(). int ROOT::Internal::LogicalCPUBandwidthControl ; (; ). Returns the available number of logical cores. . Checks if there is CFS bandwidth control in place (linux, via cgroups, assuming standard paths); Otherwise, returns the number of logical cores provided by std::thread::hardware_concurrency() . Definition at line 50 of file RTaskArena.cxx. ◆ MinimalErrorHandler(). void ROOT::Internal::MinimalErrorHandler ; (; Int_t ; level, . Bool_t ; abort_bool, . const char * ; location, . const char * ; msg . ). A very simple error handler that is usually replaced by the TROOT default error handler. ; The minimal error handler is not serialized across threads, so that output of multi-threaded programs can get scrambled Noteabort() is only called if abort_bool is true and level >= gErrorIgnoreLevel ; Definition at line 67 of file TError.cxx. ◆ NotifyDirected(). void ROOT::Internal::NotifyDirected ; (; Detail::TBranchProxy * ; x). Definition at line 36 of file TBranchProxyDirector.cxx. ◆ operator<<(). std::ostream & ROOT::Internal::operator<< ; (; std::ostream & ; os, . const RConcurrentHashColl::HashValue & ; h . ). Definition at line 24 of file RConcurrentHashColl.cxx. ◆ operator==(). bool ROOT::Internal::operator== ; (; const RConcurrentHashColl::HashValue & ; lhs, . const RConcurrentHashColl::HashValue & ; rhs . ). inline . Definition at line 69 of file RConcurrentHashColl.hxx. ◆ ParallelReduceHelper(). template<typename T > . static T ROOT::Internal::ParallelReduceHelper ; (; const std::vector< T > & ; objs, . const std::function< T(T a, T b)> & ; redfunc . ). static . A helper function to implement the TThreadExecutor::ParallelReduce methods. ; Definition at line 122 of file TThreadExecutor.cxx",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:40370,Availability,error,error,40370,"lReduce methods. ; Definition at line 122 of file TThreadExecutor.cxx. ◆ R__AddPragmaForClass() [1/2]. static bool ROOT::Internal::R__AddPragmaForClass ; (; TTreeProxyGenerator * ; gen, . const char * ; classname . ). static . Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ; (I.e. return false if a container of this class can not have a ""pragma C++ class"" ; Definition at line 1588 of file TTreeProxyGenerator.cxx. ◆ R__AddPragmaForClass() [2/2]. static bool ROOT::Internal::R__AddPragmaForClass ; (; TTreeProxyGenerator * ; gen, . TClass * ; cl . ). static . Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ; (I.e. return false if a container of this class can not have a ""pragma C++ class"" ; Definition at line 1564 of file TTreeProxyGenerator.cxx. ◆ ReleaseDefaultErrorHandler(). void ROOT::Internal::ReleaseDefaultErrorHandler ; (; ). Destructs resources that are taken by using the default error handler. ; This function is called during the destruction of gROOT. ; Definition at line 47 of file TErrorDefaultHandler.cxx. ◆ RequiresCleanup(). Bool_t ROOT::Internal::RequiresCleanup ; (; TObject & ; obj). inline . Definition at line 386 of file TROOT.h. ◆ ResetReadEntry(). void ROOT::Internal::ResetReadEntry ; (; TFriendProxy * ; fp). Helper function to call SetReadEntry on all TFriendProxy. ; Definition at line 39 of file TBranchProxyDirector.cxx. ◆ SetErrorSystemMsgHandler(). ErrorSystemMsgHandlerFunc_t ROOT::Internal::SetErrorSystemMsgHandler ; (; ErrorSystemMsgHandlerFunc_t ; h). Returns the previous system error message handler. ; Definition at line 56 of file TError.cxx. ◆ SetRequireCleanup(). void ROOT::Internal::SetRequireCleanup ; (; TObject & ; obj). inline . Definition at line 381 of file TROOT.h. ◆ Sha256(). void ROOT::Internal::Sha256 ; (; const unsigned char * ; data, . int ; len, . ULong64_t * ; fDigest . ). Definition at line 267 of file R",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:40999,Availability,error,error,40999,"ass"" if needed and return true if it has been added or if it is known to not be needed. ; (I.e. return false if a container of this class can not have a ""pragma C++ class"" ; Definition at line 1564 of file TTreeProxyGenerator.cxx. ◆ ReleaseDefaultErrorHandler(). void ROOT::Internal::ReleaseDefaultErrorHandler ; (; ). Destructs resources that are taken by using the default error handler. ; This function is called during the destruction of gROOT. ; Definition at line 47 of file TErrorDefaultHandler.cxx. ◆ RequiresCleanup(). Bool_t ROOT::Internal::RequiresCleanup ; (; TObject & ; obj). inline . Definition at line 386 of file TROOT.h. ◆ ResetReadEntry(). void ROOT::Internal::ResetReadEntry ; (; TFriendProxy * ; fp). Helper function to call SetReadEntry on all TFriendProxy. ; Definition at line 39 of file TBranchProxyDirector.cxx. ◆ SetErrorSystemMsgHandler(). ErrorSystemMsgHandlerFunc_t ROOT::Internal::SetErrorSystemMsgHandler ; (; ErrorSystemMsgHandlerFunc_t ; h). Returns the previous system error message handler. ; Definition at line 56 of file TError.cxx. ◆ SetRequireCleanup(). void ROOT::Internal::SetRequireCleanup ; (; TObject & ; obj). inline . Definition at line 381 of file TROOT.h. ◆ Sha256(). void ROOT::Internal::Sha256 ; (; const unsigned char * ; data, . int ; len, . ULong64_t * ; fDigest . ). Definition at line 267 of file RSha256.hxx. ◆ SwapWithObjAtAddr(). template<class T > . void ROOT::Internal::SwapWithObjAtAddr ; (; T & ; a, . std::intptr_t ; b . ). inline . Definition at line 39 of file TPython.h. Variable Documentation. ◆ gFreeIfTMapFile. ROOT::Internal::FreeIfTMapFile_t * ROOT::Internal::gFreeIfTMapFile = nullptr. Definition at line 141 of file TStorage.h. ◆ gGetMapFileMallocDesc. ROOT::Internal::GetMapFileMapllocDesc_t * ROOT::Internal::gGetMapFileMallocDesc = nullptr. Definition at line 142 of file TStorage.h. ◆ gGetROOT. GetROOTFun_t ROOT::Internal::gGetROOT = &GetROOT1. static . Definition at line 399 of file TROOT.cxx. ◆ gMmallocDesc. void * ROO",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:4871,Deployability,release,release,4871,"bject in TClonesArray. More...;  ; struct  TClassGetClassHelper;  ; struct  TClassGetClassHelper< std::pair< F, S > >;  ; class  TClonesArrayOwnershipRAII;  ; class  TDefaultInitBehavior;  ; struct  TDirectoryAtomicAdapter;  Internal class used in the implementation of gDirectory The objects of type TDirectoryAtomicAdapter should only be used inside the thread that created them. More...;  ; class  TExecutor;  This class implements the interface to execute the same task multiple times, sequentially or in parallel depending on the execution policy passed as a first parameter on construction, and possibly with different arguments every time. More...;  ; struct  TF1Builder;  Internal class used by TF1 for defining template specialization for different TF1 constructors More...;  ; struct  TF1Builder< const char * >;  TF1 building from a string used to build a TFormula based on a lambda function. More...;  ; struct  TF1Builder< Func * >;  ; class  TFriendProxy;  ; class  TFriendProxyDescriptor;  ; class  TGILRAII;  Class to acquire and release the Python GIL where it applies, i.e. More...;  ; struct  THashConsistencyHolder;  ; class  THnBaseBinIter;  Iterator over THnBase bins (internal implementation). More...;  ; class  THnBaseBrowsable;  TBrowser helper for THnBase. More...;  ; class  TImpProxy;  Template of the proxy around objects. More...;  ; class  TInitBehavior;  ; struct  TMultiArrayType;  Helper class for proxy around multi dimension array. More...;  ; class  TNamedBranchProxy;  ; class  TObjProxy;  ; class  TOperatorNewHelper;  ; class  TParBranchProcessingRAII;  ; class  TQObjectInitBehavior;  ; class  TROOTAllocator;  ; struct  TSchemaHelper;  ; class  TSchemaRuleProcessor;  ; struct  TSchemaType;  ; class  TSpinLockGuard;  A spin mutex-as-code-guard class. More...;  ; class  TStdBitsetHelper;  ; class  TStlArrayProxy;  Template of the Concrete Implementation of the branch proxy around an stl container of array of T. More...;  ; class  TStlImpProxy;  Template",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:1931,Integrability,protocol,protocol,1931,":*)(const T *, const double *)>;  ; struct  GetFunctorType< T(F::*)(T *, double *) const >;  ; struct  GetFunctorType< T(F::*)(T *, double *)>;  ; struct  InterpreterMutexRegistrationRAII;  ; struct  ParsingStateRAII;  RAII used to store Parser, Sema, Preprocessor state for recursive parsing. More...;  ; struct  RBaseType;  ; struct  RCast;  ; struct  RCast< T, false, false >;  ; struct  RCast< T, false, true >;  ; class  RConcurrentHashColl;  This class is a thread-safe associative collection connecting a 256 bits digest/hash to a collection of uid (integer) This is used in the handling of the StreamerInfo record in TFile. More...;  ; struct  RDavixFileDes;  ; struct  RecurseCounts;  ; struct  RHashMap;  ; class  RIoUring;  ; class  RRawFile;  The RRawFile provides read-only access to local and remote files. More...;  ; class  RRawFileDavix;  The RRawFileDavix class provides read-only access to remote non-ROOT files. More...;  ; class  RRawFileNetXNG;  The RRawFileNetXNG class provides read-only access to remote files using root/roots protocol. More...;  ; struct  RRawFileNetXNGImpl;  ; class  RRawFileTFile;  The RRawFileTFile wraps an open TFile, but does not take ownership. More...;  ; class  RRawFileUnix;  The RRawFileUnix class uses POSIX calls to read from a mounted file system. More...;  ; class  RRawFileWin;  The RRawFileWin class uses portable C I/O calls to read from a drive. More...;  ; class  RSlotStack;  A thread-safe stack of N indexes (0 to size - 1). More...;  ; struct  RSlotStackRAII;  A RAII object to pop and push slot numbers from a RSlotStack object. More...;  ; class  RStl;  ; class  RTaskArenaWrapper;  Wrapper for tbb::task_arena. More...;  ; class  TArrayCharProxy;  Concrete Implementation of the branch proxy around the data members which are array of char. More...;  ; class  TArrayProxy;  Template for concrete implementation of proxy around array of T. More...;  ; struct  TArrayType;  Helper template to be able to determine and use array dime",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:2025,Integrability,wrap,wraps,2025,"double *)>;  ; struct  InterpreterMutexRegistrationRAII;  ; struct  ParsingStateRAII;  RAII used to store Parser, Sema, Preprocessor state for recursive parsing. More...;  ; struct  RBaseType;  ; struct  RCast;  ; struct  RCast< T, false, false >;  ; struct  RCast< T, false, true >;  ; class  RConcurrentHashColl;  This class is a thread-safe associative collection connecting a 256 bits digest/hash to a collection of uid (integer) This is used in the handling of the StreamerInfo record in TFile. More...;  ; struct  RDavixFileDes;  ; struct  RecurseCounts;  ; struct  RHashMap;  ; class  RIoUring;  ; class  RRawFile;  The RRawFile provides read-only access to local and remote files. More...;  ; class  RRawFileDavix;  The RRawFileDavix class provides read-only access to remote non-ROOT files. More...;  ; class  RRawFileNetXNG;  The RRawFileNetXNG class provides read-only access to remote files using root/roots protocol. More...;  ; struct  RRawFileNetXNGImpl;  ; class  RRawFileTFile;  The RRawFileTFile wraps an open TFile, but does not take ownership. More...;  ; class  RRawFileUnix;  The RRawFileUnix class uses POSIX calls to read from a mounted file system. More...;  ; class  RRawFileWin;  The RRawFileWin class uses portable C I/O calls to read from a drive. More...;  ; class  RSlotStack;  A thread-safe stack of N indexes (0 to size - 1). More...;  ; struct  RSlotStackRAII;  A RAII object to pop and push slot numbers from a RSlotStack object. More...;  ; class  RStl;  ; class  RTaskArenaWrapper;  Wrapper for tbb::task_arena. More...;  ; class  TArrayCharProxy;  Concrete Implementation of the branch proxy around the data members which are array of char. More...;  ; class  TArrayProxy;  Template for concrete implementation of proxy around array of T. More...;  ; struct  TArrayType;  Helper template to be able to determine and use array dimensions. More...;  ; struct  TArrayType< T, 0 >;  Helper class for proxy around multi dimension array. More...;  ; class  TAtomicPoin",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:4264,Integrability,interface,interface,4264," TBranchProxyHelper;  String builder to be used in the constructors. More...;  ; class  TCDGIILIBase;  ; class  TCheckHashRecursiveRemoveConsistency;  ; class  TClaArrayProxy;  Template of the Concrete Implementation of the branch proxy around an TClonesArray of array of T. More...;  ; class  TClaImpProxy;  Template of the Concrete Implementation of the branch proxy around TClonesArray of T. More...;  ; class  TClaObjProxy;  ; class  TClaProxy;  Base class for the proxy around object in TClonesArray. More...;  ; struct  TClassGetClassHelper;  ; struct  TClassGetClassHelper< std::pair< F, S > >;  ; class  TClonesArrayOwnershipRAII;  ; class  TDefaultInitBehavior;  ; struct  TDirectoryAtomicAdapter;  Internal class used in the implementation of gDirectory The objects of type TDirectoryAtomicAdapter should only be used inside the thread that created them. More...;  ; class  TExecutor;  This class implements the interface to execute the same task multiple times, sequentially or in parallel depending on the execution policy passed as a first parameter on construction, and possibly with different arguments every time. More...;  ; struct  TF1Builder;  Internal class used by TF1 for defining template specialization for different TF1 constructors More...;  ; struct  TF1Builder< const char * >;  TF1 building from a string used to build a TFormula based on a lambda function. More...;  ; struct  TF1Builder< Func * >;  ; class  TFriendProxy;  ; class  TFriendProxyDescriptor;  ; class  TGILRAII;  Class to acquire and release the Python GIL where it applies, i.e. More...;  ; struct  THashConsistencyHolder;  ; class  THnBaseBinIter;  Iterator over THnBase bins (internal implementation). More...;  ; class  THnBaseBrowsable;  TBrowser helper for THnBase. More...;  ; class  TImpProxy;  Template of the proxy around objects. More...;  ; class  TInitBehavior;  ; struct  TMultiArrayType;  Helper class for proxy around multi dimension array. More...;  ; class  TNamedBranchProxy;  ; class  T",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:4343,Integrability,depend,depending,4343," TBranchProxyHelper;  String builder to be used in the constructors. More...;  ; class  TCDGIILIBase;  ; class  TCheckHashRecursiveRemoveConsistency;  ; class  TClaArrayProxy;  Template of the Concrete Implementation of the branch proxy around an TClonesArray of array of T. More...;  ; class  TClaImpProxy;  Template of the Concrete Implementation of the branch proxy around TClonesArray of T. More...;  ; class  TClaObjProxy;  ; class  TClaProxy;  Base class for the proxy around object in TClonesArray. More...;  ; struct  TClassGetClassHelper;  ; struct  TClassGetClassHelper< std::pair< F, S > >;  ; class  TClonesArrayOwnershipRAII;  ; class  TDefaultInitBehavior;  ; struct  TDirectoryAtomicAdapter;  Internal class used in the implementation of gDirectory The objects of type TDirectoryAtomicAdapter should only be used inside the thread that created them. More...;  ; class  TExecutor;  This class implements the interface to execute the same task multiple times, sequentially or in parallel depending on the execution policy passed as a first parameter on construction, and possibly with different arguments every time. More...;  ; struct  TF1Builder;  Internal class used by TF1 for defining template specialization for different TF1 constructors More...;  ; struct  TF1Builder< const char * >;  TF1 building from a string used to build a TFormula based on a lambda function. More...;  ; struct  TF1Builder< Func * >;  ; class  TFriendProxy;  ; class  TFriendProxyDescriptor;  ; class  TGILRAII;  Class to acquire and release the Python GIL where it applies, i.e. More...;  ; struct  THashConsistencyHolder;  ; class  THnBaseBinIter;  Iterator over THnBase bins (internal implementation). More...;  ; class  THnBaseBrowsable;  TBrowser helper for THnBase. More...;  ; class  TImpProxy;  Template of the proxy around objects. More...;  ; class  TInitBehavior;  ; struct  TMultiArrayType;  Helper class for proxy around multi dimension array. More...;  ; class  TNamedBranchProxy;  ; class  T",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:17084,Integrability,message,message,17084,"ntHashColl::HashValue &lhs, const RConcurrentHashColl::HashValue &rhs);  ; template<typename T > ; static T ParallelReduceHelper (const std::vector< T > &objs, const std::function< T(T a, T b)> &redfunc);  A helper function to implement the TThreadExecutor::ParallelReduce methods. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, const char *classname);  Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, TClass *cl);  Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ;  ; void ReleaseDefaultErrorHandler ();  Destructs resources that are taken by using the default error handler. ;  ; Bool_t RequiresCleanup (TObject &obj);  ; void ResetReadEntry (TFriendProxy *fp);  Helper function to call SetReadEntry on all TFriendProxy. ;  ; ErrorSystemMsgHandlerFunc_t SetErrorSystemMsgHandler (ErrorSystemMsgHandlerFunc_t h);  Returns the previous system error message handler. ;  ; void SetRequireCleanup (TObject &obj);  ; void Sha256 (const unsigned char *data, int len, ULong64_t *fDigest);  ; template<class T > ; void SwapWithObjAtAddr (T &a, std::intptr_t b);  . Variables; R__EXTERN FreeIfTMapFile_t * gFreeIfTMapFile = nullptr;  ; R__EXTERN GetMapFileMapllocDesc_t * gGetMapFileMallocDesc = nullptr;  ; static GetROOTFun_t gGetROOT = &GetROOT1;  ; R__EXTERN void * gMmallocDesc = nullptr;  ; R__EXTERN TROOT * gROOTLocal = ROOT::GetROOT();  . Typedef Documentation. ◆ ErrorSystemMsgHandlerFunc_t. using ROOT::Internal::ErrorSystemMsgHandlerFunc_t = typedef std::function<const char *()>. Retrieves the error string associated with the last system error. ; Definition at line 60 of file TError.h. ◆ FreeIfTMapFile_t. using ROOT::Internal::FreeIfTMapFile_t = typedef bool(void*). Definition at line 139 of file TStorage.h. ◆ GetMapFileMapllocDesc_t. using ROOT::Internal::GetMapFileMapllocDesc_t = t",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:36653,Integrability,rout,routines,36653,"finition at line 219 of file TF1.h. ◆ gVersionCheck(). static TVersionCheck ROOT::Internal::gVersionCheck ; (; ROOT_VERSION_CODE ; ). static . ◆ hasBeginEnd() [1/2]. template<typename > . constexpr bool ROOT::Internal::hasBeginEnd ; (;  ; ...). constexpr . Definition at line 72 of file RRangeCast.hxx. ◆ hasBeginEnd() [2/2]. template<typename T > . constexpr auto ROOT::Internal::hasBeginEnd ; (; int ; ); -> decltype(std::begin(std::declval<T>()), std::end(std::declval<T>()), true). constexpr . Definition at line 66 of file RRangeCast.hxx. ◆ HasConsistentHashMember() [1/2]. Bool_t ROOT::Internal::HasConsistentHashMember ; (; const char * ; cname). Return true is the Hash/RecursiveRemove setup is consistent, i.e. ; when all classes in the class hierarchy that overload TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor. i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation. This routines is used for a small subset of the class for which we need the answer before gROOT is properly initialized. ; Definition at line 7412 of file TClass.cxx. ◆ HasConsistentHashMember() [2/2]. Bool_t ROOT::Internal::HasConsistentHashMember ; (; TClass & ; clRef). Return true is the Hash/RecursiveRemove setup is consistent, i.e. ; when all classes in the class hierarchy that overload TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor. i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation. ; Definition at line 7438 of file TClass.cxx. ◆ IsImplicitMTEnabledImpl(). static Bool_t & ROOT::Internal::IsImplicitMTEnabledImpl ; (; ). static . Keeps track of the status of ImplicitMT w/o resorting to the load of libImt. ; Definition at line 463 of file TROOT.cxx. ◆ IsParBranchProcessingEnabled(). Bool_t ROOT::Internal::IsParBranchProcessingEnabled ; (; ). Returns true if parallel branch processing is enabled. ; Definition at line 447 of file TROOT.cxx. ◆ LogicalCPUBandwidthControl(). int RO",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:41005,Integrability,message,message,41005,"ass"" if needed and return true if it has been added or if it is known to not be needed. ; (I.e. return false if a container of this class can not have a ""pragma C++ class"" ; Definition at line 1564 of file TTreeProxyGenerator.cxx. ◆ ReleaseDefaultErrorHandler(). void ROOT::Internal::ReleaseDefaultErrorHandler ; (; ). Destructs resources that are taken by using the default error handler. ; This function is called during the destruction of gROOT. ; Definition at line 47 of file TErrorDefaultHandler.cxx. ◆ RequiresCleanup(). Bool_t ROOT::Internal::RequiresCleanup ; (; TObject & ; obj). inline . Definition at line 386 of file TROOT.h. ◆ ResetReadEntry(). void ROOT::Internal::ResetReadEntry ; (; TFriendProxy * ; fp). Helper function to call SetReadEntry on all TFriendProxy. ; Definition at line 39 of file TBranchProxyDirector.cxx. ◆ SetErrorSystemMsgHandler(). ErrorSystemMsgHandlerFunc_t ROOT::Internal::SetErrorSystemMsgHandler ; (; ErrorSystemMsgHandlerFunc_t ; h). Returns the previous system error message handler. ; Definition at line 56 of file TError.cxx. ◆ SetRequireCleanup(). void ROOT::Internal::SetRequireCleanup ; (; TObject & ; obj). inline . Definition at line 381 of file TROOT.h. ◆ Sha256(). void ROOT::Internal::Sha256 ; (; const unsigned char * ; data, . int ; len, . ULong64_t * ; fDigest . ). Definition at line 267 of file RSha256.hxx. ◆ SwapWithObjAtAddr(). template<class T > . void ROOT::Internal::SwapWithObjAtAddr ; (; T & ; a, . std::intptr_t ; b . ). inline . Definition at line 39 of file TPython.h. Variable Documentation. ◆ gFreeIfTMapFile. ROOT::Internal::FreeIfTMapFile_t * ROOT::Internal::gFreeIfTMapFile = nullptr. Definition at line 141 of file TStorage.h. ◆ gGetMapFileMallocDesc. ROOT::Internal::GetMapFileMapllocDesc_t * ROOT::Internal::gGetMapFileMallocDesc = nullptr. Definition at line 142 of file TStorage.h. ◆ gGetROOT. GetROOTFun_t ROOT::Internal::gGetROOT = &GetROOT1. static . Definition at line 399 of file TROOT.cxx. ◆ gMmallocDesc. void * ROO",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:2245,Modifiability,portab,portable,2245," T, false, false >;  ; struct  RCast< T, false, true >;  ; class  RConcurrentHashColl;  This class is a thread-safe associative collection connecting a 256 bits digest/hash to a collection of uid (integer) This is used in the handling of the StreamerInfo record in TFile. More...;  ; struct  RDavixFileDes;  ; struct  RecurseCounts;  ; struct  RHashMap;  ; class  RIoUring;  ; class  RRawFile;  The RRawFile provides read-only access to local and remote files. More...;  ; class  RRawFileDavix;  The RRawFileDavix class provides read-only access to remote non-ROOT files. More...;  ; class  RRawFileNetXNG;  The RRawFileNetXNG class provides read-only access to remote files using root/roots protocol. More...;  ; struct  RRawFileNetXNGImpl;  ; class  RRawFileTFile;  The RRawFileTFile wraps an open TFile, but does not take ownership. More...;  ; class  RRawFileUnix;  The RRawFileUnix class uses POSIX calls to read from a mounted file system. More...;  ; class  RRawFileWin;  The RRawFileWin class uses portable C I/O calls to read from a drive. More...;  ; class  RSlotStack;  A thread-safe stack of N indexes (0 to size - 1). More...;  ; struct  RSlotStackRAII;  A RAII object to pop and push slot numbers from a RSlotStack object. More...;  ; class  RStl;  ; class  RTaskArenaWrapper;  Wrapper for tbb::task_arena. More...;  ; class  TArrayCharProxy;  Concrete Implementation of the branch proxy around the data members which are array of char. More...;  ; class  TArrayProxy;  Template for concrete implementation of proxy around array of T. More...;  ; struct  TArrayType;  Helper template to be able to determine and use array dimensions. More...;  ; struct  TArrayType< T, 0 >;  Helper class for proxy around multi dimension array. More...;  ; class  TAtomicPointer;  Helper class to manage atomic pointers. More...;  ; class  TBranchCacheInfo;  ; class  TBranchDescriptor;  ; class  TBranchIMTHelper;  A helper class for managing IMT work during TTree:Fill operations. More...;  ; class  TB",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:12706,Modifiability,inherit,inherits,12706,"loat_t > TStlFloatProxy;  ; typedef TStlImpProxy< Int_t > TStlIntProxy;  ; typedef TStlImpProxy< Long64_t > TStlLong64Proxy;  ; typedef TStlImpProxy< Long_t > TStlLongProxy;  ; typedef TStlImpProxy< Short_t > TStlShortProxy;  ; typedef TStlImpProxy< UChar_t > TStlUCharProxy;  ; typedef TStlImpProxy< UInt_t > TStlUIntProxy;  ; typedef TStlImpProxy< ULong64_t > TStlULong64Proxy;  ; typedef TStlImpProxy< ULong_t > TStlULongProxy;  ; typedef TStlImpProxy< UShort_t > TStlUShortProxy;  ; typedef TImpProxy< UChar_t > TUCharProxy;  ; typedef TImpProxy< UInt_t > TUIntProxy;  ; typedef TImpProxy< ULong64_t > TULong64Proxy;  ; typedef TImpProxy< ULong_t > TULongProxy;  ; typedef TImpProxy< UShort_t > TUShortProxy;  . Enumerations; enum  ELocation { kOut =0; , kClones; , kSTL; };  0 for the general case, 1 when this a split clases inside a TClonesArray, 2 when this is a split classes inside an STL container. More...;  . Functions; tbb::isolated_task_group * CastToTG (void *p);  ; bool ContaineeInheritsFrom (TClass *cl, TClass *base);  Return true if 'cl' inherits from 'base'. ;  ; void DefaultStreamer (TBuffer &R__b, const TClass *cl, void *objpointer);  Default streamer implementation used by ClassDefInline to avoid requirement to include TBuffer.h. ;  ; const TQObjectInitBehavior * DefineBehavior (TQObject *, TQObject *);  ; const TInitBehavior * DefineBehavior (void *, void *);  ; bool DeleteChangesMemory ();  ; bool DeleteChangesMemoryImpl ();  ; void DisableParBranchProcessing ();  Globally disables the IMT use case of parallel branch processing, deactivating the corresponding locks. ;  ; const TCollection & EmptyCollection ();  Return an empty collection for use with nullptr TRangeCast. ;  ; void EnableParBranchProcessing ();  Globally enables the parallel branch processing, which is a case of implicit multi-threading (IMT) in ROOT, activating the required locks. ;  ; void EvalParMultiDim (TF1 *func, Double_t *out, const Double_t *x, std::size_t size, std::size_t rows, Dou",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:31265,Modifiability,inherit,inherits,31265,"roxy. Definition at line 915 of file TBranchProxy.h. ◆ TULong64Proxy. typedef TImpProxy<ULong64_t> ROOT::Internal::TULong64Proxy. Definition at line 917 of file TBranchProxy.h. ◆ TULongProxy. typedef TImpProxy<ULong_t> ROOT::Internal::TULongProxy. Definition at line 916 of file TBranchProxy.h. ◆ TUShortProxy. typedef TImpProxy<UShort_t> ROOT::Internal::TUShortProxy. Definition at line 918 of file TBranchProxy.h. Enumeration Type Documentation. ◆ ELocation. enum ROOT::Internal::ELocation. 0 for the general case, 1 when this a split clases inside a TClonesArray, 2 when this is a split classes inside an STL container. . EnumeratorkOut ; kClones ; kSTL . Definition at line 38 of file TTreeReaderGenerator.h. Function Documentation. ◆ CastToTG(). tbb::isolated_task_group * ROOT::Internal::CastToTG ; (; void * ; p). Definition at line 43 of file TTaskGroup.cxx. ◆ ContaineeInheritsFrom(). bool ROOT::Internal::ContaineeInheritsFrom ; (; TClass * ; cl, . TClass * ; base . ). Return true if 'cl' inherits from 'base'. ; Definition at line 831 of file TCollection.cxx. ◆ DefaultStreamer(). void ROOT::Internal::DefaultStreamer ; (; TBuffer & ; R__b, . const TClass * ; cl, . void * ; objpointer . ). Default streamer implementation used by ClassDefInline to avoid requirement to include TBuffer.h. ; Definition at line 30 of file TBuffer.cxx. ◆ DefineBehavior() [1/2]. const TQObjectInitBehavior * ROOT::Internal::DefineBehavior ; (; TQObject * ; , . TQObject * ;  . ). inline . Definition at line 74 of file TQClass.h. ◆ DefineBehavior() [2/2]. const TInitBehavior * ROOT::Internal::DefineBehavior ; (; void * ; , . void * ;  . ). Definition at line 45 of file TGenericClassInfo.cxx. ◆ DeleteChangesMemory(). bool ROOT::Internal::DeleteChangesMemory ; (; ). Definition at line 133 of file TObject.cxx. ◆ DeleteChangesMemoryImpl(). bool ROOT::Internal::DeleteChangesMemoryImpl ; (; ). Definition at line 76 of file TObject.cxx. ◆ DisableParBranchProcessing(). void ROOT::Internal::DisableParBranch",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:13475,Performance,multi-thread,multi-threading,13475,"ase, 1 when this a split clases inside a TClonesArray, 2 when this is a split classes inside an STL container. More...;  . Functions; tbb::isolated_task_group * CastToTG (void *p);  ; bool ContaineeInheritsFrom (TClass *cl, TClass *base);  Return true if 'cl' inherits from 'base'. ;  ; void DefaultStreamer (TBuffer &R__b, const TClass *cl, void *objpointer);  Default streamer implementation used by ClassDefInline to avoid requirement to include TBuffer.h. ;  ; const TQObjectInitBehavior * DefineBehavior (TQObject *, TQObject *);  ; const TInitBehavior * DefineBehavior (void *, void *);  ; bool DeleteChangesMemory ();  ; bool DeleteChangesMemoryImpl ();  ; void DisableParBranchProcessing ();  Globally disables the IMT use case of parallel branch processing, deactivating the corresponding locks. ;  ; const TCollection & EmptyCollection ();  Return an empty collection for use with nullptr TRangeCast. ;  ; void EnableParBranchProcessing ();  Globally enables the parallel branch processing, which is a case of implicit multi-threading (IMT) in ROOT, activating the required locks. ;  ; void EvalParMultiDim (TF1 *func, Double_t *out, const Double_t *x, std::size_t size, std::size_t rows, Double_t *params);  ; void GenericShowMembers (const char *topClassName, void *obj, TMemberInspector &R__insp, bool transientMember);  ; TString GetArrayType (TStreamerElement *element, const char *subtype, TTreeProxyGenerator::EContainer container);  ; template<typename T > ; TClass * GetClassHelper (Bool_t load, Bool_t silent, std::false_type);  ; template<typename T > ; TClass * GetClassHelper (Bool_t, Bool_t, std::true_type);  ; std::string GetDemangledTypeName (const std::type_info &t);  ; ErrorSystemMsgHandlerFunc_t GetErrorSystemMsgHandler ();  ; std::shared_ptr< ROOT::Internal::RTaskArenaWrapper > GetGlobalTaskArena (unsigned maxConcurrency=0);  Factory function returning a shared pointer to the instance of the global RTaskArenaWrapper. ;  ; TROOT * GetROOT1 ();  ; TROOT * GetROOT2 ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:13955,Performance,load,load,13955," TQObject *);  ; const TInitBehavior * DefineBehavior (void *, void *);  ; bool DeleteChangesMemory ();  ; bool DeleteChangesMemoryImpl ();  ; void DisableParBranchProcessing ();  Globally disables the IMT use case of parallel branch processing, deactivating the corresponding locks. ;  ; const TCollection & EmptyCollection ();  Return an empty collection for use with nullptr TRangeCast. ;  ; void EnableParBranchProcessing ();  Globally enables the parallel branch processing, which is a case of implicit multi-threading (IMT) in ROOT, activating the required locks. ;  ; void EvalParMultiDim (TF1 *func, Double_t *out, const Double_t *x, std::size_t size, std::size_t rows, Double_t *params);  ; void GenericShowMembers (const char *topClassName, void *obj, TMemberInspector &R__insp, bool transientMember);  ; TString GetArrayType (TStreamerElement *element, const char *subtype, TTreeProxyGenerator::EContainer container);  ; template<typename T > ; TClass * GetClassHelper (Bool_t load, Bool_t silent, std::false_type);  ; template<typename T > ; TClass * GetClassHelper (Bool_t, Bool_t, std::true_type);  ; std::string GetDemangledTypeName (const std::type_info &t);  ; ErrorSystemMsgHandlerFunc_t GetErrorSystemMsgHandler ();  ; std::shared_ptr< ROOT::Internal::RTaskArenaWrapper > GetGlobalTaskArena (unsigned maxConcurrency=0);  Factory function returning a shared pointer to the instance of the global RTaskArenaWrapper. ;  ; TROOT * GetROOT1 ();  ; TROOT * GetROOT2 ();  ; static Func_t GetSymInLibImt (const char *funcname);  ; template<typename T , typename F > ; auto GetTheRightOp (T(F::*opPtr)(const T *, const double *)) -> decltype(opPtr);  Internal class used by TF1 to get the right operator() signature from a Functor with several ones. ;  ; template<typename T , typename F > ; auto GetTheRightOp (T(F::*opPtr)(T *, double *)) -> decltype(opPtr);  ; static TVersionCheck gVersionCheck (ROOT_VERSION_CODE);  ; template<typename > ; constexpr bool hasBeginEnd (...);  ; template<",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:15453,Performance,load,load,15453," TROOT * GetROOT1 ();  ; TROOT * GetROOT2 ();  ; static Func_t GetSymInLibImt (const char *funcname);  ; template<typename T , typename F > ; auto GetTheRightOp (T(F::*opPtr)(const T *, const double *)) -> decltype(opPtr);  Internal class used by TF1 to get the right operator() signature from a Functor with several ones. ;  ; template<typename T , typename F > ; auto GetTheRightOp (T(F::*opPtr)(T *, double *)) -> decltype(opPtr);  ; static TVersionCheck gVersionCheck (ROOT_VERSION_CODE);  ; template<typename > ; constexpr bool hasBeginEnd (...);  ; template<typename T > ; constexpr auto hasBeginEnd (int) -> decltype(std::begin(std::declval< T >()), std::end(std::declval< T >()), true);  ; Bool_t HasConsistentHashMember (const char *clName);  Return true is the Hash/RecursiveRemove setup is consistent, i.e. ;  ; Bool_t HasConsistentHashMember (TClass &clRef);  Return true is the Hash/RecursiveRemove setup is consistent, i.e. ;  ; static Bool_t & IsImplicitMTEnabledImpl ();  Keeps track of the status of ImplicitMT w/o resorting to the load of libImt. ;  ; Bool_t IsParBranchProcessingEnabled ();  Returns true if parallel branch processing is enabled. ;  ; int LogicalCPUBandwidthControl ();  Returns the available number of logical cores. ;  ; void MinimalErrorHandler (Int_t level, Bool_t abort_bool, const char *location, const char *msg);  A very simple error handler that is usually replaced by the TROOT default error handler. ;  ; void NotifyDirected (Detail::TBranchProxy *x);  ; std::ostream & operator<< (std::ostream &os, const RConcurrentHashColl::HashValue &h);  ; bool operator== (const RConcurrentHashColl::HashValue &lhs, const RConcurrentHashColl::HashValue &rhs);  ; template<typename T > ; static T ParallelReduceHelper (const std::vector< T > &objs, const std::function< T(T a, T b)> &redfunc);  A helper function to implement the TThreadExecutor::ParallelReduce methods. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, const char *classname);  Add t",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:32786,Performance,multi-thread,multi-threading,32786,"TQClass.h. ◆ DefineBehavior() [2/2]. const TInitBehavior * ROOT::Internal::DefineBehavior ; (; void * ; , . void * ;  . ). Definition at line 45 of file TGenericClassInfo.cxx. ◆ DeleteChangesMemory(). bool ROOT::Internal::DeleteChangesMemory ; (; ). Definition at line 133 of file TObject.cxx. ◆ DeleteChangesMemoryImpl(). bool ROOT::Internal::DeleteChangesMemoryImpl ; (; ). Definition at line 76 of file TObject.cxx. ◆ DisableParBranchProcessing(). void ROOT::Internal::DisableParBranchProcessing ; (; ). Globally disables the IMT use case of parallel branch processing, deactivating the corresponding locks. ; Definition at line 434 of file TROOT.cxx. ◆ EmptyCollection(). const TCollection & ROOT::Internal::EmptyCollection ; (; ). Return an empty collection for use with nullptr TRangeCast. ; Definition at line 822 of file TCollection.cxx. ◆ EnableParBranchProcessing(). void ROOT::Internal::EnableParBranchProcessing ; (; ). Globally enables the parallel branch processing, which is a case of implicit multi-threading (IMT) in ROOT, activating the required locks. ; This IMT use case, implemented in TTree::GetEntry, spawns a task for each branch of the tree. Therefore, a task takes care of the reading, decompression and deserialisation of a given branch. ; Definition at line 420 of file TROOT.cxx. ◆ EvalParMultiDim(). void ROOT::Internal::EvalParMultiDim ; (; TF1 * ; func, . Double_t * ; out, . const Double_t * ; x, . std::size_t ; size, . std::size_t ; rows, . Double_t * ; params . ). inline . Definition at line 796 of file TF1.h. ◆ GenericShowMembers(). void ROOT::Internal::GenericShowMembers ; (; const char * ; topClassName, . void * ; obj, . TMemberInspector & ; R__insp, . bool ; transientMember . ). inline . Definition at line 24 of file RtypesImp.h. ◆ GetArrayType(). TString ROOT::Internal::GetArrayType ; (; TStreamerElement * ; element, . const char * ; subtype, . TTreeProxyGenerator::EContainer ; container . ). Definition at line 131 of file TTreeProxyGenerator.cxx. ◆ ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:33880,Performance,load,load,33880,"MT use case, implemented in TTree::GetEntry, spawns a task for each branch of the tree. Therefore, a task takes care of the reading, decompression and deserialisation of a given branch. ; Definition at line 420 of file TROOT.cxx. ◆ EvalParMultiDim(). void ROOT::Internal::EvalParMultiDim ; (; TF1 * ; func, . Double_t * ; out, . const Double_t * ; x, . std::size_t ; size, . std::size_t ; rows, . Double_t * ; params . ). inline . Definition at line 796 of file TF1.h. ◆ GenericShowMembers(). void ROOT::Internal::GenericShowMembers ; (; const char * ; topClassName, . void * ; obj, . TMemberInspector & ; R__insp, . bool ; transientMember . ). inline . Definition at line 24 of file RtypesImp.h. ◆ GetArrayType(). TString ROOT::Internal::GetArrayType ; (; TStreamerElement * ; element, . const char * ; subtype, . TTreeProxyGenerator::EContainer ; container . ). Definition at line 131 of file TTreeProxyGenerator.cxx. ◆ GetClassHelper() [1/2]. template<typename T > . TClass * ROOT::Internal::GetClassHelper ; (; Bool_t ; load, . Bool_t ; silent, . std::false_type ;  . ). Definition at line 646 of file TClass.h. ◆ GetClassHelper() [2/2]. template<typename T > . TClass * ROOT::Internal::GetClassHelper ; (; Bool_t ; , . Bool_t ; , . std::true_type ;  . ). Definition at line 624 of file TClass.h. ◆ GetDemangledTypeName(). std::string ROOT::Internal::GetDemangledTypeName ; (; const std::type_info & ; t). Definition at line 31 of file TGenericClassInfo.cxx. ◆ GetErrorSystemMsgHandler(). ErrorSystemMsgHandlerFunc_t ROOT::Internal::GetErrorSystemMsgHandler ; (; ). Definition at line 51 of file TError.cxx. ◆ GetGlobalTaskArena(). std::shared_ptr< ROOT::Internal::RTaskArenaWrapper > ROOT::Internal::GetGlobalTaskArena ; (; unsigned ; maxConcurrency = 0). Factory function returning a shared pointer to the instance of the global RTaskArenaWrapper. ; Allows for reinstantiation of the global RTaskArenaWrapper once all the references to the previous one are gone and the object destroyed. ; Defi",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:37417,Performance,load,load,37417,"eRemove setup is consistent, i.e. ; when all classes in the class hierarchy that overload TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor. i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation. This routines is used for a small subset of the class for which we need the answer before gROOT is properly initialized. ; Definition at line 7412 of file TClass.cxx. ◆ HasConsistentHashMember() [2/2]. Bool_t ROOT::Internal::HasConsistentHashMember ; (; TClass & ; clRef). Return true is the Hash/RecursiveRemove setup is consistent, i.e. ; when all classes in the class hierarchy that overload TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor. i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation. ; Definition at line 7438 of file TClass.cxx. ◆ IsImplicitMTEnabledImpl(). static Bool_t & ROOT::Internal::IsImplicitMTEnabledImpl ; (; ). static . Keeps track of the status of ImplicitMT w/o resorting to the load of libImt. ; Definition at line 463 of file TROOT.cxx. ◆ IsParBranchProcessingEnabled(). Bool_t ROOT::Internal::IsParBranchProcessingEnabled ; (; ). Returns true if parallel branch processing is enabled. ; Definition at line 447 of file TROOT.cxx. ◆ LogicalCPUBandwidthControl(). int ROOT::Internal::LogicalCPUBandwidthControl ; (; ). Returns the available number of logical cores. . Checks if there is CFS bandwidth control in place (linux, via cgroups, assuming standard paths); Otherwise, returns the number of logical cores provided by std::thread::hardware_concurrency() . Definition at line 50 of file RTaskArena.cxx. ◆ MinimalErrorHandler(). void ROOT::Internal::MinimalErrorHandler ; (; Int_t ; level, . Bool_t ; abort_bool, . const char * ; location, . const char * ; msg . ). A very simple error handler that is usually replaced by the TROOT default error handler. ; The minimal error handler is not serialized across threads, so that output of multi-threaded pr",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:38377,Performance,multi-thread,multi-threaded,38377,"load of libImt. ; Definition at line 463 of file TROOT.cxx. ◆ IsParBranchProcessingEnabled(). Bool_t ROOT::Internal::IsParBranchProcessingEnabled ; (; ). Returns true if parallel branch processing is enabled. ; Definition at line 447 of file TROOT.cxx. ◆ LogicalCPUBandwidthControl(). int ROOT::Internal::LogicalCPUBandwidthControl ; (; ). Returns the available number of logical cores. . Checks if there is CFS bandwidth control in place (linux, via cgroups, assuming standard paths); Otherwise, returns the number of logical cores provided by std::thread::hardware_concurrency() . Definition at line 50 of file RTaskArena.cxx. ◆ MinimalErrorHandler(). void ROOT::Internal::MinimalErrorHandler ; (; Int_t ; level, . Bool_t ; abort_bool, . const char * ; location, . const char * ; msg . ). A very simple error handler that is usually replaced by the TROOT default error handler. ; The minimal error handler is not serialized across threads, so that output of multi-threaded programs can get scrambled Noteabort() is only called if abort_bool is true and level >= gErrorIgnoreLevel ; Definition at line 67 of file TError.cxx. ◆ NotifyDirected(). void ROOT::Internal::NotifyDirected ; (; Detail::TBranchProxy * ; x). Definition at line 36 of file TBranchProxyDirector.cxx. ◆ operator<<(). std::ostream & ROOT::Internal::operator<< ; (; std::ostream & ; os, . const RConcurrentHashColl::HashValue & ; h . ). Definition at line 24 of file RConcurrentHashColl.cxx. ◆ operator==(). bool ROOT::Internal::operator== ; (; const RConcurrentHashColl::HashValue & ; lhs, . const RConcurrentHashColl::HashValue & ; rhs . ). inline . Definition at line 69 of file RConcurrentHashColl.hxx. ◆ ParallelReduceHelper(). template<typename T > . static T ROOT::Internal::ParallelReduceHelper ; (; const std::vector< T > & ; objs, . const std::function< T(T a, T b)> & ; redfunc . ). static . A helper function to implement the TThreadExecutor::ParallelReduce methods. ; Definition at line 122 of file TThreadExecutor.cxx",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:1350,Safety,safe,safe,1350," namespace  TDS;  ; namespace  TreeUtils;  Namespace hosting functions and classes to retrieve tree information for internal use. ;  ; namespace  TThreadedObjectUtils;  ; namespace  VecOps;  . Classes; class  ClassDefGenerateInitInstanceLocalInjector;  ; class  DictSelectionReader;  ; struct  GetFunctorType;  Internal class used by TF1 for obtaining the type from a functor out of the set of valid operator() signatures. More...;  ; struct  GetFunctorType< T(F::*)(const T *, const double *) const >;  ; struct  GetFunctorType< T(F::*)(const T *, const double *)>;  ; struct  GetFunctorType< T(F::*)(T *, double *) const >;  ; struct  GetFunctorType< T(F::*)(T *, double *)>;  ; struct  InterpreterMutexRegistrationRAII;  ; struct  ParsingStateRAII;  RAII used to store Parser, Sema, Preprocessor state for recursive parsing. More...;  ; struct  RBaseType;  ; struct  RCast;  ; struct  RCast< T, false, false >;  ; struct  RCast< T, false, true >;  ; class  RConcurrentHashColl;  This class is a thread-safe associative collection connecting a 256 bits digest/hash to a collection of uid (integer) This is used in the handling of the StreamerInfo record in TFile. More...;  ; struct  RDavixFileDes;  ; struct  RecurseCounts;  ; struct  RHashMap;  ; class  RIoUring;  ; class  RRawFile;  The RRawFile provides read-only access to local and remote files. More...;  ; class  RRawFileDavix;  The RRawFileDavix class provides read-only access to remote non-ROOT files. More...;  ; class  RRawFileNetXNG;  The RRawFileNetXNG class provides read-only access to remote files using root/roots protocol. More...;  ; struct  RRawFileNetXNGImpl;  ; class  RRawFileTFile;  The RRawFileTFile wraps an open TFile, but does not take ownership. More...;  ; class  RRawFileUnix;  The RRawFileUnix class uses POSIX calls to read from a mounted file system. More...;  ; class  RRawFileWin;  The RRawFileWin class uses portable C I/O calls to read from a drive. More...;  ; class  RSlotStack;  A thread-safe stack of N ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:2329,Safety,safe,safe,2329,"class is a thread-safe associative collection connecting a 256 bits digest/hash to a collection of uid (integer) This is used in the handling of the StreamerInfo record in TFile. More...;  ; struct  RDavixFileDes;  ; struct  RecurseCounts;  ; struct  RHashMap;  ; class  RIoUring;  ; class  RRawFile;  The RRawFile provides read-only access to local and remote files. More...;  ; class  RRawFileDavix;  The RRawFileDavix class provides read-only access to remote non-ROOT files. More...;  ; class  RRawFileNetXNG;  The RRawFileNetXNG class provides read-only access to remote files using root/roots protocol. More...;  ; struct  RRawFileNetXNGImpl;  ; class  RRawFileTFile;  The RRawFileTFile wraps an open TFile, but does not take ownership. More...;  ; class  RRawFileUnix;  The RRawFileUnix class uses POSIX calls to read from a mounted file system. More...;  ; class  RRawFileWin;  The RRawFileWin class uses portable C I/O calls to read from a drive. More...;  ; class  RSlotStack;  A thread-safe stack of N indexes (0 to size - 1). More...;  ; struct  RSlotStackRAII;  A RAII object to pop and push slot numbers from a RSlotStack object. More...;  ; class  RStl;  ; class  RTaskArenaWrapper;  Wrapper for tbb::task_arena. More...;  ; class  TArrayCharProxy;  Concrete Implementation of the branch proxy around the data members which are array of char. More...;  ; class  TArrayProxy;  Template for concrete implementation of proxy around array of T. More...;  ; struct  TArrayType;  Helper template to be able to determine and use array dimensions. More...;  ; struct  TArrayType< T, 0 >;  Helper class for proxy around multi dimension array. More...;  ; class  TAtomicPointer;  Helper class to manage atomic pointers. More...;  ; class  TBranchCacheInfo;  ; class  TBranchDescriptor;  ; class  TBranchIMTHelper;  A helper class for managing IMT work during TTree:Fill operations. More...;  ; class  TBranchProxyClassDescriptor;  ; class  TBranchProxyDescriptor;  ; class  TBranchProxyDirector;",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:12866,Safety,avoid,avoid,12866,"roxy;  ; typedef TStlImpProxy< Short_t > TStlShortProxy;  ; typedef TStlImpProxy< UChar_t > TStlUCharProxy;  ; typedef TStlImpProxy< UInt_t > TStlUIntProxy;  ; typedef TStlImpProxy< ULong64_t > TStlULong64Proxy;  ; typedef TStlImpProxy< ULong_t > TStlULongProxy;  ; typedef TStlImpProxy< UShort_t > TStlUShortProxy;  ; typedef TImpProxy< UChar_t > TUCharProxy;  ; typedef TImpProxy< UInt_t > TUIntProxy;  ; typedef TImpProxy< ULong64_t > TULong64Proxy;  ; typedef TImpProxy< ULong_t > TULongProxy;  ; typedef TImpProxy< UShort_t > TUShortProxy;  . Enumerations; enum  ELocation { kOut =0; , kClones; , kSTL; };  0 for the general case, 1 when this a split clases inside a TClonesArray, 2 when this is a split classes inside an STL container. More...;  . Functions; tbb::isolated_task_group * CastToTG (void *p);  ; bool ContaineeInheritsFrom (TClass *cl, TClass *base);  Return true if 'cl' inherits from 'base'. ;  ; void DefaultStreamer (TBuffer &R__b, const TClass *cl, void *objpointer);  Default streamer implementation used by ClassDefInline to avoid requirement to include TBuffer.h. ;  ; const TQObjectInitBehavior * DefineBehavior (TQObject *, TQObject *);  ; const TInitBehavior * DefineBehavior (void *, void *);  ; bool DeleteChangesMemory ();  ; bool DeleteChangesMemoryImpl ();  ; void DisableParBranchProcessing ();  Globally disables the IMT use case of parallel branch processing, deactivating the corresponding locks. ;  ; const TCollection & EmptyCollection ();  Return an empty collection for use with nullptr TRangeCast. ;  ; void EnableParBranchProcessing ();  Globally enables the parallel branch processing, which is a case of implicit multi-threading (IMT) in ROOT, activating the required locks. ;  ; void EvalParMultiDim (TF1 *func, Double_t *out, const Double_t *x, std::size_t size, std::size_t rows, Double_t *params);  ; void GenericShowMembers (const char *topClassName, void *obj, TMemberInspector &R__insp, bool transientMember);  ; TString GetArrayType (TStreamerEl",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:31526,Safety,avoid,avoid,31526,"finition at line 916 of file TBranchProxy.h. ◆ TUShortProxy. typedef TImpProxy<UShort_t> ROOT::Internal::TUShortProxy. Definition at line 918 of file TBranchProxy.h. Enumeration Type Documentation. ◆ ELocation. enum ROOT::Internal::ELocation. 0 for the general case, 1 when this a split clases inside a TClonesArray, 2 when this is a split classes inside an STL container. . EnumeratorkOut ; kClones ; kSTL . Definition at line 38 of file TTreeReaderGenerator.h. Function Documentation. ◆ CastToTG(). tbb::isolated_task_group * ROOT::Internal::CastToTG ; (; void * ; p). Definition at line 43 of file TTaskGroup.cxx. ◆ ContaineeInheritsFrom(). bool ROOT::Internal::ContaineeInheritsFrom ; (; TClass * ; cl, . TClass * ; base . ). Return true if 'cl' inherits from 'base'. ; Definition at line 831 of file TCollection.cxx. ◆ DefaultStreamer(). void ROOT::Internal::DefaultStreamer ; (; TBuffer & ; R__b, . const TClass * ; cl, . void * ; objpointer . ). Default streamer implementation used by ClassDefInline to avoid requirement to include TBuffer.h. ; Definition at line 30 of file TBuffer.cxx. ◆ DefineBehavior() [1/2]. const TQObjectInitBehavior * ROOT::Internal::DefineBehavior ; (; TQObject * ; , . TQObject * ;  . ). inline . Definition at line 74 of file TQClass.h. ◆ DefineBehavior() [2/2]. const TInitBehavior * ROOT::Internal::DefineBehavior ; (; void * ; , . void * ;  . ). Definition at line 45 of file TGenericClassInfo.cxx. ◆ DeleteChangesMemory(). bool ROOT::Internal::DeleteChangesMemory ; (; ). Definition at line 133 of file TObject.cxx. ◆ DeleteChangesMemoryImpl(). bool ROOT::Internal::DeleteChangesMemoryImpl ; (; ). Definition at line 76 of file TObject.cxx. ◆ DisableParBranchProcessing(). void ROOT::Internal::DisableParBranchProcessing ; (; ). Globally disables the IMT use case of parallel branch processing, deactivating the corresponding locks. ; Definition at line 434 of file TROOT.cxx. ◆ EmptyCollection(). const TCollection & ROOT::Internal::EmptyCollection ; (; ). Re",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:36571,Safety,safe,safe,36571," > . auto ROOT::Internal::GetTheRightOp ; (; T(F::*)(T *, double *) ; opPtr); -> decltype(opPtr); . Definition at line 219 of file TF1.h. ◆ gVersionCheck(). static TVersionCheck ROOT::Internal::gVersionCheck ; (; ROOT_VERSION_CODE ; ). static . ◆ hasBeginEnd() [1/2]. template<typename > . constexpr bool ROOT::Internal::hasBeginEnd ; (;  ; ...). constexpr . Definition at line 72 of file RRangeCast.hxx. ◆ hasBeginEnd() [2/2]. template<typename T > . constexpr auto ROOT::Internal::hasBeginEnd ; (; int ; ); -> decltype(std::begin(std::declval<T>()), std::end(std::declval<T>()), true). constexpr . Definition at line 66 of file RRangeCast.hxx. ◆ HasConsistentHashMember() [1/2]. Bool_t ROOT::Internal::HasConsistentHashMember ; (; const char * ; cname). Return true is the Hash/RecursiveRemove setup is consistent, i.e. ; when all classes in the class hierarchy that overload TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor. i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation. This routines is used for a small subset of the class for which we need the answer before gROOT is properly initialized. ; Definition at line 7412 of file TClass.cxx. ◆ HasConsistentHashMember() [2/2]. Bool_t ROOT::Internal::HasConsistentHashMember ; (; TClass & ; clRef). Return true is the Hash/RecursiveRemove setup is consistent, i.e. ; when all classes in the class hierarchy that overload TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor. i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation. ; Definition at line 7438 of file TClass.cxx. ◆ IsImplicitMTEnabledImpl(). static Bool_t & ROOT::Internal::IsImplicitMTEnabledImpl ; (; ). static . Keeps track of the status of ImplicitMT w/o resorting to the load of libImt. ; Definition at line 463 of file TROOT.cxx. ◆ IsParBranchProcessingEnabled(). Bool_t ROOT::Internal::IsParBranchProcessingEnabled ; (; ). Returns true if parallel branch pro",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:37131,Safety,safe,safe,37131,"(std::declval<T>()), true). constexpr . Definition at line 66 of file RRangeCast.hxx. ◆ HasConsistentHashMember() [1/2]. Bool_t ROOT::Internal::HasConsistentHashMember ; (; const char * ; cname). Return true is the Hash/RecursiveRemove setup is consistent, i.e. ; when all classes in the class hierarchy that overload TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor. i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation. This routines is used for a small subset of the class for which we need the answer before gROOT is properly initialized. ; Definition at line 7412 of file TClass.cxx. ◆ HasConsistentHashMember() [2/2]. Bool_t ROOT::Internal::HasConsistentHashMember ; (; TClass & ; clRef). Return true is the Hash/RecursiveRemove setup is consistent, i.e. ; when all classes in the class hierarchy that overload TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor. i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation. ; Definition at line 7438 of file TClass.cxx. ◆ IsImplicitMTEnabledImpl(). static Bool_t & ROOT::Internal::IsImplicitMTEnabledImpl ; (; ). static . Keeps track of the status of ImplicitMT w/o resorting to the load of libImt. ; Definition at line 463 of file TROOT.cxx. ◆ IsParBranchProcessingEnabled(). Bool_t ROOT::Internal::IsParBranchProcessingEnabled ; (; ). Returns true if parallel branch processing is enabled. ; Definition at line 447 of file TROOT.cxx. ◆ LogicalCPUBandwidthControl(). int ROOT::Internal::LogicalCPUBandwidthControl ; (; ). Returns the available number of logical cores. . Checks if there is CFS bandwidth control in place (linux, via cgroups, assuming standard paths); Otherwise, returns the number of logical cores provided by std::thread::hardware_concurrency() . Definition at line 50 of file RTaskArena.cxx. ◆ MinimalErrorHandler(). void ROOT::Internal::MinimalErrorHandler ; (; Int_t ; level, . Bool_t ; abort_bool, . const cha",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:1407,Security,hash,hash,1407," namespace  TDS;  ; namespace  TreeUtils;  Namespace hosting functions and classes to retrieve tree information for internal use. ;  ; namespace  TThreadedObjectUtils;  ; namespace  VecOps;  . Classes; class  ClassDefGenerateInitInstanceLocalInjector;  ; class  DictSelectionReader;  ; struct  GetFunctorType;  Internal class used by TF1 for obtaining the type from a functor out of the set of valid operator() signatures. More...;  ; struct  GetFunctorType< T(F::*)(const T *, const double *) const >;  ; struct  GetFunctorType< T(F::*)(const T *, const double *)>;  ; struct  GetFunctorType< T(F::*)(T *, double *) const >;  ; struct  GetFunctorType< T(F::*)(T *, double *)>;  ; struct  InterpreterMutexRegistrationRAII;  ; struct  ParsingStateRAII;  RAII used to store Parser, Sema, Preprocessor state for recursive parsing. More...;  ; struct  RBaseType;  ; struct  RCast;  ; struct  RCast< T, false, false >;  ; struct  RCast< T, false, true >;  ; class  RConcurrentHashColl;  This class is a thread-safe associative collection connecting a 256 bits digest/hash to a collection of uid (integer) This is used in the handling of the StreamerInfo record in TFile. More...;  ; struct  RDavixFileDes;  ; struct  RecurseCounts;  ; struct  RHashMap;  ; class  RIoUring;  ; class  RRawFile;  The RRawFile provides read-only access to local and remote files. More...;  ; class  RRawFileDavix;  The RRawFileDavix class provides read-only access to remote non-ROOT files. More...;  ; class  RRawFileNetXNG;  The RRawFileNetXNG class provides read-only access to remote files using root/roots protocol. More...;  ; struct  RRawFileNetXNGImpl;  ; class  RRawFileTFile;  The RRawFileTFile wraps an open TFile, but does not take ownership. More...;  ; class  RRawFileUnix;  The RRawFileUnix class uses POSIX calls to read from a mounted file system. More...;  ; class  RRawFileWin;  The RRawFileWin class uses portable C I/O calls to read from a drive. More...;  ; class  RSlotStack;  A thread-safe stack of N ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:1666,Security,access,access,1666,"ictSelectionReader;  ; struct  GetFunctorType;  Internal class used by TF1 for obtaining the type from a functor out of the set of valid operator() signatures. More...;  ; struct  GetFunctorType< T(F::*)(const T *, const double *) const >;  ; struct  GetFunctorType< T(F::*)(const T *, const double *)>;  ; struct  GetFunctorType< T(F::*)(T *, double *) const >;  ; struct  GetFunctorType< T(F::*)(T *, double *)>;  ; struct  InterpreterMutexRegistrationRAII;  ; struct  ParsingStateRAII;  RAII used to store Parser, Sema, Preprocessor state for recursive parsing. More...;  ; struct  RBaseType;  ; struct  RCast;  ; struct  RCast< T, false, false >;  ; struct  RCast< T, false, true >;  ; class  RConcurrentHashColl;  This class is a thread-safe associative collection connecting a 256 bits digest/hash to a collection of uid (integer) This is used in the handling of the StreamerInfo record in TFile. More...;  ; struct  RDavixFileDes;  ; struct  RecurseCounts;  ; struct  RHashMap;  ; class  RIoUring;  ; class  RRawFile;  The RRawFile provides read-only access to local and remote files. More...;  ; class  RRawFileDavix;  The RRawFileDavix class provides read-only access to remote non-ROOT files. More...;  ; class  RRawFileNetXNG;  The RRawFileNetXNG class provides read-only access to remote files using root/roots protocol. More...;  ; struct  RRawFileNetXNGImpl;  ; class  RRawFileTFile;  The RRawFileTFile wraps an open TFile, but does not take ownership. More...;  ; class  RRawFileUnix;  The RRawFileUnix class uses POSIX calls to read from a mounted file system. More...;  ; class  RRawFileWin;  The RRawFileWin class uses portable C I/O calls to read from a drive. More...;  ; class  RSlotStack;  A thread-safe stack of N indexes (0 to size - 1). More...;  ; struct  RSlotStackRAII;  A RAII object to pop and push slot numbers from a RSlotStack object. More...;  ; class  RStl;  ; class  RTaskArenaWrapper;  Wrapper for tbb::task_arena. More...;  ; class  TArrayCharProxy;  Concrete Imp",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:1778,Security,access,access,1778,"gnatures. More...;  ; struct  GetFunctorType< T(F::*)(const T *, const double *) const >;  ; struct  GetFunctorType< T(F::*)(const T *, const double *)>;  ; struct  GetFunctorType< T(F::*)(T *, double *) const >;  ; struct  GetFunctorType< T(F::*)(T *, double *)>;  ; struct  InterpreterMutexRegistrationRAII;  ; struct  ParsingStateRAII;  RAII used to store Parser, Sema, Preprocessor state for recursive parsing. More...;  ; struct  RBaseType;  ; struct  RCast;  ; struct  RCast< T, false, false >;  ; struct  RCast< T, false, true >;  ; class  RConcurrentHashColl;  This class is a thread-safe associative collection connecting a 256 bits digest/hash to a collection of uid (integer) This is used in the handling of the StreamerInfo record in TFile. More...;  ; struct  RDavixFileDes;  ; struct  RecurseCounts;  ; struct  RHashMap;  ; class  RIoUring;  ; class  RRawFile;  The RRawFile provides read-only access to local and remote files. More...;  ; class  RRawFileDavix;  The RRawFileDavix class provides read-only access to remote non-ROOT files. More...;  ; class  RRawFileNetXNG;  The RRawFileNetXNG class provides read-only access to remote files using root/roots protocol. More...;  ; struct  RRawFileNetXNGImpl;  ; class  RRawFileTFile;  The RRawFileTFile wraps an open TFile, but does not take ownership. More...;  ; class  RRawFileUnix;  The RRawFileUnix class uses POSIX calls to read from a mounted file system. More...;  ; class  RRawFileWin;  The RRawFileWin class uses portable C I/O calls to read from a drive. More...;  ; class  RSlotStack;  A thread-safe stack of N indexes (0 to size - 1). More...;  ; struct  RSlotStackRAII;  A RAII object to pop and push slot numbers from a RSlotStack object. More...;  ; class  RStl;  ; class  RTaskArenaWrapper;  Wrapper for tbb::task_arena. More...;  ; class  TArrayCharProxy;  Concrete Implementation of the branch proxy around the data members which are array of char. More...;  ; class  TArrayProxy;  Template for concrete implementation",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:1891,Security,access,access,1891,":*)(const T *, const double *)>;  ; struct  GetFunctorType< T(F::*)(T *, double *) const >;  ; struct  GetFunctorType< T(F::*)(T *, double *)>;  ; struct  InterpreterMutexRegistrationRAII;  ; struct  ParsingStateRAII;  RAII used to store Parser, Sema, Preprocessor state for recursive parsing. More...;  ; struct  RBaseType;  ; struct  RCast;  ; struct  RCast< T, false, false >;  ; struct  RCast< T, false, true >;  ; class  RConcurrentHashColl;  This class is a thread-safe associative collection connecting a 256 bits digest/hash to a collection of uid (integer) This is used in the handling of the StreamerInfo record in TFile. More...;  ; struct  RDavixFileDes;  ; struct  RecurseCounts;  ; struct  RHashMap;  ; class  RIoUring;  ; class  RRawFile;  The RRawFile provides read-only access to local and remote files. More...;  ; class  RRawFileDavix;  The RRawFileDavix class provides read-only access to remote non-ROOT files. More...;  ; class  RRawFileNetXNG;  The RRawFileNetXNG class provides read-only access to remote files using root/roots protocol. More...;  ; struct  RRawFileNetXNGImpl;  ; class  RRawFileTFile;  The RRawFileTFile wraps an open TFile, but does not take ownership. More...;  ; class  RRawFileUnix;  The RRawFileUnix class uses POSIX calls to read from a mounted file system. More...;  ; class  RRawFileWin;  The RRawFileWin class uses portable C I/O calls to read from a drive. More...;  ; class  RSlotStack;  A thread-safe stack of N indexes (0 to size - 1). More...;  ; struct  RSlotStackRAII;  A RAII object to pop and push slot numbers from a RSlotStack object. More...;  ; class  RStl;  ; class  RTaskArenaWrapper;  Wrapper for tbb::task_arena. More...;  ; class  TArrayCharProxy;  Concrete Implementation of the branch proxy around the data members which are array of char. More...;  ; class  TArrayProxy;  Template for concrete implementation of proxy around array of T. More...;  ; struct  TArrayType;  Helper template to be able to determine and use array dime",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:15643,Testability,log,logical,15643,"ltype(opPtr);  Internal class used by TF1 to get the right operator() signature from a Functor with several ones. ;  ; template<typename T , typename F > ; auto GetTheRightOp (T(F::*opPtr)(T *, double *)) -> decltype(opPtr);  ; static TVersionCheck gVersionCheck (ROOT_VERSION_CODE);  ; template<typename > ; constexpr bool hasBeginEnd (...);  ; template<typename T > ; constexpr auto hasBeginEnd (int) -> decltype(std::begin(std::declval< T >()), std::end(std::declval< T >()), true);  ; Bool_t HasConsistentHashMember (const char *clName);  Return true is the Hash/RecursiveRemove setup is consistent, i.e. ;  ; Bool_t HasConsistentHashMember (TClass &clRef);  Return true is the Hash/RecursiveRemove setup is consistent, i.e. ;  ; static Bool_t & IsImplicitMTEnabledImpl ();  Keeps track of the status of ImplicitMT w/o resorting to the load of libImt. ;  ; Bool_t IsParBranchProcessingEnabled ();  Returns true if parallel branch processing is enabled. ;  ; int LogicalCPUBandwidthControl ();  Returns the available number of logical cores. ;  ; void MinimalErrorHandler (Int_t level, Bool_t abort_bool, const char *location, const char *msg);  A very simple error handler that is usually replaced by the TROOT default error handler. ;  ; void NotifyDirected (Detail::TBranchProxy *x);  ; std::ostream & operator<< (std::ostream &os, const RConcurrentHashColl::HashValue &h);  ; bool operator== (const RConcurrentHashColl::HashValue &lhs, const RConcurrentHashColl::HashValue &rhs);  ; template<typename T > ; static T ParallelReduceHelper (const std::vector< T > &objs, const std::function< T(T a, T b)> &redfunc);  A helper function to implement the TThreadExecutor::ParallelReduce methods. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, const char *classname);  Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, TClass *cl);  Add the ""pragma C++ clas",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:37789,Testability,log,logical,37789,"on at line 7412 of file TClass.cxx. ◆ HasConsistentHashMember() [2/2]. Bool_t ROOT::Internal::HasConsistentHashMember ; (; TClass & ; clRef). Return true is the Hash/RecursiveRemove setup is consistent, i.e. ; when all classes in the class hierarchy that overload TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor. i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation. ; Definition at line 7438 of file TClass.cxx. ◆ IsImplicitMTEnabledImpl(). static Bool_t & ROOT::Internal::IsImplicitMTEnabledImpl ; (; ). static . Keeps track of the status of ImplicitMT w/o resorting to the load of libImt. ; Definition at line 463 of file TROOT.cxx. ◆ IsParBranchProcessingEnabled(). Bool_t ROOT::Internal::IsParBranchProcessingEnabled ; (; ). Returns true if parallel branch processing is enabled. ; Definition at line 447 of file TROOT.cxx. ◆ LogicalCPUBandwidthControl(). int ROOT::Internal::LogicalCPUBandwidthControl ; (; ). Returns the available number of logical cores. . Checks if there is CFS bandwidth control in place (linux, via cgroups, assuming standard paths); Otherwise, returns the number of logical cores provided by std::thread::hardware_concurrency() . Definition at line 50 of file RTaskArena.cxx. ◆ MinimalErrorHandler(). void ROOT::Internal::MinimalErrorHandler ; (; Int_t ; level, . Bool_t ; abort_bool, . const char * ; location, . const char * ; msg . ). A very simple error handler that is usually replaced by the TROOT default error handler. ; The minimal error handler is not serialized across threads, so that output of multi-threaded programs can get scrambled Noteabort() is only called if abort_bool is true and level >= gErrorIgnoreLevel ; Definition at line 67 of file TError.cxx. ◆ NotifyDirected(). void ROOT::Internal::NotifyDirected ; (; Detail::TBranchProxy * ; x). Definition at line 36 of file TBranchProxyDirector.cxx. ◆ operator<<(). std::ostream & ROOT::Internal::operator<< ; (; std::ostream & ; os, . const",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:37936,Testability,log,logical,37936,"TClass & ; clRef). Return true is the Hash/RecursiveRemove setup is consistent, i.e. ; when all classes in the class hierarchy that overload TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor. i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation. ; Definition at line 7438 of file TClass.cxx. ◆ IsImplicitMTEnabledImpl(). static Bool_t & ROOT::Internal::IsImplicitMTEnabledImpl ; (; ). static . Keeps track of the status of ImplicitMT w/o resorting to the load of libImt. ; Definition at line 463 of file TROOT.cxx. ◆ IsParBranchProcessingEnabled(). Bool_t ROOT::Internal::IsParBranchProcessingEnabled ; (; ). Returns true if parallel branch processing is enabled. ; Definition at line 447 of file TROOT.cxx. ◆ LogicalCPUBandwidthControl(). int ROOT::Internal::LogicalCPUBandwidthControl ; (; ). Returns the available number of logical cores. . Checks if there is CFS bandwidth control in place (linux, via cgroups, assuming standard paths); Otherwise, returns the number of logical cores provided by std::thread::hardware_concurrency() . Definition at line 50 of file RTaskArena.cxx. ◆ MinimalErrorHandler(). void ROOT::Internal::MinimalErrorHandler ; (; Int_t ; level, . Bool_t ; abort_bool, . const char * ; location, . const char * ; msg . ). A very simple error handler that is usually replaced by the TROOT default error handler. ; The minimal error handler is not serialized across threads, so that output of multi-threaded programs can get scrambled Noteabort() is only called if abort_bool is true and level >= gErrorIgnoreLevel ; Definition at line 67 of file TError.cxx. ◆ NotifyDirected(). void ROOT::Internal::NotifyDirected ; (; Detail::TBranchProxy * ; x). Definition at line 36 of file TBranchProxyDirector.cxx. ◆ operator<<(). std::ostream & ROOT::Internal::operator<< ; (; std::ostream & ; os, . const RConcurrentHashColl::HashValue & ; h . ). Definition at line 24 of file RConcurrentHashColl.cxx. ◆ operator==(). bool ROO",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:15769,Usability,simpl,simple,15769," typename F > ; auto GetTheRightOp (T(F::*opPtr)(T *, double *)) -> decltype(opPtr);  ; static TVersionCheck gVersionCheck (ROOT_VERSION_CODE);  ; template<typename > ; constexpr bool hasBeginEnd (...);  ; template<typename T > ; constexpr auto hasBeginEnd (int) -> decltype(std::begin(std::declval< T >()), std::end(std::declval< T >()), true);  ; Bool_t HasConsistentHashMember (const char *clName);  Return true is the Hash/RecursiveRemove setup is consistent, i.e. ;  ; Bool_t HasConsistentHashMember (TClass &clRef);  Return true is the Hash/RecursiveRemove setup is consistent, i.e. ;  ; static Bool_t & IsImplicitMTEnabledImpl ();  Keeps track of the status of ImplicitMT w/o resorting to the load of libImt. ;  ; Bool_t IsParBranchProcessingEnabled ();  Returns true if parallel branch processing is enabled. ;  ; int LogicalCPUBandwidthControl ();  Returns the available number of logical cores. ;  ; void MinimalErrorHandler (Int_t level, Bool_t abort_bool, const char *location, const char *msg);  A very simple error handler that is usually replaced by the TROOT default error handler. ;  ; void NotifyDirected (Detail::TBranchProxy *x);  ; std::ostream & operator<< (std::ostream &os, const RConcurrentHashColl::HashValue &h);  ; bool operator== (const RConcurrentHashColl::HashValue &lhs, const RConcurrentHashColl::HashValue &rhs);  ; template<typename T > ; static T ParallelReduceHelper (const std::vector< T > &objs, const std::function< T(T a, T b)> &redfunc);  A helper function to implement the TThreadExecutor::ParallelReduce methods. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, const char *classname);  Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, TClass *cl);  Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ;  ; void ReleaseDefaultErrorHandler ();  Destructs res",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal.html:38215,Usability,simpl,simple,38215,"x. ◆ IsImplicitMTEnabledImpl(). static Bool_t & ROOT::Internal::IsImplicitMTEnabledImpl ; (; ). static . Keeps track of the status of ImplicitMT w/o resorting to the load of libImt. ; Definition at line 463 of file TROOT.cxx. ◆ IsParBranchProcessingEnabled(). Bool_t ROOT::Internal::IsParBranchProcessingEnabled ; (; ). Returns true if parallel branch processing is enabled. ; Definition at line 447 of file TROOT.cxx. ◆ LogicalCPUBandwidthControl(). int ROOT::Internal::LogicalCPUBandwidthControl ; (; ). Returns the available number of logical cores. . Checks if there is CFS bandwidth control in place (linux, via cgroups, assuming standard paths); Otherwise, returns the number of logical cores provided by std::thread::hardware_concurrency() . Definition at line 50 of file RTaskArena.cxx. ◆ MinimalErrorHandler(). void ROOT::Internal::MinimalErrorHandler ; (; Int_t ; level, . Bool_t ; abort_bool, . const char * ; location, . const char * ; msg . ). A very simple error handler that is usually replaced by the TROOT default error handler. ; The minimal error handler is not serialized across threads, so that output of multi-threaded programs can get scrambled Noteabort() is only called if abort_bool is true and level >= gErrorIgnoreLevel ; Definition at line 67 of file TError.cxx. ◆ NotifyDirected(). void ROOT::Internal::NotifyDirected ; (; Detail::TBranchProxy * ; x). Definition at line 36 of file TBranchProxyDirector.cxx. ◆ operator<<(). std::ostream & ROOT::Internal::operator<< ; (; std::ostream & ; os, . const RConcurrentHashColl::HashValue & ; h . ). Definition at line 24 of file RConcurrentHashColl.cxx. ◆ operator==(). bool ROOT::Internal::operator== ; (; const RConcurrentHashColl::HashValue & ; lhs, . const RConcurrentHashColl::HashValue & ; rhs . ). inline . Definition at line 69 of file RConcurrentHashColl.hxx. ◆ ParallelReduceHelper(). template<typename T > . static T ROOT::Internal::ParallelReduceHelper ; (; const std::vector< T > & ; objs, . const std::function< T(",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html:12786,Availability,error,errors,12786," TypeList<>, const RColumnReadersInfo &, const std::string &=""nominal"");  ; unsigned int GetColumnWidth (const std::vector< std::string > &names, const unsigned int minColumnSpace=8u);  Get optimal column width for printing a table given the names and the desired minimal space between columns. ;  ; std::string GetDataSourceLabel (const ROOT::RDF::RNode &node);  ; std::vector< std::string > GetFilterNames (const std::shared_ptr< RLoopManager > &loopManager);  ; std::string GetLeafTypeName (TLeaf *leaf, const std::string &colName);  ; unsigned int GetNSlots ();  ; template<std::size_t N, typename... Ts> ; decltype(auto) GetNthElement (Ts &&...args);  ; std::vector< std::string > GetValidatedArgTypes (const ColumnNames_t &colNames, const RColumnRegister &colRegister, TTree *tree, RDataSource *ds, const std::string &context, bool vector2RVec);  ; ColumnNames_t GetValidatedColumnNames (RLoopManager &lm, const unsigned int nColumns, const ColumnNames_t &columns, const RColumnRegister &colRegister, RDataSource *ds);  Given the desired number of columns and the user-provided list of columns: ;  ; template<typename dtype > ; ULong64_t GetVectorAddress (std::vector< dtype > &p);  ; Long64_t InterpreterCalc (const std::string &code, const std::string &context="""");  Jit code in the interpreter with TInterpreter::Calc, throw in case of errors. ;  ; void InterpreterDeclare (const std::string &code);  Declare code in the interpreter via the TInterpreter::Declare method, throw in case of errors. ;  ; bool IsInternalColumn (std::string_view colName);  Whether custom column with name colName is an ""internal"" column such as rdfentry_ or rdfslot_. ;  ; bool IsStrInVec (const std::string &str, const std::vector< std::string > &vec);  ; std::string JitBuildAction (const ColumnNames_t &cols, std::shared_ptr< RDFDetail::RNodeBase > *prevNode, const std::type_info &helperArgType, const std::type_info &at, void *helperArgOnHeap, TTree *tree, const unsigned int nSlots, const RColumnRegister &c",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html:12938,Availability,error,errors,12938,"tr< RLoopManager > &loopManager);  ; std::string GetLeafTypeName (TLeaf *leaf, const std::string &colName);  ; unsigned int GetNSlots ();  ; template<std::size_t N, typename... Ts> ; decltype(auto) GetNthElement (Ts &&...args);  ; std::vector< std::string > GetValidatedArgTypes (const ColumnNames_t &colNames, const RColumnRegister &colRegister, TTree *tree, RDataSource *ds, const std::string &context, bool vector2RVec);  ; ColumnNames_t GetValidatedColumnNames (RLoopManager &lm, const unsigned int nColumns, const ColumnNames_t &columns, const RColumnRegister &colRegister, RDataSource *ds);  Given the desired number of columns and the user-provided list of columns: ;  ; template<typename dtype > ; ULong64_t GetVectorAddress (std::vector< dtype > &p);  ; Long64_t InterpreterCalc (const std::string &code, const std::string &context="""");  Jit code in the interpreter with TInterpreter::Calc, throw in case of errors. ;  ; void InterpreterDeclare (const std::string &code);  Declare code in the interpreter via the TInterpreter::Declare method, throw in case of errors. ;  ; bool IsInternalColumn (std::string_view colName);  Whether custom column with name colName is an ""internal"" column such as rdfentry_ or rdfslot_. ;  ; bool IsStrInVec (const std::string &str, const std::vector< std::string > &vec);  ; std::string JitBuildAction (const ColumnNames_t &cols, std::shared_ptr< RDFDetail::RNodeBase > *prevNode, const std::type_info &helperArgType, const std::type_info &at, void *helperArgOnHeap, TTree *tree, const unsigned int nSlots, const RColumnRegister &colRegister, RDataSource *ds, std::weak_ptr< RJittedAction > *jittedActionOnHeap, const bool vector2RVec);  ; template<typename T > ; ROOT::RDF::Experimental::RResultMap< T > MakeResultMap (std::shared_ptr< T > nominalResult, std::vector< std::shared_ptr< T > > &&variedResults, std::vector< std::string > &&keys, RLoopManager &lm, std::shared_ptr< ROOT::Internal::RDF::RActionBase > nominalAction, std::shared_ptr< ROOT::Intern",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html:15329,Availability,error,errors,15329,"on< bool(ArgTypes...)> NotHelper (ROOT::TypeTraits::TypeList< ArgTypes... >, F &&f);  ; template<typename... ArgTypes, typename Ret , typename... Args> ; std::function< bool(ArgTypes...)> NotHelper (ROOT::TypeTraits::TypeList< ArgTypes... >, Ret(*f)(Args...));  ; ParsedTreePath ParseTreePath (std::string_view fullTreeName);  ; template<std::size_t N, typename T , typename F > ; auto PassAsVec (F &&f) -> PassAsVecHelper< std::make_index_sequence< N >, T, F >;  ; std::string PrettyPrintAddr (const void *const addr);  ; template<typename T > ; ROOT::RDF::RResultPtr< std::vector< T > > RDataFrameTake (ROOT::RDF::RNode df, std::string_view column);  ; void RemoveDuplicates (ColumnNames_t &columnNames);  ; std::vector< std::string > ReplaceDotWithUnderscore (const std::vector< std::string > &columnNames);  Replace occurrences of '. ;  ; std::string ResolveAlias (const std::string &col, const std::map< std::string, std::string > &aliasMap);  ; const ColumnNames_t SelectColumns (unsigned int nRequiredNames, const ColumnNames_t &names, const ColumnNames_t &defaultNames);  Choose between local column names or default column names, throw in case of errors. ;  ; void TriggerRun (ROOT::RDF::RNode node);  Trigger the execution of an RDataFrame computation graph. ;  ; template<typename BufType , typename... ColTypes, std::size_t... Idx> ; void TTreeAsFlatMatrix (std::index_sequence< Idx... >, TTree &tree, std::vector< BufType > &matrix, std::vector< std::string > &columns);  ; template<typename BufType , typename... ColTypes> ; void TTreeAsFlatMatrixHelper (TTree &tree, std::vector< BufType > &matrix, std::vector< std::string > &columns);  ; std::string TypeID2TypeName (const std::type_info &id);  Returns the name of a type starting from its type_info An empty string is returned in case of failure References and pointers are not supported since those cannot be stored in columns. ;  ; char TypeName2ROOTTypeName (const std::string &b);  Convert type name (e.g. ;  ; const std::type_i",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html:15979,Availability,failure,failure,15979,"td::vector< std::string > ReplaceDotWithUnderscore (const std::vector< std::string > &columnNames);  Replace occurrences of '. ;  ; std::string ResolveAlias (const std::string &col, const std::map< std::string, std::string > &aliasMap);  ; const ColumnNames_t SelectColumns (unsigned int nRequiredNames, const ColumnNames_t &names, const ColumnNames_t &defaultNames);  Choose between local column names or default column names, throw in case of errors. ;  ; void TriggerRun (ROOT::RDF::RNode node);  Trigger the execution of an RDataFrame computation graph. ;  ; template<typename BufType , typename... ColTypes, std::size_t... Idx> ; void TTreeAsFlatMatrix (std::index_sequence< Idx... >, TTree &tree, std::vector< BufType > &matrix, std::vector< std::string > &columns);  ; template<typename BufType , typename... ColTypes> ; void TTreeAsFlatMatrixHelper (TTree &tree, std::vector< BufType > &matrix, std::vector< std::string > &columns);  ; std::string TypeID2TypeName (const std::type_info &id);  Returns the name of a type starting from its type_info An empty string is returned in case of failure References and pointers are not supported since those cannot be stored in columns. ;  ; char TypeName2ROOTTypeName (const std::string &b);  Convert type name (e.g. ;  ; const std::type_info & TypeName2TypeID (const std::string &name);  Return the type_info associated to a name. ;  ; template<typename T > ; std::vector< T > Union (const std::vector< T > &v1, const std::vector< T > &v2);  Return a vector with all elements of v1 and v2 and duplicates removed. ;  ; std::shared_ptr< RNodeBase > UpcastNode (std::shared_ptr< RNodeBase > ptr);  ; void ValidateSnapshotOutput (const RSnapshotOptions &opts, const std::string &treeName, const std::string &fileName);  ; Helper functions for the case of a single column being varied.; template<typename T > ; bool ResultsSizeEq (const T &results, std::size_t expected, std::size_t nColumns, std::true_type);  ; template<typename T > ; std::size_t GetNV",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html:35285,Availability,error,errors,35285,"umns (throw if not); replace column names from aliases by the actual column name Return the list of selected column names. . Definition at line 915 of file RDFInterfaceUtils.cxx. ◆ GetValuePtrHelper() [1/2]. template<typename T > . void * ROOT::Internal::RDF::GetValuePtrHelper ; (; ROOT::RVec< T > & ; v, . std::size_t ; , . std::size_t ; varIdx . ). Definition at line 80 of file RVariation.hxx. ◆ GetValuePtrHelper() [2/2]. template<typename T > . void * ROOT::Internal::RDF::GetValuePtrHelper ; (; std::vector< ROOT::RVec< T > > & ; v, . std::size_t ; colIdx, . std::size_t ; varIdx . ). Definition at line 122 of file RVariation.hxx. ◆ GetVectorAddress(). template<typename dtype > . ULong64_t ROOT::Internal::RDF::GetVectorAddress ; (; std::vector< dtype > & ; p). Definition at line 25 of file PyROOTHelpers.hxx. ◆ InterpreterCalc(). Long64_t ROOT::Internal::RDF::InterpreterCalc ; (; const std::string & ; code, . const std::string & ; context = """" . ). Jit code in the interpreter with TInterpreter::Calc, throw in case of errors. ; The optional context parameter, if present, is mentioned in the error message. The pointer returned by the call to TInterpreter::Calc is returned in case of success. ; Definition at line 345 of file RDFUtils.cxx. ◆ InterpreterDeclare(). void ROOT::Internal::RDF::InterpreterDeclare ; (; const std::string & ; code). Declare code in the interpreter via the TInterpreter::Declare method, throw in case of errors. ; Definition at line 333 of file RDFUtils.cxx. ◆ IsInternalColumn(). bool ROOT::Internal::RDF::IsInternalColumn ; (; std::string_view ; colName). Whether custom column with name colName is an ""internal"" column such as rdfentry_ or rdfslot_. ; Definition at line 381 of file RDFUtils.cxx. ◆ IsStrInVec(). bool ROOT::Internal::RDF::IsStrInVec ; (; const std::string & ; str, . const std::vector< std::string > & ; vec . ). Definition at line 439 of file RDFUtils.cxx. ◆ JitBuildAction(). std::string ROOT::Internal::RDF::JitBuildAction ; (; const Co",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html:35359,Availability,error,error,35359,"e Return the list of selected column names. . Definition at line 915 of file RDFInterfaceUtils.cxx. ◆ GetValuePtrHelper() [1/2]. template<typename T > . void * ROOT::Internal::RDF::GetValuePtrHelper ; (; ROOT::RVec< T > & ; v, . std::size_t ; , . std::size_t ; varIdx . ). Definition at line 80 of file RVariation.hxx. ◆ GetValuePtrHelper() [2/2]. template<typename T > . void * ROOT::Internal::RDF::GetValuePtrHelper ; (; std::vector< ROOT::RVec< T > > & ; v, . std::size_t ; colIdx, . std::size_t ; varIdx . ). Definition at line 122 of file RVariation.hxx. ◆ GetVectorAddress(). template<typename dtype > . ULong64_t ROOT::Internal::RDF::GetVectorAddress ; (; std::vector< dtype > & ; p). Definition at line 25 of file PyROOTHelpers.hxx. ◆ InterpreterCalc(). Long64_t ROOT::Internal::RDF::InterpreterCalc ; (; const std::string & ; code, . const std::string & ; context = """" . ). Jit code in the interpreter with TInterpreter::Calc, throw in case of errors. ; The optional context parameter, if present, is mentioned in the error message. The pointer returned by the call to TInterpreter::Calc is returned in case of success. ; Definition at line 345 of file RDFUtils.cxx. ◆ InterpreterDeclare(). void ROOT::Internal::RDF::InterpreterDeclare ; (; const std::string & ; code). Declare code in the interpreter via the TInterpreter::Declare method, throw in case of errors. ; Definition at line 333 of file RDFUtils.cxx. ◆ IsInternalColumn(). bool ROOT::Internal::RDF::IsInternalColumn ; (; std::string_view ; colName). Whether custom column with name colName is an ""internal"" column such as rdfentry_ or rdfslot_. ; Definition at line 381 of file RDFUtils.cxx. ◆ IsStrInVec(). bool ROOT::Internal::RDF::IsStrInVec ; (; const std::string & ; str, . const std::vector< std::string > & ; vec . ). Definition at line 439 of file RDFUtils.cxx. ◆ JitBuildAction(). std::string ROOT::Internal::RDF::JitBuildAction ; (; const ColumnNames_t & ; cols, . std::shared_ptr< RDFDetail::RNodeBase > * ; prevNode, . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html:35698,Availability,error,errors,35698,"aluePtrHelper() [2/2]. template<typename T > . void * ROOT::Internal::RDF::GetValuePtrHelper ; (; std::vector< ROOT::RVec< T > > & ; v, . std::size_t ; colIdx, . std::size_t ; varIdx . ). Definition at line 122 of file RVariation.hxx. ◆ GetVectorAddress(). template<typename dtype > . ULong64_t ROOT::Internal::RDF::GetVectorAddress ; (; std::vector< dtype > & ; p). Definition at line 25 of file PyROOTHelpers.hxx. ◆ InterpreterCalc(). Long64_t ROOT::Internal::RDF::InterpreterCalc ; (; const std::string & ; code, . const std::string & ; context = """" . ). Jit code in the interpreter with TInterpreter::Calc, throw in case of errors. ; The optional context parameter, if present, is mentioned in the error message. The pointer returned by the call to TInterpreter::Calc is returned in case of success. ; Definition at line 345 of file RDFUtils.cxx. ◆ InterpreterDeclare(). void ROOT::Internal::RDF::InterpreterDeclare ; (; const std::string & ; code). Declare code in the interpreter via the TInterpreter::Declare method, throw in case of errors. ; Definition at line 333 of file RDFUtils.cxx. ◆ IsInternalColumn(). bool ROOT::Internal::RDF::IsInternalColumn ; (; std::string_view ; colName). Whether custom column with name colName is an ""internal"" column such as rdfentry_ or rdfslot_. ; Definition at line 381 of file RDFUtils.cxx. ◆ IsStrInVec(). bool ROOT::Internal::RDF::IsStrInVec ; (; const std::string & ; str, . const std::vector< std::string > & ; vec . ). Definition at line 439 of file RDFUtils.cxx. ◆ JitBuildAction(). std::string ROOT::Internal::RDF::JitBuildAction ; (; const ColumnNames_t & ; cols, . std::shared_ptr< RDFDetail::RNodeBase > * ; prevNode, . const std::type_info & ; helperArgType, . const std::type_info & ; at, . void * ; helperArgOnHeap, . TTree * ; tree, . const unsigned int ; nSlots, . const RColumnRegister & ; colRegister, . RDataSource * ; ds, . std::weak_ptr< RJittedAction > * ; jittedActionOnHeap, . const bool ; vector2RVec . ). Definition at line 849 of",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html:40779,Availability,error,errors,40779," ; nCols, . std::size_t ; nVariations . ). Definition at line 103 of file RVariation.hxx. ◆ ResolveAlias(). std::string ROOT::Internal::RDF::ResolveAlias ; (; const std::string & ; col, . const std::map< std::string, std::string > & ; aliasMap . ). Definition at line 398 of file RDFInterfaceUtils.cxx. ◆ ResultsSizeEq() [1/2]. template<typename T > . bool ROOT::Internal::RDF::ResultsSizeEq ; (; const T & ; results, . std::size_t ; expected, . std::size_t ; nColumns, . std::true_type ;  . ). Definition at line 47 of file RVariation.hxx. ◆ ResultsSizeEq() [2/2]. template<typename T > . bool ROOT::Internal::RDF::ResultsSizeEq ; (; const T & ; results, . std::size_t ; expected, . std::size_t ; , . std::false_type ;  . ). Definition at line 89 of file RVariation.hxx. ◆ SelectColumns(). const ColumnNames_t ROOT::Internal::RDF::SelectColumns ; (; unsigned int ; nRequiredNames, . const ColumnNames_t & ; names, . const ColumnNames_t & ; defaultNames . ). Choose between local column names or default column names, throw in case of errors. ; Definition at line 586 of file RDFInterfaceUtils.cxx. ◆ TriggerRun(). void ROOT::Internal::RDF::TriggerRun ; (; ROOT::RDF::RNode ; node). Trigger the execution of an RDataFrame computation graph. ; Parameters. [in]nodeA node of the computation graph (not a result). This function calls the RLoopManager::Run method on the fLoopManager data member of the input argument. It is intended for internal use only. ; Definition at line 38 of file RInterface.cxx. ◆ TTreeAsFlatMatrix(). template<typename BufType , typename... ColTypes, std::size_t... Idx> . void ROOT::Internal::RDF::TTreeAsFlatMatrix ; (; std::index_sequence< Idx... > ; , . TTree & ; tree, . std::vector< BufType > & ; matrix, . std::vector< std::string > & ; columns . ). Definition at line 40 of file PyROOTHelpers.hxx. ◆ TTreeAsFlatMatrixHelper(). template<typename BufType , typename... ColTypes> . void ROOT::Internal::RDF::TTreeAsFlatMatrixHelper ; (; TTree & ; tree, . std::vector< BufT",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html:42056,Availability,failure,failure,42056,". This function calls the RLoopManager::Run method on the fLoopManager data member of the input argument. It is intended for internal use only. ; Definition at line 38 of file RInterface.cxx. ◆ TTreeAsFlatMatrix(). template<typename BufType , typename... ColTypes, std::size_t... Idx> . void ROOT::Internal::RDF::TTreeAsFlatMatrix ; (; std::index_sequence< Idx... > ; , . TTree & ; tree, . std::vector< BufType > & ; matrix, . std::vector< std::string > & ; columns . ). Definition at line 40 of file PyROOTHelpers.hxx. ◆ TTreeAsFlatMatrixHelper(). template<typename BufType , typename... ColTypes> . void ROOT::Internal::RDF::TTreeAsFlatMatrixHelper ; (; TTree & ; tree, . std::vector< BufType > & ; matrix, . std::vector< std::string > & ; columns . ). Definition at line 58 of file PyROOTHelpers.hxx. ◆ TypeID2TypeName(). std::string ROOT::Internal::RDF::TypeID2TypeName ; (; const std::type_info & ; id). Returns the name of a type starting from its type_info An empty string is returned in case of failure References and pointers are not supported since those cannot be stored in columns. ; Note that this function will take a lock and may be a potential source of contention in multithreaded execution. ; Definition at line 119 of file RDFUtils.cxx. ◆ TypeName2ROOTTypeName(). char ROOT::Internal::RDF::TypeName2ROOTTypeName ; (; const std::string & ; b). Convert type name (e.g. ; ""Float_t"") to ROOT type code (e.g. 'F') – see TBranch documentation. Return a space ' ' in case no match was found. ; Definition at line 259 of file RDFUtils.cxx. ◆ TypeName2TypeID(). const std::type_info & ROOT::Internal::RDF::TypeName2TypeID ; (; const std::string & ; name). Return the type_info associated to a name. ; If the association fails, an exception is thrown. References and pointers are not supported since those cannot be stored in columns. ; Definition at line 62 of file RDFUtils.cxx. ◆ Union(). template<typename T > . std::vector< T > ROOT::Internal::RDF::Union ; (; const std::vector< T > & ; ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html:349,Integrability,wrap,wrap,349,". ROOT: ROOT::Internal::RDF Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Functions |; Variables ; ROOT::Internal::RDF Namespace Reference. Namespaces; namespace  GraphDrawing;  . Classes; class  ArrayPtrVisitor;  ; struct  CallGuaranteedOrder;  Struct to wrap the call to a function with a guaranteed order of execution of its arguments. More...;  ; struct  ColumnType;  ; struct  ColumnType< ROOT::RVec< ROOT::RVec< T > >, false >;  ; struct  ColumnType< ROOT::RVec< T >, true >;  ; struct  Disjunction;  ; struct  Disjunction< B1 >;  ; struct  Disjunction< B1, Bn... >;  ; class  DisplayHelper;  ; struct  IsDataContainer;  Check for container traits. More...;  ; struct  IsDataContainer< ROOT::VecOps::RVec< bool > >;  ; struct  IsDataContainer< std::span< T > >;  ; struct  IsDataContainer< std::vector< bool > >;  ; struct  IsVector_t;  Detect whether a type is an instantiation of vector<T,A> More...;  ; struct  IsVector_t< std::vector< T, A > >;  ; class  PassAsVecHelper;  ; class  PassAsVecHelper< std::index_sequence< N... >, T, F >;  ; class  RAction;  A RDataFrame node that produces a result. More...;  ; class  RActionBase;  ; class  RCallback;  ; struct  RColumnReadersInfo;  This type aggregates some of the arguments passed to GetColumnReaders. More...;  ; class  RColumnRegister;  A binder for user-defined columns, variations and aliases. More...;  ; class  RDefineReader;  Column reader for defined columns. More...;  ; class  RDefinesWithReaders;  A helper type that keeps track of RDefine objects and their corresponding RDefineReaders. More...;  ; class  RDisplayElement;  Helper class to let Display print compact tabular representations of the events. More...;  ; class  RDSColumnReader;  Column reader type that deals with values read from RDataSources. More...;  ; struct  RemoveFirstParameterIf;  type is TypeList if MustRemove is false, otherwise it is a TypeList with the firs",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html:2230,Integrability,wrap,wrapper,2230,"se;  ; class  RCallback;  ; struct  RColumnReadersInfo;  This type aggregates some of the arguments passed to GetColumnReaders. More...;  ; class  RColumnRegister;  A binder for user-defined columns, variations and aliases. More...;  ; class  RDefineReader;  Column reader for defined columns. More...;  ; class  RDefinesWithReaders;  A helper type that keeps track of RDefine objects and their corresponding RDefineReaders. More...;  ; class  RDisplayElement;  Helper class to let Display print compact tabular representations of the events. More...;  ; class  RDSColumnReader;  Column reader type that deals with values read from RDataSources. More...;  ; struct  RemoveFirstParameterIf;  type is TypeList if MustRemove is false, otherwise it is a TypeList with the first type removed More...;  ; struct  RemoveFirstParameterIf< true, TypeList >;  ; struct  RemoveFirstTwoParametersIf;  ; struct  RemoveFirstTwoParametersIf< true, TypeList >;  ; class  RJittedAction;  ; class  RJittedVariation;  A wrapper around a concrete RVariation, which forwards all calls to it RJittedVariation is a placeholder that is inserted in the computation graph in place of a RVariation that will be just-in-time compiled. More...;  ; struct  RMetaDataJson;  ; struct  RNewSampleFlag;  ; class  RNewSampleNotifier;  ; class  ROneTimeCallback;  ; struct  RootConversionTraits;  ; struct  RootConversionTraits< bool >;  ; struct  RootConversionTraits< double >;  ; struct  RootConversionTraits< float >;  ; struct  RootConversionTraits< int16_t >;  ; struct  RootConversionTraits< int32_t >;  ; struct  RootConversionTraits< int8_t >;  ; struct  RootConversionTraits< Long64_t >;  ; struct  RootConversionTraits< std::string >;  ; struct  RootConversionTraits< uint16_t >;  ; struct  RootConversionTraits< uint32_t >;  ; struct  RootConversionTraits< uint8_t >;  ; struct  RootConversionTraits< ULong64_t >;  ; class  RRootDS;  This class is unused and it has only been implemented as a proof of concept. More...;  ; c",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html:3955,Integrability,depend,depend,3955,"  RootConversionTraits< std::string >;  ; struct  RootConversionTraits< uint16_t >;  ; struct  RootConversionTraits< uint32_t >;  ; struct  RootConversionTraits< uint8_t >;  ; struct  RootConversionTraits< ULong64_t >;  ; class  RRootDS;  This class is unused and it has only been implemented as a proof of concept. More...;  ; class  RStringCache;  A Thread-safe cache for strings. More...;  ; class  RTreeColumnReader;  RTreeColumnReader specialization for TTree values read via TTreeReaderValues. More...;  ; class  RTreeColumnReader< RVec< bool > >;  RTreeColumnReader specialization for arrays of boolean values read via TTreeReaderArrays. More...;  ; class  RTreeColumnReader< RVec< T > >;  RTreeColumnReader specialization for TTree values read via TTreeReaderArrays. More...;  ; class  RTreeColumnReader< std::array< T, N > >;  RTreeColumnReader specialization for TTree values read via TTreeReaderArrays. ;  ; class  RTreeOpaqueColumnReader;  ; class  RVariation;  ; class  RVariationBase;  This type includes all parts of RVariation that do not depend on the callable signature. More...;  ; class  RVariationReader;  Column reader that reads the value for a specific column, variation and slot. More...;  ; class  RVariationsWithReaders;  ; class  RVariedAction;  Just like an RAction, but it has N action helpers and N previous nodes (N is the number of variations). More...;  ; class  RVecDS;  A RDataSource implementation which takes a collection of RVecs, which are able to adopt data from Numpy arrays. More...;  ; class  TValueGetter;  Helper class which keeps track for each slot where to get the entry. More...;  ; struct  ValueType;  ; struct  ValueType< ROOT::VecOps::RVec< T >, false >;  ; struct  ValueType< T, false >;  . Typedefs; using Callback_t = std::function< void(unsigned int)>;  ; template<bool IsSingleColumn, typename Ret_t > ; using ColumnType_t = typename ColumnType< Ret_t, IsSingleColumn >::type;  When varying a single column, Ret_t is RVec<T> and ColumnType_t i",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html:35365,Integrability,message,message,35365,"e Return the list of selected column names. . Definition at line 915 of file RDFInterfaceUtils.cxx. ◆ GetValuePtrHelper() [1/2]. template<typename T > . void * ROOT::Internal::RDF::GetValuePtrHelper ; (; ROOT::RVec< T > & ; v, . std::size_t ; , . std::size_t ; varIdx . ). Definition at line 80 of file RVariation.hxx. ◆ GetValuePtrHelper() [2/2]. template<typename T > . void * ROOT::Internal::RDF::GetValuePtrHelper ; (; std::vector< ROOT::RVec< T > > & ; v, . std::size_t ; colIdx, . std::size_t ; varIdx . ). Definition at line 122 of file RVariation.hxx. ◆ GetVectorAddress(). template<typename dtype > . ULong64_t ROOT::Internal::RDF::GetVectorAddress ; (; std::vector< dtype > & ; p). Definition at line 25 of file PyROOTHelpers.hxx. ◆ InterpreterCalc(). Long64_t ROOT::Internal::RDF::InterpreterCalc ; (; const std::string & ; code, . const std::string & ; context = """" . ). Jit code in the interpreter with TInterpreter::Calc, throw in case of errors. ; The optional context parameter, if present, is mentioned in the error message. The pointer returned by the call to TInterpreter::Calc is returned in case of success. ; Definition at line 345 of file RDFUtils.cxx. ◆ InterpreterDeclare(). void ROOT::Internal::RDF::InterpreterDeclare ; (; const std::string & ; code). Declare code in the interpreter via the TInterpreter::Declare method, throw in case of errors. ; Definition at line 333 of file RDFUtils.cxx. ◆ IsInternalColumn(). bool ROOT::Internal::RDF::IsInternalColumn ; (; std::string_view ; colName). Whether custom column with name colName is an ""internal"" column such as rdfentry_ or rdfslot_. ; Definition at line 381 of file RDFUtils.cxx. ◆ IsStrInVec(). bool ROOT::Internal::RDF::IsStrInVec ; (; const std::string & ; str, . const std::vector< std::string > & ; vec . ). Definition at line 439 of file RDFUtils.cxx. ◆ JitBuildAction(). std::string ROOT::Internal::RDF::JitBuildAction ; (; const ColumnNames_t & ; cols, . std::shared_ptr< RDFDetail::RNodeBase > * ; prevNode, . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html:39154,Integrability,message,message,39154,"ate<std::size_t N, typename T , typename F > . auto ROOT::Internal::RDF::PassAsVec ; (; F && ; f); -> PassAsVecHelper<std::make_index_sequence<N>, T, F>. Definition at line 63 of file RDFHelpers.hxx. ◆ PrettyPrintAddr(). std::string ROOT::Internal::RDF::PrettyPrintAddr ; (; const void *const ; addr). Definition at line 648 of file RDFInterfaceUtils.cxx. ◆ RDataFrameTake(). template<typename T > . ROOT::RDF::RResultPtr< std::vector< T > > ROOT::Internal::RDF::RDataFrameTake ; (; ROOT::RDF::RNode ; df, . std::string_view ; column . ). Definition at line 67 of file PyROOTHelpers.hxx. ◆ RemoveDuplicates(). void ROOT::Internal::RDF::RemoveDuplicates ; (; ColumnNames_t & ; columnNames). Definition at line 1038 of file RDFInterfaceUtils.cxx. ◆ ReplaceDotWithUnderscore(). std::vector< std::string > ROOT::Internal::RDF::ReplaceDotWithUnderscore ; (; const std::vector< std::string > & ; columnNames). Replace occurrences of '. ; ' with '_' in each string passed as argument. An Info message is printed when this happens. Dots at the end of the string are not replaced. An exception is thrown in case the resulting set of strings would contain duplicates. ; Definition at line 314 of file RDFUtils.cxx. ◆ ResizeResults() [1/2]. template<typename T > . void ROOT::Internal::RDF::ResizeResults ; (; ROOT::RVec< T > & ; results, . std::size_t ; , . std::size_t ; nVariations . ). Definition at line 62 of file RVariation.hxx. ◆ ResizeResults() [2/2]. template<typename T > . void ROOT::Internal::RDF::ResizeResults ; (; std::vector< ROOT::RVec< T > > & ; results, . std::size_t ; nCols, . std::size_t ; nVariations . ). Definition at line 103 of file RVariation.hxx. ◆ ResolveAlias(). std::string ROOT::Internal::RDF::ResolveAlias ; (; const std::string & ; col, . const std::map< std::string, std::string > & ; aliasMap . ). Definition at line 398 of file RDFInterfaceUtils.cxx. ◆ ResultsSizeEq() [1/2]. template<typename T > . bool ROOT::Internal::RDF::ResultsSizeEq ; (; const T & ; results, . std:",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html:5656,Modifiability,variab,variable-sized,5656,"ore...;  ; struct  ValueType;  ; struct  ValueType< ROOT::VecOps::RVec< T >, false >;  ; struct  ValueType< T, false >;  . Typedefs; using Callback_t = std::function< void(unsigned int)>;  ; template<bool IsSingleColumn, typename Ret_t > ; using ColumnType_t = typename ColumnType< Ret_t, IsSingleColumn >::type;  When varying a single column, Ret_t is RVec<T> and ColumnType_t is T. ;  ; template<bool MustRemove, typename TypeList > ; using RemoveFirstParameterIf_t = typename RemoveFirstParameterIf< MustRemove, TypeList >::type;  ; template<bool MustRemove, typename TypeList > ; using RemoveFirstTwoParametersIf_t = typename RemoveFirstTwoParametersIf< MustRemove, TypeList >::type;  ; using SnapshotPtr_t = ROOT::RDF::RResultPtr< ROOT::RDF::RInterface< ROOT::Detail::RDF::RLoopManager, void > >;  . Functions; std::pair< std::vector< std::string >, std::vector< std::string > > AddSizeBranches (const std::vector< std::string > &branches, TTree *tree, std::vector< std::string > &&colsWithoutAliases, std::vector< std::string > &&colsWithAliases);  Return copies of colsWithoutAliases and colsWithAliases with size branches for variable-sized array branches added in the right positions (i.e. ;  ; bool AtLeastOneEmptyString (const std::vector< std::string_view > strings);  ; std::shared_ptr< RJittedDefine > BookDefineJit (std::string_view name, std::string_view expression, RLoopManager &lm, RDataSource *ds, const RColumnRegister &colRegister, const ColumnNames_t &branches, std::shared_ptr< RNodeBase > *upcastNodeOnHeap);  Book the jitting of a Define call. ;  ; std::shared_ptr< RJittedDefine > BookDefinePerSampleJit (std::string_view name, std::string_view expression, RLoopManager &lm, const RColumnRegister &colRegister, std::shared_ptr< RNodeBase > *upcastNodeOnHeap);  Book the jitting of a DefinePerSample call. ;  ; std::shared_ptr< RDFDetail::RJittedFilter > BookFilterJit (std::shared_ptr< RDFDetail::RNodeBase > *prevNodeOnHeap, std::string_view name, std::string_view express",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html:19847,Modifiability,variab,variable-sized,19847,"nal::RDF::RemoveFirstParameterIf_t = typedef typename RemoveFirstParameterIf<MustRemove, TypeList>::type. Definition at line 151 of file Utils.hxx. ◆ RemoveFirstTwoParametersIf_t. template<bool MustRemove, typename TypeList > . using ROOT::Internal::RDF::RemoveFirstTwoParametersIf_t = typedef typename RemoveFirstTwoParametersIf<MustRemove, TypeList>::type. Definition at line 165 of file Utils.hxx. ◆ SnapshotPtr_t. using ROOT::Internal::RDF::SnapshotPtr_t = typedef ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void> >. Definition at line 62 of file RResultPtr.hxx. Function Documentation. ◆ AddSizeBranches(). std::pair< std::vector< std::string >, std::vector< std::string > > ROOT::Internal::RDF::AddSizeBranches ; (; const std::vector< std::string > & ; branches, . TTree * ; tree, . std::vector< std::string > && ; colsWithoutAliases, . std::vector< std::string > && ; colsWithAliases . ). Return copies of colsWithoutAliases and colsWithAliases with size branches for variable-sized array branches added in the right positions (i.e. ; before the array branches that need them). ; Definition at line 1001 of file RDFInterfaceUtils.cxx. ◆ AssignResults() [1/2]. template<typename T > . void ROOT::Internal::RDF::AssignResults ; (; ROOT::RVec< T > & ; resStorage, . ROOT::RVec< T > && ; tmpResults . ). Assign into fLastResults[slot] without changing the addresses of its elements (we gave those addresses away in GetValuePtr) The callee is responsible of making sure that resStorage has the correct size. ; Definition at line 71 of file RVariation.hxx. ◆ AssignResults() [2/2]. template<typename T > . void ROOT::Internal::RDF::AssignResults ; (; std::vector< ROOT::RVec< T > > & ; resStorage, . ROOT::RVec< ROOT::RVec< T > > && ; tmpResults . ). Definition at line 112 of file RVariation.hxx. ◆ AtLeastOneEmptyString(). bool ROOT::Internal::RDF::AtLeastOneEmptyString ; (; const std::vector< std::string_view > ; strings). Definition at line 896 of file RDFInt",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html:27304,Modifiability,variab,variable-sized,27304,"pshotPtr_t ROOT::Internal::RDF::CloneResultAndAction ; (; const SnapshotPtr_t & ; inptr, . const std::string & ; outputFileName . ). Creates a new RResultPtr with a cloned Snapshot action. ; Parameters. inptrThe pointer. ; outputFileNameA new name for the output file of the cloned action. . ReturnsA new pointer with a cloned action.; This overload is needed since cloning a Snapshot node usually also involves changing the name of the output file, otherwise the cloned Snapshot would overwrite the same file. ; Definition at line 18 of file RResultPtr.cxx. ◆ ColumnName2ColumnTypeName(). std::string ROOT::Internal::RDF::ColumnName2ColumnTypeName ; (; const std::string & ; colName, . TTree * ; tree, . RDataSource * ; ds, . RDefineBase * ; define, . bool ; vector2RVec . ). Return a string containing the type of the given branch. ; Works both with real TTree branches and with temporary column created by Define. Throws if type name deduction fails. Note that for fixed- or variable-sized c-style arrays the returned type name will be RVec<T>. vector2RVec specifies whether typename 'std::vector<T>' should be converted to 'RVec<T>' or returned as is ; Definition at line 229 of file RDFUtils.cxx. ◆ ComposeRVecTypeName(). std::string ROOT::Internal::RDF::ComposeRVecTypeName ; (; const std::string & ; valueType). Definition at line 140 of file RDFUtils.cxx. ◆ ConvertRegexToColumns(). ColumnNames_t ROOT::Internal::RDF::ConvertRegexToColumns ; (; const ColumnNames_t & ; colNames, . std::string_view ; columnNameRegexp, . std::string_view ; callerName . ). Definition at line 450 of file RDFInterfaceUtils.cxx. ◆ DemangleTypeIdName(). std::string ROOT::Internal::RDF::DemangleTypeIdName ; (; const std::type_info & ; typeInfo). Definition at line 440 of file RDFInterfaceUtils.cxx. ◆ Erase(). template<typename T > . void ROOT::Internal::RDF::Erase ; (; const T & ; that, . std::vector< T > & ; v . ). Erase that element from vector v ; Definition at line 189 of file Utils.hxx. ◆ FilterArraySi",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html:30490,Modifiability,variab,variable,30490," ; definedCols, . const ColumnNames_t & ; dataSourceColumns . ). Definition at line 611 of file RDFInterfaceUtils.cxx. ◆ GetAddress() [1/2]. ULong64_t ROOT::Internal::RDF::GetAddress ; (; std::vector< std::string > & ; p). inline . Definition at line 30 of file PyROOTHelpers.hxx. ◆ GetAddress() [2/2]. ULong64_t ROOT::Internal::RDF::GetAddress ; (; TTree & ; p). inline . Definition at line 34 of file PyROOTHelpers.hxx. ◆ GetBranchNames(). ColumnNames_t ROOT::Internal::RDF::GetBranchNames ; (; TTree & ; t, . bool ; allowDuplicates = true . ). Get all the branches names, including the ones of the friend trees. ; Definition at line 342 of file RLoopManager.cxx. ◆ GetBranchOrLeafTypeName(). std::string ROOT::Internal::RDF::GetBranchOrLeafTypeName ; (; TTree & ; t, . const std::string & ; colName . ). Return the typename of object colName stored in t, if any. ; Return an empty string if colName is not in t. Supported cases:; leaves corresponding to single values, variable- and fixed-length arrays, with following syntax:; ""leafname"", as long as TTree::GetLeaf resolves it; ""b1.b2...leafname"", as long as TTree::GetLeaf(""b1.b2...."", ""leafname"") resolves it. TBranchElements, as long as TTree::GetBranch resolves their names . Definition at line 172 of file RDFUtils.cxx. ◆ GetColumnReader(). template<typename T > . RDFDetail::RColumnReaderBase * ROOT::Internal::RDF::GetColumnReader ; (; unsigned int ; slot, . RColumnReaderBase * ; defineOrVariationReader, . RLoopManager & ; lm, . TTreeReader * ; r, . const std::string & ; colName . ). Definition at line 44 of file ColumnReaderUtils.hxx. ◆ GetColumnReaders() [1/2]. template<typename... ColTypes> . std::array< RDFDetail::RColumnReaderBase *, sizeof...(ColTypes)> ROOT::Internal::RDF::GetColumnReaders ; (; unsigned int ; slot, . TTreeReader * ; r, . TypeList< ColTypes... > ; , . const RColumnReadersInfo & ; colInfo, . const std::string & ; variationName = ""nominal"" . ). Create a group of column readers, one per type in the parameter",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html:3264,Performance,cache,cache,3264,"ete RVariation, which forwards all calls to it RJittedVariation is a placeholder that is inserted in the computation graph in place of a RVariation that will be just-in-time compiled. More...;  ; struct  RMetaDataJson;  ; struct  RNewSampleFlag;  ; class  RNewSampleNotifier;  ; class  ROneTimeCallback;  ; struct  RootConversionTraits;  ; struct  RootConversionTraits< bool >;  ; struct  RootConversionTraits< double >;  ; struct  RootConversionTraits< float >;  ; struct  RootConversionTraits< int16_t >;  ; struct  RootConversionTraits< int32_t >;  ; struct  RootConversionTraits< int8_t >;  ; struct  RootConversionTraits< Long64_t >;  ; struct  RootConversionTraits< std::string >;  ; struct  RootConversionTraits< uint16_t >;  ; struct  RootConversionTraits< uint32_t >;  ; struct  RootConversionTraits< uint8_t >;  ; struct  RootConversionTraits< ULong64_t >;  ; class  RRootDS;  This class is unused and it has only been implemented as a proof of concept. More...;  ; class  RStringCache;  A Thread-safe cache for strings. More...;  ; class  RTreeColumnReader;  RTreeColumnReader specialization for TTree values read via TTreeReaderValues. More...;  ; class  RTreeColumnReader< RVec< bool > >;  RTreeColumnReader specialization for arrays of boolean values read via TTreeReaderArrays. More...;  ; class  RTreeColumnReader< RVec< T > >;  RTreeColumnReader specialization for TTree values read via TTreeReaderArrays. More...;  ; class  RTreeColumnReader< std::array< T, N > >;  RTreeColumnReader specialization for TTree values read via TTreeReaderArrays. ;  ; class  RTreeOpaqueColumnReader;  ; class  RVariation;  ; class  RVariationBase;  This type includes all parts of RVariation that do not depend on the callable signature. More...;  ; class  RVariationReader;  Column reader that reads the value for a specific column, variation and slot. More...;  ; class  RVariationsWithReaders;  ; class  RVariedAction;  Just like an RAction, but it has N action helpers and N previous nodes (N is th",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html:7226,Performance,cache,cache,7226,":string_view name, std::string_view expression, RLoopManager &lm, const RColumnRegister &colRegister, std::shared_ptr< RNodeBase > *upcastNodeOnHeap);  Book the jitting of a DefinePerSample call. ;  ; std::shared_ptr< RDFDetail::RJittedFilter > BookFilterJit (std::shared_ptr< RDFDetail::RNodeBase > *prevNodeOnHeap, std::string_view name, std::string_view expression, const ColumnNames_t &branches, const RColumnRegister &colRegister, TTree *tree, RDataSource *ds);  Book the jitting of a Filter call. ;  ; std::shared_ptr< RJittedVariation > BookVariationJit (const std::vector< std::string > &colNames, std::string_view variationName, const std::vector< std::string > &variationTags, std::string_view expression, RLoopManager &lm, RDataSource *ds, const RColumnRegister &colRegister, const ColumnNames_t &branches, std::shared_ptr< RNodeBase > *upcastNodeOnHeap, bool isSingleColumn);  Book the jitting of a Vary call. ;  ; template<typename T > ; constexpr std::size_t CacheLineStep ();  Stepping through CacheLineStep<T> values in a vector<T> brings you to a new cache line. ;  ; void ChangeEmptyEntryRange (const ROOT::RDF::RNode &node, std::pair< ULong64_t, ULong64_t > &&newRange);  ; void ChangeSpec (const ROOT::RDF::RNode &node, ROOT::RDF::Experimental::RDatasetSpec &&spec);  Changes the input dataset specification of an RDataFrame. ;  ; void CheckForDefinition (const std::string &where, std::string_view definedColView, const RColumnRegister &colRegister, const ColumnNames_t &treeColumns, const ColumnNames_t &dataSourceColumns);  Throw if column definedColView is not already there. ;  ; void CheckForDuplicateSnapshotColumns (const ColumnNames_t &cols);  ; void CheckForNoVariations (const std::string &where, std::string_view definedColView, const RColumnRegister &colRegister);  Throw if the column has systematic variations attached. ;  ; void CheckForRedefinition (const std::string &where, std::string_view definedColView, const RColumnRegister &colRegister, const ColumnNames_",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html:22859,Performance,cache,cache,22859," . std::string_view ; name, . std::string_view ; expression, . const ColumnNames_t & ; branches, . const RColumnRegister & ; colRegister, . TTree * ; tree, . RDataSource * ; ds . ). Book the jitting of a Filter call. ; Definition at line 658 of file RDFInterfaceUtils.cxx. ◆ BookVariationJit(). std::shared_ptr< RJittedVariation > ROOT::Internal::RDF::BookVariationJit ; (; const std::vector< std::string > & ; colNames, . std::string_view ; variationName, . const std::vector< std::string > & ; variationTags, . std::string_view ; expression, . RLoopManager & ; lm, . RDataSource * ; ds, . const RColumnRegister & ; colRegister, . const ColumnNames_t & ; branches, . std::shared_ptr< RNodeBase > * ; upcastNodeOnHeap, . bool ; isSingleColumn . ). Book the jitting of a Vary call. ; Definition at line 782 of file RDFInterfaceUtils.cxx. ◆ CacheLineStep(). template<typename T > . constexpr std::size_t ROOT::Internal::RDF::CacheLineStep ; (; ). constexpr . Stepping through CacheLineStep<T> values in a vector<T> brings you to a new cache line. ; Useful to avoid false sharing. ; Definition at line 222 of file Utils.hxx. ◆ ChangeEmptyEntryRange(). void ROOT::Internal::RDF::ChangeEmptyEntryRange ; (; const ROOT::RDF::RNode & ; node, . std::pair< ULong64_t, ULong64_t > && ; newRange . ). Definition at line 13 of file RInterface.cxx. ◆ ChangeSpec(). void ROOT::Internal::RDF::ChangeSpec ; (; const ROOT::RDF::RNode & ; node, . ROOT::RDF::Experimental::RDatasetSpec && ; spec . ). Changes the input dataset specification of an RDataFrame. ; Parameters. nodeAny node of the computation graph. ; specThe new specification. . Definition at line 26 of file RInterface.cxx. ◆ CheckForDefinition(). void ROOT::Internal::RDF::CheckForDefinition ; (; const std::string & ; where, . std::string_view ; definedColView, . const RColumnRegister & ; colRegister, . const ColumnNames_t & ; treeColumns, . const ColumnNames_t & ; dataSourceColumns . ). Throw if column definedColView is not already there. ; Defini",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html:3259,Safety,safe,safe,3259,"ete RVariation, which forwards all calls to it RJittedVariation is a placeholder that is inserted in the computation graph in place of a RVariation that will be just-in-time compiled. More...;  ; struct  RMetaDataJson;  ; struct  RNewSampleFlag;  ; class  RNewSampleNotifier;  ; class  ROneTimeCallback;  ; struct  RootConversionTraits;  ; struct  RootConversionTraits< bool >;  ; struct  RootConversionTraits< double >;  ; struct  RootConversionTraits< float >;  ; struct  RootConversionTraits< int16_t >;  ; struct  RootConversionTraits< int32_t >;  ; struct  RootConversionTraits< int8_t >;  ; struct  RootConversionTraits< Long64_t >;  ; struct  RootConversionTraits< std::string >;  ; struct  RootConversionTraits< uint16_t >;  ; struct  RootConversionTraits< uint32_t >;  ; struct  RootConversionTraits< uint8_t >;  ; struct  RootConversionTraits< ULong64_t >;  ; class  RRootDS;  This class is unused and it has only been implemented as a proof of concept. More...;  ; class  RStringCache;  A Thread-safe cache for strings. More...;  ; class  RTreeColumnReader;  RTreeColumnReader specialization for TTree values read via TTreeReaderValues. More...;  ; class  RTreeColumnReader< RVec< bool > >;  RTreeColumnReader specialization for arrays of boolean values read via TTreeReaderArrays. More...;  ; class  RTreeColumnReader< RVec< T > >;  RTreeColumnReader specialization for TTree values read via TTreeReaderArrays. More...;  ; class  RTreeColumnReader< std::array< T, N > >;  RTreeColumnReader specialization for TTree values read via TTreeReaderArrays. ;  ; class  RTreeOpaqueColumnReader;  ; class  RVariation;  ; class  RVariationBase;  This type includes all parts of RVariation that do not depend on the callable signature. More...;  ; class  RVariationReader;  Column reader that reads the value for a specific column, variation and slot. More...;  ; class  RVariationsWithReaders;  ; class  RVariedAction;  Just like an RAction, but it has N action helpers and N previous nodes (N is th",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html:22883,Safety,avoid,avoid,22883," . const ColumnNames_t & ; branches, . const RColumnRegister & ; colRegister, . TTree * ; tree, . RDataSource * ; ds . ). Book the jitting of a Filter call. ; Definition at line 658 of file RDFInterfaceUtils.cxx. ◆ BookVariationJit(). std::shared_ptr< RJittedVariation > ROOT::Internal::RDF::BookVariationJit ; (; const std::vector< std::string > & ; colNames, . std::string_view ; variationName, . const std::vector< std::string > & ; variationTags, . std::string_view ; expression, . RLoopManager & ; lm, . RDataSource * ; ds, . const RColumnRegister & ; colRegister, . const ColumnNames_t & ; branches, . std::shared_ptr< RNodeBase > * ; upcastNodeOnHeap, . bool ; isSingleColumn . ). Book the jitting of a Vary call. ; Definition at line 782 of file RDFInterfaceUtils.cxx. ◆ CacheLineStep(). template<typename T > . constexpr std::size_t ROOT::Internal::RDF::CacheLineStep ; (; ). constexpr . Stepping through CacheLineStep<T> values in a vector<T> brings you to a new cache line. ; Useful to avoid false sharing. ; Definition at line 222 of file Utils.hxx. ◆ ChangeEmptyEntryRange(). void ROOT::Internal::RDF::ChangeEmptyEntryRange ; (; const ROOT::RDF::RNode & ; node, . std::pair< ULong64_t, ULong64_t > && ; newRange . ). Definition at line 13 of file RInterface.cxx. ◆ ChangeSpec(). void ROOT::Internal::RDF::ChangeSpec ; (; const ROOT::RDF::RNode & ; node, . ROOT::RDF::Experimental::RDatasetSpec && ; spec . ). Changes the input dataset specification of an RDataFrame. ; Parameters. nodeAny node of the computation graph. ; specThe new specification. . Definition at line 26 of file RInterface.cxx. ◆ CheckForDefinition(). void ROOT::Internal::RDF::CheckForDefinition ; (; const std::string & ; where, . std::string_view ; definedColView, . const RColumnRegister & ; colRegister, . const ColumnNames_t & ; treeColumns, . const ColumnNames_t & ; dataSourceColumns . ). Throw if column definedColView is not already there. ; Definition at line 513 of file RDFInterfaceUtils.cxx. ◆ CheckForDup",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1VecOps.html:2029,Energy Efficiency,power,power,2029,"T's. More...;  ; class  SmallVectorTemplateBase< T, true >;  SmallVectorTemplateBase<TriviallyCopyable = true> - This is where we put method implementations that are designed to work with trivially copyable T's. More...;  ; class  SmallVectorTemplateCommon;  This is the part of SmallVectorTemplateBase which does not depend on whether the type T is a POD. More...;  . Typedefs; template<typename T > ; using RVec = ROOT::VecOps::RVec< T >;  . Functions; constexpr bool All (const bool *vals, std::size_t size);  ; template<typename... T> ; std::size_t GetVectorsSize (const std::string &id, const RVec< T > &... vs);  ; template<typename Tuple_t , std::size_t... Is> ; auto MapFromTuple (Tuple_t &&t, std::index_sequence< Is... >) -> decltype(MapImpl(std::get< std::tuple_size< Tuple_t >::value - 1 >(t), std::get< Is >(t)...));  ; template<typename F , typename... RVecs> ; auto MapImpl (F &&f, RVecs &&... vs) -> RVec< decltype(f(vs[0]...))>;  ; uint64_t NextPowerOf2 (uint64_t A);  Return the next power of two (in 64-bits) that is strictly greater than A. ;  ; template<typename T > ; void ResetView (RVec< T > &v, T *addr, std::size_t sz);  An unsafe function to reset the buffer for which this RVec is acting as a view. ;  ; template<typename ForwardIt > ; void UninitializedValueConstruct (ForwardIt first, ForwardIt last);  ; template<typename T , bool TriviallyCopyable> ;  void (off) SmallVectorTemplateBase< T;  . Typedef Documentation. ◆ RVec. template<typename T > . using ROOT::Internal::VecOps::RVec = typedef ROOT::VecOps::RVec<T>. Definition at line 69 of file RVec.hxx. Function Documentation. ◆ All(). constexpr bool ROOT::Internal::VecOps::All ; (; const bool * ; vals, . std::size_t ; size . ). constexpr . Definition at line 79 of file RVec.hxx. ◆ GetVectorsSize(). template<typename... T> . std::size_t ROOT::Internal::VecOps::GetVectorsSize ; (; const std::string & ; id, . const RVec< T > &... ; vs . ). Definition at line 88 of file RVec.hxx. ◆ MapFromTuple(). template<type",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal_1_1VecOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1VecOps.html
https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1VecOps.html:3613,Energy Efficiency,power,power,3613,"entation. ◆ All(). constexpr bool ROOT::Internal::VecOps::All ; (; const bool * ; vals, . std::size_t ; size . ). constexpr . Definition at line 79 of file RVec.hxx. ◆ GetVectorsSize(). template<typename... T> . std::size_t ROOT::Internal::VecOps::GetVectorsSize ; (; const std::string & ; id, . const RVec< T > &... ; vs . ). Definition at line 88 of file RVec.hxx. ◆ MapFromTuple(). template<typename Tuple_t , std::size_t... Is> . auto ROOT::Internal::VecOps::MapFromTuple ; (; Tuple_t && ; t, . std::index_sequence< Is... > ;  . ); -> decltype(MapImpl(std::get<std::tuple_size<Tuple_t>::value - 1>(t), std::get<Is>(t)...)). Definition at line 117 of file RVec.hxx. ◆ MapImpl(). template<typename F , typename... RVecs> . auto ROOT::Internal::VecOps::MapImpl ; (; F && ; f, . RVecs &&... ; vs . ); -> RVec<decltype(f(vs[0]...))>. Definition at line 105 of file RVec.hxx. ◆ NextPowerOf2(). uint64_t ROOT::Internal::VecOps::NextPowerOf2 ; (; uint64_t ; A). inline . Return the next power of two (in 64-bits) that is strictly greater than A. ; Return zero on overflow. ; Definition at line 126 of file RVec.hxx. ◆ ResetView(). template<typename T > . void ROOT::Internal::VecOps::ResetView ; (; RVec< T > & ; v, . T * ; addr, . std::size_t ; sz . ). An unsafe function to reset the buffer for which this RVec is acting as a view. ; NoteThis is a low-level method that must be called on RVecs that are already non-owning:; it does not put the RVec in ""non-owning mode"" (fCapacity == -1); it does not free any owned buffer . Definition at line 546 of file RVec.hxx. ◆ UninitializedValueConstruct(). template<typename ForwardIt > . void ROOT::Internal::VecOps::UninitializedValueConstruct ; (; ForwardIt ; first, . ForwardIt ; last . ). Definition at line 530 of file RVec.hxx. ◆ void(). template<typename T , bool TriviallyCopyable> . ROOT::Internal::VecOps::void ; (; off ; ). ROOTInternalVecOps. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal_1_1VecOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1VecOps.html
https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1VecOps.html:1345,Integrability,depend,depend,1345,"e;  The size of the inline storage of an RVec. More...;  ; struct  SmallVectorAlignmentAndSize;  Used to figure out the offset of the first element of an RVec. More...;  ; class  SmallVectorBase;  This is all the stuff common to all SmallVectors. More...;  ; struct  SmallVectorStorage;  Storage for the SmallVector elements. More...;  ; struct  SmallVectorStorage< T, 0 >;  We need the storage to be properly aligned even for small-size of 0 so that the pointer math in SmallVectorTemplateCommon::getFirstEl() is well-defined. More...;  ; class  SmallVectorTemplateBase;  SmallVectorTemplateBase<TriviallyCopyable = false> - This is where we put method implementations that are designed to work with non-trivial T's. More...;  ; class  SmallVectorTemplateBase< T, true >;  SmallVectorTemplateBase<TriviallyCopyable = true> - This is where we put method implementations that are designed to work with trivially copyable T's. More...;  ; class  SmallVectorTemplateCommon;  This is the part of SmallVectorTemplateBase which does not depend on whether the type T is a POD. More...;  . Typedefs; template<typename T > ; using RVec = ROOT::VecOps::RVec< T >;  . Functions; constexpr bool All (const bool *vals, std::size_t size);  ; template<typename... T> ; std::size_t GetVectorsSize (const std::string &id, const RVec< T > &... vs);  ; template<typename Tuple_t , std::size_t... Is> ; auto MapFromTuple (Tuple_t &&t, std::index_sequence< Is... >) -> decltype(MapImpl(std::get< std::tuple_size< Tuple_t >::value - 1 >(t), std::get< Is >(t)...));  ; template<typename F , typename... RVecs> ; auto MapImpl (F &&f, RVecs &&... vs) -> RVec< decltype(f(vs[0]...))>;  ; uint64_t NextPowerOf2 (uint64_t A);  Return the next power of two (in 64-bits) that is strictly greater than A. ;  ; template<typename T > ; void ResetView (RVec< T > &v, T *addr, std::size_t sz);  An unsafe function to reset the buffer for which this RVec is acting as a view. ;  ; template<typename ForwardIt > ; void UninitializedValueC",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal_1_1VecOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1VecOps.html
https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1VecOps.html:2177,Safety,unsafe,unsafe,2177,"plementations that are designed to work with trivially copyable T's. More...;  ; class  SmallVectorTemplateCommon;  This is the part of SmallVectorTemplateBase which does not depend on whether the type T is a POD. More...;  . Typedefs; template<typename T > ; using RVec = ROOT::VecOps::RVec< T >;  . Functions; constexpr bool All (const bool *vals, std::size_t size);  ; template<typename... T> ; std::size_t GetVectorsSize (const std::string &id, const RVec< T > &... vs);  ; template<typename Tuple_t , std::size_t... Is> ; auto MapFromTuple (Tuple_t &&t, std::index_sequence< Is... >) -> decltype(MapImpl(std::get< std::tuple_size< Tuple_t >::value - 1 >(t), std::get< Is >(t)...));  ; template<typename F , typename... RVecs> ; auto MapImpl (F &&f, RVecs &&... vs) -> RVec< decltype(f(vs[0]...))>;  ; uint64_t NextPowerOf2 (uint64_t A);  Return the next power of two (in 64-bits) that is strictly greater than A. ;  ; template<typename T > ; void ResetView (RVec< T > &v, T *addr, std::size_t sz);  An unsafe function to reset the buffer for which this RVec is acting as a view. ;  ; template<typename ForwardIt > ; void UninitializedValueConstruct (ForwardIt first, ForwardIt last);  ; template<typename T , bool TriviallyCopyable> ;  void (off) SmallVectorTemplateBase< T;  . Typedef Documentation. ◆ RVec. template<typename T > . using ROOT::Internal::VecOps::RVec = typedef ROOT::VecOps::RVec<T>. Definition at line 69 of file RVec.hxx. Function Documentation. ◆ All(). constexpr bool ROOT::Internal::VecOps::All ; (; const bool * ; vals, . std::size_t ; size . ). constexpr . Definition at line 79 of file RVec.hxx. ◆ GetVectorsSize(). template<typename... T> . std::size_t ROOT::Internal::VecOps::GetVectorsSize ; (; const std::string & ; id, . const RVec< T > &... ; vs . ). Definition at line 88 of file RVec.hxx. ◆ MapFromTuple(). template<typename Tuple_t , std::size_t... Is> . auto ROOT::Internal::VecOps::MapFromTuple ; (; Tuple_t && ; t, . std::index_sequence< Is... > ;  . ); -> d",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal_1_1VecOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1VecOps.html
https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1VecOps.html:3883,Safety,unsafe,unsafe,3883,"entation. ◆ All(). constexpr bool ROOT::Internal::VecOps::All ; (; const bool * ; vals, . std::size_t ; size . ). constexpr . Definition at line 79 of file RVec.hxx. ◆ GetVectorsSize(). template<typename... T> . std::size_t ROOT::Internal::VecOps::GetVectorsSize ; (; const std::string & ; id, . const RVec< T > &... ; vs . ). Definition at line 88 of file RVec.hxx. ◆ MapFromTuple(). template<typename Tuple_t , std::size_t... Is> . auto ROOT::Internal::VecOps::MapFromTuple ; (; Tuple_t && ; t, . std::index_sequence< Is... > ;  . ); -> decltype(MapImpl(std::get<std::tuple_size<Tuple_t>::value - 1>(t), std::get<Is>(t)...)). Definition at line 117 of file RVec.hxx. ◆ MapImpl(). template<typename F , typename... RVecs> . auto ROOT::Internal::VecOps::MapImpl ; (; F && ; f, . RVecs &&... ; vs . ); -> RVec<decltype(f(vs[0]...))>. Definition at line 105 of file RVec.hxx. ◆ NextPowerOf2(). uint64_t ROOT::Internal::VecOps::NextPowerOf2 ; (; uint64_t ; A). inline . Return the next power of two (in 64-bits) that is strictly greater than A. ; Return zero on overflow. ; Definition at line 126 of file RVec.hxx. ◆ ResetView(). template<typename T > . void ROOT::Internal::VecOps::ResetView ; (; RVec< T > & ; v, . T * ; addr, . std::size_t ; sz . ). An unsafe function to reset the buffer for which this RVec is acting as a view. ; NoteThis is a low-level method that must be called on RVecs that are already non-owning:; it does not put the RVec in ""non-owning mode"" (fCapacity == -1); it does not free any owned buffer . Definition at line 546 of file RVec.hxx. ◆ UninitializedValueConstruct(). template<typename ForwardIt > . void ROOT::Internal::VecOps::UninitializedValueConstruct ; (; ForwardIt ; first, . ForwardIt ; last . ). Definition at line 530 of file RVec.hxx. ◆ void(). template<typename T , bool TriviallyCopyable> . ROOT::Internal::VecOps::void ; (; off ; ). ROOTInternalVecOps. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal_1_1VecOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1VecOps.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:1952,Availability,error,error,1952,"ationMultiDim;  ; namespace  IntegrationOneDim;  ; namespace  Internal;  ; namespace  internal;  ; namespace  Interpolation;  ; namespace  MCIntegration;  ; namespace  Minim;  ; namespace  Minim1D;  ; namespace  Roots;  Root-Finding Algorithms. ;  ; namespace  rowOffsetsUtils;  ; namespace  Sampler;  ; namespace  Util;  namespace defining Utility functions needed by mathcore ;  ; namespace  VectorUtil;  Global Helper functions for generic Vector classes. ;  . Classes; class  AdaptiveIntegratorMultiDim;  Class for adaptive quadrature integration in multi-dimensions using rectangular regions. More...;  ; class  AddOp;  Addition Operation Class. More...;  ; struct  AddPolicy;  matrix addition policy More...;  ; struct  AddPolicy< T, D1, D2, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  ; struct  Assign;  Structure to assign from an expression based to general matrix to general matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Dummy Structure which flags an error to avoid assignment from expression based on a general matrix to a symmetric matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Structure to assign from an expression based to symmetric matrix to symmetric matrix. More...;  ; struct  AssignItr;  Structure for assignment to a general matrix from iterator. More...;  ; struct  AssignItr< T, D1, D2, MatRepSym< T, D1 > >;  Specialized structure for assignment to a symmetrix matrix from iterator. More...;  ; struct  AssignSym;  Force Expression evaluation from general to symmetric. More...;  ; class  AxisAngle;  AxisAngle class describing rotation represented with direction axis (3D Vector) and an angle of rotation around that axis. More...;  ; class  BaseIntegratorOptions;  Base class for Numerical integration options common in 1D and multi-dimension This is an internal class and is not supposed to be instantiated by the user. More...;  ; class  BasicFitMethodFunction;  FitMethodFun",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:19307,Availability,error,errors,19307,"rametricFunctionOneDim;  Specialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricGradFunctionMultiDimTempl;  Interface (abstract class) for parametric gradient multi-dimensional functions providing in addition to function evaluation with respect to the coordinates also the gradient with respect to the parameters, via the method ParameterGradient. More...;  ; class  IParametricGradFunctionOneDim;  Interface (abstract class) for parametric one-dimensional gradient functions providing in addition to function evaluation with respect the coordinates also the gradient with respect to the parameters, via the method ParameterGradient. More...;  ; class  IRootFinderMethod;  Interface for finding function roots of one-dimensional functions. More...;  ; class  KahanSum;  The Kahan summation is a compensated summation algorithm, which significantly reduces numerical errors when adding a sequence of finite-precision floating point numbers. More...;  ; class  KDTree;  ; class  LCGEngine;  ; class  LocalCoordinateSystemTag;  Tag for identifying vectors based on a local coordinate system. More...;  ; class  LorentzRotation;  Lorentz transformation class with the (4D) transformation represented by a 4x4 orthosymplectic matrix. More...;  ; class  LorentzVector;  Class describing a generic LorentzVector in the 4D space-time, using the specified coordinate system for the spatial vector part. More...;  ; class  LSResidualFunc;  LSResidualFunc class description. More...;  ; class  MathMoreLib;  ; class  MatRepStd;  Expression wrapper class for Matrix objects. More...;  ; class  MatRepSym;  MatRepSym Matrix storage representation for a symmetric matrix of dimension NxN This class is a template on the contained type and on the symmetric matrix size, N. More...;  ; class  MatrixMulOp;  Class for Matrix-Matrix multiplication. More...;  ; ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:21478,Availability,error,error,21478,"ta_col_dot< 0 >;  ; struct  meta_dot;  ; struct  meta_dot< 0 >;  ; struct  meta_mag;  ; struct  meta_mag< 0 >;  ; struct  meta_matrix_dot;  ; struct  meta_matrix_dot< 0 >;  ; struct  meta_row_dot;  ; struct  meta_row_dot< 0 >;  ; class  Minimizer;  Abstract Minimizer class, defining the interface for the various minimizer (like Minuit2, Minuit, GSL, etc..) in ROOT. More...;  ; class  MinimizerOptions;  Minimizer options. More...;  ; class  MinimizerVariableTransformation;  Base class for MinimizerVariable transformations defining the functions to deal with bounded parameters. More...;  ; class  MinimTransformFunction;  MinimTransformFunction class to perform a transformations on the variables to deal with fixed or limited variables (support both double and single bounds) The class manages the passed function pointer. More...;  ; class  MinimTransformVariable;  MinimTransformVariable class Contains meta information of the variables such as bounds, fix flags and deals with transformation of the variable The class does not contain the values and the step size (error) of the variable This is an internal class used by the MinimTransformFunction class. More...;  ; class  MinOp;  Subtraction Operation Class. More...;  ; class  Minus;  Unary Minus Operation Class. More...;  ; struct  MinusEquals;  Evaluate the expression performing a -= operation Need to check whether creating a temporary object with the expression result (like in op: A -= A * B ) More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Specialization for symmetrix -= general : NOT Allowed operation. More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Specialization for symmetric matrices. More...;  ; struct  MiserParameters;  Structure collecting parameters for MISER multidimensional integration. More...;  ; class  MixMaxEngine;  MixMaxEngine is a wrapper class for the MIXMAX Random number generator. More...;  ; class  MixMaxEngineI",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:56512,Availability,error,error,56512,"ame dimensions: C(i,j) = A(i,j) / B(i,j) returning a matrix expression. ;  ; template<class T , unsigned int D> ; T Dot (const SVector< T, D > &lhs, const SVector< T, D > &rhs);  Vector dot product. ;  ; template<class A , class T , unsigned int D> ; T Dot (const SVector< T, D > &lhs, const VecExpr< A, T, D > &rhs);  ; template<class A , class T , unsigned int D> ; T Dot (const VecExpr< A, T, D > &lhs, const SVector< T, D > &rhs);  ; template<class A , class B , class T , unsigned int D> ; T Dot (const VecExpr< A, T, D > &lhs, const VecExpr< B, T, D > &rhs);  ; template<class T > ; T etaMax ();  Function providing the maximum possible value of pseudorapidity for a non-zero rho, in the Scalar type with the largest dynamic range. ;  ; long double etaMax_impl ();  The following function could be called to provide the maximum possible value of pseudorapidity for a non-zero rho. ;  ; double expm1 (double x);  exp(x) -1 with error cancellation when x is small ;  ; double exponential_cdf (double x, double lambda, double x0=0);  Cumulative distribution function of the exponential distribution (lower tail). ;  ; double exponential_cdf_c (double x, double lambda, double x0=0);  Complement of the cumulative distribution function of the exponential distribution (upper tail). ;  ; template<class A , class T , unsigned int D, unsigned int D2, class R > ; Expr< UnaryOp< Fabs< T >, Expr< A, T, D, D2, R >, T >, T, D, D2, R > fabs (const Expr< A, T, D, D2, R > &rhs);  ; template<class T , unsigned int D, unsigned int D2, class R > ; Expr< UnaryOp< Fabs< T >, SMatrix< T, D, D2, R >, T >, T, D, D2, R > fabs (const SMatrix< T, D, D2, R > &rhs);  abs of a matrix m2(i,j) = | m1(i,j) | returning a matrix epression ;  ; template<class T , unsigned int D> ; VecExpr< UnaryOp< Fabs< T >, SVector< T, D >, T >, T, D > fabs (const SVector< T, D > &rhs);  abs of a vector : v2(i) = | v1(i) | returning a vector expression ;  ; template<class A , class T , unsigned int D> ; VecExpr< UnaryOp< Fabs< T >",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:110220,Availability,error,error,110220,"ribution function of the lower tail of the normal (Gaussian) distribution (normal_cdf). ;  ; double uniform_quantile_c (double z, double a, double b);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the uniform (flat) distribution (uniform_cdf_c). ;  ; double uniform_quantile (double z, double a, double b);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the uniform (flat) distribution (uniform_cdf). ;  ; double landau_quantile (double z, double xi=1);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the Landau distribution (landau_cdf). ;  ; double landau_quantile_c (double z, double xi=1);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the landau distribution (landau_cdf_c). ;  ; Special Functions from MathCore; double erf (double x);  Error function encountered in integrating the normal distribution. ;  ; double erfc (double x);  Complementary error function. ;  ; double tgamma (double x);  The gamma function is defined to be the extension of the factorial to real numbers. ;  ; double lgamma (double x);  Calculates the logarithm of the gamma function. ;  ; double inc_gamma (double a, double x);  Calculates the normalized (regularized) lower incomplete gamma function (lower integral) ;  ; double inc_gamma_c (double a, double x);  Calculates the normalized (regularized) upper incomplete gamma function (upper integral) ;  ; double beta (double x, double y);  Calculates the beta function. ;  ; double inc_beta (double x, double a, double b);  Calculates the normalized (regularized) incomplete beta function. ;  ; double sinint (double x);  Calculates the sine integral. ;  ; double cosint (double x);  Calculates the real part of the cosine integral Re(Ci). ;  ; Quantile Functions from MathMore; The implementation used is that of GSL. . double tdistribution_quantile_c (double z, double r);  Inverse ( \(D^{-1}(z)\)) of",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:151388,Availability,error,error,151388," lhs, . const SVector< T, D > & ; rhs . ). inline . Definition at line 181 of file Functions.h. ◆ Dot() [3/3]. template<class A , class B , class T , unsigned int D> . T ROOT::Math::Dot ; (; const VecExpr< A, T, D > & ; lhs, . const VecExpr< B, T, D > & ; rhs . ). inline . Definition at line 190 of file Functions.h. ◆ etaMax(). template<class T > . T ROOT::Math::etaMax ; (; ). inline . Function providing the maximum possible value of pseudorapidity for a non-zero rho, in the Scalar type with the largest dynamic range. ; Definition at line 51 of file etaMax.h. ◆ etaMax_impl(). long double ROOT::Math::etaMax_impl ; (; ). inline . The following function could be called to provide the maximum possible value of pseudorapidity for a non-zero rho. ; This is log ( max/min ) where max and min are the extrema of positive values for type long double. ; Definition at line 36 of file etaMax.h. ◆ expm1(). double ROOT::Math::expm1 ; (; double ; x). inline . exp(x) -1 with error cancellation when x is small ; Definition at line 110 of file Math.h. ◆ fabs() [1/2]. template<class A , class T , unsigned int D, unsigned int D2, class R > . Expr< UnaryOp< Fabs< T >, Expr< A, T, D, D2, R >, T >, T, D, D2, R > ROOT::Math::fabs ; (; const Expr< A, T, D, D2, R > & ; rhs). inline . Definition at line 160 of file UnaryOperators.h. ◆ fabs() [2/2]. template<class A , class T , unsigned int D> . VecExpr< UnaryOp< Fabs< T >, VecExpr< A, T, D >, T >, T, D > ROOT::Math::fabs ; (; const VecExpr< A, T, D > & ; rhs). inline . Definition at line 131 of file UnaryOperators.h. ◆ gaussian_cdf(). double ROOT::Math::gaussian_cdf ; (; double ; x, . double ; sigma = 1, . double ; x0 = 0 . ). inline . Alternative name for same function. ; Definition at line 485 of file ProbFuncMathCore.h. ◆ gaussian_cdf_c(). double ROOT::Math::gaussian_cdf_c ; (; double ; x, . double ; sigma = 1, . double ; x0 = 0 . ). inline . Alternative name for same function. ; Definition at line 463 of file ProbFuncMathCore.h. ◆ getCount()",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:153705,Availability,error,error,153705,"9 of file GSLMultiRootFinder.cxx. ◆ GetGSLType(). const gsl_multiroot_fsolver_type * ROOT::Math::GetGSLType ; (; GSLMultiRootFinder::EType ; type). Definition at line 171 of file GSLMultiRootFinder.cxx. ◆ getSum(). int ROOT::Math::getSum ; (; const int * ; x, . int ; n . ). Definition at line 534 of file GoFTest.cxx. ◆ human_readable(). template<class char_t , class traits_t > . std::basic_ios< char_t, traits_t > & ROOT::Math::human_readable ; (; std::basic_ios< char_t, traits_t > & ; ios). inline . Definition at line 197 of file GenVectorIO.h. ◆ Lmag(). template<class A , class T > . T ROOT::Math::Lmag ; (; const VecExpr< A, T, 4 > & ; rhs). inline . Definition at line 308 of file Functions.h. ◆ Lmag2(). template<class A , class T > . T ROOT::Math::Lmag2 ; (; const VecExpr< A, T, 4 > & ; rhs). inline . Definition at line 284 of file Functions.h. ◆ log1p(). double ROOT::Math::log1p ; (; double ; x). inline . declarations for functions which are not implemented by some compilers ; log(1+x) with error cancelation when x is small ; Definition at line 98 of file Math.h. ◆ machine_readable(). template<class char_t , class traits_t > . std::basic_ios< char_t, traits_t > & ROOT::Math::machine_readable ; (; std::basic_ios< char_t, traits_t > & ; ios). inline . Definition at line 208 of file GenVectorIO.h. ◆ Mag(). template<class A , class T , unsigned int D> . T ROOT::Math::Mag ; (; const VecExpr< A, T, D > & ; rhs). inline . Definition at line 261 of file Functions.h. ◆ Mag2(). template<class A , class T , unsigned int D> . T ROOT::Math::Mag2 ; (; const VecExpr< A, T, D > & ; rhs). inline . Definition at line 238 of file Functions.h. ◆ minfunction(). double ROOT::Math::minfunction ; (; const std::vector< double > & ; x). function to return the function values at point x ; Definition at line 19 of file RMinimizer.cxx. ◆ mingradfunction(). TVectorD ROOT::Math::mingradfunction ; (; TVectorD ; y). function to return the gradient values at point y ; Definition at line 25 of file",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:1479,Deployability,integrat,integration,1479,"space  CholeskyDecompHelpers;  helpers for CholeskyDecomp ;  ; namespace  detail;  ; namespace  GenAlgoOptUtil;  ; namespace  GenVector;  ; namespace  GenVector_detail;  ; namespace  GSLRootHelper;  Helper functions to test convergence of Root-Finding algorithms. ;  ; namespace  GSLSimAn;  ; namespace  gv_detail;  ; namespace  Impl;  ; namespace  IntegMultiDim;  ; namespace  IntegOneDim;  ; namespace  IntegOptionsUtil;  ; namespace  Integration;  ; namespace  IntegrationMultiDim;  ; namespace  IntegrationOneDim;  ; namespace  Internal;  ; namespace  internal;  ; namespace  Interpolation;  ; namespace  MCIntegration;  ; namespace  Minim;  ; namespace  Minim1D;  ; namespace  Roots;  Root-Finding Algorithms. ;  ; namespace  rowOffsetsUtils;  ; namespace  Sampler;  ; namespace  Util;  namespace defining Utility functions needed by mathcore ;  ; namespace  VectorUtil;  Global Helper functions for generic Vector classes. ;  . Classes; class  AdaptiveIntegratorMultiDim;  Class for adaptive quadrature integration in multi-dimensions using rectangular regions. More...;  ; class  AddOp;  Addition Operation Class. More...;  ; struct  AddPolicy;  matrix addition policy More...;  ; struct  AddPolicy< T, D1, D2, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  ; struct  Assign;  Structure to assign from an expression based to general matrix to general matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Dummy Structure which flags an error to avoid assignment from expression based on a general matrix to a symmetric matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Structure to assign from an expression based to symmetric matrix to symmetric matrix. More...;  ; struct  AssignItr;  Structure for assignment to a general matrix from iterator. More...;  ; struct  AssignItr< T, D1, D2, MatRepSym< T, D1 > >;  Specialized structure for assignment to a symmetrix matrix from iterator. More...;  ; struct  Assig",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:2754,Deployability,integrat,integration,2754," based to general matrix to general matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Dummy Structure which flags an error to avoid assignment from expression based on a general matrix to a symmetric matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Structure to assign from an expression based to symmetric matrix to symmetric matrix. More...;  ; struct  AssignItr;  Structure for assignment to a general matrix from iterator. More...;  ; struct  AssignItr< T, D1, D2, MatRepSym< T, D1 > >;  Specialized structure for assignment to a symmetrix matrix from iterator. More...;  ; struct  AssignSym;  Force Expression evaluation from general to symmetric. More...;  ; class  AxisAngle;  AxisAngle class describing rotation represented with direction axis (3D Vector) and an angle of rotation around that axis. More...;  ; class  BaseIntegratorOptions;  Base class for Numerical integration options common in 1D and multi-dimension This is an internal class and is not supposed to be instantiated by the user. More...;  ; class  BasicFitMethodFunction;  FitMethodFunction class Interface for objective functions (like chi2 and likelihood used in the fit) In addition to normal function interface provide interface for calculating each data contribution to the function which is required by some algorithm (like Fumili) More...;  ; class  BasicMinimizer;  Base Minimizer class, which defines the basic functionality of various minimizer implementations (apart from Minuit and Minuit2) It provides support for storing parameter values, step size, parameter transformation etc. More...;  ; class  BinaryOp;  BinaryOperation class A class representing binary operators in the parse tree. More...;  ; class  BinaryOpCopyL;  Binary Operation class with value storage for the left argument. More...;  ; class  BinaryOpCopyR;  Binary Operation class with value storage for the right argument. More...;  ; class  Boost;  Lo",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:7660,Deployability,integrat,integration,7660,eration Class. More...;  ; class  Factory;  Factory class holding static functions to create the interfaces like ROOT::Math::Minimizer via the Plugin Manager. More...;  ; class  FastInverter;  Fast Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  FastInverter< 3 >;  3x3 direct matrix inversion using Cramer Rule use only for FastInverter More...;  ; class  FastInverter< 4 >;  4x4 matrix inversion using Cramers rule. More...;  ; class  FastInverter< 5 >;  5x5 Matrix inversion using Cramers rule. More...;  ; class  FitTransformFunction;  Internal class used by GSLNLSMinimizer to implement the transformation of the chi2 function used by GSL Non-linear Least-square fitting The class is template on the FitMethodFunction type to support both gradient and non gradient functions. More...;  ; class  Functor;  Documentation for class Functor class. More...;  ; class  Functor1D;  Functor1D class for one-dimensional functions. More...;  ; class  GaussIntegrator;  User class for performing function integration. More...;  ; class  GaussLegendreIntegrator;  User class for performing function integration. More...;  ; class  GenAlgoOptions;  class implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs More...;  ; struct  GeneralHessianCalc;  ; struct  GeneralHessianCalc< double >;  ; struct  GeneralLinearFunctionDerivation;  Auxiliar class to bypass the (provisional) lack of vectorization in TFormula::EvalPar. More...;  ; struct  GeneralLinearFunctionDerivation< double >;  ; class  GeneticMinimizer;  GeneticMinimizer. More...;  ; struct  GeneticMinimizerParameters;  ; class  GenVector_exception;  ; class  GlobalCoordinateSystemTag;  Tag for identifying vectors based on a global coordinate system. More...;  ; class  GoFTest;  GoFTest class implementing the 1 sample and 2 sample goodness of fit tests for uni-variate distributions and data. More...;  ; class  GradFunctor;  GradFunctor class for Multidimensio,MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:7753,Deployability,integrat,integration,7753,ate the interfaces like ROOT::Math::Minimizer via the Plugin Manager. More...;  ; class  FastInverter;  Fast Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  FastInverter< 3 >;  3x3 direct matrix inversion using Cramer Rule use only for FastInverter More...;  ; class  FastInverter< 4 >;  4x4 matrix inversion using Cramers rule. More...;  ; class  FastInverter< 5 >;  5x5 Matrix inversion using Cramers rule. More...;  ; class  FitTransformFunction;  Internal class used by GSLNLSMinimizer to implement the transformation of the chi2 function used by GSL Non-linear Least-square fitting The class is template on the FitMethodFunction type to support both gradient and non gradient functions. More...;  ; class  Functor;  Documentation for class Functor class. More...;  ; class  Functor1D;  Functor1D class for one-dimensional functions. More...;  ; class  GaussIntegrator;  User class for performing function integration. More...;  ; class  GaussLegendreIntegrator;  User class for performing function integration. More...;  ; class  GenAlgoOptions;  class implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs More...;  ; struct  GeneralHessianCalc;  ; struct  GeneralHessianCalc< double >;  ; struct  GeneralLinearFunctionDerivation;  Auxiliar class to bypass the (provisional) lack of vectorization in TFormula::EvalPar. More...;  ; struct  GeneralLinearFunctionDerivation< double >;  ; class  GeneticMinimizer;  GeneticMinimizer. More...;  ; struct  GeneticMinimizerParameters;  ; class  GenVector_exception;  ; class  GlobalCoordinateSystemTag;  Tag for identifying vectors based on a global coordinate system. More...;  ; class  GoFTest;  GoFTest class implementing the 1 sample and 2 sample goodness of fit tests for uni-variate distributions and data. More...;  ; class  GradFunctor;  GradFunctor class for Multidimensional gradient functions. More...;  ; class  GradFunctor1D;  GradFunctor1D class for one-di,MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:9641,Deployability,integrat,integration,9641,"s for Multidimensional gradient functions. More...;  ; class  GradFunctor1D;  GradFunctor1D class for one-dimensional gradient functions. More...;  ; class  GSL1DMinimizerWrapper;  wrapper class for gsl_min_fminimizer structure More...;  ; class  GSLChebSeries;  wrapper class for C struct gsl_cheb_series More...;  ; class  GSLDerivator;  Class for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ). More...;  ; class  GSLError;  class to change GSL Error handler to use ROOT one. More...;  ; class  GSLFunctionAdapter;  Class for adapting any C++ functor class to C function pointers used by GSL. More...;  ; class  GSLFunctionDerivWrapper;  class to wrap a gsl_function_fdf (with derivatives) More...;  ; class  GSLFunctionWrapper;  Wrapper class to the gsl_function C structure. More...;  ; class  GSLIntegrationWorkspace;  ; class  GSLIntegrator;  Class for performing numerical integration of a function in one dimension. More...;  ; class  GSLInterpolator;  Interpolation class based on GSL interpolation functions. More...;  ; class  GSLMCIntegrationWorkspace;  ; class  GSLMCIntegrator;  ; class  GSLMinimizer;  GSLMinimizer class. More...;  ; class  GSLMinimizer1D;  Minimizer for arbitrary one dimensional functions. More...;  ; class  GSLMiserIntegrationWorkspace;  Workspace for MISER. More...;  ; struct  GSLMonteFunctionAdapter;  ; class  GSLMonteFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; class  GSLMultiFit;  GSLMultiFit, internal class for implementing GSL non linear least square GSL fitting. More...;  ; class  GSLMultiFitFunctionAdapter;  Class for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: More...;  ; class  GSLMultiFitFunctionWrapper;  wrapper to a ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:10224,Deployability,integrat,integration,10224," More...;  ; class  GSLError;  class to change GSL Error handler to use ROOT one. More...;  ; class  GSLFunctionAdapter;  Class for adapting any C++ functor class to C function pointers used by GSL. More...;  ; class  GSLFunctionDerivWrapper;  class to wrap a gsl_function_fdf (with derivatives) More...;  ; class  GSLFunctionWrapper;  Wrapper class to the gsl_function C structure. More...;  ; class  GSLIntegrationWorkspace;  ; class  GSLIntegrator;  Class for performing numerical integration of a function in one dimension. More...;  ; class  GSLInterpolator;  Interpolation class based on GSL interpolation functions. More...;  ; class  GSLMCIntegrationWorkspace;  ; class  GSLMCIntegrator;  ; class  GSLMinimizer;  GSLMinimizer class. More...;  ; class  GSLMinimizer1D;  Minimizer for arbitrary one dimensional functions. More...;  ; class  GSLMiserIntegrationWorkspace;  Workspace for MISER. More...;  ; struct  GSLMonteFunctionAdapter;  ; class  GSLMonteFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; class  GSLMultiFit;  GSLMultiFit, internal class for implementing GSL non linear least square GSL fitting. More...;  ; class  GSLMultiFitFunctionAdapter;  Class for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: More...;  ; class  GSLMultiFitFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinDerivFunctionWrapper;  Wrapper for a multi-dimensional function with derivatives used in GSL multidim minimization algorithm. More...;  ; struct  GSLMultiMinFunctionAdapter;  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms. More...;  ; class  GSLMultiMinFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization al",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:17219,Deployability,integrat,integration,17219,..;  ; class  IBaseFunctionMultiDimTempl;  Documentation for the abstract class IBaseFunctionMultiDim. More...;  ; class  IBaseFunctionOneDim;  Interface (abstract class) for generic functions objects of one-dimension Provides a method to evaluate the function given a value (simple double) by implementing operator() (const double ). More...;  ; class  IBaseParam;  Documentation for the abstract class IBaseParam. More...;  ; class  IGradientFunctionMultiDimTempl;  Interface (abstract class) for multi-dimensional functions providing a gradient calculation. More...;  ; class  IGradientFunctionOneDim;  Interface (abstract class) for one-dimensional functions providing a gradient calculation. More...;  ; class  IGradientMultiDimTempl;  ; class  IMinimizer1D;  Interface class for numerical methods for one-dimensional minimization. More...;  ; class  IntegrandTransform;  Auxiliary inner class for mapping infinite and semi-infinite integrals. More...;  ; class  IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  IntegratorOneDim;  User Class for performing numerical integration of a function in one dimension. More...;  ; class  IntegratorOneDimOptions;  Numerical one dimensional integration options. More...;  ; class  Interpolator;  Class for performing function interpolation of points. More...;  ; class  Inverter;  Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  Inverter< 0 >;  Inverter<0>. More...;  ; class  Inverter< 1 >;  1x1 matrix inversion \(a_{11} \to 1/a_{11}\) More...;  ; class  Inverter< 2 >;  2x2 matrix inversion using Cramers rule. More...;  ; class  IOptions;  Generic interface for defining configuration options of a numerical algorithm. More...;  ; class  IParametricFunctionMultiDimTempl;  IParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a derive,MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:17307,Deployability,integrat,integration,17307,tiDim. More...;  ; class  IBaseFunctionOneDim;  Interface (abstract class) for generic functions objects of one-dimension Provides a method to evaluate the function given a value (simple double) by implementing operator() (const double ). More...;  ; class  IBaseParam;  Documentation for the abstract class IBaseParam. More...;  ; class  IGradientFunctionMultiDimTempl;  Interface (abstract class) for multi-dimensional functions providing a gradient calculation. More...;  ; class  IGradientFunctionOneDim;  Interface (abstract class) for one-dimensional functions providing a gradient calculation. More...;  ; class  IGradientMultiDimTempl;  ; class  IMinimizer1D;  Interface class for numerical methods for one-dimensional minimization. More...;  ; class  IntegrandTransform;  Auxiliary inner class for mapping infinite and semi-infinite integrals. More...;  ; class  IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  IntegratorOneDim;  User Class for performing numerical integration of a function in one dimension. More...;  ; class  IntegratorOneDimOptions;  Numerical one dimensional integration options. More...;  ; class  Interpolator;  Class for performing function interpolation of points. More...;  ; class  Inverter;  Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  Inverter< 0 >;  Inverter<0>. More...;  ; class  Inverter< 1 >;  1x1 matrix inversion \(a_{11} \to 1/a_{11}\) More...;  ; class  Inverter< 2 >;  2x2 matrix inversion using Cramers rule. More...;  ; class  IOptions;  Generic interface for defining configuration options of a numerical algorithm. More...;  ; class  IParametricFunctionMultiDimTempl;  IParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam. More...;  ; class  IP,MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:17402,Deployability,integrat,integration,17402, one-dimension Provides a method to evaluate the function given a value (simple double) by implementing operator() (const double ). More...;  ; class  IBaseParam;  Documentation for the abstract class IBaseParam. More...;  ; class  IGradientFunctionMultiDimTempl;  Interface (abstract class) for multi-dimensional functions providing a gradient calculation. More...;  ; class  IGradientFunctionOneDim;  Interface (abstract class) for one-dimensional functions providing a gradient calculation. More...;  ; class  IGradientMultiDimTempl;  ; class  IMinimizer1D;  Interface class for numerical methods for one-dimensional minimization. More...;  ; class  IntegrandTransform;  Auxiliary inner class for mapping infinite and semi-infinite integrals. More...;  ; class  IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  IntegratorOneDim;  User Class for performing numerical integration of a function in one dimension. More...;  ; class  IntegratorOneDimOptions;  Numerical one dimensional integration options. More...;  ; class  Interpolator;  Class for performing function interpolation of points. More...;  ; class  Inverter;  Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  Inverter< 0 >;  Inverter<0>. More...;  ; class  Inverter< 1 >;  1x1 matrix inversion \(a_{11} \to 1/a_{11}\) More...;  ; class  Inverter< 2 >;  2x2 matrix inversion using Cramers rule. More...;  ; class  IOptions;  Generic interface for defining configuration options of a numerical algorithm. More...;  ; class  IParametricFunctionMultiDimTempl;  IParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricFunctionOneDim;  Specialized IParamFunction interface (abstract class) for one-dimensional paramet,MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:17517,Deployability,integrat,integration,17517,perator() (const double ). More...;  ; class  IBaseParam;  Documentation for the abstract class IBaseParam. More...;  ; class  IGradientFunctionMultiDimTempl;  Interface (abstract class) for multi-dimensional functions providing a gradient calculation. More...;  ; class  IGradientFunctionOneDim;  Interface (abstract class) for one-dimensional functions providing a gradient calculation. More...;  ; class  IGradientMultiDimTempl;  ; class  IMinimizer1D;  Interface class for numerical methods for one-dimensional minimization. More...;  ; class  IntegrandTransform;  Auxiliary inner class for mapping infinite and semi-infinite integrals. More...;  ; class  IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  IntegratorOneDim;  User Class for performing numerical integration of a function in one dimension. More...;  ; class  IntegratorOneDimOptions;  Numerical one dimensional integration options. More...;  ; class  Interpolator;  Class for performing function interpolation of points. More...;  ; class  Inverter;  Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  Inverter< 0 >;  Inverter<0>. More...;  ; class  Inverter< 1 >;  1x1 matrix inversion \(a_{11} \to 1/a_{11}\) More...;  ; class  Inverter< 2 >;  2x2 matrix inversion using Cramers rule. More...;  ; class  IOptions;  Generic interface for defining configuration options of a numerical algorithm. More...;  ; class  IParametricFunctionMultiDimTempl;  IParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricFunctionOneDim;  Specialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam. More,MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:17979,Deployability,configurat,configuration,17979,"erical methods for one-dimensional minimization. More...;  ; class  IntegrandTransform;  Auxiliary inner class for mapping infinite and semi-infinite integrals. More...;  ; class  IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  IntegratorOneDim;  User Class for performing numerical integration of a function in one dimension. More...;  ; class  IntegratorOneDimOptions;  Numerical one dimensional integration options. More...;  ; class  Interpolator;  Class for performing function interpolation of points. More...;  ; class  Inverter;  Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  Inverter< 0 >;  Inverter<0>. More...;  ; class  Inverter< 1 >;  1x1 matrix inversion \(a_{11} \to 1/a_{11}\) More...;  ; class  Inverter< 2 >;  2x2 matrix inversion using Cramers rule. More...;  ; class  IOptions;  Generic interface for defining configuration options of a numerical algorithm. More...;  ; class  IParametricFunctionMultiDimTempl;  IParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricFunctionOneDim;  Specialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricGradFunctionMultiDimTempl;  Interface (abstract class) for parametric gradient multi-dimensional functions providing in addition to function evaluation with respect to the coordinates also the gradient with respect to the parameters, via the method ParameterGradient. More...;  ; class  IParametricGradFunctionOneDim;  Interface (abstract class) for parametric one-dimensional gradient functions providing in addition to function evaluation with respect t",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:22253,Deployability,integrat,integration,22253," function pointer. More...;  ; class  MinimTransformVariable;  MinimTransformVariable class Contains meta information of the variables such as bounds, fix flags and deals with transformation of the variable The class does not contain the values and the step size (error) of the variable This is an internal class used by the MinimTransformFunction class. More...;  ; class  MinOp;  Subtraction Operation Class. More...;  ; class  Minus;  Unary Minus Operation Class. More...;  ; struct  MinusEquals;  Evaluate the expression performing a -= operation Need to check whether creating a temporary object with the expression result (like in op: A -= A * B ) More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Specialization for symmetrix -= general : NOT Allowed operation. More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Specialization for symmetric matrices. More...;  ; struct  MiserParameters;  Structure collecting parameters for MISER multidimensional integration. More...;  ; class  MixMaxEngine;  MixMaxEngine is a wrapper class for the MIXMAX Random number generator. More...;  ; class  MixMaxEngineImpl;  ; class  MixMaxEngineImpl< ROOT_MM_N >;  ; class  MulOp;  Multiplication (element-wise) Operation Class. More...;  ; class  MultiDimParamFunctionAdapter;  MultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parametric function interface This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiDimParamGradFunctionAdapter;  MultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parametric gradient function interface This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiGenFunctionFitness;  ; class  MultiNumGradFunction;  MultiNumGradFunction class to wrap a n",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:32499,Deployability,integrat,integration,32499,"seOp;  Class for Transpose Operations. More...;  ; struct  TranspPolicy;  matrix transpose policy More...;  ; struct  TranspPolicy< T, D1, D2, MatRepSym< T, D1 > >;  ; class  UnaryOp;  UnaryOperation class A class representing unary operators in the parse tree. More...;  ; class  Vavilov;  Base class describing a Vavilov distribution. More...;  ; class  VavilovAccurate;  Class describing a Vavilov distribution. More...;  ; class  VavilovAccurateCdf;  Class describing the Vavilov cdf. More...;  ; class  VavilovAccuratePdf;  Class describing the Vavilov pdf. More...;  ; class  VavilovAccurateQuantile;  Class describing the Vavilov quantile function. More...;  ; class  VavilovFast;  Class describing a Vavilov distribution. More...;  ; class  VecExpr;  Expression wrapper class for Vector objects. More...;  ; class  VectorMatrixColOp;  Class for Vector-Matrix multiplication. More...;  ; class  VectorMatrixRowOp;  ; struct  VegasParameters;  Structures collecting parameters for VEGAS multidimensional integration For implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h. More...;  ; class  VirtualIntegrator;  Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. More...;  ; class  VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member f",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:32675,Deployability,integrat,integration,32675," ; class  Vavilov;  Base class describing a Vavilov distribution. More...;  ; class  VavilovAccurate;  Class describing a Vavilov distribution. More...;  ; class  VavilovAccurateCdf;  Class describing the Vavilov cdf. More...;  ; class  VavilovAccuratePdf;  Class describing the Vavilov pdf. More...;  ; class  VavilovAccurateQuantile;  Class describing the Vavilov quantile function. More...;  ; class  VavilovFast;  Class describing a Vavilov distribution. More...;  ; class  VecExpr;  Expression wrapper class for Vector objects. More...;  ; class  VectorMatrixColOp;  Class for Vector-Matrix multiplication. More...;  ; class  VectorMatrixRowOp;  ; struct  VegasParameters;  Structures collecting parameters for VEGAS multidimensional integration For implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h. More...;  ; class  VirtualIntegrator;  Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. More...;  ; class  VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:32770,Deployability,integrat,integrator,32770," ; class  Vavilov;  Base class describing a Vavilov distribution. More...;  ; class  VavilovAccurate;  Class describing a Vavilov distribution. More...;  ; class  VavilovAccurateCdf;  Class describing the Vavilov cdf. More...;  ; class  VavilovAccuratePdf;  Class describing the Vavilov pdf. More...;  ; class  VavilovAccurateQuantile;  Class describing the Vavilov quantile function. More...;  ; class  VavilovFast;  Class describing a Vavilov distribution. More...;  ; class  VecExpr;  Expression wrapper class for Vector objects. More...;  ; class  VectorMatrixColOp;  Class for Vector-Matrix multiplication. More...;  ; class  VectorMatrixRowOp;  ; struct  VegasParameters;  Structures collecting parameters for VEGAS multidimensional integration For implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h. More...;  ; class  VirtualIntegrator;  Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. More...;  ; class  VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:32899,Deployability,integrat,integration,32899," ; class  Vavilov;  Base class describing a Vavilov distribution. More...;  ; class  VavilovAccurate;  Class describing a Vavilov distribution. More...;  ; class  VavilovAccurateCdf;  Class describing the Vavilov cdf. More...;  ; class  VavilovAccuratePdf;  Class describing the Vavilov pdf. More...;  ; class  VavilovAccurateQuantile;  Class describing the Vavilov quantile function. More...;  ; class  VavilovFast;  Class describing a Vavilov distribution. More...;  ; class  VecExpr;  Expression wrapper class for Vector objects. More...;  ; class  VectorMatrixColOp;  Class for Vector-Matrix multiplication. More...;  ; class  VectorMatrixRowOp;  ; struct  VegasParameters;  Structures collecting parameters for VEGAS multidimensional integration For implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h. More...;  ; class  VirtualIntegrator;  Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. More...;  ; class  VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:33006,Deployability,integrat,integration,33006,"f;  Class describing the Vavilov pdf. More...;  ; class  VavilovAccurateQuantile;  Class describing the Vavilov quantile function. More...;  ; class  VavilovFast;  Class describing a Vavilov distribution. More...;  ; class  VecExpr;  Expression wrapper class for Vector objects. More...;  ; class  VectorMatrixColOp;  Class for Vector-Matrix multiplication. More...;  ; class  VectorMatrixRowOp;  ; struct  VegasParameters;  Structures collecting parameters for VEGAS multidimensional integration For implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h. More...;  ; class  VirtualIntegrator;  Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. More...;  ; class  VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  WrappedMemMultiFunction;  ; class  WrappedMultiFunction;  Template class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. More...;  ; class  WrappedMultiTF1Templ;  Class to Wrap a ROOT",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:33199,Deployability,integrat,integration,33199,"tribution. More...;  ; class  VecExpr;  Expression wrapper class for Vector objects. More...;  ; class  VectorMatrixColOp;  Class for Vector-Matrix multiplication. More...;  ; class  VectorMatrixRowOp;  ; struct  VegasParameters;  Structures collecting parameters for VEGAS multidimensional integration For implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h. More...;  ; class  VirtualIntegrator;  Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. More...;  ; class  VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  WrappedMemMultiFunction;  ; class  WrappedMultiFunction;  Template class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. More...;  ; class  WrappedMultiTF1Templ;  Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm. More...;  ; class  WrappedParamFunction;  WrappedParamFunction ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:35805,Deployability,integrat,integration,35805,"Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime. More...;  . Typedefs; typedef TRandomEngine DefaultEngineType;  Documentation for the RandomFunction class. ;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGenFunction > FitMethodFunction;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGradFunction > FitMethodGradFunction;  ; typedef double(* FreeFunctionPtr) (double);  ; typedef double(* FreeMultiFunctionPtr) (const double *);  ; typedef double(* FreeParamMultiFunctionPtr) (const double *, const double *);  ; typedef void(* GSLFdfPointer) (double, void *, double *, double *);  ; typedef double(* GSLFuncPointer) (double, void *);  Function pointer corresponding to gsl_function signature. ;  ; typedef double(* GSLMonteFuncPointer) (double *, size_t, void *);  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MonteCarlo integration algorithms. ;  ; typedef void(* GSLMultiFitDfPointer) (const gsl_vector *, void *, gsl_matrix *);  ; typedef void(* GSLMultiFitFdfPointer) (const gsl_vector *, void *, gsl_vector *, gsl_matrix *);  ; typedef double(* GSLMultiFitFPointer) (const gsl_vector *, void *, gsl_vector *);  ; typedef void(* GSLMultiMinDfPointer) (const gsl_vector *, void *, gsl_vector *);  ; typedef void(* GSLMultiMinFdfPointer) (const gsl_vector *, void *, double *, gsl_vector *);  ; typedef double(* GSLMultiMinFuncPointer) (const gsl_vector *, void *);  ; typedef void(* GSLMultiRootDfPointer) (const gsl_vector *, void *, gsl_matrix *);  ; typedef void(* GSLMultiRootFdfPointer) (const gsl_vector *, void *, gsl_vector *, gsl_matrix *);  ; typedef double(* GSLMultiRootFPointer) (const gsl_vector *, void *, gsl_vector *);  ; typedef GSLRngRanLuxS1 GSLRngRanLux1;  ; typedef GSLRngRanLuxS2 GSLRngRanLux2;  ; typedef GSLRngRanLuxD",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:110139,Deployability,integrat,integrating,110139,"uble normal_quantile (double z, double sigma);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the normal (Gaussian) distribution (normal_cdf). ;  ; double uniform_quantile_c (double z, double a, double b);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the uniform (flat) distribution (uniform_cdf_c). ;  ; double uniform_quantile (double z, double a, double b);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the uniform (flat) distribution (uniform_cdf). ;  ; double landau_quantile (double z, double xi=1);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the Landau distribution (landau_cdf). ;  ; double landau_quantile_c (double z, double xi=1);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the landau distribution (landau_cdf_c). ;  ; Special Functions from MathCore; double erf (double x);  Error function encountered in integrating the normal distribution. ;  ; double erfc (double x);  Complementary error function. ;  ; double tgamma (double x);  The gamma function is defined to be the extension of the factorial to real numbers. ;  ; double lgamma (double x);  Calculates the logarithm of the gamma function. ;  ; double inc_gamma (double a, double x);  Calculates the normalized (regularized) lower incomplete gamma function (lower integral) ;  ; double inc_gamma_c (double a, double x);  Calculates the normalized (regularized) upper incomplete gamma function (upper integral) ;  ; double beta (double x, double y);  Calculates the beta function. ;  ; double inc_beta (double x, double a, double b);  Calculates the normalized (regularized) incomplete beta function. ;  ; double sinint (double x);  Calculates the sine integral. ;  ; double cosint (double x);  Calculates the real part of the cosine integral Re(Ci). ;  ; Quantile Functions from MathMore; The implementation used is tha",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:1459,Energy Efficiency,adapt,adaptive,1459,"space  CholeskyDecompHelpers;  helpers for CholeskyDecomp ;  ; namespace  detail;  ; namespace  GenAlgoOptUtil;  ; namespace  GenVector;  ; namespace  GenVector_detail;  ; namespace  GSLRootHelper;  Helper functions to test convergence of Root-Finding algorithms. ;  ; namespace  GSLSimAn;  ; namespace  gv_detail;  ; namespace  Impl;  ; namespace  IntegMultiDim;  ; namespace  IntegOneDim;  ; namespace  IntegOptionsUtil;  ; namespace  Integration;  ; namespace  IntegrationMultiDim;  ; namespace  IntegrationOneDim;  ; namespace  Internal;  ; namespace  internal;  ; namespace  Interpolation;  ; namespace  MCIntegration;  ; namespace  Minim;  ; namespace  Minim1D;  ; namespace  Roots;  Root-Finding Algorithms. ;  ; namespace  rowOffsetsUtils;  ; namespace  Sampler;  ; namespace  Util;  namespace defining Utility functions needed by mathcore ;  ; namespace  VectorUtil;  Global Helper functions for generic Vector classes. ;  . Classes; class  AdaptiveIntegratorMultiDim;  Class for adaptive quadrature integration in multi-dimensions using rectangular regions. More...;  ; class  AddOp;  Addition Operation Class. More...;  ; struct  AddPolicy;  matrix addition policy More...;  ; struct  AddPolicy< T, D1, D2, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  ; struct  Assign;  Structure to assign from an expression based to general matrix to general matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Dummy Structure which flags an error to avoid assignment from expression based on a general matrix to a symmetric matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Structure to assign from an expression based to symmetric matrix to symmetric matrix. More...;  ; struct  AssignItr;  Structure for assignment to a general matrix from iterator. More...;  ; struct  AssignItr< T, D1, D2, MatRepSym< T, D1 > >;  Specialized structure for assignment to a symmetrix matrix from iterator. More...;  ; struct  Assig",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:9289,Energy Efficiency,adapt,adapting,9289,"nVector_exception;  ; class  GlobalCoordinateSystemTag;  Tag for identifying vectors based on a global coordinate system. More...;  ; class  GoFTest;  GoFTest class implementing the 1 sample and 2 sample goodness of fit tests for uni-variate distributions and data. More...;  ; class  GradFunctor;  GradFunctor class for Multidimensional gradient functions. More...;  ; class  GradFunctor1D;  GradFunctor1D class for one-dimensional gradient functions. More...;  ; class  GSL1DMinimizerWrapper;  wrapper class for gsl_min_fminimizer structure More...;  ; class  GSLChebSeries;  wrapper class for C struct gsl_cheb_series More...;  ; class  GSLDerivator;  Class for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ). More...;  ; class  GSLError;  class to change GSL Error handler to use ROOT one. More...;  ; class  GSLFunctionAdapter;  Class for adapting any C++ functor class to C function pointers used by GSL. More...;  ; class  GSLFunctionDerivWrapper;  class to wrap a gsl_function_fdf (with derivatives) More...;  ; class  GSLFunctionWrapper;  Wrapper class to the gsl_function C structure. More...;  ; class  GSLIntegrationWorkspace;  ; class  GSLIntegrator;  Class for performing numerical integration of a function in one dimension. More...;  ; class  GSLInterpolator;  Interpolation class based on GSL interpolation functions. More...;  ; class  GSLMCIntegrationWorkspace;  ; class  GSLMCIntegrator;  ; class  GSLMinimizer;  GSLMinimizer class. More...;  ; class  GSLMinimizer1D;  Minimizer for arbitrary one dimensional functions. More...;  ; class  GSLMiserIntegrationWorkspace;  Workspace for MISER. More...;  ; struct  GSLMonteFunctionAdapter;  ; class  GSLMonteFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; class  GSLMultiFit;  GSLMultiFit, internal ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:10423,Energy Efficiency,adapt,adapting,10423,"lass  GSLFunctionWrapper;  Wrapper class to the gsl_function C structure. More...;  ; class  GSLIntegrationWorkspace;  ; class  GSLIntegrator;  Class for performing numerical integration of a function in one dimension. More...;  ; class  GSLInterpolator;  Interpolation class based on GSL interpolation functions. More...;  ; class  GSLMCIntegrationWorkspace;  ; class  GSLMCIntegrator;  ; class  GSLMinimizer;  GSLMinimizer class. More...;  ; class  GSLMinimizer1D;  Minimizer for arbitrary one dimensional functions. More...;  ; class  GSLMiserIntegrationWorkspace;  Workspace for MISER. More...;  ; struct  GSLMonteFunctionAdapter;  ; class  GSLMonteFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; class  GSLMultiFit;  GSLMultiFit, internal class for implementing GSL non linear least square GSL fitting. More...;  ; class  GSLMultiFitFunctionAdapter;  Class for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: More...;  ; class  GSLMultiFitFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinDerivFunctionWrapper;  Wrapper for a multi-dimensional function with derivatives used in GSL multidim minimization algorithm. More...;  ; struct  GSLMultiMinFunctionAdapter;  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms. More...;  ; class  GSLMultiMinFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinimizer;  GSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives. More...;  ; class  GSLMultiRootBaseSolver;  GSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solve",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:10916,Energy Efficiency,adapt,adapting,10916,"er for arbitrary one dimensional functions. More...;  ; class  GSLMiserIntegrationWorkspace;  Workspace for MISER. More...;  ; struct  GSLMonteFunctionAdapter;  ; class  GSLMonteFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; class  GSLMultiFit;  GSLMultiFit, internal class for implementing GSL non linear least square GSL fitting. More...;  ; class  GSLMultiFitFunctionAdapter;  Class for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: More...;  ; class  GSLMultiFitFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinDerivFunctionWrapper;  Wrapper for a multi-dimensional function with derivatives used in GSL multidim minimization algorithm. More...;  ; struct  GSLMultiMinFunctionAdapter;  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms. More...;  ; class  GSLMultiMinFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinimizer;  GSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives. More...;  ; class  GSLMultiRootBaseSolver;  GSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solver not using derivatives) and GSLMUltiRootDerivSolver (solver using derivatives) More...;  ; class  GSLMultiRootDerivFunctionWrapper;  wrapper to a multi-dim function with derivatives for multi roots algorithm More...;  ; class  GSLMultiRootDerivSolver;  GSLMultiRootDerivSolver, internal class for implementing GSL multi-root finders using derivatives. More...;  ; class  GSLMultiRootFinder;  Class for Multidimensional root finding algorithms bassed on GSL. More...;  ; clas",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:11984,Energy Efficiency,adapt,adapting,11984,"  ; class  GSLMultiMinFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinimizer;  GSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives. More...;  ; class  GSLMultiRootBaseSolver;  GSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solver not using derivatives) and GSLMUltiRootDerivSolver (solver using derivatives) More...;  ; class  GSLMultiRootDerivFunctionWrapper;  wrapper to a multi-dim function with derivatives for multi roots algorithm More...;  ; class  GSLMultiRootDerivSolver;  GSLMultiRootDerivSolver, internal class for implementing GSL multi-root finders using derivatives. More...;  ; class  GSLMultiRootFinder;  Class for Multidimensional root finding algorithms bassed on GSL. More...;  ; class  GSLMultiRootFunctionAdapter;  Class for adapting a C++ functor class to C function pointers used by GSL MultiRoot Algorithm The templated C++ function class must implement: More...;  ; class  GSLMultiRootFunctionWrapper;  wrapper to a multi-dim function without derivatives for multi roots algorithm More...;  ; class  GSLMultiRootSolver;  GSLMultiRootSolver, internal class for implementing GSL multi-root finders not using derivatives. More...;  ; class  GSLNLSMinimizer;  GSLNLSMinimizer class for Non Linear Least Square fitting It Uses the Levemberg-Marquardt algorithm from GSL Non Linear Least Square fitting. More...;  ; class  GSLPlainIntegrationWorkspace;  ; class  GSLQRngNiederreiter2;  Niederreiter generator gsl_qrng_niederreiter_2 from here More...;  ; class  GSLQRngSobol;  Sobol generator gsl_qrng_sobol from here More...;  ; class  GSLQRngWrapper;  GSLQRngWrapper class to wrap gsl_qrng structure. More...;  ; class  GSLQuasiRandomEngine;  GSLQuasiRandomEngine Base class for all GSL quasi random engines, normally user instantiate the derived classes which creates",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:19289,Energy Efficiency,reduce,reduces,19289,"rametricFunctionOneDim;  Specialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricGradFunctionMultiDimTempl;  Interface (abstract class) for parametric gradient multi-dimensional functions providing in addition to function evaluation with respect to the coordinates also the gradient with respect to the parameters, via the method ParameterGradient. More...;  ; class  IParametricGradFunctionOneDim;  Interface (abstract class) for parametric one-dimensional gradient functions providing in addition to function evaluation with respect the coordinates also the gradient with respect to the parameters, via the method ParameterGradient. More...;  ; class  IRootFinderMethod;  Interface for finding function roots of one-dimensional functions. More...;  ; class  KahanSum;  The Kahan summation is a compensated summation algorithm, which significantly reduces numerical errors when adding a sequence of finite-precision floating point numbers. More...;  ; class  KDTree;  ; class  LCGEngine;  ; class  LocalCoordinateSystemTag;  Tag for identifying vectors based on a local coordinate system. More...;  ; class  LorentzRotation;  Lorentz transformation class with the (4D) transformation represented by a 4x4 orthosymplectic matrix. More...;  ; class  LorentzVector;  Class describing a generic LorentzVector in the 4D space-time, using the specified coordinate system for the spatial vector part. More...;  ; class  LSResidualFunc;  LSResidualFunc class description. More...;  ; class  MathMoreLib;  ; class  MatRepStd;  Expression wrapper class for Matrix objects. More...;  ; class  MatRepSym;  MatRepSym Matrix storage representation for a symmetric matrix of dimension NxN This class is a template on the contained type and on the symmetric matrix size, N. More...;  ; class  MatrixMulOp;  Class for Matrix-Matrix multiplication. More...;  ; ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:26574,Energy Efficiency,energy,energy,26574,"p: A += A * B ) More...;  ; class  Polar2D;  Class describing a polar 2D coordinate system based on r and phi Phi is restricted to be in the range [-PI,PI) More...;  ; class  Polar3D;  Class describing a polar coordinate system based on r, theta and phi Phi is restricted to be in the range [-PI,PI) More...;  ; class  Polynomial;  Parametric Function class describing polynomials of order n. More...;  ; class  PositionVector2D;  Class describing a generic position vector (point) in 2 dimensions. More...;  ; class  PositionVector3D;  Class describing a generic position vector (point) in 3 dimensions. More...;  ; class  PtEtaPhiE4D;  Class describing a 4D cylindrical coordinate system using Pt , Phi, Eta and E (or rho, phi, eta , T) The metric used is (-,-,-,+). More...;  ; class  PtEtaPhiM4D;  Class describing a 4D cylindrical coordinate system using Pt , Phi, Eta and M (mass) The metric used is (-,-,-,+). More...;  ; class  PxPyPzE4D;  Class describing a 4D cartesian coordinate system (x, y, z, t coordinates) or momentum-energy vectors stored as (Px, Py, Pz, E). More...;  ; class  PxPyPzM4D;  Class describing a 4D coordinate system or momentum-energy vectors stored as (Px, Py, Pz, M). More...;  ; class  QuasiRandom;  User class for MathMore random numbers template on the Engine type. More...;  ; class  Quaternion;  Rotation class with the (3D) rotation represented by a unit quaternion (u, i, j, k). More...;  ; class  Random;  Documentation for the Random class. More...;  ; class  RandomFunctions;  ; class  RandomFunctions< EngineType, ROOT::Math::GSLRandomEngine >;  Specialized implementation of the Random functions based on the GSL library. More...;  ; class  RandomFunctionsImpl;  Definition of the generic implementation class for the RandomFunctions. More...;  ; class  RandomFunctionsImpl< TRandomEngine >;  Implementation class for the RandomFunction for all the engined that derives from TRandomEngine class, which defines an interface which has TRandomEngine::Rndm()",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:26699,Energy Efficiency,energy,energy,26699,"ange [-PI,PI) More...;  ; class  Polar3D;  Class describing a polar coordinate system based on r, theta and phi Phi is restricted to be in the range [-PI,PI) More...;  ; class  Polynomial;  Parametric Function class describing polynomials of order n. More...;  ; class  PositionVector2D;  Class describing a generic position vector (point) in 2 dimensions. More...;  ; class  PositionVector3D;  Class describing a generic position vector (point) in 3 dimensions. More...;  ; class  PtEtaPhiE4D;  Class describing a 4D cylindrical coordinate system using Pt , Phi, Eta and E (or rho, phi, eta , T) The metric used is (-,-,-,+). More...;  ; class  PtEtaPhiM4D;  Class describing a 4D cylindrical coordinate system using Pt , Phi, Eta and M (mass) The metric used is (-,-,-,+). More...;  ; class  PxPyPzE4D;  Class describing a 4D cartesian coordinate system (x, y, z, t coordinates) or momentum-energy vectors stored as (Px, Py, Pz, E). More...;  ; class  PxPyPzM4D;  Class describing a 4D coordinate system or momentum-energy vectors stored as (Px, Py, Pz, M). More...;  ; class  QuasiRandom;  User class for MathMore random numbers template on the Engine type. More...;  ; class  Quaternion;  Rotation class with the (3D) rotation represented by a unit quaternion (u, i, j, k). More...;  ; class  Random;  Documentation for the Random class. More...;  ; class  RandomFunctions;  ; class  RandomFunctions< EngineType, ROOT::Math::GSLRandomEngine >;  Specialized implementation of the Random functions based on the GSL library. More...;  ; class  RandomFunctionsImpl;  Definition of the generic implementation class for the RandomFunctions. More...;  ; class  RandomFunctionsImpl< TRandomEngine >;  Implementation class for the RandomFunction for all the engined that derives from TRandomEngine class, which defines an interface which has TRandomEngine::Rndm() In this way we can have a common implementation for the RandomFunctions. More...;  ; class  RanluxppCompatEngineGslRanlxd;  Compatibility engi",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:35712,Energy Efficiency,adapt,adapting,35712,"Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime. More...;  . Typedefs; typedef TRandomEngine DefaultEngineType;  Documentation for the RandomFunction class. ;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGenFunction > FitMethodFunction;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGradFunction > FitMethodGradFunction;  ; typedef double(* FreeFunctionPtr) (double);  ; typedef double(* FreeMultiFunctionPtr) (const double *);  ; typedef double(* FreeParamMultiFunctionPtr) (const double *, const double *);  ; typedef void(* GSLFdfPointer) (double, void *, double *, double *);  ; typedef double(* GSLFuncPointer) (double, void *);  Function pointer corresponding to gsl_function signature. ;  ; typedef double(* GSLMonteFuncPointer) (double *, size_t, void *);  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MonteCarlo integration algorithms. ;  ; typedef void(* GSLMultiFitDfPointer) (const gsl_vector *, void *, gsl_matrix *);  ; typedef void(* GSLMultiFitFdfPointer) (const gsl_vector *, void *, gsl_vector *, gsl_matrix *);  ; typedef double(* GSLMultiFitFPointer) (const gsl_vector *, void *, gsl_vector *);  ; typedef void(* GSLMultiMinDfPointer) (const gsl_vector *, void *, gsl_vector *);  ; typedef void(* GSLMultiMinFdfPointer) (const gsl_vector *, void *, double *, gsl_vector *);  ; typedef double(* GSLMultiMinFuncPointer) (const gsl_vector *, void *);  ; typedef void(* GSLMultiRootDfPointer) (const gsl_vector *, void *, gsl_matrix *);  ; typedef void(* GSLMultiRootFdfPointer) (const gsl_vector *, void *, gsl_vector *, gsl_matrix *);  ; typedef double(* GSLMultiRootFPointer) (const gsl_vector *, void *, gsl_vector *);  ; typedef GSLRngRanLuxS1 GSLRngRanLux1;  ; typedef GSLRngRanLuxS2 GSLRngRanLux2;  ; typedef GSLRngRanLuxD",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:1479,Integrability,integrat,integration,1479,"space  CholeskyDecompHelpers;  helpers for CholeskyDecomp ;  ; namespace  detail;  ; namespace  GenAlgoOptUtil;  ; namespace  GenVector;  ; namespace  GenVector_detail;  ; namespace  GSLRootHelper;  Helper functions to test convergence of Root-Finding algorithms. ;  ; namespace  GSLSimAn;  ; namespace  gv_detail;  ; namespace  Impl;  ; namespace  IntegMultiDim;  ; namespace  IntegOneDim;  ; namespace  IntegOptionsUtil;  ; namespace  Integration;  ; namespace  IntegrationMultiDim;  ; namespace  IntegrationOneDim;  ; namespace  Internal;  ; namespace  internal;  ; namespace  Interpolation;  ; namespace  MCIntegration;  ; namespace  Minim;  ; namespace  Minim1D;  ; namespace  Roots;  Root-Finding Algorithms. ;  ; namespace  rowOffsetsUtils;  ; namespace  Sampler;  ; namespace  Util;  namespace defining Utility functions needed by mathcore ;  ; namespace  VectorUtil;  Global Helper functions for generic Vector classes. ;  . Classes; class  AdaptiveIntegratorMultiDim;  Class for adaptive quadrature integration in multi-dimensions using rectangular regions. More...;  ; class  AddOp;  Addition Operation Class. More...;  ; struct  AddPolicy;  matrix addition policy More...;  ; struct  AddPolicy< T, D1, D2, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  ; struct  Assign;  Structure to assign from an expression based to general matrix to general matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Dummy Structure which flags an error to avoid assignment from expression based on a general matrix to a symmetric matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Structure to assign from an expression based to symmetric matrix to symmetric matrix. More...;  ; struct  AssignItr;  Structure for assignment to a general matrix from iterator. More...;  ; struct  AssignItr< T, D1, D2, MatRepSym< T, D1 > >;  Specialized structure for assignment to a symmetrix matrix from iterator. More...;  ; struct  Assig",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:2754,Integrability,integrat,integration,2754," based to general matrix to general matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Dummy Structure which flags an error to avoid assignment from expression based on a general matrix to a symmetric matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Structure to assign from an expression based to symmetric matrix to symmetric matrix. More...;  ; struct  AssignItr;  Structure for assignment to a general matrix from iterator. More...;  ; struct  AssignItr< T, D1, D2, MatRepSym< T, D1 > >;  Specialized structure for assignment to a symmetrix matrix from iterator. More...;  ; struct  AssignSym;  Force Expression evaluation from general to symmetric. More...;  ; class  AxisAngle;  AxisAngle class describing rotation represented with direction axis (3D Vector) and an angle of rotation around that axis. More...;  ; class  BaseIntegratorOptions;  Base class for Numerical integration options common in 1D and multi-dimension This is an internal class and is not supposed to be instantiated by the user. More...;  ; class  BasicFitMethodFunction;  FitMethodFunction class Interface for objective functions (like chi2 and likelihood used in the fit) In addition to normal function interface provide interface for calculating each data contribution to the function which is required by some algorithm (like Fumili) More...;  ; class  BasicMinimizer;  Base Minimizer class, which defines the basic functionality of various minimizer implementations (apart from Minuit and Minuit2) It provides support for storing parameter values, step size, parameter transformation etc. More...;  ; class  BinaryOp;  BinaryOperation class A class representing binary operators in the parse tree. More...;  ; class  BinaryOpCopyL;  Binary Operation class with value storage for the left argument. More...;  ; class  BinaryOpCopyR;  Binary Operation class with value storage for the right argument. More...;  ; class  Boost;  Lo",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:3061,Integrability,interface,interface,3061,"re...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Structure to assign from an expression based to symmetric matrix to symmetric matrix. More...;  ; struct  AssignItr;  Structure for assignment to a general matrix from iterator. More...;  ; struct  AssignItr< T, D1, D2, MatRepSym< T, D1 > >;  Specialized structure for assignment to a symmetrix matrix from iterator. More...;  ; struct  AssignSym;  Force Expression evaluation from general to symmetric. More...;  ; class  AxisAngle;  AxisAngle class describing rotation represented with direction axis (3D Vector) and an angle of rotation around that axis. More...;  ; class  BaseIntegratorOptions;  Base class for Numerical integration options common in 1D and multi-dimension This is an internal class and is not supposed to be instantiated by the user. More...;  ; class  BasicFitMethodFunction;  FitMethodFunction class Interface for objective functions (like chi2 and likelihood used in the fit) In addition to normal function interface provide interface for calculating each data contribution to the function which is required by some algorithm (like Fumili) More...;  ; class  BasicMinimizer;  Base Minimizer class, which defines the basic functionality of various minimizer implementations (apart from Minuit and Minuit2) It provides support for storing parameter values, step size, parameter transformation etc. More...;  ; class  BinaryOp;  BinaryOperation class A class representing binary operators in the parse tree. More...;  ; class  BinaryOpCopyL;  Binary Operation class with value storage for the left argument. More...;  ; class  BinaryOpCopyR;  Binary Operation class with value storage for the right argument. More...;  ; class  Boost;  Lorentz boost class with the (4D) transformation represented internally by a 4x4 orthosymplectic matrix. More...;  ; class  BoostX;  Class representing a Lorentz Boost along the X axis, by beta. More...;  ; class  BoostY;  Class representing a Lorentz Boost a",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:3079,Integrability,interface,interface,3079,"re...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Structure to assign from an expression based to symmetric matrix to symmetric matrix. More...;  ; struct  AssignItr;  Structure for assignment to a general matrix from iterator. More...;  ; struct  AssignItr< T, D1, D2, MatRepSym< T, D1 > >;  Specialized structure for assignment to a symmetrix matrix from iterator. More...;  ; struct  AssignSym;  Force Expression evaluation from general to symmetric. More...;  ; class  AxisAngle;  AxisAngle class describing rotation represented with direction axis (3D Vector) and an angle of rotation around that axis. More...;  ; class  BaseIntegratorOptions;  Base class for Numerical integration options common in 1D and multi-dimension This is an internal class and is not supposed to be instantiated by the user. More...;  ; class  BasicFitMethodFunction;  FitMethodFunction class Interface for objective functions (like chi2 and likelihood used in the fit) In addition to normal function interface provide interface for calculating each data contribution to the function which is required by some algorithm (like Fumili) More...;  ; class  BasicMinimizer;  Base Minimizer class, which defines the basic functionality of various minimizer implementations (apart from Minuit and Minuit2) It provides support for storing parameter values, step size, parameter transformation etc. More...;  ; class  BinaryOp;  BinaryOperation class A class representing binary operators in the parse tree. More...;  ; class  BinaryOpCopyL;  Binary Operation class with value storage for the left argument. More...;  ; class  BinaryOpCopyR;  Binary Operation class with value storage for the right argument. More...;  ; class  Boost;  Lorentz boost class with the (4D) transformation represented internally by a 4x4 orthosymplectic matrix. More...;  ; class  BoostX;  Class representing a Lorentz Boost along the X axis, by beta. More...;  ; class  BoostY;  Class representing a Lorentz Boost a",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:6730,Integrability,interface,interfaces,6730,"numerical derivative of a function. More...;  ; class  Determinant;  Detrminant for a general squared matrix Function to compute the determinant from a square matrix ( \( \det(A)\)) of dimension idim and order n. More...;  ; class  DisplacementVector2D;  Class describing a generic displacement vector in 2 dimensions. More...;  ; class  DisplacementVector3D;  Class describing a generic displacement vector in 3 dimensions. More...;  ; class  DistSampler;  Interface class for generic sampling of a distribution, i.e. More...;  ; class  DistSamplerOptions;  DistSampler options class. More...;  ; class  DivOp;  Division (element-wise) Operation Class. More...;  ; class  EulerAngles;  EulerAngles class describing rotation as three angles (Euler Angles). More...;  ; struct  EvaluatorOneDim;  ; struct  EvaluatorOneDim< const ROOT::Math::IParamMultiFunction & >;  ; class  Expr;  ; class  Fabs;  Unary abs Operation Class. More...;  ; class  Factory;  Factory class holding static functions to create the interfaces like ROOT::Math::Minimizer via the Plugin Manager. More...;  ; class  FastInverter;  Fast Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  FastInverter< 3 >;  3x3 direct matrix inversion using Cramer Rule use only for FastInverter More...;  ; class  FastInverter< 4 >;  4x4 matrix inversion using Cramers rule. More...;  ; class  FastInverter< 5 >;  5x5 Matrix inversion using Cramers rule. More...;  ; class  FitTransformFunction;  Internal class used by GSLNLSMinimizer to implement the transformation of the chi2 function used by GSL Non-linear Least-square fitting The class is template on the FitMethodFunction type to support both gradient and non gradient functions. More...;  ; class  Functor;  Documentation for class Functor class. More...;  ; class  Functor1D;  Functor1D class for one-dimensional functions. More...;  ; class  GaussIntegrator;  User class for performing function integration. More...;  ; class  GaussLegendreIntegrator;  User ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:7660,Integrability,integrat,integration,7660,eration Class. More...;  ; class  Factory;  Factory class holding static functions to create the interfaces like ROOT::Math::Minimizer via the Plugin Manager. More...;  ; class  FastInverter;  Fast Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  FastInverter< 3 >;  3x3 direct matrix inversion using Cramer Rule use only for FastInverter More...;  ; class  FastInverter< 4 >;  4x4 matrix inversion using Cramers rule. More...;  ; class  FastInverter< 5 >;  5x5 Matrix inversion using Cramers rule. More...;  ; class  FitTransformFunction;  Internal class used by GSLNLSMinimizer to implement the transformation of the chi2 function used by GSL Non-linear Least-square fitting The class is template on the FitMethodFunction type to support both gradient and non gradient functions. More...;  ; class  Functor;  Documentation for class Functor class. More...;  ; class  Functor1D;  Functor1D class for one-dimensional functions. More...;  ; class  GaussIntegrator;  User class for performing function integration. More...;  ; class  GaussLegendreIntegrator;  User class for performing function integration. More...;  ; class  GenAlgoOptions;  class implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs More...;  ; struct  GeneralHessianCalc;  ; struct  GeneralHessianCalc< double >;  ; struct  GeneralLinearFunctionDerivation;  Auxiliar class to bypass the (provisional) lack of vectorization in TFormula::EvalPar. More...;  ; struct  GeneralLinearFunctionDerivation< double >;  ; class  GeneticMinimizer;  GeneticMinimizer. More...;  ; struct  GeneticMinimizerParameters;  ; class  GenVector_exception;  ; class  GlobalCoordinateSystemTag;  Tag for identifying vectors based on a global coordinate system. More...;  ; class  GoFTest;  GoFTest class implementing the 1 sample and 2 sample goodness of fit tests for uni-variate distributions and data. More...;  ; class  GradFunctor;  GradFunctor class for Multidimensio,MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:7753,Integrability,integrat,integration,7753,ate the interfaces like ROOT::Math::Minimizer via the Plugin Manager. More...;  ; class  FastInverter;  Fast Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  FastInverter< 3 >;  3x3 direct matrix inversion using Cramer Rule use only for FastInverter More...;  ; class  FastInverter< 4 >;  4x4 matrix inversion using Cramers rule. More...;  ; class  FastInverter< 5 >;  5x5 Matrix inversion using Cramers rule. More...;  ; class  FitTransformFunction;  Internal class used by GSLNLSMinimizer to implement the transformation of the chi2 function used by GSL Non-linear Least-square fitting The class is template on the FitMethodFunction type to support both gradient and non gradient functions. More...;  ; class  Functor;  Documentation for class Functor class. More...;  ; class  Functor1D;  Functor1D class for one-dimensional functions. More...;  ; class  GaussIntegrator;  User class for performing function integration. More...;  ; class  GaussLegendreIntegrator;  User class for performing function integration. More...;  ; class  GenAlgoOptions;  class implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs More...;  ; struct  GeneralHessianCalc;  ; struct  GeneralHessianCalc< double >;  ; struct  GeneralLinearFunctionDerivation;  Auxiliar class to bypass the (provisional) lack of vectorization in TFormula::EvalPar. More...;  ; struct  GeneralLinearFunctionDerivation< double >;  ; class  GeneticMinimizer;  GeneticMinimizer. More...;  ; struct  GeneticMinimizerParameters;  ; class  GenVector_exception;  ; class  GlobalCoordinateSystemTag;  Tag for identifying vectors based on a global coordinate system. More...;  ; class  GoFTest;  GoFTest class implementing the 1 sample and 2 sample goodness of fit tests for uni-variate distributions and data. More...;  ; class  GradFunctor;  GradFunctor class for Multidimensional gradient functions. More...;  ; class  GradFunctor1D;  GradFunctor1D class for one-di,MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:8796,Integrability,wrap,wrapper,8796,ass implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs More...;  ; struct  GeneralHessianCalc;  ; struct  GeneralHessianCalc< double >;  ; struct  GeneralLinearFunctionDerivation;  Auxiliar class to bypass the (provisional) lack of vectorization in TFormula::EvalPar. More...;  ; struct  GeneralLinearFunctionDerivation< double >;  ; class  GeneticMinimizer;  GeneticMinimizer. More...;  ; struct  GeneticMinimizerParameters;  ; class  GenVector_exception;  ; class  GlobalCoordinateSystemTag;  Tag for identifying vectors based on a global coordinate system. More...;  ; class  GoFTest;  GoFTest class implementing the 1 sample and 2 sample goodness of fit tests for uni-variate distributions and data. More...;  ; class  GradFunctor;  GradFunctor class for Multidimensional gradient functions. More...;  ; class  GradFunctor1D;  GradFunctor1D class for one-dimensional gradient functions. More...;  ; class  GSL1DMinimizerWrapper;  wrapper class for gsl_min_fminimizer structure More...;  ; class  GSLChebSeries;  wrapper class for C struct gsl_cheb_series More...;  ; class  GSLDerivator;  Class for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ). More...;  ; class  GSLError;  class to change GSL Error handler to use ROOT one. More...;  ; class  GSLFunctionAdapter;  Class for adapting any C++ functor class to C function pointers used by GSL. More...;  ; class  GSLFunctionDerivWrapper;  class to wrap a gsl_function_fdf (with derivatives) More...;  ; class  GSLFunctionWrapper;  Wrapper class to the gsl_function C structure. More...;  ; class  GSLIntegrationWorkspace;  ; class  GSLIntegrator;  Class for performing numerical integration of a function in one dimension. More...;  ; class  GSLInterpolator;  Interpolation class based on GSL interpolation functions. More...;  ; class  GSLMC,MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:8878,Integrability,wrap,wrapper,8878, a map of string-value pairs More...;  ; struct  GeneralHessianCalc;  ; struct  GeneralHessianCalc< double >;  ; struct  GeneralLinearFunctionDerivation;  Auxiliar class to bypass the (provisional) lack of vectorization in TFormula::EvalPar. More...;  ; struct  GeneralLinearFunctionDerivation< double >;  ; class  GeneticMinimizer;  GeneticMinimizer. More...;  ; struct  GeneticMinimizerParameters;  ; class  GenVector_exception;  ; class  GlobalCoordinateSystemTag;  Tag for identifying vectors based on a global coordinate system. More...;  ; class  GoFTest;  GoFTest class implementing the 1 sample and 2 sample goodness of fit tests for uni-variate distributions and data. More...;  ; class  GradFunctor;  GradFunctor class for Multidimensional gradient functions. More...;  ; class  GradFunctor1D;  GradFunctor1D class for one-dimensional gradient functions. More...;  ; class  GSL1DMinimizerWrapper;  wrapper class for gsl_min_fminimizer structure More...;  ; class  GSLChebSeries;  wrapper class for C struct gsl_cheb_series More...;  ; class  GSLDerivator;  Class for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ). More...;  ; class  GSLError;  class to change GSL Error handler to use ROOT one. More...;  ; class  GSLFunctionAdapter;  Class for adapting any C++ functor class to C function pointers used by GSL. More...;  ; class  GSLFunctionDerivWrapper;  class to wrap a gsl_function_fdf (with derivatives) More...;  ; class  GSLFunctionWrapper;  Wrapper class to the gsl_function C structure. More...;  ; class  GSLIntegrationWorkspace;  ; class  GSLIntegrator;  Class for performing numerical integration of a function in one dimension. More...;  ; class  GSLInterpolator;  Interpolation class based on GSL interpolation functions. More...;  ; class  GSLMCIntegrationWorkspace;  ; class  GSLMCIntegrator;  ; class  GSLMinimizer;  GSLMinimiz,MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:9410,Integrability,wrap,wrap,9410,"ate system. More...;  ; class  GoFTest;  GoFTest class implementing the 1 sample and 2 sample goodness of fit tests for uni-variate distributions and data. More...;  ; class  GradFunctor;  GradFunctor class for Multidimensional gradient functions. More...;  ; class  GradFunctor1D;  GradFunctor1D class for one-dimensional gradient functions. More...;  ; class  GSL1DMinimizerWrapper;  wrapper class for gsl_min_fminimizer structure More...;  ; class  GSLChebSeries;  wrapper class for C struct gsl_cheb_series More...;  ; class  GSLDerivator;  Class for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ). More...;  ; class  GSLError;  class to change GSL Error handler to use ROOT one. More...;  ; class  GSLFunctionAdapter;  Class for adapting any C++ functor class to C function pointers used by GSL. More...;  ; class  GSLFunctionDerivWrapper;  class to wrap a gsl_function_fdf (with derivatives) More...;  ; class  GSLFunctionWrapper;  Wrapper class to the gsl_function C structure. More...;  ; class  GSLIntegrationWorkspace;  ; class  GSLIntegrator;  Class for performing numerical integration of a function in one dimension. More...;  ; class  GSLInterpolator;  Interpolation class based on GSL interpolation functions. More...;  ; class  GSLMCIntegrationWorkspace;  ; class  GSLMCIntegrator;  ; class  GSLMinimizer;  GSLMinimizer class. More...;  ; class  GSLMinimizer1D;  Minimizer for arbitrary one dimensional functions. More...;  ; class  GSLMiserIntegrationWorkspace;  Workspace for MISER. More...;  ; struct  GSLMonteFunctionAdapter;  ; class  GSLMonteFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; class  GSLMultiFit;  GSLMultiFit, internal class for implementing GSL non linear least square GSL fitting. More...;  ; class  GSLMultiFitFunctionAdapter;",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:9641,Integrability,integrat,integration,9641,"s for Multidimensional gradient functions. More...;  ; class  GradFunctor1D;  GradFunctor1D class for one-dimensional gradient functions. More...;  ; class  GSL1DMinimizerWrapper;  wrapper class for gsl_min_fminimizer structure More...;  ; class  GSLChebSeries;  wrapper class for C struct gsl_cheb_series More...;  ; class  GSLDerivator;  Class for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ). More...;  ; class  GSLError;  class to change GSL Error handler to use ROOT one. More...;  ; class  GSLFunctionAdapter;  Class for adapting any C++ functor class to C function pointers used by GSL. More...;  ; class  GSLFunctionDerivWrapper;  class to wrap a gsl_function_fdf (with derivatives) More...;  ; class  GSLFunctionWrapper;  Wrapper class to the gsl_function C structure. More...;  ; class  GSLIntegrationWorkspace;  ; class  GSLIntegrator;  Class for performing numerical integration of a function in one dimension. More...;  ; class  GSLInterpolator;  Interpolation class based on GSL interpolation functions. More...;  ; class  GSLMCIntegrationWorkspace;  ; class  GSLMCIntegrator;  ; class  GSLMinimizer;  GSLMinimizer class. More...;  ; class  GSLMinimizer1D;  Minimizer for arbitrary one dimensional functions. More...;  ; class  GSLMiserIntegrationWorkspace;  Workspace for MISER. More...;  ; struct  GSLMonteFunctionAdapter;  ; class  GSLMonteFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; class  GSLMultiFit;  GSLMultiFit, internal class for implementing GSL non linear least square GSL fitting. More...;  ; class  GSLMultiFitFunctionAdapter;  Class for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: More...;  ; class  GSLMultiFitFunctionWrapper;  wrapper to a ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:10137,Integrability,wrap,wrapper,10137," More...;  ; class  GSLError;  class to change GSL Error handler to use ROOT one. More...;  ; class  GSLFunctionAdapter;  Class for adapting any C++ functor class to C function pointers used by GSL. More...;  ; class  GSLFunctionDerivWrapper;  class to wrap a gsl_function_fdf (with derivatives) More...;  ; class  GSLFunctionWrapper;  Wrapper class to the gsl_function C structure. More...;  ; class  GSLIntegrationWorkspace;  ; class  GSLIntegrator;  Class for performing numerical integration of a function in one dimension. More...;  ; class  GSLInterpolator;  Interpolation class based on GSL interpolation functions. More...;  ; class  GSLMCIntegrationWorkspace;  ; class  GSLMCIntegrator;  ; class  GSLMinimizer;  GSLMinimizer class. More...;  ; class  GSLMinimizer1D;  Minimizer for arbitrary one dimensional functions. More...;  ; class  GSLMiserIntegrationWorkspace;  Workspace for MISER. More...;  ; struct  GSLMonteFunctionAdapter;  ; class  GSLMonteFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; class  GSLMultiFit;  GSLMultiFit, internal class for implementing GSL non linear least square GSL fitting. More...;  ; class  GSLMultiFitFunctionAdapter;  Class for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: More...;  ; class  GSLMultiFitFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinDerivFunctionWrapper;  Wrapper for a multi-dimensional function with derivatives used in GSL multidim minimization algorithm. More...;  ; struct  GSLMultiMinFunctionAdapter;  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms. More...;  ; class  GSLMultiMinFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization al",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:10224,Integrability,integrat,integration,10224," More...;  ; class  GSLError;  class to change GSL Error handler to use ROOT one. More...;  ; class  GSLFunctionAdapter;  Class for adapting any C++ functor class to C function pointers used by GSL. More...;  ; class  GSLFunctionDerivWrapper;  class to wrap a gsl_function_fdf (with derivatives) More...;  ; class  GSLFunctionWrapper;  Wrapper class to the gsl_function C structure. More...;  ; class  GSLIntegrationWorkspace;  ; class  GSLIntegrator;  Class for performing numerical integration of a function in one dimension. More...;  ; class  GSLInterpolator;  Interpolation class based on GSL interpolation functions. More...;  ; class  GSLMCIntegrationWorkspace;  ; class  GSLMCIntegrator;  ; class  GSLMinimizer;  GSLMinimizer class. More...;  ; class  GSLMinimizer1D;  Minimizer for arbitrary one dimensional functions. More...;  ; class  GSLMiserIntegrationWorkspace;  Workspace for MISER. More...;  ; struct  GSLMonteFunctionAdapter;  ; class  GSLMonteFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; class  GSLMultiFit;  GSLMultiFit, internal class for implementing GSL non linear least square GSL fitting. More...;  ; class  GSLMultiFitFunctionAdapter;  Class for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: More...;  ; class  GSLMultiFitFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinDerivFunctionWrapper;  Wrapper for a multi-dimensional function with derivatives used in GSL multidim minimization algorithm. More...;  ; struct  GSLMultiMinFunctionAdapter;  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms. More...;  ; class  GSLMultiMinFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization al",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:10603,Integrability,wrap,wrapper,10603,"erical integration of a function in one dimension. More...;  ; class  GSLInterpolator;  Interpolation class based on GSL interpolation functions. More...;  ; class  GSLMCIntegrationWorkspace;  ; class  GSLMCIntegrator;  ; class  GSLMinimizer;  GSLMinimizer class. More...;  ; class  GSLMinimizer1D;  Minimizer for arbitrary one dimensional functions. More...;  ; class  GSLMiserIntegrationWorkspace;  Workspace for MISER. More...;  ; struct  GSLMonteFunctionAdapter;  ; class  GSLMonteFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; class  GSLMultiFit;  GSLMultiFit, internal class for implementing GSL non linear least square GSL fitting. More...;  ; class  GSLMultiFitFunctionAdapter;  Class for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: More...;  ; class  GSLMultiFitFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinDerivFunctionWrapper;  Wrapper for a multi-dimensional function with derivatives used in GSL multidim minimization algorithm. More...;  ; struct  GSLMultiMinFunctionAdapter;  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms. More...;  ; class  GSLMultiMinFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinimizer;  GSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives. More...;  ; class  GSLMultiRootBaseSolver;  GSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solver not using derivatives) and GSLMUltiRootDerivSolver (solver using derivatives) More...;  ; class  GSLMultiRootDerivFunctionWrapper;  wrapper to a multi-dim function wi",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:11067,Integrability,wrap,wrapper,11067,"r;  ; class  GSLMonteFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; class  GSLMultiFit;  GSLMultiFit, internal class for implementing GSL non linear least square GSL fitting. More...;  ; class  GSLMultiFitFunctionAdapter;  Class for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: More...;  ; class  GSLMultiFitFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinDerivFunctionWrapper;  Wrapper for a multi-dimensional function with derivatives used in GSL multidim minimization algorithm. More...;  ; struct  GSLMultiMinFunctionAdapter;  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms. More...;  ; class  GSLMultiMinFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinimizer;  GSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives. More...;  ; class  GSLMultiRootBaseSolver;  GSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solver not using derivatives) and GSLMUltiRootDerivSolver (solver using derivatives) More...;  ; class  GSLMultiRootDerivFunctionWrapper;  wrapper to a multi-dim function with derivatives for multi roots algorithm More...;  ; class  GSLMultiRootDerivSolver;  GSLMultiRootDerivSolver, internal class for implementing GSL multi-root finders using derivatives. More...;  ; class  GSLMultiRootFinder;  Class for Multidimensional root finding algorithms bassed on GSL. More...;  ; class  GSLMultiRootFunctionAdapter;  Class for adapting a C++ functor class to C function pointers used by GSL MultiRoot Algorithm The templated C++ function cla",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:11600,Integrability,wrap,wrapper,11600,"multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinDerivFunctionWrapper;  Wrapper for a multi-dimensional function with derivatives used in GSL multidim minimization algorithm. More...;  ; struct  GSLMultiMinFunctionAdapter;  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms. More...;  ; class  GSLMultiMinFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinimizer;  GSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives. More...;  ; class  GSLMultiRootBaseSolver;  GSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solver not using derivatives) and GSLMUltiRootDerivSolver (solver using derivatives) More...;  ; class  GSLMultiRootDerivFunctionWrapper;  wrapper to a multi-dim function with derivatives for multi roots algorithm More...;  ; class  GSLMultiRootDerivSolver;  GSLMultiRootDerivSolver, internal class for implementing GSL multi-root finders using derivatives. More...;  ; class  GSLMultiRootFinder;  Class for Multidimensional root finding algorithms bassed on GSL. More...;  ; class  GSLMultiRootFunctionAdapter;  Class for adapting a C++ functor class to C function pointers used by GSL MultiRoot Algorithm The templated C++ function class must implement: More...;  ; class  GSLMultiRootFunctionWrapper;  wrapper to a multi-dim function without derivatives for multi roots algorithm More...;  ; class  GSLMultiRootSolver;  GSLMultiRootSolver, internal class for implementing GSL multi-root finders not using derivatives. More...;  ; class  GSLNLSMinimizer;  GSLNLSMinimizer class for Non Linear Least Square fitting It Uses the Levemberg-Marquardt algorithm from GSL Non Linear Least Square fitting. More...;  ; class  GSLPlainIntegrationWorkspace;  ; clas",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:12166,Integrability,wrap,wrapper,12166,"LMultiMinimizer;  GSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives. More...;  ; class  GSLMultiRootBaseSolver;  GSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solver not using derivatives) and GSLMUltiRootDerivSolver (solver using derivatives) More...;  ; class  GSLMultiRootDerivFunctionWrapper;  wrapper to a multi-dim function with derivatives for multi roots algorithm More...;  ; class  GSLMultiRootDerivSolver;  GSLMultiRootDerivSolver, internal class for implementing GSL multi-root finders using derivatives. More...;  ; class  GSLMultiRootFinder;  Class for Multidimensional root finding algorithms bassed on GSL. More...;  ; class  GSLMultiRootFunctionAdapter;  Class for adapting a C++ functor class to C function pointers used by GSL MultiRoot Algorithm The templated C++ function class must implement: More...;  ; class  GSLMultiRootFunctionWrapper;  wrapper to a multi-dim function without derivatives for multi roots algorithm More...;  ; class  GSLMultiRootSolver;  GSLMultiRootSolver, internal class for implementing GSL multi-root finders not using derivatives. More...;  ; class  GSLNLSMinimizer;  GSLNLSMinimizer class for Non Linear Least Square fitting It Uses the Levemberg-Marquardt algorithm from GSL Non Linear Least Square fitting. More...;  ; class  GSLPlainIntegrationWorkspace;  ; class  GSLQRngNiederreiter2;  Niederreiter generator gsl_qrng_niederreiter_2 from here More...;  ; class  GSLQRngSobol;  Sobol generator gsl_qrng_sobol from here More...;  ; class  GSLQRngWrapper;  GSLQRngWrapper class to wrap gsl_qrng structure. More...;  ; class  GSLQuasiRandomEngine;  GSLQuasiRandomEngine Base class for all GSL quasi random engines, normally user instantiate the derived classes which creates internally the generator and uses the class ROOT::Math::QuasiRandom. More...;  ; class  GSLRandomEngine;  GSLRandomEngine Base class for all GSL random engines",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:12835,Integrability,wrap,wrap,12835,"ore...;  ; class  GSLMultiRootFinder;  Class for Multidimensional root finding algorithms bassed on GSL. More...;  ; class  GSLMultiRootFunctionAdapter;  Class for adapting a C++ functor class to C function pointers used by GSL MultiRoot Algorithm The templated C++ function class must implement: More...;  ; class  GSLMultiRootFunctionWrapper;  wrapper to a multi-dim function without derivatives for multi roots algorithm More...;  ; class  GSLMultiRootSolver;  GSLMultiRootSolver, internal class for implementing GSL multi-root finders not using derivatives. More...;  ; class  GSLNLSMinimizer;  GSLNLSMinimizer class for Non Linear Least Square fitting It Uses the Levemberg-Marquardt algorithm from GSL Non Linear Least Square fitting. More...;  ; class  GSLPlainIntegrationWorkspace;  ; class  GSLQRngNiederreiter2;  Niederreiter generator gsl_qrng_niederreiter_2 from here More...;  ; class  GSLQRngSobol;  Sobol generator gsl_qrng_sobol from here More...;  ; class  GSLQRngWrapper;  GSLQRngWrapper class to wrap gsl_qrng structure. More...;  ; class  GSLQuasiRandomEngine;  GSLQuasiRandomEngine Base class for all GSL quasi random engines, normally user instantiate the derived classes which creates internally the generator and uses the class ROOT::Math::QuasiRandom. More...;  ; class  GSLRandomEngine;  GSLRandomEngine Base class for all GSL random engines, normally user instantiate the derived classes which creates internally the generator. More...;  ; class  GSLRngCMRG;  Combined multiple recursive generator (L'Ecuyer) see here More...;  ; class  GSLRngGFSR4;  Lagged Fibonacci generator by Ziff see here More...;  ; class  GSLRngMinStd;  MINSTD generator (Park and Miller) see here More...;  ; class  GSLRngMixMax;  MixMax generator based on ROOT::Math::MixMaxEngine of N=240. More...;  ; class  GSLRngMRG;  5-th order multiple recursive generator (L'Ecuyer, Blouin and Coutre) see here More...;  ; class  GSLRngMT;  Mersenne-Twister generator gsl_rng_mt19937 from here More...;  ; c",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:14890,Integrability,wrap,wrapping,14890,"er) (default luxury level, p = 223) (This is eequivalent to TRandom1 with default luxury level) see here More...;  ; class  GSLRngRanLuxD1;  Double precision (48 bits) version of Second generation of Ranlux generator with luxury level of 1 (It throws away 202 value for every 12 used) see here More...;  ; class  GSLRngRanLuxD2;  Double precision (48 bits) version of Second generation of Ranlux generator with luxury level of 2 (It throws away 397 value for every 12 used) see here More...;  ; class  GSLRngRanLuxS1;  Second generation of Ranlux generator for single precision with luxury level of 1 (It throws away 202 values for every 12 used) see here More...;  ; class  GSLRngRanLuxS2;  Second generation of Ranlux generator for Single precision with luxury level of 2 (It throws away 397 value for every 12 used) see here More...;  ; class  GSLRngRanMar;  RANMAR generator see here More...;  ; struct  GSLRngROOTWrapper;  class for wrapping ROOT Engines in gsl_rng types which can be used as extra GSL random number generators For this we need to implement functions which will be called by gsl_rng. More...;  ; class  GSLRngTaus;  Tausworthe generator by L'Ecuyer see here More...;  ; class  GSLRngWrapper;  GSLRngWrapper class to wrap gsl_rng structure. More...;  ; class  GSLRootFdFSolver;  Root-Finder with derivatives implementation class using GSL. More...;  ; class  GSLRootFinder;  Base class for GSL Root-Finding algorithms for one dimensional functions which do not use function derivatives. More...;  ; class  GSLRootFinderDeriv;  Base class for GSL Root-Finding algorithms for one dimensional functions which use function derivatives. More...;  ; class  GSLRootFSolver;  Root-Finder implementation class using GSL. More...;  ; class  GSLSimAnFunc;  GSLSimAnFunc class description. More...;  ; class  GSLSimAnMinimizer;  GSLSimAnMinimizer class for minimization using simulated annealing using the algorithm from GSL. More...;  ; class  GSLSimAnnealing;  GSLSimAnnealing class for pe",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:15190,Integrability,wrap,wrap,15190,xury level of 1 (It throws away 202 value for every 12 used) see here More...;  ; class  GSLRngRanLuxD2;  Double precision (48 bits) version of Second generation of Ranlux generator with luxury level of 2 (It throws away 397 value for every 12 used) see here More...;  ; class  GSLRngRanLuxS1;  Second generation of Ranlux generator for single precision with luxury level of 1 (It throws away 202 values for every 12 used) see here More...;  ; class  GSLRngRanLuxS2;  Second generation of Ranlux generator for Single precision with luxury level of 2 (It throws away 397 value for every 12 used) see here More...;  ; class  GSLRngRanMar;  RANMAR generator see here More...;  ; struct  GSLRngROOTWrapper;  class for wrapping ROOT Engines in gsl_rng types which can be used as extra GSL random number generators For this we need to implement functions which will be called by gsl_rng. More...;  ; class  GSLRngTaus;  Tausworthe generator by L'Ecuyer see here More...;  ; class  GSLRngWrapper;  GSLRngWrapper class to wrap gsl_rng structure. More...;  ; class  GSLRootFdFSolver;  Root-Finder with derivatives implementation class using GSL. More...;  ; class  GSLRootFinder;  Base class for GSL Root-Finding algorithms for one dimensional functions which do not use function derivatives. More...;  ; class  GSLRootFinderDeriv;  Base class for GSL Root-Finding algorithms for one dimensional functions which use function derivatives. More...;  ; class  GSLRootFSolver;  Root-Finder implementation class using GSL. More...;  ; class  GSLSimAnFunc;  GSLSimAnFunc class description. More...;  ; class  GSLSimAnMinimizer;  GSLSimAnMinimizer class for minimization using simulated annealing using the algorithm from GSL. More...;  ; class  GSLSimAnnealing;  GSLSimAnnealing class for performing a simulated annealing search of a multidimensional function. More...;  ; struct  GSLSimAnParams;  structure holding the simulated annealing parameters More...;  ; class  GSLVegasIntegrationWorkspace;  workspace for ,MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:17219,Integrability,integrat,integration,17219,..;  ; class  IBaseFunctionMultiDimTempl;  Documentation for the abstract class IBaseFunctionMultiDim. More...;  ; class  IBaseFunctionOneDim;  Interface (abstract class) for generic functions objects of one-dimension Provides a method to evaluate the function given a value (simple double) by implementing operator() (const double ). More...;  ; class  IBaseParam;  Documentation for the abstract class IBaseParam. More...;  ; class  IGradientFunctionMultiDimTempl;  Interface (abstract class) for multi-dimensional functions providing a gradient calculation. More...;  ; class  IGradientFunctionOneDim;  Interface (abstract class) for one-dimensional functions providing a gradient calculation. More...;  ; class  IGradientMultiDimTempl;  ; class  IMinimizer1D;  Interface class for numerical methods for one-dimensional minimization. More...;  ; class  IntegrandTransform;  Auxiliary inner class for mapping infinite and semi-infinite integrals. More...;  ; class  IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  IntegratorOneDim;  User Class for performing numerical integration of a function in one dimension. More...;  ; class  IntegratorOneDimOptions;  Numerical one dimensional integration options. More...;  ; class  Interpolator;  Class for performing function interpolation of points. More...;  ; class  Inverter;  Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  Inverter< 0 >;  Inverter<0>. More...;  ; class  Inverter< 1 >;  1x1 matrix inversion \(a_{11} \to 1/a_{11}\) More...;  ; class  Inverter< 2 >;  2x2 matrix inversion using Cramers rule. More...;  ; class  IOptions;  Generic interface for defining configuration options of a numerical algorithm. More...;  ; class  IParametricFunctionMultiDimTempl;  IParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a derive,MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:17307,Integrability,integrat,integration,17307,tiDim. More...;  ; class  IBaseFunctionOneDim;  Interface (abstract class) for generic functions objects of one-dimension Provides a method to evaluate the function given a value (simple double) by implementing operator() (const double ). More...;  ; class  IBaseParam;  Documentation for the abstract class IBaseParam. More...;  ; class  IGradientFunctionMultiDimTempl;  Interface (abstract class) for multi-dimensional functions providing a gradient calculation. More...;  ; class  IGradientFunctionOneDim;  Interface (abstract class) for one-dimensional functions providing a gradient calculation. More...;  ; class  IGradientMultiDimTempl;  ; class  IMinimizer1D;  Interface class for numerical methods for one-dimensional minimization. More...;  ; class  IntegrandTransform;  Auxiliary inner class for mapping infinite and semi-infinite integrals. More...;  ; class  IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  IntegratorOneDim;  User Class for performing numerical integration of a function in one dimension. More...;  ; class  IntegratorOneDimOptions;  Numerical one dimensional integration options. More...;  ; class  Interpolator;  Class for performing function interpolation of points. More...;  ; class  Inverter;  Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  Inverter< 0 >;  Inverter<0>. More...;  ; class  Inverter< 1 >;  1x1 matrix inversion \(a_{11} \to 1/a_{11}\) More...;  ; class  Inverter< 2 >;  2x2 matrix inversion using Cramers rule. More...;  ; class  IOptions;  Generic interface for defining configuration options of a numerical algorithm. More...;  ; class  IParametricFunctionMultiDimTempl;  IParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam. More...;  ; class  IP,MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:17402,Integrability,integrat,integration,17402, one-dimension Provides a method to evaluate the function given a value (simple double) by implementing operator() (const double ). More...;  ; class  IBaseParam;  Documentation for the abstract class IBaseParam. More...;  ; class  IGradientFunctionMultiDimTempl;  Interface (abstract class) for multi-dimensional functions providing a gradient calculation. More...;  ; class  IGradientFunctionOneDim;  Interface (abstract class) for one-dimensional functions providing a gradient calculation. More...;  ; class  IGradientMultiDimTempl;  ; class  IMinimizer1D;  Interface class for numerical methods for one-dimensional minimization. More...;  ; class  IntegrandTransform;  Auxiliary inner class for mapping infinite and semi-infinite integrals. More...;  ; class  IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  IntegratorOneDim;  User Class for performing numerical integration of a function in one dimension. More...;  ; class  IntegratorOneDimOptions;  Numerical one dimensional integration options. More...;  ; class  Interpolator;  Class for performing function interpolation of points. More...;  ; class  Inverter;  Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  Inverter< 0 >;  Inverter<0>. More...;  ; class  Inverter< 1 >;  1x1 matrix inversion \(a_{11} \to 1/a_{11}\) More...;  ; class  Inverter< 2 >;  2x2 matrix inversion using Cramers rule. More...;  ; class  IOptions;  Generic interface for defining configuration options of a numerical algorithm. More...;  ; class  IParametricFunctionMultiDimTempl;  IParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricFunctionOneDim;  Specialized IParamFunction interface (abstract class) for one-dimensional paramet,MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:17517,Integrability,integrat,integration,17517,perator() (const double ). More...;  ; class  IBaseParam;  Documentation for the abstract class IBaseParam. More...;  ; class  IGradientFunctionMultiDimTempl;  Interface (abstract class) for multi-dimensional functions providing a gradient calculation. More...;  ; class  IGradientFunctionOneDim;  Interface (abstract class) for one-dimensional functions providing a gradient calculation. More...;  ; class  IGradientMultiDimTempl;  ; class  IMinimizer1D;  Interface class for numerical methods for one-dimensional minimization. More...;  ; class  IntegrandTransform;  Auxiliary inner class for mapping infinite and semi-infinite integrals. More...;  ; class  IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  IntegratorOneDim;  User Class for performing numerical integration of a function in one dimension. More...;  ; class  IntegratorOneDimOptions;  Numerical one dimensional integration options. More...;  ; class  Interpolator;  Class for performing function interpolation of points. More...;  ; class  Inverter;  Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  Inverter< 0 >;  Inverter<0>. More...;  ; class  Inverter< 1 >;  1x1 matrix inversion \(a_{11} \to 1/a_{11}\) More...;  ; class  Inverter< 2 >;  2x2 matrix inversion using Cramers rule. More...;  ; class  IOptions;  Generic interface for defining configuration options of a numerical algorithm. More...;  ; class  IParametricFunctionMultiDimTempl;  IParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricFunctionOneDim;  Specialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam. More,MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:17956,Integrability,interface,interface,17956,"erical methods for one-dimensional minimization. More...;  ; class  IntegrandTransform;  Auxiliary inner class for mapping infinite and semi-infinite integrals. More...;  ; class  IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  IntegratorOneDim;  User Class for performing numerical integration of a function in one dimension. More...;  ; class  IntegratorOneDimOptions;  Numerical one dimensional integration options. More...;  ; class  Interpolator;  Class for performing function interpolation of points. More...;  ; class  Inverter;  Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  Inverter< 0 >;  Inverter<0>. More...;  ; class  Inverter< 1 >;  1x1 matrix inversion \(a_{11} \to 1/a_{11}\) More...;  ; class  Inverter< 2 >;  2x2 matrix inversion using Cramers rule. More...;  ; class  IOptions;  Generic interface for defining configuration options of a numerical algorithm. More...;  ; class  IParametricFunctionMultiDimTempl;  IParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricFunctionOneDim;  Specialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricGradFunctionMultiDimTempl;  Interface (abstract class) for parametric gradient multi-dimensional functions providing in addition to function evaluation with respect to the coordinates also the gradient with respect to the parameters, via the method ParameterGradient. More...;  ; class  IParametricGradFunctionOneDim;  Interface (abstract class) for parametric one-dimensional gradient functions providing in addition to function evaluation with respect t",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:18096,Integrability,interface,interface,18096," class  IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  IntegratorOneDim;  User Class for performing numerical integration of a function in one dimension. More...;  ; class  IntegratorOneDimOptions;  Numerical one dimensional integration options. More...;  ; class  Interpolator;  Class for performing function interpolation of points. More...;  ; class  Inverter;  Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  Inverter< 0 >;  Inverter<0>. More...;  ; class  Inverter< 1 >;  1x1 matrix inversion \(a_{11} \to 1/a_{11}\) More...;  ; class  Inverter< 2 >;  2x2 matrix inversion using Cramers rule. More...;  ; class  IOptions;  Generic interface for defining configuration options of a numerical algorithm. More...;  ; class  IParametricFunctionMultiDimTempl;  IParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricFunctionOneDim;  Specialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricGradFunctionMultiDimTempl;  Interface (abstract class) for parametric gradient multi-dimensional functions providing in addition to function evaluation with respect to the coordinates also the gradient with respect to the parameters, via the method ParameterGradient. More...;  ; class  IParametricGradFunctionOneDim;  Interface (abstract class) for parametric one-dimensional gradient functions providing in addition to function evaluation with respect the coordinates also the gradient with respect to the parameters, via the method ParameterGradient. More...;  ; class  IRootFinderMethod;  Interface for finding function roo",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:18336,Integrability,interface,interface,18336,"r performing numerical integration of a function in one dimension. More...;  ; class  IntegratorOneDimOptions;  Numerical one dimensional integration options. More...;  ; class  Interpolator;  Class for performing function interpolation of points. More...;  ; class  Inverter;  Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  Inverter< 0 >;  Inverter<0>. More...;  ; class  Inverter< 1 >;  1x1 matrix inversion \(a_{11} \to 1/a_{11}\) More...;  ; class  Inverter< 2 >;  2x2 matrix inversion using Cramers rule. More...;  ; class  IOptions;  Generic interface for defining configuration options of a numerical algorithm. More...;  ; class  IParametricFunctionMultiDimTempl;  IParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricFunctionOneDim;  Specialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricGradFunctionMultiDimTempl;  Interface (abstract class) for parametric gradient multi-dimensional functions providing in addition to function evaluation with respect to the coordinates also the gradient with respect to the parameters, via the method ParameterGradient. More...;  ; class  IParametricGradFunctionOneDim;  Interface (abstract class) for parametric one-dimensional gradient functions providing in addition to function evaluation with respect the coordinates also the gradient with respect to the parameters, via the method ParameterGradient. More...;  ; class  IRootFinderMethod;  Interface for finding function roots of one-dimensional functions. More...;  ; class  KahanSum;  The Kahan summation is a compensated summation algorithm, which significantly reduces numerical errors when adding a sequence of finite-precision floating point numbers.",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:19970,Integrability,wrap,wrapper,19970,"tion with respect the coordinates also the gradient with respect to the parameters, via the method ParameterGradient. More...;  ; class  IRootFinderMethod;  Interface for finding function roots of one-dimensional functions. More...;  ; class  KahanSum;  The Kahan summation is a compensated summation algorithm, which significantly reduces numerical errors when adding a sequence of finite-precision floating point numbers. More...;  ; class  KDTree;  ; class  LCGEngine;  ; class  LocalCoordinateSystemTag;  Tag for identifying vectors based on a local coordinate system. More...;  ; class  LorentzRotation;  Lorentz transformation class with the (4D) transformation represented by a 4x4 orthosymplectic matrix. More...;  ; class  LorentzVector;  Class describing a generic LorentzVector in the 4D space-time, using the specified coordinate system for the spatial vector part. More...;  ; class  LSResidualFunc;  LSResidualFunc class description. More...;  ; class  MathMoreLib;  ; class  MatRepStd;  Expression wrapper class for Matrix objects. More...;  ; class  MatRepSym;  MatRepSym Matrix storage representation for a symmetric matrix of dimension NxN This class is a template on the contained type and on the symmetric matrix size, N. More...;  ; class  MatrixMulOp;  Class for Matrix-Matrix multiplication. More...;  ; class  MersenneTwisterEngine;  Random number generator class based on M. More...;  ; struct  meta_col_dot;  ; struct  meta_col_dot< 0 >;  ; struct  meta_dot;  ; struct  meta_dot< 0 >;  ; struct  meta_mag;  ; struct  meta_mag< 0 >;  ; struct  meta_matrix_dot;  ; struct  meta_matrix_dot< 0 >;  ; struct  meta_row_dot;  ; struct  meta_row_dot< 0 >;  ; class  Minimizer;  Abstract Minimizer class, defining the interface for the various minimizer (like Minuit2, Minuit, GSL, etc..) in ROOT. More...;  ; class  MinimizerOptions;  Minimizer options. More...;  ; class  MinimizerVariableTransformation;  Base class for MinimizerVariable transformations defining the functions to d",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:20692,Integrability,interface,interface,20692,"on;  Lorentz transformation class with the (4D) transformation represented by a 4x4 orthosymplectic matrix. More...;  ; class  LorentzVector;  Class describing a generic LorentzVector in the 4D space-time, using the specified coordinate system for the spatial vector part. More...;  ; class  LSResidualFunc;  LSResidualFunc class description. More...;  ; class  MathMoreLib;  ; class  MatRepStd;  Expression wrapper class for Matrix objects. More...;  ; class  MatRepSym;  MatRepSym Matrix storage representation for a symmetric matrix of dimension NxN This class is a template on the contained type and on the symmetric matrix size, N. More...;  ; class  MatrixMulOp;  Class for Matrix-Matrix multiplication. More...;  ; class  MersenneTwisterEngine;  Random number generator class based on M. More...;  ; struct  meta_col_dot;  ; struct  meta_col_dot< 0 >;  ; struct  meta_dot;  ; struct  meta_dot< 0 >;  ; struct  meta_mag;  ; struct  meta_mag< 0 >;  ; struct  meta_matrix_dot;  ; struct  meta_matrix_dot< 0 >;  ; struct  meta_row_dot;  ; struct  meta_row_dot< 0 >;  ; class  Minimizer;  Abstract Minimizer class, defining the interface for the various minimizer (like Minuit2, Minuit, GSL, etc..) in ROOT. More...;  ; class  MinimizerOptions;  Minimizer options. More...;  ; class  MinimizerVariableTransformation;  Base class for MinimizerVariable transformations defining the functions to deal with bounded parameters. More...;  ; class  MinimTransformFunction;  MinimTransformFunction class to perform a transformations on the variables to deal with fixed or limited variables (support both double and single bounds) The class manages the passed function pointer. More...;  ; class  MinimTransformVariable;  MinimTransformVariable class Contains meta information of the variables such as bounds, fix flags and deals with transformation of the variable The class does not contain the values and the step size (error) of the variable This is an internal class used by the MinimTransformFunction ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:22253,Integrability,integrat,integration,22253," function pointer. More...;  ; class  MinimTransformVariable;  MinimTransformVariable class Contains meta information of the variables such as bounds, fix flags and deals with transformation of the variable The class does not contain the values and the step size (error) of the variable This is an internal class used by the MinimTransformFunction class. More...;  ; class  MinOp;  Subtraction Operation Class. More...;  ; class  Minus;  Unary Minus Operation Class. More...;  ; struct  MinusEquals;  Evaluate the expression performing a -= operation Need to check whether creating a temporary object with the expression result (like in op: A -= A * B ) More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Specialization for symmetrix -= general : NOT Allowed operation. More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Specialization for symmetric matrices. More...;  ; struct  MiserParameters;  Structure collecting parameters for MISER multidimensional integration. More...;  ; class  MixMaxEngine;  MixMaxEngine is a wrapper class for the MIXMAX Random number generator. More...;  ; class  MixMaxEngineImpl;  ; class  MixMaxEngineImpl< ROOT_MM_N >;  ; class  MulOp;  Multiplication (element-wise) Operation Class. More...;  ; class  MultiDimParamFunctionAdapter;  MultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parametric function interface This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiDimParamGradFunctionAdapter;  MultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parametric gradient function interface This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiGenFunctionFitness;  ; class  MultiNumGradFunction;  MultiNumGradFunction class to wrap a n",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:22318,Integrability,wrap,wrapper,22318,"formation of the variables such as bounds, fix flags and deals with transformation of the variable The class does not contain the values and the step size (error) of the variable This is an internal class used by the MinimTransformFunction class. More...;  ; class  MinOp;  Subtraction Operation Class. More...;  ; class  Minus;  Unary Minus Operation Class. More...;  ; struct  MinusEquals;  Evaluate the expression performing a -= operation Need to check whether creating a temporary object with the expression result (like in op: A -= A * B ) More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Specialization for symmetrix -= general : NOT Allowed operation. More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Specialization for symmetric matrices. More...;  ; struct  MiserParameters;  Structure collecting parameters for MISER multidimensional integration. More...;  ; class  MixMaxEngine;  MixMaxEngine is a wrapper class for the MIXMAX Random number generator. More...;  ; class  MixMaxEngineImpl;  ; class  MixMaxEngineImpl< ROOT_MM_N >;  ; class  MulOp;  Multiplication (element-wise) Operation Class. More...;  ; class  MultiDimParamFunctionAdapter;  MultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parametric function interface This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiDimParamGradFunctionAdapter;  MultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parametric gradient function interface This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiGenFunctionFitness;  ; class  MultiNumGradFunction;  MultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:22603,Integrability,wrap,wrap,22603," Minus Operation Class. More...;  ; struct  MinusEquals;  Evaluate the expression performing a -= operation Need to check whether creating a temporary object with the expression result (like in op: A -= A * B ) More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Specialization for symmetrix -= general : NOT Allowed operation. More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Specialization for symmetric matrices. More...;  ; struct  MiserParameters;  Structure collecting parameters for MISER multidimensional integration. More...;  ; class  MixMaxEngine;  MixMaxEngine is a wrapper class for the MIXMAX Random number generator. More...;  ; class  MixMaxEngineImpl;  ; class  MixMaxEngineImpl< ROOT_MM_N >;  ; class  MulOp;  Multiplication (element-wise) Operation Class. More...;  ; class  MultiDimParamFunctionAdapter;  MultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parametric function interface This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiDimParamGradFunctionAdapter;  MultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parametric gradient function interface This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiGenFunctionFitness;  ; class  MultiNumGradFunction;  MultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) More...;  ; struct  MultPolicy;  matrix-matrix multiplication policy More...;  ; struct  NullTypeFunc1D;  ; class  OneDimMultiFunctionAdapter;  OneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one. More...;  ; class  OneDimParamFunctionAdapter;  OneDimParamFunct",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:22689,Integrability,interface,interface,22689," Minus Operation Class. More...;  ; struct  MinusEquals;  Evaluate the expression performing a -= operation Need to check whether creating a temporary object with the expression result (like in op: A -= A * B ) More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Specialization for symmetrix -= general : NOT Allowed operation. More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Specialization for symmetric matrices. More...;  ; struct  MiserParameters;  Structure collecting parameters for MISER multidimensional integration. More...;  ; class  MixMaxEngine;  MixMaxEngine is a wrapper class for the MIXMAX Random number generator. More...;  ; class  MixMaxEngineImpl;  ; class  MixMaxEngineImpl< ROOT_MM_N >;  ; class  MulOp;  Multiplication (element-wise) Operation Class. More...;  ; class  MultiDimParamFunctionAdapter;  MultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parametric function interface This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiDimParamGradFunctionAdapter;  MultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parametric gradient function interface This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiGenFunctionFitness;  ; class  MultiNumGradFunction;  MultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) More...;  ; struct  MultPolicy;  matrix-matrix multiplication policy More...;  ; struct  NullTypeFunc1D;  ; class  OneDimMultiFunctionAdapter;  OneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one. More...;  ; class  OneDimParamFunctionAdapter;  OneDimParamFunct",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:22890,Integrability,wrap,wrap,22890,"D1, D2 > >;  Specialization for symmetrix -= general : NOT Allowed operation. More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Specialization for symmetric matrices. More...;  ; struct  MiserParameters;  Structure collecting parameters for MISER multidimensional integration. More...;  ; class  MixMaxEngine;  MixMaxEngine is a wrapper class for the MIXMAX Random number generator. More...;  ; class  MixMaxEngineImpl;  ; class  MixMaxEngineImpl< ROOT_MM_N >;  ; class  MulOp;  Multiplication (element-wise) Operation Class. More...;  ; class  MultiDimParamFunctionAdapter;  MultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parametric function interface This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiDimParamGradFunctionAdapter;  MultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parametric gradient function interface This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiGenFunctionFitness;  ; class  MultiNumGradFunction;  MultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) More...;  ; struct  MultPolicy;  matrix-matrix multiplication policy More...;  ; struct  NullTypeFunc1D;  ; class  OneDimMultiFunctionAdapter;  OneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one. More...;  ; class  OneDimParamFunctionAdapter;  OneDimParamFunctionAdapter class to wrap a multi-dim parametric function in one dimensional one. More...;  ; class  ParamFunction;  Base template class for all Parametric Functions. More...;  ; class  ParamFunctionBase;  class defining the signature for multi-dim parametric functions More...;  ; class  Para",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:22994,Integrability,interface,interface,22994,"D1, D2 > >;  Specialization for symmetrix -= general : NOT Allowed operation. More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Specialization for symmetric matrices. More...;  ; struct  MiserParameters;  Structure collecting parameters for MISER multidimensional integration. More...;  ; class  MixMaxEngine;  MixMaxEngine is a wrapper class for the MIXMAX Random number generator. More...;  ; class  MixMaxEngineImpl;  ; class  MixMaxEngineImpl< ROOT_MM_N >;  ; class  MulOp;  Multiplication (element-wise) Operation Class. More...;  ; class  MultiDimParamFunctionAdapter;  MultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parametric function interface This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiDimParamGradFunctionAdapter;  MultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parametric gradient function interface This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiGenFunctionFitness;  ; class  MultiNumGradFunction;  MultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) More...;  ; struct  MultPolicy;  matrix-matrix multiplication policy More...;  ; struct  NullTypeFunc1D;  ; class  OneDimMultiFunctionAdapter;  OneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one. More...;  ; class  OneDimParamFunctionAdapter;  OneDimParamFunctionAdapter class to wrap a multi-dim parametric function in one dimensional one. More...;  ; class  ParamFunction;  Base template class for all Parametric Functions. More...;  ; class  ParamFunctionBase;  class defining the signature for multi-dim parametric functions More...;  ; class  Para",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:23206,Integrability,wrap,wrap,23206,R multidimensional integration. More...;  ; class  MixMaxEngine;  MixMaxEngine is a wrapper class for the MIXMAX Random number generator. More...;  ; class  MixMaxEngineImpl;  ; class  MixMaxEngineImpl< ROOT_MM_N >;  ; class  MulOp;  Multiplication (element-wise) Operation Class. More...;  ; class  MultiDimParamFunctionAdapter;  MultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parametric function interface This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiDimParamGradFunctionAdapter;  MultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parametric gradient function interface This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiGenFunctionFitness;  ; class  MultiNumGradFunction;  MultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) More...;  ; struct  MultPolicy;  matrix-matrix multiplication policy More...;  ; struct  NullTypeFunc1D;  ; class  OneDimMultiFunctionAdapter;  OneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one. More...;  ; class  OneDimParamFunctionAdapter;  OneDimParamFunctionAdapter class to wrap a multi-dim parametric function in one dimensional one. More...;  ; class  ParamFunction;  Base template class for all Parametric Functions. More...;  ; class  ParamFunctionBase;  class defining the signature for multi-dim parametric functions More...;  ; class  ParamFunctorHandler;  ParamFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions. More...;  ; class  ParamFunctorTempl;  Param Functor class for Multidimensional functions. More...;  ; class  ParamMemFunHandler;  ParamFunctor Handler to Wrap ,MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:23537,Integrability,wrap,wrap,23537,". More...;  ; class  MultiDimParamFunctionAdapter;  MultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parametric function interface This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiDimParamGradFunctionAdapter;  MultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parametric gradient function interface This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiGenFunctionFitness;  ; class  MultiNumGradFunction;  MultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) More...;  ; struct  MultPolicy;  matrix-matrix multiplication policy More...;  ; struct  NullTypeFunc1D;  ; class  OneDimMultiFunctionAdapter;  OneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one. More...;  ; class  OneDimParamFunctionAdapter;  OneDimParamFunctionAdapter class to wrap a multi-dim parametric function in one dimensional one. More...;  ; class  ParamFunction;  Base template class for all Parametric Functions. More...;  ; class  ParamFunctionBase;  class defining the signature for multi-dim parametric functions More...;  ; class  ParamFunctorHandler;  ParamFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions. More...;  ; class  ParamFunctorTempl;  Param Functor class for Multidimensional functions. More...;  ; class  ParamMemFunHandler;  ParamFunctor Handler to Wrap pointers to member functions. More...;  ; class  PDFIntegral;  ; struct  PlaceExpr;  ; struct  PlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  ; struct  PlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  ; struct  PlaceMat",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:23678,Integrability,wrap,wrap,23678,"parametric function interface This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiDimParamGradFunctionAdapter;  MultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parametric gradient function interface This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiGenFunctionFitness;  ; class  MultiNumGradFunction;  MultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) More...;  ; struct  MultPolicy;  matrix-matrix multiplication policy More...;  ; struct  NullTypeFunc1D;  ; class  OneDimMultiFunctionAdapter;  OneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one. More...;  ; class  OneDimParamFunctionAdapter;  OneDimParamFunctionAdapter class to wrap a multi-dim parametric function in one dimensional one. More...;  ; class  ParamFunction;  Base template class for all Parametric Functions. More...;  ; class  ParamFunctionBase;  class defining the signature for multi-dim parametric functions More...;  ; class  ParamFunctorHandler;  ParamFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions. More...;  ; class  ParamFunctorTempl;  Param Functor class for Multidimensional functions. More...;  ; class  ParamMemFunHandler;  ParamFunctor Handler to Wrap pointers to member functions. More...;  ; class  PDFIntegral;  ; struct  PlaceExpr;  ; struct  PlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  ; struct  PlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  ; struct  PlaceMatrix;  Structure to deal when a submatrix is placed in a matrix. More...;  ; struct  PlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:24014,Integrability,wrap,wrapping,24014," This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiGenFunctionFitness;  ; class  MultiNumGradFunction;  MultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) More...;  ; struct  MultPolicy;  matrix-matrix multiplication policy More...;  ; struct  NullTypeFunc1D;  ; class  OneDimMultiFunctionAdapter;  OneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one. More...;  ; class  OneDimParamFunctionAdapter;  OneDimParamFunctionAdapter class to wrap a multi-dim parametric function in one dimensional one. More...;  ; class  ParamFunction;  Base template class for all Parametric Functions. More...;  ; class  ParamFunctionBase;  class defining the signature for multi-dim parametric functions More...;  ; class  ParamFunctorHandler;  ParamFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions. More...;  ; class  ParamFunctorTempl;  Param Functor class for Multidimensional functions. More...;  ; class  ParamMemFunHandler;  ParamFunctor Handler to Wrap pointers to member functions. More...;  ; class  PDFIntegral;  ; struct  PlaceExpr;  ; struct  PlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  ; struct  PlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  ; struct  PlaceMatrix;  Structure to deal when a submatrix is placed in a matrix. More...;  ; struct  PlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  ; struct  PlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  ; struct  PlainParameters;  ; struct  PlusEquals;  Evaluate the expression performing a += operation Need to check whether creating a temporary object with the expression result (like in op: A += A * B ) More...;  ; struct  PlusEquals< T, D1, ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:27498,Integrability,interface,interface,27498,"lass  PxPyPzE4D;  Class describing a 4D cartesian coordinate system (x, y, z, t coordinates) or momentum-energy vectors stored as (Px, Py, Pz, E). More...;  ; class  PxPyPzM4D;  Class describing a 4D coordinate system or momentum-energy vectors stored as (Px, Py, Pz, M). More...;  ; class  QuasiRandom;  User class for MathMore random numbers template on the Engine type. More...;  ; class  Quaternion;  Rotation class with the (3D) rotation represented by a unit quaternion (u, i, j, k). More...;  ; class  Random;  Documentation for the Random class. More...;  ; class  RandomFunctions;  ; class  RandomFunctions< EngineType, ROOT::Math::GSLRandomEngine >;  Specialized implementation of the Random functions based on the GSL library. More...;  ; class  RandomFunctionsImpl;  Definition of the generic implementation class for the RandomFunctions. More...;  ; class  RandomFunctionsImpl< TRandomEngine >;  Implementation class for the RandomFunction for all the engined that derives from TRandomEngine class, which defines an interface which has TRandomEngine::Rndm() In this way we can have a common implementation for the RandomFunctions. More...;  ; class  RanluxppCompatEngineGslRanlxd;  Compatibility engine for gsl_rng_ranlxd* from the GNU Scientific Library. More...;  ; class  RanluxppCompatEngineGslRanlxs;  Compatibility engine for gsl_rng_ranlxs* from the GNU Scientific Library. More...;  ; class  RanluxppCompatEngineJames;  ; class  RanluxppCompatEngineLuescherImpl;  ; class  RanluxppCompatEngineLuescherRanlxd;  Compatibility engine for Lüscher's ranlxd implementation written in C. More...;  ; class  RanluxppCompatEngineLuescherRanlxs;  Compatibility engine for Lüscher's ranlxs implementation written in C. More...;  ; class  RanluxppCompatEngineStdRanlux24;  Compatibility engine for std::ranlux24 from the C++ standard. More...;  ; class  RanluxppCompatEngineStdRanlux48;  Compatibility engine for std::ranlux48 from the C++ standard. More...;  ; class  RanluxppEngine;  Implem",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:30765,Integrability,wrap,wrap,30765,"y a third rotation of an angle psi (roll) about the X axis. More...;  ; struct  RowOffsets;  Static structure to keep the conversion from (i,j) to offsets in the storage data for a symmetric matrix. More...;  ; class  SDeterminant;  Dsfact. More...;  ; class  SinVariableTransformation;  Sin Transformation class for dealing with double bounded variables. More...;  ; class  SInverter;  Dsinv. More...;  ; struct  SkipFunction;  ; struct  SkipFunction< 0 >;  ; class  SMatrix;  SMatrix: a generic fixed size D1 x D2 Matrix class. More...;  ; struct  SMatrixIdentity;  ; struct  SMatrixNoInit;  ; class  Sqr;  Unary Square Operation Class. More...;  ; class  Sqrt;  Unary Square Root Operation Class. More...;  ; class  SqrtLowVariableTransformation;  Sqrt Transformation class for dealing with lower bounded variables. More...;  ; class  SqrtUpVariableTransformation;  Sqrt Transformation class for dealing with upper bounded variables. More...;  ; class  StdEngine;  Class to wrap engines from the C++ standard random library in the ROOT Random interface. More...;  ; struct  StdEngineType;  ; struct  StdEngineType< std::knuth_b >;  ; struct  StdEngineType< std::minstd_rand >;  ; struct  StdEngineType< std::mt19937 >;  ; struct  StdEngineType< std::mt19937_64 >;  ; struct  StdEngineType< std::random_device >;  ; struct  StdEngineType< std::ranlux24 >;  ; struct  StdEngineType< std::ranlux48 >;  ; class  StdRandomEngine;  ; class  SVector;  SVector: a generic fixed size Vector class. More...;  ; class  TDataPoint;  ; class  TDataPointN;  ; class  TensorMulOp;  Class for Tensor Multiplication (outer product) of two vectors giving a matrix. More...;  ; class  TRandomEngine;  ; class  TransposeOp;  Class for Transpose Operations. More...;  ; struct  TranspPolicy;  matrix transpose policy More...;  ; struct  TranspPolicy< T, D1, D2, MatRepSym< T, D1 > >;  ; class  UnaryOp;  UnaryOperation class A class representing unary operators in the parse tree. More...;  ; class  Vavilov;  Base cla",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:30834,Integrability,interface,interface,30834,"y a third rotation of an angle psi (roll) about the X axis. More...;  ; struct  RowOffsets;  Static structure to keep the conversion from (i,j) to offsets in the storage data for a symmetric matrix. More...;  ; class  SDeterminant;  Dsfact. More...;  ; class  SinVariableTransformation;  Sin Transformation class for dealing with double bounded variables. More...;  ; class  SInverter;  Dsinv. More...;  ; struct  SkipFunction;  ; struct  SkipFunction< 0 >;  ; class  SMatrix;  SMatrix: a generic fixed size D1 x D2 Matrix class. More...;  ; struct  SMatrixIdentity;  ; struct  SMatrixNoInit;  ; class  Sqr;  Unary Square Operation Class. More...;  ; class  Sqrt;  Unary Square Root Operation Class. More...;  ; class  SqrtLowVariableTransformation;  Sqrt Transformation class for dealing with lower bounded variables. More...;  ; class  SqrtUpVariableTransformation;  Sqrt Transformation class for dealing with upper bounded variables. More...;  ; class  StdEngine;  Class to wrap engines from the C++ standard random library in the ROOT Random interface. More...;  ; struct  StdEngineType;  ; struct  StdEngineType< std::knuth_b >;  ; struct  StdEngineType< std::minstd_rand >;  ; struct  StdEngineType< std::mt19937 >;  ; struct  StdEngineType< std::mt19937_64 >;  ; struct  StdEngineType< std::random_device >;  ; struct  StdEngineType< std::ranlux24 >;  ; struct  StdEngineType< std::ranlux48 >;  ; class  StdRandomEngine;  ; class  SVector;  SVector: a generic fixed size Vector class. More...;  ; class  TDataPoint;  ; class  TDataPointN;  ; class  TensorMulOp;  Class for Tensor Multiplication (outer product) of two vectors giving a matrix. More...;  ; class  TRandomEngine;  ; class  TransposeOp;  Class for Transpose Operations. More...;  ; struct  TranspPolicy;  matrix transpose policy More...;  ; struct  TranspPolicy< T, D1, D2, MatRepSym< T, D1 > >;  ; class  UnaryOp;  UnaryOperation class A class representing unary operators in the parse tree. More...;  ; class  Vavilov;  Base cla",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:32259,Integrability,wrap,wrapper,32259,"d size Vector class. More...;  ; class  TDataPoint;  ; class  TDataPointN;  ; class  TensorMulOp;  Class for Tensor Multiplication (outer product) of two vectors giving a matrix. More...;  ; class  TRandomEngine;  ; class  TransposeOp;  Class for Transpose Operations. More...;  ; struct  TranspPolicy;  matrix transpose policy More...;  ; struct  TranspPolicy< T, D1, D2, MatRepSym< T, D1 > >;  ; class  UnaryOp;  UnaryOperation class A class representing unary operators in the parse tree. More...;  ; class  Vavilov;  Base class describing a Vavilov distribution. More...;  ; class  VavilovAccurate;  Class describing a Vavilov distribution. More...;  ; class  VavilovAccurateCdf;  Class describing the Vavilov cdf. More...;  ; class  VavilovAccuratePdf;  Class describing the Vavilov pdf. More...;  ; class  VavilovAccurateQuantile;  Class describing the Vavilov quantile function. More...;  ; class  VavilovFast;  Class describing a Vavilov distribution. More...;  ; class  VecExpr;  Expression wrapper class for Vector objects. More...;  ; class  VectorMatrixColOp;  Class for Vector-Matrix multiplication. More...;  ; class  VectorMatrixRowOp;  ; struct  VegasParameters;  Structures collecting parameters for VEGAS multidimensional integration For implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h. More...;  ; class  VirtualIntegrator;  Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. More...;  ; class  VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrato",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:32499,Integrability,integrat,integration,32499,"seOp;  Class for Transpose Operations. More...;  ; struct  TranspPolicy;  matrix transpose policy More...;  ; struct  TranspPolicy< T, D1, D2, MatRepSym< T, D1 > >;  ; class  UnaryOp;  UnaryOperation class A class representing unary operators in the parse tree. More...;  ; class  Vavilov;  Base class describing a Vavilov distribution. More...;  ; class  VavilovAccurate;  Class describing a Vavilov distribution. More...;  ; class  VavilovAccurateCdf;  Class describing the Vavilov cdf. More...;  ; class  VavilovAccuratePdf;  Class describing the Vavilov pdf. More...;  ; class  VavilovAccurateQuantile;  Class describing the Vavilov quantile function. More...;  ; class  VavilovFast;  Class describing a Vavilov distribution. More...;  ; class  VecExpr;  Expression wrapper class for Vector objects. More...;  ; class  VectorMatrixColOp;  Class for Vector-Matrix multiplication. More...;  ; class  VectorMatrixRowOp;  ; struct  VegasParameters;  Structures collecting parameters for VEGAS multidimensional integration For implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h. More...;  ; class  VirtualIntegrator;  Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. More...;  ; class  VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member f",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:32675,Integrability,integrat,integration,32675," ; class  Vavilov;  Base class describing a Vavilov distribution. More...;  ; class  VavilovAccurate;  Class describing a Vavilov distribution. More...;  ; class  VavilovAccurateCdf;  Class describing the Vavilov cdf. More...;  ; class  VavilovAccuratePdf;  Class describing the Vavilov pdf. More...;  ; class  VavilovAccurateQuantile;  Class describing the Vavilov quantile function. More...;  ; class  VavilovFast;  Class describing a Vavilov distribution. More...;  ; class  VecExpr;  Expression wrapper class for Vector objects. More...;  ; class  VectorMatrixColOp;  Class for Vector-Matrix multiplication. More...;  ; class  VectorMatrixRowOp;  ; struct  VegasParameters;  Structures collecting parameters for VEGAS multidimensional integration For implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h. More...;  ; class  VirtualIntegrator;  Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. More...;  ; class  VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:32770,Integrability,integrat,integrator,32770," ; class  Vavilov;  Base class describing a Vavilov distribution. More...;  ; class  VavilovAccurate;  Class describing a Vavilov distribution. More...;  ; class  VavilovAccurateCdf;  Class describing the Vavilov cdf. More...;  ; class  VavilovAccuratePdf;  Class describing the Vavilov pdf. More...;  ; class  VavilovAccurateQuantile;  Class describing the Vavilov quantile function. More...;  ; class  VavilovFast;  Class describing a Vavilov distribution. More...;  ; class  VecExpr;  Expression wrapper class for Vector objects. More...;  ; class  VectorMatrixColOp;  Class for Vector-Matrix multiplication. More...;  ; class  VectorMatrixRowOp;  ; struct  VegasParameters;  Structures collecting parameters for VEGAS multidimensional integration For implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h. More...;  ; class  VirtualIntegrator;  Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. More...;  ; class  VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:32899,Integrability,integrat,integration,32899," ; class  Vavilov;  Base class describing a Vavilov distribution. More...;  ; class  VavilovAccurate;  Class describing a Vavilov distribution. More...;  ; class  VavilovAccurateCdf;  Class describing the Vavilov cdf. More...;  ; class  VavilovAccuratePdf;  Class describing the Vavilov pdf. More...;  ; class  VavilovAccurateQuantile;  Class describing the Vavilov quantile function. More...;  ; class  VavilovFast;  Class describing a Vavilov distribution. More...;  ; class  VecExpr;  Expression wrapper class for Vector objects. More...;  ; class  VectorMatrixColOp;  Class for Vector-Matrix multiplication. More...;  ; class  VectorMatrixRowOp;  ; struct  VegasParameters;  Structures collecting parameters for VEGAS multidimensional integration For implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h. More...;  ; class  VirtualIntegrator;  Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. More...;  ; class  VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:33006,Integrability,integrat,integration,33006,"f;  Class describing the Vavilov pdf. More...;  ; class  VavilovAccurateQuantile;  Class describing the Vavilov quantile function. More...;  ; class  VavilovFast;  Class describing a Vavilov distribution. More...;  ; class  VecExpr;  Expression wrapper class for Vector objects. More...;  ; class  VectorMatrixColOp;  Class for Vector-Matrix multiplication. More...;  ; class  VectorMatrixRowOp;  ; struct  VegasParameters;  Structures collecting parameters for VEGAS multidimensional integration For implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h. More...;  ; class  VirtualIntegrator;  Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. More...;  ; class  VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  WrappedMemMultiFunction;  ; class  WrappedMultiFunction;  Template class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. More...;  ; class  WrappedMultiTF1Templ;  Class to Wrap a ROOT",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:33199,Integrability,integrat,integration,33199,"tribution. More...;  ; class  VecExpr;  Expression wrapper class for Vector objects. More...;  ; class  VectorMatrixColOp;  Class for Vector-Matrix multiplication. More...;  ; class  VectorMatrixRowOp;  ; struct  VegasParameters;  Structures collecting parameters for VEGAS multidimensional integration For implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h. More...;  ; class  VirtualIntegrator;  Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. More...;  ; class  VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  WrappedMemMultiFunction;  ; class  WrappedMultiFunction;  Template class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. More...;  ; class  WrappedMultiTF1Templ;  Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm. More...;  ; class  WrappedParamFunction;  WrappedParamFunction ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:33356,Integrability,wrap,wrap,33356,"iplication. More...;  ; class  VectorMatrixRowOp;  ; struct  VegasParameters;  Structures collecting parameters for VEGAS multidimensional integration For implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h. More...;  ; class  VirtualIntegrator;  Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. More...;  ; class  VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  WrappedMemMultiFunction;  ; class  WrappedMultiFunction;  Template class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. More...;  ; class  WrappedMultiTF1Templ;  Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm. More...;  ; class  WrappedParamFunction;  WrappedParamFunction class to wrap any multi-dimensional function object implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:33473,Integrability,wrap,wrap,33473,"tegrationWorkspace.h. More...;  ; class  VirtualIntegrator;  Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. More...;  ; class  VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  WrappedMemMultiFunction;  ; class  WrappedMultiFunction;  Template class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. More...;  ; class  WrappedMultiTF1Templ;  Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm. More...;  ; class  WrappedParamFunction;  WrappedParamFunction class to wrap any multi-dimensional function object implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values. More...;  ; class  WrappedParamFunctionGen;  WrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:33565,Integrability,interface,interface,33565,"tegrationWorkspace.h. More...;  ; class  VirtualIntegrator;  Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. More...;  ; class  VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  WrappedMemMultiFunction;  ; class  WrappedMultiFunction;  Template class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. More...;  ; class  WrappedMultiTF1Templ;  Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm. More...;  ; class  WrappedParamFunction;  WrappedParamFunction class to wrap any multi-dimensional function object implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values. More...;  ; class  WrappedParamFunctionGen;  WrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:33659,Integrability,wrap,wrapped,33659,"tegrationWorkspace.h. More...;  ; class  VirtualIntegrator;  Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. More...;  ; class  VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  WrappedMemMultiFunction;  ; class  WrappedMultiFunction;  Template class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. More...;  ; class  WrappedMultiTF1Templ;  Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm. More...;  ; class  WrappedParamFunction;  WrappedParamFunction class to wrap any multi-dimensional function object implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values. More...;  ; class  WrappedParamFunctionGen;  WrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:33837,Integrability,wrap,wrap,33837,"orOneDim defines the methods for one-dimensional integration. More...;  ; class  VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  WrappedMemMultiFunction;  ; class  WrappedMultiFunction;  Template class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. More...;  ; class  WrappedMultiTF1Templ;  Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm. More...;  ; class  WrappedParamFunction;  WrappedParamFunction class to wrap any multi-dimensional function object implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values. More...;  ; class  WrappedParamFunctionGen;  WrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters. More...;  ; class  WrappedTF1;  Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numeric",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:33941,Integrability,interface,interface,33941,"orOneDim defines the methods for one-dimensional integration. More...;  ; class  VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  WrappedMemMultiFunction;  ; class  WrappedMultiFunction;  Template class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. More...;  ; class  WrappedMultiTF1Templ;  Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm. More...;  ; class  WrappedParamFunction;  WrappedParamFunction class to wrap any multi-dimensional function object implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values. More...;  ; class  WrappedParamFunctionGen;  WrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters. More...;  ; class  WrappedTF1;  Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numeric",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:34066,Integrability,interface,interface,34066,"rete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  WrappedMemMultiFunction;  ; class  WrappedMultiFunction;  Template class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. More...;  ; class  WrappedMultiTF1Templ;  Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm. More...;  ; class  WrappedParamFunction;  WrappedParamFunction class to wrap any multi-dimensional function object implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values. More...;  ; class  WrappedParamFunctionGen;  WrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters. More...;  ; class  WrappedTF1;  Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime. More...;  . Typedefs; typedef TRandomEngine DefaultEngineType;  Documentation for",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:34218,Integrability,wrap,wrap,34218,"ntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  WrappedMemMultiFunction;  ; class  WrappedMultiFunction;  Template class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. More...;  ; class  WrappedMultiTF1Templ;  Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm. More...;  ; class  WrappedParamFunction;  WrappedParamFunction class to wrap any multi-dimensional function object implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values. More...;  ; class  WrappedParamFunctionGen;  WrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters. More...;  ; class  WrappedTF1;  Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime. More...;  . Typedefs; typedef TRandomEngine DefaultEngineType;  Documentation for the RandomFunction class. ;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGenFunction > FitMethodFunction;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGradFunction > FitMethodGradFunction;  ; typedef double(* FreeFunction",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:34331,Integrability,interface,interface-like,34331,"ntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  WrappedMemMultiFunction;  ; class  WrappedMultiFunction;  Template class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. More...;  ; class  WrappedMultiTF1Templ;  Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm. More...;  ; class  WrappedParamFunction;  WrappedParamFunction class to wrap any multi-dimensional function object implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values. More...;  ; class  WrappedParamFunctionGen;  WrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters. More...;  ; class  WrappedTF1;  Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime. More...;  . Typedefs; typedef TRandomEngine DefaultEngineType;  Documentation for the RandomFunction class. ;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGenFunction > FitMethodFunction;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGradFunction > FitMethodGradFunction;  ; typedef double(* FreeFunction",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:34506,Integrability,wrap,wrap,34506,"tion interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  WrappedMemMultiFunction;  ; class  WrappedMultiFunction;  Template class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. More...;  ; class  WrappedMultiTF1Templ;  Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm. More...;  ; class  WrappedParamFunction;  WrappedParamFunction class to wrap any multi-dimensional function object implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values. More...;  ; class  WrappedParamFunctionGen;  WrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters. More...;  ; class  WrappedTF1;  Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime. More...;  . Typedefs; typedef TRandomEngine DefaultEngineType;  Documentation for the RandomFunction class. ;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGenFunction > FitMethodFunction;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGradFunction > FitMethodGradFunction;  ; typedef double(* FreeFunctionPtr) (double);  ; typedef double(* FreeMultiFunctionPtr) (const double *);  ; typedef double(* FreeParamMultiFunctionPtr) (const double *, const double *);  ; typedef void(* GSLFdfPointer) (double, void *, double *, double *);  ; typedef double(* GSLFuncPointer) (double,",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:34593,Integrability,interface,interface-like,34593,"tion interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  WrappedMemMultiFunction;  ; class  WrappedMultiFunction;  Template class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. More...;  ; class  WrappedMultiTF1Templ;  Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm. More...;  ; class  WrappedParamFunction;  WrappedParamFunction class to wrap any multi-dimensional function object implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values. More...;  ; class  WrappedParamFunctionGen;  WrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters. More...;  ; class  WrappedTF1;  Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime. More...;  . Typedefs; typedef TRandomEngine DefaultEngineType;  Documentation for the RandomFunction class. ;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGenFunction > FitMethodFunction;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGradFunction > FitMethodGradFunction;  ; typedef double(* FreeFunctionPtr) (double);  ; typedef double(* FreeMultiFunctionPtr) (const double *);  ; typedef double(* FreeParamMultiFunctionPtr) (const double *, const double *);  ; typedef void(* GSLFdfPointer) (double, void *, double *, double *);  ; typedef double(* GSLFuncPointer) (double,",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:34786,Integrability,interface,interface,34786,"s to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. More...;  ; class  WrappedMultiTF1Templ;  Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm. More...;  ; class  WrappedParamFunction;  WrappedParamFunction class to wrap any multi-dimensional function object implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values. More...;  ; class  WrappedParamFunctionGen;  WrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters. More...;  ; class  WrappedTF1;  Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime. More...;  . Typedefs; typedef TRandomEngine DefaultEngineType;  Documentation for the RandomFunction class. ;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGenFunction > FitMethodFunction;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGradFunction > FitMethodGradFunction;  ; typedef double(* FreeFunctionPtr) (double);  ; typedef double(* FreeMultiFunctionPtr) (const double *);  ; typedef double(* FreeParamMultiFunctionPtr) (const double *, const double *);  ; typedef void(* GSLFdfPointer) (double, void *, double *, double *);  ; typedef double(* GSLFuncPointer) (double, void *);  Function pointer corresponding to gsl_function signature. ;  ; typedef double(* GSLMonteFuncPointer) (double *, size_t, void *);  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MonteCarlo integration algorithms. ;  ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:34868,Integrability,wrap,wrapper,34868,"s to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. More...;  ; class  WrappedMultiTF1Templ;  Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm. More...;  ; class  WrappedParamFunction;  WrappedParamFunction class to wrap any multi-dimensional function object implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values. More...;  ; class  WrappedParamFunctionGen;  WrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters. More...;  ; class  WrappedTF1;  Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime. More...;  . Typedefs; typedef TRandomEngine DefaultEngineType;  Documentation for the RandomFunction class. ;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGenFunction > FitMethodFunction;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGradFunction > FitMethodGradFunction;  ; typedef double(* FreeFunctionPtr) (double);  ; typedef double(* FreeMultiFunctionPtr) (const double *);  ; typedef double(* FreeParamMultiFunctionPtr) (const double *, const double *);  ; typedef void(* GSLFdfPointer) (double, void *, double *, double *);  ; typedef double(* GSLFuncPointer) (double, void *);  Function pointer corresponding to gsl_function signature. ;  ; typedef double(* GSLMonteFuncPointer) (double *, size_t, void *);  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MonteCarlo integration algorithms. ;  ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:34953,Integrability,wrap,wrapper,34953,"s to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. More...;  ; class  WrappedMultiTF1Templ;  Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm. More...;  ; class  WrappedParamFunction;  WrappedParamFunction class to wrap any multi-dimensional function object implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values. More...;  ; class  WrappedParamFunctionGen;  WrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters. More...;  ; class  WrappedTF1;  Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime. More...;  . Typedefs; typedef TRandomEngine DefaultEngineType;  Documentation for the RandomFunction class. ;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGenFunction > FitMethodFunction;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGradFunction > FitMethodGradFunction;  ; typedef double(* FreeFunctionPtr) (double);  ; typedef double(* FreeMultiFunctionPtr) (const double *);  ; typedef double(* FreeParamMultiFunctionPtr) (const double *, const double *);  ; typedef void(* GSLFdfPointer) (double, void *, double *, double *);  ; typedef double(* GSLFuncPointer) (double, void *);  Function pointer corresponding to gsl_function signature. ;  ; typedef double(* GSLMonteFuncPointer) (double *, size_t, void *);  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MonteCarlo integration algorithms. ;  ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:35805,Integrability,integrat,integration,35805,"Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime. More...;  . Typedefs; typedef TRandomEngine DefaultEngineType;  Documentation for the RandomFunction class. ;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGenFunction > FitMethodFunction;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGradFunction > FitMethodGradFunction;  ; typedef double(* FreeFunctionPtr) (double);  ; typedef double(* FreeMultiFunctionPtr) (const double *);  ; typedef double(* FreeParamMultiFunctionPtr) (const double *, const double *);  ; typedef void(* GSLFdfPointer) (double, void *, double *, double *);  ; typedef double(* GSLFuncPointer) (double, void *);  Function pointer corresponding to gsl_function signature. ;  ; typedef double(* GSLMonteFuncPointer) (double *, size_t, void *);  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MonteCarlo integration algorithms. ;  ; typedef void(* GSLMultiFitDfPointer) (const gsl_vector *, void *, gsl_matrix *);  ; typedef void(* GSLMultiFitFdfPointer) (const gsl_vector *, void *, gsl_vector *, gsl_matrix *);  ; typedef double(* GSLMultiFitFPointer) (const gsl_vector *, void *, gsl_vector *);  ; typedef void(* GSLMultiMinDfPointer) (const gsl_vector *, void *, gsl_vector *);  ; typedef void(* GSLMultiMinFdfPointer) (const gsl_vector *, void *, double *, gsl_vector *);  ; typedef double(* GSLMultiMinFuncPointer) (const gsl_vector *, void *);  ; typedef void(* GSLMultiRootDfPointer) (const gsl_vector *, void *, gsl_matrix *);  ; typedef void(* GSLMultiRootFdfPointer) (const gsl_vector *, void *, gsl_vector *, gsl_matrix *);  ; typedef double(* GSLMultiRootFPointer) (const gsl_vector *, void *, gsl_vector *);  ; typedef GSLRngRanLuxS1 GSLRngRanLux1;  ; typedef GSLRngRanLuxS2 GSLRngRanLux2;  ; typedef GSLRngRanLuxD",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:110139,Integrability,integrat,integrating,110139,"uble normal_quantile (double z, double sigma);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the normal (Gaussian) distribution (normal_cdf). ;  ; double uniform_quantile_c (double z, double a, double b);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the uniform (flat) distribution (uniform_cdf_c). ;  ; double uniform_quantile (double z, double a, double b);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the uniform (flat) distribution (uniform_cdf). ;  ; double landau_quantile (double z, double xi=1);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the Landau distribution (landau_cdf). ;  ; double landau_quantile_c (double z, double xi=1);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the landau distribution (landau_cdf_c). ;  ; Special Functions from MathCore; double erf (double x);  Error function encountered in integrating the normal distribution. ;  ; double erfc (double x);  Complementary error function. ;  ; double tgamma (double x);  The gamma function is defined to be the extension of the factorial to real numbers. ;  ; double lgamma (double x);  Calculates the logarithm of the gamma function. ;  ; double inc_gamma (double a, double x);  Calculates the normalized (regularized) lower incomplete gamma function (lower integral) ;  ; double inc_gamma_c (double a, double x);  Calculates the normalized (regularized) upper incomplete gamma function (upper integral) ;  ; double beta (double x, double y);  Calculates the beta function. ;  ; double inc_beta (double x, double a, double b);  Calculates the normalized (regularized) incomplete beta function. ;  ; double sinint (double x);  Calculates the sine integral. ;  ; double cosint (double x);  Calculates the real part of the cosine integral Re(Ci). ;  ; Quantile Functions from MathMore; The implementation used is tha",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:114474,Integrability,depend,dependence,114474,". ;  ; double ellint_3 (double n, double k, double phi);  Calculates the complete elliptic integral of the third kind. ;  ; double expint (double x);  Calculates the exponential integral. ;  ; double expint_n (int n, double x);  ; double hyperg (double a, double b, double c, double x);  Calculates Gauss' hypergeometric function. ;  ; double laguerre (unsigned n, double x);  Calculates the Laguerre polynomials. ;  ; double lambert_W0 (double x);  Calculates the Lambert W function on branch 0. ;  ; double lambert_Wm1 (double x);  Calculates the Lambert W function on branch -1. ;  ; double legendre (unsigned l, double x);  Calculates the Legendre polynomials. ;  ; double riemann_zeta (double x);  Calculates the Riemann zeta function. ;  ; double sph_bessel (unsigned n, double x);  Calculates the spherical Bessel functions of the first kind (also called regular spherical Bessel functions). ;  ; double sph_legendre (unsigned l, unsigned m, double theta);  Computes the spherical (normalized) associated Legendre polynomials, or spherical harmonic without azimuthal dependence ( \(e^(im\phi)\)). ;  ; double sph_neumann (unsigned n, double x);  Calculates the spherical Bessel functions of the second kind (also called irregular spherical Bessel functions or spherical Neumann functions). ;  ; double airy_Ai (double x);  Calculates the Airy function Ai. ;  ; double airy_Bi (double x);  Calculates the Airy function Bi. ;  ; double airy_Ai_deriv (double x);  Calculates the derivative of the Airy function Ai. ;  ; double airy_Bi_deriv (double x);  Calculates the derivative of the Airy function Bi. ;  ; double airy_zero_Ai (unsigned int s);  Calculates the zeroes of the Airy function Ai. ;  ; double airy_zero_Bi (unsigned int s);  Calculates the zeroes of the Airy function Bi. ;  ; double airy_zero_Ai_deriv (unsigned int s);  Calculates the zeroes of the derivative of the Airy function Ai. ;  ; double airy_zero_Bi_deriv (unsigned int s);  Calculates the zeroes of the derivative of th",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:116299,Integrability,wrap,wrapper,116299," the Airy function Bi. ;  ; double wigner_3j (int two_ja, int two_jb, int two_jc, int two_ma, int two_mb, int two_mc);  Calculates the Wigner 3j coupling coefficients. ;  ; double wigner_6j (int two_ja, int two_jb, int two_jc, int two_jd, int two_je, int two_jf);  Calculates the Wigner 6j coupling coefficients. ;  ; double wigner_9j (int two_ja, int two_jb, int two_jc, int two_jd, int two_je, int two_jf, int two_jg, int two_jh, int two_ji);  Calculates the Wigner 9j coupling coefficients. ;  ; double digamma (double x);  . Variables; static const double eu = 0.577215664901532860606;  ; double gDefaultAbsTolerance = 1.E-6;  ; int gDefaultMaxIter = 100;  ; static int gDefaultNpx = 100;  ; static int gDefaultNpx = 100;  ; static int gDefaultNSearch = 10;  ; static int gDefaultNSearch = 10;  ; double gDefaultRelTolerance = 1.E-10;  ; const ROOT::Math::IMultiGenFunction * gFunction;  function wrapper for the function to be minimized ;  ; const ROOT::Math::IMultiGradFunction * gGradFunction;  function wrapper for the gradient of the function to be minimized ;  ; int gNCalls = 0;  integer for the number of function calls ;  ; static const double kSqrt2 = 1.41421356237309515;  . Typedef Documentation. ◆ FitMethodFunction. typedef BasicFitMethodFunction< ROOT::Math::IMultiGenFunction > ROOT::Math::FitMethodFunction. Definition at line 43 of file Fitter.h. ◆ FitMethodGradFunction. typedef BasicFitMethodFunction< ROOT::Math::IMultiGradFunction > ROOT::Math::FitMethodGradFunction. Definition at line 44 of file Fitter.h. ◆ FreeFunctionPtr. typedef double(* ROOT::Math::FreeFunctionPtr) (double). Definition at line 28 of file WrappedFunction.h. ◆ FreeMultiFunctionPtr. typedef double(* ROOT::Math::FreeMultiFunctionPtr)(const double *). Definition at line 30 of file WrappedFunction.h. ◆ FreeParamMultiFunctionPtr. typedef double(* ROOT::Math::FreeParamMultiFunctionPtr) (const double *, const double *). Definition at line 32 of file WrappedParamFunction.h. ◆ GSLFdfPointer. typedef void",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:116409,Integrability,wrap,wrapper,116409," the Airy function Bi. ;  ; double wigner_3j (int two_ja, int two_jb, int two_jc, int two_ma, int two_mb, int two_mc);  Calculates the Wigner 3j coupling coefficients. ;  ; double wigner_6j (int two_ja, int two_jb, int two_jc, int two_jd, int two_je, int two_jf);  Calculates the Wigner 6j coupling coefficients. ;  ; double wigner_9j (int two_ja, int two_jb, int two_jc, int two_jd, int two_je, int two_jf, int two_jg, int two_jh, int two_ji);  Calculates the Wigner 9j coupling coefficients. ;  ; double digamma (double x);  . Variables; static const double eu = 0.577215664901532860606;  ; double gDefaultAbsTolerance = 1.E-6;  ; int gDefaultMaxIter = 100;  ; static int gDefaultNpx = 100;  ; static int gDefaultNpx = 100;  ; static int gDefaultNSearch = 10;  ; static int gDefaultNSearch = 10;  ; double gDefaultRelTolerance = 1.E-10;  ; const ROOT::Math::IMultiGenFunction * gFunction;  function wrapper for the function to be minimized ;  ; const ROOT::Math::IMultiGradFunction * gGradFunction;  function wrapper for the gradient of the function to be minimized ;  ; int gNCalls = 0;  integer for the number of function calls ;  ; static const double kSqrt2 = 1.41421356237309515;  . Typedef Documentation. ◆ FitMethodFunction. typedef BasicFitMethodFunction< ROOT::Math::IMultiGenFunction > ROOT::Math::FitMethodFunction. Definition at line 43 of file Fitter.h. ◆ FitMethodGradFunction. typedef BasicFitMethodFunction< ROOT::Math::IMultiGradFunction > ROOT::Math::FitMethodGradFunction. Definition at line 44 of file Fitter.h. ◆ FreeFunctionPtr. typedef double(* ROOT::Math::FreeFunctionPtr) (double). Definition at line 28 of file WrappedFunction.h. ◆ FreeMultiFunctionPtr. typedef double(* ROOT::Math::FreeMultiFunctionPtr)(const double *). Definition at line 30 of file WrappedFunction.h. ◆ FreeParamMultiFunctionPtr. typedef double(* ROOT::Math::FreeParamMultiFunctionPtr) (const double *, const double *). Definition at line 32 of file WrappedParamFunction.h. ◆ GSLFdfPointer. typedef void",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:146668,Integrability,rout,routine,146668," 93 of file ChebyshevPol.h. ◆ Cross() [1/3]. template<class T , class A > . SVector< T, 3 > ROOT::Math::Cross ; (; const SVector< T, 3 > & ; lhs, . const VecExpr< A, T, 3 > & ; rhs . ). inline . Definition at line 349 of file Functions.h. ◆ Cross() [2/3]. template<class A , class T > . SVector< T, 3 > ROOT::Math::Cross ; (; const VecExpr< A, T, 3 > & ; lhs, . const SVector< T, 3 > & ; rhs . ). inline . Definition at line 336 of file Functions.h. ◆ Cross() [3/3]. template<class A , class B , class T > . SVector< T, 3 > ROOT::Math::Cross ; (; const VecExpr< A, T, 3 > & ; lhs, . const VecExpr< B, T, 3 > & ; rhs . ). inline . Definition at line 362 of file Functions.h. ◆ Dfactir(). template<class Matrix , unsigned int n, unsigned int idim> . bool ROOT::Math::Dfactir ; (; Matrix & ; rhs, . typename Matrix::value_type & ; det, . unsigned int * ; ir . ). Dfactir. ; Function to compute the determinant from a square matrix, Det(A) of dimension idim and order n. A working area ir is returned which is needed by the Dfinv routine.; AuthorT. Glebe ; Definition at line 46 of file Dfactir.h. ◆ Dfinv(). template<class Matrix , unsigned int n, unsigned int idim> . bool ROOT::Math::Dfinv ; (; Matrix & ; rhs, . unsigned int * ; ir . ). Dfinv. ; Function to compute the inverse of a square matrix ( \(A^{-1}\)) of dimension \(idim\) and order \(n\). The routine Dfactir must be called before Dfinv!; AuthorT. Glebe ; Definition at line 47 of file Dfinv.h. ◆ Distance() [1/8]. template<class R > . AxisAngle::Scalar ROOT::Math::Distance ; (; const AxisAngle & ; r1, . const R & ; r2 . ). inline . Distance between two rotations. ; Definition at line 321 of file AxisAngle.h. ◆ Distance() [2/8]. template<class R > . EulerAngles::Scalar ROOT::Math::Distance ; (; const EulerAngles & ; r1, . const R & ; r2 . ). inline . Distance between two rotations. ; Definition at line 358 of file EulerAngles.h. ◆ Distance() [3/8]. template<class R > . Quaternion::Scalar ROOT::Math::Distance ; (; const Quaternion",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:146996,Integrability,rout,routine,146996,", 3 > & ; rhs . ). inline . Definition at line 336 of file Functions.h. ◆ Cross() [3/3]. template<class A , class B , class T > . SVector< T, 3 > ROOT::Math::Cross ; (; const VecExpr< A, T, 3 > & ; lhs, . const VecExpr< B, T, 3 > & ; rhs . ). inline . Definition at line 362 of file Functions.h. ◆ Dfactir(). template<class Matrix , unsigned int n, unsigned int idim> . bool ROOT::Math::Dfactir ; (; Matrix & ; rhs, . typename Matrix::value_type & ; det, . unsigned int * ; ir . ). Dfactir. ; Function to compute the determinant from a square matrix, Det(A) of dimension idim and order n. A working area ir is returned which is needed by the Dfinv routine.; AuthorT. Glebe ; Definition at line 46 of file Dfactir.h. ◆ Dfinv(). template<class Matrix , unsigned int n, unsigned int idim> . bool ROOT::Math::Dfinv ; (; Matrix & ; rhs, . unsigned int * ; ir . ). Dfinv. ; Function to compute the inverse of a square matrix ( \(A^{-1}\)) of dimension \(idim\) and order \(n\). The routine Dfactir must be called before Dfinv!; AuthorT. Glebe ; Definition at line 47 of file Dfinv.h. ◆ Distance() [1/8]. template<class R > . AxisAngle::Scalar ROOT::Math::Distance ; (; const AxisAngle & ; r1, . const R & ; r2 . ). inline . Distance between two rotations. ; Definition at line 321 of file AxisAngle.h. ◆ Distance() [2/8]. template<class R > . EulerAngles::Scalar ROOT::Math::Distance ; (; const EulerAngles & ; r1, . const R & ; r2 . ). inline . Distance between two rotations. ; Definition at line 358 of file EulerAngles.h. ◆ Distance() [3/8]. template<class R > . Quaternion::Scalar ROOT::Math::Distance ; (; const Quaternion & ; r1, . const R & ; r2 . ). inline . Distance between two rotations. ; Definition at line 330 of file Quaternion.h. ◆ Distance() [4/8]. template<class R > . Rotation3D::Scalar ROOT::Math::Distance ; (; const Rotation3D & ; r1, . const R & ; r2 . ). inline . Distance between two rotations. ; Definition at line 492 of file Rotation3D.h. ◆ Distance() [5/8]. template<class R > ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:199067,Integrability,wrap,wrapper,199067,"nst Expr< A, T, D1, D2, R > & ; rhs). inline . Definition at line 551 of file MatrixFunctions.h. ◆ Unit(). template<class A , class T , unsigned int D> . SVector< T, D > ROOT::Math::Unit ; (; const VecExpr< A, T, D > & ; rhs). inline . Definition at line 390 of file Functions.h. Variable Documentation. ◆ eu. const double ROOT::Math::eu = 0.577215664901532860606. static . Definition at line 44 of file Vavilov.cxx. ◆ gDefaultAbsTolerance. double ROOT::Math::gDefaultAbsTolerance = 1.E-6. Definition at line 53 of file GSLMultiRootFinder.cxx. ◆ gDefaultMaxIter. int ROOT::Math::gDefaultMaxIter = 100. Definition at line 52 of file GSLMultiRootFinder.cxx. ◆ gDefaultNpx [1/2]. int ROOT::Math::gDefaultNpx = 100. static . Definition at line 29 of file BrentMinimizer1D.cxx. ◆ gDefaultNpx [2/2]. int ROOT::Math::gDefaultNpx = 100. static . Definition at line 25 of file BrentRootFinder.cxx. ◆ gDefaultNSearch [1/2]. int ROOT::Math::gDefaultNSearch = 10. static . Definition at line 30 of file BrentMinimizer1D.cxx. ◆ gDefaultNSearch [2/2]. int ROOT::Math::gDefaultNSearch = 10. static . Definition at line 26 of file BrentRootFinder.cxx. ◆ gDefaultRelTolerance. double ROOT::Math::gDefaultRelTolerance = 1.E-10. Definition at line 54 of file GSLMultiRootFinder.cxx. ◆ gFunction. const ROOT::Math::IMultiGenFunction* ROOT::Math::gFunction. function wrapper for the function to be minimized ; Definition at line 12 of file RMinimizer.cxx. ◆ gGradFunction. const ROOT::Math::IMultiGradFunction* ROOT::Math::gGradFunction. function wrapper for the gradient of the function to be minimized ; Definition at line 14 of file RMinimizer.cxx. ◆ gNCalls. int ROOT::Math::gNCalls = 0. integer for the number of function calls ; Definition at line 16 of file RMinimizer.cxx. ◆ kSqrt2. const double ROOT::Math::kSqrt2 = 1.41421356237309515. static . Definition at line 18 of file ProbFuncMathCore.cxx. ROOTMath. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:19 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:199247,Integrability,wrap,wrapper,199247,"nst Expr< A, T, D1, D2, R > & ; rhs). inline . Definition at line 551 of file MatrixFunctions.h. ◆ Unit(). template<class A , class T , unsigned int D> . SVector< T, D > ROOT::Math::Unit ; (; const VecExpr< A, T, D > & ; rhs). inline . Definition at line 390 of file Functions.h. Variable Documentation. ◆ eu. const double ROOT::Math::eu = 0.577215664901532860606. static . Definition at line 44 of file Vavilov.cxx. ◆ gDefaultAbsTolerance. double ROOT::Math::gDefaultAbsTolerance = 1.E-6. Definition at line 53 of file GSLMultiRootFinder.cxx. ◆ gDefaultMaxIter. int ROOT::Math::gDefaultMaxIter = 100. Definition at line 52 of file GSLMultiRootFinder.cxx. ◆ gDefaultNpx [1/2]. int ROOT::Math::gDefaultNpx = 100. static . Definition at line 29 of file BrentMinimizer1D.cxx. ◆ gDefaultNpx [2/2]. int ROOT::Math::gDefaultNpx = 100. static . Definition at line 25 of file BrentRootFinder.cxx. ◆ gDefaultNSearch [1/2]. int ROOT::Math::gDefaultNSearch = 10. static . Definition at line 30 of file BrentMinimizer1D.cxx. ◆ gDefaultNSearch [2/2]. int ROOT::Math::gDefaultNSearch = 10. static . Definition at line 26 of file BrentRootFinder.cxx. ◆ gDefaultRelTolerance. double ROOT::Math::gDefaultRelTolerance = 1.E-10. Definition at line 54 of file GSLMultiRootFinder.cxx. ◆ gFunction. const ROOT::Math::IMultiGenFunction* ROOT::Math::gFunction. function wrapper for the function to be minimized ; Definition at line 12 of file RMinimizer.cxx. ◆ gGradFunction. const ROOT::Math::IMultiGradFunction* ROOT::Math::gGradFunction. function wrapper for the gradient of the function to be minimized ; Definition at line 14 of file RMinimizer.cxx. ◆ gNCalls. int ROOT::Math::gNCalls = 0. integer for the number of function calls ; Definition at line 16 of file RMinimizer.cxx. ◆ kSqrt2. const double ROOT::Math::kSqrt2 = 1.41421356237309515. static . Definition at line 18 of file ProbFuncMathCore.cxx. ROOTMath. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:19 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:1459,Modifiability,adapt,adaptive,1459,"space  CholeskyDecompHelpers;  helpers for CholeskyDecomp ;  ; namespace  detail;  ; namespace  GenAlgoOptUtil;  ; namespace  GenVector;  ; namespace  GenVector_detail;  ; namespace  GSLRootHelper;  Helper functions to test convergence of Root-Finding algorithms. ;  ; namespace  GSLSimAn;  ; namespace  gv_detail;  ; namespace  Impl;  ; namespace  IntegMultiDim;  ; namespace  IntegOneDim;  ; namespace  IntegOptionsUtil;  ; namespace  Integration;  ; namespace  IntegrationMultiDim;  ; namespace  IntegrationOneDim;  ; namespace  Internal;  ; namespace  internal;  ; namespace  Interpolation;  ; namespace  MCIntegration;  ; namespace  Minim;  ; namespace  Minim1D;  ; namespace  Roots;  Root-Finding Algorithms. ;  ; namespace  rowOffsetsUtils;  ; namespace  Sampler;  ; namespace  Util;  namespace defining Utility functions needed by mathcore ;  ; namespace  VectorUtil;  Global Helper functions for generic Vector classes. ;  . Classes; class  AdaptiveIntegratorMultiDim;  Class for adaptive quadrature integration in multi-dimensions using rectangular regions. More...;  ; class  AddOp;  Addition Operation Class. More...;  ; struct  AddPolicy;  matrix addition policy More...;  ; struct  AddPolicy< T, D1, D2, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  ; struct  Assign;  Structure to assign from an expression based to general matrix to general matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Dummy Structure which flags an error to avoid assignment from expression based on a general matrix to a symmetric matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Structure to assign from an expression based to symmetric matrix to symmetric matrix. More...;  ; struct  AssignItr;  Structure for assignment to a general matrix from iterator. More...;  ; struct  AssignItr< T, D1, D2, MatRepSym< T, D1 > >;  Specialized structure for assignment to a symmetrix matrix from iterator. More...;  ; struct  Assig",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:9289,Modifiability,adapt,adapting,9289,"nVector_exception;  ; class  GlobalCoordinateSystemTag;  Tag for identifying vectors based on a global coordinate system. More...;  ; class  GoFTest;  GoFTest class implementing the 1 sample and 2 sample goodness of fit tests for uni-variate distributions and data. More...;  ; class  GradFunctor;  GradFunctor class for Multidimensional gradient functions. More...;  ; class  GradFunctor1D;  GradFunctor1D class for one-dimensional gradient functions. More...;  ; class  GSL1DMinimizerWrapper;  wrapper class for gsl_min_fminimizer structure More...;  ; class  GSLChebSeries;  wrapper class for C struct gsl_cheb_series More...;  ; class  GSLDerivator;  Class for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ). More...;  ; class  GSLError;  class to change GSL Error handler to use ROOT one. More...;  ; class  GSLFunctionAdapter;  Class for adapting any C++ functor class to C function pointers used by GSL. More...;  ; class  GSLFunctionDerivWrapper;  class to wrap a gsl_function_fdf (with derivatives) More...;  ; class  GSLFunctionWrapper;  Wrapper class to the gsl_function C structure. More...;  ; class  GSLIntegrationWorkspace;  ; class  GSLIntegrator;  Class for performing numerical integration of a function in one dimension. More...;  ; class  GSLInterpolator;  Interpolation class based on GSL interpolation functions. More...;  ; class  GSLMCIntegrationWorkspace;  ; class  GSLMCIntegrator;  ; class  GSLMinimizer;  GSLMinimizer class. More...;  ; class  GSLMinimizer1D;  Minimizer for arbitrary one dimensional functions. More...;  ; class  GSLMiserIntegrationWorkspace;  Workspace for MISER. More...;  ; struct  GSLMonteFunctionAdapter;  ; class  GSLMonteFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; class  GSLMultiFit;  GSLMultiFit, internal ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:10423,Modifiability,adapt,adapting,10423,"lass  GSLFunctionWrapper;  Wrapper class to the gsl_function C structure. More...;  ; class  GSLIntegrationWorkspace;  ; class  GSLIntegrator;  Class for performing numerical integration of a function in one dimension. More...;  ; class  GSLInterpolator;  Interpolation class based on GSL interpolation functions. More...;  ; class  GSLMCIntegrationWorkspace;  ; class  GSLMCIntegrator;  ; class  GSLMinimizer;  GSLMinimizer class. More...;  ; class  GSLMinimizer1D;  Minimizer for arbitrary one dimensional functions. More...;  ; class  GSLMiserIntegrationWorkspace;  Workspace for MISER. More...;  ; struct  GSLMonteFunctionAdapter;  ; class  GSLMonteFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; class  GSLMultiFit;  GSLMultiFit, internal class for implementing GSL non linear least square GSL fitting. More...;  ; class  GSLMultiFitFunctionAdapter;  Class for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: More...;  ; class  GSLMultiFitFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinDerivFunctionWrapper;  Wrapper for a multi-dimensional function with derivatives used in GSL multidim minimization algorithm. More...;  ; struct  GSLMultiMinFunctionAdapter;  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms. More...;  ; class  GSLMultiMinFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinimizer;  GSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives. More...;  ; class  GSLMultiRootBaseSolver;  GSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solve",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:10916,Modifiability,adapt,adapting,10916,"er for arbitrary one dimensional functions. More...;  ; class  GSLMiserIntegrationWorkspace;  Workspace for MISER. More...;  ; struct  GSLMonteFunctionAdapter;  ; class  GSLMonteFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; class  GSLMultiFit;  GSLMultiFit, internal class for implementing GSL non linear least square GSL fitting. More...;  ; class  GSLMultiFitFunctionAdapter;  Class for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: More...;  ; class  GSLMultiFitFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinDerivFunctionWrapper;  Wrapper for a multi-dimensional function with derivatives used in GSL multidim minimization algorithm. More...;  ; struct  GSLMultiMinFunctionAdapter;  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms. More...;  ; class  GSLMultiMinFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinimizer;  GSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives. More...;  ; class  GSLMultiRootBaseSolver;  GSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solver not using derivatives) and GSLMUltiRootDerivSolver (solver using derivatives) More...;  ; class  GSLMultiRootDerivFunctionWrapper;  wrapper to a multi-dim function with derivatives for multi roots algorithm More...;  ; class  GSLMultiRootDerivSolver;  GSLMultiRootDerivSolver, internal class for implementing GSL multi-root finders using derivatives. More...;  ; class  GSLMultiRootFinder;  Class for Multidimensional root finding algorithms bassed on GSL. More...;  ; clas",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:11984,Modifiability,adapt,adapting,11984,"  ; class  GSLMultiMinFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinimizer;  GSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives. More...;  ; class  GSLMultiRootBaseSolver;  GSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solver not using derivatives) and GSLMUltiRootDerivSolver (solver using derivatives) More...;  ; class  GSLMultiRootDerivFunctionWrapper;  wrapper to a multi-dim function with derivatives for multi roots algorithm More...;  ; class  GSLMultiRootDerivSolver;  GSLMultiRootDerivSolver, internal class for implementing GSL multi-root finders using derivatives. More...;  ; class  GSLMultiRootFinder;  Class for Multidimensional root finding algorithms bassed on GSL. More...;  ; class  GSLMultiRootFunctionAdapter;  Class for adapting a C++ functor class to C function pointers used by GSL MultiRoot Algorithm The templated C++ function class must implement: More...;  ; class  GSLMultiRootFunctionWrapper;  wrapper to a multi-dim function without derivatives for multi roots algorithm More...;  ; class  GSLMultiRootSolver;  GSLMultiRootSolver, internal class for implementing GSL multi-root finders not using derivatives. More...;  ; class  GSLNLSMinimizer;  GSLNLSMinimizer class for Non Linear Least Square fitting It Uses the Levemberg-Marquardt algorithm from GSL Non Linear Least Square fitting. More...;  ; class  GSLPlainIntegrationWorkspace;  ; class  GSLQRngNiederreiter2;  Niederreiter generator gsl_qrng_niederreiter_2 from here More...;  ; class  GSLQRngSobol;  Sobol generator gsl_qrng_sobol from here More...;  ; class  GSLQRngWrapper;  GSLQRngWrapper class to wrap gsl_qrng structure. More...;  ; class  GSLQuasiRandomEngine;  GSLQuasiRandomEngine Base class for all GSL quasi random engines, normally user instantiate the derived classes which creates",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:17979,Modifiability,config,configuration,17979,"erical methods for one-dimensional minimization. More...;  ; class  IntegrandTransform;  Auxiliary inner class for mapping infinite and semi-infinite integrals. More...;  ; class  IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  IntegratorOneDim;  User Class for performing numerical integration of a function in one dimension. More...;  ; class  IntegratorOneDimOptions;  Numerical one dimensional integration options. More...;  ; class  Interpolator;  Class for performing function interpolation of points. More...;  ; class  Inverter;  Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  Inverter< 0 >;  Inverter<0>. More...;  ; class  Inverter< 1 >;  1x1 matrix inversion \(a_{11} \to 1/a_{11}\) More...;  ; class  Inverter< 2 >;  2x2 matrix inversion using Cramers rule. More...;  ; class  IOptions;  Generic interface for defining configuration options of a numerical algorithm. More...;  ; class  IParametricFunctionMultiDimTempl;  IParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricFunctionOneDim;  Specialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricGradFunctionMultiDimTempl;  Interface (abstract class) for parametric gradient multi-dimensional functions providing in addition to function evaluation with respect to the coordinates also the gradient with respect to the parameters, via the method ParameterGradient. More...;  ; class  IParametricGradFunctionOneDim;  Interface (abstract class) for parametric one-dimensional gradient functions providing in addition to function evaluation with respect t",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:21096,Modifiability,variab,variables,21096,"N This class is a template on the contained type and on the symmetric matrix size, N. More...;  ; class  MatrixMulOp;  Class for Matrix-Matrix multiplication. More...;  ; class  MersenneTwisterEngine;  Random number generator class based on M. More...;  ; struct  meta_col_dot;  ; struct  meta_col_dot< 0 >;  ; struct  meta_dot;  ; struct  meta_dot< 0 >;  ; struct  meta_mag;  ; struct  meta_mag< 0 >;  ; struct  meta_matrix_dot;  ; struct  meta_matrix_dot< 0 >;  ; struct  meta_row_dot;  ; struct  meta_row_dot< 0 >;  ; class  Minimizer;  Abstract Minimizer class, defining the interface for the various minimizer (like Minuit2, Minuit, GSL, etc..) in ROOT. More...;  ; class  MinimizerOptions;  Minimizer options. More...;  ; class  MinimizerVariableTransformation;  Base class for MinimizerVariable transformations defining the functions to deal with bounded parameters. More...;  ; class  MinimTransformFunction;  MinimTransformFunction class to perform a transformations on the variables to deal with fixed or limited variables (support both double and single bounds) The class manages the passed function pointer. More...;  ; class  MinimTransformVariable;  MinimTransformVariable class Contains meta information of the variables such as bounds, fix flags and deals with transformation of the variable The class does not contain the values and the step size (error) of the variable This is an internal class used by the MinimTransformFunction class. More...;  ; class  MinOp;  Subtraction Operation Class. More...;  ; class  Minus;  Unary Minus Operation Class. More...;  ; struct  MinusEquals;  Evaluate the expression performing a -= operation Need to check whether creating a temporary object with the expression result (like in op: A -= A * B ) More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Specialization for symmetrix -= general : NOT Allowed operation. More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:21136,Modifiability,variab,variables,21136,"N This class is a template on the contained type and on the symmetric matrix size, N. More...;  ; class  MatrixMulOp;  Class for Matrix-Matrix multiplication. More...;  ; class  MersenneTwisterEngine;  Random number generator class based on M. More...;  ; struct  meta_col_dot;  ; struct  meta_col_dot< 0 >;  ; struct  meta_dot;  ; struct  meta_dot< 0 >;  ; struct  meta_mag;  ; struct  meta_mag< 0 >;  ; struct  meta_matrix_dot;  ; struct  meta_matrix_dot< 0 >;  ; struct  meta_row_dot;  ; struct  meta_row_dot< 0 >;  ; class  Minimizer;  Abstract Minimizer class, defining the interface for the various minimizer (like Minuit2, Minuit, GSL, etc..) in ROOT. More...;  ; class  MinimizerOptions;  Minimizer options. More...;  ; class  MinimizerVariableTransformation;  Base class for MinimizerVariable transformations defining the functions to deal with bounded parameters. More...;  ; class  MinimTransformFunction;  MinimTransformFunction class to perform a transformations on the variables to deal with fixed or limited variables (support both double and single bounds) The class manages the passed function pointer. More...;  ; class  MinimTransformVariable;  MinimTransformVariable class Contains meta information of the variables such as bounds, fix flags and deals with transformation of the variable The class does not contain the values and the step size (error) of the variable This is an internal class used by the MinimTransformFunction class. More...;  ; class  MinOp;  Subtraction Operation Class. More...;  ; class  Minus;  Unary Minus Operation Class. More...;  ; struct  MinusEquals;  Evaluate the expression performing a -= operation Need to check whether creating a temporary object with the expression result (like in op: A -= A * B ) More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Specialization for symmetrix -= general : NOT Allowed operation. More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:21339,Modifiability,variab,variables,21339,"ta_col_dot< 0 >;  ; struct  meta_dot;  ; struct  meta_dot< 0 >;  ; struct  meta_mag;  ; struct  meta_mag< 0 >;  ; struct  meta_matrix_dot;  ; struct  meta_matrix_dot< 0 >;  ; struct  meta_row_dot;  ; struct  meta_row_dot< 0 >;  ; class  Minimizer;  Abstract Minimizer class, defining the interface for the various minimizer (like Minuit2, Minuit, GSL, etc..) in ROOT. More...;  ; class  MinimizerOptions;  Minimizer options. More...;  ; class  MinimizerVariableTransformation;  Base class for MinimizerVariable transformations defining the functions to deal with bounded parameters. More...;  ; class  MinimTransformFunction;  MinimTransformFunction class to perform a transformations on the variables to deal with fixed or limited variables (support both double and single bounds) The class manages the passed function pointer. More...;  ; class  MinimTransformVariable;  MinimTransformVariable class Contains meta information of the variables such as bounds, fix flags and deals with transformation of the variable The class does not contain the values and the step size (error) of the variable This is an internal class used by the MinimTransformFunction class. More...;  ; class  MinOp;  Subtraction Operation Class. More...;  ; class  Minus;  Unary Minus Operation Class. More...;  ; struct  MinusEquals;  Evaluate the expression performing a -= operation Need to check whether creating a temporary object with the expression result (like in op: A -= A * B ) More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Specialization for symmetrix -= general : NOT Allowed operation. More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Specialization for symmetric matrices. More...;  ; struct  MiserParameters;  Structure collecting parameters for MISER multidimensional integration. More...;  ; class  MixMaxEngine;  MixMaxEngine is a wrapper class for the MIXMAX Random number generator. More...;  ; class  MixMaxEngineI",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:21412,Modifiability,variab,variable,21412,"ta_col_dot< 0 >;  ; struct  meta_dot;  ; struct  meta_dot< 0 >;  ; struct  meta_mag;  ; struct  meta_mag< 0 >;  ; struct  meta_matrix_dot;  ; struct  meta_matrix_dot< 0 >;  ; struct  meta_row_dot;  ; struct  meta_row_dot< 0 >;  ; class  Minimizer;  Abstract Minimizer class, defining the interface for the various minimizer (like Minuit2, Minuit, GSL, etc..) in ROOT. More...;  ; class  MinimizerOptions;  Minimizer options. More...;  ; class  MinimizerVariableTransformation;  Base class for MinimizerVariable transformations defining the functions to deal with bounded parameters. More...;  ; class  MinimTransformFunction;  MinimTransformFunction class to perform a transformations on the variables to deal with fixed or limited variables (support both double and single bounds) The class manages the passed function pointer. More...;  ; class  MinimTransformVariable;  MinimTransformVariable class Contains meta information of the variables such as bounds, fix flags and deals with transformation of the variable The class does not contain the values and the step size (error) of the variable This is an internal class used by the MinimTransformFunction class. More...;  ; class  MinOp;  Subtraction Operation Class. More...;  ; class  Minus;  Unary Minus Operation Class. More...;  ; struct  MinusEquals;  Evaluate the expression performing a -= operation Need to check whether creating a temporary object with the expression result (like in op: A -= A * B ) More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Specialization for symmetrix -= general : NOT Allowed operation. More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Specialization for symmetric matrices. More...;  ; struct  MiserParameters;  Structure collecting parameters for MISER multidimensional integration. More...;  ; class  MixMaxEngine;  MixMaxEngine is a wrapper class for the MIXMAX Random number generator. More...;  ; class  MixMaxEngineI",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:21492,Modifiability,variab,variable,21492,"ta_col_dot< 0 >;  ; struct  meta_dot;  ; struct  meta_dot< 0 >;  ; struct  meta_mag;  ; struct  meta_mag< 0 >;  ; struct  meta_matrix_dot;  ; struct  meta_matrix_dot< 0 >;  ; struct  meta_row_dot;  ; struct  meta_row_dot< 0 >;  ; class  Minimizer;  Abstract Minimizer class, defining the interface for the various minimizer (like Minuit2, Minuit, GSL, etc..) in ROOT. More...;  ; class  MinimizerOptions;  Minimizer options. More...;  ; class  MinimizerVariableTransformation;  Base class for MinimizerVariable transformations defining the functions to deal with bounded parameters. More...;  ; class  MinimTransformFunction;  MinimTransformFunction class to perform a transformations on the variables to deal with fixed or limited variables (support both double and single bounds) The class manages the passed function pointer. More...;  ; class  MinimTransformVariable;  MinimTransformVariable class Contains meta information of the variables such as bounds, fix flags and deals with transformation of the variable The class does not contain the values and the step size (error) of the variable This is an internal class used by the MinimTransformFunction class. More...;  ; class  MinOp;  Subtraction Operation Class. More...;  ; class  Minus;  Unary Minus Operation Class. More...;  ; struct  MinusEquals;  Evaluate the expression performing a -= operation Need to check whether creating a temporary object with the expression result (like in op: A -= A * B ) More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Specialization for symmetrix -= general : NOT Allowed operation. More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Specialization for symmetric matrices. More...;  ; struct  MiserParameters;  Structure collecting parameters for MISER multidimensional integration. More...;  ; class  MixMaxEngine;  MixMaxEngine is a wrapper class for the MIXMAX Random number generator. More...;  ; class  MixMaxEngineI",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:30133,Modifiability,variab,variables,30133,"s. More...;  ; class  Rotation3D;  Rotation class with the (3D) rotation represented by a 3x3 orthogonal matrix. More...;  ; class  RotationX;  Rotation class representing a 3D rotation about the X axis by the angle of rotation. More...;  ; class  RotationY;  Rotation class representing a 3D rotation about the Y axis by the angle of rotation. More...;  ; class  RotationZ;  Rotation class representing a 3D rotation about the Z axis by the angle of rotation. More...;  ; class  RotationZYX;  Rotation class with the (3D) rotation represented by angles describing first a rotation of an angle phi (yaw) about the Z axis, followed by a rotation of an angle theta (pitch) about the Y axis, followed by a third rotation of an angle psi (roll) about the X axis. More...;  ; struct  RowOffsets;  Static structure to keep the conversion from (i,j) to offsets in the storage data for a symmetric matrix. More...;  ; class  SDeterminant;  Dsfact. More...;  ; class  SinVariableTransformation;  Sin Transformation class for dealing with double bounded variables. More...;  ; class  SInverter;  Dsinv. More...;  ; struct  SkipFunction;  ; struct  SkipFunction< 0 >;  ; class  SMatrix;  SMatrix: a generic fixed size D1 x D2 Matrix class. More...;  ; struct  SMatrixIdentity;  ; struct  SMatrixNoInit;  ; class  Sqr;  Unary Square Operation Class. More...;  ; class  Sqrt;  Unary Square Root Operation Class. More...;  ; class  SqrtLowVariableTransformation;  Sqrt Transformation class for dealing with lower bounded variables. More...;  ; class  SqrtUpVariableTransformation;  Sqrt Transformation class for dealing with upper bounded variables. More...;  ; class  StdEngine;  Class to wrap engines from the C++ standard random library in the ROOT Random interface. More...;  ; struct  StdEngineType;  ; struct  StdEngineType< std::knuth_b >;  ; struct  StdEngineType< std::minstd_rand >;  ; struct  StdEngineType< std::mt19937 >;  ; struct  StdEngineType< std::mt19937_64 >;  ; struct  StdEngineType< std::rand",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:30596,Modifiability,variab,variables,30596,"More...;  ; class  RotationZYX;  Rotation class with the (3D) rotation represented by angles describing first a rotation of an angle phi (yaw) about the Z axis, followed by a rotation of an angle theta (pitch) about the Y axis, followed by a third rotation of an angle psi (roll) about the X axis. More...;  ; struct  RowOffsets;  Static structure to keep the conversion from (i,j) to offsets in the storage data for a symmetric matrix. More...;  ; class  SDeterminant;  Dsfact. More...;  ; class  SinVariableTransformation;  Sin Transformation class for dealing with double bounded variables. More...;  ; class  SInverter;  Dsinv. More...;  ; struct  SkipFunction;  ; struct  SkipFunction< 0 >;  ; class  SMatrix;  SMatrix: a generic fixed size D1 x D2 Matrix class. More...;  ; struct  SMatrixIdentity;  ; struct  SMatrixNoInit;  ; class  Sqr;  Unary Square Operation Class. More...;  ; class  Sqrt;  Unary Square Root Operation Class. More...;  ; class  SqrtLowVariableTransformation;  Sqrt Transformation class for dealing with lower bounded variables. More...;  ; class  SqrtUpVariableTransformation;  Sqrt Transformation class for dealing with upper bounded variables. More...;  ; class  StdEngine;  Class to wrap engines from the C++ standard random library in the ROOT Random interface. More...;  ; struct  StdEngineType;  ; struct  StdEngineType< std::knuth_b >;  ; struct  StdEngineType< std::minstd_rand >;  ; struct  StdEngineType< std::mt19937 >;  ; struct  StdEngineType< std::mt19937_64 >;  ; struct  StdEngineType< std::random_device >;  ; struct  StdEngineType< std::ranlux24 >;  ; struct  StdEngineType< std::ranlux48 >;  ; class  StdRandomEngine;  ; class  SVector;  SVector: a generic fixed size Vector class. More...;  ; class  TDataPoint;  ; class  TDataPointN;  ; class  TensorMulOp;  Class for Tensor Multiplication (outer product) of two vectors giving a matrix. More...;  ; class  TRandomEngine;  ; class  TransposeOp;  Class for Transpose Operations. More...;  ; struct  Tra",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:30714,Modifiability,variab,variables,30714,"n of an angle phi (yaw) about the Z axis, followed by a rotation of an angle theta (pitch) about the Y axis, followed by a third rotation of an angle psi (roll) about the X axis. More...;  ; struct  RowOffsets;  Static structure to keep the conversion from (i,j) to offsets in the storage data for a symmetric matrix. More...;  ; class  SDeterminant;  Dsfact. More...;  ; class  SinVariableTransformation;  Sin Transformation class for dealing with double bounded variables. More...;  ; class  SInverter;  Dsinv. More...;  ; struct  SkipFunction;  ; struct  SkipFunction< 0 >;  ; class  SMatrix;  SMatrix: a generic fixed size D1 x D2 Matrix class. More...;  ; struct  SMatrixIdentity;  ; struct  SMatrixNoInit;  ; class  Sqr;  Unary Square Operation Class. More...;  ; class  Sqrt;  Unary Square Root Operation Class. More...;  ; class  SqrtLowVariableTransformation;  Sqrt Transformation class for dealing with lower bounded variables. More...;  ; class  SqrtUpVariableTransformation;  Sqrt Transformation class for dealing with upper bounded variables. More...;  ; class  StdEngine;  Class to wrap engines from the C++ standard random library in the ROOT Random interface. More...;  ; struct  StdEngineType;  ; struct  StdEngineType< std::knuth_b >;  ; struct  StdEngineType< std::minstd_rand >;  ; struct  StdEngineType< std::mt19937 >;  ; struct  StdEngineType< std::mt19937_64 >;  ; struct  StdEngineType< std::random_device >;  ; struct  StdEngineType< std::ranlux24 >;  ; struct  StdEngineType< std::ranlux48 >;  ; class  StdRandomEngine;  ; class  SVector;  SVector: a generic fixed size Vector class. More...;  ; class  TDataPoint;  ; class  TDataPointN;  ; class  TensorMulOp;  Class for Tensor Multiplication (outer product) of two vectors giving a matrix. More...;  ; class  TRandomEngine;  ; class  TransposeOp;  Class for Transpose Operations. More...;  ; struct  TranspPolicy;  matrix transpose policy More...;  ; struct  TranspPolicy< T, D1, D2, MatRepSym< T, D1 > >;  ; class  Unary",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:34646,Modifiability,variab,variables,34646,"tion interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  WrappedMemMultiFunction;  ; class  WrappedMultiFunction;  Template class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. More...;  ; class  WrappedMultiTF1Templ;  Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm. More...;  ; class  WrappedParamFunction;  WrappedParamFunction class to wrap any multi-dimensional function object implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values. More...;  ; class  WrappedParamFunctionGen;  WrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters. More...;  ; class  WrappedTF1;  Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime. More...;  . Typedefs; typedef TRandomEngine DefaultEngineType;  Documentation for the RandomFunction class. ;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGenFunction > FitMethodFunction;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGradFunction > FitMethodGradFunction;  ; typedef double(* FreeFunctionPtr) (double);  ; typedef double(* FreeMultiFunctionPtr) (const double *);  ; typedef double(* FreeParamMultiFunctionPtr) (const double *, const double *);  ; typedef void(* GSLFdfPointer) (double, void *, double *, double *);  ; typedef double(* GSLFuncPointer) (double,",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:35712,Modifiability,adapt,adapting,35712,"Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime. More...;  . Typedefs; typedef TRandomEngine DefaultEngineType;  Documentation for the RandomFunction class. ;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGenFunction > FitMethodFunction;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGradFunction > FitMethodGradFunction;  ; typedef double(* FreeFunctionPtr) (double);  ; typedef double(* FreeMultiFunctionPtr) (const double *);  ; typedef double(* FreeParamMultiFunctionPtr) (const double *, const double *);  ; typedef void(* GSLFdfPointer) (double, void *, double *, double *);  ; typedef double(* GSLFuncPointer) (double, void *);  Function pointer corresponding to gsl_function signature. ;  ; typedef double(* GSLMonteFuncPointer) (double *, size_t, void *);  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MonteCarlo integration algorithms. ;  ; typedef void(* GSLMultiFitDfPointer) (const gsl_vector *, void *, gsl_matrix *);  ; typedef void(* GSLMultiFitFdfPointer) (const gsl_vector *, void *, gsl_vector *, gsl_matrix *);  ; typedef double(* GSLMultiFitFPointer) (const gsl_vector *, void *, gsl_vector *);  ; typedef void(* GSLMultiMinDfPointer) (const gsl_vector *, void *, gsl_vector *);  ; typedef void(* GSLMultiMinFdfPointer) (const gsl_vector *, void *, double *, gsl_vector *);  ; typedef double(* GSLMultiMinFuncPointer) (const gsl_vector *, void *);  ; typedef void(* GSLMultiRootDfPointer) (const gsl_vector *, void *, gsl_matrix *);  ; typedef void(* GSLMultiRootFdfPointer) (const gsl_vector *, void *, gsl_vector *, gsl_matrix *);  ; typedef double(* GSLMultiRootFPointer) (const gsl_vector *, void *, gsl_vector *);  ; typedef GSLRngRanLuxS1 GSLRngRanLux1;  ; typedef GSLRngRanLuxS2 GSLRngRanLux2;  ; typedef GSLRngRanLuxD",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:48590,Modifiability,variab,variable,48590,"ector;  LorentzVector based on x,y,x,t (or px,py,pz,E) coordinates in double precision with metric (-,-,-,+) ;  ; typedef LorentzVector< PxPyPzE4D< float > > XYZTVectorF;  LorentzVector based on x,y,x,t (or px,py,pz,E) coordinates in float precision with metric (-,-,-,+) ;  ; typedef DisplacementVector3D< Cartesian3D< double >, DefaultCoordinateSystemTag > XYZVector;  3D Vector based on the cartesian coordinates x,y,z in double precision ;  ; typedef XYZVector XYZVectorD;  ; typedef DisplacementVector3D< Cartesian3D< float >, DefaultCoordinateSystemTag > XYZVectorF;  3D Vector based on the cartesian coordinates x,y,z in single precision ;  . Enumerations; enum  EGSLMinimizerType { ;   kConjugateFR; , kConjugatePR; , kVectorBFGS; , kVectorBFGS2; , ;   kSteepestDescent. };  enumeration specifying the types of GSL minimizers More...;  ; enum  EMinimVariableType { ;   kDefault; , kFix; , kBounds; , kLowBound; , ;   kUpBound. };  Enumeration describing the status of the variable The enumeration are used in the minimizer classes to categorize the variables. More...;  ; enum  ERotation3DMatrixIndex { ;   kXX = 0; , kXY = 1; , kXZ = 2; , kYX = 3; , ;   kYY = 4; , kYZ = 5; , kZX = 6; , kZY = 7; , ;   kZZ = 8. };  . Functions; void adkTestStat (double *adk, const std::vector< std::vector< double > > &samples, const std::vector< double > &zstar);  ; double beta_cdf (double x, double a, double b);  Cumulative distribution function of the beta distribution Upper tail of the integral of the beta_pdf. ;  ; double beta_cdf_c (double x, double a, double b);  Complement of the cumulative distribution function of the beta distribution. ;  ; double binomial_cdf (unsigned int k, double p, unsigned int n);  Cumulative distribution function of the Binomial distribution Lower tail of the integral of the binomial_pdf. ;  ; double binomial_cdf_c (unsigned int k, double p, unsigned int n);  Complement of the cumulative distribution function of the Binomial distribution. ;  ; double breitwigner",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:48667,Modifiability,variab,variables,48667,"ector;  LorentzVector based on x,y,x,t (or px,py,pz,E) coordinates in double precision with metric (-,-,-,+) ;  ; typedef LorentzVector< PxPyPzE4D< float > > XYZTVectorF;  LorentzVector based on x,y,x,t (or px,py,pz,E) coordinates in float precision with metric (-,-,-,+) ;  ; typedef DisplacementVector3D< Cartesian3D< double >, DefaultCoordinateSystemTag > XYZVector;  3D Vector based on the cartesian coordinates x,y,z in double precision ;  ; typedef XYZVector XYZVectorD;  ; typedef DisplacementVector3D< Cartesian3D< float >, DefaultCoordinateSystemTag > XYZVectorF;  3D Vector based on the cartesian coordinates x,y,z in single precision ;  . Enumerations; enum  EGSLMinimizerType { ;   kConjugateFR; , kConjugatePR; , kVectorBFGS; , kVectorBFGS2; , ;   kSteepestDescent. };  enumeration specifying the types of GSL minimizers More...;  ; enum  EMinimVariableType { ;   kDefault; , kFix; , kBounds; , kLowBound; , ;   kUpBound. };  Enumeration describing the status of the variable The enumeration are used in the minimizer classes to categorize the variables. More...;  ; enum  ERotation3DMatrixIndex { ;   kXX = 0; , kXY = 1; , kXZ = 2; , kYX = 3; , ;   kYY = 4; , kYZ = 5; , kZX = 6; , kZY = 7; , ;   kZZ = 8. };  . Functions; void adkTestStat (double *adk, const std::vector< std::vector< double > > &samples, const std::vector< double > &zstar);  ; double beta_cdf (double x, double a, double b);  Cumulative distribution function of the beta distribution Upper tail of the integral of the beta_pdf. ;  ; double beta_cdf_c (double x, double a, double b);  Complement of the cumulative distribution function of the beta distribution. ;  ; double binomial_cdf (unsigned int k, double p, unsigned int n);  Cumulative distribution function of the Binomial distribution Lower tail of the integral of the binomial_pdf. ;  ; double binomial_cdf_c (unsigned int k, double p, unsigned int n);  Complement of the cumulative distribution function of the Binomial distribution. ;  ; double breitwigner",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:115543,Modifiability,coupling,coupling,115543,"im\phi)\)). ;  ; double sph_neumann (unsigned n, double x);  Calculates the spherical Bessel functions of the second kind (also called irregular spherical Bessel functions or spherical Neumann functions). ;  ; double airy_Ai (double x);  Calculates the Airy function Ai. ;  ; double airy_Bi (double x);  Calculates the Airy function Bi. ;  ; double airy_Ai_deriv (double x);  Calculates the derivative of the Airy function Ai. ;  ; double airy_Bi_deriv (double x);  Calculates the derivative of the Airy function Bi. ;  ; double airy_zero_Ai (unsigned int s);  Calculates the zeroes of the Airy function Ai. ;  ; double airy_zero_Bi (unsigned int s);  Calculates the zeroes of the Airy function Bi. ;  ; double airy_zero_Ai_deriv (unsigned int s);  Calculates the zeroes of the derivative of the Airy function Ai. ;  ; double airy_zero_Bi_deriv (unsigned int s);  Calculates the zeroes of the derivative of the Airy function Bi. ;  ; double wigner_3j (int two_ja, int two_jb, int two_jc, int two_ma, int two_mb, int two_mc);  Calculates the Wigner 3j coupling coefficients. ;  ; double wigner_6j (int two_ja, int two_jb, int two_jc, int two_jd, int two_je, int two_jf);  Calculates the Wigner 6j coupling coefficients. ;  ; double wigner_9j (int two_ja, int two_jb, int two_jc, int two_jd, int two_je, int two_jf, int two_jg, int two_jh, int two_ji);  Calculates the Wigner 9j coupling coefficients. ;  ; double digamma (double x);  . Variables; static const double eu = 0.577215664901532860606;  ; double gDefaultAbsTolerance = 1.E-6;  ; int gDefaultMaxIter = 100;  ; static int gDefaultNpx = 100;  ; static int gDefaultNpx = 100;  ; static int gDefaultNSearch = 10;  ; static int gDefaultNSearch = 10;  ; double gDefaultRelTolerance = 1.E-10;  ; const ROOT::Math::IMultiGenFunction * gFunction;  function wrapper for the function to be minimized ;  ; const ROOT::Math::IMultiGradFunction * gGradFunction;  function wrapper for the gradient of the function to be minimized ;  ; int gNCalls = 0;  inte",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:115688,Modifiability,coupling,coupling,115688,"spherical Bessel functions or spherical Neumann functions). ;  ; double airy_Ai (double x);  Calculates the Airy function Ai. ;  ; double airy_Bi (double x);  Calculates the Airy function Bi. ;  ; double airy_Ai_deriv (double x);  Calculates the derivative of the Airy function Ai. ;  ; double airy_Bi_deriv (double x);  Calculates the derivative of the Airy function Bi. ;  ; double airy_zero_Ai (unsigned int s);  Calculates the zeroes of the Airy function Ai. ;  ; double airy_zero_Bi (unsigned int s);  Calculates the zeroes of the Airy function Bi. ;  ; double airy_zero_Ai_deriv (unsigned int s);  Calculates the zeroes of the derivative of the Airy function Ai. ;  ; double airy_zero_Bi_deriv (unsigned int s);  Calculates the zeroes of the derivative of the Airy function Bi. ;  ; double wigner_3j (int two_ja, int two_jb, int two_jc, int two_ma, int two_mb, int two_mc);  Calculates the Wigner 3j coupling coefficients. ;  ; double wigner_6j (int two_ja, int two_jb, int two_jc, int two_jd, int two_je, int two_jf);  Calculates the Wigner 6j coupling coefficients. ;  ; double wigner_9j (int two_ja, int two_jb, int two_jc, int two_jd, int two_je, int two_jf, int two_jg, int two_jh, int two_ji);  Calculates the Wigner 9j coupling coefficients. ;  ; double digamma (double x);  . Variables; static const double eu = 0.577215664901532860606;  ; double gDefaultAbsTolerance = 1.E-6;  ; int gDefaultMaxIter = 100;  ; static int gDefaultNpx = 100;  ; static int gDefaultNpx = 100;  ; static int gDefaultNSearch = 10;  ; static int gDefaultNSearch = 10;  ; double gDefaultRelTolerance = 1.E-10;  ; const ROOT::Math::IMultiGenFunction * gFunction;  function wrapper for the function to be minimized ;  ; const ROOT::Math::IMultiGradFunction * gGradFunction;  function wrapper for the gradient of the function to be minimized ;  ; int gNCalls = 0;  integer for the number of function calls ;  ; static const double kSqrt2 = 1.41421356237309515;  . Typedef Documentation. ◆ FitMethodFunction. typede",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:115869,Modifiability,coupling,coupling,115869,"ulates the Airy function Bi. ;  ; double airy_Ai_deriv (double x);  Calculates the derivative of the Airy function Ai. ;  ; double airy_Bi_deriv (double x);  Calculates the derivative of the Airy function Bi. ;  ; double airy_zero_Ai (unsigned int s);  Calculates the zeroes of the Airy function Ai. ;  ; double airy_zero_Bi (unsigned int s);  Calculates the zeroes of the Airy function Bi. ;  ; double airy_zero_Ai_deriv (unsigned int s);  Calculates the zeroes of the derivative of the Airy function Ai. ;  ; double airy_zero_Bi_deriv (unsigned int s);  Calculates the zeroes of the derivative of the Airy function Bi. ;  ; double wigner_3j (int two_ja, int two_jb, int two_jc, int two_ma, int two_mb, int two_mc);  Calculates the Wigner 3j coupling coefficients. ;  ; double wigner_6j (int two_ja, int two_jb, int two_jc, int two_jd, int two_je, int two_jf);  Calculates the Wigner 6j coupling coefficients. ;  ; double wigner_9j (int two_ja, int two_jb, int two_jc, int two_jd, int two_je, int two_jf, int two_jg, int two_jh, int two_ji);  Calculates the Wigner 9j coupling coefficients. ;  ; double digamma (double x);  . Variables; static const double eu = 0.577215664901532860606;  ; double gDefaultAbsTolerance = 1.E-6;  ; int gDefaultMaxIter = 100;  ; static int gDefaultNpx = 100;  ; static int gDefaultNpx = 100;  ; static int gDefaultNSearch = 10;  ; static int gDefaultNSearch = 10;  ; double gDefaultRelTolerance = 1.E-10;  ; const ROOT::Math::IMultiGenFunction * gFunction;  function wrapper for the function to be minimized ;  ; const ROOT::Math::IMultiGradFunction * gGradFunction;  function wrapper for the gradient of the function to be minimized ;  ; int gNCalls = 0;  integer for the number of function calls ;  ; static const double kSqrt2 = 1.41421356237309515;  . Typedef Documentation. ◆ FitMethodFunction. typedef BasicFitMethodFunction< ROOT::Math::IMultiGenFunction > ROOT::Math::FitMethodFunction. Definition at line 43 of file Fitter.h. ◆ FitMethodGradFunction. typedef B",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:142430,Modifiability,variab,variable,142430," LorentzVector page. ; Definition at line 58 of file Vector4Dfwd.h. ◆ XYZVector. typedef DisplacementVector3D< Cartesian3D<double>, DefaultCoordinateSystemTag > ROOT::Math::XYZVector. 3D Vector based on the cartesian coordinates x,y,z in double precision ; To use it add the line #include <Vector3D.h>; See the documentation on the DisplacementVector3D page. ; Definition at line 44 of file Vector3Dfwd.h. ◆ XYZVectorD. typedef XYZVector ROOT::Math::XYZVectorD. Definition at line 53 of file Vector3Dfwd.h. ◆ XYZVectorF. typedef DisplacementVector3D< Cartesian3D<float>, DefaultCoordinateSystemTag > ROOT::Math::XYZVectorF. 3D Vector based on the cartesian coordinates x,y,z in single precision ; To use it add the line #include <Vector3D.h>; See the documentation on the DisplacementVector3D page. ; Definition at line 52 of file Vector3Dfwd.h. Enumeration Type Documentation. ◆ EMinimVariableType. enum ROOT::Math::EMinimVariableType. Enumeration describing the status of the variable The enumeration are used in the minimizer classes to categorize the variables. . EnumeratorkDefault free variable (unlimited) . kFix fixed variable . kBounds variable has two bounds . kLowBound variable has a lower bound . kUpBound variable has an upper bounds . Definition at line 27 of file MinimTransformVariable.h. ◆ ERotation3DMatrixIndex. enum ROOT::Math::ERotation3DMatrixIndex. EnumeratorkXX ; kXY ; kXZ ; kYX ; kYY ; kYZ ; kZX ; kZY ; kZZ . Definition at line 64 of file AxisAngle.cxx. Function Documentation. ◆ adkTestStat(). void ROOT::Math::adkTestStat ; (; double * ; adk, . const std::vector< std::vector< double > > & ; samples, . const std::vector< double > & ; zstar . ). Definition at line 546 of file GoFTest.cxx. ◆ Chebyshev0(). double ROOT::Math::Chebyshev0 ; (; double ; , . double ; c0 . ). inline . Definition at line 57 of file ChebyshevPol.h. ◆ Chebyshev1(). double ROOT::Math::Chebyshev1 ; (; double ; x, . double ; c0, . double ; c1 . ). inline . Definition at line 60 of file Chebyshev",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:142507,Modifiability,variab,variables,142507," LorentzVector page. ; Definition at line 58 of file Vector4Dfwd.h. ◆ XYZVector. typedef DisplacementVector3D< Cartesian3D<double>, DefaultCoordinateSystemTag > ROOT::Math::XYZVector. 3D Vector based on the cartesian coordinates x,y,z in double precision ; To use it add the line #include <Vector3D.h>; See the documentation on the DisplacementVector3D page. ; Definition at line 44 of file Vector3Dfwd.h. ◆ XYZVectorD. typedef XYZVector ROOT::Math::XYZVectorD. Definition at line 53 of file Vector3Dfwd.h. ◆ XYZVectorF. typedef DisplacementVector3D< Cartesian3D<float>, DefaultCoordinateSystemTag > ROOT::Math::XYZVectorF. 3D Vector based on the cartesian coordinates x,y,z in single precision ; To use it add the line #include <Vector3D.h>; See the documentation on the DisplacementVector3D page. ; Definition at line 52 of file Vector3Dfwd.h. Enumeration Type Documentation. ◆ EMinimVariableType. enum ROOT::Math::EMinimVariableType. Enumeration describing the status of the variable The enumeration are used in the minimizer classes to categorize the variables. . EnumeratorkDefault free variable (unlimited) . kFix fixed variable . kBounds variable has two bounds . kLowBound variable has a lower bound . kUpBound variable has an upper bounds . Definition at line 27 of file MinimTransformVariable.h. ◆ ERotation3DMatrixIndex. enum ROOT::Math::ERotation3DMatrixIndex. EnumeratorkXX ; kXY ; kXZ ; kYX ; kYY ; kYZ ; kZX ; kZY ; kZZ . Definition at line 64 of file AxisAngle.cxx. Function Documentation. ◆ adkTestStat(). void ROOT::Math::adkTestStat ; (; double * ; adk, . const std::vector< std::vector< double > > & ; samples, . const std::vector< double > & ; zstar . ). Definition at line 546 of file GoFTest.cxx. ◆ Chebyshev0(). double ROOT::Math::Chebyshev0 ; (; double ; , . double ; c0 . ). inline . Definition at line 57 of file ChebyshevPol.h. ◆ Chebyshev1(). double ROOT::Math::Chebyshev1 ; (; double ; x, . double ; c0, . double ; c1 . ). inline . Definition at line 60 of file Chebyshev",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:142544,Modifiability,variab,variable,142544,"isplacementVector3D< Cartesian3D<double>, DefaultCoordinateSystemTag > ROOT::Math::XYZVector. 3D Vector based on the cartesian coordinates x,y,z in double precision ; To use it add the line #include <Vector3D.h>; See the documentation on the DisplacementVector3D page. ; Definition at line 44 of file Vector3Dfwd.h. ◆ XYZVectorD. typedef XYZVector ROOT::Math::XYZVectorD. Definition at line 53 of file Vector3Dfwd.h. ◆ XYZVectorF. typedef DisplacementVector3D< Cartesian3D<float>, DefaultCoordinateSystemTag > ROOT::Math::XYZVectorF. 3D Vector based on the cartesian coordinates x,y,z in single precision ; To use it add the line #include <Vector3D.h>; See the documentation on the DisplacementVector3D page. ; Definition at line 52 of file Vector3Dfwd.h. Enumeration Type Documentation. ◆ EMinimVariableType. enum ROOT::Math::EMinimVariableType. Enumeration describing the status of the variable The enumeration are used in the minimizer classes to categorize the variables. . EnumeratorkDefault free variable (unlimited) . kFix fixed variable . kBounds variable has two bounds . kLowBound variable has a lower bound . kUpBound variable has an upper bounds . Definition at line 27 of file MinimTransformVariable.h. ◆ ERotation3DMatrixIndex. enum ROOT::Math::ERotation3DMatrixIndex. EnumeratorkXX ; kXY ; kXZ ; kYX ; kYY ; kYZ ; kZX ; kZY ; kZZ . Definition at line 64 of file AxisAngle.cxx. Function Documentation. ◆ adkTestStat(). void ROOT::Math::adkTestStat ; (; double * ; adk, . const std::vector< std::vector< double > > & ; samples, . const std::vector< double > & ; zstar . ). Definition at line 546 of file GoFTest.cxx. ◆ Chebyshev0(). double ROOT::Math::Chebyshev0 ; (; double ; , . double ; c0 . ). inline . Definition at line 57 of file ChebyshevPol.h. ◆ Chebyshev1(). double ROOT::Math::Chebyshev1 ; (; double ; x, . double ; c0, . double ; c1 . ). inline . Definition at line 60 of file ChebyshevPol.h. ◆ Chebyshev10(). double ROOT::Math::Chebyshev10 ; (; double ; x, . double ; c0, . d",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:142578,Modifiability,variab,variable,142578,"uble>, DefaultCoordinateSystemTag > ROOT::Math::XYZVector. 3D Vector based on the cartesian coordinates x,y,z in double precision ; To use it add the line #include <Vector3D.h>; See the documentation on the DisplacementVector3D page. ; Definition at line 44 of file Vector3Dfwd.h. ◆ XYZVectorD. typedef XYZVector ROOT::Math::XYZVectorD. Definition at line 53 of file Vector3Dfwd.h. ◆ XYZVectorF. typedef DisplacementVector3D< Cartesian3D<float>, DefaultCoordinateSystemTag > ROOT::Math::XYZVectorF. 3D Vector based on the cartesian coordinates x,y,z in single precision ; To use it add the line #include <Vector3D.h>; See the documentation on the DisplacementVector3D page. ; Definition at line 52 of file Vector3Dfwd.h. Enumeration Type Documentation. ◆ EMinimVariableType. enum ROOT::Math::EMinimVariableType. Enumeration describing the status of the variable The enumeration are used in the minimizer classes to categorize the variables. . EnumeratorkDefault free variable (unlimited) . kFix fixed variable . kBounds variable has two bounds . kLowBound variable has a lower bound . kUpBound variable has an upper bounds . Definition at line 27 of file MinimTransformVariable.h. ◆ ERotation3DMatrixIndex. enum ROOT::Math::ERotation3DMatrixIndex. EnumeratorkXX ; kXY ; kXZ ; kYX ; kYY ; kYZ ; kZX ; kZY ; kZZ . Definition at line 64 of file AxisAngle.cxx. Function Documentation. ◆ adkTestStat(). void ROOT::Math::adkTestStat ; (; double * ; adk, . const std::vector< std::vector< double > > & ; samples, . const std::vector< double > & ; zstar . ). Definition at line 546 of file GoFTest.cxx. ◆ Chebyshev0(). double ROOT::Math::Chebyshev0 ; (; double ; , . double ; c0 . ). inline . Definition at line 57 of file ChebyshevPol.h. ◆ Chebyshev1(). double ROOT::Math::Chebyshev1 ; (; double ; x, . double ; c0, . double ; c1 . ). inline . Definition at line 60 of file ChebyshevPol.h. ◆ Chebyshev10(). double ROOT::Math::Chebyshev10 ; (; double ; x, . double ; c0, . double ; c1, . double ; c2, . doubl",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:142597,Modifiability,variab,variable,142597,"emTag > ROOT::Math::XYZVector. 3D Vector based on the cartesian coordinates x,y,z in double precision ; To use it add the line #include <Vector3D.h>; See the documentation on the DisplacementVector3D page. ; Definition at line 44 of file Vector3Dfwd.h. ◆ XYZVectorD. typedef XYZVector ROOT::Math::XYZVectorD. Definition at line 53 of file Vector3Dfwd.h. ◆ XYZVectorF. typedef DisplacementVector3D< Cartesian3D<float>, DefaultCoordinateSystemTag > ROOT::Math::XYZVectorF. 3D Vector based on the cartesian coordinates x,y,z in single precision ; To use it add the line #include <Vector3D.h>; See the documentation on the DisplacementVector3D page. ; Definition at line 52 of file Vector3Dfwd.h. Enumeration Type Documentation. ◆ EMinimVariableType. enum ROOT::Math::EMinimVariableType. Enumeration describing the status of the variable The enumeration are used in the minimizer classes to categorize the variables. . EnumeratorkDefault free variable (unlimited) . kFix fixed variable . kBounds variable has two bounds . kLowBound variable has a lower bound . kUpBound variable has an upper bounds . Definition at line 27 of file MinimTransformVariable.h. ◆ ERotation3DMatrixIndex. enum ROOT::Math::ERotation3DMatrixIndex. EnumeratorkXX ; kXY ; kXZ ; kYX ; kYY ; kYZ ; kZX ; kZY ; kZZ . Definition at line 64 of file AxisAngle.cxx. Function Documentation. ◆ adkTestStat(). void ROOT::Math::adkTestStat ; (; double * ; adk, . const std::vector< std::vector< double > > & ; samples, . const std::vector< double > & ; zstar . ). Definition at line 546 of file GoFTest.cxx. ◆ Chebyshev0(). double ROOT::Math::Chebyshev0 ; (; double ; , . double ; c0 . ). inline . Definition at line 57 of file ChebyshevPol.h. ◆ Chebyshev1(). double ROOT::Math::Chebyshev1 ; (; double ; x, . double ; c0, . double ; c1 . ). inline . Definition at line 60 of file ChebyshevPol.h. ◆ Chebyshev10(). double ROOT::Math::Chebyshev10 ; (; double ; x, . double ; c0, . double ; c1, . double ; c2, . double ; c3, . double ; c4, . dou",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:142633,Modifiability,variab,variable,142633,"ctor based on the cartesian coordinates x,y,z in double precision ; To use it add the line #include <Vector3D.h>; See the documentation on the DisplacementVector3D page. ; Definition at line 44 of file Vector3Dfwd.h. ◆ XYZVectorD. typedef XYZVector ROOT::Math::XYZVectorD. Definition at line 53 of file Vector3Dfwd.h. ◆ XYZVectorF. typedef DisplacementVector3D< Cartesian3D<float>, DefaultCoordinateSystemTag > ROOT::Math::XYZVectorF. 3D Vector based on the cartesian coordinates x,y,z in single precision ; To use it add the line #include <Vector3D.h>; See the documentation on the DisplacementVector3D page. ; Definition at line 52 of file Vector3Dfwd.h. Enumeration Type Documentation. ◆ EMinimVariableType. enum ROOT::Math::EMinimVariableType. Enumeration describing the status of the variable The enumeration are used in the minimizer classes to categorize the variables. . EnumeratorkDefault free variable (unlimited) . kFix fixed variable . kBounds variable has two bounds . kLowBound variable has a lower bound . kUpBound variable has an upper bounds . Definition at line 27 of file MinimTransformVariable.h. ◆ ERotation3DMatrixIndex. enum ROOT::Math::ERotation3DMatrixIndex. EnumeratorkXX ; kXY ; kXZ ; kYX ; kYY ; kYZ ; kZX ; kZY ; kZZ . Definition at line 64 of file AxisAngle.cxx. Function Documentation. ◆ adkTestStat(). void ROOT::Math::adkTestStat ; (; double * ; adk, . const std::vector< std::vector< double > > & ; samples, . const std::vector< double > & ; zstar . ). Definition at line 546 of file GoFTest.cxx. ◆ Chebyshev0(). double ROOT::Math::Chebyshev0 ; (; double ; , . double ; c0 . ). inline . Definition at line 57 of file ChebyshevPol.h. ◆ Chebyshev1(). double ROOT::Math::Chebyshev1 ; (; double ; x, . double ; c0, . double ; c1 . ). inline . Definition at line 60 of file ChebyshevPol.h. ◆ Chebyshev10(). double ROOT::Math::Chebyshev10 ; (; double ; x, . double ; c0, . double ; c1, . double ; c2, . double ; c3, . double ; c4, . double ; c5, . double ; c6, . double ; c",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:142671,Modifiability,variab,variable,142671,"x,y,z in double precision ; To use it add the line #include <Vector3D.h>; See the documentation on the DisplacementVector3D page. ; Definition at line 44 of file Vector3Dfwd.h. ◆ XYZVectorD. typedef XYZVector ROOT::Math::XYZVectorD. Definition at line 53 of file Vector3Dfwd.h. ◆ XYZVectorF. typedef DisplacementVector3D< Cartesian3D<float>, DefaultCoordinateSystemTag > ROOT::Math::XYZVectorF. 3D Vector based on the cartesian coordinates x,y,z in single precision ; To use it add the line #include <Vector3D.h>; See the documentation on the DisplacementVector3D page. ; Definition at line 52 of file Vector3Dfwd.h. Enumeration Type Documentation. ◆ EMinimVariableType. enum ROOT::Math::EMinimVariableType. Enumeration describing the status of the variable The enumeration are used in the minimizer classes to categorize the variables. . EnumeratorkDefault free variable (unlimited) . kFix fixed variable . kBounds variable has two bounds . kLowBound variable has a lower bound . kUpBound variable has an upper bounds . Definition at line 27 of file MinimTransformVariable.h. ◆ ERotation3DMatrixIndex. enum ROOT::Math::ERotation3DMatrixIndex. EnumeratorkXX ; kXY ; kXZ ; kYX ; kYY ; kYZ ; kZX ; kZY ; kZZ . Definition at line 64 of file AxisAngle.cxx. Function Documentation. ◆ adkTestStat(). void ROOT::Math::adkTestStat ; (; double * ; adk, . const std::vector< std::vector< double > > & ; samples, . const std::vector< double > & ; zstar . ). Definition at line 546 of file GoFTest.cxx. ◆ Chebyshev0(). double ROOT::Math::Chebyshev0 ; (; double ; , . double ; c0 . ). inline . Definition at line 57 of file ChebyshevPol.h. ◆ Chebyshev1(). double ROOT::Math::Chebyshev1 ; (; double ; x, . double ; c0, . double ; c1 . ). inline . Definition at line 60 of file ChebyshevPol.h. ◆ Chebyshev10(). double ROOT::Math::Chebyshev10 ; (; double ; x, . double ; c0, . double ; c1, . double ; c2, . double ; c3, . double ; c4, . double ; c5, . double ; c6, . double ; c7, . double ; c8, . double ; c9, . doub",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:4215,Performance,perform,performing,4215,"ass  BasicMinimizer;  Base Minimizer class, which defines the basic functionality of various minimizer implementations (apart from Minuit and Minuit2) It provides support for storing parameter values, step size, parameter transformation etc. More...;  ; class  BinaryOp;  BinaryOperation class A class representing binary operators in the parse tree. More...;  ; class  BinaryOpCopyL;  Binary Operation class with value storage for the left argument. More...;  ; class  BinaryOpCopyR;  Binary Operation class with value storage for the right argument. More...;  ; class  Boost;  Lorentz boost class with the (4D) transformation represented internally by a 4x4 orthosymplectic matrix. More...;  ; class  BoostX;  Class representing a Lorentz Boost along the X axis, by beta. More...;  ; class  BoostY;  Class representing a Lorentz Boost along the Y axis, by beta. More...;  ; class  BoostZ;  Class representing a Lorentz Boost along the Z axis, by beta. More...;  ; class  BrentMinimizer1D;  User class for performing function minimization. More...;  ; class  BrentRootFinder;  Class for finding the root of a one dimensional function using the Brent algorithm. More...;  ; class  Cartesian2D;  Class describing a 2D cartesian coordinate system (x, y coordinates) More...;  ; class  Cartesian3D;  Class describing a 3D cartesian coordinate system (x, y, z coordinates) More...;  ; struct  CDFWrapper;  ; class  ChebyshevApprox;  Class describing a Chebyshev series which can be used to approximate a function in a defined range [a,b] using Chebyshev polynomials. More...;  ; class  ChebyshevPol;  ; class  CholeskyDecomp;  class to compute the Cholesky decomposition of a matrix More...;  ; class  CholeskyDecompGenDim;  class to compute the Cholesky decomposition of a matrix More...;  ; class  CholInverter;  ; struct  CompileTimeChecker;  ; struct  CompileTimeChecker< false >;  ; class  Constant;  Constant expression class A class representing constant expressions (literals) in the parse tree. M",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:7640,Performance,perform,performing,7640,eration Class. More...;  ; class  Factory;  Factory class holding static functions to create the interfaces like ROOT::Math::Minimizer via the Plugin Manager. More...;  ; class  FastInverter;  Fast Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  FastInverter< 3 >;  3x3 direct matrix inversion using Cramer Rule use only for FastInverter More...;  ; class  FastInverter< 4 >;  4x4 matrix inversion using Cramers rule. More...;  ; class  FastInverter< 5 >;  5x5 Matrix inversion using Cramers rule. More...;  ; class  FitTransformFunction;  Internal class used by GSLNLSMinimizer to implement the transformation of the chi2 function used by GSL Non-linear Least-square fitting The class is template on the FitMethodFunction type to support both gradient and non gradient functions. More...;  ; class  Functor;  Documentation for class Functor class. More...;  ; class  Functor1D;  Functor1D class for one-dimensional functions. More...;  ; class  GaussIntegrator;  User class for performing function integration. More...;  ; class  GaussLegendreIntegrator;  User class for performing function integration. More...;  ; class  GenAlgoOptions;  class implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs More...;  ; struct  GeneralHessianCalc;  ; struct  GeneralHessianCalc< double >;  ; struct  GeneralLinearFunctionDerivation;  Auxiliar class to bypass the (provisional) lack of vectorization in TFormula::EvalPar. More...;  ; struct  GeneralLinearFunctionDerivation< double >;  ; class  GeneticMinimizer;  GeneticMinimizer. More...;  ; struct  GeneticMinimizerParameters;  ; class  GenVector_exception;  ; class  GlobalCoordinateSystemTag;  Tag for identifying vectors based on a global coordinate system. More...;  ; class  GoFTest;  GoFTest class implementing the 1 sample and 2 sample goodness of fit tests for uni-variate distributions and data. More...;  ; class  GradFunctor;  GradFunctor class for Multidimensio,MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:7733,Performance,perform,performing,7733,ate the interfaces like ROOT::Math::Minimizer via the Plugin Manager. More...;  ; class  FastInverter;  Fast Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  FastInverter< 3 >;  3x3 direct matrix inversion using Cramer Rule use only for FastInverter More...;  ; class  FastInverter< 4 >;  4x4 matrix inversion using Cramers rule. More...;  ; class  FastInverter< 5 >;  5x5 Matrix inversion using Cramers rule. More...;  ; class  FitTransformFunction;  Internal class used by GSLNLSMinimizer to implement the transformation of the chi2 function used by GSL Non-linear Least-square fitting The class is template on the FitMethodFunction type to support both gradient and non gradient functions. More...;  ; class  Functor;  Documentation for class Functor class. More...;  ; class  Functor1D;  Functor1D class for one-dimensional functions. More...;  ; class  GaussIntegrator;  User class for performing function integration. More...;  ; class  GaussLegendreIntegrator;  User class for performing function integration. More...;  ; class  GenAlgoOptions;  class implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs More...;  ; struct  GeneralHessianCalc;  ; struct  GeneralHessianCalc< double >;  ; struct  GeneralLinearFunctionDerivation;  Auxiliar class to bypass the (provisional) lack of vectorization in TFormula::EvalPar. More...;  ; struct  GeneralLinearFunctionDerivation< double >;  ; class  GeneticMinimizer;  GeneticMinimizer. More...;  ; struct  GeneticMinimizerParameters;  ; class  GenVector_exception;  ; class  GlobalCoordinateSystemTag;  Tag for identifying vectors based on a global coordinate system. More...;  ; class  GoFTest;  GoFTest class implementing the 1 sample and 2 sample goodness of fit tests for uni-variate distributions and data. More...;  ; class  GradFunctor;  GradFunctor class for Multidimensional gradient functions. More...;  ; class  GradFunctor1D;  GradFunctor1D class for one-di,MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:9620,Performance,perform,performing,9620,"s for Multidimensional gradient functions. More...;  ; class  GradFunctor1D;  GradFunctor1D class for one-dimensional gradient functions. More...;  ; class  GSL1DMinimizerWrapper;  wrapper class for gsl_min_fminimizer structure More...;  ; class  GSLChebSeries;  wrapper class for C struct gsl_cheb_series More...;  ; class  GSLDerivator;  Class for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ). More...;  ; class  GSLError;  class to change GSL Error handler to use ROOT one. More...;  ; class  GSLFunctionAdapter;  Class for adapting any C++ functor class to C function pointers used by GSL. More...;  ; class  GSLFunctionDerivWrapper;  class to wrap a gsl_function_fdf (with derivatives) More...;  ; class  GSLFunctionWrapper;  Wrapper class to the gsl_function C structure. More...;  ; class  GSLIntegrationWorkspace;  ; class  GSLIntegrator;  Class for performing numerical integration of a function in one dimension. More...;  ; class  GSLInterpolator;  Interpolation class based on GSL interpolation functions. More...;  ; class  GSLMCIntegrationWorkspace;  ; class  GSLMCIntegrator;  ; class  GSLMinimizer;  GSLMinimizer class. More...;  ; class  GSLMinimizer1D;  Minimizer for arbitrary one dimensional functions. More...;  ; class  GSLMiserIntegrationWorkspace;  Workspace for MISER. More...;  ; struct  GSLMonteFunctionAdapter;  ; class  GSLMonteFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; class  GSLMultiFit;  GSLMultiFit, internal class for implementing GSL non linear least square GSL fitting. More...;  ; class  GSLMultiFitFunctionAdapter;  Class for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: More...;  ; class  GSLMultiFitFunctionWrapper;  wrapper to a ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:15950,Performance,perform,performing,15950,SL random number generators For this we need to implement functions which will be called by gsl_rng. More...;  ; class  GSLRngTaus;  Tausworthe generator by L'Ecuyer see here More...;  ; class  GSLRngWrapper;  GSLRngWrapper class to wrap gsl_rng structure. More...;  ; class  GSLRootFdFSolver;  Root-Finder with derivatives implementation class using GSL. More...;  ; class  GSLRootFinder;  Base class for GSL Root-Finding algorithms for one dimensional functions which do not use function derivatives. More...;  ; class  GSLRootFinderDeriv;  Base class for GSL Root-Finding algorithms for one dimensional functions which use function derivatives. More...;  ; class  GSLRootFSolver;  Root-Finder implementation class using GSL. More...;  ; class  GSLSimAnFunc;  GSLSimAnFunc class description. More...;  ; class  GSLSimAnMinimizer;  GSLSimAnMinimizer class for minimization using simulated annealing using the algorithm from GSL. More...;  ; class  GSLSimAnnealing;  GSLSimAnnealing class for performing a simulated annealing search of a multidimensional function. More...;  ; struct  GSLSimAnParams;  structure holding the simulated annealing parameters More...;  ; class  GSLVegasIntegrationWorkspace;  workspace for VEGAS More...;  ; class  IBaseFunctionMultiDimTempl;  Documentation for the abstract class IBaseFunctionMultiDim. More...;  ; class  IBaseFunctionOneDim;  Interface (abstract class) for generic functions objects of one-dimension Provides a method to evaluate the function given a value (simple double) by implementing operator() (const double ). More...;  ; class  IBaseParam;  Documentation for the abstract class IBaseParam. More...;  ; class  IGradientFunctionMultiDimTempl;  Interface (abstract class) for multi-dimensional functions providing a gradient calculation. More...;  ; class  IGradientFunctionOneDim;  Interface (abstract class) for one-dimensional functions providing a gradient calculation. More...;  ; class  IGradientMultiDimTempl;  ; class  IMinimizer1D;  Interf,MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:17191,Performance,perform,performing,17191,..;  ; class  IBaseFunctionMultiDimTempl;  Documentation for the abstract class IBaseFunctionMultiDim. More...;  ; class  IBaseFunctionOneDim;  Interface (abstract class) for generic functions objects of one-dimension Provides a method to evaluate the function given a value (simple double) by implementing operator() (const double ). More...;  ; class  IBaseParam;  Documentation for the abstract class IBaseParam. More...;  ; class  IGradientFunctionMultiDimTempl;  Interface (abstract class) for multi-dimensional functions providing a gradient calculation. More...;  ; class  IGradientFunctionOneDim;  Interface (abstract class) for one-dimensional functions providing a gradient calculation. More...;  ; class  IGradientMultiDimTempl;  ; class  IMinimizer1D;  Interface class for numerical methods for one-dimensional minimization. More...;  ; class  IntegrandTransform;  Auxiliary inner class for mapping infinite and semi-infinite integrals. More...;  ; class  IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  IntegratorOneDim;  User Class for performing numerical integration of a function in one dimension. More...;  ; class  IntegratorOneDimOptions;  Numerical one dimensional integration options. More...;  ; class  Interpolator;  Class for performing function interpolation of points. More...;  ; class  Inverter;  Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  Inverter< 0 >;  Inverter<0>. More...;  ; class  Inverter< 1 >;  1x1 matrix inversion \(a_{11} \to 1/a_{11}\) More...;  ; class  Inverter< 2 >;  2x2 matrix inversion using Cramers rule. More...;  ; class  IOptions;  Generic interface for defining configuration options of a numerical algorithm. More...;  ; class  IParametricFunctionMultiDimTempl;  IParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a derive,MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:17381,Performance,perform,performing,17381, one-dimension Provides a method to evaluate the function given a value (simple double) by implementing operator() (const double ). More...;  ; class  IBaseParam;  Documentation for the abstract class IBaseParam. More...;  ; class  IGradientFunctionMultiDimTempl;  Interface (abstract class) for multi-dimensional functions providing a gradient calculation. More...;  ; class  IGradientFunctionOneDim;  Interface (abstract class) for one-dimensional functions providing a gradient calculation. More...;  ; class  IGradientMultiDimTempl;  ; class  IMinimizer1D;  Interface class for numerical methods for one-dimensional minimization. More...;  ; class  IntegrandTransform;  Auxiliary inner class for mapping infinite and semi-infinite integrals. More...;  ; class  IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  IntegratorOneDim;  User Class for performing numerical integration of a function in one dimension. More...;  ; class  IntegratorOneDimOptions;  Numerical one dimensional integration options. More...;  ; class  Interpolator;  Class for performing function interpolation of points. More...;  ; class  Inverter;  Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  Inverter< 0 >;  Inverter<0>. More...;  ; class  Inverter< 1 >;  1x1 matrix inversion \(a_{11} \to 1/a_{11}\) More...;  ; class  Inverter< 2 >;  2x2 matrix inversion using Cramers rule. More...;  ; class  IOptions;  Generic interface for defining configuration options of a numerical algorithm. More...;  ; class  IParametricFunctionMultiDimTempl;  IParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricFunctionOneDim;  Specialized IParamFunction interface (abstract class) for one-dimensional paramet,MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:17582,Performance,perform,performing,17582,class IBaseParam. More...;  ; class  IGradientFunctionMultiDimTempl;  Interface (abstract class) for multi-dimensional functions providing a gradient calculation. More...;  ; class  IGradientFunctionOneDim;  Interface (abstract class) for one-dimensional functions providing a gradient calculation. More...;  ; class  IGradientMultiDimTempl;  ; class  IMinimizer1D;  Interface class for numerical methods for one-dimensional minimization. More...;  ; class  IntegrandTransform;  Auxiliary inner class for mapping infinite and semi-infinite integrals. More...;  ; class  IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  IntegratorOneDim;  User Class for performing numerical integration of a function in one dimension. More...;  ; class  IntegratorOneDimOptions;  Numerical one dimensional integration options. More...;  ; class  Interpolator;  Class for performing function interpolation of points. More...;  ; class  Inverter;  Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  Inverter< 0 >;  Inverter<0>. More...;  ; class  Inverter< 1 >;  1x1 matrix inversion \(a_{11} \to 1/a_{11}\) More...;  ; class  Inverter< 2 >;  2x2 matrix inversion using Cramers rule. More...;  ; class  IOptions;  Generic interface for defining configuration options of a numerical algorithm. More...;  ; class  IParametricFunctionMultiDimTempl;  IParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricFunctionOneDim;  Specialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricGradFunctionMultiDimTempl;  Interface (abstract class) for parame,MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:21063,Performance,perform,perform,21063,"N This class is a template on the contained type and on the symmetric matrix size, N. More...;  ; class  MatrixMulOp;  Class for Matrix-Matrix multiplication. More...;  ; class  MersenneTwisterEngine;  Random number generator class based on M. More...;  ; struct  meta_col_dot;  ; struct  meta_col_dot< 0 >;  ; struct  meta_dot;  ; struct  meta_dot< 0 >;  ; struct  meta_mag;  ; struct  meta_mag< 0 >;  ; struct  meta_matrix_dot;  ; struct  meta_matrix_dot< 0 >;  ; struct  meta_row_dot;  ; struct  meta_row_dot< 0 >;  ; class  Minimizer;  Abstract Minimizer class, defining the interface for the various minimizer (like Minuit2, Minuit, GSL, etc..) in ROOT. More...;  ; class  MinimizerOptions;  Minimizer options. More...;  ; class  MinimizerVariableTransformation;  Base class for MinimizerVariable transformations defining the functions to deal with bounded parameters. More...;  ; class  MinimTransformFunction;  MinimTransformFunction class to perform a transformations on the variables to deal with fixed or limited variables (support both double and single bounds) The class manages the passed function pointer. More...;  ; class  MinimTransformVariable;  MinimTransformVariable class Contains meta information of the variables such as bounds, fix flags and deals with transformation of the variable The class does not contain the values and the step size (error) of the variable This is an internal class used by the MinimTransformFunction class. More...;  ; class  MinOp;  Subtraction Operation Class. More...;  ; class  Minus;  Unary Minus Operation Class. More...;  ; struct  MinusEquals;  Evaluate the expression performing a -= operation Need to check whether creating a temporary object with the expression result (like in op: A -= A * B ) More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Specialization for symmetrix -= general : NOT Allowed operation. More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:21739,Performance,perform,performing,21739,"  ; class  MinimizerOptions;  Minimizer options. More...;  ; class  MinimizerVariableTransformation;  Base class for MinimizerVariable transformations defining the functions to deal with bounded parameters. More...;  ; class  MinimTransformFunction;  MinimTransformFunction class to perform a transformations on the variables to deal with fixed or limited variables (support both double and single bounds) The class manages the passed function pointer. More...;  ; class  MinimTransformVariable;  MinimTransformVariable class Contains meta information of the variables such as bounds, fix flags and deals with transformation of the variable The class does not contain the values and the step size (error) of the variable This is an internal class used by the MinimTransformFunction class. More...;  ; class  MinOp;  Subtraction Operation Class. More...;  ; class  Minus;  Unary Minus Operation Class. More...;  ; struct  MinusEquals;  Evaluate the expression performing a -= operation Need to check whether creating a temporary object with the expression result (like in op: A -= A * B ) More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Specialization for symmetrix -= general : NOT Allowed operation. More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Specialization for symmetric matrices. More...;  ; struct  MiserParameters;  Structure collecting parameters for MISER multidimensional integration. More...;  ; class  MixMaxEngine;  MixMaxEngine is a wrapper class for the MIXMAX Random number generator. More...;  ; class  MixMaxEngineImpl;  ; class  MixMaxEngineImpl< ROOT_MM_N >;  ; class  MulOp;  Multiplication (element-wise) Operation Class. More...;  ; class  MultiDimParamFunctionAdapter;  MultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parametric function interface This is used typically in fitting where internally the function is stored as multi",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:24836,Performance,perform,performing,24836,"e template class for all Parametric Functions. More...;  ; class  ParamFunctionBase;  class defining the signature for multi-dim parametric functions More...;  ; class  ParamFunctorHandler;  ParamFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions. More...;  ; class  ParamFunctorTempl;  Param Functor class for Multidimensional functions. More...;  ; class  ParamMemFunHandler;  ParamFunctor Handler to Wrap pointers to member functions. More...;  ; class  PDFIntegral;  ; struct  PlaceExpr;  ; struct  PlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  ; struct  PlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  ; struct  PlaceMatrix;  Structure to deal when a submatrix is placed in a matrix. More...;  ; struct  PlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  ; struct  PlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  ; struct  PlainParameters;  ; struct  PlusEquals;  Evaluate the expression performing a += operation Need to check whether creating a temporary object with the expression result (like in op: A += A * B ) More...;  ; struct  PlusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Specialization for symmetrix += general : NOT Allowed operation. More...;  ; struct  PlusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Specialization for symmetric matrices Evaluate the expression performing a += operation for symmetric matrices Need to have a separate functions to avoid to modify two times the off-diagonal elements (i.e applying two times the expression) Need to check whether creating a temporary object with the expression result (like in op: A += A * B ) More...;  ; class  Polar2D;  Class describing a polar 2D coordinate system based on r and phi Phi is restricted to be in the range [-PI,PI) More...;  ; class  Polar3D;  Class describing a polar coordinate system based on r",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:25274,Performance,perform,performing,25274,"  ; class  PDFIntegral;  ; struct  PlaceExpr;  ; struct  PlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  ; struct  PlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  ; struct  PlaceMatrix;  Structure to deal when a submatrix is placed in a matrix. More...;  ; struct  PlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  ; struct  PlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  ; struct  PlainParameters;  ; struct  PlusEquals;  Evaluate the expression performing a += operation Need to check whether creating a temporary object with the expression result (like in op: A += A * B ) More...;  ; struct  PlusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Specialization for symmetrix += general : NOT Allowed operation. More...;  ; struct  PlusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Specialization for symmetric matrices Evaluate the expression performing a += operation for symmetric matrices Need to have a separate functions to avoid to modify two times the off-diagonal elements (i.e applying two times the expression) Need to check whether creating a temporary object with the expression result (like in op: A += A * B ) More...;  ; class  Polar2D;  Class describing a polar 2D coordinate system based on r and phi Phi is restricted to be in the range [-PI,PI) More...;  ; class  Polar3D;  Class describing a polar coordinate system based on r, theta and phi Phi is restricted to be in the range [-PI,PI) More...;  ; class  Polynomial;  Parametric Function class describing polynomials of order n. More...;  ; class  PositionVector2D;  Class describing a generic position vector (point) in 2 dimensions. More...;  ; class  PositionVector3D;  Class describing a generic position vector (point) in 3 dimensions. More...;  ; class  PtEtaPhiE4D;  Class describing a 4D cylindrical coordinate system using Pt , Phi, Eta and E (or rho, phi, eta ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:1961,Safety,avoid,avoid,1961,"ationMultiDim;  ; namespace  IntegrationOneDim;  ; namespace  Internal;  ; namespace  internal;  ; namespace  Interpolation;  ; namespace  MCIntegration;  ; namespace  Minim;  ; namespace  Minim1D;  ; namespace  Roots;  Root-Finding Algorithms. ;  ; namespace  rowOffsetsUtils;  ; namespace  Sampler;  ; namespace  Util;  namespace defining Utility functions needed by mathcore ;  ; namespace  VectorUtil;  Global Helper functions for generic Vector classes. ;  . Classes; class  AdaptiveIntegratorMultiDim;  Class for adaptive quadrature integration in multi-dimensions using rectangular regions. More...;  ; class  AddOp;  Addition Operation Class. More...;  ; struct  AddPolicy;  matrix addition policy More...;  ; struct  AddPolicy< T, D1, D2, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  ; struct  Assign;  Structure to assign from an expression based to general matrix to general matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Dummy Structure which flags an error to avoid assignment from expression based on a general matrix to a symmetric matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Structure to assign from an expression based to symmetric matrix to symmetric matrix. More...;  ; struct  AssignItr;  Structure for assignment to a general matrix from iterator. More...;  ; struct  AssignItr< T, D1, D2, MatRepSym< T, D1 > >;  Specialized structure for assignment to a symmetrix matrix from iterator. More...;  ; struct  AssignSym;  Force Expression evaluation from general to symmetric. More...;  ; class  AxisAngle;  AxisAngle class describing rotation represented with direction axis (3D Vector) and an angle of rotation around that axis. More...;  ; class  BaseIntegratorOptions;  Base class for Numerical integration options common in 1D and multi-dimension This is an internal class and is not supposed to be instantiated by the user. More...;  ; class  BasicFitMethodFunction;  FitMethodFun",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:25360,Safety,avoid,avoid,25360,"  ; class  PDFIntegral;  ; struct  PlaceExpr;  ; struct  PlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  ; struct  PlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  ; struct  PlaceMatrix;  Structure to deal when a submatrix is placed in a matrix. More...;  ; struct  PlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  ; struct  PlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  ; struct  PlainParameters;  ; struct  PlusEquals;  Evaluate the expression performing a += operation Need to check whether creating a temporary object with the expression result (like in op: A += A * B ) More...;  ; struct  PlusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Specialization for symmetrix += general : NOT Allowed operation. More...;  ; struct  PlusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Specialization for symmetric matrices Evaluate the expression performing a += operation for symmetric matrices Need to have a separate functions to avoid to modify two times the off-diagonal elements (i.e applying two times the expression) Need to check whether creating a temporary object with the expression result (like in op: A += A * B ) More...;  ; class  Polar2D;  Class describing a polar 2D coordinate system based on r and phi Phi is restricted to be in the range [-PI,PI) More...;  ; class  Polar3D;  Class describing a polar coordinate system based on r, theta and phi Phi is restricted to be in the range [-PI,PI) More...;  ; class  Polynomial;  Parametric Function class describing polynomials of order n. More...;  ; class  PositionVector2D;  Class describing a generic position vector (point) in 2 dimensions. More...;  ; class  PositionVector3D;  Class describing a generic position vector (point) in 3 dimensions. More...;  ; class  PtEtaPhiE4D;  Class describing a 4D cylindrical coordinate system using Pt , Phi, Eta and E (or rho, phi, eta ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:689,Testability,test,test,689,". ROOT: ROOT::Math Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables ; ROOT::Math Namespace Reference. Namespaces; namespace  Blas;  ; namespace  BrentMethods;  ; namespace  Cephes;  ; namespace  Chebyshev;  template recursive functions for defining evaluation of Chebyshev polynomials T_n(x) and the series S(x) = Sum_i c_i* T_i(x) ;  ; namespace  CholeskyDecompHelpers;  helpers for CholeskyDecomp ;  ; namespace  detail;  ; namespace  GenAlgoOptUtil;  ; namespace  GenVector;  ; namespace  GenVector_detail;  ; namespace  GSLRootHelper;  Helper functions to test convergence of Root-Finding algorithms. ;  ; namespace  GSLSimAn;  ; namespace  gv_detail;  ; namespace  Impl;  ; namespace  IntegMultiDim;  ; namespace  IntegOneDim;  ; namespace  IntegOptionsUtil;  ; namespace  Integration;  ; namespace  IntegrationMultiDim;  ; namespace  IntegrationOneDim;  ; namespace  Internal;  ; namespace  internal;  ; namespace  Interpolation;  ; namespace  MCIntegration;  ; namespace  Minim;  ; namespace  Minim1D;  ; namespace  Roots;  Root-Finding Algorithms. ;  ; namespace  rowOffsetsUtils;  ; namespace  Sampler;  ; namespace  Util;  namespace defining Utility functions needed by mathcore ;  ; namespace  VectorUtil;  Global Helper functions for generic Vector classes. ;  . Classes; class  AdaptiveIntegratorMultiDim;  Class for adaptive quadrature integration in multi-dimensions using rectangular regions. More...;  ; class  AddOp;  Addition Operation Class. More...;  ; struct  AddPolicy;  matrix addition policy More...;  ; struct  AddPolicy< T, D1, D2, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  ; struct  Assign;  Structure to assign from an expression based to general matrix to general matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Dummy Structure which flags an error to avoid assignment from expression based o",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:8520,Testability,test,tests,8520,nctor class. More...;  ; class  Functor1D;  Functor1D class for one-dimensional functions. More...;  ; class  GaussIntegrator;  User class for performing function integration. More...;  ; class  GaussLegendreIntegrator;  User class for performing function integration. More...;  ; class  GenAlgoOptions;  class implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs More...;  ; struct  GeneralHessianCalc;  ; struct  GeneralHessianCalc< double >;  ; struct  GeneralLinearFunctionDerivation;  Auxiliar class to bypass the (provisional) lack of vectorization in TFormula::EvalPar. More...;  ; struct  GeneralLinearFunctionDerivation< double >;  ; class  GeneticMinimizer;  GeneticMinimizer. More...;  ; struct  GeneticMinimizerParameters;  ; class  GenVector_exception;  ; class  GlobalCoordinateSystemTag;  Tag for identifying vectors based on a global coordinate system. More...;  ; class  GoFTest;  GoFTest class implementing the 1 sample and 2 sample goodness of fit tests for uni-variate distributions and data. More...;  ; class  GradFunctor;  GradFunctor class for Multidimensional gradient functions. More...;  ; class  GradFunctor1D;  GradFunctor1D class for one-dimensional gradient functions. More...;  ; class  GSL1DMinimizerWrapper;  wrapper class for gsl_min_fminimizer structure More...;  ; class  GSLChebSeries;  wrapper class for C struct gsl_cheb_series More...;  ; class  GSLDerivator;  Class for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ). More...;  ; class  GSLError;  class to change GSL Error handler to use ROOT one. More...;  ; class  GSLFunctionAdapter;  Class for adapting any C++ functor class to C function pointers used by GSL. More...;  ; class  GSLFunctionDerivWrapper;  class to wrap a gsl_function_fdf (with derivatives) More...;  ; class  GSLFunctionWrapper;  Wrap,MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:60193,Testability,log,lognormal,60193,", double xi=1, double x0=0);  Complement of the distribution function of the Landau distribution (upper tail). ;  ; double landau_xm1 (double x, double xi=1, double x0=0);  First moment (mean) of the truncated Landau distribution. ;  ; double landau_xm2 (double x, double xi=1, double x0=0);  Second moment of the truncated Landau distribution. ;  ; template<class T > ; T Lmag (const SVector< T, 4 > &rhs);  Lmag: Minkowski Lorentz-Vector norm (only for 4-dim vectors) Length of a vector Lorentz-Vector: \( |\vec{v}| = \sqrt{v_0^2 - v_1^2 - v_2^2 -v_3^2} \). ;  ; template<class A , class T > ; T Lmag (const VecExpr< A, T, 4 > &rhs);  ; template<class T > ; T Lmag2 (const SVector< T, 4 > &rhs);  Lmag2: Square of Minkowski Lorentz-Vector norm (only for 4D Vectors) Template to compute \( |\vec{v}|^2 = v_0^2 - v_1^2 - v_2^2 -v_3^2 \). ;  ; template<class A , class T > ; T Lmag2 (const VecExpr< A, T, 4 > &rhs);  ; double log1p (double x);  declarations for functions which are not implemented by some compilers ;  ; double lognormal_cdf (double x, double m, double s, double x0=0);  Cumulative distribution function of the lognormal distribution (lower tail). ;  ; double lognormal_cdf_c (double x, double m, double s, double x0=0);  Complement of the cumulative distribution function of the lognormal distribution (upper tail). ;  ; template<class char_t , class traits_t > ; std::basic_ios< char_t, traits_t > & machine_readable (std::basic_ios< char_t, traits_t > &ios);  ; template<class T , unsigned int D> ; T Mag (const SVector< T, D > &rhs);  Vector magnitude (Euclidean norm) Compute : \( |\vec{v}| = \sqrt{\sum_iv_i^2} \). ;  ; template<class A , class T , unsigned int D> ; T Mag (const VecExpr< A, T, D > &rhs);  ; template<class T , unsigned int D> ; T Mag2 (const SVector< T, D > &rhs);  Vector magnitude square Template to compute \(|\vec{v}|^2 = \sum_iv_i^2 \). ;  ; template<class A , class T , unsigned int D> ; T Mag2 (const VecExpr< A, T, D > &rhs);  ; template<class T > ; co",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:60362,Testability,log,lognormal,60362,"au_xm2 (double x, double xi=1, double x0=0);  Second moment of the truncated Landau distribution. ;  ; template<class T > ; T Lmag (const SVector< T, 4 > &rhs);  Lmag: Minkowski Lorentz-Vector norm (only for 4-dim vectors) Length of a vector Lorentz-Vector: \( |\vec{v}| = \sqrt{v_0^2 - v_1^2 - v_2^2 -v_3^2} \). ;  ; template<class A , class T > ; T Lmag (const VecExpr< A, T, 4 > &rhs);  ; template<class T > ; T Lmag2 (const SVector< T, 4 > &rhs);  Lmag2: Square of Minkowski Lorentz-Vector norm (only for 4D Vectors) Template to compute \( |\vec{v}|^2 = v_0^2 - v_1^2 - v_2^2 -v_3^2 \). ;  ; template<class A , class T > ; T Lmag2 (const VecExpr< A, T, 4 > &rhs);  ; double log1p (double x);  declarations for functions which are not implemented by some compilers ;  ; double lognormal_cdf (double x, double m, double s, double x0=0);  Cumulative distribution function of the lognormal distribution (lower tail). ;  ; double lognormal_cdf_c (double x, double m, double s, double x0=0);  Complement of the cumulative distribution function of the lognormal distribution (upper tail). ;  ; template<class char_t , class traits_t > ; std::basic_ios< char_t, traits_t > & machine_readable (std::basic_ios< char_t, traits_t > &ios);  ; template<class T , unsigned int D> ; T Mag (const SVector< T, D > &rhs);  Vector magnitude (Euclidean norm) Compute : \( |\vec{v}| = \sqrt{\sum_iv_i^2} \). ;  ; template<class A , class T , unsigned int D> ; T Mag (const VecExpr< A, T, D > &rhs);  ; template<class T , unsigned int D> ; T Mag2 (const SVector< T, D > &rhs);  Vector magnitude square Template to compute \(|\vec{v}|^2 = \sum_iv_i^2 \). ;  ; template<class A , class T , unsigned int D> ; T Mag2 (const VecExpr< A, T, D > &rhs);  ; template<class T > ; const T Maximum (const T &lhs, const T &rhs);  maximum. ;  ; double minfunction (const std::vector< double > &x);  function to return the function values at point x ;  ; TVectorD mingradfunction (TVectorD y);  function to return the gradient values a",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:104550,Testability,log,lognormal,104550,"le alpha, double n, double sigma, double mean=0);  pdf definition of the crystal_ball which is defined only for n > 1 otherwise integral is diverging ;  ; double exponential_pdf (double x, double lambda, double x0=0);  Probability density function of the exponential distribution. ;  ; double fdistribution_pdf (double x, double n, double m, double x0=0);  Probability density function of the F-distribution. ;  ; double gamma_pdf (double x, double alpha, double theta, double x0=0);  Probability density function of the gamma distribution. ;  ; double gaussian_pdf (double x, double sigma=1, double x0=0);  Probability density function of the normal (Gaussian) distribution. ;  ; double bigaussian_pdf (double x, double y, double sigmax=1, double sigmay=1, double rho=0, double x0=0, double y0=0);  Probability density function of the bi-dimensional (Gaussian) distribution. ;  ; double landau_pdf (double x, double xi=1, double x0=0);  Probability density function of the Landau distribution: ;  ; double lognormal_pdf (double x, double m, double s, double x0=0);  Probability density function of the lognormal distribution. ;  ; double normal_pdf (double x, double sigma=1, double x0=0);  Probability density function of the normal (Gaussian) distribution. ;  ; double poisson_pdf (unsigned int n, double mu);  Probability density function of the Poisson distribution. ;  ; double tdistribution_pdf (double x, double r, double x0=0);  Probability density function of Student's t-distribution. ;  ; double uniform_pdf (double x, double a, double b, double x0=0);  Probability density function of the uniform (flat) distribution. ;  ; Quantile Functions from MathCore; The implementation is provided in MathCore and for the majority of the function comes from Cephes. . double beta_quantile (double x, double a, double b);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the beta distribution (beta_cdf_c). ;  ; double beta_quantile_c (double x, double a, doubl",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:108673,Testability,log,lognormal,108673,"verse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the f distribution (fdistribution_cdf_c). ;  ; double gamma_quantile_c (double z, double alpha, double theta);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the gamma distribution (gamma_cdf_c). ;  ; double gamma_quantile (double z, double alpha, double theta);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the gamma distribution (gamma_cdf). ;  ; double gaussian_quantile_c (double z, double sigma);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the normal (Gaussian) distribution (gaussian_cdf_c). ;  ; double gaussian_quantile (double z, double sigma);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the normal (Gaussian) distribution (gaussian_cdf). ;  ; double lognormal_quantile_c (double x, double m, double s);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the lognormal distribution (lognormal_cdf_c). ;  ; double lognormal_quantile (double x, double m, double s);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the lognormal distribution (lognormal_cdf). ;  ; double normal_quantile_c (double z, double sigma);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the normal (Gaussian) distribution (normal_cdf_c). ;  ; double normal_quantile (double z, double sigma);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the normal (Gaussian) distribution (normal_cdf). ;  ; double uniform_quantile_c (double z, double a, double b);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the uniform (flat) distribution (uniform_cdf_c). ;  ; double uniform_quantile (double z, double a, double b);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution funct",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:108869,Testability,log,lognormal,108869,"Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the gamma distribution (gamma_cdf_c). ;  ; double gamma_quantile (double z, double alpha, double theta);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the gamma distribution (gamma_cdf). ;  ; double gaussian_quantile_c (double z, double sigma);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the normal (Gaussian) distribution (gaussian_cdf_c). ;  ; double gaussian_quantile (double z, double sigma);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the normal (Gaussian) distribution (gaussian_cdf). ;  ; double lognormal_quantile_c (double x, double m, double s);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the lognormal distribution (lognormal_cdf_c). ;  ; double lognormal_quantile (double x, double m, double s);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the lognormal distribution (lognormal_cdf). ;  ; double normal_quantile_c (double z, double sigma);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the normal (Gaussian) distribution (normal_cdf_c). ;  ; double normal_quantile (double z, double sigma);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the normal (Gaussian) distribution (normal_cdf). ;  ; double uniform_quantile_c (double z, double a, double b);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the uniform (flat) distribution (uniform_cdf_c). ;  ; double uniform_quantile (double z, double a, double b);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the uniform (flat) distribution (uniform_cdf). ;  ; double landau_quantile (double z, double xi=1);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of th",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:110399,Testability,log,logarithm,110399,"mulative distribution function of the upper tail of the uniform (flat) distribution (uniform_cdf_c). ;  ; double uniform_quantile (double z, double a, double b);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the uniform (flat) distribution (uniform_cdf). ;  ; double landau_quantile (double z, double xi=1);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the Landau distribution (landau_cdf). ;  ; double landau_quantile_c (double z, double xi=1);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the landau distribution (landau_cdf_c). ;  ; Special Functions from MathCore; double erf (double x);  Error function encountered in integrating the normal distribution. ;  ; double erfc (double x);  Complementary error function. ;  ; double tgamma (double x);  The gamma function is defined to be the extension of the factorial to real numbers. ;  ; double lgamma (double x);  Calculates the logarithm of the gamma function. ;  ; double inc_gamma (double a, double x);  Calculates the normalized (regularized) lower incomplete gamma function (lower integral) ;  ; double inc_gamma_c (double a, double x);  Calculates the normalized (regularized) upper incomplete gamma function (upper integral) ;  ; double beta (double x, double y);  Calculates the beta function. ;  ; double inc_beta (double x, double a, double b);  Calculates the normalized (regularized) incomplete beta function. ;  ; double sinint (double x);  Calculates the sine integral. ;  ; double cosint (double x);  Calculates the real part of the cosine integral Re(Ci). ;  ; Quantile Functions from MathMore; The implementation used is that of GSL. . double tdistribution_quantile_c (double z, double r);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of Student's t-distribution (tdistribution_cdf_c). ;  ; double tdistribution_quantile (double z, double r);  Inverse ( \(D^{-1}(z)",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:151177,Testability,log,log,151177,"t VecExpr< A, T, D > & ; rhs . ). inline . Definition at line 173 of file Functions.h. ◆ Dot() [2/3]. template<class A , class T , unsigned int D> . T ROOT::Math::Dot ; (; const VecExpr< A, T, D > & ; lhs, . const SVector< T, D > & ; rhs . ). inline . Definition at line 181 of file Functions.h. ◆ Dot() [3/3]. template<class A , class B , class T , unsigned int D> . T ROOT::Math::Dot ; (; const VecExpr< A, T, D > & ; lhs, . const VecExpr< B, T, D > & ; rhs . ). inline . Definition at line 190 of file Functions.h. ◆ etaMax(). template<class T > . T ROOT::Math::etaMax ; (; ). inline . Function providing the maximum possible value of pseudorapidity for a non-zero rho, in the Scalar type with the largest dynamic range. ; Definition at line 51 of file etaMax.h. ◆ etaMax_impl(). long double ROOT::Math::etaMax_impl ; (; ). inline . The following function could be called to provide the maximum possible value of pseudorapidity for a non-zero rho. ; This is log ( max/min ) where max and min are the extrema of positive values for type long double. ; Definition at line 36 of file etaMax.h. ◆ expm1(). double ROOT::Math::expm1 ; (; double ; x). inline . exp(x) -1 with error cancellation when x is small ; Definition at line 110 of file Math.h. ◆ fabs() [1/2]. template<class A , class T , unsigned int D, unsigned int D2, class R > . Expr< UnaryOp< Fabs< T >, Expr< A, T, D, D2, R >, T >, T, D, D2, R > ROOT::Math::fabs ; (; const Expr< A, T, D, D2, R > & ; rhs). inline . Definition at line 160 of file UnaryOperators.h. ◆ fabs() [2/2]. template<class A , class T , unsigned int D> . VecExpr< UnaryOp< Fabs< T >, VecExpr< A, T, D >, T >, T, D > ROOT::Math::fabs ; (; const VecExpr< A, T, D > & ; rhs). inline . Definition at line 131 of file UnaryOperators.h. ◆ gaussian_cdf(). double ROOT::Math::gaussian_cdf ; (; double ; x, . double ; sigma = 1, . double ; x0 = 0 . ). inline . Alternative name for same function. ; Definition at line 485 of file ProbFuncMathCore.h. ◆ gaussian_cdf_c(). double",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:153691,Testability,log,log,153691,"9 of file GSLMultiRootFinder.cxx. ◆ GetGSLType(). const gsl_multiroot_fsolver_type * ROOT::Math::GetGSLType ; (; GSLMultiRootFinder::EType ; type). Definition at line 171 of file GSLMultiRootFinder.cxx. ◆ getSum(). int ROOT::Math::getSum ; (; const int * ; x, . int ; n . ). Definition at line 534 of file GoFTest.cxx. ◆ human_readable(). template<class char_t , class traits_t > . std::basic_ios< char_t, traits_t > & ROOT::Math::human_readable ; (; std::basic_ios< char_t, traits_t > & ; ios). inline . Definition at line 197 of file GenVectorIO.h. ◆ Lmag(). template<class A , class T > . T ROOT::Math::Lmag ; (; const VecExpr< A, T, 4 > & ; rhs). inline . Definition at line 308 of file Functions.h. ◆ Lmag2(). template<class A , class T > . T ROOT::Math::Lmag2 ; (; const VecExpr< A, T, 4 > & ; rhs). inline . Definition at line 284 of file Functions.h. ◆ log1p(). double ROOT::Math::log1p ; (; double ; x). inline . declarations for functions which are not implemented by some compilers ; log(1+x) with error cancelation when x is small ; Definition at line 98 of file Math.h. ◆ machine_readable(). template<class char_t , class traits_t > . std::basic_ios< char_t, traits_t > & ROOT::Math::machine_readable ; (; std::basic_ios< char_t, traits_t > & ; ios). inline . Definition at line 208 of file GenVectorIO.h. ◆ Mag(). template<class A , class T , unsigned int D> . T ROOT::Math::Mag ; (; const VecExpr< A, T, D > & ; rhs). inline . Definition at line 261 of file Functions.h. ◆ Mag2(). template<class A , class T , unsigned int D> . T ROOT::Math::Mag2 ; (; const VecExpr< A, T, D > & ; rhs). inline . Definition at line 238 of file Functions.h. ◆ minfunction(). double ROOT::Math::minfunction ; (; const std::vector< double > & ; x). function to return the function values at point x ; Definition at line 19 of file RMinimizer.cxx. ◆ mingradfunction(). TVectorD ROOT::Math::mingradfunction ; (; TVectorD ; y). function to return the gradient values at point y ; Definition at line 25 of file",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math.html:16463,Usability,simpl,simple,16463,l functions which do not use function derivatives. More...;  ; class  GSLRootFinderDeriv;  Base class for GSL Root-Finding algorithms for one dimensional functions which use function derivatives. More...;  ; class  GSLRootFSolver;  Root-Finder implementation class using GSL. More...;  ; class  GSLSimAnFunc;  GSLSimAnFunc class description. More...;  ; class  GSLSimAnMinimizer;  GSLSimAnMinimizer class for minimization using simulated annealing using the algorithm from GSL. More...;  ; class  GSLSimAnnealing;  GSLSimAnnealing class for performing a simulated annealing search of a multidimensional function. More...;  ; struct  GSLSimAnParams;  structure holding the simulated annealing parameters More...;  ; class  GSLVegasIntegrationWorkspace;  workspace for VEGAS More...;  ; class  IBaseFunctionMultiDimTempl;  Documentation for the abstract class IBaseFunctionMultiDim. More...;  ; class  IBaseFunctionOneDim;  Interface (abstract class) for generic functions objects of one-dimension Provides a method to evaluate the function given a value (simple double) by implementing operator() (const double ). More...;  ; class  IBaseParam;  Documentation for the abstract class IBaseParam. More...;  ; class  IGradientFunctionMultiDimTempl;  Interface (abstract class) for multi-dimensional functions providing a gradient calculation. More...;  ; class  IGradientFunctionOneDim;  Interface (abstract class) for one-dimensional functions providing a gradient calculation. More...;  ; class  IGradientMultiDimTempl;  ; class  IMinimizer1D;  Interface class for numerical methods for one-dimensional minimization. More...;  ; class  IntegrandTransform;  Auxiliary inner class for mapping infinite and semi-infinite integrals. More...;  ; class  IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  IntegratorOneDim;  User Class for performing numerical integra,MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
https://root.cern/doc/master/namespaceROOT_1_1Math_1_1BrentMethods.html:780,Availability,toler,tolerance,780,". ROOT: ROOT::Math::BrentMethods Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; ROOT::Math::BrentMethods Namespace Reference. Functions; double MinimBrent (const IGenFunction *f, int type, double &xmin, double &xmax, double xmiddle, double fy, bool &ok, int &niter, double epsabs=1.E-8, double epsrel=1.E-10, int maxiter=100);  Finds a minimum of a function, if the function is unimodal between xmin and xmax This method uses a combination of golden section search and parabolic interpolation Details about convergence and properties of this algorithm can be found in the book by R.P.Brent ""Algorithms for Minimization Without Derivatives"" or in the ""Numerical Recipes"", chapter 10.2 convergence is reached using tolerance = 2 *( epsrel * abs(x) + epsabs) ;  ; double MinimStep (const IGenFunction *f, int type, double &xmin, double &xmax, double fy, int npx=100, bool useLog=false);  Grid search implementation, used to bracket the minimum and later use Brent's method with the bracketed interval The step of the search is set to (xmax-xmin)/fNpx type: 0-returns MinimumX 1-returns Minimum 2-returns MaximumX 3-returns Maximum 4-returns X corresponding to fy. ;  . Function Documentation. ◆ MinimBrent(). double ROOT::Math::BrentMethods::MinimBrent ; (; const IGenFunction * ; f, . int ; type, . double & ; xmin, . double & ; xmax, . double ; xmiddle, . double ; fy, . bool & ; ok, . int & ; niter, . double ; epsabs = 1.E-8, . double ; epsrel = 1.E-10, . int ; maxiter = 100 . ). Finds a minimum of a function, if the function is unimodal between xmin and xmax This method uses a combination of golden section search and parabolic interpolation Details about convergence and properties of this algorithm can be found in the book by R.P.Brent ""Algorithms for Minimization Without Derivatives"" or in the ""Numerical Recipes"", chapter 10.2 convergence is reached using tolerance = 2 *( epsrel * abs(x) + epsabs) ; type: 0-returns Minimu",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1BrentMethods.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1BrentMethods.html
https://root.cern/doc/master/namespaceROOT_1_1Math_1_1BrentMethods.html:1934,Availability,toler,tolerance,1934,"double &xmax, double fy, int npx=100, bool useLog=false);  Grid search implementation, used to bracket the minimum and later use Brent's method with the bracketed interval The step of the search is set to (xmax-xmin)/fNpx type: 0-returns MinimumX 1-returns Minimum 2-returns MaximumX 3-returns Maximum 4-returns X corresponding to fy. ;  . Function Documentation. ◆ MinimBrent(). double ROOT::Math::BrentMethods::MinimBrent ; (; const IGenFunction * ; f, . int ; type, . double & ; xmin, . double & ; xmax, . double ; xmiddle, . double ; fy, . bool & ; ok, . int & ; niter, . double ; epsabs = 1.E-8, . double ; epsrel = 1.E-10, . int ; maxiter = 100 . ). Finds a minimum of a function, if the function is unimodal between xmin and xmax This method uses a combination of golden section search and parabolic interpolation Details about convergence and properties of this algorithm can be found in the book by R.P.Brent ""Algorithms for Minimization Without Derivatives"" or in the ""Numerical Recipes"", chapter 10.2 convergence is reached using tolerance = 2 *( epsrel * abs(x) + epsabs) ; type: 0-returns MinimumX 1-returns Minimum 2-returns MaximumX 3-returns Maximum 4-returns X corresponding to fy; if ok=true the method has converged. Maxiter returns the actual number of iteration performed ; Definition at line 130 of file BrentMethods.cxx. ◆ MinimStep(). double ROOT::Math::BrentMethods::MinimStep ; (; const IGenFunction * ; f, . int ; type, . double & ; xmin, . double & ; xmax, . double ; fy, . int ; npx = 100, . bool ; useLog = false . ). Grid search implementation, used to bracket the minimum and later use Brent's method with the bracketed interval The step of the search is set to (xmax-xmin)/fNpx type: 0-returns MinimumX 1-returns Minimum 2-returns MaximumX 3-returns Maximum 4-returns X corresponding to fy. ; Definition at line 28 of file BrentMethods.cxx. ROOTMathBrentMethods. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1BrentMethods.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1BrentMethods.html
https://root.cern/doc/master/namespaceROOT_1_1Math_1_1BrentMethods.html:2176,Performance,perform,performed,2176,"double &xmax, double fy, int npx=100, bool useLog=false);  Grid search implementation, used to bracket the minimum and later use Brent's method with the bracketed interval The step of the search is set to (xmax-xmin)/fNpx type: 0-returns MinimumX 1-returns Minimum 2-returns MaximumX 3-returns Maximum 4-returns X corresponding to fy. ;  . Function Documentation. ◆ MinimBrent(). double ROOT::Math::BrentMethods::MinimBrent ; (; const IGenFunction * ; f, . int ; type, . double & ; xmin, . double & ; xmax, . double ; xmiddle, . double ; fy, . bool & ; ok, . int & ; niter, . double ; epsabs = 1.E-8, . double ; epsrel = 1.E-10, . int ; maxiter = 100 . ). Finds a minimum of a function, if the function is unimodal between xmin and xmax This method uses a combination of golden section search and parabolic interpolation Details about convergence and properties of this algorithm can be found in the book by R.P.Brent ""Algorithms for Minimization Without Derivatives"" or in the ""Numerical Recipes"", chapter 10.2 convergence is reached using tolerance = 2 *( epsrel * abs(x) + epsabs) ; type: 0-returns MinimumX 1-returns Minimum 2-returns MaximumX 3-returns Maximum 4-returns X corresponding to fy; if ok=true the method has converged. Maxiter returns the actual number of iteration performed ; Definition at line 130 of file BrentMethods.cxx. ◆ MinimStep(). double ROOT::Math::BrentMethods::MinimStep ; (; const IGenFunction * ; f, . int ; type, . double & ; xmin, . double & ; xmax, . double ; fy, . int ; npx = 100, . bool ; useLog = false . ). Grid search implementation, used to bracket the minimum and later use Brent's method with the bracketed interval The step of the search is set to (xmax-xmin)/fNpx type: 0-returns MinimumX 1-returns Minimum 2-returns MaximumX 3-returns Maximum 4-returns X corresponding to fy. ; Definition at line 28 of file BrentMethods.cxx. ROOTMathBrentMethods. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1BrentMethods.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1BrentMethods.html
https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Cephes.html:3487,Availability,error,error,3487," ; (; double ; a, . double ; b, . double ; x . ). Definition at line 581 of file SpecFuncCephes.cxx. ◆ incbd(). double ROOT::Math::Cephes::incbd ; (; double ; a, . double ; b, . double ; x . ). Definition at line 674 of file SpecFuncCephes.cxx. ◆ incbet(). double ROOT::Math::Cephes::incbet ; (; double ; aa, . double ; bb, . double ; xx . ). DESCRIPTION: ; Returns incomplete beta integral of the arguments, evaluated from zero to x. The function is defined as x; - -; | (a+b) | | a-1 b-1 . --------— t (1-t) dt. . (a) (b) - . 0; The domain of definition is 0 <= x <= 1. In this implementation a and b are restricted to positive values. The integral from x to 1 may be obtained by the symmetry relation; 1 - incbet( a, b, x ) = incbet( b, a, 1-x ).; The integral is evaluated by a continued fraction expansion or, when b*x is small, by a power series.; ACCURACY:; Tested at uniformly distributed random points (a,b,x) with a and b in ""domain"" and x between 0 and 1. Relative error arithmetic domain # trials peak rms IEEE 0,5 10000 6.9e-15 4.5e-16 IEEE 0,85 250000 2.2e-13 1.7e-14 IEEE 0,1000 30000 5.3e-12 6.3e-13 IEEE 0,10000 250000 9.3e-11 7.1e-12 IEEE 0,100000 10000 8.7e-10 4.8e-11 Outputs smaller than the IEEE gradual underflow threshold were excluded from these statistics.; ERROR MESSAGES: message condition value returned incbet domain x<0, x>1 0.0 incbet underflow 0.0; Cephes Math Library, Release 2.8: June, 2000 Copyright 1984, 1995, 2000 by Stephen L. Moshier ; Definition at line 484 of file SpecFuncCephes.cxx. ◆ incbi(). double ROOT::Math::Cephes::incbi ; (; double ; a, . double ; b, . double ; y . ). Definition at line 411 of file SpecFuncCephesInv.cxx. ◆ lgam(). double ROOT::Math::Cephes::lgam ; (; double ; x). Definition at line 197 of file SpecFuncCephes.cxx. ◆ ndtri(). double ROOT::Math::Cephes::ndtri ; (; double ; y). Definition at line 137 of file SpecFuncCephesInv.cxx. ◆ pseries(). double ROOT::Math::Cephes::pseries ; (; double ; a, . double ; b, . double ; x . ). D",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1Cephes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Cephes.html
https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Cephes.html:3350,Energy Efficiency,power,power,3350,"e SpecFuncCephes.cxx. ◆ igami(). double ROOT::Math::Cephes::igami ; (; double ; a, . double ; y . ). Definition at line 225 of file SpecFuncCephesInv.cxx. ◆ incbcf(). double ROOT::Math::Cephes::incbcf ; (; double ; a, . double ; b, . double ; x . ). Definition at line 581 of file SpecFuncCephes.cxx. ◆ incbd(). double ROOT::Math::Cephes::incbd ; (; double ; a, . double ; b, . double ; x . ). Definition at line 674 of file SpecFuncCephes.cxx. ◆ incbet(). double ROOT::Math::Cephes::incbet ; (; double ; aa, . double ; bb, . double ; xx . ). DESCRIPTION: ; Returns incomplete beta integral of the arguments, evaluated from zero to x. The function is defined as x; - -; | (a+b) | | a-1 b-1 . --------— t (1-t) dt. . (a) (b) - . 0; The domain of definition is 0 <= x <= 1. In this implementation a and b are restricted to positive values. The integral from x to 1 may be obtained by the symmetry relation; 1 - incbet( a, b, x ) = incbet( b, a, 1-x ).; The integral is evaluated by a continued fraction expansion or, when b*x is small, by a power series.; ACCURACY:; Tested at uniformly distributed random points (a,b,x) with a and b in ""domain"" and x between 0 and 1. Relative error arithmetic domain # trials peak rms IEEE 0,5 10000 6.9e-15 4.5e-16 IEEE 0,85 250000 2.2e-13 1.7e-14 IEEE 0,1000 30000 5.3e-12 6.3e-13 IEEE 0,10000 250000 9.3e-11 7.1e-12 IEEE 0,100000 10000 8.7e-10 4.8e-11 Outputs smaller than the IEEE gradual underflow threshold were excluded from these statistics.; ERROR MESSAGES: message condition value returned incbet domain x<0, x>1 0.0 incbet underflow 0.0; Cephes Math Library, Release 2.8: June, 2000 Copyright 1984, 1995, 2000 by Stephen L. Moshier ; Definition at line 484 of file SpecFuncCephes.cxx. ◆ incbi(). double ROOT::Math::Cephes::incbi ; (; double ; a, . double ; b, . double ; y . ). Definition at line 411 of file SpecFuncCephesInv.cxx. ◆ lgam(). double ROOT::Math::Cephes::lgam ; (; double ; x). Definition at line 197 of file SpecFuncCephes.cxx. ◆ ndtri(). dou",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1Cephes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Cephes.html
https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Cephes.html:3811,Integrability,message,message,3811,"bb, . double ; xx . ). DESCRIPTION: ; Returns incomplete beta integral of the arguments, evaluated from zero to x. The function is defined as x; - -; | (a+b) | | a-1 b-1 . --------— t (1-t) dt. . (a) (b) - . 0; The domain of definition is 0 <= x <= 1. In this implementation a and b are restricted to positive values. The integral from x to 1 may be obtained by the symmetry relation; 1 - incbet( a, b, x ) = incbet( b, a, 1-x ).; The integral is evaluated by a continued fraction expansion or, when b*x is small, by a power series.; ACCURACY:; Tested at uniformly distributed random points (a,b,x) with a and b in ""domain"" and x between 0 and 1. Relative error arithmetic domain # trials peak rms IEEE 0,5 10000 6.9e-15 4.5e-16 IEEE 0,85 250000 2.2e-13 1.7e-14 IEEE 0,1000 30000 5.3e-12 6.3e-13 IEEE 0,10000 250000 9.3e-11 7.1e-12 IEEE 0,100000 10000 8.7e-10 4.8e-11 Outputs smaller than the IEEE gradual underflow threshold were excluded from these statistics.; ERROR MESSAGES: message condition value returned incbet domain x<0, x>1 0.0 incbet underflow 0.0; Cephes Math Library, Release 2.8: June, 2000 Copyright 1984, 1995, 2000 by Stephen L. Moshier ; Definition at line 484 of file SpecFuncCephes.cxx. ◆ incbi(). double ROOT::Math::Cephes::incbi ; (; double ; a, . double ; b, . double ; y . ). Definition at line 411 of file SpecFuncCephesInv.cxx. ◆ lgam(). double ROOT::Math::Cephes::lgam ; (; double ; x). Definition at line 197 of file SpecFuncCephes.cxx. ◆ ndtri(). double ROOT::Math::Cephes::ndtri ; (; double ; y). Definition at line 137 of file SpecFuncCephesInv.cxx. ◆ pseries(). double ROOT::Math::Cephes::pseries ; (; double ; a, . double ; b, . double ; x . ). Definition at line 766 of file SpecFuncCephes.cxx. ◆ stirf(). static double ROOT::Math::Cephes::stirf ; (; double ; x). static . Definition at line 316 of file SpecFuncCephes.cxx. Variable Documentation. ◆ A. double ROOT::Math::Cephes::A[]. static . Initial value:= {; 8.11614167470508450300E-4,; -5.95061904284301438324",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1Cephes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Cephes.html
https://root.cern/doc/master/namespaceROOT_1_1Math_1_1CholeskyDecompHelpers.html:3177,Energy Efficiency,adapt,adapter,3177,"ecomposition (N = 1) More...;  ; struct  _inverter< F, 2, M >;  struct to obtain the inverse from a Cholesky decomposition (N = 2) More...;  ; struct  _inverter< F, 3, M >;  struct to obtain the inverse from a Cholesky decomposition (N = 3) More...;  ; struct  _inverter< F, 4, M >;  struct to obtain the inverse from a Cholesky decomposition (N = 4) More...;  ; struct  _inverter< F, 5, M >;  struct to obtain the inverse from a Cholesky decomposition (N = 5) More...;  ; struct  _inverter< F, 6, M >;  struct to obtain the inverse from a Cholesky decomposition (N = 6) More...;  ; struct  _inverterGenDim;  struct to obtain the inverse from a Cholesky decomposition (general dimensionality) More...;  ; struct  _solver;  struct to solve a linear system using its Cholesky decomposition More...;  ; struct  _solver< F, 0, V >;  struct to solve a linear system using its Cholesky decomposition (N=0) More...;  ; struct  _solver< F, 1, V >;  struct to solve a linear system using its Cholesky decomposition (N=1) More...;  ; struct  _solver< F, 2, V >;  struct to solve a linear system using its Cholesky decomposition (N=2) More...;  ; struct  _solver< F, 3, V >;  struct to solve a linear system using its Cholesky decomposition (N=3) More...;  ; struct  _solver< F, 4, V >;  struct to solve a linear system using its Cholesky decomposition (N=4) More...;  ; struct  _solver< F, 5, V >;  struct to solve a linear system using its Cholesky decomposition (N=5) More...;  ; struct  _solver< F, 6, V >;  struct to solve a linear system using its Cholesky decomposition (N=6) More...;  ; struct  _solverGenDim;  struct to solve a linear system using its Cholesky decomposition (generalised dimensionality) More...;  ; class  PackedArrayAdapter;  adapter for packed arrays (to SMatrix indexing conventions) More...;  . Detailed Description; helpers for CholeskyDecomp . ROOTMathCholeskyDecompHelpers. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1CholeskyDecompHelpers.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1CholeskyDecompHelpers.html
https://root.cern/doc/master/namespaceROOT_1_1Math_1_1CholeskyDecompHelpers.html:3177,Integrability,adapter,adapter,3177,"ecomposition (N = 1) More...;  ; struct  _inverter< F, 2, M >;  struct to obtain the inverse from a Cholesky decomposition (N = 2) More...;  ; struct  _inverter< F, 3, M >;  struct to obtain the inverse from a Cholesky decomposition (N = 3) More...;  ; struct  _inverter< F, 4, M >;  struct to obtain the inverse from a Cholesky decomposition (N = 4) More...;  ; struct  _inverter< F, 5, M >;  struct to obtain the inverse from a Cholesky decomposition (N = 5) More...;  ; struct  _inverter< F, 6, M >;  struct to obtain the inverse from a Cholesky decomposition (N = 6) More...;  ; struct  _inverterGenDim;  struct to obtain the inverse from a Cholesky decomposition (general dimensionality) More...;  ; struct  _solver;  struct to solve a linear system using its Cholesky decomposition More...;  ; struct  _solver< F, 0, V >;  struct to solve a linear system using its Cholesky decomposition (N=0) More...;  ; struct  _solver< F, 1, V >;  struct to solve a linear system using its Cholesky decomposition (N=1) More...;  ; struct  _solver< F, 2, V >;  struct to solve a linear system using its Cholesky decomposition (N=2) More...;  ; struct  _solver< F, 3, V >;  struct to solve a linear system using its Cholesky decomposition (N=3) More...;  ; struct  _solver< F, 4, V >;  struct to solve a linear system using its Cholesky decomposition (N=4) More...;  ; struct  _solver< F, 5, V >;  struct to solve a linear system using its Cholesky decomposition (N=5) More...;  ; struct  _solver< F, 6, V >;  struct to solve a linear system using its Cholesky decomposition (N=6) More...;  ; struct  _solverGenDim;  struct to solve a linear system using its Cholesky decomposition (generalised dimensionality) More...;  ; class  PackedArrayAdapter;  adapter for packed arrays (to SMatrix indexing conventions) More...;  . Detailed Description; helpers for CholeskyDecomp . ROOTMathCholeskyDecompHelpers. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1CholeskyDecompHelpers.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1CholeskyDecompHelpers.html
https://root.cern/doc/master/namespaceROOT_1_1Math_1_1CholeskyDecompHelpers.html:3177,Modifiability,adapt,adapter,3177,"ecomposition (N = 1) More...;  ; struct  _inverter< F, 2, M >;  struct to obtain the inverse from a Cholesky decomposition (N = 2) More...;  ; struct  _inverter< F, 3, M >;  struct to obtain the inverse from a Cholesky decomposition (N = 3) More...;  ; struct  _inverter< F, 4, M >;  struct to obtain the inverse from a Cholesky decomposition (N = 4) More...;  ; struct  _inverter< F, 5, M >;  struct to obtain the inverse from a Cholesky decomposition (N = 5) More...;  ; struct  _inverter< F, 6, M >;  struct to obtain the inverse from a Cholesky decomposition (N = 6) More...;  ; struct  _inverterGenDim;  struct to obtain the inverse from a Cholesky decomposition (general dimensionality) More...;  ; struct  _solver;  struct to solve a linear system using its Cholesky decomposition More...;  ; struct  _solver< F, 0, V >;  struct to solve a linear system using its Cholesky decomposition (N=0) More...;  ; struct  _solver< F, 1, V >;  struct to solve a linear system using its Cholesky decomposition (N=1) More...;  ; struct  _solver< F, 2, V >;  struct to solve a linear system using its Cholesky decomposition (N=2) More...;  ; struct  _solver< F, 3, V >;  struct to solve a linear system using its Cholesky decomposition (N=3) More...;  ; struct  _solver< F, 4, V >;  struct to solve a linear system using its Cholesky decomposition (N=4) More...;  ; struct  _solver< F, 5, V >;  struct to solve a linear system using its Cholesky decomposition (N=5) More...;  ; struct  _solver< F, 6, V >;  struct to solve a linear system using its Cholesky decomposition (N=6) More...;  ; struct  _solverGenDim;  struct to solve a linear system using its Cholesky decomposition (generalised dimensionality) More...;  ; class  PackedArrayAdapter;  adapter for packed arrays (to SMatrix indexing conventions) More...;  . Detailed Description; helpers for CholeskyDecomp . ROOTMathCholeskyDecompHelpers. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1CholeskyDecompHelpers.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1CholeskyDecompHelpers.html
https://root.cern/doc/master/namespaceROOT_1_1Math_1_1GSLRootHelper.html:215,Testability,test,test,215,". ROOT: ROOT::Math::GSLRootHelper Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; ROOT::Math::GSLRootHelper Namespace Reference. Helper functions to test convergence of Root-Finding algorithms. ; More... Functions; int TestDelta (double x1, double x0, double epsAbs, double epsRel);  ; int TestInterval (double xlow, double xup, double epsAbs, double epsRel);  ; int TestResidual (double f, double epsAbs);  . Detailed Description; Helper functions to test convergence of Root-Finding algorithms. ; Used by ROOT::Math::RootFinder class (see there for the doc) ; Function Documentation. ◆ TestDelta(). int ROOT::Math::GSLRootHelper::TestDelta ; (; double ; x1, . double ; x0, . double ; epsAbs, . double ; epsRel . ). Definition at line 47 of file GSLRootHelper.cxx. ◆ TestInterval(). int ROOT::Math::GSLRootHelper::TestInterval ; (; double ; xlow, . double ; xup, . double ; epsAbs, . double ; epsRel . ). Definition at line 42 of file GSLRootHelper.cxx. ◆ TestResidual(). int ROOT::Math::GSLRootHelper::TestResidual ; (; double ; f, . double ; epsAbs . ). Definition at line 52 of file GSLRootHelper.cxx. ROOTMathGSLRootHelper. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1GSLRootHelper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1GSLRootHelper.html
https://root.cern/doc/master/namespaceROOT_1_1Math_1_1GSLRootHelper.html:518,Testability,test,test,518,". ROOT: ROOT::Math::GSLRootHelper Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; ROOT::Math::GSLRootHelper Namespace Reference. Helper functions to test convergence of Root-Finding algorithms. ; More... Functions; int TestDelta (double x1, double x0, double epsAbs, double epsRel);  ; int TestInterval (double xlow, double xup, double epsAbs, double epsRel);  ; int TestResidual (double f, double epsAbs);  . Detailed Description; Helper functions to test convergence of Root-Finding algorithms. ; Used by ROOT::Math::RootFinder class (see there for the doc) ; Function Documentation. ◆ TestDelta(). int ROOT::Math::GSLRootHelper::TestDelta ; (; double ; x1, . double ; x0, . double ; epsAbs, . double ; epsRel . ). Definition at line 47 of file GSLRootHelper.cxx. ◆ TestInterval(). int ROOT::Math::GSLRootHelper::TestInterval ; (; double ; xlow, . double ; xup, . double ; epsAbs, . double ; epsRel . ). Definition at line 42 of file GSLRootHelper.cxx. ◆ TestResidual(). int ROOT::Math::GSLRootHelper::TestResidual ; (; double ; f, . double ; epsAbs . ). Definition at line 52 of file GSLRootHelper.cxx. ROOTMathGSLRootHelper. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1GSLRootHelper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1GSLRootHelper.html
https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Impl.html:5855,Availability,error,error,5855,"t, const RotationY &r);  ; template<class T > ; Transform3D< T > operator* (const Translation3D< T > &t, const RotationZ &r);  ; template<class T > ; Transform3D< T > operator* (const Translation3D< T > &t, const RotationZYX &r);  ; template<typename T > ; std::ostream & operator<< (std::ostream &os, const Plane3D< T > &p);  Stream Output and Input. ;  ; template<class T > ; std::ostream & operator<< (std::ostream &os, const Transform3D< T > &t);  print the 12 components of the Transform3D ;  ; template<class T > ; std::ostream & operator<< (std::ostream &os, const Translation3D< T > &t);  . Function Documentation. ◆ Eta_FromRhoZ(). template<typename Scalar > . Scalar ROOT::Math::Impl::Eta_FromRhoZ ; (; Scalar ; rho, . Scalar ; z . ). inline . Calculate eta given rho and zeta. ; This formula is faster than the standard calculation (below) from log(tan(theta/2) but one has to be careful when rho is much smaller than z (large eta values) Formula is eta = log( zs + sqrt(zs^2 + 1) ) where zs = z/rho; For large value of z_scaled (tan(theta) ) one can approximate the sqrt via a Taylor expansion We do the approximation of the sqrt if the numerical error is of the same order of second term of the sqrt.expansion: eps > 1/zs^4 => zs > 1/(eps^0.25); When rho == 0 we use etaMax (see definition in etaMax.h) ; Definition at line 48 of file eta.h. ◆ Eta_FromTheta(). template<typename Scalar > . Scalar ROOT::Math::Impl::Eta_FromTheta ; (; Scalar ; theta, . Scalar ; r . ). inline . Implementation of eta from -log(tan(theta/2)). ; This is convenient when theta is already known (for example in a polar coorindate system) ; Definition at line 85 of file eta.h. ◆ operator*() [1/34]. template<class T > . Transform3D< T > ROOT::Math::Impl::operator* ; (; const AxisAngle & ; r, . const Transform3D< T > & ; t . ). inline . Definition at line 1278 of file Transform3D.h. ◆ operator*() [2/34]. template<class T > . Transform3D< T > ROOT::Math::Impl::operator* ; (; const AxisAngle & ; r, . const ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1Impl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Impl.html
https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Impl.html:791,Testability,log,log,791,". ROOT: ROOT::Math::Impl Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions ; ROOT::Math::Impl Namespace Reference. Classes; class  Plane3D;  Class describing a geometrical plane in 3 dimensions. More...;  ; class  Transform3D;  Basic 3D Transformation class describing a rotation and then a translation The internal data are a 3D rotation data (represented as a 3x3 matrix) and a 3D vector data. More...;  ; class  Translation3D;  Class describing a 3 dimensional translation. More...;  . Functions; template<typename Scalar > ; Scalar Eta_FromRhoZ (Scalar rho, Scalar z);  Calculate eta given rho and zeta. ;  ; template<typename Scalar > ; Scalar Eta_FromTheta (Scalar theta, Scalar r);  Implementation of eta from -log(tan(theta/2)). ;  ; template<class T > ; Transform3D< T > operator* (const AxisAngle &r, const Transform3D< T > &t);  ; template<class T > ; Transform3D< T > operator* (const AxisAngle &r, const Translation3D< T > &t);  ; template<class T > ; Transform3D< T > operator* (const EulerAngles &r, const Transform3D< T > &t);  ; template<class T > ; Transform3D< T > operator* (const EulerAngles &r, const Translation3D< T > &t);  ; template<class T > ; Transform3D< T > operator* (const Quaternion &r, const Transform3D< T > &t);  ; template<class T > ; Transform3D< T > operator* (const Quaternion &r, const Translation3D< T > &t);  ; template<class T > ; Transform3D< T > operator* (const Rotation3D &r, const Transform3D< T > &t);  combine a rotation and a transformation to give a transform3d First the transformation then the rotation ;  ; template<class T > ; Transform3D< T > operator* (const Rotation3D &r, const Translation3D< T > &t);  combine a translation and a rotation to give a transform3d First the translation then the rotation ;  ; template<class T > ; Transform3D< T > operator* (const RotationX &r, const Transform3D< T > &t);  ; template<class T > ; Transform3D< T > operator* (const Rotat",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1Impl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Impl.html
https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Impl.html:5552,Testability,log,log,5552,"t, const RotationY &r);  ; template<class T > ; Transform3D< T > operator* (const Translation3D< T > &t, const RotationZ &r);  ; template<class T > ; Transform3D< T > operator* (const Translation3D< T > &t, const RotationZYX &r);  ; template<typename T > ; std::ostream & operator<< (std::ostream &os, const Plane3D< T > &p);  Stream Output and Input. ;  ; template<class T > ; std::ostream & operator<< (std::ostream &os, const Transform3D< T > &t);  print the 12 components of the Transform3D ;  ; template<class T > ; std::ostream & operator<< (std::ostream &os, const Translation3D< T > &t);  . Function Documentation. ◆ Eta_FromRhoZ(). template<typename Scalar > . Scalar ROOT::Math::Impl::Eta_FromRhoZ ; (; Scalar ; rho, . Scalar ; z . ). inline . Calculate eta given rho and zeta. ; This formula is faster than the standard calculation (below) from log(tan(theta/2) but one has to be careful when rho is much smaller than z (large eta values) Formula is eta = log( zs + sqrt(zs^2 + 1) ) where zs = z/rho; For large value of z_scaled (tan(theta) ) one can approximate the sqrt via a Taylor expansion We do the approximation of the sqrt if the numerical error is of the same order of second term of the sqrt.expansion: eps > 1/zs^4 => zs > 1/(eps^0.25); When rho == 0 we use etaMax (see definition in etaMax.h) ; Definition at line 48 of file eta.h. ◆ Eta_FromTheta(). template<typename Scalar > . Scalar ROOT::Math::Impl::Eta_FromTheta ; (; Scalar ; theta, . Scalar ; r . ). inline . Implementation of eta from -log(tan(theta/2)). ; This is convenient when theta is already known (for example in a polar coorindate system) ; Definition at line 85 of file eta.h. ◆ operator*() [1/34]. template<class T > . Transform3D< T > ROOT::Math::Impl::operator* ; (; const AxisAngle & ; r, . const Transform3D< T > & ; t . ). inline . Definition at line 1278 of file Transform3D.h. ◆ operator*() [2/34]. template<class T > . Transform3D< T > ROOT::Math::Impl::operator* ; (; const AxisAngle & ; r, . const ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1Impl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Impl.html
https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Impl.html:5663,Testability,log,log,5663,"t, const RotationY &r);  ; template<class T > ; Transform3D< T > operator* (const Translation3D< T > &t, const RotationZ &r);  ; template<class T > ; Transform3D< T > operator* (const Translation3D< T > &t, const RotationZYX &r);  ; template<typename T > ; std::ostream & operator<< (std::ostream &os, const Plane3D< T > &p);  Stream Output and Input. ;  ; template<class T > ; std::ostream & operator<< (std::ostream &os, const Transform3D< T > &t);  print the 12 components of the Transform3D ;  ; template<class T > ; std::ostream & operator<< (std::ostream &os, const Translation3D< T > &t);  . Function Documentation. ◆ Eta_FromRhoZ(). template<typename Scalar > . Scalar ROOT::Math::Impl::Eta_FromRhoZ ; (; Scalar ; rho, . Scalar ; z . ). inline . Calculate eta given rho and zeta. ; This formula is faster than the standard calculation (below) from log(tan(theta/2) but one has to be careful when rho is much smaller than z (large eta values) Formula is eta = log( zs + sqrt(zs^2 + 1) ) where zs = z/rho; For large value of z_scaled (tan(theta) ) one can approximate the sqrt via a Taylor expansion We do the approximation of the sqrt if the numerical error is of the same order of second term of the sqrt.expansion: eps > 1/zs^4 => zs > 1/(eps^0.25); When rho == 0 we use etaMax (see definition in etaMax.h) ; Definition at line 48 of file eta.h. ◆ Eta_FromTheta(). template<typename Scalar > . Scalar ROOT::Math::Impl::Eta_FromTheta ; (; Scalar ; theta, . Scalar ; r . ). inline . Implementation of eta from -log(tan(theta/2)). ; This is convenient when theta is already known (for example in a polar coorindate system) ; Definition at line 85 of file eta.h. ◆ operator*() [1/34]. template<class T > . Transform3D< T > ROOT::Math::Impl::operator* ; (; const AxisAngle & ; r, . const Transform3D< T > & ; t . ). inline . Definition at line 1278 of file Transform3D.h. ◆ operator*() [2/34]. template<class T > . Transform3D< T > ROOT::Math::Impl::operator* ; (; const AxisAngle & ; r, . const ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1Impl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Impl.html
https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Impl.html:6214,Testability,log,log,6214,"ss T > ; std::ostream & operator<< (std::ostream &os, const Translation3D< T > &t);  . Function Documentation. ◆ Eta_FromRhoZ(). template<typename Scalar > . Scalar ROOT::Math::Impl::Eta_FromRhoZ ; (; Scalar ; rho, . Scalar ; z . ). inline . Calculate eta given rho and zeta. ; This formula is faster than the standard calculation (below) from log(tan(theta/2) but one has to be careful when rho is much smaller than z (large eta values) Formula is eta = log( zs + sqrt(zs^2 + 1) ) where zs = z/rho; For large value of z_scaled (tan(theta) ) one can approximate the sqrt via a Taylor expansion We do the approximation of the sqrt if the numerical error is of the same order of second term of the sqrt.expansion: eps > 1/zs^4 => zs > 1/(eps^0.25); When rho == 0 we use etaMax (see definition in etaMax.h) ; Definition at line 48 of file eta.h. ◆ Eta_FromTheta(). template<typename Scalar > . Scalar ROOT::Math::Impl::Eta_FromTheta ; (; Scalar ; theta, . Scalar ; r . ). inline . Implementation of eta from -log(tan(theta/2)). ; This is convenient when theta is already known (for example in a polar coorindate system) ; Definition at line 85 of file eta.h. ◆ operator*() [1/34]. template<class T > . Transform3D< T > ROOT::Math::Impl::operator* ; (; const AxisAngle & ; r, . const Transform3D< T > & ; t . ). inline . Definition at line 1278 of file Transform3D.h. ◆ operator*() [2/34]. template<class T > . Transform3D< T > ROOT::Math::Impl::operator* ; (; const AxisAngle & ; r, . const Translation3D< T > & ; t . ). inline . Definition at line 1100 of file Transform3D.h. ◆ operator*() [3/34]. template<class T > . Transform3D< T > ROOT::Math::Impl::operator* ; (; const EulerAngles & ; r, . const Transform3D< T > & ; t . ). inline . Definition at line 1272 of file Transform3D.h. ◆ operator*() [4/34]. template<class T > . Transform3D< T > ROOT::Math::Impl::operator* ; (; const EulerAngles & ; r, . const Translation3D< T > & ; t . ). inline . Definition at line 1106 of file Transform3D.h. ◆ ope",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1Impl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Impl.html
https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Integration.html:370,Deployability,integrat,integration,370,". ROOT: ROOT::Math::Integration Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Enumerations ; ROOT::Math::Integration Namespace Reference. Enumerations; enum  GKRule { ;   kGAUSS15 = 1; , kGAUSS21 = 2; , kGAUSS31 = 3; , kGAUSS41 = 4; , ;   kGAUSS51 = 5; , kGAUSS61 = 6. };  enumeration specifying the Gauss-KronRod integration rule for ADAPTIVE integration type More...;  . ROOTMathIntegration. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1Integration.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Integration.html
https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Integration.html:400,Deployability,integrat,integration,400,". ROOT: ROOT::Math::Integration Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Enumerations ; ROOT::Math::Integration Namespace Reference. Enumerations; enum  GKRule { ;   kGAUSS15 = 1; , kGAUSS21 = 2; , kGAUSS31 = 3; , kGAUSS41 = 4; , ;   kGAUSS51 = 5; , kGAUSS61 = 6. };  enumeration specifying the Gauss-KronRod integration rule for ADAPTIVE integration type More...;  . ROOTMathIntegration. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1Integration.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Integration.html
https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Integration.html:370,Integrability,integrat,integration,370,". ROOT: ROOT::Math::Integration Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Enumerations ; ROOT::Math::Integration Namespace Reference. Enumerations; enum  GKRule { ;   kGAUSS15 = 1; , kGAUSS21 = 2; , kGAUSS31 = 3; , kGAUSS41 = 4; , ;   kGAUSS51 = 5; , kGAUSS61 = 6. };  enumeration specifying the Gauss-KronRod integration rule for ADAPTIVE integration type More...;  . ROOTMathIntegration. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1Integration.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Integration.html
https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Integration.html:400,Integrability,integrat,integration,400,". ROOT: ROOT::Math::Integration Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Enumerations ; ROOT::Math::Integration Namespace Reference. Enumerations; enum  GKRule { ;   kGAUSS15 = 1; , kGAUSS21 = 2; , kGAUSS31 = 3; , kGAUSS41 = 4; , ;   kGAUSS51 = 5; , kGAUSS61 = 6. };  enumeration specifying the Gauss-KronRod integration rule for ADAPTIVE integration type More...;  . ROOTMathIntegration. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1Integration.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Integration.html
https://root.cern/doc/master/namespaceROOT_1_1Math_1_1IntegrationMultiDim.html:334,Deployability,integrat,integration,334,". ROOT: ROOT::Math::IntegrationMultiDim Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Enumerations ; ROOT::Math::IntegrationMultiDim Namespace Reference. Enumerations; enum  Type { ;   kDEFAULT = -1; , kADAPTIVE; , kVEGAS; , kMISER; , ;   kPLAIN. };  enumeration specifying the integration types. More...;  . ROOTMathIntegrationMultiDim. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1IntegrationMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1IntegrationMultiDim.html
https://root.cern/doc/master/namespaceROOT_1_1Math_1_1IntegrationMultiDim.html:334,Integrability,integrat,integration,334,". ROOT: ROOT::Math::IntegrationMultiDim Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Enumerations ; ROOT::Math::IntegrationMultiDim Namespace Reference. Enumerations; enum  Type { ;   kDEFAULT = -1; , kADAPTIVE; , kVEGAS; , kMISER; , ;   kPLAIN. };  enumeration specifying the integration types. More...;  . ROOTMathIntegrationMultiDim. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1IntegrationMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1IntegrationMultiDim.html
https://root.cern/doc/master/namespaceROOT_1_1Math_1_1IntegrationOneDim.html:360,Deployability,integrat,integration,360,". ROOT: ROOT::Math::IntegrationOneDim Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Enumerations ; ROOT::Math::IntegrationOneDim Namespace Reference. Enumerations; enum  Type { ;   kDEFAULT = -1; , kGAUSS; , kLEGENDRE; , kADAPTIVE; , ;   kADAPTIVESINGULAR; , kNONADAPTIVE. };  enumeration specifying the integration types. More...;  . ROOTMathIntegrationOneDim. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1IntegrationOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1IntegrationOneDim.html
https://root.cern/doc/master/namespaceROOT_1_1Math_1_1IntegrationOneDim.html:360,Integrability,integrat,integration,360,". ROOT: ROOT::Math::IntegrationOneDim Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Enumerations ; ROOT::Math::IntegrationOneDim Namespace Reference. Enumerations; enum  Type { ;   kDEFAULT = -1; , kGAUSS; , kLEGENDRE; , kADAPTIVE; , ;   kADAPTIVESINGULAR; , kNONADAPTIVE. };  enumeration specifying the integration types. More...;  . ROOTMathIntegrationOneDim. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1IntegrationOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1IntegrationOneDim.html
https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Interpolation.html:379,Availability,avail,availables,379,". ROOT: ROOT::Math::Interpolation Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Enumerations ; ROOT::Math::Interpolation Namespace Reference. Enumerations; enum  Type { ;   kLINEAR; , kPOLYNOMIAL; , kCSPLINE; , kCSPLINE_PERIODIC; , ;   kAKIMA; , kAKIMA_PERIODIC. };  Enumeration defining the types of interpolation methods availables. More...;  . ROOTMathInterpolation. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1Interpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Interpolation.html
https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Roots.html:278,Usability,simpl,simplest,278,". ROOT: ROOT::Math::Roots Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; ROOT::Math::Roots Namespace Reference. Root-Finding Algorithms. ; More... Classes; class  Bisection;  Roots::Bisection Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one. More...;  ; class  Brent;  Brent-Dekker algorithm which combines an interpolation strategy with the bisection algorithm See the GSL manual for more information. More...;  ; class  FalsePos;  False Position algorithm based on linear interpolation. More...;  ; class  Newton;  a Newton algorithm, which computes the derivative at each iteration See the GSL manual for more information More...;  ; class  Secant;  Secant algorithm, simplified version of Newton method, which does not require the derivative at every step. More...;  ; class  Steffenson;  Steffenson method, providing the fastes convergence. More...;  . Detailed Description; Root-Finding Algorithms. . ROOTMathRoots. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1Roots.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Roots.html
https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Roots.html:783,Usability,simpl,simplified,783,". ROOT: ROOT::Math::Roots Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; ROOT::Math::Roots Namespace Reference. Root-Finding Algorithms. ; More... Classes; class  Bisection;  Roots::Bisection Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one. More...;  ; class  Brent;  Brent-Dekker algorithm which combines an interpolation strategy with the bisection algorithm See the GSL manual for more information. More...;  ; class  FalsePos;  False Position algorithm based on linear interpolation. More...;  ; class  Newton;  a Newton algorithm, which computes the derivative at each iteration See the GSL manual for more information More...;  ; class  Secant;  Secant algorithm, simplified version of Newton method, which does not require the derivative at every step. More...;  ; class  Steffenson;  Steffenson method, providing the fastes convergence. More...;  . Detailed Description; Root-Finding Algorithms. . ROOTMathRoots. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1Roots.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Roots.html
https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Util.html:293,Safety,safe,safe,293,. ROOT: ROOT::Math::Util Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; ROOT::Math::Util Namespace Reference. namespace defining Utility functions needed by mathcore ; More... Functions; template<class T > ; T EvalLog (T x);  safe evaluation of log(x) with a protections against negative or zero argument to the log smooth linear extrapolation below function values smaller than epsilon (better than a simple cut-off) ;  ; template<class T > ; std::string ToString (const T &val);  Utility function for conversion to strings. ;  . Detailed Description; namespace defining Utility functions needed by mathcore ; Function Documentation. ◆ EvalLog(). template<class T > . T ROOT::Math::Util::EvalLog ; (; T ; x). inline . safe evaluation of log(x) with a protections against negative or zero argument to the log smooth linear extrapolation below function values smaller than epsilon (better than a simple cut-off) ; Definition at line 64 of file Util.h. ◆ ToString(). template<class T > . std::string ROOT::Math::Util::ToString ; (; const T & ; val). Utility function for conversion to strings. ; Definition at line 50 of file Util.h. ROOTMathUtil. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1Util.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Util.html
https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Util.html:786,Safety,safe,safe,786,. ROOT: ROOT::Math::Util Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; ROOT::Math::Util Namespace Reference. namespace defining Utility functions needed by mathcore ; More... Functions; template<class T > ; T EvalLog (T x);  safe evaluation of log(x) with a protections against negative or zero argument to the log smooth linear extrapolation below function values smaller than epsilon (better than a simple cut-off) ;  ; template<class T > ; std::string ToString (const T &val);  Utility function for conversion to strings. ;  . Detailed Description; namespace defining Utility functions needed by mathcore ; Function Documentation. ◆ EvalLog(). template<class T > . T ROOT::Math::Util::EvalLog ; (; T ; x). inline . safe evaluation of log(x) with a protections against negative or zero argument to the log smooth linear extrapolation below function values smaller than epsilon (better than a simple cut-off) ; Definition at line 64 of file Util.h. ◆ ToString(). template<class T > . std::string ROOT::Math::Util::ToString ; (; const T & ; val). Utility function for conversion to strings. ; Definition at line 50 of file Util.h. ROOTMathUtil. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1Util.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Util.html
https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Util.html:312,Testability,log,log,312,. ROOT: ROOT::Math::Util Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; ROOT::Math::Util Namespace Reference. namespace defining Utility functions needed by mathcore ; More... Functions; template<class T > ; T EvalLog (T x);  safe evaluation of log(x) with a protections against negative or zero argument to the log smooth linear extrapolation below function values smaller than epsilon (better than a simple cut-off) ;  ; template<class T > ; std::string ToString (const T &val);  Utility function for conversion to strings. ;  . Detailed Description; namespace defining Utility functions needed by mathcore ; Function Documentation. ◆ EvalLog(). template<class T > . T ROOT::Math::Util::EvalLog ; (; T ; x). inline . safe evaluation of log(x) with a protections against negative or zero argument to the log smooth linear extrapolation below function values smaller than epsilon (better than a simple cut-off) ; Definition at line 64 of file Util.h. ◆ ToString(). template<class T > . std::string ROOT::Math::Util::ToString ; (; const T & ; val). Utility function for conversion to strings. ; Definition at line 50 of file Util.h. ROOTMathUtil. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1Util.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Util.html
https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Util.html:379,Testability,log,log,379,. ROOT: ROOT::Math::Util Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; ROOT::Math::Util Namespace Reference. namespace defining Utility functions needed by mathcore ; More... Functions; template<class T > ; T EvalLog (T x);  safe evaluation of log(x) with a protections against negative or zero argument to the log smooth linear extrapolation below function values smaller than epsilon (better than a simple cut-off) ;  ; template<class T > ; std::string ToString (const T &val);  Utility function for conversion to strings. ;  . Detailed Description; namespace defining Utility functions needed by mathcore ; Function Documentation. ◆ EvalLog(). template<class T > . T ROOT::Math::Util::EvalLog ; (; T ; x). inline . safe evaluation of log(x) with a protections against negative or zero argument to the log smooth linear extrapolation below function values smaller than epsilon (better than a simple cut-off) ; Definition at line 64 of file Util.h. ◆ ToString(). template<class T > . std::string ROOT::Math::Util::ToString ; (; const T & ; val). Utility function for conversion to strings. ; Definition at line 50 of file Util.h. ROOTMathUtil. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1Util.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Util.html
https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Util.html:805,Testability,log,log,805,. ROOT: ROOT::Math::Util Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; ROOT::Math::Util Namespace Reference. namespace defining Utility functions needed by mathcore ; More... Functions; template<class T > ; T EvalLog (T x);  safe evaluation of log(x) with a protections against negative or zero argument to the log smooth linear extrapolation below function values smaller than epsilon (better than a simple cut-off) ;  ; template<class T > ; std::string ToString (const T &val);  Utility function for conversion to strings. ;  . Detailed Description; namespace defining Utility functions needed by mathcore ; Function Documentation. ◆ EvalLog(). template<class T > . T ROOT::Math::Util::EvalLog ; (; T ; x). inline . safe evaluation of log(x) with a protections against negative or zero argument to the log smooth linear extrapolation below function values smaller than epsilon (better than a simple cut-off) ; Definition at line 64 of file Util.h. ◆ ToString(). template<class T > . std::string ROOT::Math::Util::ToString ; (; const T & ; val). Utility function for conversion to strings. ; Definition at line 50 of file Util.h. ROOTMathUtil. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1Util.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Util.html
https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Util.html:872,Testability,log,log,872,. ROOT: ROOT::Math::Util Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; ROOT::Math::Util Namespace Reference. namespace defining Utility functions needed by mathcore ; More... Functions; template<class T > ; T EvalLog (T x);  safe evaluation of log(x) with a protections against negative or zero argument to the log smooth linear extrapolation below function values smaller than epsilon (better than a simple cut-off) ;  ; template<class T > ; std::string ToString (const T &val);  Utility function for conversion to strings. ;  . Detailed Description; namespace defining Utility functions needed by mathcore ; Function Documentation. ◆ EvalLog(). template<class T > . T ROOT::Math::Util::EvalLog ; (; T ; x). inline . safe evaluation of log(x) with a protections against negative or zero argument to the log smooth linear extrapolation below function values smaller than epsilon (better than a simple cut-off) ; Definition at line 64 of file Util.h. ◆ ToString(). template<class T > . std::string ROOT::Math::Util::ToString ; (; const T & ; val). Utility function for conversion to strings. ; Definition at line 50 of file Util.h. ROOTMathUtil. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1Util.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Util.html
https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Util.html:469,Usability,simpl,simple,469,. ROOT: ROOT::Math::Util Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; ROOT::Math::Util Namespace Reference. namespace defining Utility functions needed by mathcore ; More... Functions; template<class T > ; T EvalLog (T x);  safe evaluation of log(x) with a protections against negative or zero argument to the log smooth linear extrapolation below function values smaller than epsilon (better than a simple cut-off) ;  ; template<class T > ; std::string ToString (const T &val);  Utility function for conversion to strings. ;  . Detailed Description; namespace defining Utility functions needed by mathcore ; Function Documentation. ◆ EvalLog(). template<class T > . T ROOT::Math::Util::EvalLog ; (; T ; x). inline . safe evaluation of log(x) with a protections against negative or zero argument to the log smooth linear extrapolation below function values smaller than epsilon (better than a simple cut-off) ; Definition at line 64 of file Util.h. ◆ ToString(). template<class T > . std::string ROOT::Math::Util::ToString ; (; const T & ; val). Utility function for conversion to strings. ; Definition at line 50 of file Util.h. ROOTMathUtil. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1Util.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Util.html
https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Util.html:962,Usability,simpl,simple,962,. ROOT: ROOT::Math::Util Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; ROOT::Math::Util Namespace Reference. namespace defining Utility functions needed by mathcore ; More... Functions; template<class T > ; T EvalLog (T x);  safe evaluation of log(x) with a protections against negative or zero argument to the log smooth linear extrapolation below function values smaller than epsilon (better than a simple cut-off) ;  ; template<class T > ; std::string ToString (const T &val);  Utility function for conversion to strings. ;  . Detailed Description; namespace defining Utility functions needed by mathcore ; Function Documentation. ◆ EvalLog(). template<class T > . T ROOT::Math::Util::EvalLog ; (; T ; x). inline . safe evaluation of log(x) with a protections against negative or zero argument to the log smooth linear extrapolation below function values smaller than epsilon (better than a simple cut-off) ; Definition at line 64 of file Util.h. ◆ ToString(). template<class T > . std::string ROOT::Math::Util::ToString ; (; const T & ; val). Utility function for conversion to strings. ; Definition at line 50 of file Util.h. ROOTMathUtil. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1Util.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Util.html
https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:3760,Availability,avail,available,3760,"umili method. More...;  ; class  FumiliGradientCalculator;  Fumili gradient calculator using external gradient provided by FCN Note that the computed Hessian and G2 are an approximation valid for small residuals. More...;  ; class  FumiliMaximumLikelihoodFCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliMinimizer;  Instantiates the seed generator and Minimum builder for the Fumili minimization method. More...;  ; class  FumiliStandardChi2FCN;  Class implementing the standard chi square function, which is the sum of the squares of the figures-of-merit calculated for each measurement point, the individual figures-of-merit being: (the Value predicted by the model-measured Value)/standard deviation. More...;  ; class  FumiliStandardMaximumLikelihoodFCN;  Class implementing the Elements member function for the standard maximum likelihood method. More...;  ; class  FunctionGradient;  ; class  FunctionMinimum;  class holding the full result of the minimization; both internal and external (MnUserParameterState) representation available for the parameters at the Minimum More...;  ; class  gen;  ; class  GenericFunction;  Class from which all the other classes, representing functions, inherit. More...;  ; class  GradientCalculator;  interface class for gradient calculators More...;  ; class  HessianGradientCalculator;  HessianGradientCalculator: class to calculate Gradient for Hessian. More...;  ; class  InitialGradientCalculator;  Class to calculate an initial estimate of the gradient. More...;  ; class  LASquareMatrix;  ; class  LASymMatrix;  Class describing a symmetric matrix of size n. More...;  ; class  LAVector;  ; class  MatrixInverse;  ; class  MatrixInverse< vec, M, T >;  ; class  MinimumBuilder;  ; class  MinimumError;  MinimumError keeps the inv. More...;  ; class  MinimumErrorUpdator;  ; class  MinimumParameters;  ; class  MinimumSeed;  ; class  MinimumSeedGenerator;  base class for seed generators (starting values); the seed generator",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:5472,Availability,error,error,5472,"AVector;  ; class  MatrixInverse;  ; class  MatrixInverse< vec, M, T >;  ; class  MinimumBuilder;  ; class  MinimumError;  MinimumError keeps the inv. More...;  ; class  MinimumErrorUpdator;  ; class  MinimumParameters;  ; class  MinimumSeed;  ; class  MinimumSeedGenerator;  base class for seed generators (starting values); the seed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; More...;  ; class  MinimumState;  MinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder). More...;  ; class  MinosError;  Class holding the result of Minos (lower and upper values) for a specific parameter. More...;  ; class  Minuit2Minimizer;  Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm. More...;  ; class  MinuitParameter;  class for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; More...;  ; class  MnApplication;  application interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization More...;  ; class  MnContours;  API class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors;. More...;  ; class  MnCovarianceSqueeze;  class to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index More...;  ; class  MnCross;  ; class  MnEigen;  API class for calculating the eigenvalues of symmetric matrix. More...;  ; class  MnFcn;  Wrapper class to FCNBase interface used internally by Minuit. More...;  ; class  MnFumiliMinimize;  API class for minimization using Fumil",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:5776,Availability,error,errors,5776,"mState;  MinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder). More...;  ; class  MinosError;  Class holding the result of Minos (lower and upper values) for a specific parameter. More...;  ; class  Minuit2Minimizer;  Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm. More...;  ; class  MinuitParameter;  class for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; More...;  ; class  MnApplication;  application interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization More...;  ; class  MnContours;  API class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors;. More...;  ; class  MnCovarianceSqueeze;  class to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index More...;  ; class  MnCross;  ; class  MnEigen;  API class for calculating the eigenvalues of symmetric matrix. More...;  ; class  MnFcn;  Wrapper class to FCNBase interface used internally by Minuit. More...;  ; class  MnFumiliMinimize;  API class for minimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc.; also used by MnMinos and MnContours;. More...;  ; class  MnFunctionCross;  MnFunctionCross. More...;  ; class  MnGlobalCorrelationCoeff;  class for global correlation coefficient More...;  ; class  MnHesse;  API class for calculating the numerical covariance matrix (== 2x Inverse Hessian == 2x Inverse 2nd derivative); can be used by t",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:5921,Availability,error,errors,5921,"mState;  MinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder). More...;  ; class  MinosError;  Class holding the result of Minos (lower and upper values) for a specific parameter. More...;  ; class  Minuit2Minimizer;  Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm. More...;  ; class  MinuitParameter;  class for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; More...;  ; class  MnApplication;  application interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization More...;  ; class  MnContours;  API class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors;. More...;  ; class  MnCovarianceSqueeze;  class to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index More...;  ; class  MnCross;  ; class  MnEigen;  API class for calculating the eigenvalues of symmetric matrix. More...;  ; class  MnFcn;  Wrapper class to FCNBase interface used internally by Minuit. More...;  ; class  MnFumiliMinimize;  API class for minimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc.; also used by MnMinos and MnContours;. More...;  ; class  MnFunctionCross;  MnFunctionCross. More...;  ; class  MnGlobalCorrelationCoeff;  class for global correlation coefficient More...;  ; class  MnHesse;  API class for calculating the numerical covariance matrix (== 2x Inverse Hessian == 2x Inverse 2nd derivative); can be used by t",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:7636,Availability,error,errors,7636,"...;  ; class  MnHesse;  API class for calculating the numerical covariance matrix (== 2x Inverse Hessian == 2x Inverse 2nd derivative); can be used by the user or Minuit itself. More...;  ; class  MnLineSearch;  Implements a 1-dimensional minimization along a given direction (i.e. More...;  ; class  MnMachinePrecision;  Sets the relative floating point (double) arithmetic precision. More...;  ; class  MnMigrad;  API class for minimization using Variable Metric technology (""MIGRAD""); allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc.; also used by MnMinos and MnContours;. More...;  ; class  MnMinimize;  API class for minimization using Variable Metric technology (""MIGRAD""); allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc.; also used by MnMinos and MnContours;. More...;  ; class  MnMinos;  API class for Minos Error analysis (asymmetric errors); minimization has to be done before and Minimum must be valid; possibility to ask only for one side of the Minos Error;. More...;  ; class  MnParabola;  This class defines a parabola of the form a*x*x + b*x + c. More...;  ; class  MnParabolaFactory;  ; class  MnParabolaPoint;  A point of a parabola. More...;  ; class  MnParameterScan;  Scans the values of FCN as a function of one Parameter and retains the best function and Parameter values found. More...;  ; class  MnParStr;  ; class  MnPlot;  MnPlot produces a text-screen graphical output of (x,y) points, e.g. More...;  ; class  MnPosDef;  Force the covariance matrix to be positive defined by adding extra terms in the diagonal. More...;  ; class  MnPrint;  ; class  MnRefCountedPointer;  ; class  MnReferenceCounter;  ; class  MnScan;  API class for minimization using a scan method to find the minimum; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc.;. More...;  ; class  MnSeedGenerator;  concret",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:9761,Availability,error,errors,9761,"ete implementation of the MinimumSeedGenerator interface; used within ModularFunctionMinimizer; More...;  ; class  MnSimplex;  API class for minimization using the Simplex method, which does not need and use the derivatives of the function, but only function values. More...;  ; class  MnStrategy;  API class for defining four levels of strategies: low (0), medium (1), high (2), very high (>=3); acts on: Migrad (behavioural), Minos (lowers strategy by 1 for Minos-own minimization), Hesse (iterations), Numerical2PDerivative (iterations) More...;  ; class  MnTiny;  ; class  MnTraceObject;  ; class  MnUserCovariance;  Class containing the covariance matrix data represented as a vector of size n*(n+1)/2 Used to hide internal matrix representation to user. More...;  ; class  MnUserFcn;  Wrapper used by Minuit of FCN interface containing a reference to the transformation object. More...;  ; class  MnUserParameters;  API class for the user interaction with the parameters; serves as input to the minimizer as well as output from it; users can interact: Fix/release parameters, set values and errors, etc.; parameters can be accessed via their Parameter number (determined internally by Minuit and followed the order how the parameters are created) or via their user-specified Name (10 character string). More...;  ; class  MnUserParameterState;  class which holds the external user and/or internal Minuit representation of the parameters and errors; transformation internal <-> external on demand; More...;  ; class  MnUserTransformation;  class dealing with the transformation between user specified parameters (external) and internal parameters used for minimization More...;  ; class  MnVectorTransform;  ; class  ModularFunctionMinimizer;  Base common class providing the API for all the minimizer Various Minimize methods are provided varying on the type of FCN function passesd and on the objects used for the parameters. More...;  ; class  MPIProcess;  ; class  MPITerminate;  ; class  Ne",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:10111,Availability,error,errors,10111," (behavioural), Minos (lowers strategy by 1 for Minos-own minimization), Hesse (iterations), Numerical2PDerivative (iterations) More...;  ; class  MnTiny;  ; class  MnTraceObject;  ; class  MnUserCovariance;  Class containing the covariance matrix data represented as a vector of size n*(n+1)/2 Used to hide internal matrix representation to user. More...;  ; class  MnUserFcn;  Wrapper used by Minuit of FCN interface containing a reference to the transformation object. More...;  ; class  MnUserParameters;  API class for the user interaction with the parameters; serves as input to the minimizer as well as output from it; users can interact: Fix/release parameters, set values and errors, etc.; parameters can be accessed via their Parameter number (determined internally by Minuit and followed the order how the parameters are created) or via their user-specified Name (10 character string). More...;  ; class  MnUserParameterState;  class which holds the external user and/or internal Minuit representation of the parameters and errors; transformation internal <-> external on demand; More...;  ; class  MnUserTransformation;  class dealing with the transformation between user specified parameters (external) and internal parameters used for minimization More...;  ; class  MnVectorTransform;  ; class  ModularFunctionMinimizer;  Base common class providing the API for all the minimizer Various Minimize methods are provided varying on the type of FCN function passesd and on the objects used for the parameters. More...;  ; class  MPIProcess;  ; class  MPITerminate;  ; class  NegativeG2LineSearch;  In case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive. More...;  ; class  Numerical2PGradientCalculator;  class performing the numerical gradient calculation More...;  ; class  NumericalDerivator; ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:12717,Availability,error,error,12717,"implex. More...;  ; class  SimplexParameters;  class describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process. More...;  ; class  SimplexSeedGenerator;  generate Simplex starting point (state) More...;  ; class  SinParameterTransformation;  class for the transformation for double-limited parameter Using a sin function one goes from a double-limited parameter range to an unlimited one More...;  ; class  SqrtLowParameterTransformation;  Transformation from external to internal Parameter based on sqrt(1 + x**2) More...;  ; class  SqrtUpParameterTransformation;  Transformation from external to internal Parameter based on sqrt(1 + x**2) More...;  ; class  StackAllocator;  StackAllocator controls the memory allocation/deallocation of Minuit. More...;  ; class  StackAllocatorHolder;  ; class  StackError;  ; class  StackOverflow;  define stack allocator symbol More...;  ; class  sym;  ; class  VariableMetricBuilder;  Build (find) function minimum using the Variable Metric method (MIGRAD) Two possible error updators can be chosen. More...;  ; class  VariableMetricEDMEstimator;  ; class  VariableMetricMinimizer;  Instantiates the SeedGenerator and MinimumBuilder for Variable Metric Minimization method. More...;  ; class  vec;  ; class  VectorOuterProduct;  . Typedefs; typedef LASymMatrix MnAlgebraicSymMatrix;  ; typedef LAVector MnAlgebraicVector;  . Enumerations; enum  EMinimizerType { ;   kMigrad; , kSimplex; , kCombined; , kScan; , ;   kFumili; , kMigradBFGS. };  ; enum class  GradientParameterSpace { External; , Internal; };  . Functions; int ControlPrintLevel ();  ; LAVector eigenvalues (const LASymMatrix &mat);  ; double inner_product (const LAVector &, const LAVector &);  ; template<class mt , class M , class T > ; ABObj< mt, MatrixInverse< mt, ABObj< mt, M, T >, T >, T > Inverse (const ABObj< mt, M, T > &obj);  ; ABObj< sym, MatrixInverse< sym, ABObj< sym, LASymMatrix, double >, double >, double > Inverse (const ABObj< sym,",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:5434,Deployability,release,release,5434,"AVector;  ; class  MatrixInverse;  ; class  MatrixInverse< vec, M, T >;  ; class  MinimumBuilder;  ; class  MinimumError;  MinimumError keeps the inv. More...;  ; class  MinimumErrorUpdator;  ; class  MinimumParameters;  ; class  MinimumSeed;  ; class  MinimumSeedGenerator;  base class for seed generators (starting values); the seed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; More...;  ; class  MinimumState;  MinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder). More...;  ; class  MinosError;  Class holding the result of Minos (lower and upper values) for a specific parameter. More...;  ; class  Minuit2Minimizer;  Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm. More...;  ; class  MinuitParameter;  class for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; More...;  ; class  MnApplication;  application interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization More...;  ; class  MnContours;  API class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors;. More...;  ; class  MnCovarianceSqueeze;  class to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index More...;  ; class  MnCross;  ; class  MnEigen;  API class for calculating the eigenvalues of symmetric matrix. More...;  ; class  MnFcn;  Wrapper class to FCNBase interface used internally by Minuit. More...;  ; class  MnFumiliMinimize;  API class for minimization using Fumil",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:9726,Deployability,release,release,9726,"ete implementation of the MinimumSeedGenerator interface; used within ModularFunctionMinimizer; More...;  ; class  MnSimplex;  API class for minimization using the Simplex method, which does not need and use the derivatives of the function, but only function values. More...;  ; class  MnStrategy;  API class for defining four levels of strategies: low (0), medium (1), high (2), very high (>=3); acts on: Migrad (behavioural), Minos (lowers strategy by 1 for Minos-own minimization), Hesse (iterations), Numerical2PDerivative (iterations) More...;  ; class  MnTiny;  ; class  MnTraceObject;  ; class  MnUserCovariance;  Class containing the covariance matrix data represented as a vector of size n*(n+1)/2 Used to hide internal matrix representation to user. More...;  ; class  MnUserFcn;  Wrapper used by Minuit of FCN interface containing a reference to the transformation object. More...;  ; class  MnUserParameters;  API class for the user interaction with the parameters; serves as input to the minimizer as well as output from it; users can interact: Fix/release parameters, set values and errors, etc.; parameters can be accessed via their Parameter number (determined internally by Minuit and followed the order how the parameters are created) or via their user-specified Name (10 character string). More...;  ; class  MnUserParameterState;  class which holds the external user and/or internal Minuit representation of the parameters and errors; transformation internal <-> external on demand; More...;  ; class  MnUserTransformation;  class dealing with the transformation between user specified parameters (external) and internal parameters used for minimization More...;  ; class  MnVectorTransform;  ; class  ModularFunctionMinimizer;  Base common class providing the API for all the minimizer Various Minimize methods are provided varying on the type of FCN function passesd and on the objects used for the parameters. More...;  ; class  MPIProcess;  ; class  MPITerminate;  ; class  Ne",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:1712,Energy Efficiency,adapt,adapting,1712,"Type< vec, gen >;  ; class  AlgebraicProdType< vec, sym >;  ; class  AlgebraicSumType;  ; class  AlgebraicSumType< gen, vec >;  ; class  AlgebraicSumType< sym, vec >;  ; class  AlgebraicSumType< T, T >;  ; class  AlgebraicSumType< vec, gen >;  ; class  AlgebraicSumType< vec, sym >;  ; class  AnalyticalGradientCalculator;  ; class  BFGSErrorUpdator;  Update of the covariance matrix for the Variable Metric minimizer (MIGRAD) More...;  ; class  BFGSMinimizerType;  ; class  CombinedMinimizer;  Combined minimizer: combination of Migrad and Simplex. More...;  ; class  CombinedMinimumBuilder;  ; class  ContoursError;  ; class  DavidonErrorUpdator;  Update of the covariance matrix for the Variable Metric minimizer (MIGRAD) More...;  ; struct  DerivatorElement;  ; class  ExternalInternalGradientCalculator;  Similar to the AnalyticalGradientCalculator, the ExternalInternalGradientCalculator supplies Minuit with an externally calculated gradient. More...;  ; class  FCNAdapter;  template wrapped class for adapting to FCNBase signature More...;  ; class  FCNBase;  Interface (abstract class) defining the function to be minimized, which has to be implemented by the user. More...;  ; class  FCNGradAdapter;  template wrapped class for adapting to FCNBase signature a IGradFunction More...;  ; class  FCNGradientBase;  Extension of the FCNBase for providing the analytical Gradient of the function. More...;  ; class  FumiliBuilder;  Builds the FunctionMinimum using the Fumili method. More...;  ; class  FumiliChi2FCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliErrorUpdator;  In the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives. More...;  ; class  FumiliFCNAdapter;  template wrapped class for adapting to FumiliFCNBase signature More...;  ; class  FumiliFCNBase;  Extension of the FCNBase for the Fumili m",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:1941,Energy Efficiency,adapt,adapting,1941," gen >;  ; class  AlgebraicSumType< vec, sym >;  ; class  AnalyticalGradientCalculator;  ; class  BFGSErrorUpdator;  Update of the covariance matrix for the Variable Metric minimizer (MIGRAD) More...;  ; class  BFGSMinimizerType;  ; class  CombinedMinimizer;  Combined minimizer: combination of Migrad and Simplex. More...;  ; class  CombinedMinimumBuilder;  ; class  ContoursError;  ; class  DavidonErrorUpdator;  Update of the covariance matrix for the Variable Metric minimizer (MIGRAD) More...;  ; struct  DerivatorElement;  ; class  ExternalInternalGradientCalculator;  Similar to the AnalyticalGradientCalculator, the ExternalInternalGradientCalculator supplies Minuit with an externally calculated gradient. More...;  ; class  FCNAdapter;  template wrapped class for adapting to FCNBase signature More...;  ; class  FCNBase;  Interface (abstract class) defining the function to be minimized, which has to be implemented by the user. More...;  ; class  FCNGradAdapter;  template wrapped class for adapting to FCNBase signature a IGradFunction More...;  ; class  FCNGradientBase;  Extension of the FCNBase for providing the analytical Gradient of the function. More...;  ; class  FumiliBuilder;  Builds the FunctionMinimum using the Fumili method. More...;  ; class  FumiliChi2FCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliErrorUpdator;  In the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives. More...;  ; class  FumiliFCNAdapter;  template wrapped class for adapting to FumiliFCNBase signature More...;  ; class  FumiliFCNBase;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliGradientCalculator;  Fumili gradient calculator using external gradient provided by FCN Note that the computed Hessian and G2 are an approximation valid for small residuals. More...;  ; class  FumiliMaxi",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:2592,Energy Efficiency,adapt,adapting,2592,"entCalculator supplies Minuit with an externally calculated gradient. More...;  ; class  FCNAdapter;  template wrapped class for adapting to FCNBase signature More...;  ; class  FCNBase;  Interface (abstract class) defining the function to be minimized, which has to be implemented by the user. More...;  ; class  FCNGradAdapter;  template wrapped class for adapting to FCNBase signature a IGradFunction More...;  ; class  FCNGradientBase;  Extension of the FCNBase for providing the analytical Gradient of the function. More...;  ; class  FumiliBuilder;  Builds the FunctionMinimum using the Fumili method. More...;  ; class  FumiliChi2FCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliErrorUpdator;  In the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives. More...;  ; class  FumiliFCNAdapter;  template wrapped class for adapting to FumiliFCNBase signature More...;  ; class  FumiliFCNBase;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliGradientCalculator;  Fumili gradient calculator using external gradient provided by FCN Note that the computed Hessian and G2 are an approximation valid for small residuals. More...;  ; class  FumiliMaximumLikelihoodFCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliMinimizer;  Instantiates the seed generator and Minimum builder for the Fumili minimization method. More...;  ; class  FumiliStandardChi2FCN;  Class implementing the standard chi square function, which is the sum of the squares of the figures-of-merit calculated for each measurement point, the individual figures-of-merit being: (the Value predicted by the model-measured Value)/standard deviation. More...;  ; class  FumiliStandardMaximumLikelihoodFCN;  Class implementing the Elements member function for the standard maximum likelihood method. More.",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:5980,Energy Efficiency,reduce,reduce,5980,"t of Minos (lower and upper values) for a specific parameter. More...;  ; class  Minuit2Minimizer;  Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm. More...;  ; class  MinuitParameter;  class for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; More...;  ; class  MnApplication;  application interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization More...;  ; class  MnContours;  API class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors;. More...;  ; class  MnCovarianceSqueeze;  class to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index More...;  ; class  MnCross;  ; class  MnEigen;  API class for calculating the eigenvalues of symmetric matrix. More...;  ; class  MnFcn;  Wrapper class to FCNBase interface used internally by Minuit. More...;  ; class  MnFumiliMinimize;  API class for minimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc.; also used by MnMinos and MnContours;. More...;  ; class  MnFunctionCross;  MnFunctionCross. More...;  ; class  MnGlobalCorrelationCoeff;  class for global correlation coefficient More...;  ; class  MnHesse;  API class for calculating the numerical covariance matrix (== 2x Inverse Hessian == 2x Inverse 2nd derivative); can be used by the user or Minuit itself. More...;  ; class  MnLineSearch;  Implements a 1-dimensional minimization along a given direction (i.e. More...;  ; class  MnMachinePrecision;  Sets the relative float",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:1694,Integrability,wrap,wrapped,1694,"Type< vec, gen >;  ; class  AlgebraicProdType< vec, sym >;  ; class  AlgebraicSumType;  ; class  AlgebraicSumType< gen, vec >;  ; class  AlgebraicSumType< sym, vec >;  ; class  AlgebraicSumType< T, T >;  ; class  AlgebraicSumType< vec, gen >;  ; class  AlgebraicSumType< vec, sym >;  ; class  AnalyticalGradientCalculator;  ; class  BFGSErrorUpdator;  Update of the covariance matrix for the Variable Metric minimizer (MIGRAD) More...;  ; class  BFGSMinimizerType;  ; class  CombinedMinimizer;  Combined minimizer: combination of Migrad and Simplex. More...;  ; class  CombinedMinimumBuilder;  ; class  ContoursError;  ; class  DavidonErrorUpdator;  Update of the covariance matrix for the Variable Metric minimizer (MIGRAD) More...;  ; struct  DerivatorElement;  ; class  ExternalInternalGradientCalculator;  Similar to the AnalyticalGradientCalculator, the ExternalInternalGradientCalculator supplies Minuit with an externally calculated gradient. More...;  ; class  FCNAdapter;  template wrapped class for adapting to FCNBase signature More...;  ; class  FCNBase;  Interface (abstract class) defining the function to be minimized, which has to be implemented by the user. More...;  ; class  FCNGradAdapter;  template wrapped class for adapting to FCNBase signature a IGradFunction More...;  ; class  FCNGradientBase;  Extension of the FCNBase for providing the analytical Gradient of the function. More...;  ; class  FumiliBuilder;  Builds the FunctionMinimum using the Fumili method. More...;  ; class  FumiliChi2FCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliErrorUpdator;  In the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives. More...;  ; class  FumiliFCNAdapter;  template wrapped class for adapting to FumiliFCNBase signature More...;  ; class  FumiliFCNBase;  Extension of the FCNBase for the Fumili m",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:1923,Integrability,wrap,wrapped,1923," gen >;  ; class  AlgebraicSumType< vec, sym >;  ; class  AnalyticalGradientCalculator;  ; class  BFGSErrorUpdator;  Update of the covariance matrix for the Variable Metric minimizer (MIGRAD) More...;  ; class  BFGSMinimizerType;  ; class  CombinedMinimizer;  Combined minimizer: combination of Migrad and Simplex. More...;  ; class  CombinedMinimumBuilder;  ; class  ContoursError;  ; class  DavidonErrorUpdator;  Update of the covariance matrix for the Variable Metric minimizer (MIGRAD) More...;  ; struct  DerivatorElement;  ; class  ExternalInternalGradientCalculator;  Similar to the AnalyticalGradientCalculator, the ExternalInternalGradientCalculator supplies Minuit with an externally calculated gradient. More...;  ; class  FCNAdapter;  template wrapped class for adapting to FCNBase signature More...;  ; class  FCNBase;  Interface (abstract class) defining the function to be minimized, which has to be implemented by the user. More...;  ; class  FCNGradAdapter;  template wrapped class for adapting to FCNBase signature a IGradFunction More...;  ; class  FCNGradientBase;  Extension of the FCNBase for providing the analytical Gradient of the function. More...;  ; class  FumiliBuilder;  Builds the FunctionMinimum using the Fumili method. More...;  ; class  FumiliChi2FCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliErrorUpdator;  In the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives. More...;  ; class  FumiliFCNAdapter;  template wrapped class for adapting to FumiliFCNBase signature More...;  ; class  FumiliFCNBase;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliGradientCalculator;  Fumili gradient calculator using external gradient provided by FCN Note that the computed Hessian and G2 are an approximation valid for small residuals. More...;  ; class  FumiliMaxi",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:2574,Integrability,wrap,wrapped,2574,"entCalculator supplies Minuit with an externally calculated gradient. More...;  ; class  FCNAdapter;  template wrapped class for adapting to FCNBase signature More...;  ; class  FCNBase;  Interface (abstract class) defining the function to be minimized, which has to be implemented by the user. More...;  ; class  FCNGradAdapter;  template wrapped class for adapting to FCNBase signature a IGradFunction More...;  ; class  FCNGradientBase;  Extension of the FCNBase for providing the analytical Gradient of the function. More...;  ; class  FumiliBuilder;  Builds the FunctionMinimum using the Fumili method. More...;  ; class  FumiliChi2FCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliErrorUpdator;  In the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives. More...;  ; class  FumiliFCNAdapter;  template wrapped class for adapting to FumiliFCNBase signature More...;  ; class  FumiliFCNBase;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliGradientCalculator;  Fumili gradient calculator using external gradient provided by FCN Note that the computed Hessian and G2 are an approximation valid for small residuals. More...;  ; class  FumiliMaximumLikelihoodFCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliMinimizer;  Instantiates the seed generator and Minimum builder for the Fumili minimization method. More...;  ; class  FumiliStandardChi2FCN;  Class implementing the standard chi square function, which is the sum of the squares of the figures-of-merit calculated for each measurement point, the individual figures-of-merit being: (the Value predicted by the model-measured Value)/standard deviation. More...;  ; class  FumiliStandardMaximumLikelihoodFCN;  Class implementing the Elements member function for the standard maximum likelihood method. More.",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:3969,Integrability,interface,interface,3969,"FCNBase for the Fumili method. More...;  ; class  FumiliMinimizer;  Instantiates the seed generator and Minimum builder for the Fumili minimization method. More...;  ; class  FumiliStandardChi2FCN;  Class implementing the standard chi square function, which is the sum of the squares of the figures-of-merit calculated for each measurement point, the individual figures-of-merit being: (the Value predicted by the model-measured Value)/standard deviation. More...;  ; class  FumiliStandardMaximumLikelihoodFCN;  Class implementing the Elements member function for the standard maximum likelihood method. More...;  ; class  FunctionGradient;  ; class  FunctionMinimum;  class holding the full result of the minimization; both internal and external (MnUserParameterState) representation available for the parameters at the Minimum More...;  ; class  gen;  ; class  GenericFunction;  Class from which all the other classes, representing functions, inherit. More...;  ; class  GradientCalculator;  interface class for gradient calculators More...;  ; class  HessianGradientCalculator;  HessianGradientCalculator: class to calculate Gradient for Hessian. More...;  ; class  InitialGradientCalculator;  Class to calculate an initial estimate of the gradient. More...;  ; class  LASquareMatrix;  ; class  LASymMatrix;  Class describing a symmetric matrix of size n. More...;  ; class  LAVector;  ; class  MatrixInverse;  ; class  MatrixInverse< vec, M, T >;  ; class  MinimumBuilder;  ; class  MinimumError;  MinimumError keeps the inv. More...;  ; class  MinimumErrorUpdator;  ; class  MinimumParameters;  ; class  MinimumSeed;  ; class  MinimumSeedGenerator;  base class for seed generators (starting values); the seed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; More...;  ; class  MinimumState;  MinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder). More...;  ; class  Mi",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:5172,Integrability,interface,interface,5172,"ialGradientCalculator;  Class to calculate an initial estimate of the gradient. More...;  ; class  LASquareMatrix;  ; class  LASymMatrix;  Class describing a symmetric matrix of size n. More...;  ; class  LAVector;  ; class  MatrixInverse;  ; class  MatrixInverse< vec, M, T >;  ; class  MinimumBuilder;  ; class  MinimumError;  MinimumError keeps the inv. More...;  ; class  MinimumErrorUpdator;  ; class  MinimumParameters;  ; class  MinimumSeed;  ; class  MinimumSeedGenerator;  base class for seed generators (starting values); the seed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; More...;  ; class  MinimumState;  MinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder). More...;  ; class  MinosError;  Class holding the result of Minos (lower and upper values) for a specific parameter. More...;  ; class  Minuit2Minimizer;  Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm. More...;  ; class  MinuitParameter;  class for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; More...;  ; class  MnApplication;  application interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization More...;  ; class  MnContours;  API class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors;. More...;  ; class  MnCovarianceSqueeze;  class to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index More...;  ; class  MnCross;  ; class  MnEigen;  API class for calcula",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:5526,Integrability,interface,interface,5526,";  ; class  MinimumSeedGenerator;  base class for seed generators (starting values); the seed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; More...;  ; class  MinimumState;  MinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder). More...;  ; class  MinosError;  Class holding the result of Minos (lower and upper values) for a specific parameter. More...;  ; class  Minuit2Minimizer;  Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm. More...;  ; class  MinuitParameter;  class for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; More...;  ; class  MnApplication;  application interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization More...;  ; class  MnContours;  API class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors;. More...;  ; class  MnCovarianceSqueeze;  class to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index More...;  ; class  MnCross;  ; class  MnEigen;  API class for calculating the eigenvalues of symmetric matrix. More...;  ; class  MnFcn;  Wrapper class to FCNBase interface used internally by Minuit. More...;  ; class  MnFumiliMinimize;  API class for minimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc.; also used by MnMinos and MnContours;. More...;  ; class  MnFunctionCross;  MnFunctionCross. More...;  ; class  Mn",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:6242,Integrability,interface,interface,6242,"MinuitParameter;  class for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; More...;  ; class  MnApplication;  application interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization More...;  ; class  MnContours;  API class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors;. More...;  ; class  MnCovarianceSqueeze;  class to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index More...;  ; class  MnCross;  ; class  MnEigen;  API class for calculating the eigenvalues of symmetric matrix. More...;  ; class  MnFcn;  Wrapper class to FCNBase interface used internally by Minuit. More...;  ; class  MnFumiliMinimize;  API class for minimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc.; also used by MnMinos and MnContours;. More...;  ; class  MnFunctionCross;  MnFunctionCross. More...;  ; class  MnGlobalCorrelationCoeff;  class for global correlation coefficient More...;  ; class  MnHesse;  API class for calculating the numerical covariance matrix (== 2x Inverse Hessian == 2x Inverse 2nd derivative); can be used by the user or Minuit itself. More...;  ; class  MnLineSearch;  Implements a 1-dimensional minimization along a given direction (i.e. More...;  ; class  MnMachinePrecision;  Sets the relative floating point (double) arithmetic precision. More...;  ; class  MnMigrad;  API class for minimization using Variable Metric technology (""MIGRAD""); allows for user interaction: set/change parameters, do minimization, change paramete",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:8711,Integrability,interface,interface,8711,"be valid; possibility to ask only for one side of the Minos Error;. More...;  ; class  MnParabola;  This class defines a parabola of the form a*x*x + b*x + c. More...;  ; class  MnParabolaFactory;  ; class  MnParabolaPoint;  A point of a parabola. More...;  ; class  MnParameterScan;  Scans the values of FCN as a function of one Parameter and retains the best function and Parameter values found. More...;  ; class  MnParStr;  ; class  MnPlot;  MnPlot produces a text-screen graphical output of (x,y) points, e.g. More...;  ; class  MnPosDef;  Force the covariance matrix to be positive defined by adding extra terms in the diagonal. More...;  ; class  MnPrint;  ; class  MnRefCountedPointer;  ; class  MnReferenceCounter;  ; class  MnScan;  API class for minimization using a scan method to find the minimum; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc.;. More...;  ; class  MnSeedGenerator;  concrete implementation of the MinimumSeedGenerator interface; used within ModularFunctionMinimizer; More...;  ; class  MnSimplex;  API class for minimization using the Simplex method, which does not need and use the derivatives of the function, but only function values. More...;  ; class  MnStrategy;  API class for defining four levels of strategies: low (0), medium (1), high (2), very high (>=3); acts on: Migrad (behavioural), Minos (lowers strategy by 1 for Minos-own minimization), Hesse (iterations), Numerical2PDerivative (iterations) More...;  ; class  MnTiny;  ; class  MnTraceObject;  ; class  MnUserCovariance;  Class containing the covariance matrix data represented as a vector of size n*(n+1)/2 Used to hide internal matrix representation to user. More...;  ; class  MnUserFcn;  Wrapper used by Minuit of FCN interface containing a reference to the transformation object. More...;  ; class  MnUserParameters;  API class for the user interaction with the parameters; serves as input to the minimizer as well as output from",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:9485,Integrability,interface,interface,9485," find the minimum; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc.;. More...;  ; class  MnSeedGenerator;  concrete implementation of the MinimumSeedGenerator interface; used within ModularFunctionMinimizer; More...;  ; class  MnSimplex;  API class for minimization using the Simplex method, which does not need and use the derivatives of the function, but only function values. More...;  ; class  MnStrategy;  API class for defining four levels of strategies: low (0), medium (1), high (2), very high (>=3); acts on: Migrad (behavioural), Minos (lowers strategy by 1 for Minos-own minimization), Hesse (iterations), Numerical2PDerivative (iterations) More...;  ; class  MnTiny;  ; class  MnTraceObject;  ; class  MnUserCovariance;  Class containing the covariance matrix data represented as a vector of size n*(n+1)/2 Used to hide internal matrix representation to user. More...;  ; class  MnUserFcn;  Wrapper used by Minuit of FCN interface containing a reference to the transformation object. More...;  ; class  MnUserParameters;  API class for the user interaction with the parameters; serves as input to the minimizer as well as output from it; users can interact: Fix/release parameters, set values and errors, etc.; parameters can be accessed via their Parameter number (determined internally by Minuit and followed the order how the parameters are created) or via their user-specified Name (10 character string). More...;  ; class  MnUserParameterState;  class which holds the external user and/or internal Minuit representation of the parameters and errors; transformation internal <-> external on demand; More...;  ; class  MnUserTransformation;  class dealing with the transformation between user specified parameters (external) and internal parameters used for minimization More...;  ; class  MnVectorTransform;  ; class  ModularFunctionMinimizer;  Base common class providing the API for all the minimizer Various Minimize m",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:1712,Modifiability,adapt,adapting,1712,"Type< vec, gen >;  ; class  AlgebraicProdType< vec, sym >;  ; class  AlgebraicSumType;  ; class  AlgebraicSumType< gen, vec >;  ; class  AlgebraicSumType< sym, vec >;  ; class  AlgebraicSumType< T, T >;  ; class  AlgebraicSumType< vec, gen >;  ; class  AlgebraicSumType< vec, sym >;  ; class  AnalyticalGradientCalculator;  ; class  BFGSErrorUpdator;  Update of the covariance matrix for the Variable Metric minimizer (MIGRAD) More...;  ; class  BFGSMinimizerType;  ; class  CombinedMinimizer;  Combined minimizer: combination of Migrad and Simplex. More...;  ; class  CombinedMinimumBuilder;  ; class  ContoursError;  ; class  DavidonErrorUpdator;  Update of the covariance matrix for the Variable Metric minimizer (MIGRAD) More...;  ; struct  DerivatorElement;  ; class  ExternalInternalGradientCalculator;  Similar to the AnalyticalGradientCalculator, the ExternalInternalGradientCalculator supplies Minuit with an externally calculated gradient. More...;  ; class  FCNAdapter;  template wrapped class for adapting to FCNBase signature More...;  ; class  FCNBase;  Interface (abstract class) defining the function to be minimized, which has to be implemented by the user. More...;  ; class  FCNGradAdapter;  template wrapped class for adapting to FCNBase signature a IGradFunction More...;  ; class  FCNGradientBase;  Extension of the FCNBase for providing the analytical Gradient of the function. More...;  ; class  FumiliBuilder;  Builds the FunctionMinimum using the Fumili method. More...;  ; class  FumiliChi2FCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliErrorUpdator;  In the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives. More...;  ; class  FumiliFCNAdapter;  template wrapped class for adapting to FumiliFCNBase signature More...;  ; class  FumiliFCNBase;  Extension of the FCNBase for the Fumili m",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:1941,Modifiability,adapt,adapting,1941," gen >;  ; class  AlgebraicSumType< vec, sym >;  ; class  AnalyticalGradientCalculator;  ; class  BFGSErrorUpdator;  Update of the covariance matrix for the Variable Metric minimizer (MIGRAD) More...;  ; class  BFGSMinimizerType;  ; class  CombinedMinimizer;  Combined minimizer: combination of Migrad and Simplex. More...;  ; class  CombinedMinimumBuilder;  ; class  ContoursError;  ; class  DavidonErrorUpdator;  Update of the covariance matrix for the Variable Metric minimizer (MIGRAD) More...;  ; struct  DerivatorElement;  ; class  ExternalInternalGradientCalculator;  Similar to the AnalyticalGradientCalculator, the ExternalInternalGradientCalculator supplies Minuit with an externally calculated gradient. More...;  ; class  FCNAdapter;  template wrapped class for adapting to FCNBase signature More...;  ; class  FCNBase;  Interface (abstract class) defining the function to be minimized, which has to be implemented by the user. More...;  ; class  FCNGradAdapter;  template wrapped class for adapting to FCNBase signature a IGradFunction More...;  ; class  FCNGradientBase;  Extension of the FCNBase for providing the analytical Gradient of the function. More...;  ; class  FumiliBuilder;  Builds the FunctionMinimum using the Fumili method. More...;  ; class  FumiliChi2FCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliErrorUpdator;  In the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives. More...;  ; class  FumiliFCNAdapter;  template wrapped class for adapting to FumiliFCNBase signature More...;  ; class  FumiliFCNBase;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliGradientCalculator;  Fumili gradient calculator using external gradient provided by FCN Note that the computed Hessian and G2 are an approximation valid for small residuals. More...;  ; class  FumiliMaxi",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:2592,Modifiability,adapt,adapting,2592,"entCalculator supplies Minuit with an externally calculated gradient. More...;  ; class  FCNAdapter;  template wrapped class for adapting to FCNBase signature More...;  ; class  FCNBase;  Interface (abstract class) defining the function to be minimized, which has to be implemented by the user. More...;  ; class  FCNGradAdapter;  template wrapped class for adapting to FCNBase signature a IGradFunction More...;  ; class  FCNGradientBase;  Extension of the FCNBase for providing the analytical Gradient of the function. More...;  ; class  FumiliBuilder;  Builds the FunctionMinimum using the Fumili method. More...;  ; class  FumiliChi2FCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliErrorUpdator;  In the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives. More...;  ; class  FumiliFCNAdapter;  template wrapped class for adapting to FumiliFCNBase signature More...;  ; class  FumiliFCNBase;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliGradientCalculator;  Fumili gradient calculator using external gradient provided by FCN Note that the computed Hessian and G2 are an approximation valid for small residuals. More...;  ; class  FumiliMaximumLikelihoodFCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliMinimizer;  Instantiates the seed generator and Minimum builder for the Fumili minimization method. More...;  ; class  FumiliStandardChi2FCN;  Class implementing the standard chi square function, which is the sum of the squares of the figures-of-merit calculated for each measurement point, the individual figures-of-merit being: (the Value predicted by the model-measured Value)/standard deviation. More...;  ; class  FumiliStandardMaximumLikelihoodFCN;  Class implementing the Elements member function for the standard maximum likelihood method. More.",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:3920,Modifiability,inherit,inherit,3920,"approximation valid for small residuals. More...;  ; class  FumiliMaximumLikelihoodFCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliMinimizer;  Instantiates the seed generator and Minimum builder for the Fumili minimization method. More...;  ; class  FumiliStandardChi2FCN;  Class implementing the standard chi square function, which is the sum of the squares of the figures-of-merit calculated for each measurement point, the individual figures-of-merit being: (the Value predicted by the model-measured Value)/standard deviation. More...;  ; class  FumiliStandardMaximumLikelihoodFCN;  Class implementing the Elements member function for the standard maximum likelihood method. More...;  ; class  FunctionGradient;  ; class  FunctionMinimum;  class holding the full result of the minimization; both internal and external (MnUserParameterState) representation available for the parameters at the Minimum More...;  ; class  gen;  ; class  GenericFunction;  Class from which all the other classes, representing functions, inherit. More...;  ; class  GradientCalculator;  interface class for gradient calculators More...;  ; class  HessianGradientCalculator;  HessianGradientCalculator: class to calculate Gradient for Hessian. More...;  ; class  InitialGradientCalculator;  Class to calculate an initial estimate of the gradient. More...;  ; class  LASquareMatrix;  ; class  LASymMatrix;  Class describing a symmetric matrix of size n. More...;  ; class  LAVector;  ; class  MatrixInverse;  ; class  MatrixInverse< vec, M, T >;  ; class  MinimumBuilder;  ; class  MinimumError;  MinimumError keeps the inv. More...;  ; class  MinimumErrorUpdator;  ; class  MinimumParameters;  ; class  MinimumSeed;  ; class  MinimumSeedGenerator;  base class for seed generators (starting values); the seed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; More...;  ; class  MinimumState;  MinimumState keeps the information (position",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:11770,Modifiability,evolve,evolve,11770,"calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive. More...;  ; class  Numerical2PGradientCalculator;  class performing the numerical gradient calculation More...;  ; class  NumericalDerivator;  ; class  ParametricFunction;  Function which has parameters. More...;  ; class  PrefixStack;  ; class  ScanBuilder;  Performs a minimization using the simplex method of Nelder and Mead (ref. More...;  ; class  ScanMinimizer;  Class implementing the required methods for a minimization using SCAN API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class. More...;  ; class  SimplexBuilder;  Performs a minimization using the simplex method of Nelder and Mead (ref. More...;  ; class  SimplexMinimizer;  Class implementing the required methods for a minimization using Simplex. More...;  ; class  SimplexParameters;  class describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process. More...;  ; class  SimplexSeedGenerator;  generate Simplex starting point (state) More...;  ; class  SinParameterTransformation;  class for the transformation for double-limited parameter Using a sin function one goes from a double-limited parameter range to an unlimited one More...;  ; class  SqrtLowParameterTransformation;  Transformation from external to internal Parameter based on sqrt(1 + x**2) More...;  ; class  SqrtUpParameterTransformation;  Transformation from external to internal Parameter based on sqrt(1 + x**2) More...;  ; class  StackAllocator;  StackAllocator controls the memory allocation/deallocation of Minuit. More...;  ; class  StackAllocatorHolder;  ; class  StackError;  ; class  StackOverflow;  define stack allocator symbol More...;  ; class  sym;  ; class  VariableMetricBuilder;  Build (find) function minimum using the Variable Metric method (MIGRAD) Two possible error updators can be chosen. Mo",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:10991,Performance,perform,performing,10991," MnUserParameterState;  class which holds the external user and/or internal Minuit representation of the parameters and errors; transformation internal <-> external on demand; More...;  ; class  MnUserTransformation;  class dealing with the transformation between user specified parameters (external) and internal parameters used for minimization More...;  ; class  MnVectorTransform;  ; class  ModularFunctionMinimizer;  Base common class providing the API for all the minimizer Various Minimize methods are provided varying on the type of FCN function passesd and on the objects used for the parameters. More...;  ; class  MPIProcess;  ; class  MPITerminate;  ; class  NegativeG2LineSearch;  In case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive. More...;  ; class  Numerical2PGradientCalculator;  class performing the numerical gradient calculation More...;  ; class  NumericalDerivator;  ; class  ParametricFunction;  Function which has parameters. More...;  ; class  PrefixStack;  ; class  ScanBuilder;  Performs a minimization using the simplex method of Nelder and Mead (ref. More...;  ; class  ScanMinimizer;  Class implementing the required methods for a minimization using SCAN API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class. More...;  ; class  SimplexBuilder;  Performs a minimization using the simplex method of Nelder and Mead (ref. More...;  ; class  SimplexMinimizer;  Class implementing the required methods for a minimization using Simplex. More...;  ; class  SimplexParameters;  class describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process. More...;  ; class  SimplexSeedGenerator;  generate Simplex starting point (state) More...;  ; class  SinParameterTransformation;  class for the transformation for double-li",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:3372,Safety,predict,predicted,3372,"; class  FumiliErrorUpdator;  In the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives. More...;  ; class  FumiliFCNAdapter;  template wrapped class for adapting to FumiliFCNBase signature More...;  ; class  FumiliFCNBase;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliGradientCalculator;  Fumili gradient calculator using external gradient provided by FCN Note that the computed Hessian and G2 are an approximation valid for small residuals. More...;  ; class  FumiliMaximumLikelihoodFCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliMinimizer;  Instantiates the seed generator and Minimum builder for the Fumili minimization method. More...;  ; class  FumiliStandardChi2FCN;  Class implementing the standard chi square function, which is the sum of the squares of the figures-of-merit calculated for each measurement point, the individual figures-of-merit being: (the Value predicted by the model-measured Value)/standard deviation. More...;  ; class  FumiliStandardMaximumLikelihoodFCN;  Class implementing the Elements member function for the standard maximum likelihood method. More...;  ; class  FunctionGradient;  ; class  FunctionMinimum;  class holding the full result of the minimization; both internal and external (MnUserParameterState) representation available for the parameters at the Minimum More...;  ; class  gen;  ; class  GenericFunction;  Class from which all the other classes, representing functions, inherit. More...;  ; class  GradientCalculator;  interface class for gradient calculators More...;  ; class  HessianGradientCalculator;  HessianGradientCalculator: class to calculate Gradient for Hessian. More...;  ; class  InitialGradientCalculator;  Class to calculate an initial estimate of the gradient. More...;  ; class  LASquareMatrix;  ; class  LASymMatrix",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:9793,Security,access,accessed,9793,"the derivatives of the function, but only function values. More...;  ; class  MnStrategy;  API class for defining four levels of strategies: low (0), medium (1), high (2), very high (>=3); acts on: Migrad (behavioural), Minos (lowers strategy by 1 for Minos-own minimization), Hesse (iterations), Numerical2PDerivative (iterations) More...;  ; class  MnTiny;  ; class  MnTraceObject;  ; class  MnUserCovariance;  Class containing the covariance matrix data represented as a vector of size n*(n+1)/2 Used to hide internal matrix representation to user. More...;  ; class  MnUserFcn;  Wrapper used by Minuit of FCN interface containing a reference to the transformation object. More...;  ; class  MnUserParameters;  API class for the user interaction with the parameters; serves as input to the minimizer as well as output from it; users can interact: Fix/release parameters, set values and errors, etc.; parameters can be accessed via their Parameter number (determined internally by Minuit and followed the order how the parameters are created) or via their user-specified Name (10 character string). More...;  ; class  MnUserParameterState;  class which holds the external user and/or internal Minuit representation of the parameters and errors; transformation internal <-> external on demand; More...;  ; class  MnUserTransformation;  class dealing with the transformation between user specified parameters (external) and internal parameters used for minimization More...;  ; class  MnVectorTransform;  ; class  ModularFunctionMinimizer;  Base common class providing the API for all the minimizer Various Minimize methods are provided varying on the type of FCN function passesd and on the objects used for the parameters. More...;  ; class  MPIProcess;  ; class  MPITerminate;  ; class  NegativeG2LineSearch;  In case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:5566,Usability,simpl,simplex,5566,";  ; class  MinimumSeedGenerator;  base class for seed generators (starting values); the seed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; More...;  ; class  MinimumState;  MinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder). More...;  ; class  MinosError;  Class holding the result of Minos (lower and upper values) for a specific parameter. More...;  ; class  Minuit2Minimizer;  Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm. More...;  ; class  MinuitParameter;  class for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; More...;  ; class  MnApplication;  application interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization More...;  ; class  MnContours;  API class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors;. More...;  ; class  MnCovarianceSqueeze;  class to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index More...;  ; class  MnCross;  ; class  MnEigen;  API class for calculating the eigenvalues of symmetric matrix. More...;  ; class  MnFcn;  Wrapper class to FCNBase interface used internally by Minuit. More...;  ; class  MnFumiliMinimize;  API class for minimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc.; also used by MnMinos and MnContours;. More...;  ; class  MnFunctionCross;  MnFunctionCross. More...;  ; class  Mn",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:11228,Usability,simpl,simplex,11228,";  class dealing with the transformation between user specified parameters (external) and internal parameters used for minimization More...;  ; class  MnVectorTransform;  ; class  ModularFunctionMinimizer;  Base common class providing the API for all the minimizer Various Minimize methods are provided varying on the type of FCN function passesd and on the objects used for the parameters. More...;  ; class  MPIProcess;  ; class  MPITerminate;  ; class  NegativeG2LineSearch;  In case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive. More...;  ; class  Numerical2PGradientCalculator;  class performing the numerical gradient calculation More...;  ; class  NumericalDerivator;  ; class  ParametricFunction;  Function which has parameters. More...;  ; class  PrefixStack;  ; class  ScanBuilder;  Performs a minimization using the simplex method of Nelder and Mead (ref. More...;  ; class  ScanMinimizer;  Class implementing the required methods for a minimization using SCAN API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class. More...;  ; class  SimplexBuilder;  Performs a minimization using the simplex method of Nelder and Mead (ref. More...;  ; class  SimplexMinimizer;  Class implementing the required methods for a minimization using Simplex. More...;  ; class  SimplexParameters;  class describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process. More...;  ; class  SimplexSeedGenerator;  generate Simplex starting point (state) More...;  ; class  SinParameterTransformation;  class for the transformation for double-limited parameter Using a sin function one goes from a double-limited parameter range to an unlimited one More...;  ; class  SqrtLowParameterTransformation;  Transformation from external to internal Parameter based o",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:11519,Usability,simpl,simplex,11519,"d varying on the type of FCN function passesd and on the objects used for the parameters. More...;  ; class  MPIProcess;  ; class  MPITerminate;  ; class  NegativeG2LineSearch;  In case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive. More...;  ; class  Numerical2PGradientCalculator;  class performing the numerical gradient calculation More...;  ; class  NumericalDerivator;  ; class  ParametricFunction;  Function which has parameters. More...;  ; class  PrefixStack;  ; class  ScanBuilder;  Performs a minimization using the simplex method of Nelder and Mead (ref. More...;  ; class  ScanMinimizer;  Class implementing the required methods for a minimization using SCAN API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class. More...;  ; class  SimplexBuilder;  Performs a minimization using the simplex method of Nelder and Mead (ref. More...;  ; class  SimplexMinimizer;  Class implementing the required methods for a minimization using Simplex. More...;  ; class  SimplexParameters;  class describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process. More...;  ; class  SimplexSeedGenerator;  generate Simplex starting point (state) More...;  ; class  SinParameterTransformation;  class for the transformation for double-limited parameter Using a sin function one goes from a double-limited parameter range to an unlimited one More...;  ; class  SqrtLowParameterTransformation;  Transformation from external to internal Parameter based on sqrt(1 + x**2) More...;  ; class  SqrtUpParameterTransformation;  Transformation from external to internal Parameter based on sqrt(1 + x**2) More...;  ; class  StackAllocator;  StackAllocator controls the memory allocation/deallocation of Minuit. More...;  ; class  StackAllocatorHolder;  ; class  S",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:11731,Usability,simpl,simplex,11731,"calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive. More...;  ; class  Numerical2PGradientCalculator;  class performing the numerical gradient calculation More...;  ; class  NumericalDerivator;  ; class  ParametricFunction;  Function which has parameters. More...;  ; class  PrefixStack;  ; class  ScanBuilder;  Performs a minimization using the simplex method of Nelder and Mead (ref. More...;  ; class  ScanMinimizer;  Class implementing the required methods for a minimization using SCAN API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class. More...;  ; class  SimplexBuilder;  Performs a minimization using the simplex method of Nelder and Mead (ref. More...;  ; class  SimplexMinimizer;  Class implementing the required methods for a minimization using Simplex. More...;  ; class  SimplexParameters;  class describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process. More...;  ; class  SimplexSeedGenerator;  generate Simplex starting point (state) More...;  ; class  SinParameterTransformation;  class for the transformation for double-limited parameter Using a sin function one goes from a double-limited parameter range to an unlimited one More...;  ; class  SqrtLowParameterTransformation;  Transformation from external to internal Parameter based on sqrt(1 + x**2) More...;  ; class  SqrtUpParameterTransformation;  Transformation from external to internal Parameter based on sqrt(1 + x**2) More...;  ; class  StackAllocator;  StackAllocator controls the memory allocation/deallocation of Minuit. More...;  ; class  StackAllocatorHolder;  ; class  StackError;  ; class  StackOverflow;  define stack allocator symbol More...;  ; class  sym;  ; class  VariableMetricBuilder;  Build (find) function minimum using the Variable Metric method (MIGRAD) Two possible error updators can be chosen. Mo",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/master/namespaceROOT_1_1option.html:3795,Availability,error,error,3795,"ment: Returns ARG_NONE.Definition OptionParser.h:907; ROOT::option::DescriptorDescribes an option, its help text (usage) and how it should be parsed.Definition OptionParser.h:327; A CheckArg function has the following signature: ArgStatus CheckArg(const Option& option, bool msg); ; ROOT::option::OptionA parsed option from the command line together with its argument if it has one.Definition OptionParser.h:454; ROOT::option::ArgStatusArgStatusPossible results when checking if an argument is valid for a certain option.Definition OptionParser.h:263; ROOT::option::CheckArgArgStatus(* CheckArg)(const Option &option, bool msg)Signature of functions that check if an argument is valid for a certain type of option.Definition OptionParser.h:302; It is used to check if a potential argument would be acceptable for the option. It will even be called if there is no argument. In that case option.arg will be NULL.; If msg is true and the function determines that an argument is not acceptable and that this is a fatal error, it should output a message to the user before returning ARG_ILLEGAL. If msg is false the function should remain silent (or you will get duplicate messages).; See ArgStatus for the meaning of the return values.; While you can provide your own functions, often the following pre-defined checks (which never return ARG_ILLEGAL) will suffice:. Arg::None For options that don't take an argument: Returns ARG_NONE. ; Arg::Optional Returns ARG_OK if the argument is attached and ARG_IGNORE otherwise. . Definition at line 302 of file OptionParser.h. Enumeration Type Documentation. ◆ ArgStatus. enum ROOT::option::ArgStatus. Possible results when checking if an argument is valid for a certain option. ; In the case that no argument is provided for an option that takes an optional argument, return codes ARG_OK and ARG_IGNORE are equivalent. . EnumeratorARG_NONE The option does not take an argument. . ARG_OK The argument is acceptable for the option. . ARG_IGNORE The argument is no",MatchSource.WIKI,doc/master/namespaceROOT_1_1option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1option.html
https://root.cern/doc/master/namespaceROOT_1_1option.html:12574,Availability,avail,available,12574,"enalty for using different versions in the same program. ; printUsage() always interprets Descriptor::help as UTF-8 and always produces UTF-8-encoded output. If your system uses a different charset, you must do your own conversion. You may also need to change the font of the console to see non-ASCII characters properly. This is particularly true for Windows. ; Security warning: Do not insert untrusted strings (such as user-supplied arguments) into the usage. printUsage() has no protection against malicious UTF-8 sequences. Parameters. prnThe output method to use. See the examples above. ; usagethe Descriptor[] array whose help texts will be formatted. ; widththe maximum number of characters per output line. Note that this number is in actual characters, not bytes. printUsage() supports UTF-8 in help and will count multi-byte UTF-8 sequences properly. Asian wide characters are counted as 2 characters. ; last_column_min_percent(0-100) The minimum percentage of width that should be available for the last column (which typically contains the textual explanation of an option). If less space is available, the last column will be printed on its own line, indented according to last_column_own_line_max_percent. ; last_column_own_line_max_percent(0-100) If the last column is printed on its own line due to less than last_column_min_percent of the width being available, then only last_column_own_line_max_percent of the extra line(s) will be used for the last column's text. This ensures an indentation. See example below. // width=20, last_column_min_percent=50 (i.e. last col. min. width=10); --3456789 1234567890; 1234567890; ; // width=20, last_column_min_percent=75 (i.e. last col. min. width=15); // last_column_own_line_max_percent=75; --3456789; 123456789012345; 67890; ; // width=20, last_column_min_percent=75 (i.e. last col. min. width=15); // last_column_own_line_max_percent=33 (i.e. max. 5); --3456789; 12345; 67890; 12345; 67890. Definition at line 2798 of file OptionParser.",MatchSource.WIKI,doc/master/namespaceROOT_1_1option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1option.html
https://root.cern/doc/master/namespaceROOT_1_1option.html:12686,Availability,avail,available,12686,"ut. If your system uses a different charset, you must do your own conversion. You may also need to change the font of the console to see non-ASCII characters properly. This is particularly true for Windows. ; Security warning: Do not insert untrusted strings (such as user-supplied arguments) into the usage. printUsage() has no protection against malicious UTF-8 sequences. Parameters. prnThe output method to use. See the examples above. ; usagethe Descriptor[] array whose help texts will be formatted. ; widththe maximum number of characters per output line. Note that this number is in actual characters, not bytes. printUsage() supports UTF-8 in help and will count multi-byte UTF-8 sequences properly. Asian wide characters are counted as 2 characters. ; last_column_min_percent(0-100) The minimum percentage of width that should be available for the last column (which typically contains the textual explanation of an option). If less space is available, the last column will be printed on its own line, indented according to last_column_own_line_max_percent. ; last_column_own_line_max_percent(0-100) If the last column is printed on its own line due to less than last_column_min_percent of the width being available, then only last_column_own_line_max_percent of the extra line(s) will be used for the last column's text. This ensures an indentation. See example below. // width=20, last_column_min_percent=50 (i.e. last col. min. width=10); --3456789 1234567890; 1234567890; ; // width=20, last_column_min_percent=75 (i.e. last col. min. width=15); // last_column_own_line_max_percent=75; --3456789; 123456789012345; 67890; ; // width=20, last_column_min_percent=75 (i.e. last col. min. width=15); // last_column_own_line_max_percent=33 (i.e. max. 5); --3456789; 12345; 67890; 12345; 67890. Definition at line 2798 of file OptionParser.h. ◆ printUsage() [5/5]. template<typename Syscall > . void ROOT::option::printUsage ; (; Syscall * ; prn, . int ; fd, . const Descriptor ; usage[], . int",MatchSource.WIKI,doc/master/namespaceROOT_1_1option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1option.html
https://root.cern/doc/master/namespaceROOT_1_1option.html:12950,Availability,avail,available,12950,"indows. ; Security warning: Do not insert untrusted strings (such as user-supplied arguments) into the usage. printUsage() has no protection against malicious UTF-8 sequences. Parameters. prnThe output method to use. See the examples above. ; usagethe Descriptor[] array whose help texts will be formatted. ; widththe maximum number of characters per output line. Note that this number is in actual characters, not bytes. printUsage() supports UTF-8 in help and will count multi-byte UTF-8 sequences properly. Asian wide characters are counted as 2 characters. ; last_column_min_percent(0-100) The minimum percentage of width that should be available for the last column (which typically contains the textual explanation of an option). If less space is available, the last column will be printed on its own line, indented according to last_column_own_line_max_percent. ; last_column_own_line_max_percent(0-100) If the last column is printed on its own line due to less than last_column_min_percent of the width being available, then only last_column_own_line_max_percent of the extra line(s) will be used for the last column's text. This ensures an indentation. See example below. // width=20, last_column_min_percent=50 (i.e. last col. min. width=10); --3456789 1234567890; 1234567890; ; // width=20, last_column_min_percent=75 (i.e. last col. min. width=15); // last_column_own_line_max_percent=75; --3456789; 123456789012345; 67890; ; // width=20, last_column_min_percent=75 (i.e. last col. min. width=15); // last_column_own_line_max_percent=33 (i.e. max. 5); --3456789; 12345; 67890; 12345; 67890. Definition at line 2798 of file OptionParser.h. ◆ printUsage() [5/5]. template<typename Syscall > . void ROOT::option::printUsage ; (; Syscall * ; prn, . int ; fd, . const Descriptor ; usage[], . int ; width = 80, . int ; last_column_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Definition at line 2822 of file OptionParser.h. ROOToption. ROOT master - Reference Guide Gene",MatchSource.WIKI,doc/master/namespaceROOT_1_1option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1option.html
https://root.cern/doc/master/namespaceROOT_1_1option.html:2072,Integrability,wrap,wrapping,2072,"and parses them into data structures that are easier to work with. More...;  ; struct  PrintUsageImplementation;  ; struct  Stats;  Determines the minimum lengths of the buffer and options arrays used for Parser. More...;  . Typedefs; typedef ArgStatus(* CheckArg) (const Option &option, bool msg);  Signature of functions that check if an argument is valid for a certain type of option. ;  . Enumerations; enum  ArgStatus { ARG_NONE; , ARG_OK; , ARG_IGNORE; , ARG_ILLEGAL; };  Possible results when checking if an argument is valid for a certain option. More...;  . Functions; template<typename Temporary > ; void printUsage (const Temporary &prn, const Descriptor usage[], int width=80, int last_column_min_percent=50, int last_column_own_line_max_percent=75);  ; template<typename Function > ; void printUsage (Function *prn, const Descriptor usage[], int width=80, int last_column_min_percent=50, int last_column_own_line_max_percent=75);  ; template<typename Function , typename Stream > ; void printUsage (Function *prn, Stream *stream, const Descriptor usage[], int width=80, int last_column_min_percent=50, int last_column_own_line_max_percent=75);  ; template<typename OStream > ; void printUsage (OStream &prn, const Descriptor usage[], int width=80, int last_column_min_percent=50, int last_column_own_line_max_percent=75);  Outputs a nicely formatted usage string with support for multi-column formatting and line-wrapping. ;  ; template<typename Syscall > ; void printUsage (Syscall *prn, int fd, const Descriptor usage[], int width=80, int last_column_min_percent=50, int last_column_own_line_max_percent=75);  . Detailed Description; The namespace of The Lean Mean C++ Option Parser. ; Typedef Documentation. ◆ CheckArg. typedef ArgStatus(* ROOT::option::CheckArg) (const Option &option, bool msg). Signature of functions that check if an argument is valid for a certain type of option. ; Every Option has such a function assigned in its Descriptor. Descriptor usage[] = { {UNKNOWN, 0, ",MatchSource.WIKI,doc/master/namespaceROOT_1_1option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1option.html
https://root.cern/doc/master/namespaceROOT_1_1option.html:3821,Integrability,message,message,3821,"ment: Returns ARG_NONE.Definition OptionParser.h:907; ROOT::option::DescriptorDescribes an option, its help text (usage) and how it should be parsed.Definition OptionParser.h:327; A CheckArg function has the following signature: ArgStatus CheckArg(const Option& option, bool msg); ; ROOT::option::OptionA parsed option from the command line together with its argument if it has one.Definition OptionParser.h:454; ROOT::option::ArgStatusArgStatusPossible results when checking if an argument is valid for a certain option.Definition OptionParser.h:263; ROOT::option::CheckArgArgStatus(* CheckArg)(const Option &option, bool msg)Signature of functions that check if an argument is valid for a certain type of option.Definition OptionParser.h:302; It is used to check if a potential argument would be acceptable for the option. It will even be called if there is no argument. In that case option.arg will be NULL.; If msg is true and the function determines that an argument is not acceptable and that this is a fatal error, it should output a message to the user before returning ARG_ILLEGAL. If msg is false the function should remain silent (or you will get duplicate messages).; See ArgStatus for the meaning of the return values.; While you can provide your own functions, often the following pre-defined checks (which never return ARG_ILLEGAL) will suffice:. Arg::None For options that don't take an argument: Returns ARG_NONE. ; Arg::Optional Returns ARG_OK if the argument is attached and ARG_IGNORE otherwise. . Definition at line 302 of file OptionParser.h. Enumeration Type Documentation. ◆ ArgStatus. enum ROOT::option::ArgStatus. Possible results when checking if an argument is valid for a certain option. ; In the case that no argument is provided for an option that takes an optional argument, return codes ARG_OK and ARG_IGNORE are equivalent. . EnumeratorARG_NONE The option does not take an argument. . ARG_OK The argument is acceptable for the option. . ARG_IGNORE The argument is no",MatchSource.WIKI,doc/master/namespaceROOT_1_1option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1option.html
https://root.cern/doc/master/namespaceROOT_1_1option.html:3948,Integrability,message,messages,3948,"ould be parsed.Definition OptionParser.h:327; A CheckArg function has the following signature: ArgStatus CheckArg(const Option& option, bool msg); ; ROOT::option::OptionA parsed option from the command line together with its argument if it has one.Definition OptionParser.h:454; ROOT::option::ArgStatusArgStatusPossible results when checking if an argument is valid for a certain option.Definition OptionParser.h:263; ROOT::option::CheckArgArgStatus(* CheckArg)(const Option &option, bool msg)Signature of functions that check if an argument is valid for a certain type of option.Definition OptionParser.h:302; It is used to check if a potential argument would be acceptable for the option. It will even be called if there is no argument. In that case option.arg will be NULL.; If msg is true and the function determines that an argument is not acceptable and that this is a fatal error, it should output a message to the user before returning ARG_ILLEGAL. If msg is false the function should remain silent (or you will get duplicate messages).; See ArgStatus for the meaning of the return values.; While you can provide your own functions, often the following pre-defined checks (which never return ARG_ILLEGAL) will suffice:. Arg::None For options that don't take an argument: Returns ARG_NONE. ; Arg::Optional Returns ARG_OK if the argument is attached and ARG_IGNORE otherwise. . Definition at line 302 of file OptionParser.h. Enumeration Type Documentation. ◆ ArgStatus. enum ROOT::option::ArgStatus. Possible results when checking if an argument is valid for a certain option. ; In the case that no argument is provided for an option that takes an optional argument, return codes ARG_OK and ARG_IGNORE are equivalent. . EnumeratorARG_NONE The option does not take an argument. . ARG_OK The argument is acceptable for the option. . ARG_IGNORE The argument is not acceptable but that's non-fatal because the option's argument is optional. . ARG_ILLEGAL The argument is not acceptable and that's f",MatchSource.WIKI,doc/master/namespaceROOT_1_1option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1option.html
https://root.cern/doc/master/namespaceROOT_1_1option.html:6252,Integrability,wrap,wrapping,6252,"umn_own_line_max_percent = 75 . ). Definition at line 2814 of file OptionParser.h. ◆ printUsage() [2/5]. template<typename Function > . void ROOT::option::printUsage ; (; Function * ; prn, . const Descriptor ; usage[], . int ; width = 80, . int ; last_column_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Definition at line 2806 of file OptionParser.h. ◆ printUsage() [3/5]. template<typename Function , typename Stream > . void ROOT::option::printUsage ; (; Function * ; prn, . Stream * ; stream, . const Descriptor ; usage[], . int ; width = 80, . int ; last_column_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Definition at line 2830 of file OptionParser.h. ◆ printUsage() [4/5]. template<typename OStream > . void ROOT::option::printUsage ; (; OStream & ; prn, . const Descriptor ; usage[], . int ; width = 80, . int ; last_column_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Outputs a nicely formatted usage string with support for multi-column formatting and line-wrapping. ; printUsage() takes the help texts of a Descriptor[] array and formats them into a usage message, wrapping lines to achieve the desired output width.; Table formatting:; Aside from plain strings which are simply line-wrapped, the usage may contain tables. Tables are used to align elements in the output.; // Without a table. The explanatory texts are not aligned.; -c, --create |Creates something.; -k, --kill |Destroys something.; ; // With table formatting. The explanatory texts are aligned.; -c, --create |Creates something.; -k, --kill |Destroys something.; c#define c(i)Definition RSha256.hxx:101; Table formatting removes the need to pad help texts manually with spaces to achieve alignment. To create a table, simply insert \t (tab) characters to separate the cells within a row.; const option::Descriptor usage[] = {; {..., ""-c, --create \tCreates something."" },; {..., ""-k, --kill \tDestroys something."" }, ...; Note that you must includ",MatchSource.WIKI,doc/master/namespaceROOT_1_1option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1option.html
https://root.cern/doc/master/namespaceROOT_1_1option.html:6352,Integrability,message,message,6352,"nction > . void ROOT::option::printUsage ; (; Function * ; prn, . const Descriptor ; usage[], . int ; width = 80, . int ; last_column_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Definition at line 2806 of file OptionParser.h. ◆ printUsage() [3/5]. template<typename Function , typename Stream > . void ROOT::option::printUsage ; (; Function * ; prn, . Stream * ; stream, . const Descriptor ; usage[], . int ; width = 80, . int ; last_column_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Definition at line 2830 of file OptionParser.h. ◆ printUsage() [4/5]. template<typename OStream > . void ROOT::option::printUsage ; (; OStream & ; prn, . const Descriptor ; usage[], . int ; width = 80, . int ; last_column_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Outputs a nicely formatted usage string with support for multi-column formatting and line-wrapping. ; printUsage() takes the help texts of a Descriptor[] array and formats them into a usage message, wrapping lines to achieve the desired output width.; Table formatting:; Aside from plain strings which are simply line-wrapped, the usage may contain tables. Tables are used to align elements in the output.; // Without a table. The explanatory texts are not aligned.; -c, --create |Creates something.; -k, --kill |Destroys something.; ; // With table formatting. The explanatory texts are aligned.; -c, --create |Creates something.; -k, --kill |Destroys something.; c#define c(i)Definition RSha256.hxx:101; Table formatting removes the need to pad help texts manually with spaces to achieve alignment. To create a table, simply insert \t (tab) characters to separate the cells within a row.; const option::Descriptor usage[] = {; {..., ""-c, --create \tCreates something."" },; {..., ""-k, --kill \tDestroys something."" }, ...; Note that you must include the minimum amount of space desired between cells yourself. Table formatting will insert further spaces as needed to achieve",MatchSource.WIKI,doc/master/namespaceROOT_1_1option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1option.html
https://root.cern/doc/master/namespaceROOT_1_1option.html:6361,Integrability,wrap,wrapping,6361,"nction > . void ROOT::option::printUsage ; (; Function * ; prn, . const Descriptor ; usage[], . int ; width = 80, . int ; last_column_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Definition at line 2806 of file OptionParser.h. ◆ printUsage() [3/5]. template<typename Function , typename Stream > . void ROOT::option::printUsage ; (; Function * ; prn, . Stream * ; stream, . const Descriptor ; usage[], . int ; width = 80, . int ; last_column_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Definition at line 2830 of file OptionParser.h. ◆ printUsage() [4/5]. template<typename OStream > . void ROOT::option::printUsage ; (; OStream & ; prn, . const Descriptor ; usage[], . int ; width = 80, . int ; last_column_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Outputs a nicely formatted usage string with support for multi-column formatting and line-wrapping. ; printUsage() takes the help texts of a Descriptor[] array and formats them into a usage message, wrapping lines to achieve the desired output width.; Table formatting:; Aside from plain strings which are simply line-wrapped, the usage may contain tables. Tables are used to align elements in the output.; // Without a table. The explanatory texts are not aligned.; -c, --create |Creates something.; -k, --kill |Destroys something.; ; // With table formatting. The explanatory texts are aligned.; -c, --create |Creates something.; -k, --kill |Destroys something.; c#define c(i)Definition RSha256.hxx:101; Table formatting removes the need to pad help texts manually with spaces to achieve alignment. To create a table, simply insert \t (tab) characters to separate the cells within a row.; const option::Descriptor usage[] = {; {..., ""-c, --create \tCreates something."" },; {..., ""-k, --kill \tDestroys something."" }, ...; Note that you must include the minimum amount of space desired between cells yourself. Table formatting will insert further spaces as needed to achieve",MatchSource.WIKI,doc/master/namespaceROOT_1_1option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1option.html
https://root.cern/doc/master/namespaceROOT_1_1option.html:6480,Integrability,wrap,wrapped,6480,"lumn_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Definition at line 2806 of file OptionParser.h. ◆ printUsage() [3/5]. template<typename Function , typename Stream > . void ROOT::option::printUsage ; (; Function * ; prn, . Stream * ; stream, . const Descriptor ; usage[], . int ; width = 80, . int ; last_column_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Definition at line 2830 of file OptionParser.h. ◆ printUsage() [4/5]. template<typename OStream > . void ROOT::option::printUsage ; (; OStream & ; prn, . const Descriptor ; usage[], . int ; width = 80, . int ; last_column_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Outputs a nicely formatted usage string with support for multi-column formatting and line-wrapping. ; printUsage() takes the help texts of a Descriptor[] array and formats them into a usage message, wrapping lines to achieve the desired output width.; Table formatting:; Aside from plain strings which are simply line-wrapped, the usage may contain tables. Tables are used to align elements in the output.; // Without a table. The explanatory texts are not aligned.; -c, --create |Creates something.; -k, --kill |Destroys something.; ; // With table formatting. The explanatory texts are aligned.; -c, --create |Creates something.; -k, --kill |Destroys something.; c#define c(i)Definition RSha256.hxx:101; Table formatting removes the need to pad help texts manually with spaces to achieve alignment. To create a table, simply insert \t (tab) characters to separate the cells within a row.; const option::Descriptor usage[] = {; {..., ""-c, --create \tCreates something."" },; {..., ""-k, --kill \tDestroys something."" }, ...; Note that you must include the minimum amount of space desired between cells yourself. Table formatting will insert further spaces as needed to achieve alignment.; You can insert line breaks within cells by using \v (vertical tab).; const option::Descriptor usage[] = {; {..., ""-",MatchSource.WIKI,doc/master/namespaceROOT_1_1option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1option.html
https://root.cern/doc/master/namespaceROOT_1_1option.html:10886,Integrability,wrap,wrapping,10886,"ter {; void write(const char* buf, size_t size) const {; fwrite(str, size, 1, stdout);; }; };; ; struct MyWriteFunctor {; void operator()(const char* buf, size_t size) {; fwrite(str, size, 1, stdout);; }; };; ...; printUsage(my_write, usage); // custom write function; printUsage(MyWriter(), usage); // temporary of a custom class; MyWriter writer;; printUsage(writer, usage); // custom class object; MyWriteFunctor wfunctor;; printUsage(&wfunctor, usage); // custom functor; printUsage(write, 1, usage); // write() to file descriptor 1; printUsage(cout, usage); // an ostream&; printUsage(fwrite, stdout, usage); // fwrite() to stdout; ostringstream sstr;; printUsage(sstr, usage); // an ostringstream&; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; operator()TRObject operator()(const T1 &t1) constDefinition TRFunctionImport__oprtr.h:14; ROOT::option::printUsagevoid printUsage(OStream &prn, const Descriptor usage[], int width=80, int last_column_min_percent=50, int last_column_own_line_max_percent=75)Outputs a nicely formatted usage string with support for multi-column formatting and line-wrapping.Definition OptionParser.h:2798; writerDefinition writer.py:1; Notes:; the write() method of a class that is to be passed as a temporary as MyWriter() is in the example, must be a const method, because temporary objects are passed as const reference. This only applies to temporary objects that are created and destroyed in the same statement. If you create an object like writer in the example, this restriction does not apply. ; a functor like MyWriteFunctor in the example must be passed as a pointer. This differs from the way functors are passed to e.g. the STL algorithms. ; All printUsage() templates are tiny wrappers around a shared non-template implementation. So there's no penalty for using different versions in the same program. ; printUsage() always interprets Descriptor::help as UTF-8 and always produces UTF-8-encoded output. If your system uses a ",MatchSource.WIKI,doc/master/namespaceROOT_1_1option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1option.html
https://root.cern/doc/master/namespaceROOT_1_1option.html:11511,Integrability,wrap,wrappers,11511,"e of a square matrix; operator()TRObject operator()(const T1 &t1) constDefinition TRFunctionImport__oprtr.h:14; ROOT::option::printUsagevoid printUsage(OStream &prn, const Descriptor usage[], int width=80, int last_column_min_percent=50, int last_column_own_line_max_percent=75)Outputs a nicely formatted usage string with support for multi-column formatting and line-wrapping.Definition OptionParser.h:2798; writerDefinition writer.py:1; Notes:; the write() method of a class that is to be passed as a temporary as MyWriter() is in the example, must be a const method, because temporary objects are passed as const reference. This only applies to temporary objects that are created and destroyed in the same statement. If you create an object like writer in the example, this restriction does not apply. ; a functor like MyWriteFunctor in the example must be passed as a pointer. This differs from the way functors are passed to e.g. the STL algorithms. ; All printUsage() templates are tiny wrappers around a shared non-template implementation. So there's no penalty for using different versions in the same program. ; printUsage() always interprets Descriptor::help as UTF-8 and always produces UTF-8-encoded output. If your system uses a different charset, you must do your own conversion. You may also need to change the font of the console to see non-ASCII characters properly. This is particularly true for Windows. ; Security warning: Do not insert untrusted strings (such as user-supplied arguments) into the usage. printUsage() has no protection against malicious UTF-8 sequences. Parameters. prnThe output method to use. See the examples above. ; usagethe Descriptor[] array whose help texts will be formatted. ; widththe maximum number of characters per output line. Note that this number is in actual characters, not bytes. printUsage() supports UTF-8 in help and will count multi-byte UTF-8 sequences properly. Asian wide characters are counted as 2 characters. ; last_column_min_percen",MatchSource.WIKI,doc/master/namespaceROOT_1_1option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1option.html
https://root.cern/doc/master/namespaceROOT_1_1option.html:6468,Usability,simpl,simply,6468,"lumn_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Definition at line 2806 of file OptionParser.h. ◆ printUsage() [3/5]. template<typename Function , typename Stream > . void ROOT::option::printUsage ; (; Function * ; prn, . Stream * ; stream, . const Descriptor ; usage[], . int ; width = 80, . int ; last_column_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Definition at line 2830 of file OptionParser.h. ◆ printUsage() [4/5]. template<typename OStream > . void ROOT::option::printUsage ; (; OStream & ; prn, . const Descriptor ; usage[], . int ; width = 80, . int ; last_column_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Outputs a nicely formatted usage string with support for multi-column formatting and line-wrapping. ; printUsage() takes the help texts of a Descriptor[] array and formats them into a usage message, wrapping lines to achieve the desired output width.; Table formatting:; Aside from plain strings which are simply line-wrapped, the usage may contain tables. Tables are used to align elements in the output.; // Without a table. The explanatory texts are not aligned.; -c, --create |Creates something.; -k, --kill |Destroys something.; ; // With table formatting. The explanatory texts are aligned.; -c, --create |Creates something.; -k, --kill |Destroys something.; c#define c(i)Definition RSha256.hxx:101; Table formatting removes the need to pad help texts manually with spaces to achieve alignment. To create a table, simply insert \t (tab) characters to separate the cells within a row.; const option::Descriptor usage[] = {; {..., ""-c, --create \tCreates something."" },; {..., ""-k, --kill \tDestroys something."" }, ...; Note that you must include the minimum amount of space desired between cells yourself. Table formatting will insert further spaces as needed to achieve alignment.; You can insert line breaks within cells by using \v (vertical tab).; const option::Descriptor usage[] = {; {..., ""-",MatchSource.WIKI,doc/master/namespaceROOT_1_1option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1option.html
https://root.cern/doc/master/namespaceROOT_1_1option.html:6982,Usability,simpl,simply,6982,"OStream & ; prn, . const Descriptor ; usage[], . int ; width = 80, . int ; last_column_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Outputs a nicely formatted usage string with support for multi-column formatting and line-wrapping. ; printUsage() takes the help texts of a Descriptor[] array and formats them into a usage message, wrapping lines to achieve the desired output width.; Table formatting:; Aside from plain strings which are simply line-wrapped, the usage may contain tables. Tables are used to align elements in the output.; // Without a table. The explanatory texts are not aligned.; -c, --create |Creates something.; -k, --kill |Destroys something.; ; // With table formatting. The explanatory texts are aligned.; -c, --create |Creates something.; -k, --kill |Destroys something.; c#define c(i)Definition RSha256.hxx:101; Table formatting removes the need to pad help texts manually with spaces to achieve alignment. To create a table, simply insert \t (tab) characters to separate the cells within a row.; const option::Descriptor usage[] = {; {..., ""-c, --create \tCreates something."" },; {..., ""-k, --kill \tDestroys something."" }, ...; Note that you must include the minimum amount of space desired between cells yourself. Table formatting will insert further spaces as needed to achieve alignment.; You can insert line breaks within cells by using \v (vertical tab).; const option::Descriptor usage[] = {; {..., ""-c,\v--create \tCreates\vsomething."" },; {..., ""-k,\v--kill \tDestroys\vsomething."" }, ...; ; // results in; ; -c, Creates; --create something.; -k, Destroys; --kill something.; You can mix lines that do not use \t or \v with those that do. The plain lines will not mess up the table layout. Alignment of the table columns will be maintained even across these interjections.; const option::Descriptor usage[] = {; {..., ""-c, --create \tCreates something."" },; {..., ""----------------------------------"" },; {..., ""-k, --kill \tDestroys somethi",MatchSource.WIKI,doc/master/namespaceROOT_1_1option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1option.html
https://root.cern/doc/master/namespaceROOT_1_1Quartz.html:4134,Modifiability,extend,extendedColor,4134,"_t markerSize);  ; void DrawMarkerOpenSquare (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerOpenSquareDiagonal (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerOpenStar (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerOpenThreeTriangles (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerOpenTriangleDown (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerOpenTriangleUp (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerPlus (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerStar (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerX (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawPattern (void *data, CGContextRef ctx);  ; void DrawPolygonWithGradientFill (CGContextRef ctx, const TColorGradient *extendedColor, const CGSize &sizeOfDrawable, Int_t nPoints, const TPoint *xy, Bool_t drawShadow);  ; void DrawPolyLine (CGContextRef ctx, Int_t n, TPoint *xy);  ; void DrawPolyMarker (CGContextRef ctx, const std::vector< TPoint > &marker, Size_t markerSize, Style_t markerStyle);  ; void DrawPolyMarker (CGContextRef ctx, unsigned nPoints, const TPoint *marker, Size_t markerSize, Style_t markerStyle);  ; void DrawTextLineNoKerning (CGContextRef ctx, CTFontRef font, const std::vector< UniChar > &text, Int_t x, Int_t y);  ; Bool_t SetFillAreaParameters (CGContextRef ctx, unsigned *patternIndex);  ; Bool_t SetFillColor (CGContextRef ctx, Color_t colorIndex);  ; bool SetFillPattern (CGContextRef ctx, const unsigned *patternIndex);  ; Bool_t SetLineColor (CGContextRef ctx, Color_t colorIndex);  ; void SetLineStyle (CGContextRef ctx, Int_t lstyle);  ; void SetLineType (CGContextRef ctx, Int_t n, Int_t *dash);  ; void SetLineWidth (CGContextRef ctx, Int_t width);  .",MatchSource.WIKI,doc/master/namespaceROOT_1_1Quartz.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Quartz.html
https://root.cern/doc/master/namespaceROOT_1_1Quartz.html:13506,Modifiability,extend,extendedColor,13506,"rkerOpenTriangleUp ; (; CGContextRef ; ctx, . unsigned ; n, . const TPoint * ; xy, . Size_t ; markerSize . ). Definition at line 229 of file QuartzMarker.mm. ◆ DrawMarkerPlus(). void ROOT::Quartz::DrawMarkerPlus ; (; CGContextRef ; ctx, . unsigned ; n, . const TPoint * ; xy, . Size_t ; markerSize . ). Definition at line 30 of file QuartzMarker.mm. ◆ DrawMarkerStar(). void ROOT::Quartz::DrawMarkerStar ; (; CGContextRef ; ctx, . unsigned ; n, . const TPoint * ; xy, . Size_t ; markerSize . ). Definition at line 53 of file QuartzMarker.mm. ◆ DrawMarkerX(). void ROOT::Quartz::DrawMarkerX ; (; CGContextRef ; ctx, . unsigned ; n, . const TPoint * ; xy, . Size_t ; markerSize . ). Definition at line 118 of file QuartzMarker.mm. ◆ DrawPattern(). void ROOT::Quartz::DrawPattern ; (; void * ; data, . CGContextRef ; ctx . ). Definition at line 327 of file QuartzFillArea.mm. ◆ DrawPolygonWithGradientFill(). void ROOT::Quartz::DrawPolygonWithGradientFill ; (; CGContextRef ; ctx, . const TColorGradient * ; extendedColor, . const CGSize & ; sizeOfDrawable, . Int_t ; nPoints, . const TPoint * ; xy, . Bool_t ; drawShadow . ). Definition at line 479 of file QuartzFillArea.mm. ◆ DrawPolyLine(). void ROOT::Quartz::DrawPolyLine ; (; CGContextRef ; ctx, . Int_t ; n, . TPoint * ; xy . ). Definition at line 135 of file QuartzLine.mm. ◆ DrawPolyMarker() [1/2]. void ROOT::Quartz::DrawPolyMarker ; (; CGContextRef ; ctx, . const std::vector< TPoint > & ; marker, . Size_t ; markerSize, . Style_t ; markerStyle . ). Definition at line 1025 of file QuartzMarker.mm. ◆ DrawPolyMarker() [2/2]. void ROOT::Quartz::DrawPolyMarker ; (; CGContextRef ; ctx, . unsigned ; nPoints, . const TPoint * ; marker, . Size_t ; markerSize, . Style_t ; markerStyle . ). Definition at line 908 of file QuartzMarker.mm. ◆ DrawTextLineNoKerning(). void ROOT::Quartz::DrawTextLineNoKerning ; (; CGContextRef ; ctx, . CTFontRef ; font, . const std::vector< UniChar > & ; text, . Int_t ; x, . Int_t ; y . ). Definition at line 319 of",MatchSource.WIKI,doc/master/namespaceROOT_1_1Quartz.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Quartz.html
https://root.cern/doc/master/namespaceROOT_1_1RDF.html:12894,Availability,down,down,12894,"escription . ). Definition at line 34 of file RDFDescription.cxx. ◆ operator==() [1/3]. template<class T1 , class T2 > . bool ROOT::RDF::operator== ; (; const RResultPtr< T1 > & ; lhs, . const RResultPtr< T2 > & ; rhs . ). Definition at line 401 of file RResultPtr.hxx. ◆ operator==() [2/3]. template<class T1 > . bool ROOT::RDF::operator== ; (; const RResultPtr< T1 > & ; lhs, . std::nullptr_t ; rhs . ). Definition at line 413 of file RResultPtr.hxx. ◆ operator==() [3/3]. template<class T1 > . bool ROOT::RDF::operator== ; (; std::nullptr_t ; lhs, . const RResultPtr< T1 > & ; rhs . ). Definition at line 419 of file RResultPtr.hxx. ◆ PassAsVec(). template<std::size_t N, typename T , typename F > . auto ROOT::RDF::PassAsVec ; (; F && ; f); -> RDFInternal::PassAsVecHelper<std::make_index_sequence<N>, T, F>. PassAsVec is a callable generator that allows passing N variables of type T to a function as a single collection. ; PassAsVec<N, T>(func) returns a callable that takes N arguments of type T, passes them down to function func as an initializer list {t1, t2, t3,..., tN} and returns whatever f({t1, t2, t3, ..., tN}) returns.; Note that for this to work with RDataFrame the type of all columns that the callable is applied to must be exactly T. Example usage together with RDataFrame (""varX"" columns must all be float variables): bool myVecFunc(std::vector<float> args);; df.Filter(PassAsVec<3, float>(myVecFunc), {""var1"", ""var2"", ""var3""});. Definition at line 103 of file RDFHelpers.hxx. ◆ RunGraphs(). unsigned int ROOT::RDF::RunGraphs ; (; std::vector< RResultHandle > ; handles). Trigger the event loop of multiple RDataFrames concurrently. ; Parameters. [in]handlesA vector of RResultHandles . ReturnsThe number of distinct computation graphs that have been processed; This function triggers the event loop of all computation graphs which relate to the given RResultHandles. The advantage compared to running the event loop implicitly by accessing the RResultPtr is that the event loo",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1RDF.html:15254,Availability,down,downstream,15254,"tPtr -> RResultHandle conversion is automatic; ROOT::RDF::RunGraphs({r1, r2});; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Definition at line 66 of file RDFHelpers.cxx. ◆ SaveGraph() [1/2]. template<typename NodeType > . std::string ROOT::RDF::SaveGraph ; (; NodeType ; node). Create a graphviz representation of the dataframe computation graph, return it as a string. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be called concurrently from different threads. ; Definition at line 120 of file RDFHelpers.hxx. ◆ SaveGraph() [2/2]. template<typename NodeType > . void ROOT::RDF::SaveGraph ; (; NodeType ; node, . const std::string & ; outputFile . ). Create a graphviz representation of the dataframe computation graph, write it to the specified file. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. ; [in]outputFilefile where to save the representation. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be ",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1RDF.html:16129,Availability,down,downstream,16129,"RDFHelpers.cxx. ◆ SaveGraph() [1/2]. template<typename NodeType > . std::string ROOT::RDF::SaveGraph ; (; NodeType ; node). Create a graphviz representation of the dataframe computation graph, return it as a string. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be called concurrently from different threads. ; Definition at line 120 of file RDFHelpers.hxx. ◆ SaveGraph() [2/2]. template<typename NodeType > . void ROOT::RDF::SaveGraph ; (; NodeType ; node, . const std::string & ; outputFile . ). Create a graphviz representation of the dataframe computation graph, write it to the specified file. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. ; [in]outputFilefile where to save the representation. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be called concurrently from different threads. ; Definition at line 139 of file RDFHelpers.hxx. ◆ splitInEqualRanges(). void ROOT::RDF::splitInEqualRanges ; (; std::vector< std::pair< ULong64_t, ULong64_t > > & ; ranges, . int ; nRecords, . unsigned int ; nSlots . ). Definition at line 519 of file RArrowDS.cxx. ROOTRDF. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1RDF.html:13972,Energy Efficiency,efficient,efficient,13972,", t2, t3,..., tN} and returns whatever f({t1, t2, t3, ..., tN}) returns.; Note that for this to work with RDataFrame the type of all columns that the callable is applied to must be exactly T. Example usage together with RDataFrame (""varX"" columns must all be float variables): bool myVecFunc(std::vector<float> args);; df.Filter(PassAsVec<3, float>(myVecFunc), {""var1"", ""var2"", ""var3""});. Definition at line 103 of file RDFHelpers.hxx. ◆ RunGraphs(). unsigned int ROOT::RDF::RunGraphs ; (; std::vector< RResultHandle > ; handles). Trigger the event loop of multiple RDataFrames concurrently. ; Parameters. [in]handlesA vector of RResultHandles . ReturnsThe number of distinct computation graphs that have been processed; This function triggers the event loop of all computation graphs which relate to the given RResultHandles. The advantage compared to running the event loop implicitly by accessing the RResultPtr is that the event loops will run concurrently. Therefore, the overall computation of all results is generally more efficient. It should be noted that user-defined operations (e.g., Filters and Defines) of the different RDataFrame graphs are assumed to be safe to call concurrently.; ROOT::RDataFrame df1(""tree1"", ""file1.root"");; auto r1 = df1.Histo1D(""var1"");; ; ROOT::RDataFrame df2(""tree2"", ""file2.root"");; auto r2 = df2.Sum(""var2"");; ; // RResultPtr -> RResultHandle conversion is automatic; ROOT::RDF::RunGraphs({r1, r2});; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Definition at line 66 of file RDFHelpers.cxx. ◆ SaveGraph() [1/2]. template<typename NodeType > . std::string ROOT::RDF::SaveGraph ; (; NodeType ; node). Create a graphviz representation of the dataframe computation graph, return it as a string.",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1RDF.html:323,Integrability,interface,interface,323,". ROOT: ROOT::RDF Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Functions ; ROOT::RDF Namespace Reference. Namespaces; namespace  Experimental;  ; namespace  Internal;  . Classes; class  RArrowDS;  RDataFrame data source class to interface with Apache Arrow. More...;  ; class  RCsvDS;  RDataFrame data source class for reading CSV files. More...;  ; class  RCutFlowReport;  ; class  RDataSource;  RDataSource defines an API that RDataFrame can use to read arbitrary data formats. More...;  ; class  RDFDescription;  A DFDescription contains useful information about a given RDataFrame computation graph. More...;  ; class  RDFTypeNameGetter;  Helper to get the contents of a given column. More...;  ; class  RDisplay;  This class is the textual representation of the content of a columnar dataset. More...;  ; class  RInterface;  The public interface to the RDataFrame federation of classes. More...;  ; class  RInterfaceBase;  ; class  RLazyDS;  A RDataSource implementation which is built on top of result proxies. More...;  ; class  RResultHandle;  A type-erased version of RResultPtr and RResultMap. More...;  ; class  RResultPtr;  Smart pointer for the return type of actions. More...;  ; class  RSampleInfo;  This type represents a sample identifier, to be used in conjunction with RDataFrame features such as DefinePerSample() and per-sample callbacks. More...;  ; struct  RSnapshotOptions;  A collection of options to steer the creation of the dataset on file. More...;  ; class  RSqliteDS;  RSqliteDS is an RDF data source implementation for SQL result sets from sqlite3 files. More...;  ; class  RTrivialDS;  A simple data-source implementation, for demo purposes. More...;  ; class  RVariationsDescription;  A descriptor for the systematic variations known to a given RDataFrame node. More...;  ; class  TCutInfo;  ; class  TH1DModel;  A struct which stores the parameters of a TH1D. More...;  ; ",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1RDF.html:935,Integrability,interface,interface,935,". ROOT: ROOT::RDF Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Functions ; ROOT::RDF Namespace Reference. Namespaces; namespace  Experimental;  ; namespace  Internal;  . Classes; class  RArrowDS;  RDataFrame data source class to interface with Apache Arrow. More...;  ; class  RCsvDS;  RDataFrame data source class for reading CSV files. More...;  ; class  RCutFlowReport;  ; class  RDataSource;  RDataSource defines an API that RDataFrame can use to read arbitrary data formats. More...;  ; class  RDFDescription;  A DFDescription contains useful information about a given RDataFrame computation graph. More...;  ; class  RDFTypeNameGetter;  Helper to get the contents of a given column. More...;  ; class  RDisplay;  This class is the textual representation of the content of a columnar dataset. More...;  ; class  RInterface;  The public interface to the RDataFrame federation of classes. More...;  ; class  RInterfaceBase;  ; class  RLazyDS;  A RDataSource implementation which is built on top of result proxies. More...;  ; class  RResultHandle;  A type-erased version of RResultPtr and RResultMap. More...;  ; class  RResultPtr;  Smart pointer for the return type of actions. More...;  ; class  RSampleInfo;  This type represents a sample identifier, to be used in conjunction with RDataFrame features such as DefinePerSample() and per-sample callbacks. More...;  ; struct  RSnapshotOptions;  A collection of options to steer the creation of the dataset on file. More...;  ; class  RSqliteDS;  RSqliteDS is an RDF data source implementation for SQL result sets from sqlite3 files. More...;  ; class  RTrivialDS;  A simple data-source implementation, for demo purposes. More...;  ; class  RVariationsDescription;  A descriptor for the systematic variations known to a given RDataFrame node. More...;  ; class  TCutInfo;  ; class  TH1DModel;  A struct which stores the parameters of a TH1D. More...;  ; ",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1RDF.html:4032,Integrability,wrap,wrapping,4032,"ROOT::RDF::RNode. ;  ; RDataFrame FromArrow (std::shared_ptr< arrow::Table > table, std::vector< std::string > const &columnNames);  Factory method to create a Apache Arrow RDataFrame. ;  ; RDataFrame FromCSV (std::string_view fileName, bool readHeaders=true, char delimiter=',', Long64_t linesChunkSize=-1LL, std::unordered_map< std::string, char > &&colTypes={});  Factory method to create a CSV RDataFrame. ;  ; RDataFrame FromSqlite (std::string_view fileName, std::string_view query);  Factory method to create a SQlite RDataFrame. ;  ; template<typename T > ; std::shared_ptr< arrow::ChunkedArray > getData (T p);  ; int getNRecords (std::shared_ptr< arrow::Table > &table, std::vector< std::string > &columnNames);  ; template<typename... ColumnTypes> ; RDataFrame MakeLazyDataFrame (std::pair< std::string, RResultPtr< std::vector< ColumnTypes > > > &&... colNameProxyPairs);  Factory method to create a Lazy RDataFrame. ;  ; RInterface< RDFDetail::RLoopManager > MakeTrivialDataFrame ();  Make a RDF wrapping a RTrivialDS with infinite entries, for demo purposes. ;  ; RInterface< RDFDetail::RLoopManager > MakeTrivialDataFrame (ULong64_t size, bool skipEvenEntries=false);  Make a RDF wrapping a RTrivialDS with the specified amount of entries. ;  ; template<typename F , typename Args = typename ROOT::TypeTraits::CallableTraits<std::decay_t<F>>::arg_types_nodecay, typename Ret = typename ROOT::TypeTraits::CallableTraits<std::decay_t<F>>::ret_type> ; auto Not (F &&f) -> decltype(RDFInternal::NotHelper(Args(), std::forward< F >(f)));  Given a callable with signature bool(T1, T2, ...) return a callable with same signature that returns the negated result. ;  ; template<class T1 , class T2 > ; bool operator!= (const RResultPtr< T1 > &lhs, const RResultPtr< T2 > &rhs);  ; template<class T1 > ; bool operator!= (const RResultPtr< T1 > &lhs, std::nullptr_t rhs);  ; template<class T1 > ; bool operator!= (std::nullptr_t lhs, const RResultPtr< T1 > &rhs);  ; std::ostream & operator<< (st",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1RDF.html:4218,Integrability,wrap,wrapping,4218,"che Arrow RDataFrame. ;  ; RDataFrame FromCSV (std::string_view fileName, bool readHeaders=true, char delimiter=',', Long64_t linesChunkSize=-1LL, std::unordered_map< std::string, char > &&colTypes={});  Factory method to create a CSV RDataFrame. ;  ; RDataFrame FromSqlite (std::string_view fileName, std::string_view query);  Factory method to create a SQlite RDataFrame. ;  ; template<typename T > ; std::shared_ptr< arrow::ChunkedArray > getData (T p);  ; int getNRecords (std::shared_ptr< arrow::Table > &table, std::vector< std::string > &columnNames);  ; template<typename... ColumnTypes> ; RDataFrame MakeLazyDataFrame (std::pair< std::string, RResultPtr< std::vector< ColumnTypes > > > &&... colNameProxyPairs);  Factory method to create a Lazy RDataFrame. ;  ; RInterface< RDFDetail::RLoopManager > MakeTrivialDataFrame ();  Make a RDF wrapping a RTrivialDS with infinite entries, for demo purposes. ;  ; RInterface< RDFDetail::RLoopManager > MakeTrivialDataFrame (ULong64_t size, bool skipEvenEntries=false);  Make a RDF wrapping a RTrivialDS with the specified amount of entries. ;  ; template<typename F , typename Args = typename ROOT::TypeTraits::CallableTraits<std::decay_t<F>>::arg_types_nodecay, typename Ret = typename ROOT::TypeTraits::CallableTraits<std::decay_t<F>>::ret_type> ; auto Not (F &&f) -> decltype(RDFInternal::NotHelper(Args(), std::forward< F >(f)));  Given a callable with signature bool(T1, T2, ...) return a callable with same signature that returns the negated result. ;  ; template<class T1 , class T2 > ; bool operator!= (const RResultPtr< T1 > &lhs, const RResultPtr< T2 > &rhs);  ; template<class T1 > ; bool operator!= (const RResultPtr< T1 > &lhs, std::nullptr_t rhs);  ; template<class T1 > ; bool operator!= (std::nullptr_t lhs, const RResultPtr< T1 > &rhs);  ; std::ostream & operator<< (std::ostream &os, const RDFDescription &description);  ; template<class T1 , class T2 > ; bool operator== (const RResultPtr< T1 > &lhs, const RResultPtr< T2 > &rhs);",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1RDF.html:9876,Integrability,wrap,wrapping,9876,". ◆ getData(). template<typename T > . std::shared_ptr< arrow::ChunkedArray > ROOT::RDF::getData ; (; T ; p). Definition at line 542 of file RArrowDS.cxx. ◆ getNRecords(). int ROOT::RDF::getNRecords ; (; std::shared_ptr< arrow::Table > & ; table, . std::vector< std::string > & ; columnNames . ). Definition at line 535 of file RArrowDS.cxx. ◆ MakeLazyDataFrame(). template<typename... ColumnTypes> . RDataFrame ROOT::RDF::MakeLazyDataFrame ; (; std::pair< std::string, RResultPtr< std::vector< ColumnTypes > > > &&... ; colNameProxyPairs). Factory method to create a Lazy RDataFrame. ; Parameters. [in]colNameProxyPairsthe series of pairs to describe the columns of the data source, first element of the pair is the name of the column and the second is the RResultPtr to the column in the parent data frame. . Definition at line 29 of file RLazyDS.hxx. ◆ MakeTrivialDataFrame() [1/2]. RInterface< RDFDetail::RLoopManager > ROOT::RDF::MakeTrivialDataFrame ; (; ). Make a RDF wrapping a RTrivialDS with infinite entries, for demo purposes. ; Definition at line 130 of file RTrivialDS.cxx. ◆ MakeTrivialDataFrame() [2/2]. RInterface< RDFDetail::RLoopManager > ROOT::RDF::MakeTrivialDataFrame ; (; ULong64_t ; size, . bool ; skipEvenEntries = false . ). Make a RDF wrapping a RTrivialDS with the specified amount of entries. ; Constructing an RDataFrame as RDataFrame(nEntries) is a superior alternative. If size is std::numeric_limits<ULong64_t>::max(), this acts as an infinite data-source: it returns entries from GetEntryRanges forever or until a Range stops the event loop (for test purposes). ; Definition at line 123 of file RTrivialDS.cxx. ◆ Not(). template<typename F , typename Args = typename ROOT::TypeTraits::CallableTraits<std::decay_t<F>>::arg_types_nodecay, typename Ret = typename ROOT::TypeTraits::CallableTraits<std::decay_t<F>>::ret_type> . auto ROOT::RDF::Not ; (; F && ; f); -> decltype(RDFInternal::NotHelper(Args(), std::forward<F>(f))). Given a callable with signature bool(T1, T",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1RDF.html:10163,Integrability,wrap,wrapping,10163,"nNames . ). Definition at line 535 of file RArrowDS.cxx. ◆ MakeLazyDataFrame(). template<typename... ColumnTypes> . RDataFrame ROOT::RDF::MakeLazyDataFrame ; (; std::pair< std::string, RResultPtr< std::vector< ColumnTypes > > > &&... ; colNameProxyPairs). Factory method to create a Lazy RDataFrame. ; Parameters. [in]colNameProxyPairsthe series of pairs to describe the columns of the data source, first element of the pair is the name of the column and the second is the RResultPtr to the column in the parent data frame. . Definition at line 29 of file RLazyDS.hxx. ◆ MakeTrivialDataFrame() [1/2]. RInterface< RDFDetail::RLoopManager > ROOT::RDF::MakeTrivialDataFrame ; (; ). Make a RDF wrapping a RTrivialDS with infinite entries, for demo purposes. ; Definition at line 130 of file RTrivialDS.cxx. ◆ MakeTrivialDataFrame() [2/2]. RInterface< RDFDetail::RLoopManager > ROOT::RDF::MakeTrivialDataFrame ; (; ULong64_t ; size, . bool ; skipEvenEntries = false . ). Make a RDF wrapping a RTrivialDS with the specified amount of entries. ; Constructing an RDataFrame as RDataFrame(nEntries) is a superior alternative. If size is std::numeric_limits<ULong64_t>::max(), this acts as an infinite data-source: it returns entries from GetEntryRanges forever or until a Range stops the event loop (for test purposes). ; Definition at line 123 of file RTrivialDS.cxx. ◆ Not(). template<typename F , typename Args = typename ROOT::TypeTraits::CallableTraits<std::decay_t<F>>::arg_types_nodecay, typename Ret = typename ROOT::TypeTraits::CallableTraits<std::decay_t<F>>::ret_type> . auto ROOT::RDF::Not ; (; F && ; f); -> decltype(RDFInternal::NotHelper(Args(), std::forward<F>(f))). Given a callable with signature bool(T1, T2, ...) return a callable with same signature that returns the negated result. ; The callable must have one single non-template definition of operator(). This is a limitation with respect to std::not_fn, required for interoperability with RDataFrame. ; Definition at line 83 of file RD",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1RDF.html:11119,Integrability,interoperab,interoperability,11119,"_t ; size, . bool ; skipEvenEntries = false . ). Make a RDF wrapping a RTrivialDS with the specified amount of entries. ; Constructing an RDataFrame as RDataFrame(nEntries) is a superior alternative. If size is std::numeric_limits<ULong64_t>::max(), this acts as an infinite data-source: it returns entries from GetEntryRanges forever or until a Range stops the event loop (for test purposes). ; Definition at line 123 of file RTrivialDS.cxx. ◆ Not(). template<typename F , typename Args = typename ROOT::TypeTraits::CallableTraits<std::decay_t<F>>::arg_types_nodecay, typename Ret = typename ROOT::TypeTraits::CallableTraits<std::decay_t<F>>::ret_type> . auto ROOT::RDF::Not ; (; F && ; f); -> decltype(RDFInternal::NotHelper(Args(), std::forward<F>(f))). Given a callable with signature bool(T1, T2, ...) return a callable with same signature that returns the negated result. ; The callable must have one single non-template definition of operator(). This is a limitation with respect to std::not_fn, required for interoperability with RDataFrame. ; Definition at line 83 of file RDFHelpers.hxx. ◆ operator!=() [1/3]. template<class T1 , class T2 > . bool ROOT::RDF::operator!= ; (; const RResultPtr< T1 > & ; lhs, . const RResultPtr< T2 > & ; rhs . ). Definition at line 407 of file RResultPtr.hxx. ◆ operator!=() [2/3]. template<class T1 > . bool ROOT::RDF::operator!= ; (; const RResultPtr< T1 > & ; lhs, . std::nullptr_t ; rhs . ). Definition at line 425 of file RResultPtr.hxx. ◆ operator!=() [3/3]. template<class T1 > . bool ROOT::RDF::operator!= ; (; std::nullptr_t ; lhs, . const RResultPtr< T1 > & ; rhs . ). Definition at line 431 of file RResultPtr.hxx. ◆ operator<<(). std::ostream & ROOT::RDF::operator<< ; (; std::ostream & ; os, . const RDFDescription & ; description . ). Definition at line 34 of file RDFDescription.cxx. ◆ operator==() [1/3]. template<class T1 , class T2 > . bool ROOT::RDF::operator== ; (; const RResultPtr< T1 > & ; lhs, . const RResultPtr< T2 > & ; rhs . ). Def",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1RDF.html:14447,Integrability,interface,interface,14447,"s(). unsigned int ROOT::RDF::RunGraphs ; (; std::vector< RResultHandle > ; handles). Trigger the event loop of multiple RDataFrames concurrently. ; Parameters. [in]handlesA vector of RResultHandles . ReturnsThe number of distinct computation graphs that have been processed; This function triggers the event loop of all computation graphs which relate to the given RResultHandles. The advantage compared to running the event loop implicitly by accessing the RResultPtr is that the event loops will run concurrently. Therefore, the overall computation of all results is generally more efficient. It should be noted that user-defined operations (e.g., Filters and Defines) of the different RDataFrame graphs are assumed to be safe to call concurrently.; ROOT::RDataFrame df1(""tree1"", ""file1.root"");; auto r1 = df1.Histo1D(""var1"");; ; ROOT::RDataFrame df2(""tree2"", ""file2.root"");; auto r2 = df2.Sum(""var2"");; ; // RResultPtr -> RResultHandle conversion is automatic; ROOT::RDF::RunGraphs({r1, r2});; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Definition at line 66 of file RDFHelpers.cxx. ◆ SaveGraph() [1/2]. template<typename NodeType > . std::string ROOT::RDF::SaveGraph ; (; NodeType ; node). Create a graphviz representation of the dataframe computation graph, return it as a string. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that Sav",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1RDF.html:5578,Modifiability,variab,variables,5578,"ong64_t size, bool skipEvenEntries=false);  Make a RDF wrapping a RTrivialDS with the specified amount of entries. ;  ; template<typename F , typename Args = typename ROOT::TypeTraits::CallableTraits<std::decay_t<F>>::arg_types_nodecay, typename Ret = typename ROOT::TypeTraits::CallableTraits<std::decay_t<F>>::ret_type> ; auto Not (F &&f) -> decltype(RDFInternal::NotHelper(Args(), std::forward< F >(f)));  Given a callable with signature bool(T1, T2, ...) return a callable with same signature that returns the negated result. ;  ; template<class T1 , class T2 > ; bool operator!= (const RResultPtr< T1 > &lhs, const RResultPtr< T2 > &rhs);  ; template<class T1 > ; bool operator!= (const RResultPtr< T1 > &lhs, std::nullptr_t rhs);  ; template<class T1 > ; bool operator!= (std::nullptr_t lhs, const RResultPtr< T1 > &rhs);  ; std::ostream & operator<< (std::ostream &os, const RDFDescription &description);  ; template<class T1 , class T2 > ; bool operator== (const RResultPtr< T1 > &lhs, const RResultPtr< T2 > &rhs);  ; template<class T1 > ; bool operator== (const RResultPtr< T1 > &lhs, std::nullptr_t rhs);  ; template<class T1 > ; bool operator== (std::nullptr_t lhs, const RResultPtr< T1 > &rhs);  ; template<std::size_t N, typename T , typename F > ; auto PassAsVec (F &&f) -> RDFInternal::PassAsVecHelper< std::make_index_sequence< N >, T, F >;  PassAsVec is a callable generator that allows passing N variables of type T to a function as a single collection. ;  ; unsigned int RunGraphs (std::vector< RResultHandle > handles);  Trigger the event loop of multiple RDataFrames concurrently. ;  ; template<typename NodeType > ; std::string SaveGraph (NodeType node);  Create a graphviz representation of the dataframe computation graph, return it as a string. ;  ; template<typename NodeType > ; void SaveGraph (NodeType node, const std::string &outputFile);  Create a graphviz representation of the dataframe computation graph, write it to the specified file. ;  ; void splitInEqualRanges ",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1RDF.html:12747,Modifiability,variab,variables,12747,"of file RResultPtr.hxx. ◆ operator<<(). std::ostream & ROOT::RDF::operator<< ; (; std::ostream & ; os, . const RDFDescription & ; description . ). Definition at line 34 of file RDFDescription.cxx. ◆ operator==() [1/3]. template<class T1 , class T2 > . bool ROOT::RDF::operator== ; (; const RResultPtr< T1 > & ; lhs, . const RResultPtr< T2 > & ; rhs . ). Definition at line 401 of file RResultPtr.hxx. ◆ operator==() [2/3]. template<class T1 > . bool ROOT::RDF::operator== ; (; const RResultPtr< T1 > & ; lhs, . std::nullptr_t ; rhs . ). Definition at line 413 of file RResultPtr.hxx. ◆ operator==() [3/3]. template<class T1 > . bool ROOT::RDF::operator== ; (; std::nullptr_t ; lhs, . const RResultPtr< T1 > & ; rhs . ). Definition at line 419 of file RResultPtr.hxx. ◆ PassAsVec(). template<std::size_t N, typename T , typename F > . auto ROOT::RDF::PassAsVec ; (; F && ; f); -> RDFInternal::PassAsVecHelper<std::make_index_sequence<N>, T, F>. PassAsVec is a callable generator that allows passing N variables of type T to a function as a single collection. ; PassAsVec<N, T>(func) returns a callable that takes N arguments of type T, passes them down to function func as an initializer list {t1, t2, t3,..., tN} and returns whatever f({t1, t2, t3, ..., tN}) returns.; Note that for this to work with RDataFrame the type of all columns that the callable is applied to must be exactly T. Example usage together with RDataFrame (""varX"" columns must all be float variables): bool myVecFunc(std::vector<float> args);; df.Filter(PassAsVec<3, float>(myVecFunc), {""var1"", ""var2"", ""var3""});. Definition at line 103 of file RDFHelpers.hxx. ◆ RunGraphs(). unsigned int ROOT::RDF::RunGraphs ; (; std::vector< RResultHandle > ; handles). Trigger the event loop of multiple RDataFrames concurrently. ; Parameters. [in]handlesA vector of RResultHandles . ReturnsThe number of distinct computation graphs that have been processed; This function triggers the event loop of all computation graphs which relate to the ",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1RDF.html:13207,Modifiability,variab,variables,13207,"OOT::RDF::operator== ; (; const RResultPtr< T1 > & ; lhs, . std::nullptr_t ; rhs . ). Definition at line 413 of file RResultPtr.hxx. ◆ operator==() [3/3]. template<class T1 > . bool ROOT::RDF::operator== ; (; std::nullptr_t ; lhs, . const RResultPtr< T1 > & ; rhs . ). Definition at line 419 of file RResultPtr.hxx. ◆ PassAsVec(). template<std::size_t N, typename T , typename F > . auto ROOT::RDF::PassAsVec ; (; F && ; f); -> RDFInternal::PassAsVecHelper<std::make_index_sequence<N>, T, F>. PassAsVec is a callable generator that allows passing N variables of type T to a function as a single collection. ; PassAsVec<N, T>(func) returns a callable that takes N arguments of type T, passes them down to function func as an initializer list {t1, t2, t3,..., tN} and returns whatever f({t1, t2, t3, ..., tN}) returns.; Note that for this to work with RDataFrame the type of all columns that the callable is applied to must be exactly T. Example usage together with RDataFrame (""varX"" columns must all be float variables): bool myVecFunc(std::vector<float> args);; df.Filter(PassAsVec<3, float>(myVecFunc), {""var1"", ""var2"", ""var3""});. Definition at line 103 of file RDFHelpers.hxx. ◆ RunGraphs(). unsigned int ROOT::RDF::RunGraphs ; (; std::vector< RResultHandle > ; handles). Trigger the event loop of multiple RDataFrames concurrently. ; Parameters. [in]handlesA vector of RResultHandles . ReturnsThe number of distinct computation graphs that have been processed; This function triggers the event loop of all computation graphs which relate to the given RResultHandles. The advantage compared to running the event loop implicitly by accessing the RResultPtr is that the event loops will run concurrently. Therefore, the overall computation of all results is generally more efficient. It should be noted that user-defined operations (e.g., Filters and Defines) of the different RDataFrame graphs are assumed to be safe to call concurrently.; ROOT::RDataFrame df1(""tree1"", ""file1.root"");; auto r1 = df1",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1RDF.html:5752,Performance,concurren,concurrently,5752,"mplate<class T1 , class T2 > ; bool operator!= (const RResultPtr< T1 > &lhs, const RResultPtr< T2 > &rhs);  ; template<class T1 > ; bool operator!= (const RResultPtr< T1 > &lhs, std::nullptr_t rhs);  ; template<class T1 > ; bool operator!= (std::nullptr_t lhs, const RResultPtr< T1 > &rhs);  ; std::ostream & operator<< (std::ostream &os, const RDFDescription &description);  ; template<class T1 , class T2 > ; bool operator== (const RResultPtr< T1 > &lhs, const RResultPtr< T2 > &rhs);  ; template<class T1 > ; bool operator== (const RResultPtr< T1 > &lhs, std::nullptr_t rhs);  ; template<class T1 > ; bool operator== (std::nullptr_t lhs, const RResultPtr< T1 > &rhs);  ; template<std::size_t N, typename T , typename F > ; auto PassAsVec (F &&f) -> RDFInternal::PassAsVecHelper< std::make_index_sequence< N >, T, F >;  PassAsVec is a callable generator that allows passing N variables of type T to a function as a single collection. ;  ; unsigned int RunGraphs (std::vector< RResultHandle > handles);  Trigger the event loop of multiple RDataFrames concurrently. ;  ; template<typename NodeType > ; std::string SaveGraph (NodeType node);  Create a graphviz representation of the dataframe computation graph, return it as a string. ;  ; template<typename NodeType > ; void SaveGraph (NodeType node, const std::string &outputFile);  Create a graphviz representation of the dataframe computation graph, write it to the specified file. ;  ; void splitInEqualRanges (std::vector< std::pair< ULong64_t, ULong64_t > > &ranges, int nRecords, unsigned int nSlots);  . Typedef Documentation. ◆ ColumnNames_t. typedef std::vector< std::string > ROOT::RDF::ColumnNames_t. Definition at line 35 of file RInterfaceBase.hxx. ◆ RNode. typedef RInterface<::ROOT::Detail::RDF::RNodeBase, void > ROOT::RDF::RNode. Definition at line 57 of file InterfaceUtils.hxx. ◆ SampleCallback_t. using ROOT::RDF::SampleCallback_t = typedef std::function<void(unsigned int, const ROOT::RDF::RSampleInfo &)>. The type of a data-bl",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1RDF.html:13520,Performance,concurren,concurrently,13520,"ultPtr.hxx. ◆ PassAsVec(). template<std::size_t N, typename T , typename F > . auto ROOT::RDF::PassAsVec ; (; F && ; f); -> RDFInternal::PassAsVecHelper<std::make_index_sequence<N>, T, F>. PassAsVec is a callable generator that allows passing N variables of type T to a function as a single collection. ; PassAsVec<N, T>(func) returns a callable that takes N arguments of type T, passes them down to function func as an initializer list {t1, t2, t3,..., tN} and returns whatever f({t1, t2, t3, ..., tN}) returns.; Note that for this to work with RDataFrame the type of all columns that the callable is applied to must be exactly T. Example usage together with RDataFrame (""varX"" columns must all be float variables): bool myVecFunc(std::vector<float> args);; df.Filter(PassAsVec<3, float>(myVecFunc), {""var1"", ""var2"", ""var3""});. Definition at line 103 of file RDFHelpers.hxx. ◆ RunGraphs(). unsigned int ROOT::RDF::RunGraphs ; (; std::vector< RResultHandle > ; handles). Trigger the event loop of multiple RDataFrames concurrently. ; Parameters. [in]handlesA vector of RResultHandles . ReturnsThe number of distinct computation graphs that have been processed; This function triggers the event loop of all computation graphs which relate to the given RResultHandles. The advantage compared to running the event loop implicitly by accessing the RResultPtr is that the event loops will run concurrently. Therefore, the overall computation of all results is generally more efficient. It should be noted that user-defined operations (e.g., Filters and Defines) of the different RDataFrame graphs are assumed to be safe to call concurrently.; ROOT::RDataFrame df1(""tree1"", ""file1.root"");; auto r1 = df1.Histo1D(""var1"");; ; ROOT::RDataFrame df2(""tree2"", ""file2.root"");; auto r2 = df2.Sum(""var2"");; ; // RResultPtr -> RResultHandle conversion is automatic; ROOT::RDF::RunGraphs({r1, r2});; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Defin",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1RDF.html:13890,Performance,concurren,concurrently,13890,"s a callable that takes N arguments of type T, passes them down to function func as an initializer list {t1, t2, t3,..., tN} and returns whatever f({t1, t2, t3, ..., tN}) returns.; Note that for this to work with RDataFrame the type of all columns that the callable is applied to must be exactly T. Example usage together with RDataFrame (""varX"" columns must all be float variables): bool myVecFunc(std::vector<float> args);; df.Filter(PassAsVec<3, float>(myVecFunc), {""var1"", ""var2"", ""var3""});. Definition at line 103 of file RDFHelpers.hxx. ◆ RunGraphs(). unsigned int ROOT::RDF::RunGraphs ; (; std::vector< RResultHandle > ; handles). Trigger the event loop of multiple RDataFrames concurrently. ; Parameters. [in]handlesA vector of RResultHandles . ReturnsThe number of distinct computation graphs that have been processed; This function triggers the event loop of all computation graphs which relate to the given RResultHandles. The advantage compared to running the event loop implicitly by accessing the RResultPtr is that the event loops will run concurrently. Therefore, the overall computation of all results is generally more efficient. It should be noted that user-defined operations (e.g., Filters and Defines) of the different RDataFrame graphs are assumed to be safe to call concurrently.; ROOT::RDataFrame df1(""tree1"", ""file1.root"");; auto r1 = df1.Histo1D(""var1"");; ; ROOT::RDataFrame df2(""tree2"", ""file2.root"");; auto r2 = df2.Sum(""var2"");; ; // RResultPtr -> RResultHandle conversion is automatic; ROOT::RDF::RunGraphs({r1, r2});; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Definition at line 66 of file RDFHelpers.cxx. ◆ SaveGraph() [1/2]. template<typename NodeType > . std::string ROOT::RDF::SaveGraph ; (; No",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1RDF.html:14125,Performance,concurren,concurrently,14125," the callable is applied to must be exactly T. Example usage together with RDataFrame (""varX"" columns must all be float variables): bool myVecFunc(std::vector<float> args);; df.Filter(PassAsVec<3, float>(myVecFunc), {""var1"", ""var2"", ""var3""});. Definition at line 103 of file RDFHelpers.hxx. ◆ RunGraphs(). unsigned int ROOT::RDF::RunGraphs ; (; std::vector< RResultHandle > ; handles). Trigger the event loop of multiple RDataFrames concurrently. ; Parameters. [in]handlesA vector of RResultHandles . ReturnsThe number of distinct computation graphs that have been processed; This function triggers the event loop of all computation graphs which relate to the given RResultHandles. The advantage compared to running the event loop implicitly by accessing the RResultPtr is that the event loops will run concurrently. Therefore, the overall computation of all results is generally more efficient. It should be noted that user-defined operations (e.g., Filters and Defines) of the different RDataFrame graphs are assumed to be safe to call concurrently.; ROOT::RDataFrame df1(""tree1"", ""file1.root"");; auto r1 = df1.Histo1D(""var1"");; ; ROOT::RDataFrame df2(""tree2"", ""file2.root"");; auto r2 = df2.Sum(""var2"");; ; // RResultPtr -> RResultHandle conversion is automatic; ROOT::RDF::RunGraphs({r1, r2});; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Definition at line 66 of file RDFHelpers.cxx. ◆ SaveGraph() [1/2]. template<typename NodeType > . std::string ROOT::RDF::SaveGraph ; (; NodeType ; node). Create a graphviz representation of the dataframe computation graph, return it as a string. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node b",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1RDF.html:14655,Performance,concurren,concurrently,14655,"sThe number of distinct computation graphs that have been processed; This function triggers the event loop of all computation graphs which relate to the given RResultHandles. The advantage compared to running the event loop implicitly by accessing the RResultPtr is that the event loops will run concurrently. Therefore, the overall computation of all results is generally more efficient. It should be noted that user-defined operations (e.g., Filters and Defines) of the different RDataFrame graphs are assumed to be safe to call concurrently.; ROOT::RDataFrame df1(""tree1"", ""file1.root"");; auto r1 = df1.Histo1D(""var1"");; ; ROOT::RDataFrame df2(""tree2"", ""file2.root"");; auto r2 = df2.Sum(""var2"");; ; // RResultPtr -> RResultHandle conversion is automatic; ROOT::RDF::RunGraphs({r1, r2});; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Definition at line 66 of file RDFHelpers.cxx. ◆ SaveGraph() [1/2]. template<typename NodeType > . std::string ROOT::RDF::SaveGraph ; (; NodeType ; node). Create a graphviz representation of the dataframe computation graph, return it as a string. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be called concurrently from different threads. ; Definition at line 120 of file RDFHelpers.hxx. ◆ SaveGraph() [2/2]. template<typename NodeType > . void ROOT::RDF::Sav",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1RDF.html:15331,Performance,optimiz,optimized,15331,"tPtr -> RResultHandle conversion is automatic; ROOT::RDF::RunGraphs({r1, r2});; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Definition at line 66 of file RDFHelpers.cxx. ◆ SaveGraph() [1/2]. template<typename NodeType > . std::string ROOT::RDF::SaveGraph ; (; NodeType ; node). Create a graphviz representation of the dataframe computation graph, return it as a string. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be called concurrently from different threads. ; Definition at line 120 of file RDFHelpers.hxx. ◆ SaveGraph() [2/2]. template<typename NodeType > . void ROOT::RDF::SaveGraph ; (; NodeType ; node, . const std::string & ; outputFile . ). Create a graphviz representation of the dataframe computation graph, write it to the specified file. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. ; [in]outputFilefile where to save the representation. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be ",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1RDF.html:15437,Performance,concurren,concurrently,15437,"rs a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Definition at line 66 of file RDFHelpers.cxx. ◆ SaveGraph() [1/2]. template<typename NodeType > . std::string ROOT::RDF::SaveGraph ; (; NodeType ; node). Create a graphviz representation of the dataframe computation graph, return it as a string. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be called concurrently from different threads. ; Definition at line 120 of file RDFHelpers.hxx. ◆ SaveGraph() [2/2]. template<typename NodeType > . void ROOT::RDF::SaveGraph ; (; NodeType ; node, . const std::string & ; outputFile . ). Create a graphviz representation of the dataframe computation graph, write it to the specified file. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. ; [in]outputFilefile where to save the representation. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be called concurrently from different threads. ; Definition at line 139 of file RDFHelpers.hxx. ◆ splitInEqualRanges(). v",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1RDF.html:16206,Performance,optimiz,optimized,16206,"RDFHelpers.cxx. ◆ SaveGraph() [1/2]. template<typename NodeType > . std::string ROOT::RDF::SaveGraph ; (; NodeType ; node). Create a graphviz representation of the dataframe computation graph, return it as a string. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be called concurrently from different threads. ; Definition at line 120 of file RDFHelpers.hxx. ◆ SaveGraph() [2/2]. template<typename NodeType > . void ROOT::RDF::SaveGraph ; (; NodeType ; node, . const std::string & ; outputFile . ). Create a graphviz representation of the dataframe computation graph, write it to the specified file. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. ; [in]outputFilefile where to save the representation. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be called concurrently from different threads. ; Definition at line 139 of file RDFHelpers.hxx. ◆ splitInEqualRanges(). void ROOT::RDF::splitInEqualRanges ; (; std::vector< std::pair< ULong64_t, ULong64_t > > & ; ranges, . int ; nRecords, . unsigned int ; nSlots . ). Definition at line 519 of file RArrowDS.cxx. ROOTRDF. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1RDF.html:16312,Performance,concurren,concurrently,16312,"RDFHelpers.cxx. ◆ SaveGraph() [1/2]. template<typename NodeType > . std::string ROOT::RDF::SaveGraph ; (; NodeType ; node). Create a graphviz representation of the dataframe computation graph, return it as a string. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be called concurrently from different threads. ; Definition at line 120 of file RDFHelpers.hxx. ◆ SaveGraph() [2/2]. template<typename NodeType > . void ROOT::RDF::SaveGraph ; (; NodeType ; node, . const std::string & ; outputFile . ). Create a graphviz representation of the dataframe computation graph, write it to the specified file. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. ; [in]outputFilefile where to save the representation. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be called concurrently from different threads. ; Definition at line 139 of file RDFHelpers.hxx. ◆ splitInEqualRanges(). void ROOT::RDF::splitInEqualRanges ; (; std::vector< std::pair< ULong64_t, ULong64_t > > & ; ranges, . int ; nRecords, . unsigned int ; nSlots . ). Definition at line 519 of file RArrowDS.cxx. ROOTRDF. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1RDF.html:14112,Safety,safe,safe,14112," the callable is applied to must be exactly T. Example usage together with RDataFrame (""varX"" columns must all be float variables): bool myVecFunc(std::vector<float> args);; df.Filter(PassAsVec<3, float>(myVecFunc), {""var1"", ""var2"", ""var3""});. Definition at line 103 of file RDFHelpers.hxx. ◆ RunGraphs(). unsigned int ROOT::RDF::RunGraphs ; (; std::vector< RResultHandle > ; handles). Trigger the event loop of multiple RDataFrames concurrently. ; Parameters. [in]handlesA vector of RResultHandles . ReturnsThe number of distinct computation graphs that have been processed; This function triggers the event loop of all computation graphs which relate to the given RResultHandles. The advantage compared to running the event loop implicitly by accessing the RResultPtr is that the event loops will run concurrently. Therefore, the overall computation of all results is generally more efficient. It should be noted that user-defined operations (e.g., Filters and Defines) of the different RDataFrame graphs are assumed to be safe to call concurrently.; ROOT::RDataFrame df1(""tree1"", ""file1.root"");; auto r1 = df1.Histo1D(""var1"");; ; ROOT::RDataFrame df2(""tree2"", ""file2.root"");; auto r2 = df2.Sum(""var2"");; ; // RResultPtr -> RResultHandle conversion is automatic; ROOT::RDF::RunGraphs({r1, r2});; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Definition at line 66 of file RDFHelpers.cxx. ◆ SaveGraph() [1/2]. template<typename NodeType > . std::string ROOT::RDF::SaveGraph ; (; NodeType ; node). Create a graphviz representation of the dataframe computation graph, return it as a string. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node b",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1RDF.html:15409,Safety,safe,safe,15409,"rs a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Definition at line 66 of file RDFHelpers.cxx. ◆ SaveGraph() [1/2]. template<typename NodeType > . std::string ROOT::RDF::SaveGraph ; (; NodeType ; node). Create a graphviz representation of the dataframe computation graph, return it as a string. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be called concurrently from different threads. ; Definition at line 120 of file RDFHelpers.hxx. ◆ SaveGraph() [2/2]. template<typename NodeType > . void ROOT::RDF::SaveGraph ; (; NodeType ; node, . const std::string & ; outputFile . ). Create a graphviz representation of the dataframe computation graph, write it to the specified file. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. ; [in]outputFilefile where to save the representation. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be called concurrently from different threads. ; Definition at line 139 of file RDFHelpers.hxx. ◆ splitInEqualRanges(). v",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1RDF.html:16284,Safety,safe,safe,16284,"RDFHelpers.cxx. ◆ SaveGraph() [1/2]. template<typename NodeType > . std::string ROOT::RDF::SaveGraph ; (; NodeType ; node). Create a graphviz representation of the dataframe computation graph, return it as a string. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be called concurrently from different threads. ; Definition at line 120 of file RDFHelpers.hxx. ◆ SaveGraph() [2/2]. template<typename NodeType > . void ROOT::RDF::SaveGraph ; (; NodeType ; node, . const std::string & ; outputFile . ). Create a graphviz representation of the dataframe computation graph, write it to the specified file. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. ; [in]outputFilefile where to save the representation. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be called concurrently from different threads. ; Definition at line 139 of file RDFHelpers.hxx. ◆ splitInEqualRanges(). void ROOT::RDF::splitInEqualRanges ; (; std::vector< std::pair< ULong64_t, ULong64_t > > & ; ranges, . int ; nRecords, . unsigned int ; nSlots . ). Definition at line 519 of file RArrowDS.cxx. ROOTRDF. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1RDF.html:13832,Security,access,accessing,13832,"s a callable that takes N arguments of type T, passes them down to function func as an initializer list {t1, t2, t3,..., tN} and returns whatever f({t1, t2, t3, ..., tN}) returns.; Note that for this to work with RDataFrame the type of all columns that the callable is applied to must be exactly T. Example usage together with RDataFrame (""varX"" columns must all be float variables): bool myVecFunc(std::vector<float> args);; df.Filter(PassAsVec<3, float>(myVecFunc), {""var1"", ""var2"", ""var3""});. Definition at line 103 of file RDFHelpers.hxx. ◆ RunGraphs(). unsigned int ROOT::RDF::RunGraphs ; (; std::vector< RResultHandle > ; handles). Trigger the event loop of multiple RDataFrames concurrently. ; Parameters. [in]handlesA vector of RResultHandles . ReturnsThe number of distinct computation graphs that have been processed; This function triggers the event loop of all computation graphs which relate to the given RResultHandles. The advantage compared to running the event loop implicitly by accessing the RResultPtr is that the event loops will run concurrently. Therefore, the overall computation of all results is generally more efficient. It should be noted that user-defined operations (e.g., Filters and Defines) of the different RDataFrame graphs are assumed to be safe to call concurrently.; ROOT::RDataFrame df1(""tree1"", ""file1.root"");; auto r1 = df1.Histo1D(""var1"");; ; ROOT::RDataFrame df2(""tree2"", ""file2.root"");; auto r2 = df2.Sum(""var2"");; ; // RResultPtr -> RResultHandle conversion is automatic; ROOT::RDF::RunGraphs({r1, r2});; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Definition at line 66 of file RDFHelpers.cxx. ◆ SaveGraph() [1/2]. template<typename NodeType > . std::string ROOT::RDF::SaveGraph ; (; No",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1RDF.html:10481,Testability,test,test,10481,"umnTypes > > > &&... ; colNameProxyPairs). Factory method to create a Lazy RDataFrame. ; Parameters. [in]colNameProxyPairsthe series of pairs to describe the columns of the data source, first element of the pair is the name of the column and the second is the RResultPtr to the column in the parent data frame. . Definition at line 29 of file RLazyDS.hxx. ◆ MakeTrivialDataFrame() [1/2]. RInterface< RDFDetail::RLoopManager > ROOT::RDF::MakeTrivialDataFrame ; (; ). Make a RDF wrapping a RTrivialDS with infinite entries, for demo purposes. ; Definition at line 130 of file RTrivialDS.cxx. ◆ MakeTrivialDataFrame() [2/2]. RInterface< RDFDetail::RLoopManager > ROOT::RDF::MakeTrivialDataFrame ; (; ULong64_t ; size, . bool ; skipEvenEntries = false . ). Make a RDF wrapping a RTrivialDS with the specified amount of entries. ; Constructing an RDataFrame as RDataFrame(nEntries) is a superior alternative. If size is std::numeric_limits<ULong64_t>::max(), this acts as an infinite data-source: it returns entries from GetEntryRanges forever or until a Range stops the event loop (for test purposes). ; Definition at line 123 of file RTrivialDS.cxx. ◆ Not(). template<typename F , typename Args = typename ROOT::TypeTraits::CallableTraits<std::decay_t<F>>::arg_types_nodecay, typename Ret = typename ROOT::TypeTraits::CallableTraits<std::decay_t<F>>::ret_type> . auto ROOT::RDF::Not ; (; F && ; f); -> decltype(RDFInternal::NotHelper(Args(), std::forward<F>(f))). Given a callable with signature bool(T1, T2, ...) return a callable with same signature that returns the negated result. ; The callable must have one single non-template definition of operator(). This is a limitation with respect to std::not_fn, required for interoperability with RDataFrame. ; Definition at line 83 of file RDFHelpers.hxx. ◆ operator!=() [1/3]. template<class T1 , class T2 > . bool ROOT::RDF::operator!= ; (; const RResultPtr< T1 > & ; lhs, . const RResultPtr< T2 > & ; rhs . ). Definition at line 407 of file RResultPtr",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1RDF.html:1715,Usability,simpl,simple,1715,"Getter;  Helper to get the contents of a given column. More...;  ; class  RDisplay;  This class is the textual representation of the content of a columnar dataset. More...;  ; class  RInterface;  The public interface to the RDataFrame federation of classes. More...;  ; class  RInterfaceBase;  ; class  RLazyDS;  A RDataSource implementation which is built on top of result proxies. More...;  ; class  RResultHandle;  A type-erased version of RResultPtr and RResultMap. More...;  ; class  RResultPtr;  Smart pointer for the return type of actions. More...;  ; class  RSampleInfo;  This type represents a sample identifier, to be used in conjunction with RDataFrame features such as DefinePerSample() and per-sample callbacks. More...;  ; struct  RSnapshotOptions;  A collection of options to steer the creation of the dataset on file. More...;  ; class  RSqliteDS;  RSqliteDS is an RDF data source implementation for SQL result sets from sqlite3 files. More...;  ; class  RTrivialDS;  A simple data-source implementation, for demo purposes. More...;  ; class  RVariationsDescription;  A descriptor for the systematic variations known to a given RDataFrame node. More...;  ; class  TCutInfo;  ; class  TH1DModel;  A struct which stores the parameters of a TH1D. More...;  ; class  TH2DModel;  A struct which stores the parameters of a TH2D. More...;  ; class  TH3DModel;  A struct which stores the parameters of a TH3D. More...;  ; class  THnDModel;  A struct which stores the parameters of a THnD. More...;  ; class  TProfile1DModel;  A struct which stores the parameters of a TProfile. More...;  ; class  TProfile2DModel;  A struct which stores the parameters of a TProfile2D. More...;  ; class  VerifyValidColumnType;  Helper to determine if a given Column is a supported type. More...;  . Typedefs; using ColumnNames_t = std::vector< std::string >;  ; using RNode = RInterface<::ROOT::Detail::RDF::RNodeBase, void >;  ; using SampleCallback_t = std::function< void(unsigned int, const ROOT::RDF::R",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html
https://root.cern/doc/master/namespaceROOT_1_1RDF_1_1Experimental.html:5750,Availability,down,down,5750,"sample must have at least one key ""trees"" and at least one key ""files"" from which the data is read. Optionally, one or more metadata information can be added, as well as the friend list information. Example specification file JSON:; The following is an example of the dataset specification JSON file formatting: {; ""samples"": {; ""sampleA"": {; ""trees"": [""tree1"", ""tree2""],; ""files"": [""file1.root"", ""file2.root""],; ""metadata"": {""lumi"": 1.0, }; },; ""sampleB"": {; ""trees"": [""tree3"", ""tree4""],; ""files"": [""file3.root"", ""file4.root""],; ""metadata"": {""lumi"": 0.5, }; },; ...; },; }. Definition at line 1906 of file RDataFrame.cxx. ◆ VariationsFor() [1/2]. template<typename T > . RResultMap< T > ROOT::RDF::Experimental::VariationsFor ; (; RResultPtr< T > ; resPtr). Produce all required systematic variations for the given result. ; Parameters. [in]resPtrThe result for which variations should be produced. . ReturnsA RResultMap object with full variation names as strings (e.g. ""pt:down"") and the corresponding varied results as values.; A given input RResultPtr<T> produces a corresponding RResultMap<T> with a ""nominal"" key that will return a value identical to the one contained in the original RResultPtr. Other keys correspond to the varied values of this result, one for each variation that the result depends on. VariationsFor does not trigger the event loop. The event loop is only triggered upon first access to a valid key, similarly to what happens with RResultPtr.; If the result does not depend, directly or indirectly, from any registered systematic variation, the returned RResultMap will contain only the ""nominal"" key.; See RDataFrame's Vary method for more information and example usages.; NoteCurrently, producing variations for the results of Display, Report and Snapshot actions is not supported. ; Definition at line 219 of file RDFHelpers.hxx. ◆ VariationsFor() [2/2]. ROOT::RDF::Experimental::SnapshotPtr_t ROOT::RDF::Experimental::VariationsFor ; (; SnapshotPtr_t ; resPtr). Definit",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1RDF_1_1Experimental.html:2549,Integrability,interface,interface,2549,"en result. ;  ; SnapshotPtr_t VariationsFor (SnapshotPtr_t resPtr);  . Typedef Documentation. ◆ SnapshotPtr_t. using ROOT::RDF::Experimental::SnapshotPtr_t = typedef ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void> >. Definition at line 269 of file RDFHelpers.hxx. Function Documentation. ◆ AddProgressBar() [1/2]. void ROOT::RDF::Experimental::AddProgressBar ; (; ROOT::RDataFrame ; df). Add ProgressBar to an RDataFrame. ; Parameters. [in]dfRDataFrame for which ProgressBar is called. This function adds a ProgressBar to display the event statistics in the terminal every m events and every n seconds, including elapsed time, currently processed file, currently processed events, the rate of event processing and an estimated remaining time (per file being processed). ProgressBar should be added after the dataframe object (df) is created first: ROOT::RDataFrame df(""tree"", ""file.root"");; ROOT::RDF::Experimental::AddProgressBar(df);; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RDF::Experimental::AddProgressBarvoid AddProgressBar(ROOT::RDF::RNode df)Add ProgressBar to a ROOT::RDF::RNode.Definition RDFHelpers.cxx:373; For more details see ROOT::RDF::Experimental::ProgressHelper Class. ; Definition at line 382 of file RDFHelpers.cxx. ◆ AddProgressBar() [2/2]. void ROOT::RDF::Experimental::AddProgressBar ; (; ROOT::RDF::RNode ; df). Add ProgressBar to a ROOT::RDF::RNode. ; Parameters. [in]dfRDataFrame node at which ProgressBar is called. The ProgressBar can be added not only at the RDataFrame head node, but also at any any computational node, such as Filter or Define. . Example usage:; ROOT::RDataFrame df(""tree"", ""file.root"");; auto df_1 = ROOT::RDF::RNode(df.Filter(""x>1""));; ROOT::RDF::Experimental::AddProgressBar(df_1);; ROOT::RDF::RNodeRInterface<::ROOT::Detail::RDF::RNodeBase, void > RNodeDefinition InterfaceUtils.hxx:57. Definition at lin",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1RDF_1_1Experimental.html:6076,Integrability,depend,depends,6076," as the friend list information. Example specification file JSON:; The following is an example of the dataset specification JSON file formatting: {; ""samples"": {; ""sampleA"": {; ""trees"": [""tree1"", ""tree2""],; ""files"": [""file1.root"", ""file2.root""],; ""metadata"": {""lumi"": 1.0, }; },; ""sampleB"": {; ""trees"": [""tree3"", ""tree4""],; ""files"": [""file3.root"", ""file4.root""],; ""metadata"": {""lumi"": 0.5, }; },; ...; },; }. Definition at line 1906 of file RDataFrame.cxx. ◆ VariationsFor() [1/2]. template<typename T > . RResultMap< T > ROOT::RDF::Experimental::VariationsFor ; (; RResultPtr< T > ; resPtr). Produce all required systematic variations for the given result. ; Parameters. [in]resPtrThe result for which variations should be produced. . ReturnsA RResultMap object with full variation names as strings (e.g. ""pt:down"") and the corresponding varied results as values.; A given input RResultPtr<T> produces a corresponding RResultMap<T> with a ""nominal"" key that will return a value identical to the one contained in the original RResultPtr. Other keys correspond to the varied values of this result, one for each variation that the result depends on. VariationsFor does not trigger the event loop. The event loop is only triggered upon first access to a valid key, similarly to what happens with RResultPtr.; If the result does not depend, directly or indirectly, from any registered systematic variation, the returned RResultMap will contain only the ""nominal"" key.; See RDataFrame's Vary method for more information and example usages.; NoteCurrently, producing variations for the results of Display, Report and Snapshot actions is not supported. ; Definition at line 219 of file RDFHelpers.hxx. ◆ VariationsFor() [2/2]. ROOT::RDF::Experimental::SnapshotPtr_t ROOT::RDF::Experimental::VariationsFor ; (; SnapshotPtr_t ; resPtr). Definition at line 135 of file RDFHelpers.cxx. ROOTRDFExperimental. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1RDF_1_1Experimental.html:6269,Integrability,depend,depend,6269," as the friend list information. Example specification file JSON:; The following is an example of the dataset specification JSON file formatting: {; ""samples"": {; ""sampleA"": {; ""trees"": [""tree1"", ""tree2""],; ""files"": [""file1.root"", ""file2.root""],; ""metadata"": {""lumi"": 1.0, }; },; ""sampleB"": {; ""trees"": [""tree3"", ""tree4""],; ""files"": [""file3.root"", ""file4.root""],; ""metadata"": {""lumi"": 0.5, }; },; ...; },; }. Definition at line 1906 of file RDataFrame.cxx. ◆ VariationsFor() [1/2]. template<typename T > . RResultMap< T > ROOT::RDF::Experimental::VariationsFor ; (; RResultPtr< T > ; resPtr). Produce all required systematic variations for the given result. ; Parameters. [in]resPtrThe result for which variations should be produced. . ReturnsA RResultMap object with full variation names as strings (e.g. ""pt:down"") and the corresponding varied results as values.; A given input RResultPtr<T> produces a corresponding RResultMap<T> with a ""nominal"" key that will return a value identical to the one contained in the original RResultPtr. Other keys correspond to the varied values of this result, one for each variation that the result depends on. VariationsFor does not trigger the event loop. The event loop is only triggered upon first access to a valid key, similarly to what happens with RResultPtr.; If the result does not depend, directly or indirectly, from any registered systematic variation, the returned RResultMap will contain only the ""nominal"" key.; See RDataFrame's Vary method for more information and example usages.; NoteCurrently, producing variations for the results of Display, Report and Snapshot actions is not supported. ; Definition at line 219 of file RDFHelpers.hxx. ◆ VariationsFor() [2/2]. ROOT::RDF::Experimental::SnapshotPtr_t ROOT::RDF::Experimental::VariationsFor ; (; SnapshotPtr_t ; resPtr). Definition at line 135 of file RDFHelpers.cxx. ROOTRDFExperimental. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1RDF_1_1Experimental.html:6179,Security,access,access,6179," as the friend list information. Example specification file JSON:; The following is an example of the dataset specification JSON file formatting: {; ""samples"": {; ""sampleA"": {; ""trees"": [""tree1"", ""tree2""],; ""files"": [""file1.root"", ""file2.root""],; ""metadata"": {""lumi"": 1.0, }; },; ""sampleB"": {; ""trees"": [""tree3"", ""tree4""],; ""files"": [""file3.root"", ""file4.root""],; ""metadata"": {""lumi"": 0.5, }; },; ...; },; }. Definition at line 1906 of file RDataFrame.cxx. ◆ VariationsFor() [1/2]. template<typename T > . RResultMap< T > ROOT::RDF::Experimental::VariationsFor ; (; RResultPtr< T > ; resPtr). Produce all required systematic variations for the given result. ; Parameters. [in]resPtrThe result for which variations should be produced. . ReturnsA RResultMap object with full variation names as strings (e.g. ""pt:down"") and the corresponding varied results as values.; A given input RResultPtr<T> produces a corresponding RResultMap<T> with a ""nominal"" key that will return a value identical to the one contained in the original RResultPtr. Other keys correspond to the varied values of this result, one for each variation that the result depends on. VariationsFor does not trigger the event loop. The event loop is only triggered upon first access to a valid key, similarly to what happens with RResultPtr.; If the result does not depend, directly or indirectly, from any registered systematic variation, the returned RResultMap will contain only the ""nominal"" key.; See RDataFrame's Vary method for more information and example usages.; NoteCurrently, producing variations for the results of Display, Report and Snapshot actions is not supported. ; Definition at line 219 of file RDFHelpers.hxx. ◆ VariationsFor() [2/2]. ROOT::RDF::Experimental::SnapshotPtr_t ROOT::RDF::Experimental::VariationsFor ; (; SnapshotPtr_t ; resPtr). Definition at line 135 of file RDFHelpers.cxx. ROOTRDFExperimental. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF_1_1Experimental.html
https://root.cern/doc/master/namespaceROOT_1_1TestSupport.html:495,Availability,failure,failures,495,". ROOT: ROOT::TestSupport Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions |; Variables ; ROOT::TestSupport Namespace Reference. Classes; class  CheckDiagsRAII;  Install a ROOT diagnostic handler to analyse diagnostics. More...;  ; class  FilterDiagsRAII;  Allows a user function to catch and filter/analyse ROOT and cling diagnostics, e.g. More...;  ; struct  ForbidDiagnostics;  Error handler for gtests that generates failures for every received diagnostic > kInfo when this file is linked to. More...;  . Functions; std::ostream & operator<< (std::ostream &stream, CheckDiagsRAII::Diag_t const &diag);  . Variables; static struct ROOT::TestSupport::ForbidDiagnostics noDiagCheckerInstance;  . Function Documentation. ◆ operator<<(). std::ostream & ROOT::TestSupport::operator<< ; (; std::ostream & ; stream, . CheckDiagsRAII::Diag_t const & ; diag . ). Definition at line 138 of file TestSupport.cxx. Variable Documentation. ◆ noDiagCheckerInstance. struct ROOT::TestSupport::ForbidDiagnostics ROOT::TestSupport::noDiagCheckerInstance. static . ROOTTestSupport. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1TestSupport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TestSupport.html
https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:16313,Availability,avail,available,16313,"emove the last n template arguments from the name. ;  ; void ReplaceAll (std::string &str, const std::string &from, const std::string &to, bool recurse=false);  ; bool RequireCompleteType (const cling::Interpreter &interp, clang::SourceLocation Loc, clang::QualType Type);  ; bool RequireCompleteType (const cling::Interpreter &interp, const clang::CXXRecordDecl *cl);  ; clang::QualType ReSubstTemplateArg (clang::QualType input, const clang::Type *instance);  Check if 'input' or any of its template parameter was substituted when instantiating the class template instance and replace it with the partially sugared types we have from 'instance'. ;  ; const clang::CXXRecordDecl * ScopeSearch (const char *name, const cling::Interpreter &gInterp, bool diagnose, const clang::Type **resultType);  Return the scope corresponding to 'name' or std::'name'. ;  ; void SetPathsForRelocatability (std::vector< std::string > &clingArgs);  Organise the parameters for cling in order to guarantee relocatability It treats the gcc toolchain and the root include path FIXME: enables relocatability for experiments' framework headers until PCMs are available. ;  ; const char * ShortTypeName (const char *typeDesc);  Return the absolute type of typeDesc. ;  ; std::string ShortTypeName (const clang::FieldDecl &m);  Return the absolute type of typeDesc. ;  ; ROOT::ESTLType STLKind (const llvm::StringRef type);  Converts STL container name to number. vector -> 1, etc.. ;  ; void SysError (const char *location, const char *fmt,...);  ; std::string TrueName (const clang::FieldDecl &m);  TrueName strips the typedefs and array dimensions. ;  ; void Warning (const char *location, const char *fmt,...);  ; void WriteAuxFunctions (std::ostream &finalString, const AnnotatedRecordDecl &cl, const clang::CXXRecordDecl *decl, const cling::Interpreter &interp, const RConstructorTypes &ctorTypes, const TNormalizedCtxt &normCtxt);  std::string NormalizedName; GetNormalizedName(NormalizedName, decl->getASTContext().g",MatchSource.WIKI,doc/master/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:22642,Availability,error,error,22642," ; (; clang::CXXRecordDecl const * ; cl, . char const * ; methodname, . char const * ; proto, . const cling::Interpreter & ; interp, . bool ; diagnose . ). Return true, if the function (defined by the name and prototype) exists and is public. ; Definition at line 1242 of file TClingUtils.cxx. ◆ ClassInfo__HasMethod(). const clang::FunctionDecl * ROOT::TMetaUtils::ClassInfo__HasMethod ; (; const clang::DeclContext * ; cl, . char const * ; name, . const cling::Interpreter & ; interp . ). Definition at line 762 of file TClingUtils.cxx. ◆ DataMemberInfo__ValidArrayIndex(). llvm::StringRef ROOT::TMetaUtils::DataMemberInfo__ValidArrayIndex ; (; const cling::Interpreter & ; interp, . const clang::DeclaratorDecl & ; m, . int * ; errnum = nullptr, . llvm::StringRef * ; errstr = nullptr . ). ValidArrayIndex return a static string (so use it or copy it immediatly, do not call GrabIndex twice in the same expression) containing the size of the array data member. ; In case of error, or if the size is not specified, GrabIndex returns 0. If errnum is not null, *errnum updated with the error number: Cint::G__DataMemberInfo::G__VALID : valid array index Cint::G__DataMemberInfo::G__NOT_INT : array index is not an int Cint::G__DataMemberInfo::G__NOT_DEF : index not defined before array (this IS an error for streaming to disk) Cint::G__DataMemberInfo::G__IS_PRIVATE: index exist in a parent class but is private Cint::G__DataMemberInfo::G__UNKNOWN : index is not known If errstr is not null, *errstr is updated with the address of a static string containing the part of the index with is invalid. ; Definition at line 3118 of file TClingUtils.cxx. ◆ DemangleNameForDlsym(). static std::string ROOT::TMetaUtils::DemangleNameForDlsym ; (; const std::string & ; name). inlinestatic . Definition at line 597 of file TClingUtils.h. ◆ ElementStreamer(). int ROOT::TMetaUtils::ElementStreamer ; (; std::ostream & ; finalString, . const clang::NamedDecl & ; forcontext, . const clang::QualType & ; qti, . co",MatchSource.WIKI,doc/master/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:22751,Availability,error,error,22751,"). const clang::FunctionDecl * ROOT::TMetaUtils::ClassInfo__HasMethod ; (; const clang::DeclContext * ; cl, . char const * ; name, . const cling::Interpreter & ; interp . ). Definition at line 762 of file TClingUtils.cxx. ◆ DataMemberInfo__ValidArrayIndex(). llvm::StringRef ROOT::TMetaUtils::DataMemberInfo__ValidArrayIndex ; (; const cling::Interpreter & ; interp, . const clang::DeclaratorDecl & ; m, . int * ; errnum = nullptr, . llvm::StringRef * ; errstr = nullptr . ). ValidArrayIndex return a static string (so use it or copy it immediatly, do not call GrabIndex twice in the same expression) containing the size of the array data member. ; In case of error, or if the size is not specified, GrabIndex returns 0. If errnum is not null, *errnum updated with the error number: Cint::G__DataMemberInfo::G__VALID : valid array index Cint::G__DataMemberInfo::G__NOT_INT : array index is not an int Cint::G__DataMemberInfo::G__NOT_DEF : index not defined before array (this IS an error for streaming to disk) Cint::G__DataMemberInfo::G__IS_PRIVATE: index exist in a parent class but is private Cint::G__DataMemberInfo::G__UNKNOWN : index is not known If errstr is not null, *errstr is updated with the address of a static string containing the part of the index with is invalid. ; Definition at line 3118 of file TClingUtils.cxx. ◆ DemangleNameForDlsym(). static std::string ROOT::TMetaUtils::DemangleNameForDlsym ; (; const std::string & ; name). inlinestatic . Definition at line 597 of file TClingUtils.h. ◆ ElementStreamer(). int ROOT::TMetaUtils::ElementStreamer ; (; std::ostream & ; finalString, . const clang::NamedDecl & ; forcontext, . const clang::QualType & ; qti, . const char * ; t, . int ; rwmode, . const cling::Interpreter & ; interp, . const char * ; tcl = nullptr . ). Definition at line 861 of file TClingUtils.cxx. ◆ EndsWith(). bool ROOT::TMetaUtils::EndsWith ; (; const std::string & ; theString, . const std::string & ; theSubstring . ). Definition at line 5124 of file TCli",MatchSource.WIKI,doc/master/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:22964,Availability,error,error,22964,"). const clang::FunctionDecl * ROOT::TMetaUtils::ClassInfo__HasMethod ; (; const clang::DeclContext * ; cl, . char const * ; name, . const cling::Interpreter & ; interp . ). Definition at line 762 of file TClingUtils.cxx. ◆ DataMemberInfo__ValidArrayIndex(). llvm::StringRef ROOT::TMetaUtils::DataMemberInfo__ValidArrayIndex ; (; const cling::Interpreter & ; interp, . const clang::DeclaratorDecl & ; m, . int * ; errnum = nullptr, . llvm::StringRef * ; errstr = nullptr . ). ValidArrayIndex return a static string (so use it or copy it immediatly, do not call GrabIndex twice in the same expression) containing the size of the array data member. ; In case of error, or if the size is not specified, GrabIndex returns 0. If errnum is not null, *errnum updated with the error number: Cint::G__DataMemberInfo::G__VALID : valid array index Cint::G__DataMemberInfo::G__NOT_INT : array index is not an int Cint::G__DataMemberInfo::G__NOT_DEF : index not defined before array (this IS an error for streaming to disk) Cint::G__DataMemberInfo::G__IS_PRIVATE: index exist in a parent class but is private Cint::G__DataMemberInfo::G__UNKNOWN : index is not known If errstr is not null, *errstr is updated with the address of a static string containing the part of the index with is invalid. ; Definition at line 3118 of file TClingUtils.cxx. ◆ DemangleNameForDlsym(). static std::string ROOT::TMetaUtils::DemangleNameForDlsym ; (; const std::string & ; name). inlinestatic . Definition at line 597 of file TClingUtils.h. ◆ ElementStreamer(). int ROOT::TMetaUtils::ElementStreamer ; (; std::ostream & ; finalString, . const clang::NamedDecl & ; forcontext, . const clang::QualType & ; qti, . const char * ; t, . int ; rwmode, . const cling::Interpreter & ; interp, . const char * ; tcl = nullptr . ). Definition at line 861 of file TClingUtils.cxx. ◆ EndsWith(). bool ROOT::TMetaUtils::EndsWith ; (; const std::string & ; theString, . const std::string & ; theSubstring . ). Definition at line 5124 of file TCli",MatchSource.WIKI,doc/master/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:37639,Availability,failure,failure,37639,"ecl & ; recordDecl . ). Definition at line 1435 of file TClingUtils.cxx. ◆ GetQualifiedName() [10/10]. void ROOT::TMetaUtils::GetQualifiedName ; (; std::string & ; qual_name, . const clang::Type & ; type, . const clang::NamedDecl & ; forcontext . ). Definition at line 1377 of file TClingUtils.cxx. ◆ GetRealPath(). std::string ROOT::TMetaUtils::GetRealPath ; (; const std::string & ; path). Returnsthe resolved normalized absolute path possibly resolving symlinks. ; Definition at line 72 of file TClingUtils.cxx. ◆ GetTrivialIntegralReturnValue(). std::pair< bool, int > ROOT::TMetaUtils::GetTrivialIntegralReturnValue ; (; const clang::FunctionDecl * ; funcCV, . const cling::Interpreter & ; interp . ). If the function contains 'just': return SomeValue; this routine will extract this value and return it. ; The first element is set to true we have the body of the function and it is indeed a trivial function with just a return of a value. The second element contains the value (or -1 is case of failure) ; Definition at line 2599 of file TClingUtils.cxx. ◆ GetTypeForIO(). clang::QualType ROOT::TMetaUtils::GetTypeForIO ; (; const clang::QualType & ; templateInstanceType, . const cling::Interpreter & ; interpreter, . const TNormalizedCtxt & ; normCtxt, . TClassEdit::EModType ; mode = TClassEdit::kNone . ). Definition at line 4154 of file TClingUtils.cxx. ◆ GetUnderlyingRecordDecl(). clang::RecordDecl * ROOT::TMetaUtils::GetUnderlyingRecordDecl ; (; clang::QualType ; type). Definition at line 2828 of file TClingUtils.cxx. ◆ GetUnderlyingType(). const clang::Type * ROOT::TMetaUtils::GetUnderlyingType ; (; clang::QualType ; type). Return the base/underlying type of a chain of array or pointers type. ; Does not yet support the array and pointer part being intermixed. ; Definition at line 4380 of file TClingUtils.cxx. ◆ GetWarningsAreErrors(). bool & ROOT::TMetaUtils::GetWarningsAreErrors ; (; ). inline . Definition at line 787 of file TClingUtils.h. ◆ HasClassDefMacro(). bool ROOT:",MatchSource.WIKI,doc/master/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:49090,Availability,avail,available,49090,"CXXRecordDecl * ; cl . ). Definition at line 799 of file TClingUtils.cxx. ◆ ReSubstTemplateArg(). clang::QualType ROOT::TMetaUtils::ReSubstTemplateArg ; (; clang::QualType ; input, . const clang::Type * ; instance . ). Check if 'input' or any of its template parameter was substituted when instantiating the class template instance and replace it with the partially sugared types we have from 'instance'. ; Definition at line 4612 of file TClingUtils.cxx. ◆ ScopeSearch(). const clang::CXXRecordDecl * ROOT::TMetaUtils::ScopeSearch ; (; const char * ; name, . const cling::Interpreter & ; gInterp, . bool ; diagnose, . const clang::Type ** ; resultType . ). Return the scope corresponding to 'name' or std::'name'. ; Definition at line 776 of file TClingUtils.cxx. ◆ SetPathsForRelocatability(). void ROOT::TMetaUtils::SetPathsForRelocatability ; (; std::vector< std::string > & ; clingArgs). Organise the parameters for cling in order to guarantee relocatability It treats the gcc toolchain and the root include path FIXME: enables relocatability for experiments' framework headers until PCMs are available. ; Definition at line 5078 of file TClingUtils.cxx. ◆ ShortTypeName() [1/2]. const char * ROOT::TMetaUtils::ShortTypeName ; (; const char * ; typeDesc). Return the absolute type of typeDesc. ; E.g.: typeDesc = ""class TNamed**"", returns ""TNamed"". we remove * and const keywords. (we do not want to remove & ). You need to use the result immediately before it is being overwritten. ; Definition at line 2719 of file TClingUtils.cxx. ◆ ShortTypeName() [2/2]. std::string ROOT::TMetaUtils::ShortTypeName ; (; const clang::FieldDecl & ; m). Return the absolute type of typeDesc. ; E.g.: typeDesc = ""class TNamed**"", returns ""TNamed"". we remove * and const keywords. (we do not want to remove & ). You need to use the result immediately before it is being overwritten. ; Definition at line 2810 of file TClingUtils.cxx. ◆ STLKind(). ROOT::ESTLType ROOT::TMetaUtils::STLKind ; (; const llvm::StringR",MatchSource.WIKI,doc/master/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:22734,Deployability,update,updated,22734,"). const clang::FunctionDecl * ROOT::TMetaUtils::ClassInfo__HasMethod ; (; const clang::DeclContext * ; cl, . char const * ; name, . const cling::Interpreter & ; interp . ). Definition at line 762 of file TClingUtils.cxx. ◆ DataMemberInfo__ValidArrayIndex(). llvm::StringRef ROOT::TMetaUtils::DataMemberInfo__ValidArrayIndex ; (; const cling::Interpreter & ; interp, . const clang::DeclaratorDecl & ; m, . int * ; errnum = nullptr, . llvm::StringRef * ; errstr = nullptr . ). ValidArrayIndex return a static string (so use it or copy it immediatly, do not call GrabIndex twice in the same expression) containing the size of the array data member. ; In case of error, or if the size is not specified, GrabIndex returns 0. If errnum is not null, *errnum updated with the error number: Cint::G__DataMemberInfo::G__VALID : valid array index Cint::G__DataMemberInfo::G__NOT_INT : array index is not an int Cint::G__DataMemberInfo::G__NOT_DEF : index not defined before array (this IS an error for streaming to disk) Cint::G__DataMemberInfo::G__IS_PRIVATE: index exist in a parent class but is private Cint::G__DataMemberInfo::G__UNKNOWN : index is not known If errstr is not null, *errstr is updated with the address of a static string containing the part of the index with is invalid. ; Definition at line 3118 of file TClingUtils.cxx. ◆ DemangleNameForDlsym(). static std::string ROOT::TMetaUtils::DemangleNameForDlsym ; (; const std::string & ; name). inlinestatic . Definition at line 597 of file TClingUtils.h. ◆ ElementStreamer(). int ROOT::TMetaUtils::ElementStreamer ; (; std::ostream & ; finalString, . const clang::NamedDecl & ; forcontext, . const clang::QualType & ; qti, . const char * ; t, . int ; rwmode, . const cling::Interpreter & ; interp, . const char * ; tcl = nullptr . ). Definition at line 861 of file TClingUtils.cxx. ◆ EndsWith(). bool ROOT::TMetaUtils::EndsWith ; (; const std::string & ; theString, . const std::string & ; theSubstring . ). Definition at line 5124 of file TCli",MatchSource.WIKI,doc/master/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:23169,Deployability,update,updated,23169,"). const clang::FunctionDecl * ROOT::TMetaUtils::ClassInfo__HasMethod ; (; const clang::DeclContext * ; cl, . char const * ; name, . const cling::Interpreter & ; interp . ). Definition at line 762 of file TClingUtils.cxx. ◆ DataMemberInfo__ValidArrayIndex(). llvm::StringRef ROOT::TMetaUtils::DataMemberInfo__ValidArrayIndex ; (; const cling::Interpreter & ; interp, . const clang::DeclaratorDecl & ; m, . int * ; errnum = nullptr, . llvm::StringRef * ; errstr = nullptr . ). ValidArrayIndex return a static string (so use it or copy it immediatly, do not call GrabIndex twice in the same expression) containing the size of the array data member. ; In case of error, or if the size is not specified, GrabIndex returns 0. If errnum is not null, *errnum updated with the error number: Cint::G__DataMemberInfo::G__VALID : valid array index Cint::G__DataMemberInfo::G__NOT_INT : array index is not an int Cint::G__DataMemberInfo::G__NOT_DEF : index not defined before array (this IS an error for streaming to disk) Cint::G__DataMemberInfo::G__IS_PRIVATE: index exist in a parent class but is private Cint::G__DataMemberInfo::G__UNKNOWN : index is not known If errstr is not null, *errstr is updated with the address of a static string containing the part of the index with is invalid. ; Definition at line 3118 of file TClingUtils.cxx. ◆ DemangleNameForDlsym(). static std::string ROOT::TMetaUtils::DemangleNameForDlsym ; (; const std::string & ; name). inlinestatic . Definition at line 597 of file TClingUtils.h. ◆ ElementStreamer(). int ROOT::TMetaUtils::ElementStreamer ; (; std::ostream & ; finalString, . const clang::NamedDecl & ; forcontext, . const clang::QualType & ; qti, . const char * ; t, . int ; rwmode, . const cling::Interpreter & ; interp, . const char * ; tcl = nullptr . ). Definition at line 861 of file TClingUtils.cxx. ◆ EndsWith(). bool ROOT::TMetaUtils::EndsWith ; (; const std::string & ; theString, . const std::string & ; theSubstring . ). Definition at line 5124 of file TCli",MatchSource.WIKI,doc/master/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:3119,Integrability,rout,routine,3119,"sts and is public. ;  ; const clang::FunctionDecl * ClassInfo__HasMethod (const clang::DeclContext *cl, char const *, const cling::Interpreter &interp);  ; llvm::StringRef DataMemberInfo__ValidArrayIndex (const cling::Interpreter &interp, const clang::DeclaratorDecl &m, int *errnum=nullptr, llvm::StringRef *errstr=nullptr);  ValidArrayIndex return a static string (so use it or copy it immediatly, do not call GrabIndex twice in the same expression) containing the size of the array data member. ;  ; static std::string DemangleNameForDlsym (const std::string &name);  ; int ElementStreamer (std::ostream &finalString, const clang::NamedDecl &forcontext, const clang::QualType &qti, const char *t, int rwmode, const cling::Interpreter &interp, const char *tcl=nullptr);  ; bool EndsWith (const std::string &theString, const std::string &theSubstring);  ; void Error (const char *location, const char *fmt,...);  ; bool ExtractAttrIntPropertyFromName (const clang::Decl &decl, const std::string &propName, int &propValue);  This routine counts on the ""propName<separator>propValue"" format. ;  ; bool ExtractAttrPropertyFromName (const clang::Decl &decl, const std::string &propName, std::string &propValue);  This routine counts on the ""propName<separator>propValue"" format. ;  ; int extractAttrString (clang::Attr *attribute, std::string &attrString);  Extract attr string. ;  ; void ExtractCtxtEnclosingNameSpaces (const clang::DeclContext &, std::list< std::pair< std::string, bool > > &);  Extract enclosing namespaces recursively. ;  ; void ExtractEnclosingNameSpaces (const clang::Decl &, std::list< std::pair< std::string, bool > > &);  Extract the immediately outer namespace and then launch the recursion. ;  ; const clang::RecordDecl * ExtractEnclosingScopes (const clang::Decl &decl, std::list< std::pair< std::string, unsigned int > > &enclosingSc);  Extract the names and types of containing scopes. ;  ; int extractPropertyNameVal (clang::Attr *attribute, std::string &attrName, std::s",MatchSource.WIKI,doc/master/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:3304,Integrability,rout,routine,3304,"Info__ValidArrayIndex (const cling::Interpreter &interp, const clang::DeclaratorDecl &m, int *errnum=nullptr, llvm::StringRef *errstr=nullptr);  ValidArrayIndex return a static string (so use it or copy it immediatly, do not call GrabIndex twice in the same expression) containing the size of the array data member. ;  ; static std::string DemangleNameForDlsym (const std::string &name);  ; int ElementStreamer (std::ostream &finalString, const clang::NamedDecl &forcontext, const clang::QualType &qti, const char *t, int rwmode, const cling::Interpreter &interp, const char *tcl=nullptr);  ; bool EndsWith (const std::string &theString, const std::string &theSubstring);  ; void Error (const char *location, const char *fmt,...);  ; bool ExtractAttrIntPropertyFromName (const clang::Decl &decl, const std::string &propName, int &propValue);  This routine counts on the ""propName<separator>propValue"" format. ;  ; bool ExtractAttrPropertyFromName (const clang::Decl &decl, const std::string &propName, std::string &propValue);  This routine counts on the ""propName<separator>propValue"" format. ;  ; int extractAttrString (clang::Attr *attribute, std::string &attrString);  Extract attr string. ;  ; void ExtractCtxtEnclosingNameSpaces (const clang::DeclContext &, std::list< std::pair< std::string, bool > > &);  Extract enclosing namespaces recursively. ;  ; void ExtractEnclosingNameSpaces (const clang::Decl &, std::list< std::pair< std::string, bool > > &);  Extract the immediately outer namespace and then launch the recursion. ;  ; const clang::RecordDecl * ExtractEnclosingScopes (const clang::Decl &decl, std::list< std::pair< std::string, unsigned int > > &enclosingSc);  Extract the names and types of containing scopes. ;  ; int extractPropertyNameVal (clang::Attr *attribute, std::string &attrName, std::string &attrValue);  ; int extractPropertyNameValFromString (const std::string attributeStr, std::string &attrName, std::string &attrValue);  ; clang::TemplateName ExtractTemplateNameF",MatchSource.WIKI,doc/master/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:4491,Integrability,interface,interface,4491,"d::string &propName, std::string &propValue);  This routine counts on the ""propName<separator>propValue"" format. ;  ; int extractAttrString (clang::Attr *attribute, std::string &attrString);  Extract attr string. ;  ; void ExtractCtxtEnclosingNameSpaces (const clang::DeclContext &, std::list< std::pair< std::string, bool > > &);  Extract enclosing namespaces recursively. ;  ; void ExtractEnclosingNameSpaces (const clang::Decl &, std::list< std::pair< std::string, bool > > &);  Extract the immediately outer namespace and then launch the recursion. ;  ; const clang::RecordDecl * ExtractEnclosingScopes (const clang::Decl &decl, std::list< std::pair< std::string, unsigned int > > &enclosingSc);  Extract the names and types of containing scopes. ;  ; int extractPropertyNameVal (clang::Attr *attribute, std::string &attrName, std::string &attrValue);  ; int extractPropertyNameValFromString (const std::string attributeStr, std::string &attrName, std::string &attrValue);  ; clang::TemplateName ExtractTemplateNameFromQualType (const clang::QualType &qt);  These manipulations are necessary because a template specialisation type does not inherit from a record type (there is an asymmetry between the decls and the types in the clang interface). ;  ; void Fatal (const char *location, const char *fmt,...);  ; void foreachHeaderInModule (const clang::Module &module, const std::function< void(const clang::Module::Header &)> &closure, bool includeDirectlyUsedModules=true);  Calls the given lambda on every header in the given module. ;  ; const clang::TagDecl * GetAnnotatedRedeclarable (const clang::TagDecl *TND);  ; const clang::TypedefNameDecl * GetAnnotatedRedeclarable (const clang::TypedefNameDecl *TND);  ; template<typename T > ; const T * GetAnnotatedRedeclarable (const T *Redecl);  ; llvm::StringRef GetClassComment (const clang::CXXRecordDecl &decl, clang::SourceLocation *loc, const cling::Interpreter &interpreter);  Return the class comment after the ClassDef: class MyClass { .",MatchSource.WIKI,doc/master/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:9676,Integrability,rout,routine,9676," std::string GetQualifiedName (const clang::QualType &type, const clang::NamedDecl &forcontext);  ; std::string GetQualifiedName (const clang::RecordDecl &recordDecl);  ; std::string GetQualifiedName (const clang::Type &type, const clang::NamedDecl &forcontext);  ; void GetQualifiedName (std::string &qual_name, const AnnotatedRecordDecl &annotated);  ; void GetQualifiedName (std::string &qual_name, const clang::NamedDecl &nd);  This implementation does not rely on GetFullyQualifiedTypeName. ;  ; void GetQualifiedName (std::string &qual_name, const clang::QualType &type, const clang::NamedDecl &forcontext);  Main implementation relying on GetFullyQualifiedTypeName All other GetQualifiedName functions leverage this one except the one for namespaces. ;  ; void GetQualifiedName (std::string &qual_name, const clang::RecordDecl &recordDecl);  ; void GetQualifiedName (std::string &qual_name, const clang::Type &type, const clang::NamedDecl &forcontext);  ; std::string GetRealPath (const std::string &path);  ; std::pair< bool, int > GetTrivialIntegralReturnValue (const clang::FunctionDecl *funcCV, const cling::Interpreter &interp);  If the function contains 'just': return SomeValue; this routine will extract this value and return it. ;  ; clang::QualType GetTypeForIO (const clang::QualType &templateInstanceType, const cling::Interpreter &interpreter, const TNormalizedCtxt &normCtxt, TClassEdit::EModType mode=TClassEdit::kNone);  ; clang::RecordDecl * GetUnderlyingRecordDecl (clang::QualType type);  ; const clang::Type * GetUnderlyingType (clang::QualType type);  Return the base/underlying type of a chain of array or pointers type. ;  ; bool & GetWarningsAreErrors ();  ; bool HasClassDefMacro (const clang::Decl *decl, const cling::Interpreter &interpreter);  Return true if class has any of class declarations like ClassDef, ClassDefNV, ClassDefOverride. ;  ; bool HasCustomConvStreamerMemberFunction (const AnnotatedRecordDecl &cl, const clang::CXXRecordDecl *clxx, const cling::I",MatchSource.WIKI,doc/master/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:12227,Integrability,depend,depends,12227,"const &, const cling::Interpreter &);  return true if we can find a custom operator new with placement ;  ; bool HasCustomStreamerMemberFunction (const AnnotatedRecordDecl &cl, const clang::CXXRecordDecl *clxx, const cling::Interpreter &interp, const TNormalizedCtxt &normCtxt);  Return true if the class has a custom member function streamer. ;  ; bool HasDirectoryAutoAdd (clang::CXXRecordDecl const *, const cling::Interpreter &);  Return true if the class has a method DirectoryAutoAdd(TDirectory *) ;  ; bool HasIOConstructor (clang::CXXRecordDecl const *, std::string &, const RConstructorTypes &, const cling::Interpreter &);  return true if we can find an constructor calleable without any arguments or with one the IOCtor special types. ;  ; bool HasNewMerge (clang::CXXRecordDecl const *, const cling::Interpreter &);  Return true if the class has a method Merge(TCollection*,TFileMergeInfo*) ;  ; bool HasOldMerge (clang::CXXRecordDecl const *, const cling::Interpreter &);  Return true if the class has a method Merge(TCollection*) ;  ; bool hasOpaqueTypedef (clang::QualType instanceType, const TNormalizedCtxt &normCtxt);  Return true if the type is a Double32_t or Float16_t or is a instance template that depends on Double32_t or Float16_t. ;  ; bool hasOpaqueTypedef (const AnnotatedRecordDecl &cl, const cling::Interpreter &interp, const TNormalizedCtxt &normCtxt);  Return true if any of the argument is or contains a double32. ;  ; bool HasResetAfterMerge (clang::CXXRecordDecl const *, const cling::Interpreter &);  Return true if the class has a method ResetAfterMerge(TFileMergeInfo *) ;  ; void Info (const char *location, const char *fmt,...);  ; bool IsBase (const clang::CXXRecordDecl *cl, const clang::CXXRecordDecl *base, const clang::CXXRecordDecl *context, const cling::Interpreter &interp);  ; bool IsBase (const clang::FieldDecl &m, const char *basename, const cling::Interpreter &interp);  ; bool IsCtxtReacheable (const clang::DeclContext &ctxt);  Return true if the",MatchSource.WIKI,doc/master/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:18321,Integrability,interface,interface,18321,"assCode (CallWriteStreamer_t WriteStreamerFunc, const AnnotatedRecordDecl &cl, const cling::Interpreter &interp, const TNormalizedCtxt &normCtxt, std::ostream &finalString, const RConstructorTypes &ctorTypes, bool isGenreflex);  Generate the code of the class If the requestor is genreflex, request the new streamer format. ;  ; void WriteClassInit (std::ostream &finalString, const AnnotatedRecordDecl &cl, const clang::CXXRecordDecl *decl, const cling::Interpreter &interp, const TNormalizedCtxt &normCtxt, const RConstructorTypes &ctorTypes, bool &needCollectionProxy);  FIXME: a function of 450+ lines! ;  ; int WriteNamespaceHeader (std::ostream &, const clang::DeclContext *);  Write all the necessary opening part of the namespace and return the number of closing brackets needed For example for Space1::Space2 we write: namespace Space1 { namespace Space2 { and return 2. ;  ; int WriteNamespaceHeader (std::ostream &, const clang::RecordDecl *);  ; void WritePointersSTL (const AnnotatedRecordDecl &cl, const cling::Interpreter &interp, const TNormalizedCtxt &normCtxt);  Write interface function for STL members. ;  . Variables; const int kError = 2000;  ; const int kFatal = 4000;  ; const int kInfo = 0;  ; const int kMaxLen = 1024;  ; const int kNote = 500;  ; const int kSysError = 3000;  ; const int kWarning = 1000;  . Typedef Documentation. ◆ CallWriteStreamer_t. typedef void(* ROOT::TMetaUtils::CallWriteStreamer_t) (const AnnotatedRecordDecl &cl, const cling::Interpreter &interp, const TNormalizedCtxt &normCtxt, std::ostream &dictStream, bool isAutoStreamer). Definition at line 120 of file TClingUtils.h. ◆ RConstructorTypes. typedef std::list<RConstructorType> ROOT::TMetaUtils::RConstructorTypes. Definition at line 344 of file TClingUtils.h. Enumeration Type Documentation. ◆ DataMemberInfo__ValidArrayIndex_error_code. enum ROOT::TMetaUtils::DataMemberInfo__ValidArrayIndex_error_code. EnumeratorVALID ; NOT_INT ; NOT_DEF ; IS_PRIVATE ; UNKNOWN . Definition at line 118 of f",MatchSource.WIKI,doc/master/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:20059,Integrability,depend,dependences,20059,"at line 344 of file TClingUtils.h. Enumeration Type Documentation. ◆ DataMemberInfo__ValidArrayIndex_error_code. enum ROOT::TMetaUtils::DataMemberInfo__ValidArrayIndex_error_code. EnumeratorVALID ; NOT_INT ; NOT_DEF ; IS_PRIVATE ; UNKNOWN . Definition at line 118 of file TClingUtils.h. ◆ EIOCtorCategory. enum class ROOT::TMetaUtils::EIOCtorCategory : short. strong . EnumeratorkAbsent ; kDefault ; kIOPtrType ; kIORefType . Definition at line 382 of file TClingUtils.h. Function Documentation. ◆ AddDefaultParameters(). clang::QualType ROOT::TMetaUtils::AddDefaultParameters ; (; clang::QualType ; instanceType, . const cling::Interpreter & ; interpreter, . const TNormalizedCtxt & ; normCtxt . ). Add any unspecified template parameters to the class template instance, mentioned anywhere in the type. ; Note: this does not strip any typedef but could be merged with cling::utils::Transform::GetPartiallyDesugaredType if we can safely replace TClassEdit::IsStd with a test on the declaring scope and if we can resolve the fact that the added parameter do not take into account possible use/dependences on Double32_t and if we decide that adding the default is the right long term solution or not. Whether it is or not depend on the I/O on whether the default template argument might change or not and whether they (should) affect the on disk layout (for STL containers, we do know they do not). ; Definition at line 2892 of file TClingUtils.cxx. ◆ BeginsWith(). bool ROOT::TMetaUtils::BeginsWith ; (; const std::string & ; theString, . const std::string & ; theSubstring . ). Definition at line 5135 of file TClingUtils.cxx. ◆ CheckConstructor(). ROOT::TMetaUtils::EIOCtorCategory ROOT::TMetaUtils::CheckConstructor ; (; const clang::CXXRecordDecl * ; cl, . const RConstructorType & ; ioctortype, . const cling::Interpreter & ; interp . ). Check if class has constructor of provided type - either default or with single argument. ; Definition at line 1119 of file TClingUtils.cxx. ◆ CheckDefaultCons",MatchSource.WIKI,doc/master/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:20187,Integrability,depend,depend,20187,"ategory. enum class ROOT::TMetaUtils::EIOCtorCategory : short. strong . EnumeratorkAbsent ; kDefault ; kIOPtrType ; kIORefType . Definition at line 382 of file TClingUtils.h. Function Documentation. ◆ AddDefaultParameters(). clang::QualType ROOT::TMetaUtils::AddDefaultParameters ; (; clang::QualType ; instanceType, . const cling::Interpreter & ; interpreter, . const TNormalizedCtxt & ; normCtxt . ). Add any unspecified template parameters to the class template instance, mentioned anywhere in the type. ; Note: this does not strip any typedef but could be merged with cling::utils::Transform::GetPartiallyDesugaredType if we can safely replace TClassEdit::IsStd with a test on the declaring scope and if we can resolve the fact that the added parameter do not take into account possible use/dependences on Double32_t and if we decide that adding the default is the right long term solution or not. Whether it is or not depend on the I/O on whether the default template argument might change or not and whether they (should) affect the on disk layout (for STL containers, we do know they do not). ; Definition at line 2892 of file TClingUtils.cxx. ◆ BeginsWith(). bool ROOT::TMetaUtils::BeginsWith ; (; const std::string & ; theString, . const std::string & ; theSubstring . ). Definition at line 5135 of file TClingUtils.cxx. ◆ CheckConstructor(). ROOT::TMetaUtils::EIOCtorCategory ROOT::TMetaUtils::CheckConstructor ; (; const clang::CXXRecordDecl * ; cl, . const RConstructorType & ; ioctortype, . const cling::Interpreter & ; interp . ). Check if class has constructor of provided type - either default or with single argument. ; Definition at line 1119 of file TClingUtils.cxx. ◆ CheckDefaultConstructor(). bool ROOT::TMetaUtils::CheckDefaultConstructor ; (; const clang::CXXRecordDecl * ; cl, . const cling::Interpreter & ; interp . ). Checks if default constructor exists and accessible. ; Definition at line 1039 of file TClingUtils.cxx. ◆ CheckIOConstructor(). ROOT::TMetaUtils::EIOCtorCa",MatchSource.WIKI,doc/master/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:24343,Integrability,rout,routine,24343,"Utils::DemangleNameForDlsym ; (; const std::string & ; name). inlinestatic . Definition at line 597 of file TClingUtils.h. ◆ ElementStreamer(). int ROOT::TMetaUtils::ElementStreamer ; (; std::ostream & ; finalString, . const clang::NamedDecl & ; forcontext, . const clang::QualType & ; qti, . const char * ; t, . int ; rwmode, . const cling::Interpreter & ; interp, . const char * ; tcl = nullptr . ). Definition at line 861 of file TClingUtils.cxx. ◆ EndsWith(). bool ROOT::TMetaUtils::EndsWith ; (; const std::string & ; theString, . const std::string & ; theSubstring . ). Definition at line 5124 of file TClingUtils.cxx. ◆ Error(). void ROOT::TMetaUtils::Error ; (; const char * ; location, . const char * ; fmt, .  ; ... . ). inline . Definition at line 840 of file TClingUtils.h. ◆ ExtractAttrIntPropertyFromName(). bool ROOT::TMetaUtils::ExtractAttrIntPropertyFromName ; (; const clang::Decl & ; decl, . const std::string & ; propName, . int & ; propValue . ). This routine counts on the ""propName<separator>propValue"" format. ; Definition at line 1712 of file TClingUtils.cxx. ◆ ExtractAttrPropertyFromName(). bool ROOT::TMetaUtils::ExtractAttrPropertyFromName ; (; const clang::Decl & ; decl, . const std::string & ; propName, . std::string & ; propValue . ). This routine counts on the ""propName<separator>propValue"" format. ; Definition at line 1689 of file TClingUtils.cxx. ◆ extractAttrString(). int ROOT::TMetaUtils::extractAttrString ; (; clang::Attr * ; attribute, . std::string & ; attrString . ). Extract attr string. ; Definition at line 1648 of file TClingUtils.cxx. ◆ ExtractCtxtEnclosingNameSpaces(). void ROOT::TMetaUtils::ExtractCtxtEnclosingNameSpaces ; (; const clang::DeclContext & ; ctxt, . std::list< std::pair< std::string, bool > > & ; enclosingNamespaces . ). Extract enclosing namespaces recursively. ; Definition at line 4977 of file TClingUtils.cxx. ◆ ExtractEnclosingNameSpaces(). void ROOT::TMetaUtils::ExtractEnclosingNameSpaces ; (; const clang::Decl & ; decl, ",MatchSource.WIKI,doc/master/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:24644,Integrability,rout,routine,24644,"ar * ; t, . int ; rwmode, . const cling::Interpreter & ; interp, . const char * ; tcl = nullptr . ). Definition at line 861 of file TClingUtils.cxx. ◆ EndsWith(). bool ROOT::TMetaUtils::EndsWith ; (; const std::string & ; theString, . const std::string & ; theSubstring . ). Definition at line 5124 of file TClingUtils.cxx. ◆ Error(). void ROOT::TMetaUtils::Error ; (; const char * ; location, . const char * ; fmt, .  ; ... . ). inline . Definition at line 840 of file TClingUtils.h. ◆ ExtractAttrIntPropertyFromName(). bool ROOT::TMetaUtils::ExtractAttrIntPropertyFromName ; (; const clang::Decl & ; decl, . const std::string & ; propName, . int & ; propValue . ). This routine counts on the ""propName<separator>propValue"" format. ; Definition at line 1712 of file TClingUtils.cxx. ◆ ExtractAttrPropertyFromName(). bool ROOT::TMetaUtils::ExtractAttrPropertyFromName ; (; const clang::Decl & ; decl, . const std::string & ; propName, . std::string & ; propValue . ). This routine counts on the ""propName<separator>propValue"" format. ; Definition at line 1689 of file TClingUtils.cxx. ◆ extractAttrString(). int ROOT::TMetaUtils::extractAttrString ; (; clang::Attr * ; attribute, . std::string & ; attrString . ). Extract attr string. ; Definition at line 1648 of file TClingUtils.cxx. ◆ ExtractCtxtEnclosingNameSpaces(). void ROOT::TMetaUtils::ExtractCtxtEnclosingNameSpaces ; (; const clang::DeclContext & ; ctxt, . std::list< std::pair< std::string, bool > > & ; enclosingNamespaces . ). Extract enclosing namespaces recursively. ; Definition at line 4977 of file TClingUtils.cxx. ◆ ExtractEnclosingNameSpaces(). void ROOT::TMetaUtils::ExtractEnclosingNameSpaces ; (; const clang::Decl & ; decl, . std::list< std::pair< std::string, bool > > & ; enclosingNamespaces . ). Extract the immediately outer namespace and then launch the recursion. ; Definition at line 4957 of file TClingUtils.cxx. ◆ ExtractEnclosingScopes(). const clang::RecordDecl * ROOT::TMetaUtils::ExtractEnclosingScopes ; (; cons",MatchSource.WIKI,doc/master/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:26697,Integrability,interface,interface,26697,"dDecl * ROOT::TMetaUtils::ExtractEnclosingScopes ; (; const clang::Decl & ; decl, . std::list< std::pair< std::string, unsigned int > > & ; enclosingSc . ). Extract the names and types of containing scopes. ; Stop if a class is met and return its pointer. ; Definition at line 5004 of file TClingUtils.cxx. ◆ extractPropertyNameVal(). int ROOT::TMetaUtils::extractPropertyNameVal ; (; clang::Attr * ; attribute, . std::string & ; attrName, . std::string & ; attrValue . ). Definition at line 1678 of file TClingUtils.cxx. ◆ extractPropertyNameValFromString(). int ROOT::TMetaUtils::extractPropertyNameValFromString ; (; const std::string ; attributeStr, . std::string & ; attrName, . std::string & ; attrValue . ). Definition at line 1661 of file TClingUtils.cxx. ◆ ExtractTemplateNameFromQualType(). clang::TemplateName ROOT::TMetaUtils::ExtractTemplateNameFromQualType ; (; const clang::QualType & ; qt). These manipulations are necessary because a template specialisation type does not inherit from a record type (there is an asymmetry between the decls and the types in the clang interface). ; We may need therefore to step into the ""Decl dimension"" to then get back to the ""type dimension"". ; Definition at line 3580 of file TClingUtils.cxx. ◆ Fatal(). void ROOT::TMetaUtils::Fatal ; (; const char * ; location, . const char * ; fmt, .  ; ... . ). inline . Definition at line 880 of file TClingUtils.h. ◆ foreachHeaderInModule(). void ROOT::TMetaUtils::foreachHeaderInModule ; (; const clang::Module & ; module, . const std::function< void(const clang::Module::Header &)> & ; closure, . bool ; includeDirectlyUsedModules = true . ). Calls the given lambda on every header in the given module. ; includeDirectlyUsedModules designates if the foreach should also loop over the headers in all modules that are directly used via a use declaration in the modulemap. ; Definition at line 2668 of file TClingUtils.cxx. ◆ GetAnnotatedRedeclarable() [1/3]. const clang::TagDecl * ROOT::TMetaUtils::GetAnnot",MatchSource.WIKI,doc/master/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:33530,Integrability,rout,routine,33530,"ion at line 4106 of file TClingUtils.cxx. ◆ GetNameWithinNamespace(). bool ROOT::TMetaUtils::GetNameWithinNamespace ; (; std::string & ; fullname, . std::string & ; clsname, . std::string & ; nsname, . clang::CXXRecordDecl const * ; cl . ). Return true if one of the class' enclosing scope is a namespace and set fullname to the fully qualified name, clsname to the name within a namespace and nsname to the namespace fully qualified name. ; Definition at line 2197 of file TClingUtils.cxx. ◆ GetNormalizedName() [1/2]. void ROOT::TMetaUtils::GetNormalizedName ; (; std::string & ; norm_name, . const clang::QualType & ; type, . const cling::Interpreter & ; interpreter, . const TNormalizedCtxt & ; normCtxt . ). Return the type name normalized for ROOT, keeping only the ROOT opaque typedef (Double32_t, etc.) and adding default template argument for all types except the STL collections where we remove the default template argument if any. ; This routine might actually belong in the interpreter because cache the clang::Type might be intepreter specific. ; Definition at line 4049 of file TClingUtils.cxx. ◆ GetNormalizedName() [2/2]. void ROOT::TMetaUtils::GetNormalizedName ; (; std::string & ; norm_name, . const clang::TypeDecl * ; typeDecl, . const cling::Interpreter & ; interpreter . ). Definition at line 4089 of file TClingUtils.cxx. ◆ GetNormalizedType(). clang::QualType ROOT::TMetaUtils::GetNormalizedType ; (; const clang::QualType & ; type, . const cling::Interpreter & ; interpreter, . const TNormalizedCtxt & ; normCtxt . ). Return the type normalized for ROOT, keeping only the ROOT opaque typedef (Double32_t, etc.) and adding default template argument for all types except those explicitly requested to be drop by the user. ; Default template for STL collections are not yet removed by this routine. ; Definition at line 4023 of file TClingUtils.cxx. ◆ GetNumberOfErrors(). unsigned int & ROOT::TMetaUtils::GetNumberOfErrors ; (; ). inline . Definition at line 779 of file TCli",MatchSource.WIKI,doc/master/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:34394,Integrability,rout,routine,34394,"typedef (Double32_t, etc.) and adding default template argument for all types except the STL collections where we remove the default template argument if any. ; This routine might actually belong in the interpreter because cache the clang::Type might be intepreter specific. ; Definition at line 4049 of file TClingUtils.cxx. ◆ GetNormalizedName() [2/2]. void ROOT::TMetaUtils::GetNormalizedName ; (; std::string & ; norm_name, . const clang::TypeDecl * ; typeDecl, . const cling::Interpreter & ; interpreter . ). Definition at line 4089 of file TClingUtils.cxx. ◆ GetNormalizedType(). clang::QualType ROOT::TMetaUtils::GetNormalizedType ; (; const clang::QualType & ; type, . const cling::Interpreter & ; interpreter, . const TNormalizedCtxt & ; normCtxt . ). Return the type normalized for ROOT, keeping only the ROOT opaque typedef (Double32_t, etc.) and adding default template argument for all types except those explicitly requested to be drop by the user. ; Default template for STL collections are not yet removed by this routine. ; Definition at line 4023 of file TClingUtils.cxx. ◆ GetNumberOfErrors(). unsigned int & ROOT::TMetaUtils::GetNumberOfErrors ; (; ). inline . Definition at line 779 of file TClingUtils.h. ◆ GetPathSeparator(). const std::string & ROOT::TMetaUtils::GetPathSeparator ; (; ). Return the separator suitable for this platform. ; Definition at line 5117 of file TClingUtils.cxx. ◆ GetQualifiedName() [1/10]. std::string ROOT::TMetaUtils::GetQualifiedName ; (; const AnnotatedRecordDecl & ; annotated). Definition at line 1460 of file TClingUtils.cxx. ◆ GetQualifiedName() [2/10]. std::string ROOT::TMetaUtils::GetQualifiedName ; (; const clang::NamedDecl & ; nd). Definition at line 1426 of file TClingUtils.cxx. ◆ GetQualifiedName() [3/10]. std::string ROOT::TMetaUtils::GetQualifiedName ; (; const clang::QualType & ; type, . const clang::NamedDecl & ; forcontext . ). Definition at line 1365 of file TClingUtils.cxx. ◆ GetQualifiedName() [4/10]. std::string ROOT::",MatchSource.WIKI,doc/master/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:37401,Integrability,rout,routine,37401,"ifiedName functions leverage this one except the one for namespaces. ; Definition at line 1359 of file TClingUtils.cxx. ◆ GetQualifiedName() [9/10]. void ROOT::TMetaUtils::GetQualifiedName ; (; std::string & ; qual_name, . const clang::RecordDecl & ; recordDecl . ). Definition at line 1435 of file TClingUtils.cxx. ◆ GetQualifiedName() [10/10]. void ROOT::TMetaUtils::GetQualifiedName ; (; std::string & ; qual_name, . const clang::Type & ; type, . const clang::NamedDecl & ; forcontext . ). Definition at line 1377 of file TClingUtils.cxx. ◆ GetRealPath(). std::string ROOT::TMetaUtils::GetRealPath ; (; const std::string & ; path). Returnsthe resolved normalized absolute path possibly resolving symlinks. ; Definition at line 72 of file TClingUtils.cxx. ◆ GetTrivialIntegralReturnValue(). std::pair< bool, int > ROOT::TMetaUtils::GetTrivialIntegralReturnValue ; (; const clang::FunctionDecl * ; funcCV, . const cling::Interpreter & ; interp . ). If the function contains 'just': return SomeValue; this routine will extract this value and return it. ; The first element is set to true we have the body of the function and it is indeed a trivial function with just a return of a value. The second element contains the value (or -1 is case of failure) ; Definition at line 2599 of file TClingUtils.cxx. ◆ GetTypeForIO(). clang::QualType ROOT::TMetaUtils::GetTypeForIO ; (; const clang::QualType & ; templateInstanceType, . const cling::Interpreter & ; interpreter, . const TNormalizedCtxt & ; normCtxt, . TClassEdit::EModType ; mode = TClassEdit::kNone . ). Definition at line 4154 of file TClingUtils.cxx. ◆ GetUnderlyingRecordDecl(). clang::RecordDecl * ROOT::TMetaUtils::GetUnderlyingRecordDecl ; (; clang::QualType ; type). Definition at line 2828 of file TClingUtils.cxx. ◆ GetUnderlyingType(). const clang::Type * ROOT::TMetaUtils::GetUnderlyingType ; (; clang::QualType ; type). Return the base/underlying type of a chain of array or pointers type. ; Does not yet support the array and pointer",MatchSource.WIKI,doc/master/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:41909,Integrability,depend,depends,41909,"dDecl const * ; cl, . std::string & ; arg, . const RConstructorTypes & ; ctorTypes, . const cling::Interpreter & ; interp . ). return true if we can find an constructor calleable without any arguments or with one the IOCtor special types. ; Definition at line 1175 of file TClingUtils.cxx. ◆ HasNewMerge(). bool ROOT::TMetaUtils::HasNewMerge ; (; clang::CXXRecordDecl const * ; cl, . const cling::Interpreter & ; interp . ). Return true if the class has a method Merge(TCollection*,TFileMergeInfo*) ; Definition at line 1273 of file TClingUtils.cxx. ◆ HasOldMerge(). bool ROOT::TMetaUtils::HasOldMerge ; (; clang::CXXRecordDecl const * ; cl, . const cling::Interpreter & ; interp . ). Return true if the class has a method Merge(TCollection*) ; Definition at line 1287 of file TClingUtils.cxx. ◆ hasOpaqueTypedef() [1/2]. bool ROOT::TMetaUtils::hasOpaqueTypedef ; (; clang::QualType ; instanceType, . const TNormalizedCtxt & ; normCtxt . ). Return true if the type is a Double32_t or Float16_t or is a instance template that depends on Double32_t or Float16_t. ; Definition at line 1581 of file TClingUtils.cxx. ◆ hasOpaqueTypedef() [2/2]. bool ROOT::TMetaUtils::hasOpaqueTypedef ; (; const AnnotatedRecordDecl & ; cl, . const cling::Interpreter & ; interp, . const TNormalizedCtxt & ; normCtxt . ). Return true if any of the argument is or contains a double32. ; Definition at line 1628 of file TClingUtils.cxx. ◆ HasResetAfterMerge(). bool ROOT::TMetaUtils::HasResetAfterMerge ; (; clang::CXXRecordDecl const * ; cl, . const cling::Interpreter & ; interp . ). Return true if the class has a method ResetAfterMerge(TFileMergeInfo *) ; Definition at line 1302 of file TClingUtils.cxx. ◆ Info(). void ROOT::TMetaUtils::Info ; (; const char * ; location, . const char * ; fmt, .  ; ... . ). inline . Definition at line 860 of file TClingUtils.h. ◆ IsBase() [1/2]. bool ROOT::TMetaUtils::IsBase ; (; const clang::CXXRecordDecl * ; cl, . const clang::CXXRecordDecl * ; base, . const clang::CXXRecordDecl ",MatchSource.WIKI,doc/master/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:52752,Integrability,interface,interface,52752,"AnnotatedRecordDecl & ; cl, . const clang::CXXRecordDecl * ; decl, . const cling::Interpreter & ; interp, . const TNormalizedCtxt & ; normCtxt, . const RConstructorTypes & ; ctorTypes, . bool & ; needCollectionProxy . ). FIXME: a function of 450+ lines! ; Definition at line 1734 of file TClingUtils.cxx. ◆ WriteNamespaceHeader() [1/2]. int ROOT::TMetaUtils::WriteNamespaceHeader ; (; std::ostream & ; out, . const clang::DeclContext * ; ctxt . ). Write all the necessary opening part of the namespace and return the number of closing brackets needed For example for Space1::Space2 we write: namespace Space1 { namespace Space2 { and return 2. ; Definition at line 2246 of file TClingUtils.cxx. ◆ WriteNamespaceHeader() [2/2]. int ROOT::TMetaUtils::WriteNamespaceHeader ; (; std::ostream & ; out, . const clang::RecordDecl * ; cl . ). Definition at line 2270 of file TClingUtils.cxx. ◆ WritePointersSTL(). void ROOT::TMetaUtils::WritePointersSTL ; (; const AnnotatedRecordDecl & ; cl, . const cling::Interpreter & ; interp, . const TNormalizedCtxt & ; normCtxt . ). Write interface function for STL members. ; Definition at line 2499 of file TClingUtils.cxx. Variable Documentation. ◆ kError. const int ROOT::TMetaUtils::kError = 2000. Definition at line 129 of file TClingUtils.h. ◆ kFatal. const int ROOT::TMetaUtils::kFatal = 4000. Definition at line 131 of file TClingUtils.h. ◆ kInfo. const int ROOT::TMetaUtils::kInfo = 0. Definition at line 126 of file TClingUtils.h. ◆ kMaxLen. const int ROOT::TMetaUtils::kMaxLen = 1024. Definition at line 132 of file TClingUtils.h. ◆ kNote. const int ROOT::TMetaUtils::kNote = 500. Definition at line 127 of file TClingUtils.h. ◆ kSysError. const int ROOT::TMetaUtils::kSysError = 3000. Definition at line 130 of file TClingUtils.h. ◆ kWarning. const int ROOT::TMetaUtils::kWarning = 1000. Definition at line 128 of file TClingUtils.h. ROOTTMetaUtils. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:4396,Modifiability,inherit,inherit,4396,"d::string &propName, std::string &propValue);  This routine counts on the ""propName<separator>propValue"" format. ;  ; int extractAttrString (clang::Attr *attribute, std::string &attrString);  Extract attr string. ;  ; void ExtractCtxtEnclosingNameSpaces (const clang::DeclContext &, std::list< std::pair< std::string, bool > > &);  Extract enclosing namespaces recursively. ;  ; void ExtractEnclosingNameSpaces (const clang::Decl &, std::list< std::pair< std::string, bool > > &);  Extract the immediately outer namespace and then launch the recursion. ;  ; const clang::RecordDecl * ExtractEnclosingScopes (const clang::Decl &decl, std::list< std::pair< std::string, unsigned int > > &enclosingSc);  Extract the names and types of containing scopes. ;  ; int extractPropertyNameVal (clang::Attr *attribute, std::string &attrName, std::string &attrValue);  ; int extractPropertyNameValFromString (const std::string attributeStr, std::string &attrName, std::string &attrValue);  ; clang::TemplateName ExtractTemplateNameFromQualType (const clang::QualType &qt);  These manipulations are necessary because a template specialisation type does not inherit from a record type (there is an asymmetry between the decls and the types in the clang interface). ;  ; void Fatal (const char *location, const char *fmt,...);  ; void foreachHeaderInModule (const clang::Module &module, const std::function< void(const clang::Module::Header &)> &closure, bool includeDirectlyUsedModules=true);  Calls the given lambda on every header in the given module. ;  ; const clang::TagDecl * GetAnnotatedRedeclarable (const clang::TagDecl *TND);  ; const clang::TypedefNameDecl * GetAnnotatedRedeclarable (const clang::TypedefNameDecl *TND);  ; template<typename T > ; const T * GetAnnotatedRedeclarable (const T *Redecl);  ; llvm::StringRef GetClassComment (const clang::CXXRecordDecl &decl, clang::SourceLocation *loc, const cling::Interpreter &interpreter);  Return the class comment after the ClassDef: class MyClass { .",MatchSource.WIKI,doc/master/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:5848,Modifiability,variab,variable,5848,"header in the given module. ;  ; const clang::TagDecl * GetAnnotatedRedeclarable (const clang::TagDecl *TND);  ; const clang::TypedefNameDecl * GetAnnotatedRedeclarable (const clang::TypedefNameDecl *TND);  ; template<typename T > ; const T * GetAnnotatedRedeclarable (const T *Redecl);  ; llvm::StringRef GetClassComment (const clang::CXXRecordDecl &decl, clang::SourceLocation *loc, const cling::Interpreter &interpreter);  Return the class comment after the ClassDef: class MyClass { ... ClassDef(MyClass, 1) // class comment. ;  ; int GetClassVersion (const clang::RecordDecl *cl, const cling::Interpreter &interp);  Return the version number of the class or -1 if the function Class_Version does not exist. ;  ; llvm::StringRef GetComment (const clang::Decl &decl, clang::SourceLocation *loc=nullptr);  Returns the comment (// striped away), annotating declaration in a meaningful for ROOT IO way. ;  ; void GetCppName (std::string &output, const char *input);  Return (in the argument 'output') a valid name of the C++ symbol/type (pass as 'input') that can be used in C++ as a variable name. ;  ; int & GetErrorIgnoreLevel ();  ; std::string GetFileName (const clang::Decl &decl, const cling::Interpreter &interp);  Return the header file to be included to declare the Decl. ;  ; void GetFullyQualifiedTypeName (std::string &name, const clang::QualType &type, const clang::ASTContext &);  ; void GetFullyQualifiedTypeName (std::string &name, const clang::QualType &type, const cling::Interpreter &interpreter);  ; const clang::FunctionDecl * GetFuncWithProto (const clang::Decl *cinfo, const char *method, const char *proto, const cling::Interpreter &gInterp, bool diagnose);  ; long GetLineNumber (clang::Decl const *);  It looks like the template specialization decl actually contains less information on the location of the code than the decl (in case where there is forward declaration, that is what the specialization points to. ;  ; std::string GetModuleFileName (const char *moduleName)",MatchSource.WIKI,doc/master/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:26602,Modifiability,inherit,inherit,26602,"dDecl * ROOT::TMetaUtils::ExtractEnclosingScopes ; (; const clang::Decl & ; decl, . std::list< std::pair< std::string, unsigned int > > & ; enclosingSc . ). Extract the names and types of containing scopes. ; Stop if a class is met and return its pointer. ; Definition at line 5004 of file TClingUtils.cxx. ◆ extractPropertyNameVal(). int ROOT::TMetaUtils::extractPropertyNameVal ; (; clang::Attr * ; attribute, . std::string & ; attrName, . std::string & ; attrValue . ). Definition at line 1678 of file TClingUtils.cxx. ◆ extractPropertyNameValFromString(). int ROOT::TMetaUtils::extractPropertyNameValFromString ; (; const std::string ; attributeStr, . std::string & ; attrName, . std::string & ; attrValue . ). Definition at line 1661 of file TClingUtils.cxx. ◆ ExtractTemplateNameFromQualType(). clang::TemplateName ROOT::TMetaUtils::ExtractTemplateNameFromQualType ; (; const clang::QualType & ; qt). These manipulations are necessary because a template specialisation type does not inherit from a record type (there is an asymmetry between the decls and the types in the clang interface). ; We may need therefore to step into the ""Decl dimension"" to then get back to the ""type dimension"". ; Definition at line 3580 of file TClingUtils.cxx. ◆ Fatal(). void ROOT::TMetaUtils::Fatal ; (; const char * ; location, . const char * ; fmt, .  ; ... . ). inline . Definition at line 880 of file TClingUtils.h. ◆ foreachHeaderInModule(). void ROOT::TMetaUtils::foreachHeaderInModule ; (; const clang::Module & ; module, . const std::function< void(const clang::Module::Header &)> & ; closure, . bool ; includeDirectlyUsedModules = true . ). Calls the given lambda on every header in the given module. ; includeDirectlyUsedModules designates if the foreach should also loop over the headers in all modules that are directly used via a use declaration in the modulemap. ; Definition at line 2668 of file TClingUtils.cxx. ◆ GetAnnotatedRedeclarable() [1/3]. const clang::TagDecl * ROOT::TMetaUtils::GetAnnot",MatchSource.WIKI,doc/master/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:29725,Modifiability,variab,variable,29725,"ot exist. ; Definition at line 2572 of file TClingUtils.cxx. ◆ GetComment(). llvm::StringRef ROOT::TMetaUtils::GetComment ; (; const clang::Decl & ; decl, . clang::SourceLocation * ; loc = nullptr . ). Returns the comment (// striped away), annotating declaration in a meaningful for ROOT IO way. ; Takes optional out parameter clang::SourceLocation returning the source location of the comment.; CXXMethodDecls, FieldDecls and TagDecls are annotated. CXXMethodDecls declarations and FieldDecls are annotated as follows: Eg. void f(); // comment1 int member; // comment2 Inline definitions of CXXMethodDecls after the closing } ; . Eg: void f() {...} // comment3 TagDecls are annotated in the end of the ClassDef macro. Eg. class MyClass { ... ClassDef(MyClass, 1) // comment4 ; Definition at line 4197 of file TClingUtils.cxx. ◆ GetCppName(). void ROOT::TMetaUtils::GetCppName ; (; std::string & ; output, . const char * ; input . ). Return (in the argument 'output') a valid name of the C++ symbol/type (pass as 'input') that can be used in C++ as a variable name. ; Definition at line 3269 of file TClingUtils.cxx. ◆ GetErrorIgnoreLevel(). int & ROOT::TMetaUtils::GetErrorIgnoreLevel ; (; ). inline . Definition at line 795 of file TClingUtils.h. ◆ GetFileName(). std::string ROOT::TMetaUtils::GetFileName ; (; const clang::Decl & ; decl, . const cling::Interpreter & ; interp . ). Return the header file to be included to declare the Decl. ; Definition at line 3335 of file TClingUtils.cxx. ◆ GetFullyQualifiedTypeName() [1/2]. void ROOT::TMetaUtils::GetFullyQualifiedTypeName ; (; std::string & ; name, . const clang::QualType & ; type, . const clang::ASTContext & ; astContext . ). Definition at line 3490 of file TClingUtils.cxx. ◆ GetFullyQualifiedTypeName() [2/2]. void ROOT::TMetaUtils::GetFullyQualifiedTypeName ; (; std::string & ; name, . const clang::QualType & ; type, . const cling::Interpreter & ; interpreter . ). Definition at line 3502 of file TClingUtils.cxx. ◆ GetFuncWithProto(",MatchSource.WIKI,doc/master/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:33587,Performance,cache,cache,33587,"ion at line 4106 of file TClingUtils.cxx. ◆ GetNameWithinNamespace(). bool ROOT::TMetaUtils::GetNameWithinNamespace ; (; std::string & ; fullname, . std::string & ; clsname, . std::string & ; nsname, . clang::CXXRecordDecl const * ; cl . ). Return true if one of the class' enclosing scope is a namespace and set fullname to the fully qualified name, clsname to the name within a namespace and nsname to the namespace fully qualified name. ; Definition at line 2197 of file TClingUtils.cxx. ◆ GetNormalizedName() [1/2]. void ROOT::TMetaUtils::GetNormalizedName ; (; std::string & ; norm_name, . const clang::QualType & ; type, . const cling::Interpreter & ; interpreter, . const TNormalizedCtxt & ; normCtxt . ). Return the type name normalized for ROOT, keeping only the ROOT opaque typedef (Double32_t, etc.) and adding default template argument for all types except the STL collections where we remove the default template argument if any. ; This routine might actually belong in the interpreter because cache the clang::Type might be intepreter specific. ; Definition at line 4049 of file TClingUtils.cxx. ◆ GetNormalizedName() [2/2]. void ROOT::TMetaUtils::GetNormalizedName ; (; std::string & ; norm_name, . const clang::TypeDecl * ; typeDecl, . const cling::Interpreter & ; interpreter . ). Definition at line 4089 of file TClingUtils.cxx. ◆ GetNormalizedType(). clang::QualType ROOT::TMetaUtils::GetNormalizedType ; (; const clang::QualType & ; type, . const cling::Interpreter & ; interpreter, . const TNormalizedCtxt & ; normCtxt . ). Return the type normalized for ROOT, keeping only the ROOT opaque typedef (Double32_t, etc.) and adding default template argument for all types except those explicitly requested to be drop by the user. ; Default template for STL collections are not yet removed by this routine. ; Definition at line 4023 of file TClingUtils.cxx. ◆ GetNumberOfErrors(). unsigned int & ROOT::TMetaUtils::GetNumberOfErrors ; (; ). inline . Definition at line 779 of file TCli",MatchSource.WIKI,doc/master/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:19897,Safety,safe,safely,19897,"at line 344 of file TClingUtils.h. Enumeration Type Documentation. ◆ DataMemberInfo__ValidArrayIndex_error_code. enum ROOT::TMetaUtils::DataMemberInfo__ValidArrayIndex_error_code. EnumeratorVALID ; NOT_INT ; NOT_DEF ; IS_PRIVATE ; UNKNOWN . Definition at line 118 of file TClingUtils.h. ◆ EIOCtorCategory. enum class ROOT::TMetaUtils::EIOCtorCategory : short. strong . EnumeratorkAbsent ; kDefault ; kIOPtrType ; kIORefType . Definition at line 382 of file TClingUtils.h. Function Documentation. ◆ AddDefaultParameters(). clang::QualType ROOT::TMetaUtils::AddDefaultParameters ; (; clang::QualType ; instanceType, . const cling::Interpreter & ; interpreter, . const TNormalizedCtxt & ; normCtxt . ). Add any unspecified template parameters to the class template instance, mentioned anywhere in the type. ; Note: this does not strip any typedef but could be merged with cling::utils::Transform::GetPartiallyDesugaredType if we can safely replace TClassEdit::IsStd with a test on the declaring scope and if we can resolve the fact that the added parameter do not take into account possible use/dependences on Double32_t and if we decide that adding the default is the right long term solution or not. Whether it is or not depend on the I/O on whether the default template argument might change or not and whether they (should) affect the on disk layout (for STL containers, we do know they do not). ; Definition at line 2892 of file TClingUtils.cxx. ◆ BeginsWith(). bool ROOT::TMetaUtils::BeginsWith ; (; const std::string & ; theString, . const std::string & ; theSubstring . ). Definition at line 5135 of file TClingUtils.cxx. ◆ CheckConstructor(). ROOT::TMetaUtils::EIOCtorCategory ROOT::TMetaUtils::CheckConstructor ; (; const clang::CXXRecordDecl * ; cl, . const RConstructorType & ; ioctortype, . const cling::Interpreter & ; interp . ). Check if class has constructor of provided type - either default or with single argument. ; Definition at line 1119 of file TClingUtils.cxx. ◆ CheckDefaultCons",MatchSource.WIKI,doc/master/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:1651,Security,access,accessible,1651,"TNormalizedCtxt &normCtxt, std::ostream &dictStream, bool isAutoStreamer);  ; typedef std::list< RConstructorType > RConstructorTypes;  . Enumerations; enum  DataMemberInfo__ValidArrayIndex_error_code { ;   VALID; , NOT_INT; , NOT_DEF; , IS_PRIVATE; , ;   UNKNOWN. };  ; enum class  EIOCtorCategory : short { kAbsent; , kDefault; , kIOPtrType; , kIORefType; };  . Functions; clang::QualType AddDefaultParameters (clang::QualType instanceType, const cling::Interpreter &interpret, const TNormalizedCtxt &normCtxt);  Add any unspecified template parameters to the class template instance, mentioned anywhere in the type. ;  ; bool BeginsWith (const std::string &theString, const std::string &theSubstring);  ; EIOCtorCategory CheckConstructor (const clang::CXXRecordDecl *, const RConstructorType &, const cling::Interpreter &interp);  Check if class has constructor of provided type - either default or with single argument. ;  ; bool CheckDefaultConstructor (const clang::CXXRecordDecl *, const cling::Interpreter &interp);  Checks if default constructor exists and accessible. ;  ; EIOCtorCategory CheckIOConstructor (const clang::CXXRecordDecl *, const char *, const clang::CXXRecordDecl *, const cling::Interpreter &interp);  Checks IO constructor - must be public and with specified argument. ;  ; bool CheckPublicFuncWithProto (clang::CXXRecordDecl const *, char const *, char const *, const cling::Interpreter &, bool diagnose);  Return true, if the function (defined by the name and prototype) exists and is public. ;  ; const clang::FunctionDecl * ClassInfo__HasMethod (const clang::DeclContext *cl, char const *, const cling::Interpreter &interp);  ; llvm::StringRef DataMemberInfo__ValidArrayIndex (const cling::Interpreter &interp, const clang::DeclaratorDecl &m, int *errnum=nullptr, llvm::StringRef *errstr=nullptr);  ValidArrayIndex return a static string (so use it or copy it immediatly, do not call GrabIndex twice in the same expression) containing the size of the array data member",MatchSource.WIKI,doc/master/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:21150,Security,access,accessible,21150,"ight long term solution or not. Whether it is or not depend on the I/O on whether the default template argument might change or not and whether they (should) affect the on disk layout (for STL containers, we do know they do not). ; Definition at line 2892 of file TClingUtils.cxx. ◆ BeginsWith(). bool ROOT::TMetaUtils::BeginsWith ; (; const std::string & ; theString, . const std::string & ; theSubstring . ). Definition at line 5135 of file TClingUtils.cxx. ◆ CheckConstructor(). ROOT::TMetaUtils::EIOCtorCategory ROOT::TMetaUtils::CheckConstructor ; (; const clang::CXXRecordDecl * ; cl, . const RConstructorType & ; ioctortype, . const cling::Interpreter & ; interp . ). Check if class has constructor of provided type - either default or with single argument. ; Definition at line 1119 of file TClingUtils.cxx. ◆ CheckDefaultConstructor(). bool ROOT::TMetaUtils::CheckDefaultConstructor ; (; const clang::CXXRecordDecl * ; cl, . const cling::Interpreter & ; interp . ). Checks if default constructor exists and accessible. ; Definition at line 1039 of file TClingUtils.cxx. ◆ CheckIOConstructor(). ROOT::TMetaUtils::EIOCtorCategory ROOT::TMetaUtils::CheckIOConstructor ; (; const clang::CXXRecordDecl * ; cl, . const char * ; typeOfArg, . const clang::CXXRecordDecl * ; expectedArgType, . const cling::Interpreter & ; interp . ). Checks IO constructor - must be public and with specified argument. ; Definition at line 1059 of file TClingUtils.cxx. ◆ CheckPublicFuncWithProto(). bool ROOT::TMetaUtils::CheckPublicFuncWithProto ; (; clang::CXXRecordDecl const * ; cl, . char const * ; methodname, . char const * ; proto, . const cling::Interpreter & ; interp, . bool ; diagnose . ). Return true, if the function (defined by the name and prototype) exists and is public. ; Definition at line 1242 of file TClingUtils.cxx. ◆ ClassInfo__HasMethod(). const clang::FunctionDecl * ROOT::TMetaUtils::ClassInfo__HasMethod ; (; const clang::DeclContext * ; cl, . char const * ; name, . const cling::Interpr",MatchSource.WIKI,doc/master/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:19937,Testability,test,test,19937,"at line 344 of file TClingUtils.h. Enumeration Type Documentation. ◆ DataMemberInfo__ValidArrayIndex_error_code. enum ROOT::TMetaUtils::DataMemberInfo__ValidArrayIndex_error_code. EnumeratorVALID ; NOT_INT ; NOT_DEF ; IS_PRIVATE ; UNKNOWN . Definition at line 118 of file TClingUtils.h. ◆ EIOCtorCategory. enum class ROOT::TMetaUtils::EIOCtorCategory : short. strong . EnumeratorkAbsent ; kDefault ; kIOPtrType ; kIORefType . Definition at line 382 of file TClingUtils.h. Function Documentation. ◆ AddDefaultParameters(). clang::QualType ROOT::TMetaUtils::AddDefaultParameters ; (; clang::QualType ; instanceType, . const cling::Interpreter & ; interpreter, . const TNormalizedCtxt & ; normCtxt . ). Add any unspecified template parameters to the class template instance, mentioned anywhere in the type. ; Note: this does not strip any typedef but could be merged with cling::utils::Transform::GetPartiallyDesugaredType if we can safely replace TClassEdit::IsStd with a test on the declaring scope and if we can resolve the fact that the added parameter do not take into account possible use/dependences on Double32_t and if we decide that adding the default is the right long term solution or not. Whether it is or not depend on the I/O on whether the default template argument might change or not and whether they (should) affect the on disk layout (for STL containers, we do know they do not). ; Definition at line 2892 of file TClingUtils.cxx. ◆ BeginsWith(). bool ROOT::TMetaUtils::BeginsWith ; (; const std::string & ; theString, . const std::string & ; theSubstring . ). Definition at line 5135 of file TClingUtils.cxx. ◆ CheckConstructor(). ROOT::TMetaUtils::EIOCtorCategory ROOT::TMetaUtils::CheckConstructor ; (; const clang::CXXRecordDecl * ; cl, . const RConstructorType & ; ioctortype, . const cling::Interpreter & ; interp . ). Check if class has constructor of provided type - either default or with single argument. ; Definition at line 1119 of file TClingUtils.cxx. ◆ CheckDefaultCons",MatchSource.WIKI,doc/master/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/master/namespaceROOT_1_1TreeUtils.html:617,Usability,simpl,simple,617,". ROOT: ROOT::TreeUtils Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions ; ROOT::TreeUtils Namespace Reference. Classes; struct  InvalidTupleType;  ; struct  InvalidTupleType< TNtuple >;  ; struct  InvalidTupleType< TNtupleD >;  ; struct  RFriendInfo;  Information about friend trees of a certain TTree or TChain object. More...;  . Functions; template<class DataType , class Tuple > ; Long64_t FillNtupleFromStream (std::istream &inputStream, Tuple &tuple, char delimiter, bool strictMode);  Function to fill tuples (TNtuple/TNtupleD) from a simple ASCII data file. ;  ; template Long64_t FillNtupleFromStream< Double_t, TNtupleD > (std::istream &, TNtupleD &, char, bool);  ; template Long64_t FillNtupleFromStream< Float_t, TNtuple > (std::istream &, TNtuple &, char, bool);  ; bool NextCharacterIsEOL (std::istream &input);  Either '\r' | '\n' or eof of some problem. ;  ; void SkipComment (std::istream &input);  Skips everything from '#' to (including) '\r' or '\n'. ;  ; void SkipEmptyLines (std::istream &input);  Skips empty lines (newline-characters), ws-lines (consisting only of whitespace characters + newline-characters). ;  ; void SkipWSCharacters (std::istream &input);  Skip whitespace characters, but not newline-characters we support ('\r' or '\n'). ;  . Function Documentation. ◆ FillNtupleFromStream(). template<class DataType , class Tuple > . Long64_t ROOT::TreeUtils::FillNtupleFromStream ; (; std::istream & ; inputStream, . Tuple & ; tuple, . char ; delimiter, . bool ; strictMode . ). Function to fill tuples (TNtuple/TNtupleD) from a simple ASCII data file. ; With auto and decltype - we can get rid of DataType parameter :) (or with a simple typedef inside ntuple class). An input file consists of non-empty lines (separated by newline-characters), possibly empty lines, and comments (treated as empty lines). Each non-empty line should contain N numbers - entry for a tuple. Non-strict mode lets y",MatchSource.WIKI,doc/master/namespaceROOT_1_1TreeUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TreeUtils.html
https://root.cern/doc/master/namespaceROOT_1_1TreeUtils.html:1636,Usability,simpl,simple,1636,"e ASCII data file. ;  ; template Long64_t FillNtupleFromStream< Double_t, TNtupleD > (std::istream &, TNtupleD &, char, bool);  ; template Long64_t FillNtupleFromStream< Float_t, TNtuple > (std::istream &, TNtuple &, char, bool);  ; bool NextCharacterIsEOL (std::istream &input);  Either '\r' | '\n' or eof of some problem. ;  ; void SkipComment (std::istream &input);  Skips everything from '#' to (including) '\r' or '\n'. ;  ; void SkipEmptyLines (std::istream &input);  Skips empty lines (newline-characters), ws-lines (consisting only of whitespace characters + newline-characters). ;  ; void SkipWSCharacters (std::istream &input);  Skip whitespace characters, but not newline-characters we support ('\r' or '\n'). ;  . Function Documentation. ◆ FillNtupleFromStream(). template<class DataType , class Tuple > . Long64_t ROOT::TreeUtils::FillNtupleFromStream ; (; std::istream & ; inputStream, . Tuple & ; tuple, . char ; delimiter, . bool ; strictMode . ). Function to fill tuples (TNtuple/TNtupleD) from a simple ASCII data file. ; With auto and decltype - we can get rid of DataType parameter :) (or with a simple typedef inside ntuple class). An input file consists of non-empty lines (separated by newline-characters), possibly empty lines, and comments (treated as empty lines). Each non-empty line should contain N numbers - entry for a tuple. Non-strict mode lets you to have newline-characters inside a tuple's row (as it worked in ROOT prior to v5.3xxx). ; Definition at line 80 of file TreeUtils.cxx. ◆ FillNtupleFromStream< Double_t, TNtupleD >(). template Long64_t ROOT::TreeUtils::FillNtupleFromStream< Double_t, TNtupleD > ; (; std::istream & ; , . TNtupleD & ; , . char ; , . bool ;  . ). ◆ FillNtupleFromStream< Float_t, TNtuple >(). template Long64_t ROOT::TreeUtils::FillNtupleFromStream< Float_t, TNtuple > ; (; std::istream & ; , . TNtuple & ; , . char ; , . bool ;  . ). ◆ NextCharacterIsEOL(). bool ROOT::TreeUtils::NextCharacterIsEOL ; (; std::istream & ; input). Either",MatchSource.WIKI,doc/master/namespaceROOT_1_1TreeUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TreeUtils.html
https://root.cern/doc/master/namespaceROOT_1_1TreeUtils.html:1738,Usability,simpl,simple,1738,"ream &, TNtupleD &, char, bool);  ; template Long64_t FillNtupleFromStream< Float_t, TNtuple > (std::istream &, TNtuple &, char, bool);  ; bool NextCharacterIsEOL (std::istream &input);  Either '\r' | '\n' or eof of some problem. ;  ; void SkipComment (std::istream &input);  Skips everything from '#' to (including) '\r' or '\n'. ;  ; void SkipEmptyLines (std::istream &input);  Skips empty lines (newline-characters), ws-lines (consisting only of whitespace characters + newline-characters). ;  ; void SkipWSCharacters (std::istream &input);  Skip whitespace characters, but not newline-characters we support ('\r' or '\n'). ;  . Function Documentation. ◆ FillNtupleFromStream(). template<class DataType , class Tuple > . Long64_t ROOT::TreeUtils::FillNtupleFromStream ; (; std::istream & ; inputStream, . Tuple & ; tuple, . char ; delimiter, . bool ; strictMode . ). Function to fill tuples (TNtuple/TNtupleD) from a simple ASCII data file. ; With auto and decltype - we can get rid of DataType parameter :) (or with a simple typedef inside ntuple class). An input file consists of non-empty lines (separated by newline-characters), possibly empty lines, and comments (treated as empty lines). Each non-empty line should contain N numbers - entry for a tuple. Non-strict mode lets you to have newline-characters inside a tuple's row (as it worked in ROOT prior to v5.3xxx). ; Definition at line 80 of file TreeUtils.cxx. ◆ FillNtupleFromStream< Double_t, TNtupleD >(). template Long64_t ROOT::TreeUtils::FillNtupleFromStream< Double_t, TNtupleD > ; (; std::istream & ; , . TNtupleD & ; , . char ; , . bool ;  . ). ◆ FillNtupleFromStream< Float_t, TNtuple >(). template Long64_t ROOT::TreeUtils::FillNtupleFromStream< Float_t, TNtuple > ; (; std::istream & ; , . TNtuple & ; , . char ; , . bool ;  . ). ◆ NextCharacterIsEOL(). bool ROOT::TreeUtils::NextCharacterIsEOL ; (; std::istream & ; input). Either '\r' | '\n' or eof of some problem. ; Definition at line 298 of file TreeUtils.cxx. ◆ SkipComm",MatchSource.WIKI,doc/master/namespaceROOT_1_1TreeUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TreeUtils.html
https://root.cern/doc/master/namespaceROOT_1_1VecOps.html:22524,Testability,log,log,22524,"e<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > fmod (const T0 &x, const RVec< T1 > &v);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > fmod (const RVec< T0 > &v, const T1 &y);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > fmod (const RVec< T0 > &v0, const RVec< T1 > &v1);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > remainder (const T0 &x, const RVec< T1 > &v);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > remainder (const RVec< T0 > &v, const T1 &y);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > remainder (const RVec< T0 > &v0, const RVec< T1 > &v1);  ; template<typename T > ; RVec< PromoteType< T > > exp (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > exp2 (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > expm1 (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > log (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > log10 (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > log2 (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > log1p (const RVec< T > &v);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > pow (const T0 &x, const RVec< T1 > &v);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > pow (const RVec< T0 > &v, const T1 &y);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > pow (const RVec< T0 > &v0, const RVec< T1 > &v1);  ; template<typename T > ; RVec< PromoteType< T > > sqrt (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > cbrt (const RVec< T > &v);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > hypot (const T0 &x, const RVec< T1 > &v);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > hypot (const RVec< T0 > &v, const T1 &y); ",MatchSource.WIKI,doc/master/namespaceROOT_1_1VecOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1VecOps.html
https://root.cern/doc/master/namespaceTClassEdit.html:1600,Availability,redundant,redundant,1600,";   kInnerClass = 1<<3; , kInnedMostClass = 1<<4; , kDropStlDefault = 1<<5; , kDropComparator = 1<<6; , ;   kDropAllDefault = 1<<7; , kLong64 = 1<<8; , kDropStd = 1<<9; , kKeepOuterConst = 1<<10; , ;   kResolveTypedef = 1<<11; , kDropPredicate = 1<<12; , kDropHash = 1<<13. };  ; enum  ESTLType { ;   kNotSTL = ROOT::kNotSTL; , kVector = ROOT::kSTLvector; , kList = ROOT::kSTLlist; , kForwardlist = ROOT::kSTLforwardlist; , ;   kDeque = ROOT::kSTLdeque; , kMap = ROOT::kSTLmap; , kMultiMap = ROOT::kSTLmultimap; , kSet = ROOT::kSTLset; , ;   kMultiSet = ROOT::kSTLmultiset; , kUnorderedSet = ROOT::kSTLunorderedset; , kUnorderedMultiSet = ROOT::kSTLunorderedmultiset; , kUnorderedMap = ROOT::kSTLunorderedmap; , ;   kUnorderedMultiMap = ROOT::kSTLunorderedmultimap; , kBitSet = ROOT::kSTLbitset; , kEnd = ROOT::kSTLend. };  . Functions; std::string CleanType (const char *typeDesc, int mode=0, const char **tail=nullptr);  Cleanup type description, redundant blanks removed and redundant tail ignored return *tail = pointer to last used character if (mode==0) keep keywords if (mode==1) remove keywords outside the template params if (mode>=2) remove the keywords everywhere. ;  ; char * DemangleName (const char *mangled_name, int &errorCode);  ; char * DemangleTypeIdName (const std::type_info &ti, int &errorCode);  Demangle in a portable way the type id name. ;  ; EComplexType GetComplexType (const char *);  ; std::string GetLong64_Name (const char *original);  Replace 'long long' and 'unsigned long long' by 'Long64_t' and 'ULong64_t'. ;  ; std::string GetLong64_Name (const std::string &original);  Replace 'long long' and 'unsigned long long' by 'Long64_t' and 'ULong64_t'. ;  ; std::string GetNameForIO (const std::string &templateInstanceName, TClassEdit::EModType mode=TClassEdit::kNone, bool *hasChanged=nullptr);  ; void GetNormalizedName (std::string &norm_name, std::string_view name);  Return the normalized name. ;  ; int GetSplit (const char *type, std::vector< std::string > &out",MatchSource.WIKI,doc/master/namespaceTClassEdit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTClassEdit.html
https://root.cern/doc/master/namespaceTClassEdit.html:1629,Availability,redundant,redundant,1629,";   kInnerClass = 1<<3; , kInnedMostClass = 1<<4; , kDropStlDefault = 1<<5; , kDropComparator = 1<<6; , ;   kDropAllDefault = 1<<7; , kLong64 = 1<<8; , kDropStd = 1<<9; , kKeepOuterConst = 1<<10; , ;   kResolveTypedef = 1<<11; , kDropPredicate = 1<<12; , kDropHash = 1<<13. };  ; enum  ESTLType { ;   kNotSTL = ROOT::kNotSTL; , kVector = ROOT::kSTLvector; , kList = ROOT::kSTLlist; , kForwardlist = ROOT::kSTLforwardlist; , ;   kDeque = ROOT::kSTLdeque; , kMap = ROOT::kSTLmap; , kMultiMap = ROOT::kSTLmultimap; , kSet = ROOT::kSTLset; , ;   kMultiSet = ROOT::kSTLmultiset; , kUnorderedSet = ROOT::kSTLunorderedset; , kUnorderedMultiSet = ROOT::kSTLunorderedmultiset; , kUnorderedMap = ROOT::kSTLunorderedmap; , ;   kUnorderedMultiMap = ROOT::kSTLunorderedmultimap; , kBitSet = ROOT::kSTLbitset; , kEnd = ROOT::kSTLend. };  . Functions; std::string CleanType (const char *typeDesc, int mode=0, const char **tail=nullptr);  Cleanup type description, redundant blanks removed and redundant tail ignored return *tail = pointer to last used character if (mode==0) keep keywords if (mode==1) remove keywords outside the template params if (mode>=2) remove the keywords everywhere. ;  ; char * DemangleName (const char *mangled_name, int &errorCode);  ; char * DemangleTypeIdName (const std::type_info &ti, int &errorCode);  Demangle in a portable way the type id name. ;  ; EComplexType GetComplexType (const char *);  ; std::string GetLong64_Name (const char *original);  Replace 'long long' and 'unsigned long long' by 'Long64_t' and 'ULong64_t'. ;  ; std::string GetLong64_Name (const std::string &original);  Replace 'long long' and 'unsigned long long' by 'Long64_t' and 'ULong64_t'. ;  ; std::string GetNameForIO (const std::string &templateInstanceName, TClassEdit::EModType mode=TClassEdit::kNone, bool *hasChanged=nullptr);  ; void GetNormalizedName (std::string &norm_name, std::string_view name);  Return the normalized name. ;  ; int GetSplit (const char *type, std::vector< std::string > &out",MatchSource.WIKI,doc/master/namespaceTClassEdit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTClassEdit.html
https://root.cern/doc/master/namespaceTClassEdit.html:1884,Availability,error,errorCode,1884,"<13. };  ; enum  ESTLType { ;   kNotSTL = ROOT::kNotSTL; , kVector = ROOT::kSTLvector; , kList = ROOT::kSTLlist; , kForwardlist = ROOT::kSTLforwardlist; , ;   kDeque = ROOT::kSTLdeque; , kMap = ROOT::kSTLmap; , kMultiMap = ROOT::kSTLmultimap; , kSet = ROOT::kSTLset; , ;   kMultiSet = ROOT::kSTLmultiset; , kUnorderedSet = ROOT::kSTLunorderedset; , kUnorderedMultiSet = ROOT::kSTLunorderedmultiset; , kUnorderedMap = ROOT::kSTLunorderedmap; , ;   kUnorderedMultiMap = ROOT::kSTLunorderedmultimap; , kBitSet = ROOT::kSTLbitset; , kEnd = ROOT::kSTLend. };  . Functions; std::string CleanType (const char *typeDesc, int mode=0, const char **tail=nullptr);  Cleanup type description, redundant blanks removed and redundant tail ignored return *tail = pointer to last used character if (mode==0) keep keywords if (mode==1) remove keywords outside the template params if (mode>=2) remove the keywords everywhere. ;  ; char * DemangleName (const char *mangled_name, int &errorCode);  ; char * DemangleTypeIdName (const std::type_info &ti, int &errorCode);  Demangle in a portable way the type id name. ;  ; EComplexType GetComplexType (const char *);  ; std::string GetLong64_Name (const char *original);  Replace 'long long' and 'unsigned long long' by 'Long64_t' and 'ULong64_t'. ;  ; std::string GetLong64_Name (const std::string &original);  Replace 'long long' and 'unsigned long long' by 'Long64_t' and 'ULong64_t'. ;  ; std::string GetNameForIO (const std::string &templateInstanceName, TClassEdit::EModType mode=TClassEdit::kNone, bool *hasChanged=nullptr);  ; void GetNormalizedName (std::string &norm_name, std::string_view name);  Return the normalized name. ;  ; int GetSplit (const char *type, std::vector< std::string > &output, int &nestedLoc, EModType mode=TClassEdit::kNone);  Stores in output (after emptying it) the split type. ;  ; bool GetStdArrayProperties (const char *typeName, std::string &typeNameBuf, std::array< int, 5 > &maxIndices, int &ndim);  ; std::string GetUniquePtrType (",MatchSource.WIKI,doc/master/namespaceTClassEdit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTClassEdit.html
https://root.cern/doc/master/namespaceTClassEdit.html:1957,Availability,error,errorCode,1957,"<13. };  ; enum  ESTLType { ;   kNotSTL = ROOT::kNotSTL; , kVector = ROOT::kSTLvector; , kList = ROOT::kSTLlist; , kForwardlist = ROOT::kSTLforwardlist; , ;   kDeque = ROOT::kSTLdeque; , kMap = ROOT::kSTLmap; , kMultiMap = ROOT::kSTLmultimap; , kSet = ROOT::kSTLset; , ;   kMultiSet = ROOT::kSTLmultiset; , kUnorderedSet = ROOT::kSTLunorderedset; , kUnorderedMultiSet = ROOT::kSTLunorderedmultiset; , kUnorderedMap = ROOT::kSTLunorderedmap; , ;   kUnorderedMultiMap = ROOT::kSTLunorderedmultimap; , kBitSet = ROOT::kSTLbitset; , kEnd = ROOT::kSTLend. };  . Functions; std::string CleanType (const char *typeDesc, int mode=0, const char **tail=nullptr);  Cleanup type description, redundant blanks removed and redundant tail ignored return *tail = pointer to last used character if (mode==0) keep keywords if (mode==1) remove keywords outside the template params if (mode>=2) remove the keywords everywhere. ;  ; char * DemangleName (const char *mangled_name, int &errorCode);  ; char * DemangleTypeIdName (const std::type_info &ti, int &errorCode);  Demangle in a portable way the type id name. ;  ; EComplexType GetComplexType (const char *);  ; std::string GetLong64_Name (const char *original);  Replace 'long long' and 'unsigned long long' by 'Long64_t' and 'ULong64_t'. ;  ; std::string GetLong64_Name (const std::string &original);  Replace 'long long' and 'unsigned long long' by 'Long64_t' and 'ULong64_t'. ;  ; std::string GetNameForIO (const std::string &templateInstanceName, TClassEdit::EModType mode=TClassEdit::kNone, bool *hasChanged=nullptr);  ; void GetNormalizedName (std::string &norm_name, std::string_view name);  Return the normalized name. ;  ; int GetSplit (const char *type, std::vector< std::string > &output, int &nestedLoc, EModType mode=TClassEdit::kNone);  Stores in output (after emptying it) the split type. ;  ; bool GetStdArrayProperties (const char *typeName, std::string &typeNameBuf, std::array< int, 5 > &maxIndices, int &ndim);  ; std::string GetUniquePtrType (",MatchSource.WIKI,doc/master/namespaceTClassEdit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTClassEdit.html
https://root.cern/doc/master/namespaceTClassEdit.html:7017,Availability,redundant,redundant,7017,"plexType : short. strong . EnumeratorkNone ; kDouble ; kFloat ; kInt ; kLong . Definition at line 111 of file TClassEdit.h. ◆ EModType. enum TClassEdit::EModType. EnumeratorkNone ; kDropTrailStar ; kDropDefaultAlloc ; kDropAlloc ; kInnerClass ; kInnedMostClass ; kDropStlDefault ; kDropComparator ; kDropAllDefault ; kLong64 ; kDropStd ; kKeepOuterConst ; kResolveTypedef ; kDropPredicate ; kDropHash . Definition at line 75 of file TClassEdit.h. ◆ ESTLType. enum TClassEdit::ESTLType. EnumeratorkNotSTL ; kVector ; kList ; kForwardlist ; kDeque ; kMap ; kMultiMap ; kSet ; kMultiSet ; kUnorderedSet ; kUnorderedMultiSet ; kUnorderedMap ; kUnorderedMultiMap ; kBitSet ; kEnd . Definition at line 93 of file TClassEdit.h. Function Documentation. ◆ CleanType(). string TClassEdit::CleanType ; (; const char * ; typeDesc, . int ; mode = 0, . const char ** ; tail = nullptr . ). Cleanup type description, redundant blanks removed and redundant tail ignored return *tail = pointer to last used character if (mode==0) keep keywords if (mode==1) remove keywords outside the template params if (mode>=2) remove the keywords everywhere. ; if (tail!=0) cut before the trailing *; The keywords currently are: ""const"" , ""volatile"" removed; CleanType("" A<B, C< D, E> > *,F,G>"") returns ""A<B,C<D,E> >*"" ; Definition at line 1232 of file TClassEdit.cxx. ◆ DemangleName(). char * TClassEdit::DemangleName ; (; const char * ; mangled_name, . int & ; errorCode . ). inline . Definition at line 208 of file TClassEdit.h. ◆ DemangleTypeIdName(). char * TClassEdit::DemangleTypeIdName ; (; const std::type_info & ; ti, . int & ; errorCode . ). Demangle in a portable way the type id name. ; IMPORTANT: The caller is responsible for freeing the returned const char* ; Definition at line 2148 of file TClassEdit.cxx. ◆ GetComplexType(). TClassEdit::EComplexType TClassEdit::GetComplexType ; (; const char * ; clName). Definition at line 137 of file TClassEdit.cxx. ◆ GetLong64_Name() [1/2]. string TClassEdit::GetLong64_Name",MatchSource.WIKI,doc/master/namespaceTClassEdit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTClassEdit.html
https://root.cern/doc/master/namespaceTClassEdit.html:7046,Availability,redundant,redundant,7046,"plexType : short. strong . EnumeratorkNone ; kDouble ; kFloat ; kInt ; kLong . Definition at line 111 of file TClassEdit.h. ◆ EModType. enum TClassEdit::EModType. EnumeratorkNone ; kDropTrailStar ; kDropDefaultAlloc ; kDropAlloc ; kInnerClass ; kInnedMostClass ; kDropStlDefault ; kDropComparator ; kDropAllDefault ; kLong64 ; kDropStd ; kKeepOuterConst ; kResolveTypedef ; kDropPredicate ; kDropHash . Definition at line 75 of file TClassEdit.h. ◆ ESTLType. enum TClassEdit::ESTLType. EnumeratorkNotSTL ; kVector ; kList ; kForwardlist ; kDeque ; kMap ; kMultiMap ; kSet ; kMultiSet ; kUnorderedSet ; kUnorderedMultiSet ; kUnorderedMap ; kUnorderedMultiMap ; kBitSet ; kEnd . Definition at line 93 of file TClassEdit.h. Function Documentation. ◆ CleanType(). string TClassEdit::CleanType ; (; const char * ; typeDesc, . int ; mode = 0, . const char ** ; tail = nullptr . ). Cleanup type description, redundant blanks removed and redundant tail ignored return *tail = pointer to last used character if (mode==0) keep keywords if (mode==1) remove keywords outside the template params if (mode>=2) remove the keywords everywhere. ; if (tail!=0) cut before the trailing *; The keywords currently are: ""const"" , ""volatile"" removed; CleanType("" A<B, C< D, E> > *,F,G>"") returns ""A<B,C<D,E> >*"" ; Definition at line 1232 of file TClassEdit.cxx. ◆ DemangleName(). char * TClassEdit::DemangleName ; (; const char * ; mangled_name, . int & ; errorCode . ). inline . Definition at line 208 of file TClassEdit.h. ◆ DemangleTypeIdName(). char * TClassEdit::DemangleTypeIdName ; (; const std::type_info & ; ti, . int & ; errorCode . ). Demangle in a portable way the type id name. ; IMPORTANT: The caller is responsible for freeing the returned const char* ; Definition at line 2148 of file TClassEdit.cxx. ◆ GetComplexType(). TClassEdit::EComplexType TClassEdit::GetComplexType ; (; const char * ; clName). Definition at line 137 of file TClassEdit.cxx. ◆ GetLong64_Name() [1/2]. string TClassEdit::GetLong64_Name",MatchSource.WIKI,doc/master/namespaceTClassEdit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTClassEdit.html
https://root.cern/doc/master/namespaceTClassEdit.html:7549,Availability,error,errorCode,7549,"ClassEdit.h. ◆ ESTLType. enum TClassEdit::ESTLType. EnumeratorkNotSTL ; kVector ; kList ; kForwardlist ; kDeque ; kMap ; kMultiMap ; kSet ; kMultiSet ; kUnorderedSet ; kUnorderedMultiSet ; kUnorderedMap ; kUnorderedMultiMap ; kBitSet ; kEnd . Definition at line 93 of file TClassEdit.h. Function Documentation. ◆ CleanType(). string TClassEdit::CleanType ; (; const char * ; typeDesc, . int ; mode = 0, . const char ** ; tail = nullptr . ). Cleanup type description, redundant blanks removed and redundant tail ignored return *tail = pointer to last used character if (mode==0) keep keywords if (mode==1) remove keywords outside the template params if (mode>=2) remove the keywords everywhere. ; if (tail!=0) cut before the trailing *; The keywords currently are: ""const"" , ""volatile"" removed; CleanType("" A<B, C< D, E> > *,F,G>"") returns ""A<B,C<D,E> >*"" ; Definition at line 1232 of file TClassEdit.cxx. ◆ DemangleName(). char * TClassEdit::DemangleName ; (; const char * ; mangled_name, . int & ; errorCode . ). inline . Definition at line 208 of file TClassEdit.h. ◆ DemangleTypeIdName(). char * TClassEdit::DemangleTypeIdName ; (; const std::type_info & ; ti, . int & ; errorCode . ). Demangle in a portable way the type id name. ; IMPORTANT: The caller is responsible for freeing the returned const char* ; Definition at line 2148 of file TClassEdit.cxx. ◆ GetComplexType(). TClassEdit::EComplexType TClassEdit::GetComplexType ; (; const char * ; clName). Definition at line 137 of file TClassEdit.cxx. ◆ GetLong64_Name() [1/2]. string TClassEdit::GetLong64_Name ; (; const char * ; original). Replace 'long long' and 'unsigned long long' by 'Long64_t' and 'ULong64_t'. ; Definition at line 908 of file TClassEdit.cxx. ◆ GetLong64_Name() [2/2]. string TClassEdit::GetLong64_Name ; (; const std::string & ; original). Replace 'long long' and 'unsigned long long' by 'Long64_t' and 'ULong64_t'. ; Definition at line 919 of file TClassEdit.cxx. ◆ GetNameForIO(). std::string TClassEdit::GetNameForI",MatchSource.WIKI,doc/master/namespaceTClassEdit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTClassEdit.html
https://root.cern/doc/master/namespaceTClassEdit.html:7724,Availability,error,errorCode,7724,"redMultiSet ; kUnorderedMap ; kUnorderedMultiMap ; kBitSet ; kEnd . Definition at line 93 of file TClassEdit.h. Function Documentation. ◆ CleanType(). string TClassEdit::CleanType ; (; const char * ; typeDesc, . int ; mode = 0, . const char ** ; tail = nullptr . ). Cleanup type description, redundant blanks removed and redundant tail ignored return *tail = pointer to last used character if (mode==0) keep keywords if (mode==1) remove keywords outside the template params if (mode>=2) remove the keywords everywhere. ; if (tail!=0) cut before the trailing *; The keywords currently are: ""const"" , ""volatile"" removed; CleanType("" A<B, C< D, E> > *,F,G>"") returns ""A<B,C<D,E> >*"" ; Definition at line 1232 of file TClassEdit.cxx. ◆ DemangleName(). char * TClassEdit::DemangleName ; (; const char * ; mangled_name, . int & ; errorCode . ). inline . Definition at line 208 of file TClassEdit.h. ◆ DemangleTypeIdName(). char * TClassEdit::DemangleTypeIdName ; (; const std::type_info & ; ti, . int & ; errorCode . ). Demangle in a portable way the type id name. ; IMPORTANT: The caller is responsible for freeing the returned const char* ; Definition at line 2148 of file TClassEdit.cxx. ◆ GetComplexType(). TClassEdit::EComplexType TClassEdit::GetComplexType ; (; const char * ; clName). Definition at line 137 of file TClassEdit.cxx. ◆ GetLong64_Name() [1/2]. string TClassEdit::GetLong64_Name ; (; const char * ; original). Replace 'long long' and 'unsigned long long' by 'Long64_t' and 'ULong64_t'. ; Definition at line 908 of file TClassEdit.cxx. ◆ GetLong64_Name() [2/2]. string TClassEdit::GetLong64_Name ; (; const std::string & ; original). Replace 'long long' and 'unsigned long long' by 'Long64_t' and 'ULong64_t'. ; Definition at line 919 of file TClassEdit.cxx. ◆ GetNameForIO(). std::string TClassEdit::GetNameForIO ; (; const std::string & ; templateInstanceName, . TClassEdit::EModType ; mode = TClassEdit::kNone, . bool * ; hasChanged = nullptr . ). Definition at line 2095 of file TCla",MatchSource.WIKI,doc/master/namespaceTClassEdit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTClassEdit.html
https://root.cern/doc/master/namespaceTClassEdit.html:9129,Integrability,rout,routines,9129," ; original). Replace 'long long' and 'unsigned long long' by 'Long64_t' and 'ULong64_t'. ; Definition at line 908 of file TClassEdit.cxx. ◆ GetLong64_Name() [2/2]. string TClassEdit::GetLong64_Name ; (; const std::string & ; original). Replace 'long long' and 'unsigned long long' by 'Long64_t' and 'ULong64_t'. ; Definition at line 919 of file TClassEdit.cxx. ◆ GetNameForIO(). std::string TClassEdit::GetNameForIO ; (; const std::string & ; templateInstanceName, . TClassEdit::EModType ; mode = TClassEdit::kNone, . bool * ; hasChanged = nullptr . ). Definition at line 2095 of file TClassEdit.cxx. ◆ GetNormalizedName(). void TClassEdit::GetNormalizedName ; (; std::string & ; norm_name, . std::string_view ; name . ). Return the normalized name. ; See TMetaUtils::GetNormalizedName.; Return the type name normalized for ROOT, keeping only the ROOT opaque typedef (Double32_t, etc.) and removing the STL collections default parameter if any.; Compare to TMetaUtils::GetNormalizedName, this routines does not and can not add default template parameters. ; Definition at line 854 of file TClassEdit.cxx. ◆ GetSplit(). int TClassEdit::GetSplit ; (; const char * ; type, . std::vector< std::string > & ; output, . int & ; nestedLoc, . EModType ; mode = TClassEdit::kNone . ). Stores in output (after emptying it) the split type. ; Stores the location of the tail (nested names) in nestedLoc (0 indicates no tail). Return the number of elements stored.; First in list is the template name or is empty ""vector<list<int>,alloc>**"" to ""vector"" ""list<int>"" ""alloc"" ""**"" or ""TNamed*"" to """" ""TNamed"" ""*"" ; Definition at line 1029 of file TClassEdit.cxx. ◆ GetStdArrayProperties(). bool TClassEdit::GetStdArrayProperties ; (; const char * ; typeName, . std::string & ; typeNameBuf, . std::array< int, 5 > & ; maxIndices, . int & ; ndim . ). Definition at line 2117 of file TClassEdit.cxx. ◆ GetUniquePtrType(). std::string TClassEdit::GetUniquePtrType ; (; std::string_view ; name). inline . Definition at lin",MatchSource.WIKI,doc/master/namespaceTClassEdit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTClassEdit.html
https://root.cern/doc/master/namespaceTClassEdit.html:1984,Modifiability,portab,portable,1984,"<13. };  ; enum  ESTLType { ;   kNotSTL = ROOT::kNotSTL; , kVector = ROOT::kSTLvector; , kList = ROOT::kSTLlist; , kForwardlist = ROOT::kSTLforwardlist; , ;   kDeque = ROOT::kSTLdeque; , kMap = ROOT::kSTLmap; , kMultiMap = ROOT::kSTLmultimap; , kSet = ROOT::kSTLset; , ;   kMultiSet = ROOT::kSTLmultiset; , kUnorderedSet = ROOT::kSTLunorderedset; , kUnorderedMultiSet = ROOT::kSTLunorderedmultiset; , kUnorderedMap = ROOT::kSTLunorderedmap; , ;   kUnorderedMultiMap = ROOT::kSTLunorderedmultimap; , kBitSet = ROOT::kSTLbitset; , kEnd = ROOT::kSTLend. };  . Functions; std::string CleanType (const char *typeDesc, int mode=0, const char **tail=nullptr);  Cleanup type description, redundant blanks removed and redundant tail ignored return *tail = pointer to last used character if (mode==0) keep keywords if (mode==1) remove keywords outside the template params if (mode>=2) remove the keywords everywhere. ;  ; char * DemangleName (const char *mangled_name, int &errorCode);  ; char * DemangleTypeIdName (const std::type_info &ti, int &errorCode);  Demangle in a portable way the type id name. ;  ; EComplexType GetComplexType (const char *);  ; std::string GetLong64_Name (const char *original);  Replace 'long long' and 'unsigned long long' by 'Long64_t' and 'ULong64_t'. ;  ; std::string GetLong64_Name (const std::string &original);  Replace 'long long' and 'unsigned long long' by 'Long64_t' and 'ULong64_t'. ;  ; std::string GetNameForIO (const std::string &templateInstanceName, TClassEdit::EModType mode=TClassEdit::kNone, bool *hasChanged=nullptr);  ; void GetNormalizedName (std::string &norm_name, std::string_view name);  Return the normalized name. ;  ; int GetSplit (const char *type, std::vector< std::string > &output, int &nestedLoc, EModType mode=TClassEdit::kNone);  Stores in output (after emptying it) the split type. ;  ; bool GetStdArrayProperties (const char *typeName, std::string &typeNameBuf, std::array< int, 5 > &maxIndices, int &ndim);  ; std::string GetUniquePtrType (",MatchSource.WIKI,doc/master/namespaceTClassEdit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTClassEdit.html
https://root.cern/doc/master/namespaceTClassEdit.html:7753,Modifiability,portab,portable,7753,"deredMultiMap ; kBitSet ; kEnd . Definition at line 93 of file TClassEdit.h. Function Documentation. ◆ CleanType(). string TClassEdit::CleanType ; (; const char * ; typeDesc, . int ; mode = 0, . const char ** ; tail = nullptr . ). Cleanup type description, redundant blanks removed and redundant tail ignored return *tail = pointer to last used character if (mode==0) keep keywords if (mode==1) remove keywords outside the template params if (mode>=2) remove the keywords everywhere. ; if (tail!=0) cut before the trailing *; The keywords currently are: ""const"" , ""volatile"" removed; CleanType("" A<B, C< D, E> > *,F,G>"") returns ""A<B,C<D,E> >*"" ; Definition at line 1232 of file TClassEdit.cxx. ◆ DemangleName(). char * TClassEdit::DemangleName ; (; const char * ; mangled_name, . int & ; errorCode . ). inline . Definition at line 208 of file TClassEdit.h. ◆ DemangleTypeIdName(). char * TClassEdit::DemangleTypeIdName ; (; const std::type_info & ; ti, . int & ; errorCode . ). Demangle in a portable way the type id name. ; IMPORTANT: The caller is responsible for freeing the returned const char* ; Definition at line 2148 of file TClassEdit.cxx. ◆ GetComplexType(). TClassEdit::EComplexType TClassEdit::GetComplexType ; (; const char * ; clName). Definition at line 137 of file TClassEdit.cxx. ◆ GetLong64_Name() [1/2]. string TClassEdit::GetLong64_Name ; (; const char * ; original). Replace 'long long' and 'unsigned long long' by 'Long64_t' and 'ULong64_t'. ; Definition at line 908 of file TClassEdit.cxx. ◆ GetLong64_Name() [2/2]. string TClassEdit::GetLong64_Name ; (; const std::string & ; original). Replace 'long long' and 'unsigned long long' by 'Long64_t' and 'ULong64_t'. ; Definition at line 919 of file TClassEdit.cxx. ◆ GetNameForIO(). std::string TClassEdit::GetNameForIO ; (; const std::string & ; templateInstanceName, . TClassEdit::EModType ; mode = TClassEdit::kNone, . bool * ; hasChanged = nullptr . ). Definition at line 2095 of file TClassEdit.cxx. ◆ GetNormalizedName(). v",MatchSource.WIKI,doc/master/namespaceTClassEdit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTClassEdit.html
https://root.cern/doc/master/namespaceTClassEdit.html:1600,Safety,redund,redundant,1600,";   kInnerClass = 1<<3; , kInnedMostClass = 1<<4; , kDropStlDefault = 1<<5; , kDropComparator = 1<<6; , ;   kDropAllDefault = 1<<7; , kLong64 = 1<<8; , kDropStd = 1<<9; , kKeepOuterConst = 1<<10; , ;   kResolveTypedef = 1<<11; , kDropPredicate = 1<<12; , kDropHash = 1<<13. };  ; enum  ESTLType { ;   kNotSTL = ROOT::kNotSTL; , kVector = ROOT::kSTLvector; , kList = ROOT::kSTLlist; , kForwardlist = ROOT::kSTLforwardlist; , ;   kDeque = ROOT::kSTLdeque; , kMap = ROOT::kSTLmap; , kMultiMap = ROOT::kSTLmultimap; , kSet = ROOT::kSTLset; , ;   kMultiSet = ROOT::kSTLmultiset; , kUnorderedSet = ROOT::kSTLunorderedset; , kUnorderedMultiSet = ROOT::kSTLunorderedmultiset; , kUnorderedMap = ROOT::kSTLunorderedmap; , ;   kUnorderedMultiMap = ROOT::kSTLunorderedmultimap; , kBitSet = ROOT::kSTLbitset; , kEnd = ROOT::kSTLend. };  . Functions; std::string CleanType (const char *typeDesc, int mode=0, const char **tail=nullptr);  Cleanup type description, redundant blanks removed and redundant tail ignored return *tail = pointer to last used character if (mode==0) keep keywords if (mode==1) remove keywords outside the template params if (mode>=2) remove the keywords everywhere. ;  ; char * DemangleName (const char *mangled_name, int &errorCode);  ; char * DemangleTypeIdName (const std::type_info &ti, int &errorCode);  Demangle in a portable way the type id name. ;  ; EComplexType GetComplexType (const char *);  ; std::string GetLong64_Name (const char *original);  Replace 'long long' and 'unsigned long long' by 'Long64_t' and 'ULong64_t'. ;  ; std::string GetLong64_Name (const std::string &original);  Replace 'long long' and 'unsigned long long' by 'Long64_t' and 'ULong64_t'. ;  ; std::string GetNameForIO (const std::string &templateInstanceName, TClassEdit::EModType mode=TClassEdit::kNone, bool *hasChanged=nullptr);  ; void GetNormalizedName (std::string &norm_name, std::string_view name);  Return the normalized name. ;  ; int GetSplit (const char *type, std::vector< std::string > &out",MatchSource.WIKI,doc/master/namespaceTClassEdit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTClassEdit.html
https://root.cern/doc/master/namespaceTClassEdit.html:1629,Safety,redund,redundant,1629,";   kInnerClass = 1<<3; , kInnedMostClass = 1<<4; , kDropStlDefault = 1<<5; , kDropComparator = 1<<6; , ;   kDropAllDefault = 1<<7; , kLong64 = 1<<8; , kDropStd = 1<<9; , kKeepOuterConst = 1<<10; , ;   kResolveTypedef = 1<<11; , kDropPredicate = 1<<12; , kDropHash = 1<<13. };  ; enum  ESTLType { ;   kNotSTL = ROOT::kNotSTL; , kVector = ROOT::kSTLvector; , kList = ROOT::kSTLlist; , kForwardlist = ROOT::kSTLforwardlist; , ;   kDeque = ROOT::kSTLdeque; , kMap = ROOT::kSTLmap; , kMultiMap = ROOT::kSTLmultimap; , kSet = ROOT::kSTLset; , ;   kMultiSet = ROOT::kSTLmultiset; , kUnorderedSet = ROOT::kSTLunorderedset; , kUnorderedMultiSet = ROOT::kSTLunorderedmultiset; , kUnorderedMap = ROOT::kSTLunorderedmap; , ;   kUnorderedMultiMap = ROOT::kSTLunorderedmultimap; , kBitSet = ROOT::kSTLbitset; , kEnd = ROOT::kSTLend. };  . Functions; std::string CleanType (const char *typeDesc, int mode=0, const char **tail=nullptr);  Cleanup type description, redundant blanks removed and redundant tail ignored return *tail = pointer to last used character if (mode==0) keep keywords if (mode==1) remove keywords outside the template params if (mode>=2) remove the keywords everywhere. ;  ; char * DemangleName (const char *mangled_name, int &errorCode);  ; char * DemangleTypeIdName (const std::type_info &ti, int &errorCode);  Demangle in a portable way the type id name. ;  ; EComplexType GetComplexType (const char *);  ; std::string GetLong64_Name (const char *original);  Replace 'long long' and 'unsigned long long' by 'Long64_t' and 'ULong64_t'. ;  ; std::string GetLong64_Name (const std::string &original);  Replace 'long long' and 'unsigned long long' by 'Long64_t' and 'ULong64_t'. ;  ; std::string GetNameForIO (const std::string &templateInstanceName, TClassEdit::EModType mode=TClassEdit::kNone, bool *hasChanged=nullptr);  ; void GetNormalizedName (std::string &norm_name, std::string_view name);  Return the normalized name. ;  ; int GetSplit (const char *type, std::vector< std::string > &out",MatchSource.WIKI,doc/master/namespaceTClassEdit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTClassEdit.html
https://root.cern/doc/master/namespaceTClassEdit.html:7017,Safety,redund,redundant,7017,"plexType : short. strong . EnumeratorkNone ; kDouble ; kFloat ; kInt ; kLong . Definition at line 111 of file TClassEdit.h. ◆ EModType. enum TClassEdit::EModType. EnumeratorkNone ; kDropTrailStar ; kDropDefaultAlloc ; kDropAlloc ; kInnerClass ; kInnedMostClass ; kDropStlDefault ; kDropComparator ; kDropAllDefault ; kLong64 ; kDropStd ; kKeepOuterConst ; kResolveTypedef ; kDropPredicate ; kDropHash . Definition at line 75 of file TClassEdit.h. ◆ ESTLType. enum TClassEdit::ESTLType. EnumeratorkNotSTL ; kVector ; kList ; kForwardlist ; kDeque ; kMap ; kMultiMap ; kSet ; kMultiSet ; kUnorderedSet ; kUnorderedMultiSet ; kUnorderedMap ; kUnorderedMultiMap ; kBitSet ; kEnd . Definition at line 93 of file TClassEdit.h. Function Documentation. ◆ CleanType(). string TClassEdit::CleanType ; (; const char * ; typeDesc, . int ; mode = 0, . const char ** ; tail = nullptr . ). Cleanup type description, redundant blanks removed and redundant tail ignored return *tail = pointer to last used character if (mode==0) keep keywords if (mode==1) remove keywords outside the template params if (mode>=2) remove the keywords everywhere. ; if (tail!=0) cut before the trailing *; The keywords currently are: ""const"" , ""volatile"" removed; CleanType("" A<B, C< D, E> > *,F,G>"") returns ""A<B,C<D,E> >*"" ; Definition at line 1232 of file TClassEdit.cxx. ◆ DemangleName(). char * TClassEdit::DemangleName ; (; const char * ; mangled_name, . int & ; errorCode . ). inline . Definition at line 208 of file TClassEdit.h. ◆ DemangleTypeIdName(). char * TClassEdit::DemangleTypeIdName ; (; const std::type_info & ; ti, . int & ; errorCode . ). Demangle in a portable way the type id name. ; IMPORTANT: The caller is responsible for freeing the returned const char* ; Definition at line 2148 of file TClassEdit.cxx. ◆ GetComplexType(). TClassEdit::EComplexType TClassEdit::GetComplexType ; (; const char * ; clName). Definition at line 137 of file TClassEdit.cxx. ◆ GetLong64_Name() [1/2]. string TClassEdit::GetLong64_Name",MatchSource.WIKI,doc/master/namespaceTClassEdit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTClassEdit.html
https://root.cern/doc/master/namespaceTClassEdit.html:7046,Safety,redund,redundant,7046,"plexType : short. strong . EnumeratorkNone ; kDouble ; kFloat ; kInt ; kLong . Definition at line 111 of file TClassEdit.h. ◆ EModType. enum TClassEdit::EModType. EnumeratorkNone ; kDropTrailStar ; kDropDefaultAlloc ; kDropAlloc ; kInnerClass ; kInnedMostClass ; kDropStlDefault ; kDropComparator ; kDropAllDefault ; kLong64 ; kDropStd ; kKeepOuterConst ; kResolveTypedef ; kDropPredicate ; kDropHash . Definition at line 75 of file TClassEdit.h. ◆ ESTLType. enum TClassEdit::ESTLType. EnumeratorkNotSTL ; kVector ; kList ; kForwardlist ; kDeque ; kMap ; kMultiMap ; kSet ; kMultiSet ; kUnorderedSet ; kUnorderedMultiSet ; kUnorderedMap ; kUnorderedMultiMap ; kBitSet ; kEnd . Definition at line 93 of file TClassEdit.h. Function Documentation. ◆ CleanType(). string TClassEdit::CleanType ; (; const char * ; typeDesc, . int ; mode = 0, . const char ** ; tail = nullptr . ). Cleanup type description, redundant blanks removed and redundant tail ignored return *tail = pointer to last used character if (mode==0) keep keywords if (mode==1) remove keywords outside the template params if (mode>=2) remove the keywords everywhere. ; if (tail!=0) cut before the trailing *; The keywords currently are: ""const"" , ""volatile"" removed; CleanType("" A<B, C< D, E> > *,F,G>"") returns ""A<B,C<D,E> >*"" ; Definition at line 1232 of file TClassEdit.cxx. ◆ DemangleName(). char * TClassEdit::DemangleName ; (; const char * ; mangled_name, . int & ; errorCode . ). inline . Definition at line 208 of file TClassEdit.h. ◆ DemangleTypeIdName(). char * TClassEdit::DemangleTypeIdName ; (; const std::type_info & ; ti, . int & ; errorCode . ). Demangle in a portable way the type id name. ; IMPORTANT: The caller is responsible for freeing the returned const char* ; Definition at line 2148 of file TClassEdit.cxx. ◆ GetComplexType(). TClassEdit::EComplexType TClassEdit::GetComplexType ; (; const char * ; clName). Definition at line 137 of file TClassEdit.cxx. ◆ GetLong64_Name() [1/2]. string TClassEdit::GetLong64_Name",MatchSource.WIKI,doc/master/namespaceTClassEdit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTClassEdit.html
https://root.cern/doc/master/namespaceTClassEdit.html:3777,Security,hash,hashname,3777,"or< std::string > &output, int &nestedLoc, EModType mode=TClassEdit::kNone);  Stores in output (after emptying it) the split type. ;  ; bool GetStdArrayProperties (const char *typeName, std::string &typeNameBuf, std::array< int, 5 > &maxIndices, int &ndim);  ; std::string GetUniquePtrType (std::string_view name);  ; const char * GetUnqualifiedName (const char *name);  Return the start of the unqualified name include in 'original'. ;  ; void Init (TClassEdit::TInterpreterLookupHelper *helper);  ; std::string InsertStd (const char *tname);  ; bool IsArtificial (std::string_view name);  ; bool IsDefAlloc (const char *alloc, const char *classname);  return whether or not 'allocname' is the STL default allocator for type 'classname' ;  ; bool IsDefAlloc (const char *alloc, const char *keyclassname, const char *valueclassname);  return whether or not 'allocname' is the STL default allocator for a key of type 'keyclassname' and a value of type 'valueclassname' ;  ; bool IsDefComp (const char *comp, const char *classname);  return whether or not 'compare' is the STL default comparator for type 'classname' ;  ; bool IsDefHash (const char *hashname, const char *classname);  return whether or not 'hashname' is the STL default hash for type 'classname' ;  ; bool IsDefPred (const char *predname, const char *classname);  return whether or not 'predname' is the STL default predicate for type 'classname' ;  ; bool IsInterpreterDetail (const char *type);  Return true if the type is one the interpreter details which are only forward declared (ClassInfo_t etc..) ;  ; bool IsStdArray (std::string_view name);  ; bool IsStdClass (const char *type);  return true if the class belongs to the std namespace ;  ; bool IsStdPair (std::string_view name);  ; bool IsStdPairBase (std::string_view name);  ; bool IsSTLBitset (const char *type);  Return true is the name is std::bitset<number> or bitset<number> ;  ; int IsSTLCont (const char *type, int testAlloc);  type : type name: vector<list<classA,a",MatchSource.WIKI,doc/master/namespaceTClassEdit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTClassEdit.html
https://root.cern/doc/master/namespaceTClassEdit.html:3835,Security,hash,hashname,3835,"or< std::string > &output, int &nestedLoc, EModType mode=TClassEdit::kNone);  Stores in output (after emptying it) the split type. ;  ; bool GetStdArrayProperties (const char *typeName, std::string &typeNameBuf, std::array< int, 5 > &maxIndices, int &ndim);  ; std::string GetUniquePtrType (std::string_view name);  ; const char * GetUnqualifiedName (const char *name);  Return the start of the unqualified name include in 'original'. ;  ; void Init (TClassEdit::TInterpreterLookupHelper *helper);  ; std::string InsertStd (const char *tname);  ; bool IsArtificial (std::string_view name);  ; bool IsDefAlloc (const char *alloc, const char *classname);  return whether or not 'allocname' is the STL default allocator for type 'classname' ;  ; bool IsDefAlloc (const char *alloc, const char *keyclassname, const char *valueclassname);  return whether or not 'allocname' is the STL default allocator for a key of type 'keyclassname' and a value of type 'valueclassname' ;  ; bool IsDefComp (const char *comp, const char *classname);  return whether or not 'compare' is the STL default comparator for type 'classname' ;  ; bool IsDefHash (const char *hashname, const char *classname);  return whether or not 'hashname' is the STL default hash for type 'classname' ;  ; bool IsDefPred (const char *predname, const char *classname);  return whether or not 'predname' is the STL default predicate for type 'classname' ;  ; bool IsInterpreterDetail (const char *type);  Return true if the type is one the interpreter details which are only forward declared (ClassInfo_t etc..) ;  ; bool IsStdArray (std::string_view name);  ; bool IsStdClass (const char *type);  return true if the class belongs to the std namespace ;  ; bool IsStdPair (std::string_view name);  ; bool IsStdPairBase (std::string_view name);  ; bool IsSTLBitset (const char *type);  Return true is the name is std::bitset<number> or bitset<number> ;  ; int IsSTLCont (const char *type, int testAlloc);  type : type name: vector<list<classA,a",MatchSource.WIKI,doc/master/namespaceTClassEdit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTClassEdit.html
https://root.cern/doc/master/namespaceTClassEdit.html:3864,Security,hash,hash,3864,"or< std::string > &output, int &nestedLoc, EModType mode=TClassEdit::kNone);  Stores in output (after emptying it) the split type. ;  ; bool GetStdArrayProperties (const char *typeName, std::string &typeNameBuf, std::array< int, 5 > &maxIndices, int &ndim);  ; std::string GetUniquePtrType (std::string_view name);  ; const char * GetUnqualifiedName (const char *name);  Return the start of the unqualified name include in 'original'. ;  ; void Init (TClassEdit::TInterpreterLookupHelper *helper);  ; std::string InsertStd (const char *tname);  ; bool IsArtificial (std::string_view name);  ; bool IsDefAlloc (const char *alloc, const char *classname);  return whether or not 'allocname' is the STL default allocator for type 'classname' ;  ; bool IsDefAlloc (const char *alloc, const char *keyclassname, const char *valueclassname);  return whether or not 'allocname' is the STL default allocator for a key of type 'keyclassname' and a value of type 'valueclassname' ;  ; bool IsDefComp (const char *comp, const char *classname);  return whether or not 'compare' is the STL default comparator for type 'classname' ;  ; bool IsDefHash (const char *hashname, const char *classname);  return whether or not 'hashname' is the STL default hash for type 'classname' ;  ; bool IsDefPred (const char *predname, const char *classname);  return whether or not 'predname' is the STL default predicate for type 'classname' ;  ; bool IsInterpreterDetail (const char *type);  Return true if the type is one the interpreter details which are only forward declared (ClassInfo_t etc..) ;  ; bool IsStdArray (std::string_view name);  ; bool IsStdClass (const char *type);  return true if the class belongs to the std namespace ;  ; bool IsStdPair (std::string_view name);  ; bool IsStdPairBase (std::string_view name);  ; bool IsSTLBitset (const char *type);  Return true is the name is std::bitset<number> or bitset<number> ;  ; int IsSTLCont (const char *type, int testAlloc);  type : type name: vector<list<classA,a",MatchSource.WIKI,doc/master/namespaceTClassEdit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTClassEdit.html
https://root.cern/doc/master/namespaceTClassEdit.html:11622,Security,hash,hashname,11622,"f file TClassEdit.cxx. ◆ IsArtificial(). bool TClassEdit::IsArtificial ; (; std::string_view ; name). inline . Definition at line 159 of file TClassEdit.h. ◆ IsDefAlloc() [1/2]. bool TClassEdit::IsDefAlloc ; (; const char * ; alloc, . const char * ; classname . ). return whether or not 'allocname' is the STL default allocator for type 'classname' ; Definition at line 621 of file TClassEdit.cxx. ◆ IsDefAlloc() [2/2]. bool TClassEdit::IsDefAlloc ; (; const char * ; alloc, . const char * ; keyclassname, . const char * ; valueclassname . ). return whether or not 'allocname' is the STL default allocator for a key of type 'keyclassname' and a value of type 'valueclassname' ; Definition at line 670 of file TClassEdit.cxx. ◆ IsDefComp(). bool TClassEdit::IsDefComp ; (; const char * ; comp, . const char * ; classname . ). return whether or not 'compare' is the STL default comparator for type 'classname' ; Definition at line 821 of file TClassEdit.cxx. ◆ IsDefHash(). bool TClassEdit::IsDefHash ; (; const char * ; hashname, . const char * ; classname . ). return whether or not 'hashname' is the STL default hash for type 'classname' ; Definition at line 839 of file TClassEdit.cxx. ◆ IsDefPred(). bool TClassEdit::IsDefPred ; (; const char * ; predname, . const char * ; classname . ). return whether or not 'predname' is the STL default predicate for type 'classname' ; Definition at line 830 of file TClassEdit.cxx. ◆ IsInterpreterDetail(). bool TClassEdit::IsInterpreterDetail ; (; const char * ; type). Return true if the type is one the interpreter details which are only forward declared (ClassInfo_t etc..) ; Definition at line 1322 of file TClassEdit.cxx. ◆ IsStdArray(). bool TClassEdit::IsStdArray ; (; std::string_view ; name). inline . Definition at line 183 of file TClassEdit.h. ◆ IsStdClass(). bool TClassEdit::IsStdClass ; (; const char * ; type). return true if the class belongs to the std namespace ; Definition at line 1418 of file TClassEdit.cxx. ◆ IsStdPair(). bool TClassE",MatchSource.WIKI,doc/master/namespaceTClassEdit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTClassEdit.html
https://root.cern/doc/master/namespaceTClassEdit.html:11687,Security,hash,hashname,11687," at line 159 of file TClassEdit.h. ◆ IsDefAlloc() [1/2]. bool TClassEdit::IsDefAlloc ; (; const char * ; alloc, . const char * ; classname . ). return whether or not 'allocname' is the STL default allocator for type 'classname' ; Definition at line 621 of file TClassEdit.cxx. ◆ IsDefAlloc() [2/2]. bool TClassEdit::IsDefAlloc ; (; const char * ; alloc, . const char * ; keyclassname, . const char * ; valueclassname . ). return whether or not 'allocname' is the STL default allocator for a key of type 'keyclassname' and a value of type 'valueclassname' ; Definition at line 670 of file TClassEdit.cxx. ◆ IsDefComp(). bool TClassEdit::IsDefComp ; (; const char * ; comp, . const char * ; classname . ). return whether or not 'compare' is the STL default comparator for type 'classname' ; Definition at line 821 of file TClassEdit.cxx. ◆ IsDefHash(). bool TClassEdit::IsDefHash ; (; const char * ; hashname, . const char * ; classname . ). return whether or not 'hashname' is the STL default hash for type 'classname' ; Definition at line 839 of file TClassEdit.cxx. ◆ IsDefPred(). bool TClassEdit::IsDefPred ; (; const char * ; predname, . const char * ; classname . ). return whether or not 'predname' is the STL default predicate for type 'classname' ; Definition at line 830 of file TClassEdit.cxx. ◆ IsInterpreterDetail(). bool TClassEdit::IsInterpreterDetail ; (; const char * ; type). Return true if the type is one the interpreter details which are only forward declared (ClassInfo_t etc..) ; Definition at line 1322 of file TClassEdit.cxx. ◆ IsStdArray(). bool TClassEdit::IsStdArray ; (; std::string_view ; name). inline . Definition at line 183 of file TClassEdit.h. ◆ IsStdClass(). bool TClassEdit::IsStdClass ; (; const char * ; type). return true if the class belongs to the std namespace ; Definition at line 1418 of file TClassEdit.cxx. ◆ IsStdPair(). bool TClassEdit::IsStdPair ; (; std::string_view ; name). inline . Definition at line 184 of file TClassEdit.h. ◆ IsStdPairBase(). bo",MatchSource.WIKI,doc/master/namespaceTClassEdit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTClassEdit.html
https://root.cern/doc/master/namespaceTClassEdit.html:11716,Security,hash,hash,11716," at line 159 of file TClassEdit.h. ◆ IsDefAlloc() [1/2]. bool TClassEdit::IsDefAlloc ; (; const char * ; alloc, . const char * ; classname . ). return whether or not 'allocname' is the STL default allocator for type 'classname' ; Definition at line 621 of file TClassEdit.cxx. ◆ IsDefAlloc() [2/2]. bool TClassEdit::IsDefAlloc ; (; const char * ; alloc, . const char * ; keyclassname, . const char * ; valueclassname . ). return whether or not 'allocname' is the STL default allocator for a key of type 'keyclassname' and a value of type 'valueclassname' ; Definition at line 670 of file TClassEdit.cxx. ◆ IsDefComp(). bool TClassEdit::IsDefComp ; (; const char * ; comp, . const char * ; classname . ). return whether or not 'compare' is the STL default comparator for type 'classname' ; Definition at line 821 of file TClassEdit.cxx. ◆ IsDefHash(). bool TClassEdit::IsDefHash ; (; const char * ; hashname, . const char * ; classname . ). return whether or not 'hashname' is the STL default hash for type 'classname' ; Definition at line 839 of file TClassEdit.cxx. ◆ IsDefPred(). bool TClassEdit::IsDefPred ; (; const char * ; predname, . const char * ; classname . ). return whether or not 'predname' is the STL default predicate for type 'classname' ; Definition at line 830 of file TClassEdit.cxx. ◆ IsInterpreterDetail(). bool TClassEdit::IsInterpreterDetail ; (; const char * ; type). Return true if the type is one the interpreter details which are only forward declared (ClassInfo_t etc..) ; Definition at line 1322 of file TClassEdit.cxx. ◆ IsStdArray(). bool TClassEdit::IsStdArray ; (; std::string_view ; name). inline . Definition at line 183 of file TClassEdit.h. ◆ IsStdClass(). bool TClassEdit::IsStdClass ; (; const char * ; type). return true if the class belongs to the std namespace ; Definition at line 1418 of file TClassEdit.cxx. ◆ IsStdPair(). bool TClassEdit::IsStdPair ; (; std::string_view ; name). inline . Definition at line 184 of file TClassEdit.h. ◆ IsStdPairBase(). bo",MatchSource.WIKI,doc/master/namespaceTClassEdit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTClassEdit.html
https://root.cern/doc/master/namespaceTClassEdit.html:4579,Testability,test,testAlloc,4579,"classname' ;  ; bool IsDefPred (const char *predname, const char *classname);  return whether or not 'predname' is the STL default predicate for type 'classname' ;  ; bool IsInterpreterDetail (const char *type);  Return true if the type is one the interpreter details which are only forward declared (ClassInfo_t etc..) ;  ; bool IsStdArray (std::string_view name);  ; bool IsStdClass (const char *type);  return true if the class belongs to the std namespace ;  ; bool IsStdPair (std::string_view name);  ; bool IsStdPairBase (std::string_view name);  ; bool IsSTLBitset (const char *type);  Return true is the name is std::bitset<number> or bitset<number> ;  ; int IsSTLCont (const char *type, int testAlloc);  type : type name: vector<list<classA,allocator>,allocator> testAlloc: if true, we test allocator, if it is not default result is negative result: 0 : not stl container abs(result): code of container 1=vector,2=list,3=deque,4=map 5=multimap,6=set,7=multiset positive val: we have a vector or list with default allocator to any depth like vector<list<vector<int>>> negative val: STL container other than vector or list, or non default allocator For example: vector<deque<int>> has answer -1 ;  ; ROOT::ESTLType IsSTLCont (std::string_view type);  type : type name: vector<list<classA,allocator>,allocator> result: 0 : not stl container code of container 1=vector,2=list,3=deque,4=map 5=multimap,6=set,7=multiset ;  ; bool IsUniquePtr (std::string_view name);  ; bool IsVectorBool (const char *name);  ; std::string ResolveTypedef (const char *tname, bool resolveAll=false);  ; std::string ShortType (const char *typeDesc, int mode);  Return the absolute type of typeDesc. ;  ; bool SplitFunction (std::string_view decl, FunctionSplitInfo &result);  Split a function declaration into its different parts. ;  ; int STLArgs (int kind);  Return number of arguments for STL container before allocator. ;  ; ROOT::ESTLType STLKind (std::string_view type);  Converts STL container name to number.",MatchSource.WIKI,doc/master/namespaceTClassEdit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTClassEdit.html
https://root.cern/doc/master/namespaceTClassEdit.html:4651,Testability,test,testAlloc,4651,"classname' ;  ; bool IsDefPred (const char *predname, const char *classname);  return whether or not 'predname' is the STL default predicate for type 'classname' ;  ; bool IsInterpreterDetail (const char *type);  Return true if the type is one the interpreter details which are only forward declared (ClassInfo_t etc..) ;  ; bool IsStdArray (std::string_view name);  ; bool IsStdClass (const char *type);  return true if the class belongs to the std namespace ;  ; bool IsStdPair (std::string_view name);  ; bool IsStdPairBase (std::string_view name);  ; bool IsSTLBitset (const char *type);  Return true is the name is std::bitset<number> or bitset<number> ;  ; int IsSTLCont (const char *type, int testAlloc);  type : type name: vector<list<classA,allocator>,allocator> testAlloc: if true, we test allocator, if it is not default result is negative result: 0 : not stl container abs(result): code of container 1=vector,2=list,3=deque,4=map 5=multimap,6=set,7=multiset positive val: we have a vector or list with default allocator to any depth like vector<list<vector<int>>> negative val: STL container other than vector or list, or non default allocator For example: vector<deque<int>> has answer -1 ;  ; ROOT::ESTLType IsSTLCont (std::string_view type);  type : type name: vector<list<classA,allocator>,allocator> result: 0 : not stl container code of container 1=vector,2=list,3=deque,4=map 5=multimap,6=set,7=multiset ;  ; bool IsUniquePtr (std::string_view name);  ; bool IsVectorBool (const char *name);  ; std::string ResolveTypedef (const char *tname, bool resolveAll=false);  ; std::string ShortType (const char *typeDesc, int mode);  Return the absolute type of typeDesc. ;  ; bool SplitFunction (std::string_view decl, FunctionSplitInfo &result);  Split a function declaration into its different parts. ;  ; int STLArgs (int kind);  Return number of arguments for STL container before allocator. ;  ; ROOT::ESTLType STLKind (std::string_view type);  Converts STL container name to number.",MatchSource.WIKI,doc/master/namespaceTClassEdit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTClassEdit.html
https://root.cern/doc/master/namespaceTClassEdit.html:4674,Testability,test,test,4674,"classname' ;  ; bool IsDefPred (const char *predname, const char *classname);  return whether or not 'predname' is the STL default predicate for type 'classname' ;  ; bool IsInterpreterDetail (const char *type);  Return true if the type is one the interpreter details which are only forward declared (ClassInfo_t etc..) ;  ; bool IsStdArray (std::string_view name);  ; bool IsStdClass (const char *type);  return true if the class belongs to the std namespace ;  ; bool IsStdPair (std::string_view name);  ; bool IsStdPairBase (std::string_view name);  ; bool IsSTLBitset (const char *type);  Return true is the name is std::bitset<number> or bitset<number> ;  ; int IsSTLCont (const char *type, int testAlloc);  type : type name: vector<list<classA,allocator>,allocator> testAlloc: if true, we test allocator, if it is not default result is negative result: 0 : not stl container abs(result): code of container 1=vector,2=list,3=deque,4=map 5=multimap,6=set,7=multiset positive val: we have a vector or list with default allocator to any depth like vector<list<vector<int>>> negative val: STL container other than vector or list, or non default allocator For example: vector<deque<int>> has answer -1 ;  ; ROOT::ESTLType IsSTLCont (std::string_view type);  type : type name: vector<list<classA,allocator>,allocator> result: 0 : not stl container code of container 1=vector,2=list,3=deque,4=map 5=multimap,6=set,7=multiset ;  ; bool IsUniquePtr (std::string_view name);  ; bool IsVectorBool (const char *name);  ; std::string ResolveTypedef (const char *tname, bool resolveAll=false);  ; std::string ShortType (const char *typeDesc, int mode);  Return the absolute type of typeDesc. ;  ; bool SplitFunction (std::string_view decl, FunctionSplitInfo &result);  Split a function declaration into its different parts. ;  ; int STLArgs (int kind);  Return number of arguments for STL container before allocator. ;  ; ROOT::ESTLType STLKind (std::string_view type);  Converts STL container name to number.",MatchSource.WIKI,doc/master/namespaceTClassEdit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTClassEdit.html
https://root.cern/doc/master/namespaceTClassEdit.html:13108,Testability,test,testAlloc,13108,"ype). Return true if the type is one the interpreter details which are only forward declared (ClassInfo_t etc..) ; Definition at line 1322 of file TClassEdit.cxx. ◆ IsStdArray(). bool TClassEdit::IsStdArray ; (; std::string_view ; name). inline . Definition at line 183 of file TClassEdit.h. ◆ IsStdClass(). bool TClassEdit::IsStdClass ; (; const char * ; type). return true if the class belongs to the std namespace ; Definition at line 1418 of file TClassEdit.cxx. ◆ IsStdPair(). bool TClassEdit::IsStdPair ; (; std::string_view ; name). inline . Definition at line 184 of file TClassEdit.h. ◆ IsStdPairBase(). bool TClassEdit::IsStdPairBase ; (; std::string_view ; name). inline . Definition at line 188 of file TClassEdit.h. ◆ IsSTLBitset(). bool TClassEdit::IsSTLBitset ; (; const char * ; type). Return true is the name is std::bitset<number> or bitset<number> ; Definition at line 1340 of file TClassEdit.cxx. ◆ IsSTLCont() [1/2]. int TClassEdit::IsSTLCont ; (; const char * ; type, . int ; testAlloc . ). type : type name: vector<list<classA,allocator>,allocator> testAlloc: if true, we test allocator, if it is not default result is negative result: 0 : not stl container abs(result): code of container 1=vector,2=list,3=deque,4=map 5=multimap,6=set,7=multiset positive val: we have a vector or list with default allocator to any depth like vector<list<vector<int>>> negative val: STL container other than vector or list, or non default allocator For example: vector<deque<int>> has answer -1 ; Definition at line 1407 of file TClassEdit.cxx. ◆ IsSTLCont() [2/2]. ROOT::ESTLType TClassEdit::IsSTLCont ; (; std::string_view ; type). type : type name: vector<list<classA,allocator>,allocator> result: 0 : not stl container code of container 1=vector,2=list,3=deque,4=map 5=multimap,6=set,7=multiset ; Definition at line 1378 of file TClassEdit.cxx. ◆ IsUniquePtr(). bool TClassEdit::IsUniquePtr ; (; std::string_view ; name). inline . Definition at line 182 of file TClassEdit.h. ◆ IsVectorBoo",MatchSource.WIKI,doc/master/namespaceTClassEdit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTClassEdit.html
https://root.cern/doc/master/namespaceTClassEdit.html:13182,Testability,test,testAlloc,13182,"ClassEdit.h. ◆ IsStdClass(). bool TClassEdit::IsStdClass ; (; const char * ; type). return true if the class belongs to the std namespace ; Definition at line 1418 of file TClassEdit.cxx. ◆ IsStdPair(). bool TClassEdit::IsStdPair ; (; std::string_view ; name). inline . Definition at line 184 of file TClassEdit.h. ◆ IsStdPairBase(). bool TClassEdit::IsStdPairBase ; (; std::string_view ; name). inline . Definition at line 188 of file TClassEdit.h. ◆ IsSTLBitset(). bool TClassEdit::IsSTLBitset ; (; const char * ; type). Return true is the name is std::bitset<number> or bitset<number> ; Definition at line 1340 of file TClassEdit.cxx. ◆ IsSTLCont() [1/2]. int TClassEdit::IsSTLCont ; (; const char * ; type, . int ; testAlloc . ). type : type name: vector<list<classA,allocator>,allocator> testAlloc: if true, we test allocator, if it is not default result is negative result: 0 : not stl container abs(result): code of container 1=vector,2=list,3=deque,4=map 5=multimap,6=set,7=multiset positive val: we have a vector or list with default allocator to any depth like vector<list<vector<int>>> negative val: STL container other than vector or list, or non default allocator For example: vector<deque<int>> has answer -1 ; Definition at line 1407 of file TClassEdit.cxx. ◆ IsSTLCont() [2/2]. ROOT::ESTLType TClassEdit::IsSTLCont ; (; std::string_view ; type). type : type name: vector<list<classA,allocator>,allocator> result: 0 : not stl container code of container 1=vector,2=list,3=deque,4=map 5=multimap,6=set,7=multiset ; Definition at line 1378 of file TClassEdit.cxx. ◆ IsUniquePtr(). bool TClassEdit::IsUniquePtr ; (; std::string_view ; name). inline . Definition at line 182 of file TClassEdit.h. ◆ IsVectorBool(). bool TClassEdit::IsVectorBool ; (; const char * ; name). Definition at line 1453 of file TClassEdit.cxx. ◆ ResolveTypedef(). string TClassEdit::ResolveTypedef ; (; const char * ; tname, . bool ; resolveAll = false . ). Definition at line 1748 of file TClassEdit.cxx. ◆ ShortT",MatchSource.WIKI,doc/master/namespaceTClassEdit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTClassEdit.html
https://root.cern/doc/master/namespaceTClassEdit.html:13205,Testability,test,test,13205,"ClassEdit.h. ◆ IsStdClass(). bool TClassEdit::IsStdClass ; (; const char * ; type). return true if the class belongs to the std namespace ; Definition at line 1418 of file TClassEdit.cxx. ◆ IsStdPair(). bool TClassEdit::IsStdPair ; (; std::string_view ; name). inline . Definition at line 184 of file TClassEdit.h. ◆ IsStdPairBase(). bool TClassEdit::IsStdPairBase ; (; std::string_view ; name). inline . Definition at line 188 of file TClassEdit.h. ◆ IsSTLBitset(). bool TClassEdit::IsSTLBitset ; (; const char * ; type). Return true is the name is std::bitset<number> or bitset<number> ; Definition at line 1340 of file TClassEdit.cxx. ◆ IsSTLCont() [1/2]. int TClassEdit::IsSTLCont ; (; const char * ; type, . int ; testAlloc . ). type : type name: vector<list<classA,allocator>,allocator> testAlloc: if true, we test allocator, if it is not default result is negative result: 0 : not stl container abs(result): code of container 1=vector,2=list,3=deque,4=map 5=multimap,6=set,7=multiset positive val: we have a vector or list with default allocator to any depth like vector<list<vector<int>>> negative val: STL container other than vector or list, or non default allocator For example: vector<deque<int>> has answer -1 ; Definition at line 1407 of file TClassEdit.cxx. ◆ IsSTLCont() [2/2]. ROOT::ESTLType TClassEdit::IsSTLCont ; (; std::string_view ; type). type : type name: vector<list<classA,allocator>,allocator> result: 0 : not stl container code of container 1=vector,2=list,3=deque,4=map 5=multimap,6=set,7=multiset ; Definition at line 1378 of file TClassEdit.cxx. ◆ IsUniquePtr(). bool TClassEdit::IsUniquePtr ; (; std::string_view ; name). inline . Definition at line 182 of file TClassEdit.h. ◆ IsVectorBool(). bool TClassEdit::IsVectorBool ; (; const char * ; name). Definition at line 1453 of file TClassEdit.cxx. ◆ ResolveTypedef(). string TClassEdit::ResolveTypedef ; (; const char * ; tname, . bool ; resolveAll = false . ). Definition at line 1748 of file TClassEdit.cxx. ◆ ShortT",MatchSource.WIKI,doc/master/namespaceTClassEdit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTClassEdit.html
https://root.cern/doc/master/namespaceTMath.html:5959,Availability,error,error,5959,"nstexpr Double_t Ccgs ();  \( cm s^{-1} \) ;  ; Double_t Ceil (Double_t x);  Rounds x upward, returning the smallest integral value that is not less than x. ;  ; Int_t CeilNint (Double_t x);  Returns the nearest integer of TMath::Ceil(x). ;  ; Double_t ChisquareQuantile (Double_t p, Double_t ndf);  Evaluate the quantiles of the chi-squared probability distribution function. ;  ; Double_t Cos (Double_t);  Returns the cosine of an angle of x radians. ;  ; Double_t CosH (Double_t);  Returns the hyperbolic cosine of x. ;  ; template<typename T > ; T * Cross (const T v1[3], const T v2[3], T out[3]);  Calculates the Cross Product of two vectors: out = [v1 x v2]. ;  ; constexpr Double_t CUncertainty ();  Speed of light uncertainty. ;  ; constexpr Double_t DegToRad ();  Conversion from degree to radian: \( \frac{\pi}{180} \). ;  ; Double_t DiLog (Double_t x);  Modified Struve functions of order 1. ;  ; constexpr Double_t E ();  Base of natural log: \( e \). ;  ; Double_t Erf (Double_t x);  Computation of the error function erf(x). ;  ; Double_t Erfc (Double_t x);  Computes the complementary error function erfc(x). ;  ; Double_t ErfcInverse (Double_t x);  Returns the inverse of the complementary error function. ;  ; Double_t ErfInverse (Double_t x);  Returns the inverse error function. ;  ; constexpr Double_t EulerGamma ();  Euler-Mascheroni Constant. ;  ; Bool_t Even (Long_t a);  Returns true if a is even. ;  ; Double_t Exp (Double_t x);  Returns the base-e exponential function of x, which is e raised to the power x. ;  ; Double_t Factorial (Int_t i);  Computes factorial(n). ;  ; Double_t FDist (Double_t F, Double_t N, Double_t M);  Computes the density function of F-distribution (probability function, integral of density, is computed in FDistI). ;  ; Double_t FDistI (Double_t F, Double_t N, Double_t M);  Calculates the cumulative distribution function of F-distribution (see ROOT::Math::fdistribution_cdf). ;  ; Int_t Finite (Double_t x);  Check if it is finite with a mask in",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:6043,Availability,error,error,6043,"nds x upward, returning the smallest integral value that is not less than x. ;  ; Int_t CeilNint (Double_t x);  Returns the nearest integer of TMath::Ceil(x). ;  ; Double_t ChisquareQuantile (Double_t p, Double_t ndf);  Evaluate the quantiles of the chi-squared probability distribution function. ;  ; Double_t Cos (Double_t);  Returns the cosine of an angle of x radians. ;  ; Double_t CosH (Double_t);  Returns the hyperbolic cosine of x. ;  ; template<typename T > ; T * Cross (const T v1[3], const T v2[3], T out[3]);  Calculates the Cross Product of two vectors: out = [v1 x v2]. ;  ; constexpr Double_t CUncertainty ();  Speed of light uncertainty. ;  ; constexpr Double_t DegToRad ();  Conversion from degree to radian: \( \frac{\pi}{180} \). ;  ; Double_t DiLog (Double_t x);  Modified Struve functions of order 1. ;  ; constexpr Double_t E ();  Base of natural log: \( e \). ;  ; Double_t Erf (Double_t x);  Computation of the error function erf(x). ;  ; Double_t Erfc (Double_t x);  Computes the complementary error function erfc(x). ;  ; Double_t ErfcInverse (Double_t x);  Returns the inverse of the complementary error function. ;  ; Double_t ErfInverse (Double_t x);  Returns the inverse error function. ;  ; constexpr Double_t EulerGamma ();  Euler-Mascheroni Constant. ;  ; Bool_t Even (Long_t a);  Returns true if a is even. ;  ; Double_t Exp (Double_t x);  Returns the base-e exponential function of x, which is e raised to the power x. ;  ; Double_t Factorial (Int_t i);  Computes factorial(n). ;  ; Double_t FDist (Double_t F, Double_t N, Double_t M);  Computes the density function of F-distribution (probability function, integral of density, is computed in FDistI). ;  ; Double_t FDistI (Double_t F, Double_t N, Double_t M);  Calculates the cumulative distribution function of F-distribution (see ROOT::Math::fdistribution_cdf). ;  ; Int_t Finite (Double_t x);  Check if it is finite with a mask in order to be consistent in presence of fast math. ;  ; Int_t Finite (Float_t x);",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:6149,Availability,error,error,6149,"Nint (Double_t x);  Returns the nearest integer of TMath::Ceil(x). ;  ; Double_t ChisquareQuantile (Double_t p, Double_t ndf);  Evaluate the quantiles of the chi-squared probability distribution function. ;  ; Double_t Cos (Double_t);  Returns the cosine of an angle of x radians. ;  ; Double_t CosH (Double_t);  Returns the hyperbolic cosine of x. ;  ; template<typename T > ; T * Cross (const T v1[3], const T v2[3], T out[3]);  Calculates the Cross Product of two vectors: out = [v1 x v2]. ;  ; constexpr Double_t CUncertainty ();  Speed of light uncertainty. ;  ; constexpr Double_t DegToRad ();  Conversion from degree to radian: \( \frac{\pi}{180} \). ;  ; Double_t DiLog (Double_t x);  Modified Struve functions of order 1. ;  ; constexpr Double_t E ();  Base of natural log: \( e \). ;  ; Double_t Erf (Double_t x);  Computation of the error function erf(x). ;  ; Double_t Erfc (Double_t x);  Computes the complementary error function erfc(x). ;  ; Double_t ErfcInverse (Double_t x);  Returns the inverse of the complementary error function. ;  ; Double_t ErfInverse (Double_t x);  Returns the inverse error function. ;  ; constexpr Double_t EulerGamma ();  Euler-Mascheroni Constant. ;  ; Bool_t Even (Long_t a);  Returns true if a is even. ;  ; Double_t Exp (Double_t x);  Returns the base-e exponential function of x, which is e raised to the power x. ;  ; Double_t Factorial (Int_t i);  Computes factorial(n). ;  ; Double_t FDist (Double_t F, Double_t N, Double_t M);  Computes the density function of F-distribution (probability function, integral of density, is computed in FDistI). ;  ; Double_t FDistI (Double_t F, Double_t N, Double_t M);  Calculates the cumulative distribution function of F-distribution (see ROOT::Math::fdistribution_cdf). ;  ; Int_t Finite (Double_t x);  Check if it is finite with a mask in order to be consistent in presence of fast math. ;  ; Int_t Finite (Float_t x);  Check if it is finite with a mask in order to be consistent in presence of fast math. ;  ",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:6225,Availability,error,error,6225,"areQuantile (Double_t p, Double_t ndf);  Evaluate the quantiles of the chi-squared probability distribution function. ;  ; Double_t Cos (Double_t);  Returns the cosine of an angle of x radians. ;  ; Double_t CosH (Double_t);  Returns the hyperbolic cosine of x. ;  ; template<typename T > ; T * Cross (const T v1[3], const T v2[3], T out[3]);  Calculates the Cross Product of two vectors: out = [v1 x v2]. ;  ; constexpr Double_t CUncertainty ();  Speed of light uncertainty. ;  ; constexpr Double_t DegToRad ();  Conversion from degree to radian: \( \frac{\pi}{180} \). ;  ; Double_t DiLog (Double_t x);  Modified Struve functions of order 1. ;  ; constexpr Double_t E ();  Base of natural log: \( e \). ;  ; Double_t Erf (Double_t x);  Computation of the error function erf(x). ;  ; Double_t Erfc (Double_t x);  Computes the complementary error function erfc(x). ;  ; Double_t ErfcInverse (Double_t x);  Returns the inverse of the complementary error function. ;  ; Double_t ErfInverse (Double_t x);  Returns the inverse error function. ;  ; constexpr Double_t EulerGamma ();  Euler-Mascheroni Constant. ;  ; Bool_t Even (Long_t a);  Returns true if a is even. ;  ; Double_t Exp (Double_t x);  Returns the base-e exponential function of x, which is e raised to the power x. ;  ; Double_t Factorial (Int_t i);  Computes factorial(n). ;  ; Double_t FDist (Double_t F, Double_t N, Double_t M);  Computes the density function of F-distribution (probability function, integral of density, is computed in FDistI). ;  ; Double_t FDistI (Double_t F, Double_t N, Double_t M);  Calculates the cumulative distribution function of F-distribution (see ROOT::Math::fdistribution_cdf). ;  ; Int_t Finite (Double_t x);  Check if it is finite with a mask in order to be consistent in presence of fast math. ;  ; Int_t Finite (Float_t x);  Check if it is finite with a mask in order to be consistent in presence of fast math. ;  ; Double_t Floor (Double_t x);  Rounds x downward, returning the largest integral value",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:6937,Availability,mask,mask,6937,"t x);  Computation of the error function erf(x). ;  ; Double_t Erfc (Double_t x);  Computes the complementary error function erfc(x). ;  ; Double_t ErfcInverse (Double_t x);  Returns the inverse of the complementary error function. ;  ; Double_t ErfInverse (Double_t x);  Returns the inverse error function. ;  ; constexpr Double_t EulerGamma ();  Euler-Mascheroni Constant. ;  ; Bool_t Even (Long_t a);  Returns true if a is even. ;  ; Double_t Exp (Double_t x);  Returns the base-e exponential function of x, which is e raised to the power x. ;  ; Double_t Factorial (Int_t i);  Computes factorial(n). ;  ; Double_t FDist (Double_t F, Double_t N, Double_t M);  Computes the density function of F-distribution (probability function, integral of density, is computed in FDistI). ;  ; Double_t FDistI (Double_t F, Double_t N, Double_t M);  Calculates the cumulative distribution function of F-distribution (see ROOT::Math::fdistribution_cdf). ;  ; Int_t Finite (Double_t x);  Check if it is finite with a mask in order to be consistent in presence of fast math. ;  ; Int_t Finite (Float_t x);  Check if it is finite with a mask in order to be consistent in presence of fast math. ;  ; Double_t Floor (Double_t x);  Rounds x downward, returning the largest integral value that is not greater than x. ;  ; Int_t FloorNint (Double_t x);  Returns the nearest integer of TMath::Floor(x). ;  ; Double_t Freq (Double_t x);  Computation of the normal frequency function freq(x). ;  ; constexpr Double_t G ();  Gravitational constant in: \( m^{3} kg^{-1} s^{-2} \). ;  ; Double_t GamCf (Double_t a, Double_t x);  Computation of the incomplete gamma function P(a,x) via its continued fraction representation. ;  ; Double_t Gamma (Double_t a, Double_t x);  Computation of the normalized lower incomplete gamma function P(a,x) as defined in the Handbook of Mathematical Functions by Abramowitz and Stegun, formula 6.5.1 on page 260 . ;  ; Double_t Gamma (Double_t z);  Computation of gamma(z) for all z. ;  ; Doubl",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:7055,Availability,mask,mask,7055,"ction erfc(x). ;  ; Double_t ErfcInverse (Double_t x);  Returns the inverse of the complementary error function. ;  ; Double_t ErfInverse (Double_t x);  Returns the inverse error function. ;  ; constexpr Double_t EulerGamma ();  Euler-Mascheroni Constant. ;  ; Bool_t Even (Long_t a);  Returns true if a is even. ;  ; Double_t Exp (Double_t x);  Returns the base-e exponential function of x, which is e raised to the power x. ;  ; Double_t Factorial (Int_t i);  Computes factorial(n). ;  ; Double_t FDist (Double_t F, Double_t N, Double_t M);  Computes the density function of F-distribution (probability function, integral of density, is computed in FDistI). ;  ; Double_t FDistI (Double_t F, Double_t N, Double_t M);  Calculates the cumulative distribution function of F-distribution (see ROOT::Math::fdistribution_cdf). ;  ; Int_t Finite (Double_t x);  Check if it is finite with a mask in order to be consistent in presence of fast math. ;  ; Int_t Finite (Float_t x);  Check if it is finite with a mask in order to be consistent in presence of fast math. ;  ; Double_t Floor (Double_t x);  Rounds x downward, returning the largest integral value that is not greater than x. ;  ; Int_t FloorNint (Double_t x);  Returns the nearest integer of TMath::Floor(x). ;  ; Double_t Freq (Double_t x);  Computation of the normal frequency function freq(x). ;  ; constexpr Double_t G ();  Gravitational constant in: \( m^{3} kg^{-1} s^{-2} \). ;  ; Double_t GamCf (Double_t a, Double_t x);  Computation of the incomplete gamma function P(a,x) via its continued fraction representation. ;  ; Double_t Gamma (Double_t a, Double_t x);  Computation of the normalized lower incomplete gamma function P(a,x) as defined in the Handbook of Mathematical Functions by Abramowitz and Stegun, formula 6.5.1 on page 260 . ;  ; Double_t Gamma (Double_t z);  Computation of gamma(z) for all z. ;  ; Double_t GammaDist (Double_t x, Double_t gamma, Double_t mu=0, Double_t beta=1);  Computes the density function of Gamma di",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:7156,Availability,down,downward,7156,"Double_t ErfInverse (Double_t x);  Returns the inverse error function. ;  ; constexpr Double_t EulerGamma ();  Euler-Mascheroni Constant. ;  ; Bool_t Even (Long_t a);  Returns true if a is even. ;  ; Double_t Exp (Double_t x);  Returns the base-e exponential function of x, which is e raised to the power x. ;  ; Double_t Factorial (Int_t i);  Computes factorial(n). ;  ; Double_t FDist (Double_t F, Double_t N, Double_t M);  Computes the density function of F-distribution (probability function, integral of density, is computed in FDistI). ;  ; Double_t FDistI (Double_t F, Double_t N, Double_t M);  Calculates the cumulative distribution function of F-distribution (see ROOT::Math::fdistribution_cdf). ;  ; Int_t Finite (Double_t x);  Check if it is finite with a mask in order to be consistent in presence of fast math. ;  ; Int_t Finite (Float_t x);  Check if it is finite with a mask in order to be consistent in presence of fast math. ;  ; Double_t Floor (Double_t x);  Rounds x downward, returning the largest integral value that is not greater than x. ;  ; Int_t FloorNint (Double_t x);  Returns the nearest integer of TMath::Floor(x). ;  ; Double_t Freq (Double_t x);  Computation of the normal frequency function freq(x). ;  ; constexpr Double_t G ();  Gravitational constant in: \( m^{3} kg^{-1} s^{-2} \). ;  ; Double_t GamCf (Double_t a, Double_t x);  Computation of the incomplete gamma function P(a,x) via its continued fraction representation. ;  ; Double_t Gamma (Double_t a, Double_t x);  Computation of the normalized lower incomplete gamma function P(a,x) as defined in the Handbook of Mathematical Functions by Abramowitz and Stegun, formula 6.5.1 on page 260 . ;  ; Double_t Gamma (Double_t z);  Computation of gamma(z) for all z. ;  ; Double_t GammaDist (Double_t x, Double_t gamma, Double_t mu=0, Double_t beta=1);  Computes the density function of Gamma distribution at point x. ;  ; Double_t GamSer (Double_t a, Double_t x);  Computation of the incomplete gamma function P(a",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:21008,Availability,down,down,21008,"gn of b. ;  ; LongDouble_t Sign (LongDouble_t a, LongDouble_t b);  Returns a value with the magnitude of a and the sign of b. ;  ; template<typename T1 , typename T2 > ; T1 Sign (T1 a, T2 b);  Returns a value with the magnitude of a and the sign of b. ;  ; Double_t SignalingNaN ();  Returns a signaling NaN as defined by IEEE 754](http://en.wikipedia.org/wiki/NaN#Signaling_NaN). ;  ; Bool_t SignBit (Double_t a);  Returns whether the sign of Double_t a is negative. ;  ; Bool_t SignBit (Float_t a);  Returns whether the sign of Float_t a is negative. ;  ; template<typename Integer > ; Bool_t SignBit (Integer a);  Returns whether the sign of Integer a is negative. ;  ; Bool_t SignBit (LongDouble_t a);  Returns whether the sign of LongDouble_t a is negative. ;  ; Double_t Sin (Double_t);  Returns the sine of an angle of x radians. ;  ; Double_t SinH (Double_t);  Returns the hyperbolic sine of `x. ;  ; template<typename Element , typename Index > ; void Sort (Index n, const Element *a, Index *index, Bool_t down=kTRUE);  Sort the n elements of the array a of generic templated type Element. ;  ; template<typename Iterator , typename IndexIterator > ; void SortItr (Iterator first, Iterator last, IndexIterator index, Bool_t down=kTRUE);  Sort the n1 elements of the Short_t array defined by its iterators. ;  ; Double_t Sq (Double_t x);  Returns x*x. ;  ; Double_t Sqrt (Double_t x);  Returns the square root of x. ;  ; constexpr Double_t Sqrt2 ();  \( \sqrt{2} \) ;  ; template<typename Iterator > ; Double_t StdDev (Iterator first, Iterator last);  Same as RMS. ;  ; template<typename Iterator , typename WeightIterator > ; Double_t StdDev (Iterator first, Iterator last, WeightIterator wfirst);  Same as RMS. ;  ; template<typename T > ; Double_t StdDev (Long64_t n, const T *a, const Double_t *w=nullptr);  ; Double_t StruveH0 (Double_t x);  Bessel function Y1(x) for positive x. ;  ; Double_t StruveH1 (Double_t x);  Struve functions of order 0. ;  ; Double_t StruveL0 (Double_t x);  Str",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:21226,Availability,down,down,21226,"ue with the magnitude of a and the sign of b. ;  ; Double_t SignalingNaN ();  Returns a signaling NaN as defined by IEEE 754](http://en.wikipedia.org/wiki/NaN#Signaling_NaN). ;  ; Bool_t SignBit (Double_t a);  Returns whether the sign of Double_t a is negative. ;  ; Bool_t SignBit (Float_t a);  Returns whether the sign of Float_t a is negative. ;  ; template<typename Integer > ; Bool_t SignBit (Integer a);  Returns whether the sign of Integer a is negative. ;  ; Bool_t SignBit (LongDouble_t a);  Returns whether the sign of LongDouble_t a is negative. ;  ; Double_t Sin (Double_t);  Returns the sine of an angle of x radians. ;  ; Double_t SinH (Double_t);  Returns the hyperbolic sine of `x. ;  ; template<typename Element , typename Index > ; void Sort (Index n, const Element *a, Index *index, Bool_t down=kTRUE);  Sort the n elements of the array a of generic templated type Element. ;  ; template<typename Iterator , typename IndexIterator > ; void SortItr (Iterator first, Iterator last, IndexIterator index, Bool_t down=kTRUE);  Sort the n1 elements of the Short_t array defined by its iterators. ;  ; Double_t Sq (Double_t x);  Returns x*x. ;  ; Double_t Sqrt (Double_t x);  Returns the square root of x. ;  ; constexpr Double_t Sqrt2 ();  \( \sqrt{2} \) ;  ; template<typename Iterator > ; Double_t StdDev (Iterator first, Iterator last);  Same as RMS. ;  ; template<typename Iterator , typename WeightIterator > ; Double_t StdDev (Iterator first, Iterator last, WeightIterator wfirst);  Same as RMS. ;  ; template<typename T > ; Double_t StdDev (Long64_t n, const T *a, const Double_t *w=nullptr);  ; Double_t StruveH0 (Double_t x);  Bessel function Y1(x) for positive x. ;  ; Double_t StruveH1 (Double_t x);  Struve functions of order 0. ;  ; Double_t StruveL0 (Double_t x);  Struve functions of order 1. ;  ; Double_t StruveL1 (Double_t x);  Modified Struve functions of order 0. ;  ; Double_t Student (Double_t T, Double_t ndf);  Computes density function for Student's t- distribut",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:38716,Availability,error,error,38716,"sine of x. ; Definition at line 612 of file TMath.h. ◆ Cross(). template<typename T > . T * TMath::Cross ; (; const T ; v1[3], . const T ; v2[3], . T ; out[3] . ). Calculates the Cross Product of two vectors: out = [v1 x v2]. ; Definition at line 1197 of file TMath.h. ◆ CUncertainty(). constexpr Double_t TMath::CUncertainty ; (; ). constexpr . Speed of light uncertainty. ; Definition at line 128 of file TMath.h. ◆ DegToRad(). constexpr Double_t TMath::DegToRad ; (; ). constexpr . Conversion from degree to radian: \( \frac{\pi}{180} \). ; Definition at line 79 of file TMath.h. ◆ DiLog(). Double_t TMath::DiLog ; (; Double_t ; x). Modified Struve functions of order 1. ; The DiLogarithm function Code translated by R.Brun from CERNLIB DILOG function C332. ; Definition at line 116 of file TMath.cxx. ◆ E(). constexpr Double_t TMath::E ; (; ). constexpr . Base of natural log: \( e \). ; Definition at line 93 of file TMath.h. ◆ Erf(). Double_t TMath::Erf ; (; Double_t ; x). Computation of the error function erf(x). ; Erf(x) = (2/sqrt(pi)) Integral(exp(-t^2))dt between 0 and x ; Definition at line 190 of file TMath.cxx. ◆ Erfc(). Double_t TMath::Erfc ; (; Double_t ; x). Computes the complementary error function erfc(x). ; Erfc(x) = (2/sqrt(pi)) Integral(exp(-t^2))dt between x and infinity ; Definition at line 199 of file TMath.cxx. ◆ ErfcInverse(). Double_t TMath::ErfcInverse ; (; Double_t ; x). Returns the inverse of the complementary error function. ; x must be 0<x<2 implement using the quantile of the normal distribution instead of ErfInverse for better numerical precision for large x ; Definition at line 242 of file TMath.cxx. ◆ ErfInverse(). Double_t TMath::ErfInverse ; (; Double_t ; x). Returns the inverse error function. ; x must be <-1<x<1 ; Definition at line 208 of file TMath.cxx. ◆ EulerGamma(). constexpr Double_t TMath::EulerGamma ; (; ). constexpr . Euler-Mascheroni Constant. ; Definition at line 332 of file TMath.h. ◆ Even(). Bool_t TMath::Even ; (; Long_t ; a).",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:38923,Availability,error,error,38923,"tors: out = [v1 x v2]. ; Definition at line 1197 of file TMath.h. ◆ CUncertainty(). constexpr Double_t TMath::CUncertainty ; (; ). constexpr . Speed of light uncertainty. ; Definition at line 128 of file TMath.h. ◆ DegToRad(). constexpr Double_t TMath::DegToRad ; (; ). constexpr . Conversion from degree to radian: \( \frac{\pi}{180} \). ; Definition at line 79 of file TMath.h. ◆ DiLog(). Double_t TMath::DiLog ; (; Double_t ; x). Modified Struve functions of order 1. ; The DiLogarithm function Code translated by R.Brun from CERNLIB DILOG function C332. ; Definition at line 116 of file TMath.cxx. ◆ E(). constexpr Double_t TMath::E ; (; ). constexpr . Base of natural log: \( e \). ; Definition at line 93 of file TMath.h. ◆ Erf(). Double_t TMath::Erf ; (; Double_t ; x). Computation of the error function erf(x). ; Erf(x) = (2/sqrt(pi)) Integral(exp(-t^2))dt between 0 and x ; Definition at line 190 of file TMath.cxx. ◆ Erfc(). Double_t TMath::Erfc ; (; Double_t ; x). Computes the complementary error function erfc(x). ; Erfc(x) = (2/sqrt(pi)) Integral(exp(-t^2))dt between x and infinity ; Definition at line 199 of file TMath.cxx. ◆ ErfcInverse(). Double_t TMath::ErfcInverse ; (; Double_t ; x). Returns the inverse of the complementary error function. ; x must be 0<x<2 implement using the quantile of the normal distribution instead of ErfInverse for better numerical precision for large x ; Definition at line 242 of file TMath.cxx. ◆ ErfInverse(). Double_t TMath::ErfInverse ; (; Double_t ; x). Returns the inverse error function. ; x must be <-1<x<1 ; Definition at line 208 of file TMath.cxx. ◆ EulerGamma(). constexpr Double_t TMath::EulerGamma ; (; ). constexpr . Euler-Mascheroni Constant. ; Definition at line 332 of file TMath.h. ◆ Even(). Bool_t TMath::Even ; (; Long_t ; a). inline . Returns true if a is even. ; Definition at line 113 of file TMathBase.h. ◆ Exp(). Double_t TMath::Exp ; (; Double_t ; x). inline . Returns the base-e exponential function of x, which is e raised",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:39167,Availability,error,error,39167,"xpr Double_t TMath::DegToRad ; (; ). constexpr . Conversion from degree to radian: \( \frac{\pi}{180} \). ; Definition at line 79 of file TMath.h. ◆ DiLog(). Double_t TMath::DiLog ; (; Double_t ; x). Modified Struve functions of order 1. ; The DiLogarithm function Code translated by R.Brun from CERNLIB DILOG function C332. ; Definition at line 116 of file TMath.cxx. ◆ E(). constexpr Double_t TMath::E ; (; ). constexpr . Base of natural log: \( e \). ; Definition at line 93 of file TMath.h. ◆ Erf(). Double_t TMath::Erf ; (; Double_t ; x). Computation of the error function erf(x). ; Erf(x) = (2/sqrt(pi)) Integral(exp(-t^2))dt between 0 and x ; Definition at line 190 of file TMath.cxx. ◆ Erfc(). Double_t TMath::Erfc ; (; Double_t ; x). Computes the complementary error function erfc(x). ; Erfc(x) = (2/sqrt(pi)) Integral(exp(-t^2))dt between x and infinity ; Definition at line 199 of file TMath.cxx. ◆ ErfcInverse(). Double_t TMath::ErfcInverse ; (; Double_t ; x). Returns the inverse of the complementary error function. ; x must be 0<x<2 implement using the quantile of the normal distribution instead of ErfInverse for better numerical precision for large x ; Definition at line 242 of file TMath.cxx. ◆ ErfInverse(). Double_t TMath::ErfInverse ; (; Double_t ; x). Returns the inverse error function. ; x must be <-1<x<1 ; Definition at line 208 of file TMath.cxx. ◆ EulerGamma(). constexpr Double_t TMath::EulerGamma ; (; ). constexpr . Euler-Mascheroni Constant. ; Definition at line 332 of file TMath.h. ◆ Even(). Bool_t TMath::Even ; (; Long_t ; a). inline . Returns true if a is even. ; Definition at line 113 of file TMathBase.h. ◆ Exp(). Double_t TMath::Exp ; (; Double_t ; x). inline . Returns the base-e exponential function of x, which is e raised to the power x. ; Definition at line 709 of file TMath.h. ◆ Factorial(). Double_t TMath::Factorial ; (; Int_t ; i). Computes factorial(n). ; Definition at line 252 of file TMath.cxx. ◆ FDist(). Double_t TMath::FDist ; (; Double_t ; ",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:39449,Availability,error,error,39449,"om CERNLIB DILOG function C332. ; Definition at line 116 of file TMath.cxx. ◆ E(). constexpr Double_t TMath::E ; (; ). constexpr . Base of natural log: \( e \). ; Definition at line 93 of file TMath.h. ◆ Erf(). Double_t TMath::Erf ; (; Double_t ; x). Computation of the error function erf(x). ; Erf(x) = (2/sqrt(pi)) Integral(exp(-t^2))dt between 0 and x ; Definition at line 190 of file TMath.cxx. ◆ Erfc(). Double_t TMath::Erfc ; (; Double_t ; x). Computes the complementary error function erfc(x). ; Erfc(x) = (2/sqrt(pi)) Integral(exp(-t^2))dt between x and infinity ; Definition at line 199 of file TMath.cxx. ◆ ErfcInverse(). Double_t TMath::ErfcInverse ; (; Double_t ; x). Returns the inverse of the complementary error function. ; x must be 0<x<2 implement using the quantile of the normal distribution instead of ErfInverse for better numerical precision for large x ; Definition at line 242 of file TMath.cxx. ◆ ErfInverse(). Double_t TMath::ErfInverse ; (; Double_t ; x). Returns the inverse error function. ; x must be <-1<x<1 ; Definition at line 208 of file TMath.cxx. ◆ EulerGamma(). constexpr Double_t TMath::EulerGamma ; (; ). constexpr . Euler-Mascheroni Constant. ; Definition at line 332 of file TMath.h. ◆ Even(). Bool_t TMath::Even ; (; Long_t ; a). inline . Returns true if a is even. ; Definition at line 113 of file TMathBase.h. ◆ Exp(). Double_t TMath::Exp ; (; Double_t ; x). inline . Returns the base-e exponential function of x, which is e raised to the power x. ; Definition at line 709 of file TMath.h. ◆ Factorial(). Double_t TMath::Factorial ; (; Int_t ; i). Computes factorial(n). ; Definition at line 252 of file TMath.cxx. ◆ FDist(). Double_t TMath::FDist ; (; Double_t ; F, . Double_t ; N, . Double_t ; M . ). Computes the density function of F-distribution (probability function, integral of density, is computed in FDistI). ; Parameters N and M stand for degrees of freedom of chi-squares mentioned above parameter F is the actual variable x of the density func",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:41786,Availability,mask,mask,41786,"orAnna Kreshuk ; Definition at line 2277 of file TMath.cxx. ◆ FDistI(). Double_t TMath::FDistI ; (; Double_t ; F, . Double_t ; N, . Double_t ; M . ). Calculates the cumulative distribution function of F-distribution (see ROOT::Math::fdistribution_cdf). ; This function occurs in the statistical test of whether two observed samples have the same variance. For this test a certain statistic F, the ratio of observed dispersion of the first sample to that of the second sample, is calculated. N and M stand for numbers of degrees of freedom in the samples 1-FDistI() is the significance level at which the hypothesis ""1 has smaller variance than 2"" can be rejected. A small numerical value of 1 - FDistI() implies a very significant rejection, in turn implying high confidence in the hypothesis ""1 has variance greater than 2"".; AuthorAnna Kreshuk ; Definition at line 2297 of file TMath.cxx. ◆ Finite() [1/2]. Int_t TMath::Finite ; (; Double_t ; x). inline . Check if it is finite with a mask in order to be consistent in presence of fast math. ; Inspired from the CMSSW FWCore/Utilities package ; Definition at line 770 of file TMath.h. ◆ Finite() [2/2]. Int_t TMath::Finite ; (; Float_t ; x). inline . Check if it is finite with a mask in order to be consistent in presence of fast math. ; Inspired from the CMSSW FWCore/Utilities package ; Definition at line 800 of file TMath.h. ◆ Floor(). Double_t TMath::Floor ; (; Double_t ; x). inline . Rounds x downward, returning the largest integral value that is not greater than x. ; Definition at line 680 of file TMath.h. ◆ FloorNint(). Int_t TMath::FloorNint ; (; Double_t ; x). inline . Returns the nearest integer of TMath::Floor(x). ; Definition at line 686 of file TMath.h. ◆ Freq(). Double_t TMath::Freq ; (; Double_t ; x). Computation of the normal frequency function freq(x). ; Freq(x) = (1/sqrt(2pi)) Integral(exp(-t^2/2))dt between -infinity and x.; Translated from CERNLIB C300 by Rene Brun. ; Definition at line 270 of file TMath.cxx. ◆ G()",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:42031,Availability,mask,mask,42031,"n_cdf). ; This function occurs in the statistical test of whether two observed samples have the same variance. For this test a certain statistic F, the ratio of observed dispersion of the first sample to that of the second sample, is calculated. N and M stand for numbers of degrees of freedom in the samples 1-FDistI() is the significance level at which the hypothesis ""1 has smaller variance than 2"" can be rejected. A small numerical value of 1 - FDistI() implies a very significant rejection, in turn implying high confidence in the hypothesis ""1 has variance greater than 2"".; AuthorAnna Kreshuk ; Definition at line 2297 of file TMath.cxx. ◆ Finite() [1/2]. Int_t TMath::Finite ; (; Double_t ; x). inline . Check if it is finite with a mask in order to be consistent in presence of fast math. ; Inspired from the CMSSW FWCore/Utilities package ; Definition at line 770 of file TMath.h. ◆ Finite() [2/2]. Int_t TMath::Finite ; (; Float_t ; x). inline . Check if it is finite with a mask in order to be consistent in presence of fast math. ; Inspired from the CMSSW FWCore/Utilities package ; Definition at line 800 of file TMath.h. ◆ Floor(). Double_t TMath::Floor ; (; Double_t ; x). inline . Rounds x downward, returning the largest integral value that is not greater than x. ; Definition at line 680 of file TMath.h. ◆ FloorNint(). Int_t TMath::FloorNint ; (; Double_t ; x). inline . Returns the nearest integer of TMath::Floor(x). ; Definition at line 686 of file TMath.h. ◆ Freq(). Double_t TMath::Freq ; (; Double_t ; x). Computation of the normal frequency function freq(x). ; Freq(x) = (1/sqrt(2pi)) Integral(exp(-t^2/2))dt between -infinity and x.; Translated from CERNLIB C300 by Rene Brun. ; Definition at line 270 of file TMath.cxx. ◆ G(). constexpr Double_t TMath::G ; (; ). constexpr . Gravitational constant in: \( m^{3} kg^{-1} s^{-2} \). ; Definition at line 135 of file TMath.h. ◆ GamCf(). Double_t TMath::GamCf ; (; Double_t ; a, . Double_t ; x . ). Computation of the incompl",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:42252,Availability,down,downward,42252,"ated. N and M stand for numbers of degrees of freedom in the samples 1-FDistI() is the significance level at which the hypothesis ""1 has smaller variance than 2"" can be rejected. A small numerical value of 1 - FDistI() implies a very significant rejection, in turn implying high confidence in the hypothesis ""1 has variance greater than 2"".; AuthorAnna Kreshuk ; Definition at line 2297 of file TMath.cxx. ◆ Finite() [1/2]. Int_t TMath::Finite ; (; Double_t ; x). inline . Check if it is finite with a mask in order to be consistent in presence of fast math. ; Inspired from the CMSSW FWCore/Utilities package ; Definition at line 770 of file TMath.h. ◆ Finite() [2/2]. Int_t TMath::Finite ; (; Float_t ; x). inline . Check if it is finite with a mask in order to be consistent in presence of fast math. ; Inspired from the CMSSW FWCore/Utilities package ; Definition at line 800 of file TMath.h. ◆ Floor(). Double_t TMath::Floor ; (; Double_t ; x). inline . Rounds x downward, returning the largest integral value that is not greater than x. ; Definition at line 680 of file TMath.h. ◆ FloorNint(). Int_t TMath::FloorNint ; (; Double_t ; x). inline . Returns the nearest integer of TMath::Floor(x). ; Definition at line 686 of file TMath.h. ◆ Freq(). Double_t TMath::Freq ; (; Double_t ; x). Computation of the normal frequency function freq(x). ; Freq(x) = (1/sqrt(2pi)) Integral(exp(-t^2/2))dt between -infinity and x.; Translated from CERNLIB C300 by Rene Brun. ; Definition at line 270 of file TMath.cxx. ◆ G(). constexpr Double_t TMath::G ; (; ). constexpr . Gravitational constant in: \( m^{3} kg^{-1} s^{-2} \). ; Definition at line 135 of file TMath.h. ◆ GamCf(). Double_t TMath::GamCf ; (; Double_t ; a, . Double_t ; x . ). Computation of the incomplete gamma function P(a,x) via its continued fraction representation. ; AuthorNvE 14-nov-1998 UU-SAP Utrecht ; Definition at line 380 of file TMath.cxx. ◆ Gamma() [1/2]. Double_t TMath::Gamma ; (; Double_t ; a, . Double_t ; x . ). Computatio",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:52047,Availability,error,error,52047,"_t * ; a, . Int_t ; nb, . const Double_t * ; b, . Option_t * ; option . ). Statistical test whether two one-dimensional sets of points are compatible with coming from the same parent distribution, using the Kolmogorov test. ; That is, it is used to compare two experimental distributions of unbinned data. Input:; a,b: One-dimensional arrays of length na, nb, respectively. The elements of a and b must be given in ascending order. option is a character string to specify options ""D"" Put out a line of ""Debug"" printout ""M"" Return the Maximum Kolmogorov distance instead of prob. Output:; The returned value prob is a calculated confidence level which gives a statistical test for compatibility of a and b. Values of prob close to zero are taken as indicating a small probability of compatibility. For two point sets drawn randomly from the same parent distribution, the value of prob should be uniformly distributed between zero and one. in case of error the function return -1 If the 2 sets have a different number of points, the minimum of the two sets is used. Method:; The Kolmogorov test is used. The test statistic is the maximum deviation between the two integrated distribution functions, multiplied by the normalizing factor (rdmax*sqrt(na*nb/(na+nb)).; Code adapted by Rene Brun from CERNLIB routine TKOLMO (Fred James) (W.T. Eadie, D. Drijard, F.E. James, M. Roos and B. Sadoulet, Statistical Methods in Experimental Physics, (North-Holland, Amsterdam 1971) 269-271). Method Improvement by Jason A Detwiler (JADetwiler@lbl.gov); The nuts-and-bolts of the TMath::KolmogorovTest() algorithm is a for-loop over the two sorted arrays a and b representing empirical distribution functions. The for-loop handles 3 cases: when the next points to be evaluated satisfy a>b, a<b, or a=b:; for (Int_t i=0;i<na+nb;i++) {; if (a[ia-1] < b[ib-1]) {; rdiff -= sa;; ia++;; if (ia > na) {ok = kTRUE; break;}; } else if (a[ia-1] > b[ib-1]) {; rdiff += sb;; ib++;; if (ib > nb) {ok = kTRUE; break;}; } else {",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:81790,Availability,down,down,81790,"ion at line 163 of file TMathBase.h. ◆ SignBit() [2/4]. Bool_t TMath::SignBit ; (; Float_t ; a). inline . Returns whether the sign of Float_t a is negative. ; Definition at line 159 of file TMathBase.h. ◆ SignBit() [3/4]. template<typename Integer > . Bool_t TMath::SignBit ; (; Integer ; a). inline . Returns whether the sign of Integer a is negative. ; Definition at line 155 of file TMathBase.h. ◆ SignBit() [4/4]. Bool_t TMath::SignBit ; (; LongDouble_t ; a). inline . Returns whether the sign of LongDouble_t a is negative. ; Definition at line 167 of file TMathBase.h. ◆ Sin(). Double_t TMath::Sin ; (; Double_t ; x). inline . Returns the sine of an angle of x radians. ; Definition at line 588 of file TMath.h. ◆ SinH(). Double_t TMath::SinH ; (; Double_t ; x). inline . Returns the hyperbolic sine of `x. ; Definition at line 606 of file TMath.h. ◆ Sort(). template<typename Element , typename Index > . void TMath::Sort ; (; Index ; n, . const Element * ; a, . Index * ; index, . Bool_t ; down = kTRUE . ). Sort the n elements of the array a of generic templated type Element. ; In output the array index of type Index contains the indices of the sorted array. If down is false sort in increasing order (default is decreasing order).; NOTE that the array index must be created with a length >= n before calling this function. NOTE also that the size type for n must be the same type used for the index array (templated type Index) ; Definition at line 431 of file TMathBase.h. ◆ SortItr(). template<typename Iterator , typename IndexIterator > . void TMath::SortItr ; (; Iterator ; first, . Iterator ; last, . IndexIterator ; index, . Bool_t ; down = kTRUE . ). Sort the n1 elements of the Short_t array defined by its iterators. ; In output the array index contains the indices of the sorted array. If down is false sort in increasing order (default is decreasing order).; NOTE that the array index must be created with a length bigger or equal than the main array before calling this funct",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:81965,Availability,down,down,81965,"SignBit() [3/4]. template<typename Integer > . Bool_t TMath::SignBit ; (; Integer ; a). inline . Returns whether the sign of Integer a is negative. ; Definition at line 155 of file TMathBase.h. ◆ SignBit() [4/4]. Bool_t TMath::SignBit ; (; LongDouble_t ; a). inline . Returns whether the sign of LongDouble_t a is negative. ; Definition at line 167 of file TMathBase.h. ◆ Sin(). Double_t TMath::Sin ; (; Double_t ; x). inline . Returns the sine of an angle of x radians. ; Definition at line 588 of file TMath.h. ◆ SinH(). Double_t TMath::SinH ; (; Double_t ; x). inline . Returns the hyperbolic sine of `x. ; Definition at line 606 of file TMath.h. ◆ Sort(). template<typename Element , typename Index > . void TMath::Sort ; (; Index ; n, . const Element * ; a, . Index * ; index, . Bool_t ; down = kTRUE . ). Sort the n elements of the array a of generic templated type Element. ; In output the array index of type Index contains the indices of the sorted array. If down is false sort in increasing order (default is decreasing order).; NOTE that the array index must be created with a length >= n before calling this function. NOTE also that the size type for n must be the same type used for the index array (templated type Index) ; Definition at line 431 of file TMathBase.h. ◆ SortItr(). template<typename Iterator , typename IndexIterator > . void TMath::SortItr ; (; Iterator ; first, . Iterator ; last, . IndexIterator ; index, . Bool_t ; down = kTRUE . ). Sort the n1 elements of the Short_t array defined by its iterators. ; In output the array index contains the indices of the sorted array. If down is false sort in increasing order (default is decreasing order).; NOTE that the array index must be created with a length bigger or equal than the main array before calling this function. ; Definition at line 406 of file TMathBase.h. ◆ Sq(). Double_t TMath::Sq ; (; Double_t ; x). inline . Returns x*x. ; Definition at line 656 of file TMath.h. ◆ Sqrt(). Double_t TMath::Sqrt ; (; Double_t",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:82445,Availability,down,down,82445," angle of x radians. ; Definition at line 588 of file TMath.h. ◆ SinH(). Double_t TMath::SinH ; (; Double_t ; x). inline . Returns the hyperbolic sine of `x. ; Definition at line 606 of file TMath.h. ◆ Sort(). template<typename Element , typename Index > . void TMath::Sort ; (; Index ; n, . const Element * ; a, . Index * ; index, . Bool_t ; down = kTRUE . ). Sort the n elements of the array a of generic templated type Element. ; In output the array index of type Index contains the indices of the sorted array. If down is false sort in increasing order (default is decreasing order).; NOTE that the array index must be created with a length >= n before calling this function. NOTE also that the size type for n must be the same type used for the index array (templated type Index) ; Definition at line 431 of file TMathBase.h. ◆ SortItr(). template<typename Iterator , typename IndexIterator > . void TMath::SortItr ; (; Iterator ; first, . Iterator ; last, . IndexIterator ; index, . Bool_t ; down = kTRUE . ). Sort the n1 elements of the Short_t array defined by its iterators. ; In output the array index contains the indices of the sorted array. If down is false sort in increasing order (default is decreasing order).; NOTE that the array index must be created with a length bigger or equal than the main array before calling this function. ; Definition at line 406 of file TMathBase.h. ◆ Sq(). Double_t TMath::Sq ; (; Double_t ; x). inline . Returns x*x. ; Definition at line 656 of file TMath.h. ◆ Sqrt(). Double_t TMath::Sqrt ; (; Double_t ; x). inline . Returns the square root of x. ; Definition at line 662 of file TMath.h. ◆ Sqrt2(). constexpr Double_t TMath::Sqrt2 ; (; ). constexpr . \( \sqrt{2} \) ; Definition at line 86 of file TMath.h. ◆ StdDev() [1/3]. template<typename Iterator > . Double_t TMath::StdDev ; (; Iterator ; first, . Iterator ; last . ). Same as RMS. ; Definition at line 528 of file TMath.h. ◆ StdDev() [2/3]. template<typename Iterator , typename WeightIterato",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:82604,Availability,down,down,82604,"e TMath.h. ◆ Sort(). template<typename Element , typename Index > . void TMath::Sort ; (; Index ; n, . const Element * ; a, . Index * ; index, . Bool_t ; down = kTRUE . ). Sort the n elements of the array a of generic templated type Element. ; In output the array index of type Index contains the indices of the sorted array. If down is false sort in increasing order (default is decreasing order).; NOTE that the array index must be created with a length >= n before calling this function. NOTE also that the size type for n must be the same type used for the index array (templated type Index) ; Definition at line 431 of file TMathBase.h. ◆ SortItr(). template<typename Iterator , typename IndexIterator > . void TMath::SortItr ; (; Iterator ; first, . Iterator ; last, . IndexIterator ; index, . Bool_t ; down = kTRUE . ). Sort the n1 elements of the Short_t array defined by its iterators. ; In output the array index contains the indices of the sorted array. If down is false sort in increasing order (default is decreasing order).; NOTE that the array index must be created with a length bigger or equal than the main array before calling this function. ; Definition at line 406 of file TMathBase.h. ◆ Sq(). Double_t TMath::Sq ; (; Double_t ; x). inline . Returns x*x. ; Definition at line 656 of file TMath.h. ◆ Sqrt(). Double_t TMath::Sqrt ; (; Double_t ; x). inline . Returns the square root of x. ; Definition at line 662 of file TMath.h. ◆ Sqrt2(). constexpr Double_t TMath::Sqrt2 ; (; ). constexpr . \( \sqrt{2} \) ; Definition at line 86 of file TMath.h. ◆ StdDev() [1/3]. template<typename Iterator > . Double_t TMath::StdDev ; (; Iterator ; first, . Iterator ; last . ). Same as RMS. ; Definition at line 528 of file TMath.h. ◆ StdDev() [2/3]. template<typename Iterator , typename WeightIterator > . Double_t TMath::StdDev ; (; Iterator ; first, . Iterator ; last, . WeightIterator ; wfirst . ). Same as RMS. ; Definition at line 529 of file TMath.h. ◆ StdDev() [3/3]. template<typena",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:90488,Availability,error,error,90488,"Calculation of Vavilov distribution Nucl.Instr. and Meth. B47(1990), 215-224; Accuracy: quote from the reference above:; ""The results of our code have been compared with the values of the Vavilov; density function computed numerically in an accurate way: our approximation; shows a difference of less than 3% around the peak of the density function, slowly; increasing going towards the extreme tails to the right and to the left""; For a more accurate implementation see the documentation of the Vavilov class and the cumulative ROOT::Math::vavilov_accurate_cdf ; Definition at line 2815 of file TMath.cxx. ◆ VavilovSet(). void TMath::VavilovSet ; (; Double_t ; rkappa, . Double_t ; beta2, . Bool_t ; mode, . Double_t * ; WCM, . Double_t * ; AC, . Double_t * ; HC, . Int_t & ; itype, . Int_t & ; npt . ). Internal function, called by Vavilov and VavilovI. ; Definition at line 2854 of file TMath.cxx. ◆ Voigt(). Double_t TMath::Voigt ; (; Double_t ; xx, . Double_t ; sigma, . Double_t ; lg, . Int_t ; r = 4 . ). Computation of Voigt function (normalised). ; Voigt is a convolution of the two functions: ; \[; gauss(xx) = \frac{1}{(\sqrt{2\pi} sigma)} e^{\frac{xx^{2}}{(2 sigma{^2})}}; \]. and ; \[; lorentz(xx) = \frac{ \frac{1}{\pi} \frac{lg}{2} }{ (xx^{2} + \frac{lg^{2}}{4}) }; \]. .; The Voigt function is known to be the real part of Faddeeva function also called complex error function [2].; The algorithm was developed by J. Humlicek [1]. This code is based on fortran code presented by R. J. Wells [2]. Translated and adapted by Miha D. Puc; To calculate the Faddeeva function with relative error less than 10^(-r). r can be set by the user subject to the constraints 2 <= r <= 5. [1] J. Humlicek, JQSRT, 21, 437 (1982).; [2] R.J. Wells ""Rapid Approximation to the Voigt/Faddeeva Function and its Derivatives"" JQSRT 62 (1999), pp 29-48. . Definition at line 898 of file TMath.cxx. TMath. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:90710,Availability,error,error,90710,"Calculation of Vavilov distribution Nucl.Instr. and Meth. B47(1990), 215-224; Accuracy: quote from the reference above:; ""The results of our code have been compared with the values of the Vavilov; density function computed numerically in an accurate way: our approximation; shows a difference of less than 3% around the peak of the density function, slowly; increasing going towards the extreme tails to the right and to the left""; For a more accurate implementation see the documentation of the Vavilov class and the cumulative ROOT::Math::vavilov_accurate_cdf ; Definition at line 2815 of file TMath.cxx. ◆ VavilovSet(). void TMath::VavilovSet ; (; Double_t ; rkappa, . Double_t ; beta2, . Bool_t ; mode, . Double_t * ; WCM, . Double_t * ; AC, . Double_t * ; HC, . Int_t & ; itype, . Int_t & ; npt . ). Internal function, called by Vavilov and VavilovI. ; Definition at line 2854 of file TMath.cxx. ◆ Voigt(). Double_t TMath::Voigt ; (; Double_t ; xx, . Double_t ; sigma, . Double_t ; lg, . Int_t ; r = 4 . ). Computation of Voigt function (normalised). ; Voigt is a convolution of the two functions: ; \[; gauss(xx) = \frac{1}{(\sqrt{2\pi} sigma)} e^{\frac{xx^{2}}{(2 sigma{^2})}}; \]. and ; \[; lorentz(xx) = \frac{ \frac{1}{\pi} \frac{lg}{2} }{ (xx^{2} + \frac{lg^{2}}{4}) }; \]. .; The Voigt function is known to be the real part of Faddeeva function also called complex error function [2].; The algorithm was developed by J. Humlicek [1]. This code is based on fortran code presented by R. J. Wells [2]. Translated and adapted by Miha D. Puc; To calculate the Faddeeva function with relative error less than 10^(-r). r can be set by the user subject to the constraints 2 <= r <= 5. [1] J. Humlicek, JQSRT, 21, 437 (1982).; [2] R.J. Wells ""Rapid Approximation to the Voigt/Faddeeva Function and its Derivatives"" JQSRT 62 (1999), pp 29-48. . Definition at line 898 of file TMath.cxx. TMath. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:35693,Deployability,continuous,continuous,35693,"rr1 with arr2[0] corresponding to the largest arr1 value and arr2[Narr] the smallest. AuthorAdrian Bevan (bevan.nosp@m.@sla.nosp@m.c.sta.nosp@m.nfor.nosp@m.d.edu) ; Definition at line 1314 of file TMath.cxx. ◆ BubbleLow(). void TMath::BubbleLow ; (; Int_t ; Narr, . Double_t * ; arr1, . Int_t * ; arr2 . ). Opposite ordering of the array arr2[] to that of BubbleHigh. ; AuthorAdrian Bevan (bevan.nosp@m.@sla.nosp@m.c.sta.nosp@m.nfor.nosp@m.d.edu) ; Definition at line 1353 of file TMath.cxx. ◆ C(). constexpr Double_t TMath::C ; (; ). constexpr . Velocity of light in \( m s^{-1} \). ; Definition at line 114 of file TMath.h. ◆ CauchyDist(). Double_t TMath::CauchyDist ; (; Double_t ; x, . Double_t ; t = 0, . Double_t ; s = 1 . ). Computes the density of Cauchy distribution at point x by default, standard Cauchy distribution is used (t=0, s=1) . t is the location parameter; s is the scale parameter. The Cauchy distribution, also called Lorentzian distribution, is a continuous distribution describing resonance behavior The mean and standard deviation of the Cauchy distribution are undefined. The practical meaning of this is that collecting 1,000 data points gives no more accurate an estimate of the mean and standard deviation than does a single point. The formula was taken from ""Engineering Statistics Handbook"" on site http://www.itl.nist.gov/div898/handbook/eda/section3/eda3663.htm; Example:; TF1* fc = new TF1(""fc"", ""TMath::CauchyDist(x, [0], [1])"", -5, 5);; fc->SetParameters(0, 1);; fc->Draw();; TF11-Dim function classDefinition TF1.h:233; TF1::Drawvoid Draw(Option_t *option="""") overrideDraw this function with its current attributes.Definition TF1.cxx:1333; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; AuthorAnna Kreshuk ; Definition at line 2175 of file TMath.cxx. ◆ Ccgs(). constexpr Double_t TMath::Ccgs ; (; ). constexpr . \( cm s^{-1} \) ; Definition at line 121 of file TMath.h. ◆ Ceil(). Double_t TMath::Ceil ; (; Double_t ; x).",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:52260,Deployability,integrat,integrated,52260,"t distribution, using the Kolmogorov test. ; That is, it is used to compare two experimental distributions of unbinned data. Input:; a,b: One-dimensional arrays of length na, nb, respectively. The elements of a and b must be given in ascending order. option is a character string to specify options ""D"" Put out a line of ""Debug"" printout ""M"" Return the Maximum Kolmogorov distance instead of prob. Output:; The returned value prob is a calculated confidence level which gives a statistical test for compatibility of a and b. Values of prob close to zero are taken as indicating a small probability of compatibility. For two point sets drawn randomly from the same parent distribution, the value of prob should be uniformly distributed between zero and one. in case of error the function return -1 If the 2 sets have a different number of points, the minimum of the two sets is used. Method:; The Kolmogorov test is used. The test statistic is the maximum deviation between the two integrated distribution functions, multiplied by the normalizing factor (rdmax*sqrt(na*nb/(na+nb)).; Code adapted by Rene Brun from CERNLIB routine TKOLMO (Fred James) (W.T. Eadie, D. Drijard, F.E. James, M. Roos and B. Sadoulet, Statistical Methods in Experimental Physics, (North-Holland, Amsterdam 1971) 269-271). Method Improvement by Jason A Detwiler (JADetwiler@lbl.gov); The nuts-and-bolts of the TMath::KolmogorovTest() algorithm is a for-loop over the two sorted arrays a and b representing empirical distribution functions. The for-loop handles 3 cases: when the next points to be evaluated satisfy a>b, a<b, or a=b:; for (Int_t i=0;i<na+nb;i++) {; if (a[ia-1] < b[ib-1]) {; rdiff -= sa;; ia++;; if (ia > na) {ok = kTRUE; break;}; } else if (a[ia-1] > b[ib-1]) {; rdiff += sb;; ib++;; if (ib > nb) {ok = kTRUE; break;}; } else {; rdiff += sb - sa;; ia++;; ib++;; if (ia > na) {ok = kTRUE; break;}; if (ib > nb) {ok = kTRUE; break;}; }; rdmax = TMath::Max(rdmax,TMath::Abs(rdiff));; }; b#define b(i)Definition ",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:74562,Deployability,continuous,continuous,74562,"* ; x, . Double_t * ; quantiles, . Double_t * ; prob, . Bool_t ; isSorted = kTRUE, . Int_t * ; index = nullptr, . Int_t ; type = 7 . ). Computes sample quantiles, corresponding to the given probabilities. ; Parameters. [in]xthe data sample ; [in]nits size ; [out]quantilescomputed quantiles are returned in there ; [in]probprobabilities where to compute quantiles ; [in]nprobsize of prob array ; [in]isSortedis the input array x sorted ? ; [in]indexparameter index ; [in]typemethod to compute (from 1 to 9). NOTE:; When the input is not sorted, an array of integers of size n needs to be allocated. It can be passed by the user in parameter index, or, if not passed, it will be allocated inside the function. Following types are provided:. Discontinuous:; type=1 - inverse of the empirical distribution function; type=2 - like type 1, but with averaging at discontinuities; type=3 - SAS definition: nearest even order statistic. Piecewise linear continuous:; In this case, sample quantiles can be obtained by linear interpolation between the k-th order statistic and p(k). -type=4 - linear interpolation of empirical cdf, p(k)=k/n;; type=5 - a very popular definition, p(k) = (k-0.5)/n;; type=6 - used by Minitab and SPSS, p(k) = k/(n+1);; type=7 - used by S-Plus and R, p(k) = (k-1)/(n-1);; type=8 - resulting sample quantiles are approximately median unbiased regardless of the distribution of x. p(k) = (k-1/3)/(n+1/3);; type=9 - resulting sample quantiles are approximately unbiased, when the sample comes from Normal distribution. p(k)=(k-3/8)/(n+1/4);. default type = 7. References:. Hyndman, R.J and Fan, Y, (1996) ""Sample quantiles in statistical packages"" American Statistician, 50, 361-365; R Project documentation for the function quantile of package {stats} . Definition at line 1207 of file TMath.cxx. ◆ QuietNaN(). Double_t TMath::QuietNaN ; (; ). inline . Returns a quiet NaN as defined by IEEE 754. ; Definition at line 902 of file TMath.h. ◆ R(). constexpr Double_t TMath::R ; (; ). ",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:6469,Energy Efficiency,power,power,6469,"le_t);  Returns the hyperbolic cosine of x. ;  ; template<typename T > ; T * Cross (const T v1[3], const T v2[3], T out[3]);  Calculates the Cross Product of two vectors: out = [v1 x v2]. ;  ; constexpr Double_t CUncertainty ();  Speed of light uncertainty. ;  ; constexpr Double_t DegToRad ();  Conversion from degree to radian: \( \frac{\pi}{180} \). ;  ; Double_t DiLog (Double_t x);  Modified Struve functions of order 1. ;  ; constexpr Double_t E ();  Base of natural log: \( e \). ;  ; Double_t Erf (Double_t x);  Computation of the error function erf(x). ;  ; Double_t Erfc (Double_t x);  Computes the complementary error function erfc(x). ;  ; Double_t ErfcInverse (Double_t x);  Returns the inverse of the complementary error function. ;  ; Double_t ErfInverse (Double_t x);  Returns the inverse error function. ;  ; constexpr Double_t EulerGamma ();  Euler-Mascheroni Constant. ;  ; Bool_t Even (Long_t a);  Returns true if a is even. ;  ; Double_t Exp (Double_t x);  Returns the base-e exponential function of x, which is e raised to the power x. ;  ; Double_t Factorial (Int_t i);  Computes factorial(n). ;  ; Double_t FDist (Double_t F, Double_t N, Double_t M);  Computes the density function of F-distribution (probability function, integral of density, is computed in FDistI). ;  ; Double_t FDistI (Double_t F, Double_t N, Double_t M);  Calculates the cumulative distribution function of F-distribution (see ROOT::Math::fdistribution_cdf). ;  ; Int_t Finite (Double_t x);  Check if it is finite with a mask in order to be consistent in presence of fast math. ;  ; Int_t Finite (Float_t x);  Check if it is finite with a mask in order to be consistent in presence of fast math. ;  ; Double_t Floor (Double_t x);  Rounds x downward, returning the largest integral value that is not greater than x. ;  ; Int_t FloorNint (Double_t x);  Returns the nearest integer of TMath::Floor(x). ;  ; Double_t Freq (Double_t x);  Computation of the normal frequency function freq(x). ;  ; constexpr Dou",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:11859,Energy Efficiency,power,power,11859,"ement KOrdStat (Size n, const Element *a, Size k, Size *work=0);  Returns k_th order statistic of the array a of size n (k_th smallest element out of n elements). ;  ; constexpr Double_t KUncertainty ();  Boltzmann's constant uncertainty. ;  ; Double_t Landau (Double_t x, Double_t mpv=0, Double_t sigma=1, Bool_t norm=kFALSE);  The LANDAU function. ;  ; Double_t LandauI (Double_t x);  Returns the cumulative (lower tail integral) of the Landau distribution function at point x. ;  ; Double_t LaplaceDist (Double_t x, Double_t alpha=0, Double_t beta=1);  Computes the probability density function of Laplace distribution at point x, with location parameter alpha and shape parameter beta. ;  ; Double_t LaplaceDistI (Double_t x, Double_t alpha=0, Double_t beta=1);  Computes the cumulative distribution function (lower tail integral) of Laplace distribution at point x, with location parameter alpha and shape parameter beta. ;  ; Double_t Ldexp (Double_t x, Int_t exp);  Returns the result of multiplying x (the significant) by 2 raised to the power of exp (the exponent). ;  ; constexpr Double_t Ln10 ();  Natural log of 10 (to convert log to ln) ;  ; Double_t LnGamma (Double_t z);  Computation of ln[gamma(z)] for all z. ;  ; template<typename Iterator > ; Iterator LocMax (Iterator first, Iterator last);  Returns index of array with the maximum element. ;  ; template<typename T > ; Long64_t LocMax (Long64_t n, const T *a);  Returns index of array with the maximum element. ;  ; template<typename Iterator > ; Iterator LocMin (Iterator first, Iterator last);  Returns index of array with the minimum element. ;  ; template<typename T > ; Long64_t LocMin (Long64_t n, const T *a);  Returns index of array with the minimum element. ;  ; Double_t Log (Double_t x);  Returns the natural logarithm of x. ;  ; Double_t Log10 (Double_t x);  Returns the common (base-10) logarithm of x. ;  ; Double_t Log2 (Double_t x);  Returns the binary (base-2) logarithm of x. ;  ; constexpr Double_t LogE ();  B",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:16583,Energy Efficiency,adapt,adapted,16583,"vogadro constant (Avogadro's Number) in \( mol^{-1} \). ;  ; constexpr Double_t NaUncertainty ();  Avogadro constant (Avogadro's Number) uncertainty. ;  ; Long_t NextPrime (Long_t x);  ; template<typename T > ; Int_t Nint (T x);  Round to nearest integer. Rounds half integers to the nearest even integer. ;  ; template<typename T > ; T * Normal2Plane (const T v1[3], const T v2[3], const T v3[3], T normal[3]);  Calculates a normal vector of a plane. ;  ; Double_t Normalize (Double_t v[3]);  Normalize a vector v in place. ;  ; Float_t Normalize (Float_t v[3]);  Normalize a vector v in place. ;  ; template<typename T > ; T NormCross (const T v1[3], const T v2[3], T out[3]);  Calculates the Normalized Cross Product of two vectors. ;  ; Double_t NormQuantile (Double_t p);  Computes quantiles for standard normal distribution N(0, 1) at probability p. ;  ; Bool_t Odd (Long_t a);  Returns true if a is odd. ;  ; Bool_t Permute (Int_t n, Int_t *a);  Simple recursive algorithm to find the permutations of n natural numbers, not necessarily all distinct adapted from CERNLIB routine PERMU. ;  ; constexpr Double_t Pi ();  \( \pi\) ;  ; constexpr Double_t PiOver2 ();  \( \frac{\pi}{2} \) ;  ; constexpr Double_t PiOver4 ();  \( \frac{\pi}{4} \) ;  ; Double_t Poisson (Double_t x, Double_t par);  Computes the Poisson distribution function for (x,par). ;  ; Double_t PoissonI (Double_t x, Double_t par);  Computes the Discrete Poisson distribution function for (x,par). ;  ; Double_t Power (Double_t x, Double_t y);  Returns x raised to the power y. ;  ; Double_t Power (Double_t x, Int_t y);  Returns x raised to the power y. ;  ; LongDouble_t Power (Long64_t x, Long64_t y);  Returns x raised to the power y. ;  ; LongDouble_t Power (LongDouble_t x, Long64_t y);  Returns x raised to the power y. ;  ; LongDouble_t Power (LongDouble_t x, LongDouble_t y);  Returns x raised to the power y. ;  ; Double_t Prob (Double_t chi2, Int_t ndf);  Computation of the probability for a certain Chi-squared (chi",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:17069,Energy Efficiency,power,power,17069,"or v in place. ;  ; Float_t Normalize (Float_t v[3]);  Normalize a vector v in place. ;  ; template<typename T > ; T NormCross (const T v1[3], const T v2[3], T out[3]);  Calculates the Normalized Cross Product of two vectors. ;  ; Double_t NormQuantile (Double_t p);  Computes quantiles for standard normal distribution N(0, 1) at probability p. ;  ; Bool_t Odd (Long_t a);  Returns true if a is odd. ;  ; Bool_t Permute (Int_t n, Int_t *a);  Simple recursive algorithm to find the permutations of n natural numbers, not necessarily all distinct adapted from CERNLIB routine PERMU. ;  ; constexpr Double_t Pi ();  \( \pi\) ;  ; constexpr Double_t PiOver2 ();  \( \frac{\pi}{2} \) ;  ; constexpr Double_t PiOver4 ();  \( \frac{\pi}{4} \) ;  ; Double_t Poisson (Double_t x, Double_t par);  Computes the Poisson distribution function for (x,par). ;  ; Double_t PoissonI (Double_t x, Double_t par);  Computes the Discrete Poisson distribution function for (x,par). ;  ; Double_t Power (Double_t x, Double_t y);  Returns x raised to the power y. ;  ; Double_t Power (Double_t x, Int_t y);  Returns x raised to the power y. ;  ; LongDouble_t Power (Long64_t x, Long64_t y);  Returns x raised to the power y. ;  ; LongDouble_t Power (LongDouble_t x, Long64_t y);  Returns x raised to the power y. ;  ; LongDouble_t Power (LongDouble_t x, LongDouble_t y);  Returns x raised to the power y. ;  ; Double_t Prob (Double_t chi2, Int_t ndf);  Computation of the probability for a certain Chi-squared (chi2) and number of degrees of freedom (ndf). ;  ; constexpr Double_t Qe ();  Elementary charge in \( C \) . ;  ; constexpr Double_t QeUncertainty ();  Elementary charge uncertainty. ;  ; void Quantiles (Int_t n, Int_t nprob, Double_t *x, Double_t *quantiles, Double_t *prob, Bool_t isSorted=kTRUE, Int_t *index=nullptr, Int_t type=7);  Computes sample quantiles, corresponding to the given probabilities. ;  ; Double_t QuietNaN ();  Returns a quiet NaN as defined by IEEE 754. ;  ; constexpr Double_t R ();  Uni",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:17146,Energy Efficiency,power,power,17146," place. ;  ; template<typename T > ; T NormCross (const T v1[3], const T v2[3], T out[3]);  Calculates the Normalized Cross Product of two vectors. ;  ; Double_t NormQuantile (Double_t p);  Computes quantiles for standard normal distribution N(0, 1) at probability p. ;  ; Bool_t Odd (Long_t a);  Returns true if a is odd. ;  ; Bool_t Permute (Int_t n, Int_t *a);  Simple recursive algorithm to find the permutations of n natural numbers, not necessarily all distinct adapted from CERNLIB routine PERMU. ;  ; constexpr Double_t Pi ();  \( \pi\) ;  ; constexpr Double_t PiOver2 ();  \( \frac{\pi}{2} \) ;  ; constexpr Double_t PiOver4 ();  \( \frac{\pi}{4} \) ;  ; Double_t Poisson (Double_t x, Double_t par);  Computes the Poisson distribution function for (x,par). ;  ; Double_t PoissonI (Double_t x, Double_t par);  Computes the Discrete Poisson distribution function for (x,par). ;  ; Double_t Power (Double_t x, Double_t y);  Returns x raised to the power y. ;  ; Double_t Power (Double_t x, Int_t y);  Returns x raised to the power y. ;  ; LongDouble_t Power (Long64_t x, Long64_t y);  Returns x raised to the power y. ;  ; LongDouble_t Power (LongDouble_t x, Long64_t y);  Returns x raised to the power y. ;  ; LongDouble_t Power (LongDouble_t x, LongDouble_t y);  Returns x raised to the power y. ;  ; Double_t Prob (Double_t chi2, Int_t ndf);  Computation of the probability for a certain Chi-squared (chi2) and number of degrees of freedom (ndf). ;  ; constexpr Double_t Qe ();  Elementary charge in \( C \) . ;  ; constexpr Double_t QeUncertainty ();  Elementary charge uncertainty. ;  ; void Quantiles (Int_t n, Int_t nprob, Double_t *x, Double_t *quantiles, Double_t *prob, Bool_t isSorted=kTRUE, Int_t *index=nullptr, Int_t type=7);  Computes sample quantiles, corresponding to the given probabilities. ;  ; Double_t QuietNaN ();  Returns a quiet NaN as defined by IEEE 754. ;  ; constexpr Double_t R ();  Universal gas constant ( \( Na K \)) in \( J K^{-1} mol^{-1} \) ;  ; constexpr Dou",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:17230,Energy Efficiency,power,power,17230," out[3]);  Calculates the Normalized Cross Product of two vectors. ;  ; Double_t NormQuantile (Double_t p);  Computes quantiles for standard normal distribution N(0, 1) at probability p. ;  ; Bool_t Odd (Long_t a);  Returns true if a is odd. ;  ; Bool_t Permute (Int_t n, Int_t *a);  Simple recursive algorithm to find the permutations of n natural numbers, not necessarily all distinct adapted from CERNLIB routine PERMU. ;  ; constexpr Double_t Pi ();  \( \pi\) ;  ; constexpr Double_t PiOver2 ();  \( \frac{\pi}{2} \) ;  ; constexpr Double_t PiOver4 ();  \( \frac{\pi}{4} \) ;  ; Double_t Poisson (Double_t x, Double_t par);  Computes the Poisson distribution function for (x,par). ;  ; Double_t PoissonI (Double_t x, Double_t par);  Computes the Discrete Poisson distribution function for (x,par). ;  ; Double_t Power (Double_t x, Double_t y);  Returns x raised to the power y. ;  ; Double_t Power (Double_t x, Int_t y);  Returns x raised to the power y. ;  ; LongDouble_t Power (Long64_t x, Long64_t y);  Returns x raised to the power y. ;  ; LongDouble_t Power (LongDouble_t x, Long64_t y);  Returns x raised to the power y. ;  ; LongDouble_t Power (LongDouble_t x, LongDouble_t y);  Returns x raised to the power y. ;  ; Double_t Prob (Double_t chi2, Int_t ndf);  Computation of the probability for a certain Chi-squared (chi2) and number of degrees of freedom (ndf). ;  ; constexpr Double_t Qe ();  Elementary charge in \( C \) . ;  ; constexpr Double_t QeUncertainty ();  Elementary charge uncertainty. ;  ; void Quantiles (Int_t n, Int_t nprob, Double_t *x, Double_t *quantiles, Double_t *prob, Bool_t isSorted=kTRUE, Int_t *index=nullptr, Int_t type=7);  Computes sample quantiles, corresponding to the given probabilities. ;  ; Double_t QuietNaN ();  Returns a quiet NaN as defined by IEEE 754. ;  ; constexpr Double_t R ();  Universal gas constant ( \( Na K \)) in \( J K^{-1} mol^{-1} \) ;  ; constexpr Double_t RadToDeg ();  Conversion from radian to degree: \( \frac{180}{\pi} \). ;  ",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:17318,Energy Efficiency,power,power,17318,"uantile (Double_t p);  Computes quantiles for standard normal distribution N(0, 1) at probability p. ;  ; Bool_t Odd (Long_t a);  Returns true if a is odd. ;  ; Bool_t Permute (Int_t n, Int_t *a);  Simple recursive algorithm to find the permutations of n natural numbers, not necessarily all distinct adapted from CERNLIB routine PERMU. ;  ; constexpr Double_t Pi ();  \( \pi\) ;  ; constexpr Double_t PiOver2 ();  \( \frac{\pi}{2} \) ;  ; constexpr Double_t PiOver4 ();  \( \frac{\pi}{4} \) ;  ; Double_t Poisson (Double_t x, Double_t par);  Computes the Poisson distribution function for (x,par). ;  ; Double_t PoissonI (Double_t x, Double_t par);  Computes the Discrete Poisson distribution function for (x,par). ;  ; Double_t Power (Double_t x, Double_t y);  Returns x raised to the power y. ;  ; Double_t Power (Double_t x, Int_t y);  Returns x raised to the power y. ;  ; LongDouble_t Power (Long64_t x, Long64_t y);  Returns x raised to the power y. ;  ; LongDouble_t Power (LongDouble_t x, Long64_t y);  Returns x raised to the power y. ;  ; LongDouble_t Power (LongDouble_t x, LongDouble_t y);  Returns x raised to the power y. ;  ; Double_t Prob (Double_t chi2, Int_t ndf);  Computation of the probability for a certain Chi-squared (chi2) and number of degrees of freedom (ndf). ;  ; constexpr Double_t Qe ();  Elementary charge in \( C \) . ;  ; constexpr Double_t QeUncertainty ();  Elementary charge uncertainty. ;  ; void Quantiles (Int_t n, Int_t nprob, Double_t *x, Double_t *quantiles, Double_t *prob, Bool_t isSorted=kTRUE, Int_t *index=nullptr, Int_t type=7);  Computes sample quantiles, corresponding to the given probabilities. ;  ; Double_t QuietNaN ();  Returns a quiet NaN as defined by IEEE 754. ;  ; constexpr Double_t R ();  Universal gas constant ( \( Na K \)) in \( J K^{-1} mol^{-1} \) ;  ; constexpr Double_t RadToDeg ();  Conversion from radian to degree: \( \frac{180}{\pi} \). ;  ; Double_t Range (Double_t lb, Double_t ub, Double_t x);  Returns x if lb < x < up, lb",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:17410,Energy Efficiency,power,power,17410,"ability p. ;  ; Bool_t Odd (Long_t a);  Returns true if a is odd. ;  ; Bool_t Permute (Int_t n, Int_t *a);  Simple recursive algorithm to find the permutations of n natural numbers, not necessarily all distinct adapted from CERNLIB routine PERMU. ;  ; constexpr Double_t Pi ();  \( \pi\) ;  ; constexpr Double_t PiOver2 ();  \( \frac{\pi}{2} \) ;  ; constexpr Double_t PiOver4 ();  \( \frac{\pi}{4} \) ;  ; Double_t Poisson (Double_t x, Double_t par);  Computes the Poisson distribution function for (x,par). ;  ; Double_t PoissonI (Double_t x, Double_t par);  Computes the Discrete Poisson distribution function for (x,par). ;  ; Double_t Power (Double_t x, Double_t y);  Returns x raised to the power y. ;  ; Double_t Power (Double_t x, Int_t y);  Returns x raised to the power y. ;  ; LongDouble_t Power (Long64_t x, Long64_t y);  Returns x raised to the power y. ;  ; LongDouble_t Power (LongDouble_t x, Long64_t y);  Returns x raised to the power y. ;  ; LongDouble_t Power (LongDouble_t x, LongDouble_t y);  Returns x raised to the power y. ;  ; Double_t Prob (Double_t chi2, Int_t ndf);  Computation of the probability for a certain Chi-squared (chi2) and number of degrees of freedom (ndf). ;  ; constexpr Double_t Qe ();  Elementary charge in \( C \) . ;  ; constexpr Double_t QeUncertainty ();  Elementary charge uncertainty. ;  ; void Quantiles (Int_t n, Int_t nprob, Double_t *x, Double_t *quantiles, Double_t *prob, Bool_t isSorted=kTRUE, Int_t *index=nullptr, Int_t type=7);  Computes sample quantiles, corresponding to the given probabilities. ;  ; Double_t QuietNaN ();  Returns a quiet NaN as defined by IEEE 754. ;  ; constexpr Double_t R ();  Universal gas constant ( \( Na K \)) in \( J K^{-1} mol^{-1} \) ;  ; constexpr Double_t RadToDeg ();  Conversion from radian to degree: \( \frac{180}{\pi} \). ;  ; Double_t Range (Double_t lb, Double_t ub, Double_t x);  Returns x if lb < x < up, lb if x < lb and ub if x > ub. ;  ; Int_t Range (Int_t lb, Int_t ub, Int_t x);  Returns x if",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:17614,Energy Efficiency,charge,charge,17614,"IB routine PERMU. ;  ; constexpr Double_t Pi ();  \( \pi\) ;  ; constexpr Double_t PiOver2 ();  \( \frac{\pi}{2} \) ;  ; constexpr Double_t PiOver4 ();  \( \frac{\pi}{4} \) ;  ; Double_t Poisson (Double_t x, Double_t par);  Computes the Poisson distribution function for (x,par). ;  ; Double_t PoissonI (Double_t x, Double_t par);  Computes the Discrete Poisson distribution function for (x,par). ;  ; Double_t Power (Double_t x, Double_t y);  Returns x raised to the power y. ;  ; Double_t Power (Double_t x, Int_t y);  Returns x raised to the power y. ;  ; LongDouble_t Power (Long64_t x, Long64_t y);  Returns x raised to the power y. ;  ; LongDouble_t Power (LongDouble_t x, Long64_t y);  Returns x raised to the power y. ;  ; LongDouble_t Power (LongDouble_t x, LongDouble_t y);  Returns x raised to the power y. ;  ; Double_t Prob (Double_t chi2, Int_t ndf);  Computation of the probability for a certain Chi-squared (chi2) and number of degrees of freedom (ndf). ;  ; constexpr Double_t Qe ();  Elementary charge in \( C \) . ;  ; constexpr Double_t QeUncertainty ();  Elementary charge uncertainty. ;  ; void Quantiles (Int_t n, Int_t nprob, Double_t *x, Double_t *quantiles, Double_t *prob, Bool_t isSorted=kTRUE, Int_t *index=nullptr, Int_t type=7);  Computes sample quantiles, corresponding to the given probabilities. ;  ; Double_t QuietNaN ();  Returns a quiet NaN as defined by IEEE 754. ;  ; constexpr Double_t R ();  Universal gas constant ( \( Na K \)) in \( J K^{-1} mol^{-1} \) ;  ; constexpr Double_t RadToDeg ();  Conversion from radian to degree: \( \frac{180}{\pi} \). ;  ; Double_t Range (Double_t lb, Double_t ub, Double_t x);  Returns x if lb < x < up, lb if x < lb and ub if x > ub. ;  ; Int_t Range (Int_t lb, Int_t ub, Int_t x);  Returns x if lb < x < up, lb if x < lb and ub if x > ub. ;  ; Long_t Range (Long_t lb, Long_t ub, Long_t x);  Returns x if lb < x < up, lb if x < lb and ub if x > ub. ;  ; Short_t Range (Short_t lb, Short_t ub, Short_t x);  Returns x if lb < ",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:17688,Energy Efficiency,charge,charge,17688,"expr Double_t PiOver2 ();  \( \frac{\pi}{2} \) ;  ; constexpr Double_t PiOver4 ();  \( \frac{\pi}{4} \) ;  ; Double_t Poisson (Double_t x, Double_t par);  Computes the Poisson distribution function for (x,par). ;  ; Double_t PoissonI (Double_t x, Double_t par);  Computes the Discrete Poisson distribution function for (x,par). ;  ; Double_t Power (Double_t x, Double_t y);  Returns x raised to the power y. ;  ; Double_t Power (Double_t x, Int_t y);  Returns x raised to the power y. ;  ; LongDouble_t Power (Long64_t x, Long64_t y);  Returns x raised to the power y. ;  ; LongDouble_t Power (LongDouble_t x, Long64_t y);  Returns x raised to the power y. ;  ; LongDouble_t Power (LongDouble_t x, LongDouble_t y);  Returns x raised to the power y. ;  ; Double_t Prob (Double_t chi2, Int_t ndf);  Computation of the probability for a certain Chi-squared (chi2) and number of degrees of freedom (ndf). ;  ; constexpr Double_t Qe ();  Elementary charge in \( C \) . ;  ; constexpr Double_t QeUncertainty ();  Elementary charge uncertainty. ;  ; void Quantiles (Int_t n, Int_t nprob, Double_t *x, Double_t *quantiles, Double_t *prob, Bool_t isSorted=kTRUE, Int_t *index=nullptr, Int_t type=7);  Computes sample quantiles, corresponding to the given probabilities. ;  ; Double_t QuietNaN ();  Returns a quiet NaN as defined by IEEE 754. ;  ; constexpr Double_t R ();  Universal gas constant ( \( Na K \)) in \( J K^{-1} mol^{-1} \) ;  ; constexpr Double_t RadToDeg ();  Conversion from radian to degree: \( \frac{180}{\pi} \). ;  ; Double_t Range (Double_t lb, Double_t ub, Double_t x);  Returns x if lb < x < up, lb if x < lb and ub if x > ub. ;  ; Int_t Range (Int_t lb, Int_t ub, Int_t x);  Returns x if lb < x < up, lb if x < lb and ub if x > ub. ;  ; Long_t Range (Long_t lb, Long_t ub, Long_t x);  Returns x if lb < x < up, lb if x < lb and ub if x > ub. ;  ; Short_t Range (Short_t lb, Short_t ub, Short_t x);  Returns x if lb < x < up, lb if x < lb and ub if x > ub. ;  ; ULong_t Range (ULong_t l",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:33371,Energy Efficiency,power,power,33371,"this call. If match is found, function returns position of element. If no match found, function gives nearest element smaller than value. ; Definition at line 347 of file TMathBase.h. ◆ Binomial(). Double_t TMath::Binomial ; (; Int_t ; n, . Int_t ; k . ). Calculates the binomial coefficient n over k. ; Definition at line 2111 of file TMath.cxx. ◆ BinomialI(). Double_t TMath::BinomialI ; (; Double_t ; p, . Int_t ; n, . Int_t ; k . ). Suppose an event occurs with probability p per trial Then the probability P of its occurring k or more times in n trials is termed a cumulative binomial probability the formula is: ; P = sum_from_j=k_to_n(TMath::Binomial (n, j)**TMath::Power (p, j)*TMath::Power (1-p, n-j); pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; nconst Int_t nDefinition legend1.C:16; TMath::BinomialDouble_t Binomial(Int_t n, Int_t k)Calculates the binomial coefficient n over k.Definition TMath.cxx:2111; TMath::PowerLongDouble_t Power(LongDouble_t x, LongDouble_t y)Returns x raised to the power y.Definition TMath.h:721; For n larger than 12 BetaIncomplete is a much better way to evaluate the sum than would be the straightforward sum calculation for n smaller than 12 either method is acceptable (""Numerical Recipes""); Note this function is not exactly implementing the cumulative or the complement of the cumulative of the Binomial distrinution. It is equivalent to ROOT::Math::binomial_cdf_c(k-1,p,n); AuthorAnna Kreshuk ; Definition at line 2141 of file TMath.cxx. ◆ BreitWigner(). Double_t TMath::BreitWigner ; (; Double_t ; x, . Double_t ; mean = 0, . Double_t ; gamma = 1 . ). Calculates a Breit Wigner function with mean and gamma. ; Definition at line 442 of file TMath.cxx. ◆ BreitWignerRelativistic(). Double_t TMath::BreitWignerRelativistic ; (; Double_t ; x, . Double_t ; median = 0, . Double_t ; gamma = 1 . ). Calculates a Relativistic Breit Wigner function with median and gamma. ; Definition at line 452 of file TMath.cxx. ◆ Bu",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:39929,Energy Efficiency,power,power,39929,"omputes the complementary error function erfc(x). ; Erfc(x) = (2/sqrt(pi)) Integral(exp(-t^2))dt between x and infinity ; Definition at line 199 of file TMath.cxx. ◆ ErfcInverse(). Double_t TMath::ErfcInverse ; (; Double_t ; x). Returns the inverse of the complementary error function. ; x must be 0<x<2 implement using the quantile of the normal distribution instead of ErfInverse for better numerical precision for large x ; Definition at line 242 of file TMath.cxx. ◆ ErfInverse(). Double_t TMath::ErfInverse ; (; Double_t ; x). Returns the inverse error function. ; x must be <-1<x<1 ; Definition at line 208 of file TMath.cxx. ◆ EulerGamma(). constexpr Double_t TMath::EulerGamma ; (; ). constexpr . Euler-Mascheroni Constant. ; Definition at line 332 of file TMath.h. ◆ Even(). Bool_t TMath::Even ; (; Long_t ; a). inline . Returns true if a is even. ; Definition at line 113 of file TMathBase.h. ◆ Exp(). Double_t TMath::Exp ; (; Double_t ; x). inline . Returns the base-e exponential function of x, which is e raised to the power x. ; Definition at line 709 of file TMath.h. ◆ Factorial(). Double_t TMath::Factorial ; (; Int_t ; i). Computes factorial(n). ; Definition at line 252 of file TMath.cxx. ◆ FDist(). Double_t TMath::FDist ; (; Double_t ; F, . Double_t ; N, . Double_t ; M . ). Computes the density function of F-distribution (probability function, integral of density, is computed in FDistI). ; Parameters N and M stand for degrees of freedom of chi-squares mentioned above parameter F is the actual variable x of the density function p(x) and the point at which the density function is calculated. About F distribution:; F-distribution arises in testing whether two random samples have the same variance. It is the ratio of two chi-square distributions, with N and M degrees of freedom respectively, where each chi-square is first divided by it's number of degrees of freedom.; AuthorAnna Kreshuk ; Definition at line 2277 of file TMath.cxx. ◆ FDistI(). Double_t TMath::FDistI ; (",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:50174,Energy Efficiency,power,powerful,50174,"xp,yp lies inside the polygon defined by the np points in arrays x and y, kFALSE otherwise. ; Note that the polygon may be open or closed. ; Definition at line 1233 of file TMath.h. ◆ IsNaN() [1/2]. Bool_t TMath::IsNaN ; (; Double_t ; x). inline . Definition at line 892 of file TMath.h. ◆ IsNaN() [2/2]. Bool_t TMath::IsNaN ; (; Float_t ; x). inline . Definition at line 893 of file TMath.h. ◆ K(). constexpr Double_t TMath::K ; (; ). constexpr . Boltzmann's constant in \( J K^{-1} \): \( k \). ; Definition at line 247 of file TMath.h. ◆ Kcgs(). constexpr Double_t TMath::Kcgs ; (; ). constexpr . \( erg K^{-1} \) ; Definition at line 254 of file TMath.h. ◆ KolmogorovProb(). Double_t TMath::KolmogorovProb ; (; Double_t ; z). Calculates the Kolmogorov distribution function,. . \[; P(z) = 2 \sum_{j=1}^{\infty} (-1)^{j-1} e^{-2 j^2 z^2}; \]. which gives the probability that Kolmogorov's test statistic will exceed the value z assuming the null hypothesis. This gives a very powerful test for comparing two one-dimensional distributions. see, for example, Eadie et al, ""statistical Methods in Experimental; Physics', pp 269-270). This function returns the confidence level for the null hypothesis, where:; - \_form#593, and; - \_form#594 is the maximum deviation between a hypothetical distribution; function and an experimental distribution with; - \_form#354 events. NOTE: To compare two experimental distributions with m and n events,; use \_form#595. Accuracy: The function is far too accurate for any imaginable application.; Probabilities less than \_form#596 are returned as zero.; However, remember that the formula is only valid for ""large"" n.; Theta function inversion formula is used for z <= 1; This function was translated by Rene Brun from PROBKL in CERNLIB. ; Definition at line 679 of file TMath.cxx. ◆ KolmogorovTest(). Double_t TMath::KolmogorovTest ; (; Int_t ; na, . const Double_t * ; a, . Int_t ; nb, . const Double_t * ; b, . Option_t * ; option . ). Statistical test whethe",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:52366,Energy Efficiency,adapt,adapted,52366,"ed data. Input:; a,b: One-dimensional arrays of length na, nb, respectively. The elements of a and b must be given in ascending order. option is a character string to specify options ""D"" Put out a line of ""Debug"" printout ""M"" Return the Maximum Kolmogorov distance instead of prob. Output:; The returned value prob is a calculated confidence level which gives a statistical test for compatibility of a and b. Values of prob close to zero are taken as indicating a small probability of compatibility. For two point sets drawn randomly from the same parent distribution, the value of prob should be uniformly distributed between zero and one. in case of error the function return -1 If the 2 sets have a different number of points, the minimum of the two sets is used. Method:; The Kolmogorov test is used. The test statistic is the maximum deviation between the two integrated distribution functions, multiplied by the normalizing factor (rdmax*sqrt(na*nb/(na+nb)).; Code adapted by Rene Brun from CERNLIB routine TKOLMO (Fred James) (W.T. Eadie, D. Drijard, F.E. James, M. Roos and B. Sadoulet, Statistical Methods in Experimental Physics, (North-Holland, Amsterdam 1971) 269-271). Method Improvement by Jason A Detwiler (JADetwiler@lbl.gov); The nuts-and-bolts of the TMath::KolmogorovTest() algorithm is a for-loop over the two sorted arrays a and b representing empirical distribution functions. The for-loop handles 3 cases: when the next points to be evaluated satisfy a>b, a<b, or a=b:; for (Int_t i=0;i<na+nb;i++) {; if (a[ia-1] < b[ib-1]) {; rdiff -= sa;; ia++;; if (ia > na) {ok = kTRUE; break;}; } else if (a[ia-1] > b[ib-1]) {; rdiff += sb;; ib++;; if (ib > nb) {ok = kTRUE; break;}; } else {; rdiff += sb - sa;; ia++;; ib++;; if (ia > na) {ok = kTRUE; break;}; if (ib > nb) {ok = kTRUE; break;}; }; rdmax = TMath::Max(rdmax,TMath::Abs(rdiff));; }; b#define b(i)Definition RSha256.hxx:100; a#define a(i)Definition RSha256.hxx:99; Int_tint Int_tDefinition RtypesCore.h:45; kTRUEconstexpr Bo",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:56493,Energy Efficiency,adapt,adapted,56493,"in work[0,...,k-1] and all indices of the larger element in arbitrary order in work[k+1,..,n-1] work[k] will contain instead the index of the returned element.; Taken from ""Numerical Recipes in C++"" without the index array implemented by Anna Khreshuk.; See also the declarations at the top of this file ; Definition at line 1359 of file TMath.h. ◆ KUncertainty(). constexpr Double_t TMath::KUncertainty ; (; ). constexpr . Boltzmann's constant uncertainty. ; Definition at line 261 of file TMath.h. ◆ Landau(). Double_t TMath::Landau ; (; Double_t ; x, . Double_t ; mu = 0, . Double_t ; sigma = 1, . Bool_t ; norm = kFALSE . ). The LANDAU function. ; mu is a location parameter and correspond approximately to the most probable value and sigma is a scale parameter (not the sigma of the full distribution which is not defined) Note that for mu=0 and sigma=1 (default values) the exact location of the maximum of the distribution (most proper value) is at x = -0.22278 This function has been adapted from the CERNLIB routine G110 denlan. If norm=kTRUE (default is kFALSE) the result is divided by sigma ; Definition at line 492 of file TMath.cxx. ◆ LandauI(). Double_t TMath::LandauI ; (; Double_t ; x). Returns the cumulative (lower tail integral) of the Landau distribution function at point x. ; (see ROOT::Math::landau_cdf) The algorithm was taken from the Cernlib function dislan(G110) Reference: K.S.Kolbig and B.Schorr, ""A program package for the Landau; distribution"", Computer Phys.Comm., 31(1984), 97-111 ; Definition at line 2845 of file TMath.cxx. ◆ LaplaceDist(). Double_t TMath::LaplaceDist ; (; Double_t ; x, . Double_t ; alpha = 0, . Double_t ; beta = 1 . ). Computes the probability density function of Laplace distribution at point x, with location parameter alpha and shape parameter beta. ; By default, alpha=0, beta=1 This distribution is known under different names, most common is double exponential distribution, but it also appears as the two-tailed exponential or the bilate",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:58270,Energy Efficiency,power,power,58270,"int x, with location parameter alpha and shape parameter beta. ; By default, alpha=0, beta=1 This distribution is known under different names, most common is double exponential distribution, but it also appears as the two-tailed exponential or the bilateral exponential distribution ; Definition at line 2364 of file TMath.cxx. ◆ LaplaceDistI(). Double_t TMath::LaplaceDistI ; (; Double_t ; x, . Double_t ; alpha = 0, . Double_t ; beta = 1 . ). Computes the cumulative distribution function (lower tail integral) of Laplace distribution at point x, with location parameter alpha and shape parameter beta. ; By default, alpha=0, beta=1 This distribution is known under different names, most common is double exponential distribution, but it also appears as the two-tailed exponential or the bilateral exponential distribution ; Definition at line 2380 of file TMath.cxx. ◆ Ldexp(). Double_t TMath::Ldexp ; (; Double_t ; x, . Int_t ; exp . ). inline . Returns the result of multiplying x (the significant) by 2 raised to the power of exp (the exponent). ; Definition at line 715 of file TMath.h. ◆ Ln10(). constexpr Double_t TMath::Ln10 ; (; ). constexpr . Natural log of 10 (to convert log to ln) ; Definition at line 100 of file TMath.h. ◆ LnGamma(). Double_t TMath::LnGamma ; (; Double_t ; z). Computation of ln[gamma(z)] for all z. ; C.Lanczos, SIAM Journal of Numerical Analysis B1 (1964), 86.; The accuracy of the result is better than 2e-10.; AuthorNvE 14-nov-1998 UU-SAP Utrecht ; Definition at line 509 of file TMath.cxx. ◆ LocMax() [1/2]. template<typename Iterator > . Iterator TMath::LocMax ; (; Iterator ; first, . Iterator ; last . ). Returns index of array with the maximum element. ; If more than one element is maximum returns first found. ; Definition at line 1030 of file TMath.h. ◆ LocMax() [2/2]. template<typename T > . Long64_t TMath::LocMax ; (; Long64_t ; n, . const T * ; a . ). Returns index of array with the maximum element. ; If more than one element is maximum returns fi",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:70497,Energy Efficiency,adapt,adapted,70497,"gainst possible overflows. ; Definition at line 535 of file TMath.cxx. ◆ Normalize() [2/2]. Float_t TMath::Normalize ; (; Float_t ; v[3]). Normalize a vector v in place. ; Returns the norm of the original vector. ; Definition at line 518 of file TMath.cxx. ◆ NormCross(). template<typename T > . T TMath::NormCross ; (; const T ; v1[3], . const T ; v2[3], . T ; out[3] . ). inline . Calculates the Normalized Cross Product of two vectors. ; Definition at line 951 of file TMath.h. ◆ NormQuantile(). Double_t TMath::NormQuantile ; (; Double_t ; p). Computes quantiles for standard normal distribution N(0, 1) at probability p. ; ALGORITHM AS241 APPL. STATIST. (1988) VOL. 37, NO. 3, 477-484. ; Definition at line 2456 of file TMath.cxx. ◆ Odd(). Bool_t TMath::Odd ; (; Long_t ; a). inline . Returns true if a is odd. ; Definition at line 117 of file TMathBase.h. ◆ Permute(). Bool_t TMath::Permute ; (; Int_t ; n, . Int_t * ; a . ). Simple recursive algorithm to find the permutations of n natural numbers, not necessarily all distinct adapted from CERNLIB routine PERMU. ; The input array has to be initialised with a non descending sequence. The method returns kFALSE when all combinations are exhausted. ; Definition at line 2557 of file TMath.cxx. ◆ Pi(). constexpr Double_t TMath::Pi ; (; ). constexpr . \( \pi\) ; Definition at line 37 of file TMath.h. ◆ PiOver2(). constexpr Double_t TMath::PiOver2 ; (; ). constexpr . \( \frac{\pi}{2} \) ; Definition at line 51 of file TMath.h. ◆ PiOver4(). constexpr Double_t TMath::PiOver4 ; (; ). constexpr . \( \frac{\pi}{4} \) ; Definition at line 58 of file TMath.h. ◆ Poisson(). Double_t TMath::Poisson ; (; Double_t ; x, . Double_t ; par . ). Computes the Poisson distribution function for (x,par). ; The Poisson PDF is implemented by means of Euler's Gamma-function (for the factorial), so for any x integer argument it is the correct Poisson distribution. BUT for non-integer x values, it IS NOT equal to the Poisson distribution !. Definition at lin",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:71890,Energy Efficiency,power,power,71890,"xpr . \( \frac{\pi}{2} \) ; Definition at line 51 of file TMath.h. ◆ PiOver4(). constexpr Double_t TMath::PiOver4 ; (; ). constexpr . \( \frac{\pi}{4} \) ; Definition at line 58 of file TMath.h. ◆ Poisson(). Double_t TMath::Poisson ; (; Double_t ; x, . Double_t ; par . ). Computes the Poisson distribution function for (x,par). ; The Poisson PDF is implemented by means of Euler's Gamma-function (for the factorial), so for any x integer argument it is the correct Poisson distribution. BUT for non-integer x values, it IS NOT equal to the Poisson distribution !. Definition at line 587 of file TMath.cxx. ◆ PoissonI(). Double_t TMath::PoissonI ; (; Double_t ; x, . Double_t ; par . ). Computes the Discrete Poisson distribution function for (x,par). ; This is a discrete and a non-smooth function. This function is equivalent to ROOT::Math::poisson_pdf. Definition at line 615 of file TMath.cxx. ◆ Power() [1/5]. Double_t TMath::Power ; (; Double_t ; x, . Double_t ; y . ). inline . Returns x raised to the power y. ; Definition at line 739 of file TMath.h. ◆ Power() [2/5]. Double_t TMath::Power ; (; Double_t ; x, . Int_t ; y . ). inline . Returns x raised to the power y. ; Definition at line 745 of file TMath.h. ◆ Power() [3/5]. LongDouble_t TMath::Power ; (; Long64_t ; x, . Long64_t ; y . ). inline . Returns x raised to the power y. ; Definition at line 733 of file TMath.h. ◆ Power() [4/5]. LongDouble_t TMath::Power ; (; LongDouble_t ; x, . Long64_t ; y . ). inline . Returns x raised to the power y. ; Definition at line 727 of file TMath.h. ◆ Power() [5/5]. LongDouble_t TMath::Power ; (; LongDouble_t ; x, . LongDouble_t ; y . ). inline . Returns x raised to the power y. ; Definition at line 721 of file TMath.h. ◆ Prob(). Double_t TMath::Prob ; (; Double_t ; chi2, . Int_t ; ndf . ). Computation of the probability for a certain Chi-squared (chi2) and number of degrees of freedom (ndf). ; Calculations are based on the incomplete gamma function P(a,x), where a=ndf/2 and x=chi2/2.; P",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:72049,Energy Efficiency,power,power,72049,"inition at line 58 of file TMath.h. ◆ Poisson(). Double_t TMath::Poisson ; (; Double_t ; x, . Double_t ; par . ). Computes the Poisson distribution function for (x,par). ; The Poisson PDF is implemented by means of Euler's Gamma-function (for the factorial), so for any x integer argument it is the correct Poisson distribution. BUT for non-integer x values, it IS NOT equal to the Poisson distribution !. Definition at line 587 of file TMath.cxx. ◆ PoissonI(). Double_t TMath::PoissonI ; (; Double_t ; x, . Double_t ; par . ). Computes the Discrete Poisson distribution function for (x,par). ; This is a discrete and a non-smooth function. This function is equivalent to ROOT::Math::poisson_pdf. Definition at line 615 of file TMath.cxx. ◆ Power() [1/5]. Double_t TMath::Power ; (; Double_t ; x, . Double_t ; y . ). inline . Returns x raised to the power y. ; Definition at line 739 of file TMath.h. ◆ Power() [2/5]. Double_t TMath::Power ; (; Double_t ; x, . Int_t ; y . ). inline . Returns x raised to the power y. ; Definition at line 745 of file TMath.h. ◆ Power() [3/5]. LongDouble_t TMath::Power ; (; Long64_t ; x, . Long64_t ; y . ). inline . Returns x raised to the power y. ; Definition at line 733 of file TMath.h. ◆ Power() [4/5]. LongDouble_t TMath::Power ; (; LongDouble_t ; x, . Long64_t ; y . ). inline . Returns x raised to the power y. ; Definition at line 727 of file TMath.h. ◆ Power() [5/5]. LongDouble_t TMath::Power ; (; LongDouble_t ; x, . LongDouble_t ; y . ). inline . Returns x raised to the power y. ; Definition at line 721 of file TMath.h. ◆ Prob(). Double_t TMath::Prob ; (; Double_t ; chi2, . Int_t ; ndf . ). Computation of the probability for a certain Chi-squared (chi2) and number of degrees of freedom (ndf). ; Calculations are based on the incomplete gamma function P(a,x), where a=ndf/2 and x=chi2/2.; P(a,x) represents the probability that the observed Chi-squared for a correct model should be less than the value chi2.; The returned probability corresponds to",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:72215,Energy Efficiency,power,power,72215,"r). ; The Poisson PDF is implemented by means of Euler's Gamma-function (for the factorial), so for any x integer argument it is the correct Poisson distribution. BUT for non-integer x values, it IS NOT equal to the Poisson distribution !. Definition at line 587 of file TMath.cxx. ◆ PoissonI(). Double_t TMath::PoissonI ; (; Double_t ; x, . Double_t ; par . ). Computes the Discrete Poisson distribution function for (x,par). ; This is a discrete and a non-smooth function. This function is equivalent to ROOT::Math::poisson_pdf. Definition at line 615 of file TMath.cxx. ◆ Power() [1/5]. Double_t TMath::Power ; (; Double_t ; x, . Double_t ; y . ). inline . Returns x raised to the power y. ; Definition at line 739 of file TMath.h. ◆ Power() [2/5]. Double_t TMath::Power ; (; Double_t ; x, . Int_t ; y . ). inline . Returns x raised to the power y. ; Definition at line 745 of file TMath.h. ◆ Power() [3/5]. LongDouble_t TMath::Power ; (; Long64_t ; x, . Long64_t ; y . ). inline . Returns x raised to the power y. ; Definition at line 733 of file TMath.h. ◆ Power() [4/5]. LongDouble_t TMath::Power ; (; LongDouble_t ; x, . Long64_t ; y . ). inline . Returns x raised to the power y. ; Definition at line 727 of file TMath.h. ◆ Power() [5/5]. LongDouble_t TMath::Power ; (; LongDouble_t ; x, . LongDouble_t ; y . ). inline . Returns x raised to the power y. ; Definition at line 721 of file TMath.h. ◆ Prob(). Double_t TMath::Prob ; (; Double_t ; chi2, . Int_t ; ndf . ). Computation of the probability for a certain Chi-squared (chi2) and number of degrees of freedom (ndf). ; Calculations are based on the incomplete gamma function P(a,x), where a=ndf/2 and x=chi2/2.; P(a,x) represents the probability that the observed Chi-squared for a correct model should be less than the value chi2.; The returned probability corresponds to 1-P(a,x), which denotes the probability that an observed Chi-squared exceeds the value chi2 by chance, even for a correct model.; AuthorNvE 14-nov-1998 UU-SAP Utrech",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:72385,Energy Efficiency,power,power,72385," non-integer x values, it IS NOT equal to the Poisson distribution !. Definition at line 587 of file TMath.cxx. ◆ PoissonI(). Double_t TMath::PoissonI ; (; Double_t ; x, . Double_t ; par . ). Computes the Discrete Poisson distribution function for (x,par). ; This is a discrete and a non-smooth function. This function is equivalent to ROOT::Math::poisson_pdf. Definition at line 615 of file TMath.cxx. ◆ Power() [1/5]. Double_t TMath::Power ; (; Double_t ; x, . Double_t ; y . ). inline . Returns x raised to the power y. ; Definition at line 739 of file TMath.h. ◆ Power() [2/5]. Double_t TMath::Power ; (; Double_t ; x, . Int_t ; y . ). inline . Returns x raised to the power y. ; Definition at line 745 of file TMath.h. ◆ Power() [3/5]. LongDouble_t TMath::Power ; (; Long64_t ; x, . Long64_t ; y . ). inline . Returns x raised to the power y. ; Definition at line 733 of file TMath.h. ◆ Power() [4/5]. LongDouble_t TMath::Power ; (; LongDouble_t ; x, . Long64_t ; y . ). inline . Returns x raised to the power y. ; Definition at line 727 of file TMath.h. ◆ Power() [5/5]. LongDouble_t TMath::Power ; (; LongDouble_t ; x, . LongDouble_t ; y . ). inline . Returns x raised to the power y. ; Definition at line 721 of file TMath.h. ◆ Prob(). Double_t TMath::Prob ; (; Double_t ; chi2, . Int_t ; ndf . ). Computation of the probability for a certain Chi-squared (chi2) and number of degrees of freedom (ndf). ; Calculations are based on the incomplete gamma function P(a,x), where a=ndf/2 and x=chi2/2.; P(a,x) represents the probability that the observed Chi-squared for a correct model should be less than the value chi2.; The returned probability corresponds to 1-P(a,x), which denotes the probability that an observed Chi-squared exceeds the value chi2 by chance, even for a correct model.; AuthorNvE 14-nov-1998 UU-SAP Utrecht ; Definition at line 637 of file TMath.cxx. ◆ Qe(). constexpr Double_t TMath::Qe ; (; ). constexpr . Elementary charge in \( C \) . ; Definition at line 339 of file TMa",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:72559,Energy Efficiency,power,power,72559,"uble_t ; par . ). Computes the Discrete Poisson distribution function for (x,par). ; This is a discrete and a non-smooth function. This function is equivalent to ROOT::Math::poisson_pdf. Definition at line 615 of file TMath.cxx. ◆ Power() [1/5]. Double_t TMath::Power ; (; Double_t ; x, . Double_t ; y . ). inline . Returns x raised to the power y. ; Definition at line 739 of file TMath.h. ◆ Power() [2/5]. Double_t TMath::Power ; (; Double_t ; x, . Int_t ; y . ). inline . Returns x raised to the power y. ; Definition at line 745 of file TMath.h. ◆ Power() [3/5]. LongDouble_t TMath::Power ; (; Long64_t ; x, . Long64_t ; y . ). inline . Returns x raised to the power y. ; Definition at line 733 of file TMath.h. ◆ Power() [4/5]. LongDouble_t TMath::Power ; (; LongDouble_t ; x, . Long64_t ; y . ). inline . Returns x raised to the power y. ; Definition at line 727 of file TMath.h. ◆ Power() [5/5]. LongDouble_t TMath::Power ; (; LongDouble_t ; x, . LongDouble_t ; y . ). inline . Returns x raised to the power y. ; Definition at line 721 of file TMath.h. ◆ Prob(). Double_t TMath::Prob ; (; Double_t ; chi2, . Int_t ; ndf . ). Computation of the probability for a certain Chi-squared (chi2) and number of degrees of freedom (ndf). ; Calculations are based on the incomplete gamma function P(a,x), where a=ndf/2 and x=chi2/2.; P(a,x) represents the probability that the observed Chi-squared for a correct model should be less than the value chi2.; The returned probability corresponds to 1-P(a,x), which denotes the probability that an observed Chi-squared exceeds the value chi2 by chance, even for a correct model.; AuthorNvE 14-nov-1998 UU-SAP Utrecht ; Definition at line 637 of file TMath.cxx. ◆ Qe(). constexpr Double_t TMath::Qe ; (; ). constexpr . Elementary charge in \( C \) . ; Definition at line 339 of file TMath.h. ◆ QeUncertainty(). constexpr Double_t TMath::QeUncertainty ; (; ). constexpr . Elementary charge uncertainty. ; Definition at line 346 of file TMath.h. ◆ Quantiles(). v",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:73321,Energy Efficiency,charge,charge,73321,"_t ; x, . Long64_t ; y . ). inline . Returns x raised to the power y. ; Definition at line 727 of file TMath.h. ◆ Power() [5/5]. LongDouble_t TMath::Power ; (; LongDouble_t ; x, . LongDouble_t ; y . ). inline . Returns x raised to the power y. ; Definition at line 721 of file TMath.h. ◆ Prob(). Double_t TMath::Prob ; (; Double_t ; chi2, . Int_t ; ndf . ). Computation of the probability for a certain Chi-squared (chi2) and number of degrees of freedom (ndf). ; Calculations are based on the incomplete gamma function P(a,x), where a=ndf/2 and x=chi2/2.; P(a,x) represents the probability that the observed Chi-squared for a correct model should be less than the value chi2.; The returned probability corresponds to 1-P(a,x), which denotes the probability that an observed Chi-squared exceeds the value chi2 by chance, even for a correct model.; AuthorNvE 14-nov-1998 UU-SAP Utrecht ; Definition at line 637 of file TMath.cxx. ◆ Qe(). constexpr Double_t TMath::Qe ; (; ). constexpr . Elementary charge in \( C \) . ; Definition at line 339 of file TMath.h. ◆ QeUncertainty(). constexpr Double_t TMath::QeUncertainty ; (; ). constexpr . Elementary charge uncertainty. ; Definition at line 346 of file TMath.h. ◆ Quantiles(). void TMath::Quantiles ; (; Int_t ; n, . Int_t ; nprob, . Double_t * ; x, . Double_t * ; quantiles, . Double_t * ; prob, . Bool_t ; isSorted = kTRUE, . Int_t * ; index = nullptr, . Int_t ; type = 7 . ). Computes sample quantiles, corresponding to the given probabilities. ; Parameters. [in]xthe data sample ; [in]nits size ; [out]quantilescomputed quantiles are returned in there ; [in]probprobabilities where to compute quantiles ; [in]nprobsize of prob array ; [in]isSortedis the input array x sorted ? ; [in]indexparameter index ; [in]typemethod to compute (from 1 to 9). NOTE:; When the input is not sorted, an array of integers of size n needs to be allocated. It can be passed by the user in parameter index, or, if not passed, it will be allocated inside the function. ",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:73473,Energy Efficiency,charge,charge,73473,"er ; (; LongDouble_t ; x, . LongDouble_t ; y . ). inline . Returns x raised to the power y. ; Definition at line 721 of file TMath.h. ◆ Prob(). Double_t TMath::Prob ; (; Double_t ; chi2, . Int_t ; ndf . ). Computation of the probability for a certain Chi-squared (chi2) and number of degrees of freedom (ndf). ; Calculations are based on the incomplete gamma function P(a,x), where a=ndf/2 and x=chi2/2.; P(a,x) represents the probability that the observed Chi-squared for a correct model should be less than the value chi2.; The returned probability corresponds to 1-P(a,x), which denotes the probability that an observed Chi-squared exceeds the value chi2 by chance, even for a correct model.; AuthorNvE 14-nov-1998 UU-SAP Utrecht ; Definition at line 637 of file TMath.cxx. ◆ Qe(). constexpr Double_t TMath::Qe ; (; ). constexpr . Elementary charge in \( C \) . ; Definition at line 339 of file TMath.h. ◆ QeUncertainty(). constexpr Double_t TMath::QeUncertainty ; (; ). constexpr . Elementary charge uncertainty. ; Definition at line 346 of file TMath.h. ◆ Quantiles(). void TMath::Quantiles ; (; Int_t ; n, . Int_t ; nprob, . Double_t * ; x, . Double_t * ; quantiles, . Double_t * ; prob, . Bool_t ; isSorted = kTRUE, . Int_t * ; index = nullptr, . Int_t ; type = 7 . ). Computes sample quantiles, corresponding to the given probabilities. ; Parameters. [in]xthe data sample ; [in]nits size ; [out]quantilescomputed quantiles are returned in there ; [in]probprobabilities where to compute quantiles ; [in]nprobsize of prob array ; [in]isSortedis the input array x sorted ? ; [in]indexparameter index ; [in]typemethod to compute (from 1 to 9). NOTE:; When the input is not sorted, an array of integers of size n needs to be allocated. It can be passed by the user in parameter index, or, if not passed, it will be allocated inside the function. Following types are provided:. Discontinuous:; type=1 - inverse of the empirical distribution function; type=2 - like type 1, but with averaging at disc",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:74204,Energy Efficiency,allocate,allocated,74204,"l.; AuthorNvE 14-nov-1998 UU-SAP Utrecht ; Definition at line 637 of file TMath.cxx. ◆ Qe(). constexpr Double_t TMath::Qe ; (; ). constexpr . Elementary charge in \( C \) . ; Definition at line 339 of file TMath.h. ◆ QeUncertainty(). constexpr Double_t TMath::QeUncertainty ; (; ). constexpr . Elementary charge uncertainty. ; Definition at line 346 of file TMath.h. ◆ Quantiles(). void TMath::Quantiles ; (; Int_t ; n, . Int_t ; nprob, . Double_t * ; x, . Double_t * ; quantiles, . Double_t * ; prob, . Bool_t ; isSorted = kTRUE, . Int_t * ; index = nullptr, . Int_t ; type = 7 . ). Computes sample quantiles, corresponding to the given probabilities. ; Parameters. [in]xthe data sample ; [in]nits size ; [out]quantilescomputed quantiles are returned in there ; [in]probprobabilities where to compute quantiles ; [in]nprobsize of prob array ; [in]isSortedis the input array x sorted ? ; [in]indexparameter index ; [in]typemethod to compute (from 1 to 9). NOTE:; When the input is not sorted, an array of integers of size n needs to be allocated. It can be passed by the user in parameter index, or, if not passed, it will be allocated inside the function. Following types are provided:. Discontinuous:; type=1 - inverse of the empirical distribution function; type=2 - like type 1, but with averaging at discontinuities; type=3 - SAS definition: nearest even order statistic. Piecewise linear continuous:; In this case, sample quantiles can be obtained by linear interpolation between the k-th order statistic and p(k). -type=4 - linear interpolation of empirical cdf, p(k)=k/n;; type=5 - a very popular definition, p(k) = (k-0.5)/n;; type=6 - used by Minitab and SPSS, p(k) = k/(n+1);; type=7 - used by S-Plus and R, p(k) = (k-1)/(n-1);; type=8 - resulting sample quantiles are approximately median unbiased regardless of the distribution of x. p(k) = (k-1/3)/(n+1/3);; type=9 - resulting sample quantiles are approximately unbiased, when the sample comes from Normal distribution. p(k)=(k-3/8)/(n+1",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:74294,Energy Efficiency,allocate,allocated,74294,"r Double_t TMath::Qe ; (; ). constexpr . Elementary charge in \( C \) . ; Definition at line 339 of file TMath.h. ◆ QeUncertainty(). constexpr Double_t TMath::QeUncertainty ; (; ). constexpr . Elementary charge uncertainty. ; Definition at line 346 of file TMath.h. ◆ Quantiles(). void TMath::Quantiles ; (; Int_t ; n, . Int_t ; nprob, . Double_t * ; x, . Double_t * ; quantiles, . Double_t * ; prob, . Bool_t ; isSorted = kTRUE, . Int_t * ; index = nullptr, . Int_t ; type = 7 . ). Computes sample quantiles, corresponding to the given probabilities. ; Parameters. [in]xthe data sample ; [in]nits size ; [out]quantilescomputed quantiles are returned in there ; [in]probprobabilities where to compute quantiles ; [in]nprobsize of prob array ; [in]isSortedis the input array x sorted ? ; [in]indexparameter index ; [in]typemethod to compute (from 1 to 9). NOTE:; When the input is not sorted, an array of integers of size n needs to be allocated. It can be passed by the user in parameter index, or, if not passed, it will be allocated inside the function. Following types are provided:. Discontinuous:; type=1 - inverse of the empirical distribution function; type=2 - like type 1, but with averaging at discontinuities; type=3 - SAS definition: nearest even order statistic. Piecewise linear continuous:; In this case, sample quantiles can be obtained by linear interpolation between the k-th order statistic and p(k). -type=4 - linear interpolation of empirical cdf, p(k)=k/n;; type=5 - a very popular definition, p(k) = (k-0.5)/n;; type=6 - used by Minitab and SPSS, p(k) = k/(n+1);; type=7 - used by S-Plus and R, p(k) = (k-1)/(n-1);; type=8 - resulting sample quantiles are approximately median unbiased regardless of the distribution of x. p(k) = (k-1/3)/(n+1/3);; type=9 - resulting sample quantiles are approximately unbiased, when the sample comes from Normal distribution. p(k)=(k-3/8)/(n+1/4);. default type = 7. References:. Hyndman, R.J and Fan, Y, (1996) ""Sample quantiles in statistica",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:90637,Energy Efficiency,adapt,adapted,90637,"Calculation of Vavilov distribution Nucl.Instr. and Meth. B47(1990), 215-224; Accuracy: quote from the reference above:; ""The results of our code have been compared with the values of the Vavilov; density function computed numerically in an accurate way: our approximation; shows a difference of less than 3% around the peak of the density function, slowly; increasing going towards the extreme tails to the right and to the left""; For a more accurate implementation see the documentation of the Vavilov class and the cumulative ROOT::Math::vavilov_accurate_cdf ; Definition at line 2815 of file TMath.cxx. ◆ VavilovSet(). void TMath::VavilovSet ; (; Double_t ; rkappa, . Double_t ; beta2, . Bool_t ; mode, . Double_t * ; WCM, . Double_t * ; AC, . Double_t * ; HC, . Int_t & ; itype, . Int_t & ; npt . ). Internal function, called by Vavilov and VavilovI. ; Definition at line 2854 of file TMath.cxx. ◆ Voigt(). Double_t TMath::Voigt ; (; Double_t ; xx, . Double_t ; sigma, . Double_t ; lg, . Int_t ; r = 4 . ). Computation of Voigt function (normalised). ; Voigt is a convolution of the two functions: ; \[; gauss(xx) = \frac{1}{(\sqrt{2\pi} sigma)} e^{\frac{xx^{2}}{(2 sigma{^2})}}; \]. and ; \[; lorentz(xx) = \frac{ \frac{1}{\pi} \frac{lg}{2} }{ (xx^{2} + \frac{lg^{2}}{4}) }; \]. .; The Voigt function is known to be the real part of Faddeeva function also called complex error function [2].; The algorithm was developed by J. Humlicek [1]. This code is based on fortran code presented by R. J. Wells [2]. Translated and adapted by Miha D. Puc; To calculate the Faddeeva function with relative error less than 10^(-r). r can be set by the user subject to the constraints 2 <= r <= 5. [1] J. Humlicek, JQSRT, 21, 437 (1982).; [2] R.J. Wells ""Rapid Approximation to the Voigt/Faddeeva Function and its Derivatives"" JQSRT 62 (1999), pp 29-48. . Definition at line 898 of file TMath.cxx. TMath. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:16604,Integrability,rout,routine,16604,"vogadro constant (Avogadro's Number) in \( mol^{-1} \). ;  ; constexpr Double_t NaUncertainty ();  Avogadro constant (Avogadro's Number) uncertainty. ;  ; Long_t NextPrime (Long_t x);  ; template<typename T > ; Int_t Nint (T x);  Round to nearest integer. Rounds half integers to the nearest even integer. ;  ; template<typename T > ; T * Normal2Plane (const T v1[3], const T v2[3], const T v3[3], T normal[3]);  Calculates a normal vector of a plane. ;  ; Double_t Normalize (Double_t v[3]);  Normalize a vector v in place. ;  ; Float_t Normalize (Float_t v[3]);  Normalize a vector v in place. ;  ; template<typename T > ; T NormCross (const T v1[3], const T v2[3], T out[3]);  Calculates the Normalized Cross Product of two vectors. ;  ; Double_t NormQuantile (Double_t p);  Computes quantiles for standard normal distribution N(0, 1) at probability p. ;  ; Bool_t Odd (Long_t a);  Returns true if a is odd. ;  ; Bool_t Permute (Int_t n, Int_t *a);  Simple recursive algorithm to find the permutations of n natural numbers, not necessarily all distinct adapted from CERNLIB routine PERMU. ;  ; constexpr Double_t Pi ();  \( \pi\) ;  ; constexpr Double_t PiOver2 ();  \( \frac{\pi}{2} \) ;  ; constexpr Double_t PiOver4 ();  \( \frac{\pi}{4} \) ;  ; Double_t Poisson (Double_t x, Double_t par);  Computes the Poisson distribution function for (x,par). ;  ; Double_t PoissonI (Double_t x, Double_t par);  Computes the Discrete Poisson distribution function for (x,par). ;  ; Double_t Power (Double_t x, Double_t y);  Returns x raised to the power y. ;  ; Double_t Power (Double_t x, Int_t y);  Returns x raised to the power y. ;  ; LongDouble_t Power (Long64_t x, Long64_t y);  Returns x raised to the power y. ;  ; LongDouble_t Power (LongDouble_t x, Long64_t y);  Returns x raised to the power y. ;  ; LongDouble_t Power (LongDouble_t x, LongDouble_t y);  Returns x raised to the power y. ;  ; Double_t Prob (Double_t chi2, Int_t ndf);  Computation of the probability for a certain Chi-squared (chi",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:52260,Integrability,integrat,integrated,52260,"t distribution, using the Kolmogorov test. ; That is, it is used to compare two experimental distributions of unbinned data. Input:; a,b: One-dimensional arrays of length na, nb, respectively. The elements of a and b must be given in ascending order. option is a character string to specify options ""D"" Put out a line of ""Debug"" printout ""M"" Return the Maximum Kolmogorov distance instead of prob. Output:; The returned value prob is a calculated confidence level which gives a statistical test for compatibility of a and b. Values of prob close to zero are taken as indicating a small probability of compatibility. For two point sets drawn randomly from the same parent distribution, the value of prob should be uniformly distributed between zero and one. in case of error the function return -1 If the 2 sets have a different number of points, the minimum of the two sets is used. Method:; The Kolmogorov test is used. The test statistic is the maximum deviation between the two integrated distribution functions, multiplied by the normalizing factor (rdmax*sqrt(na*nb/(na+nb)).; Code adapted by Rene Brun from CERNLIB routine TKOLMO (Fred James) (W.T. Eadie, D. Drijard, F.E. James, M. Roos and B. Sadoulet, Statistical Methods in Experimental Physics, (North-Holland, Amsterdam 1971) 269-271). Method Improvement by Jason A Detwiler (JADetwiler@lbl.gov); The nuts-and-bolts of the TMath::KolmogorovTest() algorithm is a for-loop over the two sorted arrays a and b representing empirical distribution functions. The for-loop handles 3 cases: when the next points to be evaluated satisfy a>b, a<b, or a=b:; for (Int_t i=0;i<na+nb;i++) {; if (a[ia-1] < b[ib-1]) {; rdiff -= sa;; ia++;; if (ia > na) {ok = kTRUE; break;}; } else if (a[ia-1] > b[ib-1]) {; rdiff += sb;; ib++;; if (ib > nb) {ok = kTRUE; break;}; } else {; rdiff += sb - sa;; ia++;; ib++;; if (ia > na) {ok = kTRUE; break;}; if (ib > nb) {ok = kTRUE; break;}; }; rdmax = TMath::Max(rdmax,TMath::Abs(rdiff));; }; b#define b(i)Definition ",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:52400,Integrability,rout,routine,52400,"ed data. Input:; a,b: One-dimensional arrays of length na, nb, respectively. The elements of a and b must be given in ascending order. option is a character string to specify options ""D"" Put out a line of ""Debug"" printout ""M"" Return the Maximum Kolmogorov distance instead of prob. Output:; The returned value prob is a calculated confidence level which gives a statistical test for compatibility of a and b. Values of prob close to zero are taken as indicating a small probability of compatibility. For two point sets drawn randomly from the same parent distribution, the value of prob should be uniformly distributed between zero and one. in case of error the function return -1 If the 2 sets have a different number of points, the minimum of the two sets is used. Method:; The Kolmogorov test is used. The test statistic is the maximum deviation between the two integrated distribution functions, multiplied by the normalizing factor (rdmax*sqrt(na*nb/(na+nb)).; Code adapted by Rene Brun from CERNLIB routine TKOLMO (Fred James) (W.T. Eadie, D. Drijard, F.E. James, M. Roos and B. Sadoulet, Statistical Methods in Experimental Physics, (North-Holland, Amsterdam 1971) 269-271). Method Improvement by Jason A Detwiler (JADetwiler@lbl.gov); The nuts-and-bolts of the TMath::KolmogorovTest() algorithm is a for-loop over the two sorted arrays a and b representing empirical distribution functions. The for-loop handles 3 cases: when the next points to be evaluated satisfy a>b, a<b, or a=b:; for (Int_t i=0;i<na+nb;i++) {; if (a[ia-1] < b[ib-1]) {; rdiff -= sa;; ia++;; if (ia > na) {ok = kTRUE; break;}; } else if (a[ia-1] > b[ib-1]) {; rdiff += sb;; ib++;; if (ib > nb) {ok = kTRUE; break;}; } else {; rdiff += sb - sa;; ia++;; ib++;; if (ia > na) {ok = kTRUE; break;}; if (ib > nb) {ok = kTRUE; break;}; }; rdmax = TMath::Max(rdmax,TMath::Abs(rdiff));; }; b#define b(i)Definition RSha256.hxx:100; a#define a(i)Definition RSha256.hxx:99; Int_tint Int_tDefinition RtypesCore.h:45; kTRUEconstexpr Bo",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:56518,Integrability,rout,routine,56518,"in work[0,...,k-1] and all indices of the larger element in arbitrary order in work[k+1,..,n-1] work[k] will contain instead the index of the returned element.; Taken from ""Numerical Recipes in C++"" without the index array implemented by Anna Khreshuk.; See also the declarations at the top of this file ; Definition at line 1359 of file TMath.h. ◆ KUncertainty(). constexpr Double_t TMath::KUncertainty ; (; ). constexpr . Boltzmann's constant uncertainty. ; Definition at line 261 of file TMath.h. ◆ Landau(). Double_t TMath::Landau ; (; Double_t ; x, . Double_t ; mu = 0, . Double_t ; sigma = 1, . Bool_t ; norm = kFALSE . ). The LANDAU function. ; mu is a location parameter and correspond approximately to the most probable value and sigma is a scale parameter (not the sigma of the full distribution which is not defined) Note that for mu=0 and sigma=1 (default values) the exact location of the maximum of the distribution (most proper value) is at x = -0.22278 This function has been adapted from the CERNLIB routine G110 denlan. If norm=kTRUE (default is kFALSE) the result is divided by sigma ; Definition at line 492 of file TMath.cxx. ◆ LandauI(). Double_t TMath::LandauI ; (; Double_t ; x). Returns the cumulative (lower tail integral) of the Landau distribution function at point x. ; (see ROOT::Math::landau_cdf) The algorithm was taken from the Cernlib function dislan(G110) Reference: K.S.Kolbig and B.Schorr, ""A program package for the Landau; distribution"", Computer Phys.Comm., 31(1984), 97-111 ; Definition at line 2845 of file TMath.cxx. ◆ LaplaceDist(). Double_t TMath::LaplaceDist ; (; Double_t ; x, . Double_t ; alpha = 0, . Double_t ; beta = 1 . ). Computes the probability density function of Laplace distribution at point x, with location parameter alpha and shape parameter beta. ; By default, alpha=0, beta=1 This distribution is known under different names, most common is double exponential distribution, but it also appears as the two-tailed exponential or the bilate",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:70518,Integrability,rout,routine,70518,"gainst possible overflows. ; Definition at line 535 of file TMath.cxx. ◆ Normalize() [2/2]. Float_t TMath::Normalize ; (; Float_t ; v[3]). Normalize a vector v in place. ; Returns the norm of the original vector. ; Definition at line 518 of file TMath.cxx. ◆ NormCross(). template<typename T > . T TMath::NormCross ; (; const T ; v1[3], . const T ; v2[3], . T ; out[3] . ). inline . Calculates the Normalized Cross Product of two vectors. ; Definition at line 951 of file TMath.h. ◆ NormQuantile(). Double_t TMath::NormQuantile ; (; Double_t ; p). Computes quantiles for standard normal distribution N(0, 1) at probability p. ; ALGORITHM AS241 APPL. STATIST. (1988) VOL. 37, NO. 3, 477-484. ; Definition at line 2456 of file TMath.cxx. ◆ Odd(). Bool_t TMath::Odd ; (; Long_t ; a). inline . Returns true if a is odd. ; Definition at line 117 of file TMathBase.h. ◆ Permute(). Bool_t TMath::Permute ; (; Int_t ; n, . Int_t * ; a . ). Simple recursive algorithm to find the permutations of n natural numbers, not necessarily all distinct adapted from CERNLIB routine PERMU. ; The input array has to be initialised with a non descending sequence. The method returns kFALSE when all combinations are exhausted. ; Definition at line 2557 of file TMath.cxx. ◆ Pi(). constexpr Double_t TMath::Pi ; (; ). constexpr . \( \pi\) ; Definition at line 37 of file TMath.h. ◆ PiOver2(). constexpr Double_t TMath::PiOver2 ; (; ). constexpr . \( \frac{\pi}{2} \) ; Definition at line 51 of file TMath.h. ◆ PiOver4(). constexpr Double_t TMath::PiOver4 ; (; ). constexpr . \( \frac{\pi}{4} \) ; Definition at line 58 of file TMath.h. ◆ Poisson(). Double_t TMath::Poisson ; (; Double_t ; x, . Double_t ; par . ). Computes the Poisson distribution function for (x,par). ; The Poisson PDF is implemented by means of Euler's Gamma-function (for the factorial), so for any x integer argument it is the correct Poisson distribution. BUT for non-integer x values, it IS NOT equal to the Poisson distribution !. Definition at lin",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:16583,Modifiability,adapt,adapted,16583,"vogadro constant (Avogadro's Number) in \( mol^{-1} \). ;  ; constexpr Double_t NaUncertainty ();  Avogadro constant (Avogadro's Number) uncertainty. ;  ; Long_t NextPrime (Long_t x);  ; template<typename T > ; Int_t Nint (T x);  Round to nearest integer. Rounds half integers to the nearest even integer. ;  ; template<typename T > ; T * Normal2Plane (const T v1[3], const T v2[3], const T v3[3], T normal[3]);  Calculates a normal vector of a plane. ;  ; Double_t Normalize (Double_t v[3]);  Normalize a vector v in place. ;  ; Float_t Normalize (Float_t v[3]);  Normalize a vector v in place. ;  ; template<typename T > ; T NormCross (const T v1[3], const T v2[3], T out[3]);  Calculates the Normalized Cross Product of two vectors. ;  ; Double_t NormQuantile (Double_t p);  Computes quantiles for standard normal distribution N(0, 1) at probability p. ;  ; Bool_t Odd (Long_t a);  Returns true if a is odd. ;  ; Bool_t Permute (Int_t n, Int_t *a);  Simple recursive algorithm to find the permutations of n natural numbers, not necessarily all distinct adapted from CERNLIB routine PERMU. ;  ; constexpr Double_t Pi ();  \( \pi\) ;  ; constexpr Double_t PiOver2 ();  \( \frac{\pi}{2} \) ;  ; constexpr Double_t PiOver4 ();  \( \frac{\pi}{4} \) ;  ; Double_t Poisson (Double_t x, Double_t par);  Computes the Poisson distribution function for (x,par). ;  ; Double_t PoissonI (Double_t x, Double_t par);  Computes the Discrete Poisson distribution function for (x,par). ;  ; Double_t Power (Double_t x, Double_t y);  Returns x raised to the power y. ;  ; Double_t Power (Double_t x, Int_t y);  Returns x raised to the power y. ;  ; LongDouble_t Power (Long64_t x, Long64_t y);  Returns x raised to the power y. ;  ; LongDouble_t Power (LongDouble_t x, Long64_t y);  Returns x raised to the power y. ;  ; LongDouble_t Power (LongDouble_t x, LongDouble_t y);  Returns x raised to the power y. ;  ; Double_t Prob (Double_t chi2, Int_t ndf);  Computation of the probability for a certain Chi-squared (chi",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:40416,Modifiability,variab,variable,40416,"(; Double_t ; x). Returns the inverse error function. ; x must be <-1<x<1 ; Definition at line 208 of file TMath.cxx. ◆ EulerGamma(). constexpr Double_t TMath::EulerGamma ; (; ). constexpr . Euler-Mascheroni Constant. ; Definition at line 332 of file TMath.h. ◆ Even(). Bool_t TMath::Even ; (; Long_t ; a). inline . Returns true if a is even. ; Definition at line 113 of file TMathBase.h. ◆ Exp(). Double_t TMath::Exp ; (; Double_t ; x). inline . Returns the base-e exponential function of x, which is e raised to the power x. ; Definition at line 709 of file TMath.h. ◆ Factorial(). Double_t TMath::Factorial ; (; Int_t ; i). Computes factorial(n). ; Definition at line 252 of file TMath.cxx. ◆ FDist(). Double_t TMath::FDist ; (; Double_t ; F, . Double_t ; N, . Double_t ; M . ). Computes the density function of F-distribution (probability function, integral of density, is computed in FDistI). ; Parameters N and M stand for degrees of freedom of chi-squares mentioned above parameter F is the actual variable x of the density function p(x) and the point at which the density function is calculated. About F distribution:; F-distribution arises in testing whether two random samples have the same variance. It is the ratio of two chi-square distributions, with N and M degrees of freedom respectively, where each chi-square is first divided by it's number of degrees of freedom.; AuthorAnna Kreshuk ; Definition at line 2277 of file TMath.cxx. ◆ FDistI(). Double_t TMath::FDistI ; (; Double_t ; F, . Double_t ; N, . Double_t ; M . ). Calculates the cumulative distribution function of F-distribution (see ROOT::Math::fdistribution_cdf). ; This function occurs in the statistical test of whether two observed samples have the same variance. For this test a certain statistic F, the ratio of observed dispersion of the first sample to that of the second sample, is calculated. N and M stand for numbers of degrees of freedom in the samples 1-FDistI() is the significance level at which the hypothes",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:52366,Modifiability,adapt,adapted,52366,"ed data. Input:; a,b: One-dimensional arrays of length na, nb, respectively. The elements of a and b must be given in ascending order. option is a character string to specify options ""D"" Put out a line of ""Debug"" printout ""M"" Return the Maximum Kolmogorov distance instead of prob. Output:; The returned value prob is a calculated confidence level which gives a statistical test for compatibility of a and b. Values of prob close to zero are taken as indicating a small probability of compatibility. For two point sets drawn randomly from the same parent distribution, the value of prob should be uniformly distributed between zero and one. in case of error the function return -1 If the 2 sets have a different number of points, the minimum of the two sets is used. Method:; The Kolmogorov test is used. The test statistic is the maximum deviation between the two integrated distribution functions, multiplied by the normalizing factor (rdmax*sqrt(na*nb/(na+nb)).; Code adapted by Rene Brun from CERNLIB routine TKOLMO (Fred James) (W.T. Eadie, D. Drijard, F.E. James, M. Roos and B. Sadoulet, Statistical Methods in Experimental Physics, (North-Holland, Amsterdam 1971) 269-271). Method Improvement by Jason A Detwiler (JADetwiler@lbl.gov); The nuts-and-bolts of the TMath::KolmogorovTest() algorithm is a for-loop over the two sorted arrays a and b representing empirical distribution functions. The for-loop handles 3 cases: when the next points to be evaluated satisfy a>b, a<b, or a=b:; for (Int_t i=0;i<na+nb;i++) {; if (a[ia-1] < b[ib-1]) {; rdiff -= sa;; ia++;; if (ia > na) {ok = kTRUE; break;}; } else if (a[ia-1] > b[ib-1]) {; rdiff += sb;; ib++;; if (ib > nb) {ok = kTRUE; break;}; } else {; rdiff += sb - sa;; ia++;; ib++;; if (ia > na) {ok = kTRUE; break;}; if (ib > nb) {ok = kTRUE; break;}; }; rdmax = TMath::Max(rdmax,TMath::Abs(rdiff));; }; b#define b(i)Definition RSha256.hxx:100; a#define a(i)Definition RSha256.hxx:99; Int_tint Int_tDefinition RtypesCore.h:45; kTRUEconstexpr Bo",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:56493,Modifiability,adapt,adapted,56493,"in work[0,...,k-1] and all indices of the larger element in arbitrary order in work[k+1,..,n-1] work[k] will contain instead the index of the returned element.; Taken from ""Numerical Recipes in C++"" without the index array implemented by Anna Khreshuk.; See also the declarations at the top of this file ; Definition at line 1359 of file TMath.h. ◆ KUncertainty(). constexpr Double_t TMath::KUncertainty ; (; ). constexpr . Boltzmann's constant uncertainty. ; Definition at line 261 of file TMath.h. ◆ Landau(). Double_t TMath::Landau ; (; Double_t ; x, . Double_t ; mu = 0, . Double_t ; sigma = 1, . Bool_t ; norm = kFALSE . ). The LANDAU function. ; mu is a location parameter and correspond approximately to the most probable value and sigma is a scale parameter (not the sigma of the full distribution which is not defined) Note that for mu=0 and sigma=1 (default values) the exact location of the maximum of the distribution (most proper value) is at x = -0.22278 This function has been adapted from the CERNLIB routine G110 denlan. If norm=kTRUE (default is kFALSE) the result is divided by sigma ; Definition at line 492 of file TMath.cxx. ◆ LandauI(). Double_t TMath::LandauI ; (; Double_t ; x). Returns the cumulative (lower tail integral) of the Landau distribution function at point x. ; (see ROOT::Math::landau_cdf) The algorithm was taken from the Cernlib function dislan(G110) Reference: K.S.Kolbig and B.Schorr, ""A program package for the Landau; distribution"", Computer Phys.Comm., 31(1984), 97-111 ; Definition at line 2845 of file TMath.cxx. ◆ LaplaceDist(). Double_t TMath::LaplaceDist ; (; Double_t ; x, . Double_t ; alpha = 0, . Double_t ; beta = 1 . ). Computes the probability density function of Laplace distribution at point x, with location parameter alpha and shape parameter beta. ; By default, alpha=0, beta=1 This distribution is known under different names, most common is double exponential distribution, but it also appears as the two-tailed exponential or the bilate",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:70497,Modifiability,adapt,adapted,70497,"gainst possible overflows. ; Definition at line 535 of file TMath.cxx. ◆ Normalize() [2/2]. Float_t TMath::Normalize ; (; Float_t ; v[3]). Normalize a vector v in place. ; Returns the norm of the original vector. ; Definition at line 518 of file TMath.cxx. ◆ NormCross(). template<typename T > . T TMath::NormCross ; (; const T ; v1[3], . const T ; v2[3], . T ; out[3] . ). inline . Calculates the Normalized Cross Product of two vectors. ; Definition at line 951 of file TMath.h. ◆ NormQuantile(). Double_t TMath::NormQuantile ; (; Double_t ; p). Computes quantiles for standard normal distribution N(0, 1) at probability p. ; ALGORITHM AS241 APPL. STATIST. (1988) VOL. 37, NO. 3, 477-484. ; Definition at line 2456 of file TMath.cxx. ◆ Odd(). Bool_t TMath::Odd ; (; Long_t ; a). inline . Returns true if a is odd. ; Definition at line 117 of file TMathBase.h. ◆ Permute(). Bool_t TMath::Permute ; (; Int_t ; n, . Int_t * ; a . ). Simple recursive algorithm to find the permutations of n natural numbers, not necessarily all distinct adapted from CERNLIB routine PERMU. ; The input array has to be initialised with a non descending sequence. The method returns kFALSE when all combinations are exhausted. ; Definition at line 2557 of file TMath.cxx. ◆ Pi(). constexpr Double_t TMath::Pi ; (; ). constexpr . \( \pi\) ; Definition at line 37 of file TMath.h. ◆ PiOver2(). constexpr Double_t TMath::PiOver2 ; (; ). constexpr . \( \frac{\pi}{2} \) ; Definition at line 51 of file TMath.h. ◆ PiOver4(). constexpr Double_t TMath::PiOver4 ; (; ). constexpr . \( \frac{\pi}{4} \) ; Definition at line 58 of file TMath.h. ◆ Poisson(). Double_t TMath::Poisson ; (; Double_t ; x, . Double_t ; par . ). Computes the Poisson distribution function for (x,par). ; The Poisson PDF is implemented by means of Euler's Gamma-function (for the factorial), so for any x integer argument it is the correct Poisson distribution. BUT for non-integer x values, it IS NOT equal to the Poisson distribution !. Definition at lin",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:84861,Modifiability,variab,variable,84861,"Struve Functions of Order 0.; Converted from CERNLIB M342 by Rene Brun. ; Definition at line 1777 of file TMath.cxx. ◆ StruveH1(). Double_t TMath::StruveH1 ; (; Double_t ; x). Struve functions of order 0. ; Struve Functions of Order 1.; Converted from CERNLIB M342 by Rene Brun. ; Definition at line 1846 of file TMath.cxx. ◆ StruveL0(). Double_t TMath::StruveL0 ; (; Double_t ; x). Struve functions of order 1. ; Modified Struve Function of Order 0.; AuthorKirill Filimonov. ; Definition at line 1923 of file TMath.cxx. ◆ StruveL1(). Double_t TMath::StruveL1 ; (; Double_t ; x). Modified Struve functions of order 0. ; Modified Struve Function of Order 1.; AuthorKirill Filimonov. ; Definition at line 1970 of file TMath.cxx. ◆ Student(). Double_t TMath::Student ; (; Double_t ; T, . Double_t ; ndf . ). Computes density function for Student's t- distribution (the probability function (integral of density) is computed in StudentI). ; First parameter stands for x - the actual variable of the density function p(x) and the point at which the density is calculated. Second parameter stands for number of degrees of freedom.; About Student distribution: Student's t-distribution is used for many significance tests, for example, for the Student's t-tests for the statistical significance of difference between two sample means and for confidence intervals for the difference between two population means.; Example: suppose we have a random sample of size n drawn from normal distribution with mean Mu and st.deviation Sigma. Then the variable; t = (sample_mean - Mu)/(sample_deviation / sqrt(n)); has Student's t-distribution with n-1 degrees of freedom.; NOTE that this function's second argument is number of degrees of freedom, not the sample size.; As the number of degrees of freedom grows, t-distribution approaches Normal(0,1) distribution.; AuthorAnna Kreshuk ; Definition at line 2623 of file TMath.cxx. ◆ StudentI(). Double_t TMath::StudentI ; (; Double_t ; T, . Double_t ; ndf . ). Calcula",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:85416,Modifiability,variab,variable,85416,"Struve functions of order 0. ; Modified Struve Function of Order 1.; AuthorKirill Filimonov. ; Definition at line 1970 of file TMath.cxx. ◆ Student(). Double_t TMath::Student ; (; Double_t ; T, . Double_t ; ndf . ). Computes density function for Student's t- distribution (the probability function (integral of density) is computed in StudentI). ; First parameter stands for x - the actual variable of the density function p(x) and the point at which the density is calculated. Second parameter stands for number of degrees of freedom.; About Student distribution: Student's t-distribution is used for many significance tests, for example, for the Student's t-tests for the statistical significance of difference between two sample means and for confidence intervals for the difference between two population means.; Example: suppose we have a random sample of size n drawn from normal distribution with mean Mu and st.deviation Sigma. Then the variable; t = (sample_mean - Mu)/(sample_deviation / sqrt(n)); has Student's t-distribution with n-1 degrees of freedom.; NOTE that this function's second argument is number of degrees of freedom, not the sample size.; As the number of degrees of freedom grows, t-distribution approaches Normal(0,1) distribution.; AuthorAnna Kreshuk ; Definition at line 2623 of file TMath.cxx. ◆ StudentI(). Double_t TMath::StudentI ; (; Double_t ; T, . Double_t ; ndf . ). Calculates the cumulative distribution function of Student's t-distribution second parameter stands for number of degrees of freedom, not for the number of samples if x has Student's t-distribution, the function returns the probability of x being less than T. ; This is equivalent to ROOT::Math::tdistribution_cdf(T,ndf); AuthorAnna Kreshuk ; Definition at line 2646 of file TMath.cxx. ◆ StudentQuantile(). Double_t TMath::StudentQuantile ; (; Double_t ; p, . Double_t ; ndf, . Bool_t ; lower_tail = kTRUE . ). Computes quantiles of the Student's t-distribution 1st argument is the probability, a",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:90637,Modifiability,adapt,adapted,90637,"Calculation of Vavilov distribution Nucl.Instr. and Meth. B47(1990), 215-224; Accuracy: quote from the reference above:; ""The results of our code have been compared with the values of the Vavilov; density function computed numerically in an accurate way: our approximation; shows a difference of less than 3% around the peak of the density function, slowly; increasing going towards the extreme tails to the right and to the left""; For a more accurate implementation see the documentation of the Vavilov class and the cumulative ROOT::Math::vavilov_accurate_cdf ; Definition at line 2815 of file TMath.cxx. ◆ VavilovSet(). void TMath::VavilovSet ; (; Double_t ; rkappa, . Double_t ; beta2, . Bool_t ; mode, . Double_t * ; WCM, . Double_t * ; AC, . Double_t * ; HC, . Int_t & ; itype, . Int_t & ; npt . ). Internal function, called by Vavilov and VavilovI. ; Definition at line 2854 of file TMath.cxx. ◆ Voigt(). Double_t TMath::Voigt ; (; Double_t ; xx, . Double_t ; sigma, . Double_t ; lg, . Int_t ; r = 4 . ). Computation of Voigt function (normalised). ; Voigt is a convolution of the two functions: ; \[; gauss(xx) = \frac{1}{(\sqrt{2\pi} sigma)} e^{\frac{xx^{2}}{(2 sigma{^2})}}; \]. and ; \[; lorentz(xx) = \frac{ \frac{1}{\pi} \frac{lg}{2} }{ (xx^{2} + \frac{lg^{2}}{4}) }; \]. .; The Voigt function is known to be the real part of Faddeeva function also called complex error function [2].; The algorithm was developed by J. Humlicek [1]. This code is based on fortran code presented by R. J. Wells [2]. Translated and adapted by Miha D. Puc; To calculate the Faddeeva function with relative error less than 10^(-r). r can be set by the user subject to the constraints 2 <= r <= 5. [1] J. Humlicek, JQSRT, 21, 437 (1982).; [2] R.J. Wells ""Rapid Approximation to the Voigt/Faddeeva Function and its Derivatives"" JQSRT 62 (1999), pp 29-48. . Definition at line 898 of file TMath.cxx. TMath. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:54370,Performance,perform,perform,54370,"rt_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; For the last case, a=b, the algorithm advances each array by one index in an attempt to move through the equality. However, this is incorrect when one or the other of a or b (or both) have a repeated value, call it x. For the KS statistic to be computed properly, rdiff needs to be calculated after all of the a and b at x have been tallied (this is due to the definition of the empirical distribution function; another way to convince yourself that the old CERNLIB method is wrong is that it implies that the function defined as the difference between a and b is multi-valued at x – besides being ugly, this would invalidate Kolmogorov's theorem).; The solution is to just add while-loops into the equality-case handling to perform the tally:; } else {; double x = a[ia-1];; while(a[ia-1] == x && ia <= na) {; rdiff -= sa;; ia++;; }; while(b[ib-1] == x && ib <= nb) {; rdiff += sb;; ib++;; }; if (ia > na) {ok = kTRUE; break;}; if (ib > nb) {ok = kTRUE; break;}; }; xDouble_t x[n]Definition legend1.C:17. Note:; A good description of the Kolmogorov test can be seen at: http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm ; Definition at line 805 of file TMath.cxx. ◆ KOrdStat(). template<class Element , typename Size > . Element TMath::KOrdStat ; (; Size ; n, . const Element * ; a, . Size ; k, . Size * ; work = 0 . ). Returns k_th order statistic of the array a of size n (k_th smallest element out of n elements). ; C-convention is used for array indexing, so if you want the second smallest element, call KOrdStat(n, a, 1).; If work is supplied, it is used to store the sorting index and assumed to be >= n. If work=0, local storage is used, either on the stack if n < kWorkMax or on the heap for n >= kWorkMax. Note that the work index array will not contain the sorted indices but all indices of the sma",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:59970,Performance,perform,performing,59970,"emplate<typename T > . Long64_t TMath::LocMax ; (; Long64_t ; n, . const T * ; a . ). Returns index of array with the maximum element. ; If more than one element is maximum returns first found.; Implement here since it is faster (see comment in LocMin function) ; Definition at line 1012 of file TMath.h. ◆ LocMin() [1/2]. template<typename Iterator > . Iterator TMath::LocMin ; (; Iterator ; first, . Iterator ; last . ). Returns index of array with the minimum element. ; If more than one element is minimum returns first found. ; Definition at line 1000 of file TMath.h. ◆ LocMin() [2/2]. template<typename T > . Long64_t TMath::LocMin ; (; Long64_t ; n, . const T * ; a . ). Returns index of array with the minimum element. ; If more than one element is minimum returns first found.; Implement here since this one is found to be faster (mainly on 64 bit machines) than stl generic implementation. When performing the comparison, the STL implementation needs to de-reference both the array iterator and the iterator pointing to the resulting minimum location ; Definition at line 982 of file TMath.h. ◆ Log(). Double_t TMath::Log ; (; Double_t ; x). inline . Returns the natural logarithm of x. ; Definition at line 756 of file TMath.h. ◆ Log10(). Double_t TMath::Log10 ; (; Double_t ; x). inline . Returns the common (base-10) logarithm of x. ; Definition at line 762 of file TMath.h. ◆ Log2(). Double_t TMath::Log2 ; (; Double_t ; x). Returns the binary (base-2) logarithm of x. ; Definition at line 107 of file TMath.cxx. ◆ LogE(). constexpr Double_t TMath::LogE ; (; ). constexpr . Base-10 log of e (to convert ln to log) ; Definition at line 107 of file TMath.h. ◆ LogNormal(). Double_t TMath::LogNormal ; (; Double_t ; x, . Double_t ; sigma, . Double_t ; theta = 0, . Double_t ; m = 1 . ). Computes the density of LogNormal distribution at point x. ; Variable X has lognormal distribution if Y=Ln(X) has normal distribution; Parameters. [in]xis the evaluation point ; [in]sigmais the shape pa",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:9276,Security,hash,hash,9276,"e_t mean=0, Double_t sigma=1, Bool_t norm=kFALSE);  Calculates a gaussian function with mean and sigma. ;  ; constexpr Double_t Gcgs ();  \( cm^{3} g^{-1} s^{-2} \) ;  ; template<typename Iterator > ; Double_t GeomMean (Iterator first, Iterator last);  Returns the geometric mean of an array defined by the iterators. ;  ; template<typename T > ; Double_t GeomMean (Long64_t n, const T *a);  Returns the geometric mean of an array a of size n. ;  ; constexpr Double_t GhbarC ();  \( \frac{G}{\hbar C} \) in \( (GeV/c^{2})^{-2} \) ;  ; constexpr Double_t GhbarCUncertainty ();  \( \frac{G}{\hbar C} \) uncertainty. ;  ; constexpr Double_t Gn ();  Standard acceleration of gravity in \( m s^{-2} \). ;  ; constexpr Double_t GnUncertainty ();  Standard acceleration of gravity uncertainty. ;  ; constexpr Double_t GUncertainty ();  Gravitational constant uncertainty. ;  ; constexpr Double_t H ();  Planck's constant in \( J s \): \( h \). ;  ; ULong_t Hash (const char *str);  ; ULong_t Hash (const void *txt, Int_t ntxt);  Calculates hash index from any char string. ;  ; constexpr Double_t Hbar ();  \( \hbar \) in \( J s \): \( \hbar = \frac{h}{2\pi} \) ;  ; constexpr Double_t Hbarcgs ();  \( erg s \) ;  ; constexpr Double_t HbarUncertainty ();  \( \hbar \) uncertainty. ;  ; constexpr Double_t HC ();  \( hc \) in \( J m \) ;  ; constexpr Double_t HCcgs ();  \( erg cm \) ;  ; constexpr Double_t Hcgs ();  \( erg s \) ;  ; constexpr Double_t HUncertainty ();  Planck's constant uncertainty. ;  ; Double_t Hypot (Double_t x, Double_t y);  Returns sqrt(x*x + y*y) ;  ; Long_t Hypot (Long_t x, Long_t y);  Returns sqrt(x*x + y*y) ;  ; Double_t Infinity ();  Returns an infinity as defined by the IEEE standard. ;  ; constexpr Double_t InvPi ();  \( \frac{1.}{\pi}\) ;  ; template<typename T > ; Bool_t IsInside (T xp, T yp, Int_t np, T *x, T *y);  Function which returns kTRUE if point xp,yp lies inside the polygon defined by the np points in arrays x and y, kFALSE otherwise. ;  ; Bool_t IsNaN (Dou",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:46745,Security,hash,hash,46745,"f file TMath.h. ◆ GhbarCUncertainty(). constexpr Double_t TMath::GhbarCUncertainty ; (; ). constexpr . \( \frac{G}{\hbar C} \) uncertainty. ; Definition at line 166 of file TMath.h. ◆ Gn(). constexpr Double_t TMath::Gn ; (; ). constexpr . Standard acceleration of gravity in \( m s^{-2} \). ; Definition at line 174 of file TMath.h. ◆ GnUncertainty(). constexpr Double_t TMath::GnUncertainty ; (; ). constexpr . Standard acceleration of gravity uncertainty. ; Definition at line 181 of file TMath.h. ◆ GUncertainty(). constexpr Double_t TMath::GUncertainty ; (; ). constexpr . Gravitational constant uncertainty. ; Definition at line 150 of file TMath.h. ◆ H(). constexpr Double_t TMath::H ; (; ). constexpr . Planck's constant in \( J s \): \( h \). ; Definition at line 188 of file TMath.h. ◆ Hash() [1/2]. ULong_t TMath::Hash ; (; const char * ; str). Definition at line 1416 of file TMath.cxx. ◆ Hash() [2/2]. ULong_t TMath::Hash ; (; const void * ; txt, . Int_t ; ntxt . ). Calculates hash index from any char string. ; Based on pre-calculated table of 256 specially selected numbers. These numbers are selected in such a way, that for string length == 4 (integer number) the hash is unambiguous, i.e. from hash value we can recalculate input (no degeneration).; The quality of hash method is good enough, that ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N) tested by <R>, <R*R>, <Ri*Ri+1> gives the same result as for libc rand(). For string: i = TMath::Hash(string,nstring);; For int: i = TMath::Hash(&intword,sizeof(int));; For pointer: i = TMath::Hash(&pointer,sizeof(void*)); V.Perev; This function is kept for back compatibility. The code previously in this function has been moved to the static function TString::Hash . Definition at line 1408 of file TMath.cxx. ◆ Hbar(). constexpr Double_t TMath::Hbar ; (; ). constexpr . \( \hbar \) in \( J s \): \( \hbar = \frac{h}{2\pi} \) ; Definition at line 211 of file TMath.h. ◆ Hbarcgs(). constexpr Double_t TMath::Hbarcgs ; (; ). c",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:46936,Security,hash,hash,46936,"nition at line 166 of file TMath.h. ◆ Gn(). constexpr Double_t TMath::Gn ; (; ). constexpr . Standard acceleration of gravity in \( m s^{-2} \). ; Definition at line 174 of file TMath.h. ◆ GnUncertainty(). constexpr Double_t TMath::GnUncertainty ; (; ). constexpr . Standard acceleration of gravity uncertainty. ; Definition at line 181 of file TMath.h. ◆ GUncertainty(). constexpr Double_t TMath::GUncertainty ; (; ). constexpr . Gravitational constant uncertainty. ; Definition at line 150 of file TMath.h. ◆ H(). constexpr Double_t TMath::H ; (; ). constexpr . Planck's constant in \( J s \): \( h \). ; Definition at line 188 of file TMath.h. ◆ Hash() [1/2]. ULong_t TMath::Hash ; (; const char * ; str). Definition at line 1416 of file TMath.cxx. ◆ Hash() [2/2]. ULong_t TMath::Hash ; (; const void * ; txt, . Int_t ; ntxt . ). Calculates hash index from any char string. ; Based on pre-calculated table of 256 specially selected numbers. These numbers are selected in such a way, that for string length == 4 (integer number) the hash is unambiguous, i.e. from hash value we can recalculate input (no degeneration).; The quality of hash method is good enough, that ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N) tested by <R>, <R*R>, <Ri*Ri+1> gives the same result as for libc rand(). For string: i = TMath::Hash(string,nstring);; For int: i = TMath::Hash(&intword,sizeof(int));; For pointer: i = TMath::Hash(&pointer,sizeof(void*)); V.Perev; This function is kept for back compatibility. The code previously in this function has been moved to the static function TString::Hash . Definition at line 1408 of file TMath.cxx. ◆ Hbar(). constexpr Double_t TMath::Hbar ; (; ). constexpr . \( \hbar \) in \( J s \): \( \hbar = \frac{h}{2\pi} \) ; Definition at line 211 of file TMath.h. ◆ Hbarcgs(). constexpr Double_t TMath::Hbarcgs ; (; ). constexpr . \( erg s \) ; Definition at line 218 of file TMath.h. ◆ HbarUncertainty(). constexpr Double_t TMath::HbarUncertainty ; (; ). constexpr .",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:46967,Security,hash,hash,46967," . Standard acceleration of gravity in \( m s^{-2} \). ; Definition at line 174 of file TMath.h. ◆ GnUncertainty(). constexpr Double_t TMath::GnUncertainty ; (; ). constexpr . Standard acceleration of gravity uncertainty. ; Definition at line 181 of file TMath.h. ◆ GUncertainty(). constexpr Double_t TMath::GUncertainty ; (; ). constexpr . Gravitational constant uncertainty. ; Definition at line 150 of file TMath.h. ◆ H(). constexpr Double_t TMath::H ; (; ). constexpr . Planck's constant in \( J s \): \( h \). ; Definition at line 188 of file TMath.h. ◆ Hash() [1/2]. ULong_t TMath::Hash ; (; const char * ; str). Definition at line 1416 of file TMath.cxx. ◆ Hash() [2/2]. ULong_t TMath::Hash ; (; const void * ; txt, . Int_t ; ntxt . ). Calculates hash index from any char string. ; Based on pre-calculated table of 256 specially selected numbers. These numbers are selected in such a way, that for string length == 4 (integer number) the hash is unambiguous, i.e. from hash value we can recalculate input (no degeneration).; The quality of hash method is good enough, that ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N) tested by <R>, <R*R>, <Ri*Ri+1> gives the same result as for libc rand(). For string: i = TMath::Hash(string,nstring);; For int: i = TMath::Hash(&intword,sizeof(int));; For pointer: i = TMath::Hash(&pointer,sizeof(void*)); V.Perev; This function is kept for back compatibility. The code previously in this function has been moved to the static function TString::Hash . Definition at line 1408 of file TMath.cxx. ◆ Hbar(). constexpr Double_t TMath::Hbar ; (; ). constexpr . \( \hbar \) in \( J s \): \( \hbar = \frac{h}{2\pi} \) ; Definition at line 211 of file TMath.h. ◆ Hbarcgs(). constexpr Double_t TMath::Hbarcgs ; (; ). constexpr . \( erg s \) ; Definition at line 218 of file TMath.h. ◆ HbarUncertainty(). constexpr Double_t TMath::HbarUncertainty ; (; ). constexpr . \( \hbar \) uncertainty. ; Definition at line 225 of file TMath.h. ◆ HC(). constexpr Dou",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:47038,Security,hash,hash,47038," of file TMath.h. ◆ GnUncertainty(). constexpr Double_t TMath::GnUncertainty ; (; ). constexpr . Standard acceleration of gravity uncertainty. ; Definition at line 181 of file TMath.h. ◆ GUncertainty(). constexpr Double_t TMath::GUncertainty ; (; ). constexpr . Gravitational constant uncertainty. ; Definition at line 150 of file TMath.h. ◆ H(). constexpr Double_t TMath::H ; (; ). constexpr . Planck's constant in \( J s \): \( h \). ; Definition at line 188 of file TMath.h. ◆ Hash() [1/2]. ULong_t TMath::Hash ; (; const char * ; str). Definition at line 1416 of file TMath.cxx. ◆ Hash() [2/2]. ULong_t TMath::Hash ; (; const void * ; txt, . Int_t ; ntxt . ). Calculates hash index from any char string. ; Based on pre-calculated table of 256 specially selected numbers. These numbers are selected in such a way, that for string length == 4 (integer number) the hash is unambiguous, i.e. from hash value we can recalculate input (no degeneration).; The quality of hash method is good enough, that ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N) tested by <R>, <R*R>, <Ri*Ri+1> gives the same result as for libc rand(). For string: i = TMath::Hash(string,nstring);; For int: i = TMath::Hash(&intword,sizeof(int));; For pointer: i = TMath::Hash(&pointer,sizeof(void*)); V.Perev; This function is kept for back compatibility. The code previously in this function has been moved to the static function TString::Hash . Definition at line 1408 of file TMath.cxx. ◆ Hbar(). constexpr Double_t TMath::Hbar ; (; ). constexpr . \( \hbar \) in \( J s \): \( \hbar = \frac{h}{2\pi} \) ; Definition at line 211 of file TMath.h. ◆ Hbarcgs(). constexpr Double_t TMath::Hbarcgs ; (; ). constexpr . \( erg s \) ; Definition at line 218 of file TMath.h. ◆ HbarUncertainty(). constexpr Double_t TMath::HbarUncertainty ; (; ). constexpr . \( \hbar \) uncertainty. ; Definition at line 225 of file TMath.h. ◆ HC(). constexpr Double_t TMath::HC ; (; ). constexpr . \( hc \) in \( J m \) ; Definition at line ",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:5893,Testability,log,log,5893," by default, standard Cauchy distribution is used (t=0, s=1) ;  ; constexpr Double_t Ccgs ();  \( cm s^{-1} \) ;  ; Double_t Ceil (Double_t x);  Rounds x upward, returning the smallest integral value that is not less than x. ;  ; Int_t CeilNint (Double_t x);  Returns the nearest integer of TMath::Ceil(x). ;  ; Double_t ChisquareQuantile (Double_t p, Double_t ndf);  Evaluate the quantiles of the chi-squared probability distribution function. ;  ; Double_t Cos (Double_t);  Returns the cosine of an angle of x radians. ;  ; Double_t CosH (Double_t);  Returns the hyperbolic cosine of x. ;  ; template<typename T > ; T * Cross (const T v1[3], const T v2[3], T out[3]);  Calculates the Cross Product of two vectors: out = [v1 x v2]. ;  ; constexpr Double_t CUncertainty ();  Speed of light uncertainty. ;  ; constexpr Double_t DegToRad ();  Conversion from degree to radian: \( \frac{\pi}{180} \). ;  ; Double_t DiLog (Double_t x);  Modified Struve functions of order 1. ;  ; constexpr Double_t E ();  Base of natural log: \( e \). ;  ; Double_t Erf (Double_t x);  Computation of the error function erf(x). ;  ; Double_t Erfc (Double_t x);  Computes the complementary error function erfc(x). ;  ; Double_t ErfcInverse (Double_t x);  Returns the inverse of the complementary error function. ;  ; Double_t ErfInverse (Double_t x);  Returns the inverse error function. ;  ; constexpr Double_t EulerGamma ();  Euler-Mascheroni Constant. ;  ; Bool_t Even (Long_t a);  Returns true if a is even. ;  ; Double_t Exp (Double_t x);  Returns the base-e exponential function of x, which is e raised to the power x. ;  ; Double_t Factorial (Int_t i);  Computes factorial(n). ;  ; Double_t FDist (Double_t F, Double_t N, Double_t M);  Computes the density function of F-distribution (probability function, integral of density, is computed in FDistI). ;  ; Double_t FDistI (Double_t F, Double_t N, Double_t M);  Calculates the cumulative distribution function of F-distribution (see ROOT::Math::fdistribution_cdf). ;",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:10626,Testability,test,test,10626," Double_t Hcgs ();  \( erg s \) ;  ; constexpr Double_t HUncertainty ();  Planck's constant uncertainty. ;  ; Double_t Hypot (Double_t x, Double_t y);  Returns sqrt(x*x + y*y) ;  ; Long_t Hypot (Long_t x, Long_t y);  Returns sqrt(x*x + y*y) ;  ; Double_t Infinity ();  Returns an infinity as defined by the IEEE standard. ;  ; constexpr Double_t InvPi ();  \( \frac{1.}{\pi}\) ;  ; template<typename T > ; Bool_t IsInside (T xp, T yp, Int_t np, T *x, T *y);  Function which returns kTRUE if point xp,yp lies inside the polygon defined by the np points in arrays x and y, kFALSE otherwise. ;  ; Bool_t IsNaN (Double_t x);  ; Bool_t IsNaN (Float_t x);  ; constexpr Double_t K ();  Boltzmann's constant in \( J K^{-1} \): \( k \). ;  ; constexpr Double_t Kcgs ();  \( erg K^{-1} \) ;  ; Double_t KolmogorovProb (Double_t z);  Calculates the Kolmogorov distribution function,. ;  ; Double_t KolmogorovTest (Int_t na, const Double_t *a, Int_t nb, const Double_t *b, Option_t *option);  Statistical test whether two one-dimensional sets of points are compatible with coming from the same parent distribution, using the Kolmogorov test. ;  ; template<class Element , typename Size > ; Element KOrdStat (Size n, const Element *a, Size k, Size *work=0);  Returns k_th order statistic of the array a of size n (k_th smallest element out of n elements). ;  ; constexpr Double_t KUncertainty ();  Boltzmann's constant uncertainty. ;  ; Double_t Landau (Double_t x, Double_t mpv=0, Double_t sigma=1, Bool_t norm=kFALSE);  The LANDAU function. ;  ; Double_t LandauI (Double_t x);  Returns the cumulative (lower tail integral) of the Landau distribution function at point x. ;  ; Double_t LaplaceDist (Double_t x, Double_t alpha=0, Double_t beta=1);  Computes the probability density function of Laplace distribution at point x, with location parameter alpha and shape parameter beta. ;  ; Double_t LaplaceDistI (Double_t x, Double_t alpha=0, Double_t beta=1);  Computes the cumulative distribution function (lower t",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:10757,Testability,test,test,10757," Double_t Hcgs ();  \( erg s \) ;  ; constexpr Double_t HUncertainty ();  Planck's constant uncertainty. ;  ; Double_t Hypot (Double_t x, Double_t y);  Returns sqrt(x*x + y*y) ;  ; Long_t Hypot (Long_t x, Long_t y);  Returns sqrt(x*x + y*y) ;  ; Double_t Infinity ();  Returns an infinity as defined by the IEEE standard. ;  ; constexpr Double_t InvPi ();  \( \frac{1.}{\pi}\) ;  ; template<typename T > ; Bool_t IsInside (T xp, T yp, Int_t np, T *x, T *y);  Function which returns kTRUE if point xp,yp lies inside the polygon defined by the np points in arrays x and y, kFALSE otherwise. ;  ; Bool_t IsNaN (Double_t x);  ; Bool_t IsNaN (Float_t x);  ; constexpr Double_t K ();  Boltzmann's constant in \( J K^{-1} \): \( k \). ;  ; constexpr Double_t Kcgs ();  \( erg K^{-1} \) ;  ; Double_t KolmogorovProb (Double_t z);  Calculates the Kolmogorov distribution function,. ;  ; Double_t KolmogorovTest (Int_t na, const Double_t *a, Int_t nb, const Double_t *b, Option_t *option);  Statistical test whether two one-dimensional sets of points are compatible with coming from the same parent distribution, using the Kolmogorov test. ;  ; template<class Element , typename Size > ; Element KOrdStat (Size n, const Element *a, Size k, Size *work=0);  Returns k_th order statistic of the array a of size n (k_th smallest element out of n elements). ;  ; constexpr Double_t KUncertainty ();  Boltzmann's constant uncertainty. ;  ; Double_t Landau (Double_t x, Double_t mpv=0, Double_t sigma=1, Bool_t norm=kFALSE);  The LANDAU function. ;  ; Double_t LandauI (Double_t x);  Returns the cumulative (lower tail integral) of the Landau distribution function at point x. ;  ; Double_t LaplaceDist (Double_t x, Double_t alpha=0, Double_t beta=1);  Computes the probability density function of Laplace distribution at point x, with location parameter alpha and shape parameter beta. ;  ; Double_t LaplaceDistI (Double_t x, Double_t alpha=0, Double_t beta=1);  Computes the cumulative distribution function (lower t",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:11930,Testability,log,log,11930," n elements). ;  ; constexpr Double_t KUncertainty ();  Boltzmann's constant uncertainty. ;  ; Double_t Landau (Double_t x, Double_t mpv=0, Double_t sigma=1, Bool_t norm=kFALSE);  The LANDAU function. ;  ; Double_t LandauI (Double_t x);  Returns the cumulative (lower tail integral) of the Landau distribution function at point x. ;  ; Double_t LaplaceDist (Double_t x, Double_t alpha=0, Double_t beta=1);  Computes the probability density function of Laplace distribution at point x, with location parameter alpha and shape parameter beta. ;  ; Double_t LaplaceDistI (Double_t x, Double_t alpha=0, Double_t beta=1);  Computes the cumulative distribution function (lower tail integral) of Laplace distribution at point x, with location parameter alpha and shape parameter beta. ;  ; Double_t Ldexp (Double_t x, Int_t exp);  Returns the result of multiplying x (the significant) by 2 raised to the power of exp (the exponent). ;  ; constexpr Double_t Ln10 ();  Natural log of 10 (to convert log to ln) ;  ; Double_t LnGamma (Double_t z);  Computation of ln[gamma(z)] for all z. ;  ; template<typename Iterator > ; Iterator LocMax (Iterator first, Iterator last);  Returns index of array with the maximum element. ;  ; template<typename T > ; Long64_t LocMax (Long64_t n, const T *a);  Returns index of array with the maximum element. ;  ; template<typename Iterator > ; Iterator LocMin (Iterator first, Iterator last);  Returns index of array with the minimum element. ;  ; template<typename T > ; Long64_t LocMin (Long64_t n, const T *a);  Returns index of array with the minimum element. ;  ; Double_t Log (Double_t x);  Returns the natural logarithm of x. ;  ; Double_t Log10 (Double_t x);  Returns the common (base-10) logarithm of x. ;  ; Double_t Log2 (Double_t x);  Returns the binary (base-2) logarithm of x. ;  ; constexpr Double_t LogE ();  Base-10 log of e (to convert ln to log) ;  ; Double_t LogNormal (Double_t x, Double_t sigma, Double_t theta=0, Double_t m=1);  Computes the density of ",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:11952,Testability,log,log,11952," n elements). ;  ; constexpr Double_t KUncertainty ();  Boltzmann's constant uncertainty. ;  ; Double_t Landau (Double_t x, Double_t mpv=0, Double_t sigma=1, Bool_t norm=kFALSE);  The LANDAU function. ;  ; Double_t LandauI (Double_t x);  Returns the cumulative (lower tail integral) of the Landau distribution function at point x. ;  ; Double_t LaplaceDist (Double_t x, Double_t alpha=0, Double_t beta=1);  Computes the probability density function of Laplace distribution at point x, with location parameter alpha and shape parameter beta. ;  ; Double_t LaplaceDistI (Double_t x, Double_t alpha=0, Double_t beta=1);  Computes the cumulative distribution function (lower tail integral) of Laplace distribution at point x, with location parameter alpha and shape parameter beta. ;  ; Double_t Ldexp (Double_t x, Int_t exp);  Returns the result of multiplying x (the significant) by 2 raised to the power of exp (the exponent). ;  ; constexpr Double_t Ln10 ();  Natural log of 10 (to convert log to ln) ;  ; Double_t LnGamma (Double_t z);  Computation of ln[gamma(z)] for all z. ;  ; template<typename Iterator > ; Iterator LocMax (Iterator first, Iterator last);  Returns index of array with the maximum element. ;  ; template<typename T > ; Long64_t LocMax (Long64_t n, const T *a);  Returns index of array with the maximum element. ;  ; template<typename Iterator > ; Iterator LocMin (Iterator first, Iterator last);  Returns index of array with the minimum element. ;  ; template<typename T > ; Long64_t LocMin (Long64_t n, const T *a);  Returns index of array with the minimum element. ;  ; Double_t Log (Double_t x);  Returns the natural logarithm of x. ;  ; Double_t Log10 (Double_t x);  Returns the common (base-10) logarithm of x. ;  ; Double_t Log2 (Double_t x);  Returns the binary (base-2) logarithm of x. ;  ; constexpr Double_t LogE ();  Base-10 log of e (to convert ln to log) ;  ; Double_t LogNormal (Double_t x, Double_t sigma, Double_t theta=0, Double_t m=1);  Computes the density of ",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:12604,Testability,log,logarithm,12604,"utes the cumulative distribution function (lower tail integral) of Laplace distribution at point x, with location parameter alpha and shape parameter beta. ;  ; Double_t Ldexp (Double_t x, Int_t exp);  Returns the result of multiplying x (the significant) by 2 raised to the power of exp (the exponent). ;  ; constexpr Double_t Ln10 ();  Natural log of 10 (to convert log to ln) ;  ; Double_t LnGamma (Double_t z);  Computation of ln[gamma(z)] for all z. ;  ; template<typename Iterator > ; Iterator LocMax (Iterator first, Iterator last);  Returns index of array with the maximum element. ;  ; template<typename T > ; Long64_t LocMax (Long64_t n, const T *a);  Returns index of array with the maximum element. ;  ; template<typename Iterator > ; Iterator LocMin (Iterator first, Iterator last);  Returns index of array with the minimum element. ;  ; template<typename T > ; Long64_t LocMin (Long64_t n, const T *a);  Returns index of array with the minimum element. ;  ; Double_t Log (Double_t x);  Returns the natural logarithm of x. ;  ; Double_t Log10 (Double_t x);  Returns the common (base-10) logarithm of x. ;  ; Double_t Log2 (Double_t x);  Returns the binary (base-2) logarithm of x. ;  ; constexpr Double_t LogE ();  Base-10 log of e (to convert ln to log) ;  ; Double_t LogNormal (Double_t x, Double_t sigma, Double_t theta=0, Double_t m=1);  Computes the density of LogNormal distribution at point x. ;  ; Double_t Max (Double_t a, Double_t b);  Returns the largest of a and b. ;  ; Float_t Max (Float_t a, Float_t b);  Returns the largest of a and b. ;  ; Int_t Max (Int_t a, Int_t b);  Returns the largest of a and b. ;  ; Long64_t Max (Long64_t a, Long64_t b);  Returns the largest of a and b. ;  ; Long_t Max (Long_t a, Long_t b);  Returns the largest of a and b. ;  ; Short_t Max (Short_t a, Short_t b);  Returns the largest of a and b. ;  ; UInt_t Max (UInt_t a, UInt_t b);  Returns the largest of a and b. ;  ; ULong64_t Max (ULong64_t a, ULong64_t b);  Returns the largest of a an",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:12684,Testability,log,logarithm,12684,"distribution at point x, with location parameter alpha and shape parameter beta. ;  ; Double_t Ldexp (Double_t x, Int_t exp);  Returns the result of multiplying x (the significant) by 2 raised to the power of exp (the exponent). ;  ; constexpr Double_t Ln10 ();  Natural log of 10 (to convert log to ln) ;  ; Double_t LnGamma (Double_t z);  Computation of ln[gamma(z)] for all z. ;  ; template<typename Iterator > ; Iterator LocMax (Iterator first, Iterator last);  Returns index of array with the maximum element. ;  ; template<typename T > ; Long64_t LocMax (Long64_t n, const T *a);  Returns index of array with the maximum element. ;  ; template<typename Iterator > ; Iterator LocMin (Iterator first, Iterator last);  Returns index of array with the minimum element. ;  ; template<typename T > ; Long64_t LocMin (Long64_t n, const T *a);  Returns index of array with the minimum element. ;  ; Double_t Log (Double_t x);  Returns the natural logarithm of x. ;  ; Double_t Log10 (Double_t x);  Returns the common (base-10) logarithm of x. ;  ; Double_t Log2 (Double_t x);  Returns the binary (base-2) logarithm of x. ;  ; constexpr Double_t LogE ();  Base-10 log of e (to convert ln to log) ;  ; Double_t LogNormal (Double_t x, Double_t sigma, Double_t theta=0, Double_t m=1);  Computes the density of LogNormal distribution at point x. ;  ; Double_t Max (Double_t a, Double_t b);  Returns the largest of a and b. ;  ; Float_t Max (Float_t a, Float_t b);  Returns the largest of a and b. ;  ; Int_t Max (Int_t a, Int_t b);  Returns the largest of a and b. ;  ; Long64_t Max (Long64_t a, Long64_t b);  Returns the largest of a and b. ;  ; Long_t Max (Long_t a, Long_t b);  Returns the largest of a and b. ;  ; Short_t Max (Short_t a, Short_t b);  Returns the largest of a and b. ;  ; UInt_t Max (UInt_t a, UInt_t b);  Returns the largest of a and b. ;  ; ULong64_t Max (ULong64_t a, ULong64_t b);  Returns the largest of a and b. ;  ; ULong_t Max (ULong_t a, ULong_t b);  Returns the largest of a an",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:12762,Testability,log,logarithm,12762,". ;  ; Double_t Ldexp (Double_t x, Int_t exp);  Returns the result of multiplying x (the significant) by 2 raised to the power of exp (the exponent). ;  ; constexpr Double_t Ln10 ();  Natural log of 10 (to convert log to ln) ;  ; Double_t LnGamma (Double_t z);  Computation of ln[gamma(z)] for all z. ;  ; template<typename Iterator > ; Iterator LocMax (Iterator first, Iterator last);  Returns index of array with the maximum element. ;  ; template<typename T > ; Long64_t LocMax (Long64_t n, const T *a);  Returns index of array with the maximum element. ;  ; template<typename Iterator > ; Iterator LocMin (Iterator first, Iterator last);  Returns index of array with the minimum element. ;  ; template<typename T > ; Long64_t LocMin (Long64_t n, const T *a);  Returns index of array with the minimum element. ;  ; Double_t Log (Double_t x);  Returns the natural logarithm of x. ;  ; Double_t Log10 (Double_t x);  Returns the common (base-10) logarithm of x. ;  ; Double_t Log2 (Double_t x);  Returns the binary (base-2) logarithm of x. ;  ; constexpr Double_t LogE ();  Base-10 log of e (to convert ln to log) ;  ; Double_t LogNormal (Double_t x, Double_t sigma, Double_t theta=0, Double_t m=1);  Computes the density of LogNormal distribution at point x. ;  ; Double_t Max (Double_t a, Double_t b);  Returns the largest of a and b. ;  ; Float_t Max (Float_t a, Float_t b);  Returns the largest of a and b. ;  ; Int_t Max (Int_t a, Int_t b);  Returns the largest of a and b. ;  ; Long64_t Max (Long64_t a, Long64_t b);  Returns the largest of a and b. ;  ; Long_t Max (Long_t a, Long_t b);  Returns the largest of a and b. ;  ; Short_t Max (Short_t a, Short_t b);  Returns the largest of a and b. ;  ; UInt_t Max (UInt_t a, UInt_t b);  Returns the largest of a and b. ;  ; ULong64_t Max (ULong64_t a, ULong64_t b);  Returns the largest of a and b. ;  ; ULong_t Max (ULong_t a, ULong_t b);  Returns the largest of a and b. ;  ; UShort_t Max (UShort_t a, UShort_t b);  Returns the largest of a and ",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:12820,Testability,log,log,12820," ;  ; constexpr Double_t Ln10 ();  Natural log of 10 (to convert log to ln) ;  ; Double_t LnGamma (Double_t z);  Computation of ln[gamma(z)] for all z. ;  ; template<typename Iterator > ; Iterator LocMax (Iterator first, Iterator last);  Returns index of array with the maximum element. ;  ; template<typename T > ; Long64_t LocMax (Long64_t n, const T *a);  Returns index of array with the maximum element. ;  ; template<typename Iterator > ; Iterator LocMin (Iterator first, Iterator last);  Returns index of array with the minimum element. ;  ; template<typename T > ; Long64_t LocMin (Long64_t n, const T *a);  Returns index of array with the minimum element. ;  ; Double_t Log (Double_t x);  Returns the natural logarithm of x. ;  ; Double_t Log10 (Double_t x);  Returns the common (base-10) logarithm of x. ;  ; Double_t Log2 (Double_t x);  Returns the binary (base-2) logarithm of x. ;  ; constexpr Double_t LogE ();  Base-10 log of e (to convert ln to log) ;  ; Double_t LogNormal (Double_t x, Double_t sigma, Double_t theta=0, Double_t m=1);  Computes the density of LogNormal distribution at point x. ;  ; Double_t Max (Double_t a, Double_t b);  Returns the largest of a and b. ;  ; Float_t Max (Float_t a, Float_t b);  Returns the largest of a and b. ;  ; Int_t Max (Int_t a, Int_t b);  Returns the largest of a and b. ;  ; Long64_t Max (Long64_t a, Long64_t b);  Returns the largest of a and b. ;  ; Long_t Max (Long_t a, Long_t b);  Returns the largest of a and b. ;  ; Short_t Max (Short_t a, Short_t b);  Returns the largest of a and b. ;  ; UInt_t Max (UInt_t a, UInt_t b);  Returns the largest of a and b. ;  ; ULong64_t Max (ULong64_t a, ULong64_t b);  Returns the largest of a and b. ;  ; ULong_t Max (ULong_t a, ULong_t b);  Returns the largest of a and b. ;  ; UShort_t Max (UShort_t a, UShort_t b);  Returns the largest of a and b. ;  ; template<typename T > ; T MaxElement (Long64_t n, const T *a);  Returns maximum of array a of length n. ;  ; template<typename Iterator > ; D",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:12847,Testability,log,log,12847," ;  ; constexpr Double_t Ln10 ();  Natural log of 10 (to convert log to ln) ;  ; Double_t LnGamma (Double_t z);  Computation of ln[gamma(z)] for all z. ;  ; template<typename Iterator > ; Iterator LocMax (Iterator first, Iterator last);  Returns index of array with the maximum element. ;  ; template<typename T > ; Long64_t LocMax (Long64_t n, const T *a);  Returns index of array with the maximum element. ;  ; template<typename Iterator > ; Iterator LocMin (Iterator first, Iterator last);  Returns index of array with the minimum element. ;  ; template<typename T > ; Long64_t LocMin (Long64_t n, const T *a);  Returns index of array with the minimum element. ;  ; Double_t Log (Double_t x);  Returns the natural logarithm of x. ;  ; Double_t Log10 (Double_t x);  Returns the common (base-10) logarithm of x. ;  ; Double_t Log2 (Double_t x);  Returns the binary (base-2) logarithm of x. ;  ; constexpr Double_t LogE ();  Base-10 log of e (to convert ln to log) ;  ; Double_t LogNormal (Double_t x, Double_t sigma, Double_t theta=0, Double_t m=1);  Computes the density of LogNormal distribution at point x. ;  ; Double_t Max (Double_t a, Double_t b);  Returns the largest of a and b. ;  ; Float_t Max (Float_t a, Float_t b);  Returns the largest of a and b. ;  ; Int_t Max (Int_t a, Int_t b);  Returns the largest of a and b. ;  ; Long64_t Max (Long64_t a, Long64_t b);  Returns the largest of a and b. ;  ; Long_t Max (Long_t a, Long_t b);  Returns the largest of a and b. ;  ; Short_t Max (Short_t a, Short_t b);  Returns the largest of a and b. ;  ; UInt_t Max (UInt_t a, UInt_t b);  Returns the largest of a and b. ;  ; ULong64_t Max (ULong64_t a, ULong64_t b);  Returns the largest of a and b. ;  ; ULong_t Max (ULong_t a, ULong_t b);  Returns the largest of a and b. ;  ; UShort_t Max (UShort_t a, UShort_t b);  Returns the largest of a and b. ;  ; template<typename T > ; T MaxElement (Long64_t n, const T *a);  Returns maximum of array a of length n. ;  ; template<typename Iterator > ; D",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:38593,Testability,log,log,38593," Definition at line 594 of file TMath.h. ◆ CosH(). Double_t TMath::CosH ; (; Double_t ; x). inline . Returns the hyperbolic cosine of x. ; Definition at line 612 of file TMath.h. ◆ Cross(). template<typename T > . T * TMath::Cross ; (; const T ; v1[3], . const T ; v2[3], . T ; out[3] . ). Calculates the Cross Product of two vectors: out = [v1 x v2]. ; Definition at line 1197 of file TMath.h. ◆ CUncertainty(). constexpr Double_t TMath::CUncertainty ; (; ). constexpr . Speed of light uncertainty. ; Definition at line 128 of file TMath.h. ◆ DegToRad(). constexpr Double_t TMath::DegToRad ; (; ). constexpr . Conversion from degree to radian: \( \frac{\pi}{180} \). ; Definition at line 79 of file TMath.h. ◆ DiLog(). Double_t TMath::DiLog ; (; Double_t ; x). Modified Struve functions of order 1. ; The DiLogarithm function Code translated by R.Brun from CERNLIB DILOG function C332. ; Definition at line 116 of file TMath.cxx. ◆ E(). constexpr Double_t TMath::E ; (; ). constexpr . Base of natural log: \( e \). ; Definition at line 93 of file TMath.h. ◆ Erf(). Double_t TMath::Erf ; (; Double_t ; x). Computation of the error function erf(x). ; Erf(x) = (2/sqrt(pi)) Integral(exp(-t^2))dt between 0 and x ; Definition at line 190 of file TMath.cxx. ◆ Erfc(). Double_t TMath::Erfc ; (; Double_t ; x). Computes the complementary error function erfc(x). ; Erfc(x) = (2/sqrt(pi)) Integral(exp(-t^2))dt between x and infinity ; Definition at line 199 of file TMath.cxx. ◆ ErfcInverse(). Double_t TMath::ErfcInverse ; (; Double_t ; x). Returns the inverse of the complementary error function. ; x must be 0<x<2 implement using the quantile of the normal distribution instead of ErfInverse for better numerical precision for large x ; Definition at line 242 of file TMath.cxx. ◆ ErfInverse(). Double_t TMath::ErfInverse ; (; Double_t ; x). Returns the inverse error function. ; x must be <-1<x<1 ; Definition at line 208 of file TMath.cxx. ◆ EulerGamma(). constexpr Double_t TMath::EulerGamma ; (; ). c",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:40563,Testability,test,testing,40563,"th::EulerGamma ; (; ). constexpr . Euler-Mascheroni Constant. ; Definition at line 332 of file TMath.h. ◆ Even(). Bool_t TMath::Even ; (; Long_t ; a). inline . Returns true if a is even. ; Definition at line 113 of file TMathBase.h. ◆ Exp(). Double_t TMath::Exp ; (; Double_t ; x). inline . Returns the base-e exponential function of x, which is e raised to the power x. ; Definition at line 709 of file TMath.h. ◆ Factorial(). Double_t TMath::Factorial ; (; Int_t ; i). Computes factorial(n). ; Definition at line 252 of file TMath.cxx. ◆ FDist(). Double_t TMath::FDist ; (; Double_t ; F, . Double_t ; N, . Double_t ; M . ). Computes the density function of F-distribution (probability function, integral of density, is computed in FDistI). ; Parameters N and M stand for degrees of freedom of chi-squares mentioned above parameter F is the actual variable x of the density function p(x) and the point at which the density function is calculated. About F distribution:; F-distribution arises in testing whether two random samples have the same variance. It is the ratio of two chi-square distributions, with N and M degrees of freedom respectively, where each chi-square is first divided by it's number of degrees of freedom.; AuthorAnna Kreshuk ; Definition at line 2277 of file TMath.cxx. ◆ FDistI(). Double_t TMath::FDistI ; (; Double_t ; F, . Double_t ; N, . Double_t ; M . ). Calculates the cumulative distribution function of F-distribution (see ROOT::Math::fdistribution_cdf). ; This function occurs in the statistical test of whether two observed samples have the same variance. For this test a certain statistic F, the ratio of observed dispersion of the first sample to that of the second sample, is calculated. N and M stand for numbers of degrees of freedom in the samples 1-FDistI() is the significance level at which the hypothesis ""1 has smaller variance than 2"" can be rejected. A small numerical value of 1 - FDistI() implies a very significant rejection, in turn implying high confi",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:41094,Testability,test,test,41094,"x. ◆ FDist(). Double_t TMath::FDist ; (; Double_t ; F, . Double_t ; N, . Double_t ; M . ). Computes the density function of F-distribution (probability function, integral of density, is computed in FDistI). ; Parameters N and M stand for degrees of freedom of chi-squares mentioned above parameter F is the actual variable x of the density function p(x) and the point at which the density function is calculated. About F distribution:; F-distribution arises in testing whether two random samples have the same variance. It is the ratio of two chi-square distributions, with N and M degrees of freedom respectively, where each chi-square is first divided by it's number of degrees of freedom.; AuthorAnna Kreshuk ; Definition at line 2277 of file TMath.cxx. ◆ FDistI(). Double_t TMath::FDistI ; (; Double_t ; F, . Double_t ; N, . Double_t ; M . ). Calculates the cumulative distribution function of F-distribution (see ROOT::Math::fdistribution_cdf). ; This function occurs in the statistical test of whether two observed samples have the same variance. For this test a certain statistic F, the ratio of observed dispersion of the first sample to that of the second sample, is calculated. N and M stand for numbers of degrees of freedom in the samples 1-FDistI() is the significance level at which the hypothesis ""1 has smaller variance than 2"" can be rejected. A small numerical value of 1 - FDistI() implies a very significant rejection, in turn implying high confidence in the hypothesis ""1 has variance greater than 2"".; AuthorAnna Kreshuk ; Definition at line 2297 of file TMath.cxx. ◆ Finite() [1/2]. Int_t TMath::Finite ; (; Double_t ; x). inline . Check if it is finite with a mask in order to be consistent in presence of fast math. ; Inspired from the CMSSW FWCore/Utilities package ; Definition at line 770 of file TMath.h. ◆ Finite() [2/2]. Int_t TMath::Finite ; (; Float_t ; x). inline . Check if it is finite with a mask in order to be consistent in presence of fast math. ; Inspired from",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:41164,Testability,test,test,41164,"n of F-distribution (probability function, integral of density, is computed in FDistI). ; Parameters N and M stand for degrees of freedom of chi-squares mentioned above parameter F is the actual variable x of the density function p(x) and the point at which the density function is calculated. About F distribution:; F-distribution arises in testing whether two random samples have the same variance. It is the ratio of two chi-square distributions, with N and M degrees of freedom respectively, where each chi-square is first divided by it's number of degrees of freedom.; AuthorAnna Kreshuk ; Definition at line 2277 of file TMath.cxx. ◆ FDistI(). Double_t TMath::FDistI ; (; Double_t ; F, . Double_t ; N, . Double_t ; M . ). Calculates the cumulative distribution function of F-distribution (see ROOT::Math::fdistribution_cdf). ; This function occurs in the statistical test of whether two observed samples have the same variance. For this test a certain statistic F, the ratio of observed dispersion of the first sample to that of the second sample, is calculated. N and M stand for numbers of degrees of freedom in the samples 1-FDistI() is the significance level at which the hypothesis ""1 has smaller variance than 2"" can be rejected. A small numerical value of 1 - FDistI() implies a very significant rejection, in turn implying high confidence in the hypothesis ""1 has variance greater than 2"".; AuthorAnna Kreshuk ; Definition at line 2297 of file TMath.cxx. ◆ Finite() [1/2]. Int_t TMath::Finite ; (; Double_t ; x). inline . Check if it is finite with a mask in order to be consistent in presence of fast math. ; Inspired from the CMSSW FWCore/Utilities package ; Definition at line 770 of file TMath.h. ◆ Finite() [2/2]. Int_t TMath::Finite ; (; Float_t ; x). inline . Check if it is finite with a mask in order to be consistent in presence of fast math. ; Inspired from the CMSSW FWCore/Utilities package ; Definition at line 800 of file TMath.h. ◆ Floor(). Double_t TMath::Floor ; (; Dou",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:47129,Testability,test,tested,47129,"xpr . Standard acceleration of gravity uncertainty. ; Definition at line 181 of file TMath.h. ◆ GUncertainty(). constexpr Double_t TMath::GUncertainty ; (; ). constexpr . Gravitational constant uncertainty. ; Definition at line 150 of file TMath.h. ◆ H(). constexpr Double_t TMath::H ; (; ). constexpr . Planck's constant in \( J s \): \( h \). ; Definition at line 188 of file TMath.h. ◆ Hash() [1/2]. ULong_t TMath::Hash ; (; const char * ; str). Definition at line 1416 of file TMath.cxx. ◆ Hash() [2/2]. ULong_t TMath::Hash ; (; const void * ; txt, . Int_t ; ntxt . ). Calculates hash index from any char string. ; Based on pre-calculated table of 256 specially selected numbers. These numbers are selected in such a way, that for string length == 4 (integer number) the hash is unambiguous, i.e. from hash value we can recalculate input (no degeneration).; The quality of hash method is good enough, that ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N) tested by <R>, <R*R>, <Ri*Ri+1> gives the same result as for libc rand(). For string: i = TMath::Hash(string,nstring);; For int: i = TMath::Hash(&intword,sizeof(int));; For pointer: i = TMath::Hash(&pointer,sizeof(void*)); V.Perev; This function is kept for back compatibility. The code previously in this function has been moved to the static function TString::Hash . Definition at line 1408 of file TMath.cxx. ◆ Hbar(). constexpr Double_t TMath::Hbar ; (; ). constexpr . \( \hbar \) in \( J s \): \( \hbar = \frac{h}{2\pi} \) ; Definition at line 211 of file TMath.h. ◆ Hbarcgs(). constexpr Double_t TMath::Hbarcgs ; (; ). constexpr . \( erg s \) ; Definition at line 218 of file TMath.h. ◆ HbarUncertainty(). constexpr Double_t TMath::HbarUncertainty ; (; ). constexpr . \( \hbar \) uncertainty. ; Definition at line 225 of file TMath.h. ◆ HC(). constexpr Double_t TMath::HC ; (; ). constexpr . \( hc \) in \( J m \) ; Definition at line 233 of file TMath.h. ◆ HCcgs(). constexpr Double_t TMath::HCcgs ; (; ). constexpr . \( erg c",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:50087,Testability,test,test,50087,"; T ; xp, . T ; yp, . Int_t ; np, . T * ; x, . T * ; y . ). Function which returns kTRUE if point xp,yp lies inside the polygon defined by the np points in arrays x and y, kFALSE otherwise. ; Note that the polygon may be open or closed. ; Definition at line 1233 of file TMath.h. ◆ IsNaN() [1/2]. Bool_t TMath::IsNaN ; (; Double_t ; x). inline . Definition at line 892 of file TMath.h. ◆ IsNaN() [2/2]. Bool_t TMath::IsNaN ; (; Float_t ; x). inline . Definition at line 893 of file TMath.h. ◆ K(). constexpr Double_t TMath::K ; (; ). constexpr . Boltzmann's constant in \( J K^{-1} \): \( k \). ; Definition at line 247 of file TMath.h. ◆ Kcgs(). constexpr Double_t TMath::Kcgs ; (; ). constexpr . \( erg K^{-1} \) ; Definition at line 254 of file TMath.h. ◆ KolmogorovProb(). Double_t TMath::KolmogorovProb ; (; Double_t ; z). Calculates the Kolmogorov distribution function,. . \[; P(z) = 2 \sum_{j=1}^{\infty} (-1)^{j-1} e^{-2 j^2 z^2}; \]. which gives the probability that Kolmogorov's test statistic will exceed the value z assuming the null hypothesis. This gives a very powerful test for comparing two one-dimensional distributions. see, for example, Eadie et al, ""statistical Methods in Experimental; Physics', pp 269-270). This function returns the confidence level for the null hypothesis, where:; - \_form#593, and; - \_form#594 is the maximum deviation between a hypothetical distribution; function and an experimental distribution with; - \_form#354 events. NOTE: To compare two experimental distributions with m and n events,; use \_form#595. Accuracy: The function is far too accurate for any imaginable application.; Probabilities less than \_form#596 are returned as zero.; However, remember that the formula is only valid for ""large"" n.; Theta function inversion formula is used for z <= 1; This function was translated by Rene Brun from PROBKL in CERNLIB. ; Definition at line 679 of file TMath.cxx. ◆ KolmogorovTest(). Double_t TMath::KolmogorovTest ; (; Int_t ; na, . const Double",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:50183,Testability,test,test,50183,"xp,yp lies inside the polygon defined by the np points in arrays x and y, kFALSE otherwise. ; Note that the polygon may be open or closed. ; Definition at line 1233 of file TMath.h. ◆ IsNaN() [1/2]. Bool_t TMath::IsNaN ; (; Double_t ; x). inline . Definition at line 892 of file TMath.h. ◆ IsNaN() [2/2]. Bool_t TMath::IsNaN ; (; Float_t ; x). inline . Definition at line 893 of file TMath.h. ◆ K(). constexpr Double_t TMath::K ; (; ). constexpr . Boltzmann's constant in \( J K^{-1} \): \( k \). ; Definition at line 247 of file TMath.h. ◆ Kcgs(). constexpr Double_t TMath::Kcgs ; (; ). constexpr . \( erg K^{-1} \) ; Definition at line 254 of file TMath.h. ◆ KolmogorovProb(). Double_t TMath::KolmogorovProb ; (; Double_t ; z). Calculates the Kolmogorov distribution function,. . \[; P(z) = 2 \sum_{j=1}^{\infty} (-1)^{j-1} e^{-2 j^2 z^2}; \]. which gives the probability that Kolmogorov's test statistic will exceed the value z assuming the null hypothesis. This gives a very powerful test for comparing two one-dimensional distributions. see, for example, Eadie et al, ""statistical Methods in Experimental; Physics', pp 269-270). This function returns the confidence level for the null hypothesis, where:; - \_form#593, and; - \_form#594 is the maximum deviation between a hypothetical distribution; function and an experimental distribution with; - \_form#354 events. NOTE: To compare two experimental distributions with m and n events,; use \_form#595. Accuracy: The function is far too accurate for any imaginable application.; Probabilities less than \_form#596 are returned as zero.; However, remember that the formula is only valid for ""large"" n.; Theta function inversion formula is used for z <= 1; This function was translated by Rene Brun from PROBKL in CERNLIB. ; Definition at line 679 of file TMath.cxx. ◆ KolmogorovTest(). Double_t TMath::KolmogorovTest ; (; Int_t ; na, . const Double_t * ; a, . Int_t ; nb, . const Double_t * ; b, . Option_t * ; option . ). Statistical test whethe",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:51185,Testability,test,test,51185,"example, Eadie et al, ""statistical Methods in Experimental; Physics', pp 269-270). This function returns the confidence level for the null hypothesis, where:; - \_form#593, and; - \_form#594 is the maximum deviation between a hypothetical distribution; function and an experimental distribution with; - \_form#354 events. NOTE: To compare two experimental distributions with m and n events,; use \_form#595. Accuracy: The function is far too accurate for any imaginable application.; Probabilities less than \_form#596 are returned as zero.; However, remember that the formula is only valid for ""large"" n.; Theta function inversion formula is used for z <= 1; This function was translated by Rene Brun from PROBKL in CERNLIB. ; Definition at line 679 of file TMath.cxx. ◆ KolmogorovTest(). Double_t TMath::KolmogorovTest ; (; Int_t ; na, . const Double_t * ; a, . Int_t ; nb, . const Double_t * ; b, . Option_t * ; option . ). Statistical test whether two one-dimensional sets of points are compatible with coming from the same parent distribution, using the Kolmogorov test. ; That is, it is used to compare two experimental distributions of unbinned data. Input:; a,b: One-dimensional arrays of length na, nb, respectively. The elements of a and b must be given in ascending order. option is a character string to specify options ""D"" Put out a line of ""Debug"" printout ""M"" Return the Maximum Kolmogorov distance instead of prob. Output:; The returned value prob is a calculated confidence level which gives a statistical test for compatibility of a and b. Values of prob close to zero are taken as indicating a small probability of compatibility. For two point sets drawn randomly from the same parent distribution, the value of prob should be uniformly distributed between zero and one. in case of error the function return -1 If the 2 sets have a different number of points, the minimum of the two sets is used. Method:; The Kolmogorov test is used. The test statistic is the maximum deviation bet",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:51316,Testability,test,test,51316,"example, Eadie et al, ""statistical Methods in Experimental; Physics', pp 269-270). This function returns the confidence level for the null hypothesis, where:; - \_form#593, and; - \_form#594 is the maximum deviation between a hypothetical distribution; function and an experimental distribution with; - \_form#354 events. NOTE: To compare two experimental distributions with m and n events,; use \_form#595. Accuracy: The function is far too accurate for any imaginable application.; Probabilities less than \_form#596 are returned as zero.; However, remember that the formula is only valid for ""large"" n.; Theta function inversion formula is used for z <= 1; This function was translated by Rene Brun from PROBKL in CERNLIB. ; Definition at line 679 of file TMath.cxx. ◆ KolmogorovTest(). Double_t TMath::KolmogorovTest ; (; Int_t ; na, . const Double_t * ; a, . Int_t ; nb, . const Double_t * ; b, . Option_t * ; option . ). Statistical test whether two one-dimensional sets of points are compatible with coming from the same parent distribution, using the Kolmogorov test. ; That is, it is used to compare two experimental distributions of unbinned data. Input:; a,b: One-dimensional arrays of length na, nb, respectively. The elements of a and b must be given in ascending order. option is a character string to specify options ""D"" Put out a line of ""Debug"" printout ""M"" Return the Maximum Kolmogorov distance instead of prob. Output:; The returned value prob is a calculated confidence level which gives a statistical test for compatibility of a and b. Values of prob close to zero are taken as indicating a small probability of compatibility. For two point sets drawn randomly from the same parent distribution, the value of prob should be uniformly distributed between zero and one. in case of error the function return -1 If the 2 sets have a different number of points, the minimum of the two sets is used. Method:; The Kolmogorov test is used. The test statistic is the maximum deviation bet",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:51769,Testability,test,test,51769,"ties less than \_form#596 are returned as zero.; However, remember that the formula is only valid for ""large"" n.; Theta function inversion formula is used for z <= 1; This function was translated by Rene Brun from PROBKL in CERNLIB. ; Definition at line 679 of file TMath.cxx. ◆ KolmogorovTest(). Double_t TMath::KolmogorovTest ; (; Int_t ; na, . const Double_t * ; a, . Int_t ; nb, . const Double_t * ; b, . Option_t * ; option . ). Statistical test whether two one-dimensional sets of points are compatible with coming from the same parent distribution, using the Kolmogorov test. ; That is, it is used to compare two experimental distributions of unbinned data. Input:; a,b: One-dimensional arrays of length na, nb, respectively. The elements of a and b must be given in ascending order. option is a character string to specify options ""D"" Put out a line of ""Debug"" printout ""M"" Return the Maximum Kolmogorov distance instead of prob. Output:; The returned value prob is a calculated confidence level which gives a statistical test for compatibility of a and b. Values of prob close to zero are taken as indicating a small probability of compatibility. For two point sets drawn randomly from the same parent distribution, the value of prob should be uniformly distributed between zero and one. in case of error the function return -1 If the 2 sets have a different number of points, the minimum of the two sets is used. Method:; The Kolmogorov test is used. The test statistic is the maximum deviation between the two integrated distribution functions, multiplied by the normalizing factor (rdmax*sqrt(na*nb/(na+nb)).; Code adapted by Rene Brun from CERNLIB routine TKOLMO (Fred James) (W.T. Eadie, D. Drijard, F.E. James, M. Roos and B. Sadoulet, Statistical Methods in Experimental Physics, (North-Holland, Amsterdam 1971) 269-271). Method Improvement by Jason A Detwiler (JADetwiler@lbl.gov); The nuts-and-bolts of the TMath::KolmogorovTest() algorithm is a for-loop over the two sorted arrays a",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:52186,Testability,test,test,52186,"ical test whether two one-dimensional sets of points are compatible with coming from the same parent distribution, using the Kolmogorov test. ; That is, it is used to compare two experimental distributions of unbinned data. Input:; a,b: One-dimensional arrays of length na, nb, respectively. The elements of a and b must be given in ascending order. option is a character string to specify options ""D"" Put out a line of ""Debug"" printout ""M"" Return the Maximum Kolmogorov distance instead of prob. Output:; The returned value prob is a calculated confidence level which gives a statistical test for compatibility of a and b. Values of prob close to zero are taken as indicating a small probability of compatibility. For two point sets drawn randomly from the same parent distribution, the value of prob should be uniformly distributed between zero and one. in case of error the function return -1 If the 2 sets have a different number of points, the minimum of the two sets is used. Method:; The Kolmogorov test is used. The test statistic is the maximum deviation between the two integrated distribution functions, multiplied by the normalizing factor (rdmax*sqrt(na*nb/(na+nb)).; Code adapted by Rene Brun from CERNLIB routine TKOLMO (Fred James) (W.T. Eadie, D. Drijard, F.E. James, M. Roos and B. Sadoulet, Statistical Methods in Experimental Physics, (North-Holland, Amsterdam 1971) 269-271). Method Improvement by Jason A Detwiler (JADetwiler@lbl.gov); The nuts-and-bolts of the TMath::KolmogorovTest() algorithm is a for-loop over the two sorted arrays a and b representing empirical distribution functions. The for-loop handles 3 cases: when the next points to be evaluated satisfy a>b, a<b, or a=b:; for (Int_t i=0;i<na+nb;i++) {; if (a[ia-1] < b[ib-1]) {; rdiff -= sa;; ia++;; if (ia > na) {ok = kTRUE; break;}; } else if (a[ia-1] > b[ib-1]) {; rdiff += sb;; ib++;; if (ib > nb) {ok = kTRUE; break;}; } else {; rdiff += sb - sa;; ia++;; ib++;; if (ia > na) {ok = kTRUE; break;}; if (ib > nb)",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:52204,Testability,test,test,52204,"t distribution, using the Kolmogorov test. ; That is, it is used to compare two experimental distributions of unbinned data. Input:; a,b: One-dimensional arrays of length na, nb, respectively. The elements of a and b must be given in ascending order. option is a character string to specify options ""D"" Put out a line of ""Debug"" printout ""M"" Return the Maximum Kolmogorov distance instead of prob. Output:; The returned value prob is a calculated confidence level which gives a statistical test for compatibility of a and b. Values of prob close to zero are taken as indicating a small probability of compatibility. For two point sets drawn randomly from the same parent distribution, the value of prob should be uniformly distributed between zero and one. in case of error the function return -1 If the 2 sets have a different number of points, the minimum of the two sets is used. Method:; The Kolmogorov test is used. The test statistic is the maximum deviation between the two integrated distribution functions, multiplied by the normalizing factor (rdmax*sqrt(na*nb/(na+nb)).; Code adapted by Rene Brun from CERNLIB routine TKOLMO (Fred James) (W.T. Eadie, D. Drijard, F.E. James, M. Roos and B. Sadoulet, Statistical Methods in Experimental Physics, (North-Holland, Amsterdam 1971) 269-271). Method Improvement by Jason A Detwiler (JADetwiler@lbl.gov); The nuts-and-bolts of the TMath::KolmogorovTest() algorithm is a for-loop over the two sorted arrays a and b representing empirical distribution functions. The for-loop handles 3 cases: when the next points to be evaluated satisfy a>b, a<b, or a=b:; for (Int_t i=0;i<na+nb;i++) {; if (a[ia-1] < b[ib-1]) {; rdiff -= sa;; ia++;; if (ia > na) {ok = kTRUE; break;}; } else if (a[ia-1] > b[ib-1]) {; rdiff += sb;; ib++;; if (ib > nb) {ok = kTRUE; break;}; } else {; rdiff += sb - sa;; ia++;; ib++;; if (ia > na) {ok = kTRUE; break;}; if (ib > nb) {ok = kTRUE; break;}; }; rdmax = TMath::Max(rdmax,TMath::Abs(rdiff));; }; b#define b(i)Definition ",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:54695,Testability,test,test,54695,"ces each array by one index in an attempt to move through the equality. However, this is incorrect when one or the other of a or b (or both) have a repeated value, call it x. For the KS statistic to be computed properly, rdiff needs to be calculated after all of the a and b at x have been tallied (this is due to the definition of the empirical distribution function; another way to convince yourself that the old CERNLIB method is wrong is that it implies that the function defined as the difference between a and b is multi-valued at x – besides being ugly, this would invalidate Kolmogorov's theorem).; The solution is to just add while-loops into the equality-case handling to perform the tally:; } else {; double x = a[ia-1];; while(a[ia-1] == x && ia <= na) {; rdiff -= sa;; ia++;; }; while(b[ib-1] == x && ib <= nb) {; rdiff += sb;; ib++;; }; if (ia > na) {ok = kTRUE; break;}; if (ib > nb) {ok = kTRUE; break;}; }; xDouble_t x[n]Definition legend1.C:17. Note:; A good description of the Kolmogorov test can be seen at: http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm ; Definition at line 805 of file TMath.cxx. ◆ KOrdStat(). template<class Element , typename Size > . Element TMath::KOrdStat ; (; Size ; n, . const Element * ; a, . Size ; k, . Size * ; work = 0 . ). Returns k_th order statistic of the array a of size n (k_th smallest element out of n elements). ; C-convention is used for array indexing, so if you want the second smallest element, call KOrdStat(n, a, 1).; If work is supplied, it is used to store the sorting index and assumed to be >= n. If work=0, local storage is used, either on the stack if n < kWorkMax or on the heap for n >= kWorkMax. Note that the work index array will not contain the sorted indices but all indices of the smaller element in arbitrary order in work[0,...,k-1] and all indices of the larger element in arbitrary order in work[k+1,..,n-1] work[k] will contain instead the index of the returned element.; Taken from ""Numerical Recip",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:58410,Testability,log,log,58410," it also appears as the two-tailed exponential or the bilateral exponential distribution ; Definition at line 2364 of file TMath.cxx. ◆ LaplaceDistI(). Double_t TMath::LaplaceDistI ; (; Double_t ; x, . Double_t ; alpha = 0, . Double_t ; beta = 1 . ). Computes the cumulative distribution function (lower tail integral) of Laplace distribution at point x, with location parameter alpha and shape parameter beta. ; By default, alpha=0, beta=1 This distribution is known under different names, most common is double exponential distribution, but it also appears as the two-tailed exponential or the bilateral exponential distribution ; Definition at line 2380 of file TMath.cxx. ◆ Ldexp(). Double_t TMath::Ldexp ; (; Double_t ; x, . Int_t ; exp . ). inline . Returns the result of multiplying x (the significant) by 2 raised to the power of exp (the exponent). ; Definition at line 715 of file TMath.h. ◆ Ln10(). constexpr Double_t TMath::Ln10 ; (; ). constexpr . Natural log of 10 (to convert log to ln) ; Definition at line 100 of file TMath.h. ◆ LnGamma(). Double_t TMath::LnGamma ; (; Double_t ; z). Computation of ln[gamma(z)] for all z. ; C.Lanczos, SIAM Journal of Numerical Analysis B1 (1964), 86.; The accuracy of the result is better than 2e-10.; AuthorNvE 14-nov-1998 UU-SAP Utrecht ; Definition at line 509 of file TMath.cxx. ◆ LocMax() [1/2]. template<typename Iterator > . Iterator TMath::LocMax ; (; Iterator ; first, . Iterator ; last . ). Returns index of array with the maximum element. ; If more than one element is maximum returns first found. ; Definition at line 1030 of file TMath.h. ◆ LocMax() [2/2]. template<typename T > . Long64_t TMath::LocMax ; (; Long64_t ; n, . const T * ; a . ). Returns index of array with the maximum element. ; If more than one element is maximum returns first found.; Implement here since it is faster (see comment in LocMin function) ; Definition at line 1012 of file TMath.h. ◆ LocMin() [1/2]. template<typename Iterator > . Iterator TMath::LocMin ;",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:58432,Testability,log,log,58432," it also appears as the two-tailed exponential or the bilateral exponential distribution ; Definition at line 2364 of file TMath.cxx. ◆ LaplaceDistI(). Double_t TMath::LaplaceDistI ; (; Double_t ; x, . Double_t ; alpha = 0, . Double_t ; beta = 1 . ). Computes the cumulative distribution function (lower tail integral) of Laplace distribution at point x, with location parameter alpha and shape parameter beta. ; By default, alpha=0, beta=1 This distribution is known under different names, most common is double exponential distribution, but it also appears as the two-tailed exponential or the bilateral exponential distribution ; Definition at line 2380 of file TMath.cxx. ◆ Ldexp(). Double_t TMath::Ldexp ; (; Double_t ; x, . Int_t ; exp . ). inline . Returns the result of multiplying x (the significant) by 2 raised to the power of exp (the exponent). ; Definition at line 715 of file TMath.h. ◆ Ln10(). constexpr Double_t TMath::Ln10 ; (; ). constexpr . Natural log of 10 (to convert log to ln) ; Definition at line 100 of file TMath.h. ◆ LnGamma(). Double_t TMath::LnGamma ; (; Double_t ; z). Computation of ln[gamma(z)] for all z. ; C.Lanczos, SIAM Journal of Numerical Analysis B1 (1964), 86.; The accuracy of the result is better than 2e-10.; AuthorNvE 14-nov-1998 UU-SAP Utrecht ; Definition at line 509 of file TMath.cxx. ◆ LocMax() [1/2]. template<typename Iterator > . Iterator TMath::LocMax ; (; Iterator ; first, . Iterator ; last . ). Returns index of array with the maximum element. ; If more than one element is maximum returns first found. ; Definition at line 1030 of file TMath.h. ◆ LocMax() [2/2]. template<typename T > . Long64_t TMath::LocMax ; (; Long64_t ; n, . const T * ; a . ). Returns index of array with the maximum element. ; If more than one element is maximum returns first found.; Implement here since it is faster (see comment in LocMin function) ; Definition at line 1012 of file TMath.h. ◆ LocMin() [1/2]. template<typename Iterator > . Iterator TMath::LocMin ;",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:60246,Testability,log,logarithm,60246,"s first found.; Implement here since it is faster (see comment in LocMin function) ; Definition at line 1012 of file TMath.h. ◆ LocMin() [1/2]. template<typename Iterator > . Iterator TMath::LocMin ; (; Iterator ; first, . Iterator ; last . ). Returns index of array with the minimum element. ; If more than one element is minimum returns first found. ; Definition at line 1000 of file TMath.h. ◆ LocMin() [2/2]. template<typename T > . Long64_t TMath::LocMin ; (; Long64_t ; n, . const T * ; a . ). Returns index of array with the minimum element. ; If more than one element is minimum returns first found.; Implement here since this one is found to be faster (mainly on 64 bit machines) than stl generic implementation. When performing the comparison, the STL implementation needs to de-reference both the array iterator and the iterator pointing to the resulting minimum location ; Definition at line 982 of file TMath.h. ◆ Log(). Double_t TMath::Log ; (; Double_t ; x). inline . Returns the natural logarithm of x. ; Definition at line 756 of file TMath.h. ◆ Log10(). Double_t TMath::Log10 ; (; Double_t ; x). inline . Returns the common (base-10) logarithm of x. ; Definition at line 762 of file TMath.h. ◆ Log2(). Double_t TMath::Log2 ; (; Double_t ; x). Returns the binary (base-2) logarithm of x. ; Definition at line 107 of file TMath.cxx. ◆ LogE(). constexpr Double_t TMath::LogE ; (; ). constexpr . Base-10 log of e (to convert ln to log) ; Definition at line 107 of file TMath.h. ◆ LogNormal(). Double_t TMath::LogNormal ; (; Double_t ; x, . Double_t ; sigma, . Double_t ; theta = 0, . Double_t ; m = 1 . ). Computes the density of LogNormal distribution at point x. ; Variable X has lognormal distribution if Y=Ln(X) has normal distribution; Parameters. [in]xis the evaluation point ; [in]sigmais the shape parameter ; [in]thetais the location parameter ; [in]mis the scale parameter. The formula was taken from ""Engineering Statistics Handbook"" on site http://www.itl.nist.gov/div898/ha",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:60395,Testability,log,logarithm,60395,"template<typename Iterator > . Iterator TMath::LocMin ; (; Iterator ; first, . Iterator ; last . ). Returns index of array with the minimum element. ; If more than one element is minimum returns first found. ; Definition at line 1000 of file TMath.h. ◆ LocMin() [2/2]. template<typename T > . Long64_t TMath::LocMin ; (; Long64_t ; n, . const T * ; a . ). Returns index of array with the minimum element. ; If more than one element is minimum returns first found.; Implement here since this one is found to be faster (mainly on 64 bit machines) than stl generic implementation. When performing the comparison, the STL implementation needs to de-reference both the array iterator and the iterator pointing to the resulting minimum location ; Definition at line 982 of file TMath.h. ◆ Log(). Double_t TMath::Log ; (; Double_t ; x). inline . Returns the natural logarithm of x. ; Definition at line 756 of file TMath.h. ◆ Log10(). Double_t TMath::Log10 ; (; Double_t ; x). inline . Returns the common (base-10) logarithm of x. ; Definition at line 762 of file TMath.h. ◆ Log2(). Double_t TMath::Log2 ; (; Double_t ; x). Returns the binary (base-2) logarithm of x. ; Definition at line 107 of file TMath.cxx. ◆ LogE(). constexpr Double_t TMath::LogE ; (; ). constexpr . Base-10 log of e (to convert ln to log) ; Definition at line 107 of file TMath.h. ◆ LogNormal(). Double_t TMath::LogNormal ; (; Double_t ; x, . Double_t ; sigma, . Double_t ; theta = 0, . Double_t ; m = 1 . ). Computes the density of LogNormal distribution at point x. ; Variable X has lognormal distribution if Y=Ln(X) has normal distribution; Parameters. [in]xis the evaluation point ; [in]sigmais the shape parameter ; [in]thetais the location parameter ; [in]mis the scale parameter. The formula was taken from ""Engineering Statistics Handbook"" on site http://www.itl.nist.gov/div898/handbook/eda/section3/eda3669.htm Implementation using ROOT::Math::lognormal_pdf. Definition at line 2437 of file TMath.cxx. ◆ Max() [1/10]. Double",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:60532,Testability,log,logarithm,60532,"m element. ; If more than one element is minimum returns first found. ; Definition at line 1000 of file TMath.h. ◆ LocMin() [2/2]. template<typename T > . Long64_t TMath::LocMin ; (; Long64_t ; n, . const T * ; a . ). Returns index of array with the minimum element. ; If more than one element is minimum returns first found.; Implement here since this one is found to be faster (mainly on 64 bit machines) than stl generic implementation. When performing the comparison, the STL implementation needs to de-reference both the array iterator and the iterator pointing to the resulting minimum location ; Definition at line 982 of file TMath.h. ◆ Log(). Double_t TMath::Log ; (; Double_t ; x). inline . Returns the natural logarithm of x. ; Definition at line 756 of file TMath.h. ◆ Log10(). Double_t TMath::Log10 ; (; Double_t ; x). inline . Returns the common (base-10) logarithm of x. ; Definition at line 762 of file TMath.h. ◆ Log2(). Double_t TMath::Log2 ; (; Double_t ; x). Returns the binary (base-2) logarithm of x. ; Definition at line 107 of file TMath.cxx. ◆ LogE(). constexpr Double_t TMath::LogE ; (; ). constexpr . Base-10 log of e (to convert ln to log) ; Definition at line 107 of file TMath.h. ◆ LogNormal(). Double_t TMath::LogNormal ; (; Double_t ; x, . Double_t ; sigma, . Double_t ; theta = 0, . Double_t ; m = 1 . ). Computes the density of LogNormal distribution at point x. ; Variable X has lognormal distribution if Y=Ln(X) has normal distribution; Parameters. [in]xis the evaluation point ; [in]sigmais the shape parameter ; [in]thetais the location parameter ; [in]mis the scale parameter. The formula was taken from ""Engineering Statistics Handbook"" on site http://www.itl.nist.gov/div898/handbook/eda/section3/eda3669.htm Implementation using ROOT::Math::lognormal_pdf. Definition at line 2437 of file TMath.cxx. ◆ Max() [1/10]. Double_t TMath::Max ; (; Double_t ; a, . Double_t ; b . ). inline . Returns the largest of a and b. ; If both are equivalent, a is returned. aa",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:60661,Testability,log,log,60661,"th::LocMin ; (; Long64_t ; n, . const T * ; a . ). Returns index of array with the minimum element. ; If more than one element is minimum returns first found.; Implement here since this one is found to be faster (mainly on 64 bit machines) than stl generic implementation. When performing the comparison, the STL implementation needs to de-reference both the array iterator and the iterator pointing to the resulting minimum location ; Definition at line 982 of file TMath.h. ◆ Log(). Double_t TMath::Log ; (; Double_t ; x). inline . Returns the natural logarithm of x. ; Definition at line 756 of file TMath.h. ◆ Log10(). Double_t TMath::Log10 ; (; Double_t ; x). inline . Returns the common (base-10) logarithm of x. ; Definition at line 762 of file TMath.h. ◆ Log2(). Double_t TMath::Log2 ; (; Double_t ; x). Returns the binary (base-2) logarithm of x. ; Definition at line 107 of file TMath.cxx. ◆ LogE(). constexpr Double_t TMath::LogE ; (; ). constexpr . Base-10 log of e (to convert ln to log) ; Definition at line 107 of file TMath.h. ◆ LogNormal(). Double_t TMath::LogNormal ; (; Double_t ; x, . Double_t ; sigma, . Double_t ; theta = 0, . Double_t ; m = 1 . ). Computes the density of LogNormal distribution at point x. ; Variable X has lognormal distribution if Y=Ln(X) has normal distribution; Parameters. [in]xis the evaluation point ; [in]sigmais the shape parameter ; [in]thetais the location parameter ; [in]mis the scale parameter. The formula was taken from ""Engineering Statistics Handbook"" on site http://www.itl.nist.gov/div898/handbook/eda/section3/eda3669.htm Implementation using ROOT::Math::lognormal_pdf. Definition at line 2437 of file TMath.cxx. ◆ Max() [1/10]. Double_t TMath::Max ; (; Double_t ; a, . Double_t ; b . ). inline . Returns the largest of a and b. ; If both are equivalent, a is returned. aand b are Double_t. ; Definition at line 295 of file TMathBase.h. ◆ Max() [2/10]. Float_t TMath::Max ; (; Float_t ; a, . Float_t ; b . ). inline . Returns the largest o",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:60688,Testability,log,log,60688,"th::LocMin ; (; Long64_t ; n, . const T * ; a . ). Returns index of array with the minimum element. ; If more than one element is minimum returns first found.; Implement here since this one is found to be faster (mainly on 64 bit machines) than stl generic implementation. When performing the comparison, the STL implementation needs to de-reference both the array iterator and the iterator pointing to the resulting minimum location ; Definition at line 982 of file TMath.h. ◆ Log(). Double_t TMath::Log ; (; Double_t ; x). inline . Returns the natural logarithm of x. ; Definition at line 756 of file TMath.h. ◆ Log10(). Double_t TMath::Log10 ; (; Double_t ; x). inline . Returns the common (base-10) logarithm of x. ; Definition at line 762 of file TMath.h. ◆ Log2(). Double_t TMath::Log2 ; (; Double_t ; x). Returns the binary (base-2) logarithm of x. ; Definition at line 107 of file TMath.cxx. ◆ LogE(). constexpr Double_t TMath::LogE ; (; ). constexpr . Base-10 log of e (to convert ln to log) ; Definition at line 107 of file TMath.h. ◆ LogNormal(). Double_t TMath::LogNormal ; (; Double_t ; x, . Double_t ; sigma, . Double_t ; theta = 0, . Double_t ; m = 1 . ). Computes the density of LogNormal distribution at point x. ; Variable X has lognormal distribution if Y=Ln(X) has normal distribution; Parameters. [in]xis the evaluation point ; [in]sigmais the shape parameter ; [in]thetais the location parameter ; [in]mis the scale parameter. The formula was taken from ""Engineering Statistics Handbook"" on site http://www.itl.nist.gov/div898/handbook/eda/section3/eda3669.htm Implementation using ROOT::Math::lognormal_pdf. Definition at line 2437 of file TMath.cxx. ◆ Max() [1/10]. Double_t TMath::Max ; (; Double_t ; a, . Double_t ; b . ). inline . Returns the largest of a and b. ; If both are equivalent, a is returned. aand b are Double_t. ; Definition at line 295 of file TMathBase.h. ◆ Max() [2/10]. Float_t TMath::Max ; (; Float_t ; a, . Float_t ; b . ). inline . Returns the largest o",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:60939,Testability,log,lognormal,60939,"When performing the comparison, the STL implementation needs to de-reference both the array iterator and the iterator pointing to the resulting minimum location ; Definition at line 982 of file TMath.h. ◆ Log(). Double_t TMath::Log ; (; Double_t ; x). inline . Returns the natural logarithm of x. ; Definition at line 756 of file TMath.h. ◆ Log10(). Double_t TMath::Log10 ; (; Double_t ; x). inline . Returns the common (base-10) logarithm of x. ; Definition at line 762 of file TMath.h. ◆ Log2(). Double_t TMath::Log2 ; (; Double_t ; x). Returns the binary (base-2) logarithm of x. ; Definition at line 107 of file TMath.cxx. ◆ LogE(). constexpr Double_t TMath::LogE ; (; ). constexpr . Base-10 log of e (to convert ln to log) ; Definition at line 107 of file TMath.h. ◆ LogNormal(). Double_t TMath::LogNormal ; (; Double_t ; x, . Double_t ; sigma, . Double_t ; theta = 0, . Double_t ; m = 1 . ). Computes the density of LogNormal distribution at point x. ; Variable X has lognormal distribution if Y=Ln(X) has normal distribution; Parameters. [in]xis the evaluation point ; [in]sigmais the shape parameter ; [in]thetais the location parameter ; [in]mis the scale parameter. The formula was taken from ""Engineering Statistics Handbook"" on site http://www.itl.nist.gov/div898/handbook/eda/section3/eda3669.htm Implementation using ROOT::Math::lognormal_pdf. Definition at line 2437 of file TMath.cxx. ◆ Max() [1/10]. Double_t TMath::Max ; (; Double_t ; a, . Double_t ; b . ). inline . Returns the largest of a and b. ; If both are equivalent, a is returned. aand b are Double_t. ; Definition at line 295 of file TMathBase.h. ◆ Max() [2/10]. Float_t TMath::Max ; (; Float_t ; a, . Float_t ; b . ). inline . Returns the largest of a and b. ; If both are equivalent, a is returned. aand b are Float_t. ; Definition at line 290 of file TMathBase.h. ◆ Max() [3/10]. Int_t TMath::Max ; (; Int_t ; a, . Int_t ; b . ). inline . Returns the largest of a and b. ; If both are equivalent, a is returned. aand b ",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:85091,Testability,test,tests,85091," by Rene Brun. ; Definition at line 1846 of file TMath.cxx. ◆ StruveL0(). Double_t TMath::StruveL0 ; (; Double_t ; x). Struve functions of order 1. ; Modified Struve Function of Order 0.; AuthorKirill Filimonov. ; Definition at line 1923 of file TMath.cxx. ◆ StruveL1(). Double_t TMath::StruveL1 ; (; Double_t ; x). Modified Struve functions of order 0. ; Modified Struve Function of Order 1.; AuthorKirill Filimonov. ; Definition at line 1970 of file TMath.cxx. ◆ Student(). Double_t TMath::Student ; (; Double_t ; T, . Double_t ; ndf . ). Computes density function for Student's t- distribution (the probability function (integral of density) is computed in StudentI). ; First parameter stands for x - the actual variable of the density function p(x) and the point at which the density is calculated. Second parameter stands for number of degrees of freedom.; About Student distribution: Student's t-distribution is used for many significance tests, for example, for the Student's t-tests for the statistical significance of difference between two sample means and for confidence intervals for the difference between two population means.; Example: suppose we have a random sample of size n drawn from normal distribution with mean Mu and st.deviation Sigma. Then the variable; t = (sample_mean - Mu)/(sample_deviation / sqrt(n)); has Student's t-distribution with n-1 degrees of freedom.; NOTE that this function's second argument is number of degrees of freedom, not the sample size.; As the number of degrees of freedom grows, t-distribution approaches Normal(0,1) distribution.; AuthorAnna Kreshuk ; Definition at line 2623 of file TMath.cxx. ◆ StudentI(). Double_t TMath::StudentI ; (; Double_t ; T, . Double_t ; ndf . ). Calculates the cumulative distribution function of Student's t-distribution second parameter stands for number of degrees of freedom, not for the number of samples if x has Student's t-distribution, the function returns the probability of x being less than T. ; This is e",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMath.html:85131,Testability,test,tests,85131," by Rene Brun. ; Definition at line 1846 of file TMath.cxx. ◆ StruveL0(). Double_t TMath::StruveL0 ; (; Double_t ; x). Struve functions of order 1. ; Modified Struve Function of Order 0.; AuthorKirill Filimonov. ; Definition at line 1923 of file TMath.cxx. ◆ StruveL1(). Double_t TMath::StruveL1 ; (; Double_t ; x). Modified Struve functions of order 0. ; Modified Struve Function of Order 1.; AuthorKirill Filimonov. ; Definition at line 1970 of file TMath.cxx. ◆ Student(). Double_t TMath::Student ; (; Double_t ; T, . Double_t ; ndf . ). Computes density function for Student's t- distribution (the probability function (integral of density) is computed in StudentI). ; First parameter stands for x - the actual variable of the density function p(x) and the point at which the density is calculated. Second parameter stands for number of degrees of freedom.; About Student distribution: Student's t-distribution is used for many significance tests, for example, for the Student's t-tests for the statistical significance of difference between two sample means and for confidence intervals for the difference between two population means.; Example: suppose we have a random sample of size n drawn from normal distribution with mean Mu and st.deviation Sigma. Then the variable; t = (sample_mean - Mu)/(sample_deviation / sqrt(n)); has Student's t-distribution with n-1 degrees of freedom.; NOTE that this function's second argument is number of degrees of freedom, not the sample size.; As the number of degrees of freedom grows, t-distribution approaches Normal(0,1) distribution.; AuthorAnna Kreshuk ; Definition at line 2623 of file TMath.cxx. ◆ StudentI(). Double_t TMath::StudentI ; (; Double_t ; T, . Double_t ; ndf . ). Calculates the cumulative distribution function of Student's t-distribution second parameter stands for number of degrees of freedom, not for the number of samples if x has Student's t-distribution, the function returns the probability of x being less than T. ; This is e",MatchSource.WIKI,doc/master/namespaceTMath.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMath.html
https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:2734,Integrability,rout,routine,2734,"t > ; TVectorT< Element > & AddElemDiv (TVectorT< Element > &target, Element scalar, const TVectorT< Element > &source1, const TVectorT< Element > &source2, const TVectorT< Element > &select);  Modify addition: target += scalar * ElementDiv(source1,source2) only for those elements where select[i] != 0.0. ;  ; template<class Element > ; TVectorT< Element > & AddElemMult (TVectorT< Element > &target, Element scalar, const TVectorT< Element > &source1, const TVectorT< Element > &source2);  Modify addition: target += scalar * ElementMult(source1,source2) . ;  ; template<class Element > ; TVectorT< Element > & AddElemMult (TVectorT< Element > &target, Element scalar, const TVectorT< Element > &source1, const TVectorT< Element > &source2, const TVectorT< Element > &select);  Modify addition: target += scalar * ElementMult(source1,source2) only for those elements where select[i] != 0.0. ;  ; template<class Element > ; void AMultB (const Element *const ap, Int_t na, Int_t ncolsa, const Element *const bp, Int_t nb, Int_t ncolsb, Element *cp);  Elementary routine to calculate matrix multiplication A*B. ;  ; template<class Element > ; void AMultBt (const Element *const ap, Int_t na, Int_t ncolsa, const Element *const bp, Int_t nb, Int_t ncolsb, Element *cp);  Elementary routine to calculate matrix multiplication A*B^T. ;  ; template<class Element1 , class Element2 > ; Bool_t AreCompatible (const TMatrixT< Element1 > &m, const TVectorT< Element2 > &v, Int_t verbose=0);  Check if m and v are both valid and have compatible shapes for M * v. ;  ; template<class Element1 , class Element2 > ; Bool_t AreCompatible (const TMatrixTBase< Element1 > &m1, const TMatrixTBase< Element2 > &m2, Int_t verbose=0);  Check that matrice sm1 and m2 areboth valid and have identical shapes . ;  ; template<class Element1 , class Element2 > ; Bool_t AreCompatible (const TVectorT< Element1 > &v, const TMatrixT< Element2 > &m, Int_t verbose=0);  Check if m and v are both valid and have compatible shapes f",MatchSource.WIKI,doc/master/namespaceTMatrixTAutoloadOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html
https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:2952,Integrability,rout,routine,2952,"= scalar * ElementDiv(source1,source2) only for those elements where select[i] != 0.0. ;  ; template<class Element > ; TVectorT< Element > & AddElemMult (TVectorT< Element > &target, Element scalar, const TVectorT< Element > &source1, const TVectorT< Element > &source2);  Modify addition: target += scalar * ElementMult(source1,source2) . ;  ; template<class Element > ; TVectorT< Element > & AddElemMult (TVectorT< Element > &target, Element scalar, const TVectorT< Element > &source1, const TVectorT< Element > &source2, const TVectorT< Element > &select);  Modify addition: target += scalar * ElementMult(source1,source2) only for those elements where select[i] != 0.0. ;  ; template<class Element > ; void AMultB (const Element *const ap, Int_t na, Int_t ncolsa, const Element *const bp, Int_t nb, Int_t ncolsb, Element *cp);  Elementary routine to calculate matrix multiplication A*B. ;  ; template<class Element > ; void AMultBt (const Element *const ap, Int_t na, Int_t ncolsa, const Element *const bp, Int_t nb, Int_t ncolsb, Element *cp);  Elementary routine to calculate matrix multiplication A*B^T. ;  ; template<class Element1 , class Element2 > ; Bool_t AreCompatible (const TMatrixT< Element1 > &m, const TVectorT< Element2 > &v, Int_t verbose=0);  Check if m and v are both valid and have compatible shapes for M * v. ;  ; template<class Element1 , class Element2 > ; Bool_t AreCompatible (const TMatrixTBase< Element1 > &m1, const TMatrixTBase< Element2 > &m2, Int_t verbose=0);  Check that matrice sm1 and m2 areboth valid and have identical shapes . ;  ; template<class Element1 , class Element2 > ; Bool_t AreCompatible (const TVectorT< Element1 > &v, const TMatrixT< Element2 > &m, Int_t verbose=0);  Check if m and v are both valid and have compatible shapes for v * M. ;  ; template<class Element1 , class Element2 > ; Bool_t AreCompatible (const TVectorT< Element1 > &v1, const TVectorT< Element2 > &v2, Int_t verbose=0);  Check if v1 and v2 are both valid and have the same s",MatchSource.WIKI,doc/master/namespaceTMatrixTAutoloadOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html
https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:4057,Integrability,rout,routine,4057," ;  ; template<class Element1 , class Element2 > ; Bool_t AreCompatible (const TMatrixT< Element1 > &m, const TVectorT< Element2 > &v, Int_t verbose=0);  Check if m and v are both valid and have compatible shapes for M * v. ;  ; template<class Element1 , class Element2 > ; Bool_t AreCompatible (const TMatrixTBase< Element1 > &m1, const TMatrixTBase< Element2 > &m2, Int_t verbose=0);  Check that matrice sm1 and m2 areboth valid and have identical shapes . ;  ; template<class Element1 , class Element2 > ; Bool_t AreCompatible (const TVectorT< Element1 > &v, const TMatrixT< Element2 > &m, Int_t verbose=0);  Check if m and v are both valid and have compatible shapes for v * M. ;  ; template<class Element1 , class Element2 > ; Bool_t AreCompatible (const TVectorT< Element1 > &v1, const TVectorT< Element2 > &v2, Int_t verbose=0);  Check if v1 and v2 are both valid and have the same shape. ;  ; template<class Element > ; void AtMultB (const Element *const ap, Int_t ncolsa, const Element *const bp, Int_t nb, Int_t ncolsb, Element *cp);  Elementary routine to calculate matrix multiplication A^T*B. ;  ; template<class Element > ; void Compare (const TMatrixTBase< Element > &m1, const TMatrixTBase< Element > &m2);  Compare two matrices and print out the result of the comparison. ;  ; template<class Element > ; void Compare (const TVectorT< Element > &source1, const TVectorT< Element > &source2);  Compare two vectors and print out the result of the comparison. ;  ; template<class Element > ; Element Dot (const TVectorT< Element > &source1, const TVectorT< Element > &source2);  return inner-produvt v1 . v2 ;  ; template<class Element > ; Element E2Norm (const TMatrixTBase< Element > &m1, const TMatrixTBase< Element > &m2);  Square of the Euclidean norm of the difference between two matrices. ;  ; template<class Element > ; TMatrixT< Element > & ElementDiv (TMatrixT< Element > &target, const TMatrixT< Element > &source);  Divide target by the source, element-by-element. ;  ; temp",MatchSource.WIKI,doc/master/namespaceTMatrixTAutoloadOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html
https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:20373,Integrability,rout,routine,20373," Element > & TMatrixTAutoloadOps::AddElemMult ; (; TVectorT< Element > & ; target, . Element ; scalar, . const TVectorT< Element > & ; source1, . const TVectorT< Element > & ; source2 . ). Modify addition: target += scalar * ElementMult(source1,source2) . ; Definition at line 1844 of file TVectorT.cxx. ◆ AddElemMult() [2/2]. template<class Element > . TVectorT< Element > & TMatrixTAutoloadOps::AddElemMult ; (; TVectorT< Element > & ; target, . Element ; scalar, . const TVectorT< Element > & ; source1, . const TVectorT< Element > & ; source2, . const TVectorT< Element > & ; select . ). Modify addition: target += scalar * ElementMult(source1,source2) only for those elements where select[i] != 0.0. ; Definition at line 1877 of file TVectorT.cxx. ◆ AMultB(). template<class Element > . void TMatrixTAutoloadOps::AMultB ; (; const Element *const ; ap, . Int_t ; na, . Int_t ; ncolsa, . const Element *const ; bp, . Int_t ; nb, . Int_t ; ncolsb, . Element * ; cp . ). Elementary routine to calculate matrix multiplication A*B. ; Definition at line 3081 of file TMatrixT.cxx. ◆ AMultBt(). template<class Element > . void TMatrixTAutoloadOps::AMultBt ; (; const Element *const ; ap, . Int_t ; na, . Int_t ; ncolsa, . const Element *const ; bp, . Int_t ; nb, . Int_t ; ncolsb, . Element * ; cp . ). Elementary routine to calculate matrix multiplication A*B^T. ; Definition at line 3128 of file TMatrixT.cxx. ◆ AreCompatible() [1/4]. template<class Element1 , class Element2 > . Bool_t TMatrixTAutoloadOps::AreCompatible ; (; const TMatrixT< Element1 > & ; m, . const TVectorT< Element2 > & ; v, . Int_t ; verbose = 0 . ). Check if m and v are both valid and have compatible shapes for M * v. ; Definition at line 2157 of file TVectorT.cxx. ◆ AreCompatible() [2/4]. template<class Element1 , class Element2 > . Bool_t TMatrixTAutoloadOps::AreCompatible ; (; const TMatrixTBase< Element1 > & ; m1, . const TMatrixTBase< Element2 > & ; m2, . Int_t ; verbose = 0 . ). Check that matrice sm1 and m2 arebot",MatchSource.WIKI,doc/master/namespaceTMatrixTAutoloadOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html
https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:20701,Integrability,rout,routine,20701,"mplate<class Element > . TVectorT< Element > & TMatrixTAutoloadOps::AddElemMult ; (; TVectorT< Element > & ; target, . Element ; scalar, . const TVectorT< Element > & ; source1, . const TVectorT< Element > & ; source2, . const TVectorT< Element > & ; select . ). Modify addition: target += scalar * ElementMult(source1,source2) only for those elements where select[i] != 0.0. ; Definition at line 1877 of file TVectorT.cxx. ◆ AMultB(). template<class Element > . void TMatrixTAutoloadOps::AMultB ; (; const Element *const ; ap, . Int_t ; na, . Int_t ; ncolsa, . const Element *const ; bp, . Int_t ; nb, . Int_t ; ncolsb, . Element * ; cp . ). Elementary routine to calculate matrix multiplication A*B. ; Definition at line 3081 of file TMatrixT.cxx. ◆ AMultBt(). template<class Element > . void TMatrixTAutoloadOps::AMultBt ; (; const Element *const ; ap, . Int_t ; na, . Int_t ; ncolsa, . const Element *const ; bp, . Int_t ; nb, . Int_t ; ncolsb, . Element * ; cp . ). Elementary routine to calculate matrix multiplication A*B^T. ; Definition at line 3128 of file TMatrixT.cxx. ◆ AreCompatible() [1/4]. template<class Element1 , class Element2 > . Bool_t TMatrixTAutoloadOps::AreCompatible ; (; const TMatrixT< Element1 > & ; m, . const TVectorT< Element2 > & ; v, . Int_t ; verbose = 0 . ). Check if m and v are both valid and have compatible shapes for M * v. ; Definition at line 2157 of file TVectorT.cxx. ◆ AreCompatible() [2/4]. template<class Element1 , class Element2 > . Bool_t TMatrixTAutoloadOps::AreCompatible ; (; const TMatrixTBase< Element1 > & ; m1, . const TMatrixTBase< Element2 > & ; m2, . Int_t ; verbose = 0 . ). Check that matrice sm1 and m2 areboth valid and have identical shapes . ; Definition at line 888 of file TMatrixTBase.cxx. ◆ AreCompatible() [3/4]. template<class Element1 , class Element2 > . Bool_t TMatrixTAutoloadOps::AreCompatible ; (; const TVectorT< Element1 > & ; v, . const TMatrixT< Element2 > & ; m, . Int_t ; verbose = 0 . ). Check if m and v are both va",MatchSource.WIKI,doc/master/namespaceTMatrixTAutoloadOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html
https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:22351,Integrability,rout,routine,22351,"rice sm1 and m2 areboth valid and have identical shapes . ; Definition at line 888 of file TMatrixTBase.cxx. ◆ AreCompatible() [3/4]. template<class Element1 , class Element2 > . Bool_t TMatrixTAutoloadOps::AreCompatible ; (; const TVectorT< Element1 > & ; v, . const TMatrixT< Element2 > & ; m, . Int_t ; verbose = 0 . ). Check if m and v are both valid and have compatible shapes for v * M. ; Definition at line 2183 of file TVectorT.cxx. ◆ AreCompatible() [4/4]. template<class Element1 , class Element2 > . Bool_t TMatrixTAutoloadOps::AreCompatible ; (; const TVectorT< Element1 > & ; v1, . const TVectorT< Element2 > & ; v2, . Int_t ; verbose = 0 . ). Check if v1 and v2 are both valid and have the same shape. ; Definition at line 2131 of file TVectorT.cxx. ◆ AtMultB(). template<class Element > . void TMatrixTAutoloadOps::AtMultB ; (; const Element *const ; ap, . Int_t ; ncolsa, . const Element *const ; bp, . Int_t ; nb, . Int_t ; ncolsb, . Element * ; cp . ). Elementary routine to calculate matrix multiplication A^T*B. ; Definition at line 3104 of file TMatrixT.cxx. ◆ Compare() [1/2]. template<class Element > . void TMatrixTAutoloadOps::Compare ; (; const TMatrixTBase< Element > & ; m1, . const TMatrixTBase< Element > & ; m2 . ). Compare two matrices and print out the result of the comparison. ; Definition at line 915 of file TMatrixTBase.cxx. ◆ Compare() [2/2]. template<class Element > . void TMatrixTAutoloadOps::Compare ; (; const TVectorT< Element > & ; source1, . const TVectorT< Element > & ; source2 . ). Compare two vectors and print out the result of the comparison. ; Definition at line 2209 of file TVectorT.cxx. ◆ Dot(). template<class Element > . Element TMatrixTAutoloadOps::Dot ; (; const TVectorT< Element > & ; source1, . const TVectorT< Element > & ; source2 . ). return inner-produvt v1 . v2 ; Definition at line 1478 of file TVectorT.cxx. ◆ E2Norm(). template<class Element > . Element TMatrixTAutoloadOps::E2Norm ; (; const TMatrixTBase< Element > & ; m1, . co",MatchSource.WIKI,doc/master/namespaceTMatrixTAutoloadOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html
https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:6760,Testability,log,logical,6760,"by-element. ;  ; template<class Element > ; TVectorT< Element > & ElementMult (TVectorT< Element > &target, const TVectorT< Element > &source);  Multiply target by the source, element-by-element. ;  ; template<class Element > ; TVectorT< Element > & ElementMult (TVectorT< Element > &target, const TVectorT< Element > &source, const TVectorT< Element > &select);  Multiply target by the source, element-by-element only where select[i] != 0.0. ;  ; template<class Element1 , class Element2 , class Element3 > ; Element1 Mult (const TVectorT< Element1 > &v1, const TMatrixT< Element2 > &m, const TVectorT< Element3 > &v2);  Perform v1 * M * v2, a scalar result. ;  ; template<class Element > ; TMatrixT< Element > operator!= (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 != source2 ;  ; template<class Element > ; TMatrixT< Element > operator!= (const TMatrixT< Element > &source1, const TMatrixTSym< Element > &source2);  logical operation source1 != source2 ;  ; template<class Element > ; TMatrixT< Element > operator!= (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 != source2 ;  ; template<class Element > ; TMatrixT< Element > operator&& (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  Logical AND. ;  ; template<class Element > ; TMatrixT< Element > operator&& (const TMatrixT< Element > &source1, const TMatrixTSym< Element > &source2);  Logical AND. ;  ; template<class Element > ; TMatrixT< Element > operator&& (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  Logical AND. ;  ; template<class Element > ; TVectorT< Element > operator* (const TMatrixT< Element > &a, const TVectorT< Element > &source);  return A * source ;  ; template<class Element > ; TMatrixT< Element > operator* (const TMatrixT< Element > &source, Element val);  operation this = val*source ;  ; template<class Element > ; TMatrixT< Element > operator*",MatchSource.WIKI,doc/master/namespaceTMatrixTAutoloadOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html
https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:6938,Testability,log,logical,6938,"by-element. ;  ; template<class Element > ; TVectorT< Element > & ElementMult (TVectorT< Element > &target, const TVectorT< Element > &source);  Multiply target by the source, element-by-element. ;  ; template<class Element > ; TVectorT< Element > & ElementMult (TVectorT< Element > &target, const TVectorT< Element > &source, const TVectorT< Element > &select);  Multiply target by the source, element-by-element only where select[i] != 0.0. ;  ; template<class Element1 , class Element2 , class Element3 > ; Element1 Mult (const TVectorT< Element1 > &v1, const TMatrixT< Element2 > &m, const TVectorT< Element3 > &v2);  Perform v1 * M * v2, a scalar result. ;  ; template<class Element > ; TMatrixT< Element > operator!= (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 != source2 ;  ; template<class Element > ; TMatrixT< Element > operator!= (const TMatrixT< Element > &source1, const TMatrixTSym< Element > &source2);  logical operation source1 != source2 ;  ; template<class Element > ; TMatrixT< Element > operator!= (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 != source2 ;  ; template<class Element > ; TMatrixT< Element > operator&& (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  Logical AND. ;  ; template<class Element > ; TMatrixT< Element > operator&& (const TMatrixT< Element > &source1, const TMatrixTSym< Element > &source2);  Logical AND. ;  ; template<class Element > ; TMatrixT< Element > operator&& (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  Logical AND. ;  ; template<class Element > ; TVectorT< Element > operator* (const TMatrixT< Element > &a, const TVectorT< Element > &source);  return A * source ;  ; template<class Element > ; TMatrixT< Element > operator* (const TMatrixT< Element > &source, Element val);  operation this = val*source ;  ; template<class Element > ; TMatrixT< Element > operator*",MatchSource.WIKI,doc/master/namespaceTMatrixTAutoloadOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html
https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:7116,Testability,log,logical,7116,"by-element. ;  ; template<class Element > ; TVectorT< Element > & ElementMult (TVectorT< Element > &target, const TVectorT< Element > &source);  Multiply target by the source, element-by-element. ;  ; template<class Element > ; TVectorT< Element > & ElementMult (TVectorT< Element > &target, const TVectorT< Element > &source, const TVectorT< Element > &select);  Multiply target by the source, element-by-element only where select[i] != 0.0. ;  ; template<class Element1 , class Element2 , class Element3 > ; Element1 Mult (const TVectorT< Element1 > &v1, const TMatrixT< Element2 > &m, const TVectorT< Element3 > &v2);  Perform v1 * M * v2, a scalar result. ;  ; template<class Element > ; TMatrixT< Element > operator!= (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 != source2 ;  ; template<class Element > ; TMatrixT< Element > operator!= (const TMatrixT< Element > &source1, const TMatrixTSym< Element > &source2);  logical operation source1 != source2 ;  ; template<class Element > ; TMatrixT< Element > operator!= (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 != source2 ;  ; template<class Element > ; TMatrixT< Element > operator&& (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  Logical AND. ;  ; template<class Element > ; TMatrixT< Element > operator&& (const TMatrixT< Element > &source1, const TMatrixTSym< Element > &source2);  Logical AND. ;  ; template<class Element > ; TMatrixT< Element > operator&& (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  Logical AND. ;  ; template<class Element > ; TVectorT< Element > operator* (const TMatrixT< Element > &a, const TVectorT< Element > &source);  return A * source ;  ; template<class Element > ; TMatrixT< Element > operator* (const TMatrixT< Element > &source, Element val);  operation this = val*source ;  ; template<class Element > ; TMatrixT< Element > operator*",MatchSource.WIKI,doc/master/namespaceTMatrixTAutoloadOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html
https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:11490,Testability,log,logical,11490,"lass Element > ; TMatrixT< Element > operator- (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  operation this = source1-source2 ;  ; template<class Element > ; TVectorT< Element > operator- (const TVectorT< Element > &source1, const TVectorT< Element > &source2);  Return source1-source2. ;  ; template<class Element > ; TMatrixT< Element > operator- (Element val, const TMatrixT< Element > &source);  operation this = val-source ;  ; template<class Element > ; TMatrixT< Element > operator< (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 < source2 ;  ; template<class Element > ; TMatrixT< Element > operator< (const TMatrixT< Element > &source1, const TMatrixTSym< Element > &source2);  logical operation source1 < source2 ;  ; template<class Element > ; TMatrixT< Element > operator< (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 < source2 ;  ; template<class Element > ; TMatrixT< Element > operator<= (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 <= source2 ;  ; template<class Element > ; TMatrixT< Element > operator<= (const TMatrixT< Element > &source1, const TMatrixTSym< Element > &source2);  logical operation source1 <= source2 ;  ; template<class Element > ; TMatrixT< Element > operator<= (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 <= source2 ;  ; template<class Element > ; Bool_t operator== (const TMatrixTBase< Element > &m1, const TMatrixTBase< Element > &m2);  Check to see if two matrices are identical. ;  ; template<class Element > ; Bool_t operator== (const TVectorT< Element > &source1, const TVectorT< Element > &source2);  Check to see if two vectors are identical. ;  ; template<class Element > ; TMatrixT< Element > operator> (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  logical oper",MatchSource.WIKI,doc/master/namespaceTMatrixTAutoloadOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html
https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:11666,Testability,log,logical,11666,"lass Element > ; TMatrixT< Element > operator- (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  operation this = source1-source2 ;  ; template<class Element > ; TVectorT< Element > operator- (const TVectorT< Element > &source1, const TVectorT< Element > &source2);  Return source1-source2. ;  ; template<class Element > ; TMatrixT< Element > operator- (Element val, const TMatrixT< Element > &source);  operation this = val-source ;  ; template<class Element > ; TMatrixT< Element > operator< (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 < source2 ;  ; template<class Element > ; TMatrixT< Element > operator< (const TMatrixT< Element > &source1, const TMatrixTSym< Element > &source2);  logical operation source1 < source2 ;  ; template<class Element > ; TMatrixT< Element > operator< (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 < source2 ;  ; template<class Element > ; TMatrixT< Element > operator<= (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 <= source2 ;  ; template<class Element > ; TMatrixT< Element > operator<= (const TMatrixT< Element > &source1, const TMatrixTSym< Element > &source2);  logical operation source1 <= source2 ;  ; template<class Element > ; TMatrixT< Element > operator<= (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 <= source2 ;  ; template<class Element > ; Bool_t operator== (const TMatrixTBase< Element > &m1, const TMatrixTBase< Element > &m2);  Check to see if two matrices are identical. ;  ; template<class Element > ; Bool_t operator== (const TVectorT< Element > &source1, const TVectorT< Element > &source2);  Check to see if two vectors are identical. ;  ; template<class Element > ; TMatrixT< Element > operator> (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  logical oper",MatchSource.WIKI,doc/master/namespaceTMatrixTAutoloadOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html
https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:11842,Testability,log,logical,11842,"lass Element > ; TMatrixT< Element > operator- (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  operation this = source1-source2 ;  ; template<class Element > ; TVectorT< Element > operator- (const TVectorT< Element > &source1, const TVectorT< Element > &source2);  Return source1-source2. ;  ; template<class Element > ; TMatrixT< Element > operator- (Element val, const TMatrixT< Element > &source);  operation this = val-source ;  ; template<class Element > ; TMatrixT< Element > operator< (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 < source2 ;  ; template<class Element > ; TMatrixT< Element > operator< (const TMatrixT< Element > &source1, const TMatrixTSym< Element > &source2);  logical operation source1 < source2 ;  ; template<class Element > ; TMatrixT< Element > operator< (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 < source2 ;  ; template<class Element > ; TMatrixT< Element > operator<= (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 <= source2 ;  ; template<class Element > ; TMatrixT< Element > operator<= (const TMatrixT< Element > &source1, const TMatrixTSym< Element > &source2);  logical operation source1 <= source2 ;  ; template<class Element > ; TMatrixT< Element > operator<= (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 <= source2 ;  ; template<class Element > ; Bool_t operator== (const TMatrixTBase< Element > &m1, const TMatrixTBase< Element > &m2);  Check to see if two matrices are identical. ;  ; template<class Element > ; Bool_t operator== (const TVectorT< Element > &source1, const TVectorT< Element > &source2);  Check to see if two vectors are identical. ;  ; template<class Element > ; TMatrixT< Element > operator> (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  logical oper",MatchSource.WIKI,doc/master/namespaceTMatrixTAutoloadOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html
https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:12016,Testability,log,logical,12016,"lass Element > ; TMatrixT< Element > operator- (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  operation this = source1-source2 ;  ; template<class Element > ; TVectorT< Element > operator- (const TVectorT< Element > &source1, const TVectorT< Element > &source2);  Return source1-source2. ;  ; template<class Element > ; TMatrixT< Element > operator- (Element val, const TMatrixT< Element > &source);  operation this = val-source ;  ; template<class Element > ; TMatrixT< Element > operator< (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 < source2 ;  ; template<class Element > ; TMatrixT< Element > operator< (const TMatrixT< Element > &source1, const TMatrixTSym< Element > &source2);  logical operation source1 < source2 ;  ; template<class Element > ; TMatrixT< Element > operator< (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 < source2 ;  ; template<class Element > ; TMatrixT< Element > operator<= (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 <= source2 ;  ; template<class Element > ; TMatrixT< Element > operator<= (const TMatrixT< Element > &source1, const TMatrixTSym< Element > &source2);  logical operation source1 <= source2 ;  ; template<class Element > ; TMatrixT< Element > operator<= (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 <= source2 ;  ; template<class Element > ; Bool_t operator== (const TMatrixTBase< Element > &m1, const TMatrixTBase< Element > &m2);  Check to see if two matrices are identical. ;  ; template<class Element > ; Bool_t operator== (const TVectorT< Element > &source1, const TVectorT< Element > &source2);  Check to see if two vectors are identical. ;  ; template<class Element > ; TMatrixT< Element > operator> (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  logical oper",MatchSource.WIKI,doc/master/namespaceTMatrixTAutoloadOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html
https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:12194,Testability,log,logical,12194,"lass Element > ; TMatrixT< Element > operator- (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  operation this = source1-source2 ;  ; template<class Element > ; TVectorT< Element > operator- (const TVectorT< Element > &source1, const TVectorT< Element > &source2);  Return source1-source2. ;  ; template<class Element > ; TMatrixT< Element > operator- (Element val, const TMatrixT< Element > &source);  operation this = val-source ;  ; template<class Element > ; TMatrixT< Element > operator< (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 < source2 ;  ; template<class Element > ; TMatrixT< Element > operator< (const TMatrixT< Element > &source1, const TMatrixTSym< Element > &source2);  logical operation source1 < source2 ;  ; template<class Element > ; TMatrixT< Element > operator< (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 < source2 ;  ; template<class Element > ; TMatrixT< Element > operator<= (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 <= source2 ;  ; template<class Element > ; TMatrixT< Element > operator<= (const TMatrixT< Element > &source1, const TMatrixTSym< Element > &source2);  logical operation source1 <= source2 ;  ; template<class Element > ; TMatrixT< Element > operator<= (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 <= source2 ;  ; template<class Element > ; Bool_t operator== (const TMatrixTBase< Element > &m1, const TMatrixTBase< Element > &m2);  Check to see if two matrices are identical. ;  ; template<class Element > ; Bool_t operator== (const TVectorT< Element > &source1, const TVectorT< Element > &source2);  Check to see if two vectors are identical. ;  ; template<class Element > ; TMatrixT< Element > operator> (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  logical oper",MatchSource.WIKI,doc/master/namespaceTMatrixTAutoloadOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html
https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:12372,Testability,log,logical,12372,"lass Element > ; TMatrixT< Element > operator- (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  operation this = source1-source2 ;  ; template<class Element > ; TVectorT< Element > operator- (const TVectorT< Element > &source1, const TVectorT< Element > &source2);  Return source1-source2. ;  ; template<class Element > ; TMatrixT< Element > operator- (Element val, const TMatrixT< Element > &source);  operation this = val-source ;  ; template<class Element > ; TMatrixT< Element > operator< (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 < source2 ;  ; template<class Element > ; TMatrixT< Element > operator< (const TMatrixT< Element > &source1, const TMatrixTSym< Element > &source2);  logical operation source1 < source2 ;  ; template<class Element > ; TMatrixT< Element > operator< (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 < source2 ;  ; template<class Element > ; TMatrixT< Element > operator<= (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 <= source2 ;  ; template<class Element > ; TMatrixT< Element > operator<= (const TMatrixT< Element > &source1, const TMatrixTSym< Element > &source2);  logical operation source1 <= source2 ;  ; template<class Element > ; TMatrixT< Element > operator<= (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 <= source2 ;  ; template<class Element > ; Bool_t operator== (const TMatrixTBase< Element > &m1, const TMatrixTBase< Element > &m2);  Check to see if two matrices are identical. ;  ; template<class Element > ; Bool_t operator== (const TVectorT< Element > &source1, const TVectorT< Element > &source2);  Check to see if two vectors are identical. ;  ; template<class Element > ; TMatrixT< Element > operator> (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  logical oper",MatchSource.WIKI,doc/master/namespaceTMatrixTAutoloadOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html
https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:12881,Testability,log,logical,12881,"xT< Element > &source2);  logical operation source1 <= source2 ;  ; template<class Element > ; Bool_t operator== (const TMatrixTBase< Element > &m1, const TMatrixTBase< Element > &m2);  Check to see if two matrices are identical. ;  ; template<class Element > ; Bool_t operator== (const TVectorT< Element > &source1, const TVectorT< Element > &source2);  Check to see if two vectors are identical. ;  ; template<class Element > ; TMatrixT< Element > operator> (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 > source2 ;  ; template<class Element > ; TMatrixT< Element > operator> (const TMatrixT< Element > &source1, const TMatrixTSym< Element > &source2);  logical operation source1 > source2 ;  ; template<class Element > ; TMatrixT< Element > operator> (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 > source2 ;  ; template<class Element > ; TMatrixT< Element > operator>= (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 >= source2 ;  ; template<class Element > ; TMatrixT< Element > operator>= (const TMatrixT< Element > &source1, const TMatrixTSym< Element > &source2);  logical operation source1 >= source2 ;  ; template<class Element > ; TMatrixT< Element > operator>= (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 >= source2 ;  ; template<class Element > ; TMatrixT< Element > operator|| (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  Logical OR. ;  ; template<class Element > ; TMatrixT< Element > operator|| (const TMatrixT< Element > &source1, const TMatrixTSym< Element > &source2);  Logical OR. ;  ; template<class Element > ; TMatrixT< Element > operator|| (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  Logical OR. ;  ; template<class Element1 , class Element2 > ; TMatrixT< Element1 > OuterProduct (const",MatchSource.WIKI,doc/master/namespaceTMatrixTAutoloadOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html
https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:13057,Testability,log,logical,13057,"xT< Element > &source2);  logical operation source1 <= source2 ;  ; template<class Element > ; Bool_t operator== (const TMatrixTBase< Element > &m1, const TMatrixTBase< Element > &m2);  Check to see if two matrices are identical. ;  ; template<class Element > ; Bool_t operator== (const TVectorT< Element > &source1, const TVectorT< Element > &source2);  Check to see if two vectors are identical. ;  ; template<class Element > ; TMatrixT< Element > operator> (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 > source2 ;  ; template<class Element > ; TMatrixT< Element > operator> (const TMatrixT< Element > &source1, const TMatrixTSym< Element > &source2);  logical operation source1 > source2 ;  ; template<class Element > ; TMatrixT< Element > operator> (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 > source2 ;  ; template<class Element > ; TMatrixT< Element > operator>= (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 >= source2 ;  ; template<class Element > ; TMatrixT< Element > operator>= (const TMatrixT< Element > &source1, const TMatrixTSym< Element > &source2);  logical operation source1 >= source2 ;  ; template<class Element > ; TMatrixT< Element > operator>= (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 >= source2 ;  ; template<class Element > ; TMatrixT< Element > operator|| (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  Logical OR. ;  ; template<class Element > ; TMatrixT< Element > operator|| (const TMatrixT< Element > &source1, const TMatrixTSym< Element > &source2);  Logical OR. ;  ; template<class Element > ; TMatrixT< Element > operator|| (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  Logical OR. ;  ; template<class Element1 , class Element2 > ; TMatrixT< Element1 > OuterProduct (const",MatchSource.WIKI,doc/master/namespaceTMatrixTAutoloadOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html
https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:13233,Testability,log,logical,13233,"xT< Element > &source2);  logical operation source1 <= source2 ;  ; template<class Element > ; Bool_t operator== (const TMatrixTBase< Element > &m1, const TMatrixTBase< Element > &m2);  Check to see if two matrices are identical. ;  ; template<class Element > ; Bool_t operator== (const TVectorT< Element > &source1, const TVectorT< Element > &source2);  Check to see if two vectors are identical. ;  ; template<class Element > ; TMatrixT< Element > operator> (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 > source2 ;  ; template<class Element > ; TMatrixT< Element > operator> (const TMatrixT< Element > &source1, const TMatrixTSym< Element > &source2);  logical operation source1 > source2 ;  ; template<class Element > ; TMatrixT< Element > operator> (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 > source2 ;  ; template<class Element > ; TMatrixT< Element > operator>= (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 >= source2 ;  ; template<class Element > ; TMatrixT< Element > operator>= (const TMatrixT< Element > &source1, const TMatrixTSym< Element > &source2);  logical operation source1 >= source2 ;  ; template<class Element > ; TMatrixT< Element > operator>= (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 >= source2 ;  ; template<class Element > ; TMatrixT< Element > operator|| (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  Logical OR. ;  ; template<class Element > ; TMatrixT< Element > operator|| (const TMatrixT< Element > &source1, const TMatrixTSym< Element > &source2);  Logical OR. ;  ; template<class Element > ; TMatrixT< Element > operator|| (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  Logical OR. ;  ; template<class Element1 , class Element2 > ; TMatrixT< Element1 > OuterProduct (const",MatchSource.WIKI,doc/master/namespaceTMatrixTAutoloadOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html
https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:13407,Testability,log,logical,13407,"xT< Element > &source2);  logical operation source1 <= source2 ;  ; template<class Element > ; Bool_t operator== (const TMatrixTBase< Element > &m1, const TMatrixTBase< Element > &m2);  Check to see if two matrices are identical. ;  ; template<class Element > ; Bool_t operator== (const TVectorT< Element > &source1, const TVectorT< Element > &source2);  Check to see if two vectors are identical. ;  ; template<class Element > ; TMatrixT< Element > operator> (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 > source2 ;  ; template<class Element > ; TMatrixT< Element > operator> (const TMatrixT< Element > &source1, const TMatrixTSym< Element > &source2);  logical operation source1 > source2 ;  ; template<class Element > ; TMatrixT< Element > operator> (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 > source2 ;  ; template<class Element > ; TMatrixT< Element > operator>= (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 >= source2 ;  ; template<class Element > ; TMatrixT< Element > operator>= (const TMatrixT< Element > &source1, const TMatrixTSym< Element > &source2);  logical operation source1 >= source2 ;  ; template<class Element > ; TMatrixT< Element > operator>= (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 >= source2 ;  ; template<class Element > ; TMatrixT< Element > operator|| (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  Logical OR. ;  ; template<class Element > ; TMatrixT< Element > operator|| (const TMatrixT< Element > &source1, const TMatrixTSym< Element > &source2);  Logical OR. ;  ; template<class Element > ; TMatrixT< Element > operator|| (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  Logical OR. ;  ; template<class Element1 , class Element2 > ; TMatrixT< Element1 > OuterProduct (const",MatchSource.WIKI,doc/master/namespaceTMatrixTAutoloadOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html
https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:13585,Testability,log,logical,13585,"xT< Element > &source2);  logical operation source1 <= source2 ;  ; template<class Element > ; Bool_t operator== (const TMatrixTBase< Element > &m1, const TMatrixTBase< Element > &m2);  Check to see if two matrices are identical. ;  ; template<class Element > ; Bool_t operator== (const TVectorT< Element > &source1, const TVectorT< Element > &source2);  Check to see if two vectors are identical. ;  ; template<class Element > ; TMatrixT< Element > operator> (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 > source2 ;  ; template<class Element > ; TMatrixT< Element > operator> (const TMatrixT< Element > &source1, const TMatrixTSym< Element > &source2);  logical operation source1 > source2 ;  ; template<class Element > ; TMatrixT< Element > operator> (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 > source2 ;  ; template<class Element > ; TMatrixT< Element > operator>= (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 >= source2 ;  ; template<class Element > ; TMatrixT< Element > operator>= (const TMatrixT< Element > &source1, const TMatrixTSym< Element > &source2);  logical operation source1 >= source2 ;  ; template<class Element > ; TMatrixT< Element > operator>= (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 >= source2 ;  ; template<class Element > ; TMatrixT< Element > operator|| (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  Logical OR. ;  ; template<class Element > ; TMatrixT< Element > operator|| (const TMatrixT< Element > &source1, const TMatrixTSym< Element > &source2);  Logical OR. ;  ; template<class Element > ; TMatrixT< Element > operator|| (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  Logical OR. ;  ; template<class Element1 , class Element2 > ; TMatrixT< Element1 > OuterProduct (const",MatchSource.WIKI,doc/master/namespaceTMatrixTAutoloadOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html
https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:13763,Testability,log,logical,13763,"xT< Element > &source2);  logical operation source1 <= source2 ;  ; template<class Element > ; Bool_t operator== (const TMatrixTBase< Element > &m1, const TMatrixTBase< Element > &m2);  Check to see if two matrices are identical. ;  ; template<class Element > ; Bool_t operator== (const TVectorT< Element > &source1, const TVectorT< Element > &source2);  Check to see if two vectors are identical. ;  ; template<class Element > ; TMatrixT< Element > operator> (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 > source2 ;  ; template<class Element > ; TMatrixT< Element > operator> (const TMatrixT< Element > &source1, const TMatrixTSym< Element > &source2);  logical operation source1 > source2 ;  ; template<class Element > ; TMatrixT< Element > operator> (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 > source2 ;  ; template<class Element > ; TMatrixT< Element > operator>= (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 >= source2 ;  ; template<class Element > ; TMatrixT< Element > operator>= (const TMatrixT< Element > &source1, const TMatrixTSym< Element > &source2);  logical operation source1 >= source2 ;  ; template<class Element > ; TMatrixT< Element > operator>= (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  logical operation source1 >= source2 ;  ; template<class Element > ; TMatrixT< Element > operator|| (const TMatrixT< Element > &source1, const TMatrixT< Element > &source2);  Logical OR. ;  ; template<class Element > ; TMatrixT< Element > operator|| (const TMatrixT< Element > &source1, const TMatrixTSym< Element > &source2);  Logical OR. ;  ; template<class Element > ; TMatrixT< Element > operator|| (const TMatrixTSym< Element > &source1, const TMatrixT< Element > &source2);  Logical OR. ;  ; template<class Element1 , class Element2 > ; TMatrixT< Element1 > OuterProduct (const",MatchSource.WIKI,doc/master/namespaceTMatrixTAutoloadOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html
https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:26438,Testability,log,logical,26438,"rce . ). Multiply target by the source, element-by-element. ; Definition at line 2032 of file TVectorT.cxx. ◆ ElementMult() [4/4]. template<class Element > . TVectorT< Element > & TMatrixTAutoloadOps::ElementMult ; (; TVectorT< Element > & ; target, . const TVectorT< Element > & ; source, . const TVectorT< Element > & ; select . ). Multiply target by the source, element-by-element only where select[i] != 0.0. ; Definition at line 2052 of file TVectorT.cxx. ◆ Mult(). template<class Element1 , class Element2 , class Element3 > . Element1 TMatrixTAutoloadOps::Mult ; (; const TVectorT< Element1 > & ; v1, . const TMatrixT< Element2 > & ; m, . const TVectorT< Element3 > & ; v2 . ). Perform v1 * M * v2, a scalar result. ; Definition at line 1542 of file TVectorT.cxx. ◆ operator!=() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator!= ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 != source2 ; Definition at line 2842 of file TMatrixT.cxx. ◆ operator!=() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator!= ; (; const TMatrixT< Element > & ; source1, . const TMatrixTSym< Element > & ; source2 . ). logical operation source1 != source2 ; Definition at line 2870 of file TMatrixT.cxx. ◆ operator!=() [3/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator!= ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 != source2 ; Definition at line 2898 of file TMatrixT.cxx. ◆ operator&&() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator&& ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). Logical AND. ; Definition at line 2466 of file TMatrixT.cxx. ◆ operator&&() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator&& ; (; const TMatrixT< Element > & ; source1, . c",MatchSource.WIKI,doc/master/namespaceTMatrixTAutoloadOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html
https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:26716,Testability,log,logical,26716,"& ; source, . const TVectorT< Element > & ; select . ). Multiply target by the source, element-by-element only where select[i] != 0.0. ; Definition at line 2052 of file TVectorT.cxx. ◆ Mult(). template<class Element1 , class Element2 , class Element3 > . Element1 TMatrixTAutoloadOps::Mult ; (; const TVectorT< Element1 > & ; v1, . const TMatrixT< Element2 > & ; m, . const TVectorT< Element3 > & ; v2 . ). Perform v1 * M * v2, a scalar result. ; Definition at line 1542 of file TVectorT.cxx. ◆ operator!=() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator!= ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 != source2 ; Definition at line 2842 of file TMatrixT.cxx. ◆ operator!=() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator!= ; (; const TMatrixT< Element > & ; source1, . const TMatrixTSym< Element > & ; source2 . ). logical operation source1 != source2 ; Definition at line 2870 of file TMatrixT.cxx. ◆ operator!=() [3/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator!= ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 != source2 ; Definition at line 2898 of file TMatrixT.cxx. ◆ operator&&() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator&& ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). Logical AND. ; Definition at line 2466 of file TMatrixT.cxx. ◆ operator&&() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator&& ; (; const TMatrixT< Element > & ; source1, . const TMatrixTSym< Element > & ; source2 . ). Logical AND. ; Definition at line 2491 of file TMatrixT.cxx. ◆ operator&&() [3/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator&& ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Elemen",MatchSource.WIKI,doc/master/namespaceTMatrixTAutoloadOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html
https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:26994,Testability,log,logical,26994,"adOps::Mult ; (; const TVectorT< Element1 > & ; v1, . const TMatrixT< Element2 > & ; m, . const TVectorT< Element3 > & ; v2 . ). Perform v1 * M * v2, a scalar result. ; Definition at line 1542 of file TVectorT.cxx. ◆ operator!=() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator!= ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 != source2 ; Definition at line 2842 of file TMatrixT.cxx. ◆ operator!=() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator!= ; (; const TMatrixT< Element > & ; source1, . const TMatrixTSym< Element > & ; source2 . ). logical operation source1 != source2 ; Definition at line 2870 of file TMatrixT.cxx. ◆ operator!=() [3/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator!= ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 != source2 ; Definition at line 2898 of file TMatrixT.cxx. ◆ operator&&() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator&& ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). Logical AND. ; Definition at line 2466 of file TMatrixT.cxx. ◆ operator&&() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator&& ; (; const TMatrixT< Element > & ; source1, . const TMatrixTSym< Element > & ; source2 . ). Logical AND. ; Definition at line 2491 of file TMatrixT.cxx. ◆ operator&&() [3/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator&& ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). Logical AND. ; Definition at line 2516 of file TMatrixT.cxx. ◆ operator*() [1/12]. template<class Element > . TVectorT< Element > TMatrixTAutoloadOps::operator* ; (; const TMatrixT< Element > & ; a, . const TVectorT< Element > & ; source . ). return A * sou",MatchSource.WIKI,doc/master/namespaceTMatrixTAutoloadOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html
https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:34157,Testability,log,logical,34157,". ◆ operator-() [4/6]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator- ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). operation this = source1-source2 ; Definition at line 2376 of file TMatrixT.cxx. ◆ operator-() [5/6]. template<class Element > . TVectorT< Element > TMatrixTAutoloadOps::operator- ; (; const TVectorT< Element > & ; source1, . const TVectorT< Element > & ; source2 . ). Return source1-source2. ; Definition at line 1423 of file TVectorT.cxx. ◆ operator-() [6/6]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator- ; (; Element ; val, . const TMatrixT< Element > & ; source . ). operation this = val-source ; Definition at line 2396 of file TMatrixT.cxx. ◆ operator<() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator< ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 < source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator< ; (; const TMatrixT< Element > & ; source1, . const TMatrixTSym< Element > & ; source2 . ). logical operation source1 < source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<() [3/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator< ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 < source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<=() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator<= ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 <= source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<=() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator<= ; (; const TMatrixT< Element ",MatchSource.WIKI,doc/master/namespaceTMatrixTAutoloadOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html
https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:34432,Testability,log,logical,34432," operator-() [5/6]. template<class Element > . TVectorT< Element > TMatrixTAutoloadOps::operator- ; (; const TVectorT< Element > & ; source1, . const TVectorT< Element > & ; source2 . ). Return source1-source2. ; Definition at line 1423 of file TVectorT.cxx. ◆ operator-() [6/6]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator- ; (; Element ; val, . const TMatrixT< Element > & ; source . ). operation this = val-source ; Definition at line 2396 of file TMatrixT.cxx. ◆ operator<() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator< ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 < source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator< ; (; const TMatrixT< Element > & ; source1, . const TMatrixTSym< Element > & ; source2 . ). logical operation source1 < source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<() [3/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator< ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 < source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<=() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator<= ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 <= source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<=() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator<= ; (; const TMatrixT< Element > & ; source1, . const TMatrixTSym< Element > & ; source2 . ). logical operation source1 <= source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<=() [3/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator<= ; (; const TMatrixTSym< El",MatchSource.WIKI,doc/master/namespaceTMatrixTAutoloadOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html
https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:34707,Testability,log,logical,34707,"/6]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator- ; (; Element ; val, . const TMatrixT< Element > & ; source . ). operation this = val-source ; Definition at line 2396 of file TMatrixT.cxx. ◆ operator<() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator< ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 < source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator< ; (; const TMatrixT< Element > & ; source1, . const TMatrixTSym< Element > & ; source2 . ). logical operation source1 < source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<() [3/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator< ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 < source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<=() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator<= ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 <= source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<=() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator<= ; (; const TMatrixT< Element > & ; source1, . const TMatrixTSym< Element > & ; source2 . ). logical operation source1 <= source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<=() [3/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator<= ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 <= source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator==() [1/2]. template<class Element > . Bool_t TMatrixTAutoloadOps::operator== ; (; const TMatrixTBase< Element > &",MatchSource.WIKI,doc/master/namespaceTMatrixTAutoloadOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html
https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:34981,Testability,log,logical,34981,"trixT< Element > TMatrixTAutoloadOps::operator< ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 < source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator< ; (; const TMatrixT< Element > & ; source1, . const TMatrixTSym< Element > & ; source2 . ). logical operation source1 < source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<() [3/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator< ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 < source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<=() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator<= ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 <= source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<=() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator<= ; (; const TMatrixT< Element > & ; source1, . const TMatrixTSym< Element > & ; source2 . ). logical operation source1 <= source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<=() [3/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator<= ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 <= source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator==() [1/2]. template<class Element > . Bool_t TMatrixTAutoloadOps::operator== ; (; const TMatrixTBase< Element > & ; m1, . const TMatrixTBase< Element > & ; m2 . ). Check to see if two matrices are identical. ; Definition at line 855 of file TMatrixTBase.cxx. ◆ operator==() [2/2]. template<class Element > . Bool_t TMatrixTAutoloadOps::operator== ; (; const TVectorT< Element > & ; source",MatchSource.WIKI,doc/master/namespaceTMatrixTAutoloadOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html
https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:35259,Testability,log,logical,35259," Element > TMatrixTAutoloadOps::operator< ; (; const TMatrixT< Element > & ; source1, . const TMatrixTSym< Element > & ; source2 . ). logical operation source1 < source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<() [3/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator< ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 < source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<=() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator<= ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 <= source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<=() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator<= ; (; const TMatrixT< Element > & ; source1, . const TMatrixTSym< Element > & ; source2 . ). logical operation source1 <= source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<=() [3/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator<= ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 <= source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator==() [1/2]. template<class Element > . Bool_t TMatrixTAutoloadOps::operator== ; (; const TMatrixTBase< Element > & ; m1, . const TMatrixTBase< Element > & ; m2 . ). Check to see if two matrices are identical. ; Definition at line 855 of file TMatrixTBase.cxx. ◆ operator==() [2/2]. template<class Element > . Bool_t TMatrixTAutoloadOps::operator== ; (; const TVectorT< Element > & ; source1, . const TVectorT< Element > & ; source2 . ). Check to see if two vectors are identical. ; Definition at line 1386 of file TVectorT.cxx. ◆ operator>() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator> ; (; const TMatrixT< Element > & ; sourc",MatchSource.WIKI,doc/master/namespaceTMatrixTAutoloadOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html
https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:35537,Testability,log,logical,35537,"ement > TMatrixTAutoloadOps::operator< ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 < source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<=() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator<= ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 <= source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<=() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator<= ; (; const TMatrixT< Element > & ; source1, . const TMatrixTSym< Element > & ; source2 . ). logical operation source1 <= source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<=() [3/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator<= ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 <= source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator==() [1/2]. template<class Element > . Bool_t TMatrixTAutoloadOps::operator== ; (; const TMatrixTBase< Element > & ; m1, . const TMatrixTBase< Element > & ; m2 . ). Check to see if two matrices are identical. ; Definition at line 855 of file TMatrixTBase.cxx. ◆ operator==() [2/2]. template<class Element > . Bool_t TMatrixTAutoloadOps::operator== ; (; const TVectorT< Element > & ; source1, . const TVectorT< Element > & ; source2 . ). Check to see if two vectors are identical. ; Definition at line 1386 of file TVectorT.cxx. ◆ operator>() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator> ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 > source2 ; Definition at line 2584 of file TMatrixT.cxx. ◆ operator>() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator> ; (; const TMatrixT< Element > & ; source1, . ",MatchSource.WIKI,doc/master/namespaceTMatrixTAutoloadOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html
https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:36348,Testability,log,logical,36348,"t > . TMatrixT< Element > TMatrixTAutoloadOps::operator<= ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 <= source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator==() [1/2]. template<class Element > . Bool_t TMatrixTAutoloadOps::operator== ; (; const TMatrixTBase< Element > & ; m1, . const TMatrixTBase< Element > & ; m2 . ). Check to see if two matrices are identical. ; Definition at line 855 of file TMatrixTBase.cxx. ◆ operator==() [2/2]. template<class Element > . Bool_t TMatrixTAutoloadOps::operator== ; (; const TVectorT< Element > & ; source1, . const TVectorT< Element > & ; source2 . ). Check to see if two vectors are identical. ; Definition at line 1386 of file TVectorT.cxx. ◆ operator>() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator> ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 > source2 ; Definition at line 2584 of file TMatrixT.cxx. ◆ operator>() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator> ; (; const TMatrixT< Element > & ; source1, . const TMatrixTSym< Element > & ; source2 . ). logical operation source1 > source2 ; Definition at line 2612 of file TMatrixT.cxx. ◆ operator>() [3/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator> ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 > source2 ; Definition at line 2640 of file TMatrixT.cxx. ◆ operator>=() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator>= ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 >= source2 ; Definition at line 2649 of file TMatrixT.cxx. ◆ operator>=() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator>= ; (; const TMatrixT< Element ",MatchSource.WIKI,doc/master/namespaceTMatrixTAutoloadOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html
https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:36623,Testability,log,logical,36623,"ment > . Bool_t TMatrixTAutoloadOps::operator== ; (; const TMatrixTBase< Element > & ; m1, . const TMatrixTBase< Element > & ; m2 . ). Check to see if two matrices are identical. ; Definition at line 855 of file TMatrixTBase.cxx. ◆ operator==() [2/2]. template<class Element > . Bool_t TMatrixTAutoloadOps::operator== ; (; const TVectorT< Element > & ; source1, . const TVectorT< Element > & ; source2 . ). Check to see if two vectors are identical. ; Definition at line 1386 of file TVectorT.cxx. ◆ operator>() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator> ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 > source2 ; Definition at line 2584 of file TMatrixT.cxx. ◆ operator>() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator> ; (; const TMatrixT< Element > & ; source1, . const TMatrixTSym< Element > & ; source2 . ). logical operation source1 > source2 ; Definition at line 2612 of file TMatrixT.cxx. ◆ operator>() [3/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator> ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 > source2 ; Definition at line 2640 of file TMatrixT.cxx. ◆ operator>=() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator>= ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 >= source2 ; Definition at line 2649 of file TMatrixT.cxx. ◆ operator>=() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator>= ; (; const TMatrixT< Element > & ; source1, . const TMatrixTSym< Element > & ; source2 . ). logical operation source1 >= source2 ; Definition at line 2677 of file TMatrixT.cxx. ◆ operator>=() [3/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator>= ; (; const TMatrixTSym< El",MatchSource.WIKI,doc/master/namespaceTMatrixTAutoloadOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html
https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:36898,Testability,log,logical,36898,"> . Bool_t TMatrixTAutoloadOps::operator== ; (; const TVectorT< Element > & ; source1, . const TVectorT< Element > & ; source2 . ). Check to see if two vectors are identical. ; Definition at line 1386 of file TVectorT.cxx. ◆ operator>() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator> ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 > source2 ; Definition at line 2584 of file TMatrixT.cxx. ◆ operator>() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator> ; (; const TMatrixT< Element > & ; source1, . const TMatrixTSym< Element > & ; source2 . ). logical operation source1 > source2 ; Definition at line 2612 of file TMatrixT.cxx. ◆ operator>() [3/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator> ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 > source2 ; Definition at line 2640 of file TMatrixT.cxx. ◆ operator>=() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator>= ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 >= source2 ; Definition at line 2649 of file TMatrixT.cxx. ◆ operator>=() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator>= ; (; const TMatrixT< Element > & ; source1, . const TMatrixTSym< Element > & ; source2 . ). logical operation source1 >= source2 ; Definition at line 2677 of file TMatrixT.cxx. ◆ operator>=() [3/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator>= ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 >= source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator||() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator|| ; (; const TMatrixT< El",MatchSource.WIKI,doc/master/namespaceTMatrixTAutoloadOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html
https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:37172,Testability,log,logical,37172,"trixT< Element > TMatrixTAutoloadOps::operator> ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 > source2 ; Definition at line 2584 of file TMatrixT.cxx. ◆ operator>() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator> ; (; const TMatrixT< Element > & ; source1, . const TMatrixTSym< Element > & ; source2 . ). logical operation source1 > source2 ; Definition at line 2612 of file TMatrixT.cxx. ◆ operator>() [3/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator> ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 > source2 ; Definition at line 2640 of file TMatrixT.cxx. ◆ operator>=() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator>= ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 >= source2 ; Definition at line 2649 of file TMatrixT.cxx. ◆ operator>=() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator>= ; (; const TMatrixT< Element > & ; source1, . const TMatrixTSym< Element > & ; source2 . ). logical operation source1 >= source2 ; Definition at line 2677 of file TMatrixT.cxx. ◆ operator>=() [3/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator>= ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 >= source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator||() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator|| ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). Logical OR. ; Definition at line 2525 of file TMatrixT.cxx. ◆ operator||() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator|| ; (; const TMatrixT< Element > & ; source1, . co",MatchSource.WIKI,doc/master/namespaceTMatrixTAutoloadOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html
https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:37450,Testability,log,logical,37450," Element > TMatrixTAutoloadOps::operator> ; (; const TMatrixT< Element > & ; source1, . const TMatrixTSym< Element > & ; source2 . ). logical operation source1 > source2 ; Definition at line 2612 of file TMatrixT.cxx. ◆ operator>() [3/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator> ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 > source2 ; Definition at line 2640 of file TMatrixT.cxx. ◆ operator>=() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator>= ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 >= source2 ; Definition at line 2649 of file TMatrixT.cxx. ◆ operator>=() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator>= ; (; const TMatrixT< Element > & ; source1, . const TMatrixTSym< Element > & ; source2 . ). logical operation source1 >= source2 ; Definition at line 2677 of file TMatrixT.cxx. ◆ operator>=() [3/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator>= ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 >= source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator||() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator|| ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). Logical OR. ; Definition at line 2525 of file TMatrixT.cxx. ◆ operator||() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator|| ; (; const TMatrixT< Element > & ; source1, . const TMatrixTSym< Element > & ; source2 . ). Logical OR. ; Definition at line 2550 of file TMatrixT.cxx. ◆ operator||() [3/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator|| ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Element ",MatchSource.WIKI,doc/master/namespaceTMatrixTAutoloadOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html
https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:37728,Testability,log,logical,37728,"ement > TMatrixTAutoloadOps::operator> ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 > source2 ; Definition at line 2640 of file TMatrixT.cxx. ◆ operator>=() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator>= ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 >= source2 ; Definition at line 2649 of file TMatrixT.cxx. ◆ operator>=() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator>= ; (; const TMatrixT< Element > & ; source1, . const TMatrixTSym< Element > & ; source2 . ). logical operation source1 >= source2 ; Definition at line 2677 of file TMatrixT.cxx. ◆ operator>=() [3/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator>= ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 >= source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator||() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator|| ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). Logical OR. ; Definition at line 2525 of file TMatrixT.cxx. ◆ operator||() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator|| ; (; const TMatrixT< Element > & ; source1, . const TMatrixTSym< Element > & ; source2 . ). Logical OR. ; Definition at line 2550 of file TMatrixT.cxx. ◆ operator||() [3/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator|| ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). Logical OR. ; Definition at line 2575 of file TMatrixT.cxx. ◆ OuterProduct() [1/2]. template<class Element1 , class Element2 > . TMatrixT< Element1 > TMatrixTAutoloadOps::OuterProduct ; (; const TVectorT< Element1 > & ; v1, . const TVectorT< Element2 > & ; v2",MatchSource.WIKI,doc/master/namespaceTMatrixTAutoloadOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html
https://root.cern/doc/master/namespaceTMVA.html:2856,Availability,error,error,2856,"sification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation. More...;  ; class  CvSplit;  ; class  CvSplitKFolds;  ; class  CvSplitKFoldsExpr;  ; class  DataInputHandler;  Class that contains all the data information. More...;  ; class  DataLoader;  ; class  DataSet;  Class that contains all the data information. More...;  ; class  DataSetFactory;  Class that contains all the data information. More...;  ; class  DataSetInfo;  Class that contains all the data information. More...;  ; class  DataSetManager;  Class that contains all the data information. More...;  ; class  DecisionTree;  Implementation of a Decision Tree. More...;  ; class  DecisionTreeNode;  ; struct  DeleteFunctor_t;  ; class  DTNodeTrainingInfo;  ; class  Envelope;  Abstract base class for all high level ml algorithms, you can book ml methods like BDT, MLP. More...;  ; class  Event;  ; class  Executor;  Base Executor class. More...;  ; class  ExpectedErrorPruneTool;  A helper class to prune a decision tree using the expected error (C4.5) method. More...;  ; class  Factory;  This is the main MVA steering class. More...;  ; class  FitterBase;  Base class for TMVA fitters. More...;  ; class  GeneticAlgorithm;  Base definition for genetic algorithm. More...;  ; class  GeneticFitter;  Fitter using a Genetic Algorithm. More...;  ; class  GeneticGenes;  Cut optimisation interface class for genetic algorithm. More...;  ; class  GeneticPopulation;  Population definition for genetic algorithm. More...;  ; class  GeneticRange;  Range definition for genetic algorithm. More...;  ; class  GiniIndex;  Implementation of the GiniIndex as separation criterion. More...;  ; class  GiniIndexWithLaplace;  Implementation of the GiniIndex With Laplace correction as separation criterion. More...;  ; class  HuberLossFunction;  Huber Loss Function. More...;  ; class  HuberLossFunctionBDT;  Huber BDT Loss Function. More...;  ; class  HyperParameterOptimisation;  ; class  HyperParameterOptimi",MatchSource.WIKI,doc/master/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA.html
https://root.cern/doc/master/namespaceTMVA.html:4251,Availability,error,errors,4251,"etic algorithm. More...;  ; class  GeneticPopulation;  Population definition for genetic algorithm. More...;  ; class  GeneticRange;  Range definition for genetic algorithm. More...;  ; class  GiniIndex;  Implementation of the GiniIndex as separation criterion. More...;  ; class  GiniIndexWithLaplace;  Implementation of the GiniIndex With Laplace correction as separation criterion. More...;  ; class  HuberLossFunction;  Huber Loss Function. More...;  ; class  HuberLossFunctionBDT;  Huber BDT Loss Function. More...;  ; class  HyperParameterOptimisation;  ; class  HyperParameterOptimisationResult;  ; class  IFitterTarget;  Interface for a fitter 'target'. More...;  ; class  IMethod;  Interface for all concrete MVA method implementations. More...;  ; class  Increment;  ; class  Interval;  The TMVA::Interval Class. More...;  ; class  IPruneTool;  IPruneTool - a helper interface class to prune a decision tree. More...;  ; class  IPythonInteractive;  This class is needed by JsMVA, and it's a helper class for tracking errors during the training in Jupyter notebook. More...;  ; class  KDEKernel;  KDE Kernel for ""smoothing"" the PDFs. More...;  ; class  LDA;  ; class  LeastSquaresLossFunction;  Least Squares Loss Function. More...;  ; class  LeastSquaresLossFunctionBDT;  Least Squares BDT Loss Function. More...;  ; class  LogInterval;  The TMVA::Interval Class. More...;  ; class  LossFunction;  ; class  LossFunctionBDT;  ; class  LossFunctionEventInfo;  ; class  MCFitter;  Fitter using Monte Carlo sampling of parameters. More...;  ; class  MethodANNBase;  Base class for all TMVA methods using artificial neural networks. More...;  ; class  MethodBase;  Virtual base Class for all MVA method. More...;  ; class  MethodBayesClassifier;  Description of bayesian classifiers. More...;  ; class  MethodBDT;  Analysis of Boosted Decision Trees. More...;  ; class  MethodBoost;  Class for boosting a TMVA method. More...;  ; class  MethodC50;  ; class  MethodCategory;  Class for categorizi",MatchSource.WIKI,doc/master/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA.html
https://root.cern/doc/master/namespaceTMVA.html:9774,Availability,error,error,9774,"oam. More...;  ; class  PDEFoamEvent;  This PDEFoam variant stores in every cell the sum of event weights and the sum of the squared event weights. More...;  ; class  PDEFoamEventDensity;  This is a concrete implementation of PDEFoam. More...;  ; class  PDEFoamKernelBase;  This class is the abstract kernel interface for PDEFoam. More...;  ; class  PDEFoamKernelGauss;  This PDEFoam kernel estimates a cell value for a given event by weighting all cell values with a gauss function. More...;  ; class  PDEFoamKernelLinN;  This PDEFoam kernel estimates a cell value for a given event by weighting with cell values of the nearest neighbor cells. More...;  ; class  PDEFoamKernelTrivial;  This class is a trivial PDEFoam kernel estimator. More...;  ; class  PDEFoamMultiTarget;  This PDEFoam variant is used to estimate multiple targets by creating an event density foam (PDEFoamEvent), which has dimension: More...;  ; class  PDEFoamTarget;  This PDEFoam variant stores in every cell the average target fTarget (see the Constructor) as well as the statistical error on the target fTarget. More...;  ; class  PDEFoamTargetDensity;  This is a concrete implementation of PDEFoam. More...;  ; class  PDEFoamVect;  ; class  PDF;  PDF wrapper for histograms; uses user-defined spline interpolation. More...;  ; class  PruningInfo;  ; class  PyMethodBase;  ; class  QuickMVAProbEstimator;  ; class  RandomGenerator;  ; class  Rank;  ; class  Ranking;  Ranking for variables in method (implementation) More...;  ; class  Reader;  The Reader class serves to use the MVAs in a specific analysis context. More...;  ; class  RegressionVariance;  Calculate the ""SeparationGain"" for Regression analysis separation criteria used in various training algorithms. More...;  ; class  Results;  Class that is the base-class for a vector of result. More...;  ; class  ResultsClassification;  Class that is the base-class for a vector of result. More...;  ; class  ResultsMulticlass;  Class which takes the results of a mul",MatchSource.WIKI,doc/master/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA.html
https://root.cern/doc/master/namespaceTMVA.html:1227,Deployability,configurat,configuration,1227,"amespaces; namespace  DNN;  ; namespace  Experimental;  ; namespace  Internal;  ; namespace  kNN;  ; namespace  TMVAGlob;  . Classes; class  AbsoluteDeviationLossFunction;  Absolute Deviation Loss Function. More...;  ; class  AbsoluteDeviationLossFunctionBDT;  Absolute Deviation BDT Loss Function. More...;  ; class  AbsValue;  ; class  BDTEventWrapper;  ; class  BinarySearchTree;  A simple Binary search tree including a volume search method. More...;  ; class  BinarySearchTreeNode;  Node for the BinarySearch or Decision Trees. More...;  ; class  BinaryTree;  Base class for BinarySearch and Decision Trees. More...;  ; class  CCPruner;  A helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) More...;  ; class  CCTreeWrapper;  ; class  ClassifierFactory;  This is the MVA factory. More...;  ; class  ClassInfo;  Class that contains all the information of a class. More...;  ; class  Config;  Singleton class for global configuration settings used by TMVA. More...;  ; class  Configurable;  ; class  ConvergenceTest;  Check for convergence. More...;  ; class  CostComplexityPruneTool;  A class to prune a decision tree using the Cost Complexity method. More...;  ; class  CrossEntropy;  Implementation of the CrossEntropy as separation criterion. More...;  ; class  CrossValidation;  Class to perform cross validation, splitting the dataloader into folds. More...;  ; class  CrossValidationFoldResult;  ; class  CrossValidationResult;  Class to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation. More...;  ; class  CvSplit;  ; class  CvSplitKFolds;  ; class  CvSplitKFoldsExpr;  ; class  DataInputHandler;  Class that contains all the data information. More...;  ; class  DataLoader;  ; class  DataSet;  Class that contains all the data information. More...;  ; class  DataSetFactory;  Class that contains a",MatchSource.WIKI,doc/master/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA.html
https://root.cern/doc/master/namespaceTMVA.html:24589,Deployability,install,installed,24589,"ring dataset, TFile *file, Int_t type=2, TDirectory *BinDir=nullptr);  ; void plot_training_history (TString dataset, TFile *file, TDirectory *BinDir=nullptr);  ; void PlotCellTree (TString fileName, TString cv_long, bool useTMVAStyle=kTRUE);  ; void plotEfficienciesMulticlass (roccurvelist_t rocCurves, classcanvasmap_t classCanvasMap);  ; void plotEfficienciesMulticlass1vs1 (TString dataset, TString fin, TString baseClassname);  ; void plotEfficienciesMulticlass1vsRest (TString dataset, EEfficiencyPlotType plotType=EEfficiencyPlotType::kRejBvsEffS, TString filename_input=""TMVAMulticlass.root"");  ; void PlotFoams (TString fileName=""weights/TMVAClassification_PDEFoam.weights_foams.root"", bool useTMVAStyle=kTRUE);  ; void PlotNDimFoams (TList &foam_list, TMVA::ECellValue cell_value, const TString &cell_value_description, TMVA::PDEFoamKernelBase *kernel);  ; void probas (TString dataset, TString fin=""TMVA.root"", Bool_t useTMVAStyle=kTRUE);  ; TString Python_Executable ();  Function to find current Python executable used by ROOT If ""Python3"" is installed, return ""python3"". ;  ; void RegGuiActionButton (TControlBar *cbar, const TString &title, const TString &macro, const TString &comment, const TString &buttonType, TString requiredKey="""");  ; TList * RegGuiGetKeyList (const TString &pattern);  ; void regression_averagedevs (TString dataset, TString fin, Int_t Nevt=-1, Bool_t useTMVAStyle=kTRUE);  ; void rulevis (TString fin=""TMVA.root"", TMVAGlob::TypeOfPlot type=TMVAGlob::kNorm, bool useTMVAStyle=kTRUE);  ; void rulevisCorr (TDirectory *rfdir, TDirectory *vardir, TDirectory *corrdir, TMVAGlob::TypeOfPlot type);  ; void rulevisCorr (TString fin=""TMVA.root"", TMVAGlob::TypeOfPlot type=TMVAGlob::kNorm, bool useTMVAStyle=kTRUE);  ; void rulevisHists (TDirectory *rfdir, TDirectory *vardir, TDirectory *corrdir, TMVAGlob::TypeOfPlot type);  ; void rulevisHists (TString fin=""TMVA.root"", TMVAGlob::TypeOfPlot type=TMVAGlob::kNorm, bool useTMVAStyle=kTRUE);  ; void TMVAGui (const cha",MatchSource.WIKI,doc/master/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA.html
https://root.cern/doc/master/namespaceTMVA.html:41280,Deployability,install,installed,41280," classcanvasmap_t ; classCanvasMap . ). ◆ plotEfficienciesMulticlass1vs1(). void TMVA::plotEfficienciesMulticlass1vs1 ; (; TString ; dataset, . TString ; fin, . TString ; baseClassname . ). ◆ plotEfficienciesMulticlass1vsRest(). void TMVA::plotEfficienciesMulticlass1vsRest ; (; TString ; dataset, . EEfficiencyPlotType ; plotType = EEfficiencyPlotType::kRejBvsEffS, . TString ; filename_input = ""TMVAMulticlass.root"" . ). ◆ PlotFoams(). void TMVA::PlotFoams ; (; TString ; fileName = ""weights/TMVAClassification_PDEFoam.weights_foams.root"", . bool ; useTMVAStyle = kTRUE . ). ◆ PlotNDimFoams(). void TMVA::PlotNDimFoams ; (; TList & ; foam_list, . TMVA::ECellValue ; cell_value, . const TString & ; cell_value_description, . TMVA::PDEFoamKernelBase * ; kernel . ). ◆ probas(). void TMVA::probas ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . Bool_t ; useTMVAStyle = kTRUE . ). ◆ Python_Executable(). TString TMVA::Python_Executable ; (; ). Function to find current Python executable used by ROOT If ""Python3"" is installed, return ""python3"". ; get current Python executable used by ROOT ; Definition at line 43 of file PyMethodBase.cxx. ◆ RegGuiActionButton(). void TMVA::RegGuiActionButton ; (; TControlBar * ; cbar, . const TString & ; title, . const TString & ; macro, . const TString & ; comment, . const TString & ; buttonType, . TString ; requiredKey = """" . ). ◆ RegGuiGetKeyList(). TList * TMVA::RegGuiGetKeyList ; (; const TString & ; pattern). ◆ regression_averagedevs(). void TMVA::regression_averagedevs ; (; TString ; dataset, . TString ; fin, . Int_t ; Nevt = -1, . Bool_t ; useTMVAStyle = kTRUE . ). ◆ rulevis(). void TMVA::rulevis ; (; TString ; fin = ""TMVA.root"", . TMVAGlob::TypeOfPlot ; type = TMVAGlob::kNorm, . bool ; useTMVAStyle = kTRUE . ). ◆ rulevisCorr() [1/2]. void TMVA::rulevisCorr ; (; TDirectory * ; rfdir, . TDirectory * ; vardir, . TDirectory * ; corrdir, . TMVAGlob::TypeOfPlot ; type . ). ◆ rulevisCorr() [2/2]. void TMVA::rulevisCorr ; (; TString ; fin = """,MatchSource.WIKI,doc/master/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA.html
https://root.cern/doc/master/namespaceTMVA.html:3201,Integrability,interface,interface,3201,"  Class that contains all the data information. More...;  ; class  DataSetInfo;  Class that contains all the data information. More...;  ; class  DataSetManager;  Class that contains all the data information. More...;  ; class  DecisionTree;  Implementation of a Decision Tree. More...;  ; class  DecisionTreeNode;  ; struct  DeleteFunctor_t;  ; class  DTNodeTrainingInfo;  ; class  Envelope;  Abstract base class for all high level ml algorithms, you can book ml methods like BDT, MLP. More...;  ; class  Event;  ; class  Executor;  Base Executor class. More...;  ; class  ExpectedErrorPruneTool;  A helper class to prune a decision tree using the expected error (C4.5) method. More...;  ; class  Factory;  This is the main MVA steering class. More...;  ; class  FitterBase;  Base class for TMVA fitters. More...;  ; class  GeneticAlgorithm;  Base definition for genetic algorithm. More...;  ; class  GeneticFitter;  Fitter using a Genetic Algorithm. More...;  ; class  GeneticGenes;  Cut optimisation interface class for genetic algorithm. More...;  ; class  GeneticPopulation;  Population definition for genetic algorithm. More...;  ; class  GeneticRange;  Range definition for genetic algorithm. More...;  ; class  GiniIndex;  Implementation of the GiniIndex as separation criterion. More...;  ; class  GiniIndexWithLaplace;  Implementation of the GiniIndex With Laplace correction as separation criterion. More...;  ; class  HuberLossFunction;  Huber Loss Function. More...;  ; class  HuberLossFunctionBDT;  Huber BDT Loss Function. More...;  ; class  HyperParameterOptimisation;  ; class  HyperParameterOptimisationResult;  ; class  IFitterTarget;  Interface for a fitter 'target'. More...;  ; class  IMethod;  Interface for all concrete MVA method implementations. More...;  ; class  Increment;  ; class  Interval;  The TMVA::Interval Class. More...;  ; class  IPruneTool;  IPruneTool - a helper interface class to prune a decision tree. More...;  ; class  IPythonInteractive;  This class is n",MatchSource.WIKI,doc/master/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA.html
https://root.cern/doc/master/namespaceTMVA.html:4101,Integrability,interface,interface,4101,"  GeneticFitter;  Fitter using a Genetic Algorithm. More...;  ; class  GeneticGenes;  Cut optimisation interface class for genetic algorithm. More...;  ; class  GeneticPopulation;  Population definition for genetic algorithm. More...;  ; class  GeneticRange;  Range definition for genetic algorithm. More...;  ; class  GiniIndex;  Implementation of the GiniIndex as separation criterion. More...;  ; class  GiniIndexWithLaplace;  Implementation of the GiniIndex With Laplace correction as separation criterion. More...;  ; class  HuberLossFunction;  Huber Loss Function. More...;  ; class  HuberLossFunctionBDT;  Huber BDT Loss Function. More...;  ; class  HyperParameterOptimisation;  ; class  HyperParameterOptimisationResult;  ; class  IFitterTarget;  Interface for a fitter 'target'. More...;  ; class  IMethod;  Interface for all concrete MVA method implementations. More...;  ; class  Increment;  ; class  Interval;  The TMVA::Interval Class. More...;  ; class  IPruneTool;  IPruneTool - a helper interface class to prune a decision tree. More...;  ; class  IPythonInteractive;  This class is needed by JsMVA, and it's a helper class for tracking errors during the training in Jupyter notebook. More...;  ; class  KDEKernel;  KDE Kernel for ""smoothing"" the PDFs. More...;  ; class  LDA;  ; class  LeastSquaresLossFunction;  Least Squares Loss Function. More...;  ; class  LeastSquaresLossFunctionBDT;  Least Squares BDT Loss Function. More...;  ; class  LogInterval;  The TMVA::Interval Class. More...;  ; class  LossFunction;  ; class  LossFunctionBDT;  ; class  LossFunctionEventInfo;  ; class  MCFitter;  Fitter using Monte Carlo sampling of parameters. More...;  ; class  MethodANNBase;  Base class for all TMVA methods using artificial neural networks. More...;  ; class  MethodBase;  Virtual base Class for all MVA method. More...;  ; class  MethodBayesClassifier;  Description of bayesian classifiers. More...;  ; class  MethodBDT;  Analysis of Boosted Decision Trees. More...;  ; class ",MatchSource.WIKI,doc/master/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA.html
https://root.cern/doc/master/namespaceTMVA.html:7426,Integrability,interface,interface,7426,"ear Discriminant. More...;  ; class  MethodLikelihood;  Likelihood analysis (""non-parametric approach"") More...;  ; class  MethodMLP;  Multilayer Perceptron class built off of MethodANNBase. More...;  ; class  MethodPDEFoam;  The PDEFoam method is an extension of the PDERS method, which divides the multi-dimensional phase space in a finite number of hyper-rectangles (cells) of constant event density. More...;  ; class  MethodPDERS;  This is a generalization of the above Likelihood methods to \( N_{var} \) dimensions, where \( N_{var} \) is the number of input variables used in the MVA. More...;  ; class  MethodPyAdaBoost;  ; class  MethodPyGTB;  ; class  MethodPyKeras;  ; class  MethodPyRandomForest;  ; class  MethodPyTorch;  ; class  MethodRSNNS;  ; class  MethodRSVM;  ; class  MethodRuleFit;  J Friedman's RuleFit method. More...;  ; class  MethodRXGB;  ; class  MethodSVM;  SMO Platt's SVM classifier with Keerthi & Shavade improvements. More...;  ; class  MethodTMlpANN;  This is the TMVA TMultiLayerPerceptron interface class. More...;  ; class  MinuitFitter;  /Fitter using MINUIT More...;  ; class  MinuitWrapper;  Wrapper around MINUIT. More...;  ; class  MisClassificationError;  Implementation of the MisClassificationError as separation criterion. More...;  ; class  Monitoring;  ; class  MsgLogger;  ostringstream derivative to redirect and format output More...;  ; class  Node;  Node for the BinarySearch or Decision Trees. More...;  ; class  null_t;  ; class  OptimizeConfigParameters;  ; class  Option;  ; class  Option< T * >;  ; class  OptionBase;  Class for TMVA-option handling. More...;  ; class  OptionMap;  class to storage options for the differents methods More...;  ; class  PDEFoam;  Implementation of PDEFoam. More...;  ; class  PDEFoamCell;  ; class  PDEFoamDecisionTree;  This PDEFoam variant acts like a decision tree and stores in every cell the discriminant. More...;  ; class  PDEFoamDecisionTreeDensity;  This is a concrete implementation of PDEFoam. More",MatchSource.WIKI,doc/master/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA.html
https://root.cern/doc/master/namespaceTMVA.html:8482,Integrability,interface,interface,8482,"nuitFitter;  /Fitter using MINUIT More...;  ; class  MinuitWrapper;  Wrapper around MINUIT. More...;  ; class  MisClassificationError;  Implementation of the MisClassificationError as separation criterion. More...;  ; class  Monitoring;  ; class  MsgLogger;  ostringstream derivative to redirect and format output More...;  ; class  Node;  Node for the BinarySearch or Decision Trees. More...;  ; class  null_t;  ; class  OptimizeConfigParameters;  ; class  Option;  ; class  Option< T * >;  ; class  OptionBase;  Class for TMVA-option handling. More...;  ; class  OptionMap;  class to storage options for the differents methods More...;  ; class  PDEFoam;  Implementation of PDEFoam. More...;  ; class  PDEFoamCell;  ; class  PDEFoamDecisionTree;  This PDEFoam variant acts like a decision tree and stores in every cell the discriminant. More...;  ; class  PDEFoamDecisionTreeDensity;  This is a concrete implementation of PDEFoam. More...;  ; class  PDEFoamDensityBase;  This is an abstract class, which provides an interface for a PDEFoam density estimator. More...;  ; class  PDEFoamDiscriminant;  This PDEFoam variant stores in every cell the discriminant. More...;  ; class  PDEFoamDiscriminantDensity;  This is a concrete implementation of PDEFoam. More...;  ; class  PDEFoamEvent;  This PDEFoam variant stores in every cell the sum of event weights and the sum of the squared event weights. More...;  ; class  PDEFoamEventDensity;  This is a concrete implementation of PDEFoam. More...;  ; class  PDEFoamKernelBase;  This class is the abstract kernel interface for PDEFoam. More...;  ; class  PDEFoamKernelGauss;  This PDEFoam kernel estimates a cell value for a given event by weighting all cell values with a gauss function. More...;  ; class  PDEFoamKernelLinN;  This PDEFoam kernel estimates a cell value for a given event by weighting with cell values of the nearest neighbor cells. More...;  ; class  PDEFoamKernelTrivial;  This class is a trivial PDEFoam kernel estimator. More...;  ; ",MatchSource.WIKI,doc/master/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA.html
https://root.cern/doc/master/namespaceTMVA.html:9023,Integrability,interface,interface,9023,"andling. More...;  ; class  OptionMap;  class to storage options for the differents methods More...;  ; class  PDEFoam;  Implementation of PDEFoam. More...;  ; class  PDEFoamCell;  ; class  PDEFoamDecisionTree;  This PDEFoam variant acts like a decision tree and stores in every cell the discriminant. More...;  ; class  PDEFoamDecisionTreeDensity;  This is a concrete implementation of PDEFoam. More...;  ; class  PDEFoamDensityBase;  This is an abstract class, which provides an interface for a PDEFoam density estimator. More...;  ; class  PDEFoamDiscriminant;  This PDEFoam variant stores in every cell the discriminant. More...;  ; class  PDEFoamDiscriminantDensity;  This is a concrete implementation of PDEFoam. More...;  ; class  PDEFoamEvent;  This PDEFoam variant stores in every cell the sum of event weights and the sum of the squared event weights. More...;  ; class  PDEFoamEventDensity;  This is a concrete implementation of PDEFoam. More...;  ; class  PDEFoamKernelBase;  This class is the abstract kernel interface for PDEFoam. More...;  ; class  PDEFoamKernelGauss;  This PDEFoam kernel estimates a cell value for a given event by weighting all cell values with a gauss function. More...;  ; class  PDEFoamKernelLinN;  This PDEFoam kernel estimates a cell value for a given event by weighting with cell values of the nearest neighbor cells. More...;  ; class  PDEFoamKernelTrivial;  This class is a trivial PDEFoam kernel estimator. More...;  ; class  PDEFoamMultiTarget;  This PDEFoam variant is used to estimate multiple targets by creating an event density foam (PDEFoamEvent), which has dimension: More...;  ; class  PDEFoamTarget;  This PDEFoam variant stores in every cell the average target fTarget (see the Constructor) as well as the statistical error on the target fTarget. More...;  ; class  PDEFoamTargetDensity;  This is a concrete implementation of PDEFoam. More...;  ; class  PDEFoamVect;  ; class  PDF;  PDF wrapper for histograms; uses user-defined spline interpola",MatchSource.WIKI,doc/master/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA.html
https://root.cern/doc/master/namespaceTMVA.html:9943,Integrability,wrap,wrapper,9943,"re...;  ; class  PDEFoamKernelBase;  This class is the abstract kernel interface for PDEFoam. More...;  ; class  PDEFoamKernelGauss;  This PDEFoam kernel estimates a cell value for a given event by weighting all cell values with a gauss function. More...;  ; class  PDEFoamKernelLinN;  This PDEFoam kernel estimates a cell value for a given event by weighting with cell values of the nearest neighbor cells. More...;  ; class  PDEFoamKernelTrivial;  This class is a trivial PDEFoam kernel estimator. More...;  ; class  PDEFoamMultiTarget;  This PDEFoam variant is used to estimate multiple targets by creating an event density foam (PDEFoamEvent), which has dimension: More...;  ; class  PDEFoamTarget;  This PDEFoam variant stores in every cell the average target fTarget (see the Constructor) as well as the statistical error on the target fTarget. More...;  ; class  PDEFoamTargetDensity;  This is a concrete implementation of PDEFoam. More...;  ; class  PDEFoamVect;  ; class  PDF;  PDF wrapper for histograms; uses user-defined spline interpolation. More...;  ; class  PruningInfo;  ; class  PyMethodBase;  ; class  QuickMVAProbEstimator;  ; class  RandomGenerator;  ; class  Rank;  ; class  Ranking;  Ranking for variables in method (implementation) More...;  ; class  Reader;  The Reader class serves to use the MVAs in a specific analysis context. More...;  ; class  RegressionVariance;  Calculate the ""SeparationGain"" for Regression analysis separation criteria used in various training algorithms. More...;  ; class  Results;  Class that is the base-class for a vector of result. More...;  ; class  ResultsClassification;  Class that is the base-class for a vector of result. More...;  ; class  ResultsMulticlass;  Class which takes the results of a multiclass classification. More...;  ; class  ResultsRegression;  Class that is the base-class for a vector of result. More...;  ; class  RMethodBase;  ; class  ROCCalc;  ; class  ROCCurve;  ; class  RootFinder;  Root finding using Brents a",MatchSource.WIKI,doc/master/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA.html
https://root.cern/doc/master/namespaceTMVA.html:11537,Integrability,interface,interface,11537,"tion;  Class that is the base-class for a vector of result. More...;  ; class  ResultsMulticlass;  Class which takes the results of a multiclass classification. More...;  ; class  ResultsRegression;  Class that is the base-class for a vector of result. More...;  ; class  RMethodBase;  ; class  ROCCalc;  ; class  ROCCurve;  ; class  RootFinder;  Root finding using Brents algorithm (translated from CERNLIB function RZERO) More...;  ; class  Rule;  Implementation of a rule. More...;  ; class  RuleCut;  A class describing a 'rule cut'. More...;  ; class  RuleEnsemble;  ; class  RuleFit;  A class implementing various fits of rule ensembles. More...;  ; class  RuleFitAPI;  J Friedman's RuleFit method. More...;  ; class  RuleFitParams;  A class doing the actual fitting of a linear model using rules as base functions. More...;  ; class  SdivSqrtSplusB;  Implementation of the SdivSqrtSplusB as separation criterion. More...;  ; class  SeparationBase;  An interface to calculate the ""SeparationGain"" for different separation criteria used in various training algorithms. More...;  ; class  SimulatedAnnealing;  Base implementation of simulated annealing fitting procedure. More...;  ; class  SimulatedAnnealingFitter;  Fitter using a Simulated Annealing Algorithm. More...;  ; class  StatDialogBDT;  ; class  StatDialogBDTReg;  ; class  StatDialogMVAEffs;  ; class  SVEvent;  Event class for Support Vector Machine. More...;  ; class  SVKernelFunction;  Kernel for Support Vector Machine. More...;  ; class  SVKernelMatrix;  Kernel matrix for Support Vector Machine. More...;  ; class  SVWorkingSet;  Working class for Support Vector Machine. More...;  ; class  TActivation;  Interface for TNeuron activation function classes. More...;  ; class  TActivationChooser;  Class for easily choosing activation functions. More...;  ; class  TActivationIdentity;  Identity activation function for TNeuron. More...;  ; class  TActivationRadial;  Radial basis activation function for ANN. More...;  ; class ",MatchSource.WIKI,doc/master/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA.html
https://root.cern/doc/master/namespaceTMVA.html:13625,Integrability,rout,routines,13625,  Rectified Linear Unit activation function for TNeuron. More...;  ; class  TActivationSigmoid;  Sigmoid activation function for TNeuron. More...;  ; class  TActivationTanh;  Tanh activation function for ANN. More...;  ; class  Timer;  Timing information for training and evaluation of MVA methods. More...;  ; class  TMVAGaussPair;  ; struct  TMVAGUI;  ; class  TNeuron;  Neuron class used by TMVA artificial neural network methods. More...;  ; class  TNeuronInput;  Interface for TNeuron input calculation classes. More...;  ; class  TNeuronInputAbs;  TNeuron input calculator – calculates the sum of the absolute values of the weighted inputs. More...;  ; class  TNeuronInputChooser;  Class for easily choosing neuron input functions. More...;  ; class  TNeuronInputSqSum;  TNeuron input calculator – calculates the squared weighted sum of inputs. More...;  ; class  TNeuronInputSum;  TNeuron input calculator – calculates the weighted sum of inputs. More...;  ; class  Tools;  Global auxiliary applications and data treatment routines. More...;  ; class  TrainingHistory;  Tracking data from training. More...;  ; class  TransformationHandler;  Class that contains all the data information. More...;  ; class  TreeInfo;  ; class  TSpline1;  Linear interpolation of TGraph. More...;  ; class  TSpline2;  Quadratic interpolation of TGraph. More...;  ; class  TSynapse;  Synapse class used by TMVA artificial neural network methods. More...;  ; struct  TTrainingSettings;  All of the options that can be specified in the training string. More...;  ; class  Types;  Singleton class for Global types used by TMVA. More...;  ; class  VariableDecorrTransform;  Linear interpolation class. More...;  ; class  VariableGaussTransform;  Gaussian Transformation of input variables. More...;  ; class  VariableIdentityTransform;  Linear interpolation class. More...;  ; class  VariableImportance;  ; class  VariableImportanceResult;  ; class  VariableInfo;  Class for type info of MVA input variable. More...;,MatchSource.WIKI,doc/master/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA.html
https://root.cern/doc/master/namespaceTMVA.html:185,Modifiability,variab,variable,185,". ROOT: TMVA Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Functions ; TMVA Namespace Reference. create variable transformations ; More... Namespaces; namespace  DNN;  ; namespace  Experimental;  ; namespace  Internal;  ; namespace  kNN;  ; namespace  TMVAGlob;  . Classes; class  AbsoluteDeviationLossFunction;  Absolute Deviation Loss Function. More...;  ; class  AbsoluteDeviationLossFunctionBDT;  Absolute Deviation BDT Loss Function. More...;  ; class  AbsValue;  ; class  BDTEventWrapper;  ; class  BinarySearchTree;  A simple Binary search tree including a volume search method. More...;  ; class  BinarySearchTreeNode;  Node for the BinarySearch or Decision Trees. More...;  ; class  BinaryTree;  Base class for BinarySearch and Decision Trees. More...;  ; class  CCPruner;  A helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) More...;  ; class  CCTreeWrapper;  ; class  ClassifierFactory;  This is the MVA factory. More...;  ; class  ClassInfo;  Class that contains all the information of a class. More...;  ; class  Config;  Singleton class for global configuration settings used by TMVA. More...;  ; class  Configurable;  ; class  ConvergenceTest;  Check for convergence. More...;  ; class  CostComplexityPruneTool;  A class to prune a decision tree using the Cost Complexity method. More...;  ; class  CrossEntropy;  Implementation of the CrossEntropy as separation criterion. More...;  ; class  CrossValidation;  Class to perform cross validation, splitting the dataloader into folds. More...;  ; class  CrossValidationFoldResult;  ; class  CrossValidationResult;  Class to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation. More...;  ; class  CvSplit;  ; class  CvSplitKFolds;  ; class  CvSplitKFoldsExpr;  ; class ",MatchSource.WIKI,doc/master/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA.html
https://root.cern/doc/master/namespaceTMVA.html:1227,Modifiability,config,configuration,1227,"amespaces; namespace  DNN;  ; namespace  Experimental;  ; namespace  Internal;  ; namespace  kNN;  ; namespace  TMVAGlob;  . Classes; class  AbsoluteDeviationLossFunction;  Absolute Deviation Loss Function. More...;  ; class  AbsoluteDeviationLossFunctionBDT;  Absolute Deviation BDT Loss Function. More...;  ; class  AbsValue;  ; class  BDTEventWrapper;  ; class  BinarySearchTree;  A simple Binary search tree including a volume search method. More...;  ; class  BinarySearchTreeNode;  Node for the BinarySearch or Decision Trees. More...;  ; class  BinaryTree;  Base class for BinarySearch and Decision Trees. More...;  ; class  CCPruner;  A helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) More...;  ; class  CCTreeWrapper;  ; class  ClassifierFactory;  This is the MVA factory. More...;  ; class  ClassInfo;  Class that contains all the information of a class. More...;  ; class  Config;  Singleton class for global configuration settings used by TMVA. More...;  ; class  Configurable;  ; class  ConvergenceTest;  Check for convergence. More...;  ; class  CostComplexityPruneTool;  A class to prune a decision tree using the Cost Complexity method. More...;  ; class  CrossEntropy;  Implementation of the CrossEntropy as separation criterion. More...;  ; class  CrossValidation;  Class to perform cross validation, splitting the dataloader into folds. More...;  ; class  CrossValidationFoldResult;  ; class  CrossValidationResult;  Class to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation. More...;  ; class  CvSplit;  ; class  CvSplitKFolds;  ; class  CvSplitKFoldsExpr;  ; class  DataInputHandler;  Class that contains all the data information. More...;  ; class  DataLoader;  ; class  DataSet;  Class that contains all the data information. More...;  ; class  DataSetFactory;  Class that contains a",MatchSource.WIKI,doc/master/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA.html
https://root.cern/doc/master/namespaceTMVA.html:6271,Modifiability,variab,variables,6271,"0;  ; class  MethodCategory;  Class for categorizing the phase space. More...;  ; class  MethodCFMlpANN;  Interface to Clermond-Ferrand artificial neural network. More...;  ; class  MethodCFMlpANN_Utils;  Implementation of Clermond-Ferrand artificial neural network. More...;  ; class  MethodCompositeBase;  Virtual base class for combining several TMVA method. More...;  ; class  MethodCrossValidation;  ; class  MethodCuts;  Multivariate optimisation of signal efficiency for given background efficiency, applying rectangular minimum and maximum requirements. More...;  ; class  MethodDL;  ; class  MethodDNN;  Deep Neural Network Implementation. More...;  ; class  MethodDT;  Analysis of Boosted Decision Trees. More...;  ; class  MethodFDA;  Function discriminant analysis (FDA). More...;  ; class  MethodFisher;  Fisher and Mahalanobis Discriminants (Linear Discriminant Analysis) More...;  ; class  MethodHMatrix;  H-Matrix method, which is implemented as a simple comparison of chi-squared estimators for signal and background, taking into account the linear correlations between the input variables. More...;  ; class  MethodInfo;  ; class  MethodKNN;  Analysis of k-nearest neighbor. More...;  ; class  MethodLD;  Linear Discriminant. More...;  ; class  MethodLikelihood;  Likelihood analysis (""non-parametric approach"") More...;  ; class  MethodMLP;  Multilayer Perceptron class built off of MethodANNBase. More...;  ; class  MethodPDEFoam;  The PDEFoam method is an extension of the PDERS method, which divides the multi-dimensional phase space in a finite number of hyper-rectangles (cells) of constant event density. More...;  ; class  MethodPDERS;  This is a generalization of the above Likelihood methods to \( N_{var} \) dimensions, where \( N_{var} \) is the number of input variables used in the MVA. More...;  ; class  MethodPyAdaBoost;  ; class  MethodPyGTB;  ; class  MethodPyKeras;  ; class  MethodPyRandomForest;  ; class  MethodPyTorch;  ; class  MethodRSNNS;  ; class  Method",MatchSource.WIKI,doc/master/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA.html
https://root.cern/doc/master/namespaceTMVA.html:6966,Modifiability,variab,variables,6966,"class  MethodFDA;  Function discriminant analysis (FDA). More...;  ; class  MethodFisher;  Fisher and Mahalanobis Discriminants (Linear Discriminant Analysis) More...;  ; class  MethodHMatrix;  H-Matrix method, which is implemented as a simple comparison of chi-squared estimators for signal and background, taking into account the linear correlations between the input variables. More...;  ; class  MethodInfo;  ; class  MethodKNN;  Analysis of k-nearest neighbor. More...;  ; class  MethodLD;  Linear Discriminant. More...;  ; class  MethodLikelihood;  Likelihood analysis (""non-parametric approach"") More...;  ; class  MethodMLP;  Multilayer Perceptron class built off of MethodANNBase. More...;  ; class  MethodPDEFoam;  The PDEFoam method is an extension of the PDERS method, which divides the multi-dimensional phase space in a finite number of hyper-rectangles (cells) of constant event density. More...;  ; class  MethodPDERS;  This is a generalization of the above Likelihood methods to \( N_{var} \) dimensions, where \( N_{var} \) is the number of input variables used in the MVA. More...;  ; class  MethodPyAdaBoost;  ; class  MethodPyGTB;  ; class  MethodPyKeras;  ; class  MethodPyRandomForest;  ; class  MethodPyTorch;  ; class  MethodRSNNS;  ; class  MethodRSVM;  ; class  MethodRuleFit;  J Friedman's RuleFit method. More...;  ; class  MethodRXGB;  ; class  MethodSVM;  SMO Platt's SVM classifier with Keerthi & Shavade improvements. More...;  ; class  MethodTMlpANN;  This is the TMVA TMultiLayerPerceptron interface class. More...;  ; class  MinuitFitter;  /Fitter using MINUIT More...;  ; class  MinuitWrapper;  Wrapper around MINUIT. More...;  ; class  MisClassificationError;  Implementation of the MisClassificationError as separation criterion. More...;  ; class  Monitoring;  ; class  MsgLogger;  ostringstream derivative to redirect and format output More...;  ; class  Node;  Node for the BinarySearch or Decision Trees. More...;  ; class  null_t;  ; class  OptimizeConfigPa",MatchSource.WIKI,doc/master/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA.html
https://root.cern/doc/master/namespaceTMVA.html:10171,Modifiability,variab,variables,10171,"es a cell value for a given event by weighting all cell values with a gauss function. More...;  ; class  PDEFoamKernelLinN;  This PDEFoam kernel estimates a cell value for a given event by weighting with cell values of the nearest neighbor cells. More...;  ; class  PDEFoamKernelTrivial;  This class is a trivial PDEFoam kernel estimator. More...;  ; class  PDEFoamMultiTarget;  This PDEFoam variant is used to estimate multiple targets by creating an event density foam (PDEFoamEvent), which has dimension: More...;  ; class  PDEFoamTarget;  This PDEFoam variant stores in every cell the average target fTarget (see the Constructor) as well as the statistical error on the target fTarget. More...;  ; class  PDEFoamTargetDensity;  This is a concrete implementation of PDEFoam. More...;  ; class  PDEFoamVect;  ; class  PDF;  PDF wrapper for histograms; uses user-defined spline interpolation. More...;  ; class  PruningInfo;  ; class  PyMethodBase;  ; class  QuickMVAProbEstimator;  ; class  RandomGenerator;  ; class  Rank;  ; class  Ranking;  Ranking for variables in method (implementation) More...;  ; class  Reader;  The Reader class serves to use the MVAs in a specific analysis context. More...;  ; class  RegressionVariance;  Calculate the ""SeparationGain"" for Regression analysis separation criteria used in various training algorithms. More...;  ; class  Results;  Class that is the base-class for a vector of result. More...;  ; class  ResultsClassification;  Class that is the base-class for a vector of result. More...;  ; class  ResultsMulticlass;  Class which takes the results of a multiclass classification. More...;  ; class  ResultsRegression;  Class that is the base-class for a vector of result. More...;  ; class  RMethodBase;  ; class  ROCCalc;  ; class  ROCCurve;  ; class  RootFinder;  Root finding using Brents algorithm (translated from CERNLIB function RZERO) More...;  ; class  Rule;  Implementation of a rule. More...;  ; class  RuleCut;  A class describing a 'rule cut'",MatchSource.WIKI,doc/master/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA.html
https://root.cern/doc/master/namespaceTMVA.html:14358,Modifiability,variab,variables,14358,"ons. More...;  ; class  TNeuronInputSqSum;  TNeuron input calculator – calculates the squared weighted sum of inputs. More...;  ; class  TNeuronInputSum;  TNeuron input calculator – calculates the weighted sum of inputs. More...;  ; class  Tools;  Global auxiliary applications and data treatment routines. More...;  ; class  TrainingHistory;  Tracking data from training. More...;  ; class  TransformationHandler;  Class that contains all the data information. More...;  ; class  TreeInfo;  ; class  TSpline1;  Linear interpolation of TGraph. More...;  ; class  TSpline2;  Quadratic interpolation of TGraph. More...;  ; class  TSynapse;  Synapse class used by TMVA artificial neural network methods. More...;  ; struct  TTrainingSettings;  All of the options that can be specified in the training string. More...;  ; class  Types;  Singleton class for Global types used by TMVA. More...;  ; class  VariableDecorrTransform;  Linear interpolation class. More...;  ; class  VariableGaussTransform;  Gaussian Transformation of input variables. More...;  ; class  VariableIdentityTransform;  Linear interpolation class. More...;  ; class  VariableImportance;  ; class  VariableImportanceResult;  ; class  VariableInfo;  Class for type info of MVA input variable. More...;  ; class  VariableNormalizeTransform;  Linear interpolation class. More...;  ; class  VariablePCATransform;  Linear interpolation class. More...;  ; class  VariableRearrangeTransform;  Rearrangement of input variables. More...;  ; class  VariableTransformBase;  Linear interpolation class. More...;  ; class  VarTransformHandler;  ; class  Volume;  Volume for BinarySearchTree. More...;  . Functions; void ActionButton (TControlBar *cbar, const TString &title, const TString &macro, const TString &comment, const TString &buttonType, TString requiredKey="""");  ; void annconvergencetest (TString dataset, TDirectory *lhdir);  ; void annconvergencetest (TString dataset, TString fin=""TMVA.root"", Bool_t useTMVAStyle=kTRUE);  ; void BD",MatchSource.WIKI,doc/master/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA.html
https://root.cern/doc/master/namespaceTMVA.html:14577,Modifiability,variab,variable,14577,"es the weighted sum of inputs. More...;  ; class  Tools;  Global auxiliary applications and data treatment routines. More...;  ; class  TrainingHistory;  Tracking data from training. More...;  ; class  TransformationHandler;  Class that contains all the data information. More...;  ; class  TreeInfo;  ; class  TSpline1;  Linear interpolation of TGraph. More...;  ; class  TSpline2;  Quadratic interpolation of TGraph. More...;  ; class  TSynapse;  Synapse class used by TMVA artificial neural network methods. More...;  ; struct  TTrainingSettings;  All of the options that can be specified in the training string. More...;  ; class  Types;  Singleton class for Global types used by TMVA. More...;  ; class  VariableDecorrTransform;  Linear interpolation class. More...;  ; class  VariableGaussTransform;  Gaussian Transformation of input variables. More...;  ; class  VariableIdentityTransform;  Linear interpolation class. More...;  ; class  VariableImportance;  ; class  VariableImportanceResult;  ; class  VariableInfo;  Class for type info of MVA input variable. More...;  ; class  VariableNormalizeTransform;  Linear interpolation class. More...;  ; class  VariablePCATransform;  Linear interpolation class. More...;  ; class  VariableRearrangeTransform;  Rearrangement of input variables. More...;  ; class  VariableTransformBase;  Linear interpolation class. More...;  ; class  VarTransformHandler;  ; class  Volume;  Volume for BinarySearchTree. More...;  . Functions; void ActionButton (TControlBar *cbar, const TString &title, const TString &macro, const TString &comment, const TString &buttonType, TString requiredKey="""");  ; void annconvergencetest (TString dataset, TDirectory *lhdir);  ; void annconvergencetest (TString dataset, TString fin=""TMVA.root"", Bool_t useTMVAStyle=kTRUE);  ; void BDT (TString dataset, const TString &fin=""TMVA.root"");  ; void BDT (TString dataset, Int_t itree, TString wfile, TString methName=""BDT"", Bool_t useTMVAStyle=kTRUE);  ; void BDT_DeleteTBar (int ",MatchSource.WIKI,doc/master/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA.html
https://root.cern/doc/master/namespaceTMVA.html:14804,Modifiability,variab,variables,14804,"information. More...;  ; class  TreeInfo;  ; class  TSpline1;  Linear interpolation of TGraph. More...;  ; class  TSpline2;  Quadratic interpolation of TGraph. More...;  ; class  TSynapse;  Synapse class used by TMVA artificial neural network methods. More...;  ; struct  TTrainingSettings;  All of the options that can be specified in the training string. More...;  ; class  Types;  Singleton class for Global types used by TMVA. More...;  ; class  VariableDecorrTransform;  Linear interpolation class. More...;  ; class  VariableGaussTransform;  Gaussian Transformation of input variables. More...;  ; class  VariableIdentityTransform;  Linear interpolation class. More...;  ; class  VariableImportance;  ; class  VariableImportanceResult;  ; class  VariableInfo;  Class for type info of MVA input variable. More...;  ; class  VariableNormalizeTransform;  Linear interpolation class. More...;  ; class  VariablePCATransform;  Linear interpolation class. More...;  ; class  VariableRearrangeTransform;  Rearrangement of input variables. More...;  ; class  VariableTransformBase;  Linear interpolation class. More...;  ; class  VarTransformHandler;  ; class  Volume;  Volume for BinarySearchTree. More...;  . Functions; void ActionButton (TControlBar *cbar, const TString &title, const TString &macro, const TString &comment, const TString &buttonType, TString requiredKey="""");  ; void annconvergencetest (TString dataset, TDirectory *lhdir);  ; void annconvergencetest (TString dataset, TString fin=""TMVA.root"", Bool_t useTMVAStyle=kTRUE);  ; void BDT (TString dataset, const TString &fin=""TMVA.root"");  ; void BDT (TString dataset, Int_t itree, TString wfile, TString methName=""BDT"", Bool_t useTMVAStyle=kTRUE);  ; void BDT_DeleteTBar (int i);  ; void BDT_Reg (TString dataset, const TString &fin=""TMVAReg.root"");  ; void BDT_Reg (TString dataset, Int_t itree, TString wfile="""", TString methName=""BDT"", Bool_t useTMVAStyle=kTRUE);  ; void bdtcontrolplots (TString dataset, TDirectory *);  ; void BD",MatchSource.WIKI,doc/master/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA.html
https://root.cern/doc/master/namespaceTMVA.html:25844,Modifiability,variab,variables,25844,"oid regression_averagedevs (TString dataset, TString fin, Int_t Nevt=-1, Bool_t useTMVAStyle=kTRUE);  ; void rulevis (TString fin=""TMVA.root"", TMVAGlob::TypeOfPlot type=TMVAGlob::kNorm, bool useTMVAStyle=kTRUE);  ; void rulevisCorr (TDirectory *rfdir, TDirectory *vardir, TDirectory *corrdir, TMVAGlob::TypeOfPlot type);  ; void rulevisCorr (TString fin=""TMVA.root"", TMVAGlob::TypeOfPlot type=TMVAGlob::kNorm, bool useTMVAStyle=kTRUE);  ; void rulevisHists (TDirectory *rfdir, TDirectory *vardir, TDirectory *corrdir, TMVAGlob::TypeOfPlot type);  ; void rulevisHists (TString fin=""TMVA.root"", TMVAGlob::TypeOfPlot type=TMVAGlob::kNorm, bool useTMVAStyle=kTRUE);  ; void TMVAGui (const char *fName=""TMVA.root"", TString dataset="""");  ; void TMVAMultiClassGui (const char *fName=""TMVAMulticlass.root"", TString dataset="""");  ; void TMVARegGui (const char *fName=""TMVAReg.root"", TString dataset="""");  ; void training_history (TString dataset, TString fin=""TMVA.root"", Bool_t useTMVAStyle=kTRUE);  ; void variables (TString dataset, TString fin=""TMVA.root"", TString dirName=""InputVariables_Id"", TString title=""TMVA Input Variables"", Bool_t isRegression=kFALSE, Bool_t useTMVAStyle=kTRUE);  ; void variablesMultiClass (TString dataset, TString fin=""TMVA.root"", TString dirName=""InputVariables_Id"", TString title=""TMVA Input Variables"", Bool_t isRegression=kFALSE, Bool_t useTMVAStyle=kTRUE);  . Detailed Description; create variable transformations ; Function Documentation. ◆ ActionButton(). void TMVA::ActionButton ; (; TControlBar * ; cbar, . const TString & ; title, . const TString & ; macro, . const TString & ; comment, . const TString & ; buttonType, . TString ; requiredKey = """" . ). ◆ annconvergencetest() [1/2]. void TMVA::annconvergencetest ; (; TString ; dataset, . TDirectory * ; lhdir . ). ◆ annconvergencetest() [2/2]. void TMVA::annconvergencetest ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . Bool_t ; useTMVAStyle = kTRUE . ). ◆ BDT() [1/2]. void TMVA::BDT ; (; TString ; datase",MatchSource.WIKI,doc/master/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA.html
https://root.cern/doc/master/namespaceTMVA.html:26036,Modifiability,variab,variablesMultiClass,26036,"AGlob::TypeOfPlot type=TMVAGlob::kNorm, bool useTMVAStyle=kTRUE);  ; void rulevisCorr (TDirectory *rfdir, TDirectory *vardir, TDirectory *corrdir, TMVAGlob::TypeOfPlot type);  ; void rulevisCorr (TString fin=""TMVA.root"", TMVAGlob::TypeOfPlot type=TMVAGlob::kNorm, bool useTMVAStyle=kTRUE);  ; void rulevisHists (TDirectory *rfdir, TDirectory *vardir, TDirectory *corrdir, TMVAGlob::TypeOfPlot type);  ; void rulevisHists (TString fin=""TMVA.root"", TMVAGlob::TypeOfPlot type=TMVAGlob::kNorm, bool useTMVAStyle=kTRUE);  ; void TMVAGui (const char *fName=""TMVA.root"", TString dataset="""");  ; void TMVAMultiClassGui (const char *fName=""TMVAMulticlass.root"", TString dataset="""");  ; void TMVARegGui (const char *fName=""TMVAReg.root"", TString dataset="""");  ; void training_history (TString dataset, TString fin=""TMVA.root"", Bool_t useTMVAStyle=kTRUE);  ; void variables (TString dataset, TString fin=""TMVA.root"", TString dirName=""InputVariables_Id"", TString title=""TMVA Input Variables"", Bool_t isRegression=kFALSE, Bool_t useTMVAStyle=kTRUE);  ; void variablesMultiClass (TString dataset, TString fin=""TMVA.root"", TString dirName=""InputVariables_Id"", TString title=""TMVA Input Variables"", Bool_t isRegression=kFALSE, Bool_t useTMVAStyle=kTRUE);  . Detailed Description; create variable transformations ; Function Documentation. ◆ ActionButton(). void TMVA::ActionButton ; (; TControlBar * ; cbar, . const TString & ; title, . const TString & ; macro, . const TString & ; comment, . const TString & ; buttonType, . TString ; requiredKey = """" . ). ◆ annconvergencetest() [1/2]. void TMVA::annconvergencetest ; (; TString ; dataset, . TDirectory * ; lhdir . ). ◆ annconvergencetest() [2/2]. void TMVA::annconvergencetest ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . Bool_t ; useTMVAStyle = kTRUE . ). ◆ BDT() [1/2]. void TMVA::BDT ; (; TString ; dataset, . const TString & ; fin = ""TMVA.root"" . ). ◆ BDT() [2/2]. void TMVA::BDT ; (; TString ; dataset, . Int_t ; itree, . TString ; wfile, . TString",MatchSource.WIKI,doc/master/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA.html
https://root.cern/doc/master/namespaceTMVA.html:26262,Modifiability,variab,variable,26262,"=kTRUE);  ; void rulevisHists (TDirectory *rfdir, TDirectory *vardir, TDirectory *corrdir, TMVAGlob::TypeOfPlot type);  ; void rulevisHists (TString fin=""TMVA.root"", TMVAGlob::TypeOfPlot type=TMVAGlob::kNorm, bool useTMVAStyle=kTRUE);  ; void TMVAGui (const char *fName=""TMVA.root"", TString dataset="""");  ; void TMVAMultiClassGui (const char *fName=""TMVAMulticlass.root"", TString dataset="""");  ; void TMVARegGui (const char *fName=""TMVAReg.root"", TString dataset="""");  ; void training_history (TString dataset, TString fin=""TMVA.root"", Bool_t useTMVAStyle=kTRUE);  ; void variables (TString dataset, TString fin=""TMVA.root"", TString dirName=""InputVariables_Id"", TString title=""TMVA Input Variables"", Bool_t isRegression=kFALSE, Bool_t useTMVAStyle=kTRUE);  ; void variablesMultiClass (TString dataset, TString fin=""TMVA.root"", TString dirName=""InputVariables_Id"", TString title=""TMVA Input Variables"", Bool_t isRegression=kFALSE, Bool_t useTMVAStyle=kTRUE);  . Detailed Description; create variable transformations ; Function Documentation. ◆ ActionButton(). void TMVA::ActionButton ; (; TControlBar * ; cbar, . const TString & ; title, . const TString & ; macro, . const TString & ; comment, . const TString & ; buttonType, . TString ; requiredKey = """" . ). ◆ annconvergencetest() [1/2]. void TMVA::annconvergencetest ; (; TString ; dataset, . TDirectory * ; lhdir . ). ◆ annconvergencetest() [2/2]. void TMVA::annconvergencetest ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . Bool_t ; useTMVAStyle = kTRUE . ). ◆ BDT() [1/2]. void TMVA::BDT ; (; TString ; dataset, . const TString & ; fin = ""TMVA.root"" . ). ◆ BDT() [2/2]. void TMVA::BDT ; (; TString ; dataset, . Int_t ; itree, . TString ; wfile, . TString ; methName = ""BDT"", . Bool_t ; useTMVAStyle = kTRUE . ). ◆ BDT_DeleteTBar(). void TMVA::BDT_DeleteTBar ; (; int ; i). ◆ BDT_Reg() [1/2]. void TMVA::BDT_Reg ; (; TString ; dataset, . const TString & ; fin = ""TMVAReg.root"" . ). ◆ BDT_Reg() [2/2]. void TMVA::BDT_Reg ; (; TString ; d",MatchSource.WIKI,doc/master/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA.html
https://root.cern/doc/master/namespaceTMVA.html:43173,Modifiability,variab,variables,43173,"taset, . TString ; fin, . Int_t ; Nevt = -1, . Bool_t ; useTMVAStyle = kTRUE . ). ◆ rulevis(). void TMVA::rulevis ; (; TString ; fin = ""TMVA.root"", . TMVAGlob::TypeOfPlot ; type = TMVAGlob::kNorm, . bool ; useTMVAStyle = kTRUE . ). ◆ rulevisCorr() [1/2]. void TMVA::rulevisCorr ; (; TDirectory * ; rfdir, . TDirectory * ; vardir, . TDirectory * ; corrdir, . TMVAGlob::TypeOfPlot ; type . ). ◆ rulevisCorr() [2/2]. void TMVA::rulevisCorr ; (; TString ; fin = ""TMVA.root"", . TMVAGlob::TypeOfPlot ; type = TMVAGlob::kNorm, . bool ; useTMVAStyle = kTRUE . ). ◆ rulevisHists() [1/2]. void TMVA::rulevisHists ; (; TDirectory * ; rfdir, . TDirectory * ; vardir, . TDirectory * ; corrdir, . TMVAGlob::TypeOfPlot ; type . ). ◆ rulevisHists() [2/2]. void TMVA::rulevisHists ; (; TString ; fin = ""TMVA.root"", . TMVAGlob::TypeOfPlot ; type = TMVAGlob::kNorm, . bool ; useTMVAStyle = kTRUE . ). ◆ TMVAGui(). void TMVA::TMVAGui ; (; const char * ; fName = ""TMVA.root"", . TString ; dataset = """" . ). ◆ TMVAMultiClassGui(). void TMVA::TMVAMultiClassGui ; (; const char * ; fName = ""TMVAMulticlass.root"", . TString ; dataset = """" . ). ◆ TMVARegGui(). void TMVA::TMVARegGui ; (; const char * ; fName = ""TMVAReg.root"", . TString ; dataset = """" . ). ◆ training_history(). void TMVA::training_history ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . Bool_t ; useTMVAStyle = kTRUE . ). ◆ variables(). void TMVA::variables ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . TString ; dirName = ""InputVariables_Id"", . TString ; title = ""TMVA Input Variables"", . Bool_t ; isRegression = kFALSE, . Bool_t ; useTMVAStyle = kTRUE . ). ◆ variablesMultiClass(). void TMVA::variablesMultiClass ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . TString ; dirName = ""InputVariables_Id"", . TString ; title = ""TMVA Input Variables"", . Bool_t ; isRegression = kFALSE, . Bool_t ; useTMVAStyle = kTRUE . ). TMVA. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA.html
https://root.cern/doc/master/namespaceTMVA.html:43197,Modifiability,variab,variables,43197,"taset, . TString ; fin, . Int_t ; Nevt = -1, . Bool_t ; useTMVAStyle = kTRUE . ). ◆ rulevis(). void TMVA::rulevis ; (; TString ; fin = ""TMVA.root"", . TMVAGlob::TypeOfPlot ; type = TMVAGlob::kNorm, . bool ; useTMVAStyle = kTRUE . ). ◆ rulevisCorr() [1/2]. void TMVA::rulevisCorr ; (; TDirectory * ; rfdir, . TDirectory * ; vardir, . TDirectory * ; corrdir, . TMVAGlob::TypeOfPlot ; type . ). ◆ rulevisCorr() [2/2]. void TMVA::rulevisCorr ; (; TString ; fin = ""TMVA.root"", . TMVAGlob::TypeOfPlot ; type = TMVAGlob::kNorm, . bool ; useTMVAStyle = kTRUE . ). ◆ rulevisHists() [1/2]. void TMVA::rulevisHists ; (; TDirectory * ; rfdir, . TDirectory * ; vardir, . TDirectory * ; corrdir, . TMVAGlob::TypeOfPlot ; type . ). ◆ rulevisHists() [2/2]. void TMVA::rulevisHists ; (; TString ; fin = ""TMVA.root"", . TMVAGlob::TypeOfPlot ; type = TMVAGlob::kNorm, . bool ; useTMVAStyle = kTRUE . ). ◆ TMVAGui(). void TMVA::TMVAGui ; (; const char * ; fName = ""TMVA.root"", . TString ; dataset = """" . ). ◆ TMVAMultiClassGui(). void TMVA::TMVAMultiClassGui ; (; const char * ; fName = ""TMVAMulticlass.root"", . TString ; dataset = """" . ). ◆ TMVARegGui(). void TMVA::TMVARegGui ; (; const char * ; fName = ""TMVAReg.root"", . TString ; dataset = """" . ). ◆ training_history(). void TMVA::training_history ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . Bool_t ; useTMVAStyle = kTRUE . ). ◆ variables(). void TMVA::variables ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . TString ; dirName = ""InputVariables_Id"", . TString ; title = ""TMVA Input Variables"", . Bool_t ; isRegression = kFALSE, . Bool_t ; useTMVAStyle = kTRUE . ). ◆ variablesMultiClass(). void TMVA::variablesMultiClass ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . TString ; dirName = ""InputVariables_Id"", . TString ; title = ""TMVA Input Variables"", . Bool_t ; isRegression = kFALSE, . Bool_t ; useTMVAStyle = kTRUE . ). TMVA. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA.html
https://root.cern/doc/master/namespaceTMVA.html:43422,Modifiability,variab,variablesMultiClass,43422,"taset, . TString ; fin, . Int_t ; Nevt = -1, . Bool_t ; useTMVAStyle = kTRUE . ). ◆ rulevis(). void TMVA::rulevis ; (; TString ; fin = ""TMVA.root"", . TMVAGlob::TypeOfPlot ; type = TMVAGlob::kNorm, . bool ; useTMVAStyle = kTRUE . ). ◆ rulevisCorr() [1/2]. void TMVA::rulevisCorr ; (; TDirectory * ; rfdir, . TDirectory * ; vardir, . TDirectory * ; corrdir, . TMVAGlob::TypeOfPlot ; type . ). ◆ rulevisCorr() [2/2]. void TMVA::rulevisCorr ; (; TString ; fin = ""TMVA.root"", . TMVAGlob::TypeOfPlot ; type = TMVAGlob::kNorm, . bool ; useTMVAStyle = kTRUE . ). ◆ rulevisHists() [1/2]. void TMVA::rulevisHists ; (; TDirectory * ; rfdir, . TDirectory * ; vardir, . TDirectory * ; corrdir, . TMVAGlob::TypeOfPlot ; type . ). ◆ rulevisHists() [2/2]. void TMVA::rulevisHists ; (; TString ; fin = ""TMVA.root"", . TMVAGlob::TypeOfPlot ; type = TMVAGlob::kNorm, . bool ; useTMVAStyle = kTRUE . ). ◆ TMVAGui(). void TMVA::TMVAGui ; (; const char * ; fName = ""TMVA.root"", . TString ; dataset = """" . ). ◆ TMVAMultiClassGui(). void TMVA::TMVAMultiClassGui ; (; const char * ; fName = ""TMVAMulticlass.root"", . TString ; dataset = """" . ). ◆ TMVARegGui(). void TMVA::TMVARegGui ; (; const char * ; fName = ""TMVAReg.root"", . TString ; dataset = """" . ). ◆ training_history(). void TMVA::training_history ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . Bool_t ; useTMVAStyle = kTRUE . ). ◆ variables(). void TMVA::variables ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . TString ; dirName = ""InputVariables_Id"", . TString ; title = ""TMVA Input Variables"", . Bool_t ; isRegression = kFALSE, . Bool_t ; useTMVAStyle = kTRUE . ). ◆ variablesMultiClass(). void TMVA::variablesMultiClass ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . TString ; dirName = ""InputVariables_Id"", . TString ; title = ""TMVA Input Variables"", . Bool_t ; isRegression = kFALSE, . Bool_t ; useTMVAStyle = kTRUE . ). TMVA. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA.html
https://root.cern/doc/master/namespaceTMVA.html:43456,Modifiability,variab,variablesMultiClass,43456,"taset, . TString ; fin, . Int_t ; Nevt = -1, . Bool_t ; useTMVAStyle = kTRUE . ). ◆ rulevis(). void TMVA::rulevis ; (; TString ; fin = ""TMVA.root"", . TMVAGlob::TypeOfPlot ; type = TMVAGlob::kNorm, . bool ; useTMVAStyle = kTRUE . ). ◆ rulevisCorr() [1/2]. void TMVA::rulevisCorr ; (; TDirectory * ; rfdir, . TDirectory * ; vardir, . TDirectory * ; corrdir, . TMVAGlob::TypeOfPlot ; type . ). ◆ rulevisCorr() [2/2]. void TMVA::rulevisCorr ; (; TString ; fin = ""TMVA.root"", . TMVAGlob::TypeOfPlot ; type = TMVAGlob::kNorm, . bool ; useTMVAStyle = kTRUE . ). ◆ rulevisHists() [1/2]. void TMVA::rulevisHists ; (; TDirectory * ; rfdir, . TDirectory * ; vardir, . TDirectory * ; corrdir, . TMVAGlob::TypeOfPlot ; type . ). ◆ rulevisHists() [2/2]. void TMVA::rulevisHists ; (; TString ; fin = ""TMVA.root"", . TMVAGlob::TypeOfPlot ; type = TMVAGlob::kNorm, . bool ; useTMVAStyle = kTRUE . ). ◆ TMVAGui(). void TMVA::TMVAGui ; (; const char * ; fName = ""TMVA.root"", . TString ; dataset = """" . ). ◆ TMVAMultiClassGui(). void TMVA::TMVAMultiClassGui ; (; const char * ; fName = ""TMVAMulticlass.root"", . TString ; dataset = """" . ). ◆ TMVARegGui(). void TMVA::TMVARegGui ; (; const char * ; fName = ""TMVAReg.root"", . TString ; dataset = """" . ). ◆ training_history(). void TMVA::training_history ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . Bool_t ; useTMVAStyle = kTRUE . ). ◆ variables(). void TMVA::variables ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . TString ; dirName = ""InputVariables_Id"", . TString ; title = ""TMVA Input Variables"", . Bool_t ; isRegression = kFALSE, . Bool_t ; useTMVAStyle = kTRUE . ). ◆ variablesMultiClass(). void TMVA::variablesMultiClass ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . TString ; dirName = ""InputVariables_Id"", . TString ; title = ""TMVA Input Variables"", . Bool_t ; isRegression = kFALSE, . Bool_t ; useTMVAStyle = kTRUE . ). TMVA. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA.html
https://root.cern/doc/master/namespaceTMVA.html:1600,Performance,perform,perform,1600,"le Binary search tree including a volume search method. More...;  ; class  BinarySearchTreeNode;  Node for the BinarySearch or Decision Trees. More...;  ; class  BinaryTree;  Base class for BinarySearch and Decision Trees. More...;  ; class  CCPruner;  A helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) More...;  ; class  CCTreeWrapper;  ; class  ClassifierFactory;  This is the MVA factory. More...;  ; class  ClassInfo;  Class that contains all the information of a class. More...;  ; class  Config;  Singleton class for global configuration settings used by TMVA. More...;  ; class  Configurable;  ; class  ConvergenceTest;  Check for convergence. More...;  ; class  CostComplexityPruneTool;  A class to prune a decision tree using the Cost Complexity method. More...;  ; class  CrossEntropy;  Implementation of the CrossEntropy as separation criterion. More...;  ; class  CrossValidation;  Class to perform cross validation, splitting the dataloader into folds. More...;  ; class  CrossValidationFoldResult;  ; class  CrossValidationResult;  Class to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation. More...;  ; class  CvSplit;  ; class  CvSplitKFolds;  ; class  CvSplitKFoldsExpr;  ; class  DataInputHandler;  Class that contains all the data information. More...;  ; class  DataLoader;  ; class  DataSet;  Class that contains all the data information. More...;  ; class  DataSetFactory;  Class that contains all the data information. More...;  ; class  DataSetInfo;  Class that contains all the data information. More...;  ; class  DataSetManager;  Class that contains all the data information. More...;  ; class  DecisionTree;  Implementation of a Decision Tree. More...;  ; class  DecisionTreeNode;  ; struct  DeleteFunctor_t;  ; class  DTNodeTrainingInfo;  ; class  Envelope;  Abstract base class ",MatchSource.WIKI,doc/master/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA.html
https://root.cern/doc/master/namespaceTMVA.html:1614,Security,validat,validation,1614,"le Binary search tree including a volume search method. More...;  ; class  BinarySearchTreeNode;  Node for the BinarySearch or Decision Trees. More...;  ; class  BinaryTree;  Base class for BinarySearch and Decision Trees. More...;  ; class  CCPruner;  A helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) More...;  ; class  CCTreeWrapper;  ; class  ClassifierFactory;  This is the MVA factory. More...;  ; class  ClassInfo;  Class that contains all the information of a class. More...;  ; class  Config;  Singleton class for global configuration settings used by TMVA. More...;  ; class  Configurable;  ; class  ConvergenceTest;  Check for convergence. More...;  ; class  CostComplexityPruneTool;  A class to prune a decision tree using the Cost Complexity method. More...;  ; class  CrossEntropy;  Implementation of the CrossEntropy as separation criterion. More...;  ; class  CrossValidation;  Class to perform cross validation, splitting the dataloader into folds. More...;  ; class  CrossValidationFoldResult;  ; class  CrossValidationResult;  Class to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation. More...;  ; class  CvSplit;  ; class  CvSplitKFolds;  ; class  CvSplitKFoldsExpr;  ; class  DataInputHandler;  Class that contains all the data information. More...;  ; class  DataLoader;  ; class  DataSet;  Class that contains all the data information. More...;  ; class  DataSetFactory;  Class that contains all the data information. More...;  ; class  DataSetInfo;  Class that contains all the data information. More...;  ; class  DataSetManager;  Class that contains all the data information. More...;  ; class  DecisionTree;  Implementation of a Decision Tree. More...;  ; class  DecisionTreeNode;  ; struct  DeleteFunctor_t;  ; class  DTNodeTrainingInfo;  ; class  Envelope;  Abstract base class ",MatchSource.WIKI,doc/master/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA.html
https://root.cern/doc/master/namespaceTMVA.html:1778,Security,validat,validation,1778,"e class for BinarySearch and Decision Trees. More...;  ; class  CCPruner;  A helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) More...;  ; class  CCTreeWrapper;  ; class  ClassifierFactory;  This is the MVA factory. More...;  ; class  ClassInfo;  Class that contains all the information of a class. More...;  ; class  Config;  Singleton class for global configuration settings used by TMVA. More...;  ; class  Configurable;  ; class  ConvergenceTest;  Check for convergence. More...;  ; class  CostComplexityPruneTool;  A class to prune a decision tree using the Cost Complexity method. More...;  ; class  CrossEntropy;  Implementation of the CrossEntropy as separation criterion. More...;  ; class  CrossValidation;  Class to perform cross validation, splitting the dataloader into folds. More...;  ; class  CrossValidationFoldResult;  ; class  CrossValidationResult;  Class to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation. More...;  ; class  CvSplit;  ; class  CvSplitKFolds;  ; class  CvSplitKFoldsExpr;  ; class  DataInputHandler;  Class that contains all the data information. More...;  ; class  DataLoader;  ; class  DataSet;  Class that contains all the data information. More...;  ; class  DataSetFactory;  Class that contains all the data information. More...;  ; class  DataSetInfo;  Class that contains all the data information. More...;  ; class  DataSetManager;  Class that contains all the data information. More...;  ; class  DecisionTree;  Implementation of a Decision Tree. More...;  ; class  DecisionTreeNode;  ; struct  DeleteFunctor_t;  ; class  DTNodeTrainingInfo;  ; class  Envelope;  Abstract base class for all high level ml algorithms, you can book ml methods like BDT, MLP. More...;  ; class  Event;  ; class  Executor;  Base Executor class. More...;  ; class  ExpectedErrorPrune",MatchSource.WIKI,doc/master/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA.html
https://root.cern/doc/master/namespaceTMVA.html:17503,Testability,log,log,17503,"_Id"", TString title=""TMVA Input Variable"", Bool_t isRegression=kFALSE, Bool_t useTMVAStyle=kTRUE);  ; void correlationscattersMultiClass (TString dataset, TString fin=""TMVA.root"", TString var=""var3"", TString dirName_=""InputVariables_Id"", TString title=""TMVA Input Variable"", Bool_t isRegression=kFALSE, Bool_t useTMVAStyle=kTRUE);  ; void correlationsMultiClass (TString dataset, TString fin=""TMVA.root"", Bool_t isRegression=kFALSE, Bool_t greyScale=kFALSE, Bool_t useTMVAStyle=kTRUE);  ; void CorrGui (TString dataset, TString fin=""TMVA.root"", TString dirName=""InputVariables_Id"", TString title=""TMVA Input Variable"", Bool_t isRegression=kFALSE);  ; void CorrGui_DeleteTBar ();  ; void CorrGuiMultiClass (TString dataset, TString fin=""TMVA.root"", TString dirName=""InputVariables_Id"", TString title=""TMVA Input Variable"", Bool_t isRegression=kFALSE);  ; void CorrGuiMultiClass_DeleteTBar ();  ; void CreateVariableTransforms (const TString &trafoDefinition, TMVA::DataSetInfo &dataInfo, TMVA::TransformationHandler &transformationHandler, TMVA::MsgLogger &log);  ; void DataLoaderCopy (TMVA::DataLoader *des, TMVA::DataLoader *src);  ; template<class T > ; DeleteFunctor_t< const T > DeleteFunctor ();  ; void deviations (TString dataset, TString fin=""TMVAReg.root"", HistType htype=kMVAType, Bool_t showTarget=kTRUE, Bool_t useTMVAStyle=kTRUE);  ; void draw_activation (TCanvas *c, Double_t cx, Double_t cy, Double_t radx, Double_t rady, Int_t whichActivation);  ; void draw_input_labels (TString dataset, Int_t nInputs, Double_t *cy, Double_t rad, Double_t layerWidth);  ; void draw_layer (TString dataset, TCanvas *c, TH2F *h, Int_t iHist, Int_t nLayers, Double_t maxWeight);  ; void draw_layer_labels (Int_t nLayers);  ; void draw_network (TString dataset, TFile *f, TDirectory *d, const TString &hName=""weights_hist"", Bool_t movieMode=kFALSE, const TString &epoch="""");  ; void draw_synapse (Double_t cx1, Double_t cy1, Double_t cx2, Double_t cy2, Double_t rad1, Double_t rad2, Double_t weightNorme",MatchSource.WIKI,doc/master/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA.html
https://root.cern/doc/master/namespaceTMVA.html:29940,Testability,log,log,29940,"ltiClass(). void TMVA::correlationsMultiClass ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . Bool_t ; isRegression = kFALSE, . Bool_t ; greyScale = kFALSE, . Bool_t ; useTMVAStyle = kTRUE . ). ◆ CorrGui(). void TMVA::CorrGui ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . TString ; dirName = ""InputVariables_Id"", . TString ; title = ""TMVA Input Variable"", . Bool_t ; isRegression = kFALSE . ). ◆ CorrGui_DeleteTBar(). void TMVA::CorrGui_DeleteTBar ; (; ). ◆ CorrGuiMultiClass(). void TMVA::CorrGuiMultiClass ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . TString ; dirName = ""InputVariables_Id"", . TString ; title = ""TMVA Input Variable"", . Bool_t ; isRegression = kFALSE . ). ◆ CorrGuiMultiClass_DeleteTBar(). void TMVA::CorrGuiMultiClass_DeleteTBar ; (; ). ◆ CreateVariableTransforms(). void TMVA::CreateVariableTransforms ; (; const TString & ; trafoDefinition, . TMVA::DataSetInfo & ; dataInfo, . TMVA::TransformationHandler & ; transformationHandler, . TMVA::MsgLogger & ; log . ). Definition at line 59 of file VariableTransform.cxx. ◆ DataLoaderCopy(). void TMVA::DataLoaderCopy ; (; TMVA::DataLoader * ; des, . TMVA::DataLoader * ; src . ). ◆ DeleteFunctor(). template<class T > . DeleteFunctor_t< const T > TMVA::DeleteFunctor ; (; ). Definition at line 78 of file DataSetFactory.h. ◆ deviations(). void TMVA::deviations ; (; TString ; dataset, . TString ; fin = ""TMVAReg.root"", . HistType ; htype = kMVAType, . Bool_t ; showTarget = kTRUE, . Bool_t ; useTMVAStyle = kTRUE . ). ◆ draw_activation(). void TMVA::draw_activation ; (; TCanvas * ; c, . Double_t ; cx, . Double_t ; cy, . Double_t ; radx, . Double_t ; rady, . Int_t ; whichActivation . ). ◆ draw_input_labels(). void TMVA::draw_input_labels ; (; TString ; dataset, . Int_t ; nInputs, . Double_t * ; cy, . Double_t ; rad, . Double_t ; layerWidth . ). ◆ draw_layer(). void TMVA::draw_layer ; (; TString ; dataset, . TCanvas * ; c, . TH2F * ; h, . Int_t ; iHist, . Int_t ; nLayers, . Double_t ; maxWeight",MatchSource.WIKI,doc/master/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA.html
https://root.cern/doc/master/namespaceTMVA.html:607,Usability,simpl,simple,607,". ROOT: TMVA Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Functions ; TMVA Namespace Reference. create variable transformations ; More... Namespaces; namespace  DNN;  ; namespace  Experimental;  ; namespace  Internal;  ; namespace  kNN;  ; namespace  TMVAGlob;  . Classes; class  AbsoluteDeviationLossFunction;  Absolute Deviation Loss Function. More...;  ; class  AbsoluteDeviationLossFunctionBDT;  Absolute Deviation BDT Loss Function. More...;  ; class  AbsValue;  ; class  BDTEventWrapper;  ; class  BinarySearchTree;  A simple Binary search tree including a volume search method. More...;  ; class  BinarySearchTreeNode;  Node for the BinarySearch or Decision Trees. More...;  ; class  BinaryTree;  Base class for BinarySearch and Decision Trees. More...;  ; class  CCPruner;  A helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) More...;  ; class  CCTreeWrapper;  ; class  ClassifierFactory;  This is the MVA factory. More...;  ; class  ClassInfo;  Class that contains all the information of a class. More...;  ; class  Config;  Singleton class for global configuration settings used by TMVA. More...;  ; class  Configurable;  ; class  ConvergenceTest;  Check for convergence. More...;  ; class  CostComplexityPruneTool;  A class to prune a decision tree using the Cost Complexity method. More...;  ; class  CrossEntropy;  Implementation of the CrossEntropy as separation criterion. More...;  ; class  CrossValidation;  Class to perform cross validation, splitting the dataloader into folds. More...;  ; class  CrossValidationFoldResult;  ; class  CrossValidationResult;  Class to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation. More...;  ; class  CvSplit;  ; class  CvSplitKFolds;  ; class  CvSplitKFoldsExpr;  ; class ",MatchSource.WIKI,doc/master/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA.html
https://root.cern/doc/master/namespaceTMVA.html:6138,Usability,simpl,simple,6138,"0;  ; class  MethodCategory;  Class for categorizing the phase space. More...;  ; class  MethodCFMlpANN;  Interface to Clermond-Ferrand artificial neural network. More...;  ; class  MethodCFMlpANN_Utils;  Implementation of Clermond-Ferrand artificial neural network. More...;  ; class  MethodCompositeBase;  Virtual base class for combining several TMVA method. More...;  ; class  MethodCrossValidation;  ; class  MethodCuts;  Multivariate optimisation of signal efficiency for given background efficiency, applying rectangular minimum and maximum requirements. More...;  ; class  MethodDL;  ; class  MethodDNN;  Deep Neural Network Implementation. More...;  ; class  MethodDT;  Analysis of Boosted Decision Trees. More...;  ; class  MethodFDA;  Function discriminant analysis (FDA). More...;  ; class  MethodFisher;  Fisher and Mahalanobis Discriminants (Linear Discriminant Analysis) More...;  ; class  MethodHMatrix;  H-Matrix method, which is implemented as a simple comparison of chi-squared estimators for signal and background, taking into account the linear correlations between the input variables. More...;  ; class  MethodInfo;  ; class  MethodKNN;  Analysis of k-nearest neighbor. More...;  ; class  MethodLD;  Linear Discriminant. More...;  ; class  MethodLikelihood;  Likelihood analysis (""non-parametric approach"") More...;  ; class  MethodMLP;  Multilayer Perceptron class built off of MethodANNBase. More...;  ; class  MethodPDEFoam;  The PDEFoam method is an extension of the PDERS method, which divides the multi-dimensional phase space in a finite number of hyper-rectangles (cells) of constant event density. More...;  ; class  MethodPDERS;  This is a generalization of the above Likelihood methods to \( N_{var} \) dimensions, where \( N_{var} \) is the number of input variables used in the MVA. More...;  ; class  MethodPyAdaBoost;  ; class  MethodPyGTB;  ; class  MethodPyKeras;  ; class  MethodPyRandomForest;  ; class  MethodPyTorch;  ; class  MethodRSNNS;  ; class  Method",MatchSource.WIKI,doc/master/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:5734,Availability,error,error,5734,"SoftmaxCrossEntropy = 'S'; };  Enum that represents objective functions for the net, i.e. More...;  ; enum class  EnumFunction { ;   ZERO = '0'; , LINEAR = 'L'; , TANH = 'T'; , RELU = 'R'; , ;   SYMMRELU = 'r'; , TANHSHIFT = 't'; , SIGMOID = 's'; , SOFTSIGN = 'S'; , ;   GAUSS = 'G'; , GAUSSCOMPLEMENT = 'C'. };  ; enum class  EnumRegularization { NONE; , L1; , L2; , L1MAX; };  ; enum class  EOptimizer { ;   kSGD = 0; , kAdam = 1; , kAdagrad = 2; , kRMSProp = 3; , ;   kAdadelta = 4. };  Enum representing the optimizer used for training. More...;  ; enum class  EOutputFunction { kIdentity = 'I'; , kSigmoid = 'S'; , kSoftmax = 'M'; };  Enum that represents output functions. More...;  ; enum class  ERegularization { kNone = '0'; , kL1 = '1'; , kL2 = '2'; };  Enum representing the regularization type applied for a given layer. More...;  ; enum  MinimizerType { fSteepest; };  < list all the minimizer types More...;  ; enum class  ModeErrorFunction { SUMOFSQUARES = 'S'; , CROSSENTROPY = 'C'; , CROSSENTROPY_MUTUALEXCLUSIVE = 'M'; };  error functions to be chosen from More...;  ; enum class  ModeOutput { FETCH; };  ; enum class  ModeOutputValues : int { DIRECT = 0x01; , SIGMOID = 0x02; , SOFTMAX = 0x04; , BATCHNORMALIZATION = 0x08; };  ; enum class  WeightInitializationStrategy { XAVIER; , TEST; , LAYERSIZE; , XAVIERUNIFORM; };  weight initialization strategies to be chosen from More...;  . Functions; template<typename Architecture_t > ; void addRegularizationGradients (typename Architecture_t::Matrix_t &A, const typename Architecture_t::Matrix_t &W, typename Architecture_t::Scalar_t weightDecay, ERegularization R);  Add the regularization gradient corresponding to weight matrix W, to the matrix A. ;  ; template<typename ItValue , typename Fnc > ; void applyFunctions (ItValue itValue, ItValue itValueEnd, Fnc fnc);  apply the activation functions ;  ; template<typename ItValue , typename Fnc , typename InvFnc , typename ItGradient > ; void applyFunctions (ItValue itValue, ItVa",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:8518,Availability,error,error,8518,"egin, ItTarget itTargetEnd);  ; template<bool HasDropOut, typename ItSource , typename ItWeight , typename ItTarget , typename ItDrop > ; void applyWeights (ItSource itSourceBegin, ItSource itSourceEnd, ItWeight itWeight, ItTarget itTargetBegin, ItTarget itTargetEnd, ItDrop itDrop);  apply weights using drop-out; for no drop out, provide (&bool = true) to itDrop such that *itDrop becomes ""true"" ;  ; template<typename ItSource , typename ItWeight , typename ItPrev > ; void applyWeightsBackwards (ItSource itCurrBegin, ItSource itCurrEnd, ItWeight itWeight, ItPrev itPrevBegin, ItPrev itPrevEnd);  ; template<bool HasDropOut, typename ItSource , typename ItWeight , typename ItPrev , typename ItDrop > ; void applyWeightsBackwards (ItSource itCurrBegin, ItSource itCurrEnd, ItWeight itWeight, ItPrev itPrevBegin, ItPrev itPrevEnd, ItDrop itDrop);  apply weights backwards (for backprop); for no drop out, provide (&bool = true) to itDrop such that *itDrop becomes ""true"" ;  ; template<typename LAYERDATA > ; void backward (LAYERDATA &prevLayerData, LAYERDATA &currLayerData);  backward application of the weights (back-propagation of the error) ;  ; template<EnumRegularization Regularization> ; double computeRegularization (double weight, const double &factorWeightDecay);  compute the regularization (L1, L2) ;  ; template<> ; double computeRegularization< EnumRegularization::L1 > (double weight, const double &factorWeightDecay);  ; template<> ; double computeRegularization< EnumRegularization::L2 > (double weight, const double &factorWeightDecay);  ; template<typename ItProbability , typename ItTruth , typename ItDelta , typename ItInvActFnc > ; double crossEntropy (ItProbability itProbabilityBegin, ItProbability itProbabilityEnd, ItTruth itTruthBegin, ItTruth, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc, double patternWeight);  cross entropy error function ;  ; void cudaError (cudaError_t code, const char *file, int line, bool abort=true);  Function to check cuda return code.",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:9242,Availability,error,error,9242,"egin, ItTarget itTargetEnd);  ; template<bool HasDropOut, typename ItSource , typename ItWeight , typename ItTarget , typename ItDrop > ; void applyWeights (ItSource itSourceBegin, ItSource itSourceEnd, ItWeight itWeight, ItTarget itTargetBegin, ItTarget itTargetEnd, ItDrop itDrop);  apply weights using drop-out; for no drop out, provide (&bool = true) to itDrop such that *itDrop becomes ""true"" ;  ; template<typename ItSource , typename ItWeight , typename ItPrev > ; void applyWeightsBackwards (ItSource itCurrBegin, ItSource itCurrEnd, ItWeight itWeight, ItPrev itPrevBegin, ItPrev itPrevEnd);  ; template<bool HasDropOut, typename ItSource , typename ItWeight , typename ItPrev , typename ItDrop > ; void applyWeightsBackwards (ItSource itCurrBegin, ItSource itCurrEnd, ItWeight itWeight, ItPrev itPrevBegin, ItPrev itPrevEnd, ItDrop itDrop);  apply weights backwards (for backprop); for no drop out, provide (&bool = true) to itDrop such that *itDrop becomes ""true"" ;  ; template<typename LAYERDATA > ; void backward (LAYERDATA &prevLayerData, LAYERDATA &currLayerData);  backward application of the weights (back-propagation of the error) ;  ; template<EnumRegularization Regularization> ; double computeRegularization (double weight, const double &factorWeightDecay);  compute the regularization (L1, L2) ;  ; template<> ; double computeRegularization< EnumRegularization::L1 > (double weight, const double &factorWeightDecay);  ; template<> ; double computeRegularization< EnumRegularization::L2 > (double weight, const double &factorWeightDecay);  ; template<typename ItProbability , typename ItTruth , typename ItDelta , typename ItInvActFnc > ; double crossEntropy (ItProbability itProbabilityBegin, ItProbability itProbabilityEnd, ItTruth itTruthBegin, ItTruth, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc, double patternWeight);  cross entropy error function ;  ; void cudaError (cudaError_t code, const char *file, int line, bool abort=true);  Function to check cuda return code.",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:12730,Availability,error,error,12730,,MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:13409,Availability,error,error,13409,,MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:14617,Availability,error,error,14617,"double studenttDouble (double distributionParameter);  ; template<typename ItOutput , typename ItTruth , typename ItDelta , typename ItInvActFnc > ; double sumOfSquares (ItOutput itOutputBegin, ItOutput itOutputEnd, ItTruth itTruthBegin, ItTruth itTruthEnd, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc itInvActFnc, double patternWeight);  ; template<typename ItOutput , typename ItTruth , typename ItDelta , typename InvFnc > ; double sumOfSquares (ItOutput itOutputBegin, ItOutput itOutputEnd, ItTruth itTruthBegin, ItTruth, ItDelta itDelta, ItDelta itDeltaEnd, InvFnc invFnc, double patternWeight);  sum of squares error function ;  ; template<typename Container , typename T > ; void uniformDouble (Container &container, T maxValue);  ; double uniformDouble (double minValue, double maxValue);  ; template<typename T > ; T uniformFromTo (T from, T to);  ; template<typename LAYERDATA > ; void update (const LAYERDATA &prevLayerData, LAYERDATA &currLayerData, double factorWeightDecay, EnumRegularization regularization);  update the node values ;  ; template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > ; void update (ItSource itSource, ItSource itSourceEnd, ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd, ItTargetGradient itTargetGradientBegin, ItGradient itGradient);  update the gradients ;  ; template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > ; void update (ItSource itSource, ItSource itSourceEnd, ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd, ItTargetGradient itTargetGradientBegin, ItGradient itGradient, ItWeight itWeight, double weightDecay);  update the gradients, using regularization ;  ; template<typename ItWeight > ; double weightDecay (double error, ItWeight itWeight, ItWeight itWeightEnd, double factorWeightDecay, EnumRegularization eRegularization);  compute the weight decay for regularization (L1 or L2) ;  .",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:21950,Availability,error,error,21950,"larization. enum class TMVA::DNN::EnumRegularization. strong . EnumeratorNONE ; L1 ; L2 ; L1MAX . Definition at line 172 of file NeuralNet.h. ◆ EOptimizer. enum class TMVA::DNN::EOptimizer. strong . Enum representing the optimizer used for training. . EnumeratorkSGD ; kAdam ; kAdagrad ; kRMSProp ; kAdadelta . Definition at line 82 of file Functions.h. ◆ EOutputFunction. enum class TMVA::DNN::EOutputFunction. strong . Enum that represents output functions. . EnumeratorkIdentity ; kSigmoid ; kSoftmax . Definition at line 45 of file Functions.h. ◆ ERegularization. enum class TMVA::DNN::ERegularization. strong . Enum representing the regularization type applied for a given layer. . EnumeratorkNone ; kL1 ; kL2 . Definition at line 64 of file Functions.h. ◆ MinimizerType. enum TMVA::DNN::MinimizerType. < list all the minimizer types . EnumeratorfSteepest SGD. . Definition at line 320 of file NeuralNet.h. ◆ ModeErrorFunction. enum class TMVA::DNN::ModeErrorFunction. strong . error functions to be chosen from . EnumeratorSUMOFSQUARES ; CROSSENTROPY ; CROSSENTROPY_MUTUALEXCLUSIVE . Definition at line 1038 of file NeuralNet.h. ◆ ModeOutput. enum class TMVA::DNN::ModeOutput. strong . EnumeratorFETCH . Definition at line 1029 of file NeuralNet.h. ◆ ModeOutputValues. enum class TMVA::DNN::ModeOutputValues : int. strong . EnumeratorDIRECT ; SIGMOID ; SOFTMAX ; BATCHNORMALIZATION . Definition at line 178 of file NeuralNet.h. ◆ WeightInitializationStrategy. enum class TMVA::DNN::WeightInitializationStrategy. strong . weight initialization strategies to be chosen from . EnumeratorXAVIER ; TEST ; LAYERSIZE ; XAVIERUNIFORM . Definition at line 1049 of file NeuralNet.h. Function Documentation. ◆ addRegularizationGradients(). template<typename Architecture_t > . void TMVA::DNN::addRegularizationGradients ; (; typename Architecture_t::Matrix_t & ; A, . const typename Architecture_t::Matrix_t & ; W, . typename Architecture_t::Scalar_t ; weightDecay, . ERegularization ; R . ). inline . Add",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:26080,Availability,error,error,26080," TMVA::DNN::applyWeightsBackwards ; (; ItSource ; itCurrBegin, . ItSource ; itCurrEnd, . ItWeight ; itWeight, . ItPrev ; itPrevBegin, . ItPrev ; itPrevEnd . ). ◆ applyWeightsBackwards() [2/2]. template<bool HasDropOut, typename ItSource , typename ItWeight , typename ItPrev , typename ItDrop > . void TMVA::DNN::applyWeightsBackwards ; (; ItSource ; itCurrBegin, . ItSource ; itCurrEnd, . ItWeight ; itWeight, . ItPrev ; itPrevBegin, . ItPrev ; itPrevEnd, . ItDrop ; itDrop . ). apply weights backwards (for backprop); for no drop out, provide (&bool = true) to itDrop such that *itDrop becomes ""true"" ; itDrop correlates with itPrev (to be in agreement with ""applyWeights"" where it correlates with itSources (same node as itTarget here in applyBackwards) ; Definition at line 118 of file NeuralNet.icc. ◆ backward(). template<typename LAYERDATA > . void TMVA::DNN::backward ; (; LAYERDATA & ; prevLayerData, . LAYERDATA & ; currLayerData . ). backward application of the weights (back-propagation of the error) ; Definition at line 572 of file NeuralNet.icc. ◆ computeRegularization(). template<EnumRegularization Regularization> . double TMVA::DNN::computeRegularization ; (; double ; weight, . const double & ; factorWeightDecay . ). inline . compute the regularization (L1, L2) ; Definition at line 209 of file NeuralNet.icc. ◆ computeRegularization< EnumRegularization::L1 >(). template<> . double TMVA::DNN::computeRegularization< EnumRegularization::L1 > ; (; double ; weight, . const double & ; factorWeightDecay . ). inline . Definition at line 219 of file NeuralNet.icc. ◆ computeRegularization< EnumRegularization::L2 >(). template<> . double TMVA::DNN::computeRegularization< EnumRegularization::L2 > ; (; double ; weight, . const double & ; factorWeightDecay . ). inline . Definition at line 226 of file NeuralNet.icc. ◆ crossEntropy(). template<typename ItProbability , typename ItTruth , typename ItDelta , typename ItInvActFnc > . double TMVA::DNN::crossEntropy ; (; ItProbability ; ",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:27277,Availability,error,error,27277,"ghtDecay . ). inline . compute the regularization (L1, L2) ; Definition at line 209 of file NeuralNet.icc. ◆ computeRegularization< EnumRegularization::L1 >(). template<> . double TMVA::DNN::computeRegularization< EnumRegularization::L1 > ; (; double ; weight, . const double & ; factorWeightDecay . ). inline . Definition at line 219 of file NeuralNet.icc. ◆ computeRegularization< EnumRegularization::L2 >(). template<> . double TMVA::DNN::computeRegularization< EnumRegularization::L2 > ; (; double ; weight, . const double & ; factorWeightDecay . ). inline . Definition at line 226 of file NeuralNet.icc. ◆ crossEntropy(). template<typename ItProbability , typename ItTruth , typename ItDelta , typename ItInvActFnc > . double TMVA::DNN::crossEntropy ; (; ItProbability ; itProbabilityBegin, . ItProbability ; itProbabilityEnd, . ItTruth ; itTruthBegin, . ItTruth ; , . ItDelta ; itDelta, . ItDelta ; itDeltaEnd, . ItInvActFnc ; , . double ; patternWeight . ). cross entropy error function ; Definition at line 412 of file NeuralNet.icc. ◆ cudaError(). void TMVA::DNN::cudaError ; (; cudaError_t ; code, . const char * ; file, . int ; line, . bool ; abort = true . ). inline . Function to check cuda return code. ; Taken from http://stackoverflow.com/questions/14038589/ ; Definition at line 198 of file CudaMatrix.h. ◆ CurandInitializationKernel(). __global__ void TMVA::DNN::CurandInitializationKernel ; (; unsigned long long ; seed, . curandState_t * ; state . ). Definition at line 26 of file CudaMatrix.cu. ◆ debugTensor(). template<typename Architecture > . auto TMVA::DNN::debugTensor ; (; const typename Architecture::Tensor_t & ; A, . const std::string ; name = ""tensor"" . ); -> void. Definition at line 582 of file GeneralLayer.h. ◆ evaluate() [1/3]. template<typename Architecture_t > . auto TMVA::DNN::evaluate ; (; ELossFunction ; f, . const typename Architecture_t::Matrix_t & ; Y, . const typename Architecture_t::Matrix_t & ; output, . const typename Architecture_t::Matrix_t & ; w",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:32809,Availability,error,error,32809,"alues TMVA::DNN::operator|= ; (; ModeOutputValues & ; lhs, . ModeOutputValues ; rhs . ). inline . Definition at line 193 of file NeuralNet.h. ◆ randomInt(). int TMVA::DNN::randomInt ; (; int ; maxValue). Definition at line 52 of file NeuralNet.cxx. ◆ regularization(). template<typename Architecture_t > . auto TMVA::DNN::regularization ; (; const typename Architecture_t::Matrix_t & ; A, . ERegularization ; R . ); -> decltype(Architecture_t::L1Regularization(A)). inline . Evaluate the regularization functional for a given weight matrix. ; Definition at line 238 of file Functions.h. ◆ softMaxCrossEntropy(). template<typename ItOutput , typename ItTruth , typename ItDelta , typename ItInvActFnc > . double TMVA::DNN::softMaxCrossEntropy ; (; ItOutput ; itProbabilityBegin, . ItOutput ; itProbabilityEnd, . ItTruth ; itTruthBegin, . ItTruth ; , . ItDelta ; itDelta, . ItDelta ; itDeltaEnd, . ItInvActFnc ; , . double ; patternWeight . ). soft-max-cross-entropy error function (for mutual exclusive cross-entropy) ; Definition at line 458 of file NeuralNet.icc. ◆ studenttDouble(). double TMVA::DNN::studenttDouble ; (; double ; distributionParameter). Definition at line 60 of file NeuralNet.cxx. ◆ sumOfSquares() [1/2]. template<typename ItOutput , typename ItTruth , typename ItDelta , typename ItInvActFnc > . double TMVA::DNN::sumOfSquares ; (; ItOutput ; itOutputBegin, . ItOutput ; itOutputEnd, . ItTruth ; itTruthBegin, . ItTruth ; itTruthEnd, . ItDelta ; itDelta, . ItDelta ; itDeltaEnd, . ItInvActFnc ; itInvActFnc, . double ; patternWeight . ). ◆ sumOfSquares() [2/2]. template<typename ItOutput , typename ItTruth , typename ItDelta , typename InvFnc > . double TMVA::DNN::sumOfSquares ; (; ItOutput ; itOutputBegin, . ItOutput ; itOutputEnd, . ItTruth ; itTruthBegin, . ItTruth ; , . ItDelta ; itDelta, . ItDelta ; itDeltaEnd, . InvFnc ; invFnc, . double ; patternWeight . ). sum of squares error function ; Definition at line 382 of file NeuralNet.icc. ◆ uniformDouble() [1/2]. templa",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:33751,Availability,error,error,33751,"rnWeight . ). soft-max-cross-entropy error function (for mutual exclusive cross-entropy) ; Definition at line 458 of file NeuralNet.icc. ◆ studenttDouble(). double TMVA::DNN::studenttDouble ; (; double ; distributionParameter). Definition at line 60 of file NeuralNet.cxx. ◆ sumOfSquares() [1/2]. template<typename ItOutput , typename ItTruth , typename ItDelta , typename ItInvActFnc > . double TMVA::DNN::sumOfSquares ; (; ItOutput ; itOutputBegin, . ItOutput ; itOutputEnd, . ItTruth ; itTruthBegin, . ItTruth ; itTruthEnd, . ItDelta ; itDelta, . ItDelta ; itDeltaEnd, . ItInvActFnc ; itInvActFnc, . double ; patternWeight . ). ◆ sumOfSquares() [2/2]. template<typename ItOutput , typename ItTruth , typename ItDelta , typename InvFnc > . double TMVA::DNN::sumOfSquares ; (; ItOutput ; itOutputBegin, . ItOutput ; itOutputEnd, . ItTruth ; itTruthBegin, . ItTruth ; , . ItDelta ; itDelta, . ItDelta ; itDeltaEnd, . InvFnc ; invFnc, . double ; patternWeight . ). sum of squares error function ; Definition at line 382 of file NeuralNet.icc. ◆ uniformDouble() [1/2]. template<typename Container , typename T > . void TMVA::DNN::uniformDouble ; (; Container & ; container, . T ; maxValue . ). Definition at line 42 of file NeuralNet.icc. ◆ uniformDouble() [2/2]. double TMVA::DNN::uniformDouble ; (; double ; minValue, . double ; maxValue . ). Definition at line 43 of file NeuralNet.cxx. ◆ uniformFromTo(). template<typename T > . T TMVA::DNN::uniformFromTo ; (; T ; from, . T ; to . ). Definition at line 34 of file NeuralNet.icc. ◆ update() [1/3]. template<typename LAYERDATA > . void TMVA::DNN::update ; (; const LAYERDATA & ; prevLayerData, . LAYERDATA & ; currLayerData, . double ; factorWeightDecay, . EnumRegularization ; regularization . ). update the node values ; Definition at line 600 of file NeuralNet.icc. ◆ update() [2/3]. template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; ",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:35606,Availability,error,error,35606,"icc. ◆ update() [2/3]. template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient . ). update the gradients ; Definition at line 183 of file NeuralNet.icc. ◆ update() [3/3]. template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient, . ItWeight ; itWeight, . double ; weightDecay . ). update the gradients, using regularization ; Definition at line 237 of file NeuralNet.icc. ◆ weightDecay(). template<typename ItWeight > . double TMVA::DNN::weightDecay ; (; double ; error, . ItWeight ; itWeight, . ItWeight ; itWeightEnd, . double ; factorWeightDecay, . EnumRegularization ; eRegularization . ). compute the weight decay for regularization (L1 or L2) ; Definition at line 498 of file NeuralNet.icc. Variable Documentation. ◆ Gauss. std::shared_ptr< std::function< double(double)> > TMVA::DNN::Gauss = std::make_shared<std::function<double(double)>> ([](double value){ const double s = 6.0; return exp (-std::pow(value*s,2.0)); }). Definition at line 12 of file NeuralNet.cxx. ◆ GaussComplement. std::shared_ptr< std::function< double(double)> > TMVA::DNN::GaussComplement = std::make_shared<std::function<double(double)>> ([](double value){ const double s = 6.0; return 1.0 - exp (-std::pow(value*s,2.0)); }). Definition at line 13 of file NeuralNet.cxx. ◆ InvGauss. std::shared_ptr< std::function< double(double)> > TMVA::DNN::InvGauss = std::make_shared<std::function<double(double)>> ([](double value){ const double s = 6.0; return -2.0 * value ",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:13688,Deployability,update,update,13688,"atternWeight);  soft-max-cross-entropy error function (for mutual exclusive cross-entropy) ;  ; double studenttDouble (double distributionParameter);  ; template<typename ItOutput , typename ItTruth , typename ItDelta , typename ItInvActFnc > ; double sumOfSquares (ItOutput itOutputBegin, ItOutput itOutputEnd, ItTruth itTruthBegin, ItTruth itTruthEnd, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc itInvActFnc, double patternWeight);  ; template<typename ItOutput , typename ItTruth , typename ItDelta , typename InvFnc > ; double sumOfSquares (ItOutput itOutputBegin, ItOutput itOutputEnd, ItTruth itTruthBegin, ItTruth, ItDelta itDelta, ItDelta itDeltaEnd, InvFnc invFnc, double patternWeight);  sum of squares error function ;  ; template<typename Container , typename T > ; void uniformDouble (Container &container, T maxValue);  ; double uniformDouble (double minValue, double maxValue);  ; template<typename T > ; T uniformFromTo (T from, T to);  ; template<typename LAYERDATA > ; void update (const LAYERDATA &prevLayerData, LAYERDATA &currLayerData, double factorWeightDecay, EnumRegularization regularization);  update the node values ;  ; template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > ; void update (ItSource itSource, ItSource itSourceEnd, ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd, ItTargetGradient itTargetGradientBegin, ItGradient itGradient);  update the gradients ;  ; template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > ; void update (ItSource itSource, ItSource itSourceEnd, ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd, ItTargetGradient itTargetGradientBegin, ItGradient itGradient, ItWeight itWeight, double weightDecay);  update the gradients, using regularization ;  ; template<typename ItWeight > ; double weightDecay (double error, ItWeight itWeight, ItWeight itWeightEnd, double factorWeightDecay, E",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:13817,Deployability,update,update,13817,"double studenttDouble (double distributionParameter);  ; template<typename ItOutput , typename ItTruth , typename ItDelta , typename ItInvActFnc > ; double sumOfSquares (ItOutput itOutputBegin, ItOutput itOutputEnd, ItTruth itTruthBegin, ItTruth itTruthEnd, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc itInvActFnc, double patternWeight);  ; template<typename ItOutput , typename ItTruth , typename ItDelta , typename InvFnc > ; double sumOfSquares (ItOutput itOutputBegin, ItOutput itOutputEnd, ItTruth itTruthBegin, ItTruth, ItDelta itDelta, ItDelta itDeltaEnd, InvFnc invFnc, double patternWeight);  sum of squares error function ;  ; template<typename Container , typename T > ; void uniformDouble (Container &container, T maxValue);  ; double uniformDouble (double minValue, double maxValue);  ; template<typename T > ; T uniformFromTo (T from, T to);  ; template<typename LAYERDATA > ; void update (const LAYERDATA &prevLayerData, LAYERDATA &currLayerData, double factorWeightDecay, EnumRegularization regularization);  update the node values ;  ; template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > ; void update (ItSource itSource, ItSource itSourceEnd, ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd, ItTargetGradient itTargetGradientBegin, ItGradient itGradient);  update the gradients ;  ; template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > ; void update (ItSource itSource, ItSource itSourceEnd, ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd, ItTargetGradient itTargetGradientBegin, ItGradient itGradient, ItWeight itWeight, double weightDecay);  update the gradients, using regularization ;  ; template<typename ItWeight > ; double weightDecay (double error, ItWeight itWeight, ItWeight itWeightEnd, double factorWeightDecay, EnumRegularization eRegularization);  compute the weight decay for regularization (L1 or L2) ;  .",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:13950,Deployability,update,update,13950,"double studenttDouble (double distributionParameter);  ; template<typename ItOutput , typename ItTruth , typename ItDelta , typename ItInvActFnc > ; double sumOfSquares (ItOutput itOutputBegin, ItOutput itOutputEnd, ItTruth itTruthBegin, ItTruth itTruthEnd, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc itInvActFnc, double patternWeight);  ; template<typename ItOutput , typename ItTruth , typename ItDelta , typename InvFnc > ; double sumOfSquares (ItOutput itOutputBegin, ItOutput itOutputEnd, ItTruth itTruthBegin, ItTruth, ItDelta itDelta, ItDelta itDeltaEnd, InvFnc invFnc, double patternWeight);  sum of squares error function ;  ; template<typename Container , typename T > ; void uniformDouble (Container &container, T maxValue);  ; double uniformDouble (double minValue, double maxValue);  ; template<typename T > ; T uniformFromTo (T from, T to);  ; template<typename LAYERDATA > ; void update (const LAYERDATA &prevLayerData, LAYERDATA &currLayerData, double factorWeightDecay, EnumRegularization regularization);  update the node values ;  ; template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > ; void update (ItSource itSource, ItSource itSourceEnd, ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd, ItTargetGradient itTargetGradientBegin, ItGradient itGradient);  update the gradients ;  ; template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > ; void update (ItSource itSource, ItSource itSourceEnd, ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd, ItTargetGradient itTargetGradientBegin, ItGradient itGradient, ItWeight itWeight, double weightDecay);  update the gradients, using regularization ;  ; template<typename ItWeight > ; double weightDecay (double error, ItWeight itWeight, ItWeight itWeightEnd, double factorWeightDecay, EnumRegularization eRegularization);  compute the weight decay for regularization (L1 or L2) ;  .",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:14118,Deployability,update,update,14118,"double studenttDouble (double distributionParameter);  ; template<typename ItOutput , typename ItTruth , typename ItDelta , typename ItInvActFnc > ; double sumOfSquares (ItOutput itOutputBegin, ItOutput itOutputEnd, ItTruth itTruthBegin, ItTruth itTruthEnd, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc itInvActFnc, double patternWeight);  ; template<typename ItOutput , typename ItTruth , typename ItDelta , typename InvFnc > ; double sumOfSquares (ItOutput itOutputBegin, ItOutput itOutputEnd, ItTruth itTruthBegin, ItTruth, ItDelta itDelta, ItDelta itDeltaEnd, InvFnc invFnc, double patternWeight);  sum of squares error function ;  ; template<typename Container , typename T > ; void uniformDouble (Container &container, T maxValue);  ; double uniformDouble (double minValue, double maxValue);  ; template<typename T > ; T uniformFromTo (T from, T to);  ; template<typename LAYERDATA > ; void update (const LAYERDATA &prevLayerData, LAYERDATA &currLayerData, double factorWeightDecay, EnumRegularization regularization);  update the node values ;  ; template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > ; void update (ItSource itSource, ItSource itSourceEnd, ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd, ItTargetGradient itTargetGradientBegin, ItGradient itGradient);  update the gradients ;  ; template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > ; void update (ItSource itSource, ItSource itSourceEnd, ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd, ItTargetGradient itTargetGradientBegin, ItGradient itGradient, ItWeight itWeight, double weightDecay);  update the gradients, using regularization ;  ; template<typename ItWeight > ; double weightDecay (double error, ItWeight itWeight, ItWeight itWeightEnd, double factorWeightDecay, EnumRegularization eRegularization);  compute the weight decay for regularization (L1 or L2) ;  .",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:14304,Deployability,update,update,14304,"double studenttDouble (double distributionParameter);  ; template<typename ItOutput , typename ItTruth , typename ItDelta , typename ItInvActFnc > ; double sumOfSquares (ItOutput itOutputBegin, ItOutput itOutputEnd, ItTruth itTruthBegin, ItTruth itTruthEnd, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc itInvActFnc, double patternWeight);  ; template<typename ItOutput , typename ItTruth , typename ItDelta , typename InvFnc > ; double sumOfSquares (ItOutput itOutputBegin, ItOutput itOutputEnd, ItTruth itTruthBegin, ItTruth, ItDelta itDelta, ItDelta itDeltaEnd, InvFnc invFnc, double patternWeight);  sum of squares error function ;  ; template<typename Container , typename T > ; void uniformDouble (Container &container, T maxValue);  ; double uniformDouble (double minValue, double maxValue);  ; template<typename T > ; T uniformFromTo (T from, T to);  ; template<typename LAYERDATA > ; void update (const LAYERDATA &prevLayerData, LAYERDATA &currLayerData, double factorWeightDecay, EnumRegularization regularization);  update the node values ;  ; template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > ; void update (ItSource itSource, ItSource itSourceEnd, ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd, ItTargetGradient itTargetGradientBegin, ItGradient itGradient);  update the gradients ;  ; template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > ; void update (ItSource itSource, ItSource itSourceEnd, ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd, ItTargetGradient itTargetGradientBegin, ItGradient itGradient, ItWeight itWeight, double weightDecay);  update the gradients, using regularization ;  ; template<typename ItWeight > ; double weightDecay (double error, ItWeight itWeight, ItWeight itWeightEnd, double factorWeightDecay, EnumRegularization eRegularization);  compute the weight decay for regularization (L1 or L2) ;  .",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:14511,Deployability,update,update,14511,"double studenttDouble (double distributionParameter);  ; template<typename ItOutput , typename ItTruth , typename ItDelta , typename ItInvActFnc > ; double sumOfSquares (ItOutput itOutputBegin, ItOutput itOutputEnd, ItTruth itTruthBegin, ItTruth itTruthEnd, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc itInvActFnc, double patternWeight);  ; template<typename ItOutput , typename ItTruth , typename ItDelta , typename InvFnc > ; double sumOfSquares (ItOutput itOutputBegin, ItOutput itOutputEnd, ItTruth itTruthBegin, ItTruth, ItDelta itDelta, ItDelta itDeltaEnd, InvFnc invFnc, double patternWeight);  sum of squares error function ;  ; template<typename Container , typename T > ; void uniformDouble (Container &container, T maxValue);  ; double uniformDouble (double minValue, double maxValue);  ; template<typename T > ; T uniformFromTo (T from, T to);  ; template<typename LAYERDATA > ; void update (const LAYERDATA &prevLayerData, LAYERDATA &currLayerData, double factorWeightDecay, EnumRegularization regularization);  update the node values ;  ; template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > ; void update (ItSource itSource, ItSource itSourceEnd, ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd, ItTargetGradient itTargetGradientBegin, ItGradient itGradient);  update the gradients ;  ; template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > ; void update (ItSource itSource, ItSource itSourceEnd, ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd, ItTargetGradient itTargetGradientBegin, ItGradient itGradient, ItWeight itWeight, double weightDecay);  update the gradients, using regularization ;  ; template<typename ItWeight > ; double weightDecay (double error, ItWeight itWeight, ItWeight itWeightEnd, double factorWeightDecay, EnumRegularization eRegularization);  compute the weight decay for regularization (L1 or L2) ;  .",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:34306,Deployability,update,update,34306,"tDelta, . ItDelta ; itDeltaEnd, . ItInvActFnc ; itInvActFnc, . double ; patternWeight . ). ◆ sumOfSquares() [2/2]. template<typename ItOutput , typename ItTruth , typename ItDelta , typename InvFnc > . double TMVA::DNN::sumOfSquares ; (; ItOutput ; itOutputBegin, . ItOutput ; itOutputEnd, . ItTruth ; itTruthBegin, . ItTruth ; , . ItDelta ; itDelta, . ItDelta ; itDeltaEnd, . InvFnc ; invFnc, . double ; patternWeight . ). sum of squares error function ; Definition at line 382 of file NeuralNet.icc. ◆ uniformDouble() [1/2]. template<typename Container , typename T > . void TMVA::DNN::uniformDouble ; (; Container & ; container, . T ; maxValue . ). Definition at line 42 of file NeuralNet.icc. ◆ uniformDouble() [2/2]. double TMVA::DNN::uniformDouble ; (; double ; minValue, . double ; maxValue . ). Definition at line 43 of file NeuralNet.cxx. ◆ uniformFromTo(). template<typename T > . T TMVA::DNN::uniformFromTo ; (; T ; from, . T ; to . ). Definition at line 34 of file NeuralNet.icc. ◆ update() [1/3]. template<typename LAYERDATA > . void TMVA::DNN::update ; (; const LAYERDATA & ; prevLayerData, . LAYERDATA & ; currLayerData, . double ; factorWeightDecay, . EnumRegularization ; regularization . ). update the node values ; Definition at line 600 of file NeuralNet.icc. ◆ update() [2/3]. template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient . ). update the gradients ; Definition at line 183 of file NeuralNet.icc. ◆ update() [3/3]. template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetG",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:34370,Deployability,update,update,34370,"atternWeight . ). ◆ sumOfSquares() [2/2]. template<typename ItOutput , typename ItTruth , typename ItDelta , typename InvFnc > . double TMVA::DNN::sumOfSquares ; (; ItOutput ; itOutputBegin, . ItOutput ; itOutputEnd, . ItTruth ; itTruthBegin, . ItTruth ; , . ItDelta ; itDelta, . ItDelta ; itDeltaEnd, . InvFnc ; invFnc, . double ; patternWeight . ). sum of squares error function ; Definition at line 382 of file NeuralNet.icc. ◆ uniformDouble() [1/2]. template<typename Container , typename T > . void TMVA::DNN::uniformDouble ; (; Container & ; container, . T ; maxValue . ). Definition at line 42 of file NeuralNet.icc. ◆ uniformDouble() [2/2]. double TMVA::DNN::uniformDouble ; (; double ; minValue, . double ; maxValue . ). Definition at line 43 of file NeuralNet.cxx. ◆ uniformFromTo(). template<typename T > . T TMVA::DNN::uniformFromTo ; (; T ; from, . T ; to . ). Definition at line 34 of file NeuralNet.icc. ◆ update() [1/3]. template<typename LAYERDATA > . void TMVA::DNN::update ; (; const LAYERDATA & ; prevLayerData, . LAYERDATA & ; currLayerData, . double ; factorWeightDecay, . EnumRegularization ; regularization . ). update the node values ; Definition at line 600 of file NeuralNet.icc. ◆ update() [2/3]. template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient . ). update the gradients ; Definition at line 183 of file NeuralNet.icc. ◆ update() [3/3]. template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient, . ItWeight ; i",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:34521,Deployability,update,update,34521,"utput ; itOutputBegin, . ItOutput ; itOutputEnd, . ItTruth ; itTruthBegin, . ItTruth ; , . ItDelta ; itDelta, . ItDelta ; itDeltaEnd, . InvFnc ; invFnc, . double ; patternWeight . ). sum of squares error function ; Definition at line 382 of file NeuralNet.icc. ◆ uniformDouble() [1/2]. template<typename Container , typename T > . void TMVA::DNN::uniformDouble ; (; Container & ; container, . T ; maxValue . ). Definition at line 42 of file NeuralNet.icc. ◆ uniformDouble() [2/2]. double TMVA::DNN::uniformDouble ; (; double ; minValue, . double ; maxValue . ). Definition at line 43 of file NeuralNet.cxx. ◆ uniformFromTo(). template<typename T > . T TMVA::DNN::uniformFromTo ; (; T ; from, . T ; to . ). Definition at line 34 of file NeuralNet.icc. ◆ update() [1/3]. template<typename LAYERDATA > . void TMVA::DNN::update ; (; const LAYERDATA & ; prevLayerData, . LAYERDATA & ; currLayerData, . double ; factorWeightDecay, . EnumRegularization ; regularization . ). update the node values ; Definition at line 600 of file NeuralNet.icc. ◆ update() [2/3]. template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient . ). update the gradients ; Definition at line 183 of file NeuralNet.icc. ◆ update() [3/3]. template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient, . ItWeight ; itWeight, . double ; weightDecay . ). update the gradients, using regularization ; Definition at line 237 of file NeuralNet.icc. ◆ weightDecay(). template<typename ItWei",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:34594,Deployability,update,update,34594,", . ItTruth ; itTruthBegin, . ItTruth ; , . ItDelta ; itDelta, . ItDelta ; itDeltaEnd, . InvFnc ; invFnc, . double ; patternWeight . ). sum of squares error function ; Definition at line 382 of file NeuralNet.icc. ◆ uniformDouble() [1/2]. template<typename Container , typename T > . void TMVA::DNN::uniformDouble ; (; Container & ; container, . T ; maxValue . ). Definition at line 42 of file NeuralNet.icc. ◆ uniformDouble() [2/2]. double TMVA::DNN::uniformDouble ; (; double ; minValue, . double ; maxValue . ). Definition at line 43 of file NeuralNet.cxx. ◆ uniformFromTo(). template<typename T > . T TMVA::DNN::uniformFromTo ; (; T ; from, . T ; to . ). Definition at line 34 of file NeuralNet.icc. ◆ update() [1/3]. template<typename LAYERDATA > . void TMVA::DNN::update ; (; const LAYERDATA & ; prevLayerData, . LAYERDATA & ; currLayerData, . double ; factorWeightDecay, . EnumRegularization ; regularization . ). update the node values ; Definition at line 600 of file NeuralNet.icc. ◆ update() [2/3]. template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient . ). update the gradients ; Definition at line 183 of file NeuralNet.icc. ◆ update() [3/3]. template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient, . ItWeight ; itWeight, . double ; weightDecay . ). update the gradients, using regularization ; Definition at line 237 of file NeuralNet.icc. ◆ weightDecay(). template<typename ItWeight > . double TMVA::DNN::weightDecay ; (; dou",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:34726,Deployability,update,update,34726,". sum of squares error function ; Definition at line 382 of file NeuralNet.icc. ◆ uniformDouble() [1/2]. template<typename Container , typename T > . void TMVA::DNN::uniformDouble ; (; Container & ; container, . T ; maxValue . ). Definition at line 42 of file NeuralNet.icc. ◆ uniformDouble() [2/2]. double TMVA::DNN::uniformDouble ; (; double ; minValue, . double ; maxValue . ). Definition at line 43 of file NeuralNet.cxx. ◆ uniformFromTo(). template<typename T > . T TMVA::DNN::uniformFromTo ; (; T ; from, . T ; to . ). Definition at line 34 of file NeuralNet.icc. ◆ update() [1/3]. template<typename LAYERDATA > . void TMVA::DNN::update ; (; const LAYERDATA & ; prevLayerData, . LAYERDATA & ; currLayerData, . double ; factorWeightDecay, . EnumRegularization ; regularization . ). update the node values ; Definition at line 600 of file NeuralNet.icc. ◆ update() [2/3]. template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient . ). update the gradients ; Definition at line 183 of file NeuralNet.icc. ◆ update() [3/3]. template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient, . ItWeight ; itWeight, . double ; weightDecay . ). update the gradients, using regularization ; Definition at line 237 of file NeuralNet.icc. ◆ weightDecay(). template<typename ItWeight > . double TMVA::DNN::weightDecay ; (; double ; error, . ItWeight ; itWeight, . ItWeight ; itWeightEnd, . double ; factorWeightDecay, . EnumRegularization ; eRegularization . ).",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:34922,Deployability,update,update,34922,"Value . ). Definition at line 42 of file NeuralNet.icc. ◆ uniformDouble() [2/2]. double TMVA::DNN::uniformDouble ; (; double ; minValue, . double ; maxValue . ). Definition at line 43 of file NeuralNet.cxx. ◆ uniformFromTo(). template<typename T > . T TMVA::DNN::uniformFromTo ; (; T ; from, . T ; to . ). Definition at line 34 of file NeuralNet.icc. ◆ update() [1/3]. template<typename LAYERDATA > . void TMVA::DNN::update ; (; const LAYERDATA & ; prevLayerData, . LAYERDATA & ; currLayerData, . double ; factorWeightDecay, . EnumRegularization ; regularization . ). update the node values ; Definition at line 600 of file NeuralNet.icc. ◆ update() [2/3]. template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient . ). update the gradients ; Definition at line 183 of file NeuralNet.icc. ◆ update() [3/3]. template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient, . ItWeight ; itWeight, . double ; weightDecay . ). update the gradients, using regularization ; Definition at line 237 of file NeuralNet.icc. ◆ weightDecay(). template<typename ItWeight > . double TMVA::DNN::weightDecay ; (; double ; error, . ItWeight ; itWeight, . ItWeight ; itWeightEnd, . double ; factorWeightDecay, . EnumRegularization ; eRegularization . ). compute the weight decay for regularization (L1 or L2) ; Definition at line 498 of file NeuralNet.icc. Variable Documentation. ◆ Gauss. std::shared_ptr< std::function< double(double)> > TMVA::DNN::Gauss = std::make_sha",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:34993,Deployability,update,update,34993,"lNet.icc. ◆ uniformDouble() [2/2]. double TMVA::DNN::uniformDouble ; (; double ; minValue, . double ; maxValue . ). Definition at line 43 of file NeuralNet.cxx. ◆ uniformFromTo(). template<typename T > . T TMVA::DNN::uniformFromTo ; (; T ; from, . T ; to . ). Definition at line 34 of file NeuralNet.icc. ◆ update() [1/3]. template<typename LAYERDATA > . void TMVA::DNN::update ; (; const LAYERDATA & ; prevLayerData, . LAYERDATA & ; currLayerData, . double ; factorWeightDecay, . EnumRegularization ; regularization . ). update the node values ; Definition at line 600 of file NeuralNet.icc. ◆ update() [2/3]. template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient . ). update the gradients ; Definition at line 183 of file NeuralNet.icc. ◆ update() [3/3]. template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient, . ItWeight ; itWeight, . double ; weightDecay . ). update the gradients, using regularization ; Definition at line 237 of file NeuralNet.icc. ◆ weightDecay(). template<typename ItWeight > . double TMVA::DNN::weightDecay ; (; double ; error, . ItWeight ; itWeight, . ItWeight ; itWeightEnd, . double ; factorWeightDecay, . EnumRegularization ; eRegularization . ). compute the weight decay for regularization (L1 or L2) ; Definition at line 498 of file NeuralNet.icc. Variable Documentation. ◆ Gauss. std::shared_ptr< std::function< double(double)> > TMVA::DNN::Gauss = std::make_shared<std::function<double(double)>> ([](double",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:35180,Deployability,update,update,35180,"typename T > . T TMVA::DNN::uniformFromTo ; (; T ; from, . T ; to . ). Definition at line 34 of file NeuralNet.icc. ◆ update() [1/3]. template<typename LAYERDATA > . void TMVA::DNN::update ; (; const LAYERDATA & ; prevLayerData, . LAYERDATA & ; currLayerData, . double ; factorWeightDecay, . EnumRegularization ; regularization . ). update the node values ; Definition at line 600 of file NeuralNet.icc. ◆ update() [2/3]. template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient . ). update the gradients ; Definition at line 183 of file NeuralNet.icc. ◆ update() [3/3]. template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient, . ItWeight ; itWeight, . double ; weightDecay . ). update the gradients, using regularization ; Definition at line 237 of file NeuralNet.icc. ◆ weightDecay(). template<typename ItWeight > . double TMVA::DNN::weightDecay ; (; double ; error, . ItWeight ; itWeight, . ItWeight ; itWeightEnd, . double ; factorWeightDecay, . EnumRegularization ; eRegularization . ). compute the weight decay for regularization (L1 or L2) ; Definition at line 498 of file NeuralNet.icc. Variable Documentation. ◆ Gauss. std::shared_ptr< std::function< double(double)> > TMVA::DNN::Gauss = std::make_shared<std::function<double(double)>> ([](double value){ const double s = 6.0; return exp (-std::pow(value*s,2.0)); }). Definition at line 12 of file NeuralNet.cxx. ◆ GaussComplement. std::shared_ptr< std::function< double(double)> > TMVA",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:35423,Deployability,update,update,35423,"WeightDecay, . EnumRegularization ; regularization . ). update the node values ; Definition at line 600 of file NeuralNet.icc. ◆ update() [2/3]. template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient . ). update the gradients ; Definition at line 183 of file NeuralNet.icc. ◆ update() [3/3]. template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient, . ItWeight ; itWeight, . double ; weightDecay . ). update the gradients, using regularization ; Definition at line 237 of file NeuralNet.icc. ◆ weightDecay(). template<typename ItWeight > . double TMVA::DNN::weightDecay ; (; double ; error, . ItWeight ; itWeight, . ItWeight ; itWeightEnd, . double ; factorWeightDecay, . EnumRegularization ; eRegularization . ). compute the weight decay for regularization (L1 or L2) ; Definition at line 498 of file NeuralNet.icc. Variable Documentation. ◆ Gauss. std::shared_ptr< std::function< double(double)> > TMVA::DNN::Gauss = std::make_shared<std::function<double(double)>> ([](double value){ const double s = 6.0; return exp (-std::pow(value*s,2.0)); }). Definition at line 12 of file NeuralNet.cxx. ◆ GaussComplement. std::shared_ptr< std::function< double(double)> > TMVA::DNN::GaussComplement = std::make_shared<std::function<double(double)>> ([](double value){ const double s = 6.0; return 1.0 - exp (-std::pow(value*s,2.0)); }). Definition at line 13 of file NeuralNet.cxx. ◆ InvGauss. std::shared_ptr< std::function< double(double)> > TMVA::DNN",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:3196,Modifiability,layers,layers,3196,"daDeviceBuffer;  TCudaDeviceBuffer. More...;  ; class  TCudaDeviceReference;  TCudaDeviceReference. More...;  ; class  TCudaHostBuffer;  TCudaHostBuffer. More...;  ; class  TCudaMatrix;  TCudaMatrix Class. More...;  ; class  TCudaTensor;  TCudaTensor Class. More...;  ; class  TDataLoader;  TDataLoader. More...;  ; class  TDataLoader< AData, TReference< AReal > >;  ; class  TDeepNet;  Generic Deep Neural Network class. More...;  ; class  TDenseLayer;  Generic layer class. More...;  ; struct  TDescriptors;  ; class  TDevice;  TDevice. More...;  ; class  TDLGradientDescent;  ; struct  TDNNGenDescriptors;  ; class  TGradientDescent;  ; class  TLayer;  Generic layer class. More...;  ; class  TNet;  Generic neural network class. More...;  ; class  TReference;  The reference architecture class. More...;  ; class  TReshapeLayer;  ; class  TRMSProp;  RMSProp Optimizer class. More...;  ; class  TSGD;  Stochastic Batch Gradient Descent Optimizer class. More...;  ; class  TSharedLayer;  Layer class width shared weight and bias layers. More...;  ; class  TTensorBatch;  TTensorBatch. More...;  ; class  TTensorBatchIterator;  TTensorBatchIterator. More...;  ; class  TTensorDataLoader;  TTensorDataLoader. More...;  ; class  TTensorDataLoader< AData, TReference< AReal > >;  ; struct  TWorkspace;  ; class  VGeneralLayer;  Generic General Layer class. More...;  ; class  VOptimizer;  Generic Optimizer class. More...;  . Typedefs; typedef std::vector< char > DropContainer;  ; using IndexIterator_t = typename std::vector< size_t >::iterator;  ; using MatrixInput_t = std::tuple< const TMatrixT< Double_t > &, const TMatrixT< Double_t > &, const TMatrixT< Double_t > & >;  ; using MemoryLayout = TMVA::Experimental::MemoryLayout;  ; typedef std::tuple< Settings &, Batch &, DropContainer & > pass_through_type;  ; using TensorInput = std::tuple< const std::vector< TMatrixT< Double_t > > &, const TMatrixT< Double_t > &, const TMatrixT< Double_t > & >;  ; using TMVAInput_t = std::tuple< const std:",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:5205,Performance,optimiz,optimizer,5205," & >;  . Enumerations; enum class  EActivationFunction { ;   kIdentity = 0; , kRelu = 1; , kSigmoid = 2; , kTanh = 3; , ;   kSymmRelu = 4; , kSoftSign = 5; , kGauss = 6; , kFastTanh = 7. };  Enum that represents layer activation functions. More...;  ; enum class  EInitialization { ;   kGauss = 'G'; , kUniform = 'U'; , kIdentity = 'I'; , kZero = 'Z'; , ;   kGlorotNormal = 'X'; , kGlorotUniform = 'F'. };  ; enum class  ELossFunction { kCrossEntropy = 'C'; , kMeanSquaredError = 'R'; , kSoftmaxCrossEntropy = 'S'; };  Enum that represents objective functions for the net, i.e. More...;  ; enum class  EnumFunction { ;   ZERO = '0'; , LINEAR = 'L'; , TANH = 'T'; , RELU = 'R'; , ;   SYMMRELU = 'r'; , TANHSHIFT = 't'; , SIGMOID = 's'; , SOFTSIGN = 'S'; , ;   GAUSS = 'G'; , GAUSSCOMPLEMENT = 'C'. };  ; enum class  EnumRegularization { NONE; , L1; , L2; , L1MAX; };  ; enum class  EOptimizer { ;   kSGD = 0; , kAdam = 1; , kAdagrad = 2; , kRMSProp = 3; , ;   kAdadelta = 4. };  Enum representing the optimizer used for training. More...;  ; enum class  EOutputFunction { kIdentity = 'I'; , kSigmoid = 'S'; , kSoftmax = 'M'; };  Enum that represents output functions. More...;  ; enum class  ERegularization { kNone = '0'; , kL1 = '1'; , kL2 = '2'; };  Enum representing the regularization type applied for a given layer. More...;  ; enum  MinimizerType { fSteepest; };  < list all the minimizer types More...;  ; enum class  ModeErrorFunction { SUMOFSQUARES = 'S'; , CROSSENTROPY = 'C'; , CROSSENTROPY_MUTUALEXCLUSIVE = 'M'; };  error functions to be chosen from More...;  ; enum class  ModeOutput { FETCH; };  ; enum class  ModeOutputValues : int { DIRECT = 0x01; , SIGMOID = 0x02; , SOFTMAX = 0x04; , BATCHNORMALIZATION = 0x08; };  ; enum class  WeightInitializationStrategy { XAVIER; , TEST; , LAYERSIZE; , XAVIERUNIFORM; };  weight initialization strategies to be chosen from More...;  . Functions; template<typename Architecture_t > ; void addRegularizationGradients (typename Architecture_t::Mat",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:21188,Performance,optimiz,optimizer,21188,". strong . EnumeratorkGauss ; kUniform ; kIdentity ; kZero ; kGlorotNormal ; kGlorotUniform . Definition at line 72 of file Functions.h. ◆ ELossFunction. enum class TMVA::DNN::ELossFunction. strong . Enum that represents objective functions for the net, i.e. ; functions that take the output from the last layer in the net together with the truths and return the objective function values that is to be minimized in the training process. . EnumeratorkCrossEntropy ; kMeanSquaredError ; kSoftmaxCrossEntropy . Definition at line 56 of file Functions.h. ◆ EnumFunction. enum class TMVA::DNN::EnumFunction. strong . EnumeratorZERO ; LINEAR ; TANH ; RELU ; SYMMRELU ; TANHSHIFT ; SIGMOID ; SOFTSIGN ; GAUSS ; GAUSSCOMPLEMENT . Definition at line 156 of file NeuralNet.h. ◆ EnumRegularization. enum class TMVA::DNN::EnumRegularization. strong . EnumeratorNONE ; L1 ; L2 ; L1MAX . Definition at line 172 of file NeuralNet.h. ◆ EOptimizer. enum class TMVA::DNN::EOptimizer. strong . Enum representing the optimizer used for training. . EnumeratorkSGD ; kAdam ; kAdagrad ; kRMSProp ; kAdadelta . Definition at line 82 of file Functions.h. ◆ EOutputFunction. enum class TMVA::DNN::EOutputFunction. strong . Enum that represents output functions. . EnumeratorkIdentity ; kSigmoid ; kSoftmax . Definition at line 45 of file Functions.h. ◆ ERegularization. enum class TMVA::DNN::ERegularization. strong . Enum representing the regularization type applied for a given layer. . EnumeratorkNone ; kL1 ; kL2 . Definition at line 64 of file Functions.h. ◆ MinimizerType. enum TMVA::DNN::MinimizerType. < list all the minimizer types . EnumeratorfSteepest SGD. . Definition at line 320 of file NeuralNet.h. ◆ ModeErrorFunction. enum class TMVA::DNN::ModeErrorFunction. strong . error functions to be chosen from . EnumeratorSUMOFSQUARES ; CROSSENTROPY ; CROSSENTROPY_MUTUALEXCLUSIVE . Definition at line 1038 of file NeuralNet.h. ◆ ModeOutput. enum class TMVA::DNN::ModeOutput. strong . EnumeratorFETCH . Definition at ",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:9329,Safety,abort,abort,9329,"egin, ItTarget itTargetEnd);  ; template<bool HasDropOut, typename ItSource , typename ItWeight , typename ItTarget , typename ItDrop > ; void applyWeights (ItSource itSourceBegin, ItSource itSourceEnd, ItWeight itWeight, ItTarget itTargetBegin, ItTarget itTargetEnd, ItDrop itDrop);  apply weights using drop-out; for no drop out, provide (&bool = true) to itDrop such that *itDrop becomes ""true"" ;  ; template<typename ItSource , typename ItWeight , typename ItPrev > ; void applyWeightsBackwards (ItSource itCurrBegin, ItSource itCurrEnd, ItWeight itWeight, ItPrev itPrevBegin, ItPrev itPrevEnd);  ; template<bool HasDropOut, typename ItSource , typename ItWeight , typename ItPrev , typename ItDrop > ; void applyWeightsBackwards (ItSource itCurrBegin, ItSource itCurrEnd, ItWeight itWeight, ItPrev itPrevBegin, ItPrev itPrevEnd, ItDrop itDrop);  apply weights backwards (for backprop); for no drop out, provide (&bool = true) to itDrop such that *itDrop becomes ""true"" ;  ; template<typename LAYERDATA > ; void backward (LAYERDATA &prevLayerData, LAYERDATA &currLayerData);  backward application of the weights (back-propagation of the error) ;  ; template<EnumRegularization Regularization> ; double computeRegularization (double weight, const double &factorWeightDecay);  compute the regularization (L1, L2) ;  ; template<> ; double computeRegularization< EnumRegularization::L1 > (double weight, const double &factorWeightDecay);  ; template<> ; double computeRegularization< EnumRegularization::L2 > (double weight, const double &factorWeightDecay);  ; template<typename ItProbability , typename ItTruth , typename ItDelta , typename ItInvActFnc > ; double crossEntropy (ItProbability itProbabilityBegin, ItProbability itProbabilityEnd, ItTruth itTruthBegin, ItTruth, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc, double patternWeight);  cross entropy error function ;  ; void cudaError (cudaError_t code, const char *file, int line, bool abort=true);  Function to check cuda return code.",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:27452,Safety,abort,abort,27452,"). template<> . double TMVA::DNN::computeRegularization< EnumRegularization::L1 > ; (; double ; weight, . const double & ; factorWeightDecay . ). inline . Definition at line 219 of file NeuralNet.icc. ◆ computeRegularization< EnumRegularization::L2 >(). template<> . double TMVA::DNN::computeRegularization< EnumRegularization::L2 > ; (; double ; weight, . const double & ; factorWeightDecay . ). inline . Definition at line 226 of file NeuralNet.icc. ◆ crossEntropy(). template<typename ItProbability , typename ItTruth , typename ItDelta , typename ItInvActFnc > . double TMVA::DNN::crossEntropy ; (; ItProbability ; itProbabilityBegin, . ItProbability ; itProbabilityEnd, . ItTruth ; itTruthBegin, . ItTruth ; , . ItDelta ; itDelta, . ItDelta ; itDeltaEnd, . ItInvActFnc ; , . double ; patternWeight . ). cross entropy error function ; Definition at line 412 of file NeuralNet.icc. ◆ cudaError(). void TMVA::DNN::cudaError ; (; cudaError_t ; code, . const char * ; file, . int ; line, . bool ; abort = true . ). inline . Function to check cuda return code. ; Taken from http://stackoverflow.com/questions/14038589/ ; Definition at line 198 of file CudaMatrix.h. ◆ CurandInitializationKernel(). __global__ void TMVA::DNN::CurandInitializationKernel ; (; unsigned long long ; seed, . curandState_t * ; state . ). Definition at line 26 of file CudaMatrix.cu. ◆ debugTensor(). template<typename Architecture > . auto TMVA::DNN::debugTensor ; (; const typename Architecture::Tensor_t & ; A, . const std::string ; name = ""tensor"" . ); -> void. Definition at line 582 of file GeneralLayer.h. ◆ evaluate() [1/3]. template<typename Architecture_t > . auto TMVA::DNN::evaluate ; (; ELossFunction ; f, . const typename Architecture_t::Matrix_t & ; Y, . const typename Architecture_t::Matrix_t & ; output, . const typename Architecture_t::Matrix_t & ; weights . ); -> decltype(Architecture_t::CrossEntropy(Y, output, weights)). inline . Compute the value of the objective function f for given activations of t",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:17813,Testability,log,log,17813," ? 1.0 : 0; });  ; std::shared_ptr< std::function< double(double)> > InvTanh = std::make_shared<std::function<double(double)>> ([](double value){ return 1.0 - std::pow (value, 2.0); });  ; std::shared_ptr< std::function< double(double)> > InvTanhShift = std::make_shared<std::function<double(double)>> ([](double value){ return 0.3 + (1.0 - std::pow (value, 2.0)); });  ; std::shared_ptr< std::function< double(double)> > Linear = std::make_shared<std::function<double(double)>> ([](double value){ return value; });  ; std::shared_ptr< std::function< double(double)> > ReLU = std::make_shared<std::function<double(double)>> ([](double value){ const double margin = 0.0; return value > margin ? value-margin : 0; });  ; std::shared_ptr< std::function< double(double)> > Sigmoid = std::make_shared<std::function<double(double)>> ([](double value){ value = std::max (-100.0, std::min (100.0,value)); return 1.0/(1.0 + std::exp (-value)); });  ; std::shared_ptr< std::function< double(double)> > SoftPlus = std::make_shared<std::function<double(double)>> ([](double value){ return std::log (1.0+ std::exp (value)); });  ; std::shared_ptr< std::function< double(double)> > SoftSign = std::make_shared<std::function<double(double)>> ([](double value){ return value / (1.0 + fabs (value)); });  ; std::shared_ptr< std::function< double(double)> > SymmReLU = std::make_shared<std::function<double(double)>> ([](double value){ const double margin = 0.3; return value > margin ? value-margin : value < -margin ? value+margin : 0; });  ; std::shared_ptr< std::function< double(double)> > Tanh = std::make_shared<std::function<double(double)>> ([](double value){ return tanh (value); });  ; std::shared_ptr< std::function< double(double)> > TanhShift = std::make_shared<std::function<double(double)>> ([](double value){ return tanh (value-0.3); });  ; std::shared_ptr< std::function< double(double)> > ZeroFnc = std::make_shared<std::function<double(double)>> ([](double ){ return 0; });  . Typedef Documentation",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:39895,Testability,log,log,39895,"e_shared<std::function<double(double)>> ([](double value){ return 0.3 + (1.0 - std::pow (value, 2.0)); }). Definition at line 23 of file NeuralNet.cxx. ◆ Linear. std::shared_ptr< std::function< double(double)> > TMVA::DNN::Linear = std::make_shared<std::function<double(double)>> ([](double value){ return value; }). Definition at line 24 of file NeuralNet.cxx. ◆ ReLU. std::shared_ptr< std::function< double(double)> > TMVA::DNN::ReLU = std::make_shared<std::function<double(double)>> ([](double value){ const double margin = 0.0; return value > margin ? value-margin : 0; }). Definition at line 25 of file NeuralNet.cxx. ◆ Sigmoid. std::shared_ptr< std::function< double(double)> > TMVA::DNN::Sigmoid = std::make_shared<std::function<double(double)>> ([](double value){ value = std::max (-100.0, std::min (100.0,value)); return 1.0/(1.0 + std::exp (-value)); }). Definition at line 26 of file NeuralNet.cxx. ◆ SoftPlus. std::shared_ptr< std::function< double(double)> > TMVA::DNN::SoftPlus = std::make_shared<std::function<double(double)>> ([](double value){ return std::log (1.0+ std::exp (value)); }). Definition at line 27 of file NeuralNet.cxx. ◆ SoftSign. std::shared_ptr< std::function< double(double)> > TMVA::DNN::SoftSign = std::make_shared<std::function<double(double)>> ([](double value){ return value / (1.0 + fabs (value)); }). Definition at line 32 of file NeuralNet.cxx. ◆ SymmReLU. std::shared_ptr< std::function< double(double)> > TMVA::DNN::SymmReLU = std::make_shared<std::function<double(double)>> ([](double value){ const double margin = 0.3; return value > margin ? value-margin : value < -margin ? value+margin : 0; }). Definition at line 30 of file NeuralNet.cxx. ◆ Tanh. std::shared_ptr< std::function< double(double)> > TMVA::DNN::Tanh = std::make_shared<std::function<double(double)>> ([](double value){ return tanh (value); }). Definition at line 29 of file NeuralNet.cxx. ◆ TanhShift. std::shared_ptr< std::function< double(double)> > TMVA::DNN::TanhShift = std::make_sh",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html:18167,Modifiability,layers,layers,18167,"r filling one cell of the output matrix \A. It does so by computing the correct element to copy from the input matrix \B. We therefore never need to block. When reading this kernel it is important to keep in mind that TCudaMatrix objects are saved in column major order for compatibility with cuBLAS. ; Definition at line 256 of file Kernels.cuh. ◆ max(). template<typename AFloat > . __device__ AFloat TMVA::DNN::Cuda::max ; (; AFloat ; x, . AFloat ; y . ). Definition at line 207 of file Kernels.cuh. ◆ MaxPoolBackward(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::MaxPoolBackward ; (; AFloat * ; activationGradientsBackward, . const AFloat * ; activationGradients, . const AFloat * ; indexMatrix, . int ; depth, . int ; imgHeight, . int ; imgWidth, . int ; fltHeight, . int ; fltWidth, . int ; strideRows, . int ; strideCols . ). Back-propagate the gradients through a max-pooling layer. ; Parameters. [out]gradientsBackwardThe gradients to be written. One gradient for each neuron at the layers's input. ; [in]gradientsThe gradients coming from the next layer. One gradient for each receptive field. ; [in]indexMatrixWinning indices. One index for each receptive field. ; [in]depthThe depth of the input tensor. ; [in]imgHeightThe height of the input tensor. ; [in]imgWidthThe output of the input tensor ; [in]fltHeightHeight of the filter. ; [in]fltWidthWidth of the filter. ; [in]strideRowsstride size in the horizontal dimension. ; [in]strideColsstride size in the vertical dimension. . Definition at line 1059 of file Kernels.cuh. ◆ MeanSquaredError(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::MeanSquaredError ; (; AFloat * ; result, . const AFloat * ; Y, . const AFloat * ; output, . const AFloat * ; weights, . int ; m, . int ; n . ). Definition at line 681 of file Kernels.cuh. ◆ MeanSquaredErrorGradients(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::MeanSquaredErrorGradients ; (; AFloat * ; dY, . const AFloat * ; Y, . const A",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html:439,Performance,optimiz,optimizer,439,". ROOT: TMVA::DNN::Cuda Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; TMVA::DNN::Cuda Namespace Reference. Functions; template<typename AFloat > ; __global__ void AbsoluteSum (AFloat *result, const AFloat *A, int m, int n);  ; template<typename AFloat > ; __global__ void AdamUpdate (AFloat *A, const AFloat *M, const AFloat *V, int m, int n, AFloat alpha, AFloat eps);  optimizer kernel functions ;  ; template<typename AFloat > ; __global__ void AdamUpdateFirstMom (AFloat *A, const AFloat *B, int m, int n, AFloat beta);  ; template<typename AFloat > ; __global__ void AdamUpdateSecondMom (AFloat *A, const AFloat *B, int m, int n, AFloat beta);  ; template<typename AFloat > ; __global__ void AddBiases (AFloat *A, const AFloat *B, int nRows, int nCols);  ; template<typename AFloat > ; __global__ void AddL1RegularizationGradients (AFloat *A, const AFloat *B, AFloat weightDecay, int m, int n);  ; template<typename AFloat > ; __global__ void AddL2RegularizationGradients (AFloat *A, const AFloat *B, AFloat weightDecay, int m, int n);  ; template<typename AFloat > ; __global__ void AddRowWise (AFloat *W, const AFloat *theta, int m, int n);  ; template<typename AFloat > ; __global__ void AlmostEquals (bool *result, const AFloat *A, const AFloat *B, double epsilon, int m, int n);  ; template<typename AFloat > ; __device__ AFloat AtomicAdd (AFloat *address, AFloat val);  ; template<> ; __device__ double AtomicAdd (double *address, double val);  ; template<> ; __device__ float AtomicAdd (float *address, float val);  ; __device__ int calculateDimension (int imgDim, int fltDim, int padding, int stride);  Calculate the dimension of an output volume, given the sliding parameters and the input shape. ;  ; template<typename AFloat > ; __global__ void ConstAdd (AFloat *A, AFloat beta, int m, int n);  ; template<typename AFloat > ; __global__ void ConstMult (AFloat *A, AFloat beta, int m, int n);  ; template<typename AFlo",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html:7923,Performance,optimiz,optimizer,7923,"; template<typename AFloat > ; __global__ void SymmetricRelu (AFloat *A, int m, int n);  ; template<typename AFloat > ; __global__ void SymmetricReluDerivative (AFloat *B, const AFloat *A, int m, int n);  ; template<typename AFloat > ; __global__ void Tanh (AFloat *A, int m, int n);  ; template<typename AFloat > ; __global__ void TanhDerivative (AFloat *B, const AFloat *A, int m, int n);  ; template<typename AFloat > ; __global__ void UpdateWeights (AFloat *A, const AFloat **B, int batchSize, int nRows, int nCols);  . Function Documentation. ◆ AbsoluteSum(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::AbsoluteSum ; (; AFloat * ; result, . const AFloat * ; A, . int ; m, . int ; n . ). Definition at line 729 of file Kernels.cuh. ◆ AdamUpdate(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::AdamUpdate ; (; AFloat * ; A, . const AFloat * ; M, . const AFloat * ; V, . int ; m, . int ; n, . AFloat ; alpha, . AFloat ; eps . ). optimizer kernel functions ; Definition at line 408 of file Kernels.cuh. ◆ AdamUpdateFirstMom(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::AdamUpdateFirstMom ; (; AFloat * ; A, . const AFloat * ; B, . int ; m, . int ; n, . AFloat ; beta . ). Definition at line 422 of file Kernels.cuh. ◆ AdamUpdateSecondMom(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::AdamUpdateSecondMom ; (; AFloat * ; A, . const AFloat * ; B, . int ; m, . int ; n, . AFloat ; beta . ). Definition at line 436 of file Kernels.cuh. ◆ AddBiases(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::AddBiases ; (; AFloat * ; A, . const AFloat * ; B, . int ; nRows, . int ; nCols . ). Definition at line 1118 of file Kernels.cuh. ◆ AddL1RegularizationGradients(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::AddL1RegularizationGradients ; (; AFloat * ; A, . const AFloat * ; B, . AFloat ; weightDecay, . int ; m, . int ; n . ). Definition at line 767 of file Kernels.cuh. ◆ AddL2RegularizationGradi",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html:10679,Performance,perform,performed,10679,". __device__ AFloat TMVA::DNN::Cuda::AtomicAdd ; (; AFloat * ; address, . AFloat ; val . ). ◆ AtomicAdd() [2/3]. template<> . __device__ double TMVA::DNN::Cuda::AtomicAdd ; (; double * ; address, . double ; val . ). Definition at line 34 of file Kernels.cuh. ◆ AtomicAdd() [3/3]. template<> . __device__ float TMVA::DNN::Cuda::AtomicAdd ; (; float * ; address, . float ; val . ). Definition at line 48 of file Kernels.cuh. ◆ calculateDimension(). __device__ int TMVA::DNN::Cuda::calculateDimension ; (; int ; imgDim, . int ; fltDim, . int ; padding, . int ; stride . ). Calculate the dimension of an output volume, given the sliding parameters and the input shape. ; Parameters. [in]imgDimThe size of the input tensor in a spatial dimension. ; [in]fltDimThe size of the sliding filter in the same dimension. ; [in]paddingNumber of zeroes to pad the input with. ; [in]strideNumber of pixels the kernel is sliding in each iteration. . ReturnsThe output dimension.; Note that no checks are performed to assert validity of the input parameters. We are allowed to assume them valid because those checks have already been performed prior to the invocation of the kernel. ; Definition at line 226 of file Kernels.cuh. ◆ ConstAdd(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::ConstAdd ; (; AFloat * ; A, . AFloat ; beta, . int ; m, . int ; n . ). Definition at line 335 of file Kernels.cuh. ◆ ConstMult(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::ConstMult ; (; AFloat * ; A, . AFloat ; beta, . int ; m, . int ; n . ). Definition at line 349 of file Kernels.cuh. ◆ CrossEntropy(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::CrossEntropy ; (; AFloat * ; result, . const AFloat * ; Y, . const AFloat * ; output, . const AFloat * ; weights, . int ; m, . int ; n . ). Definition at line 800 of file Kernels.cuh. ◆ CrossEntropyGradients(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::CrossEntropyGradients ; (; AFloat * ; dY, . const AFl",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html:10808,Performance,perform,performed,10808,"d() [2/3]. template<> . __device__ double TMVA::DNN::Cuda::AtomicAdd ; (; double * ; address, . double ; val . ). Definition at line 34 of file Kernels.cuh. ◆ AtomicAdd() [3/3]. template<> . __device__ float TMVA::DNN::Cuda::AtomicAdd ; (; float * ; address, . float ; val . ). Definition at line 48 of file Kernels.cuh. ◆ calculateDimension(). __device__ int TMVA::DNN::Cuda::calculateDimension ; (; int ; imgDim, . int ; fltDim, . int ; padding, . int ; stride . ). Calculate the dimension of an output volume, given the sliding parameters and the input shape. ; Parameters. [in]imgDimThe size of the input tensor in a spatial dimension. ; [in]fltDimThe size of the sliding filter in the same dimension. ; [in]paddingNumber of zeroes to pad the input with. ; [in]strideNumber of pixels the kernel is sliding in each iteration. . ReturnsThe output dimension.; Note that no checks are performed to assert validity of the input parameters. We are allowed to assume them valid because those checks have already been performed prior to the invocation of the kernel. ; Definition at line 226 of file Kernels.cuh. ◆ ConstAdd(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::ConstAdd ; (; AFloat * ; A, . AFloat ; beta, . int ; m, . int ; n . ). Definition at line 335 of file Kernels.cuh. ◆ ConstMult(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::ConstMult ; (; AFloat * ; A, . AFloat ; beta, . int ; m, . int ; n . ). Definition at line 349 of file Kernels.cuh. ◆ CrossEntropy(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::CrossEntropy ; (; AFloat * ; result, . const AFloat * ; Y, . const AFloat * ; output, . const AFloat * ; weights, . int ; m, . int ; n . ). Definition at line 800 of file Kernels.cuh. ◆ CrossEntropyGradients(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::CrossEntropyGradients ; (; AFloat * ; dY, . const AFloat * ; Y, . const AFloat * ; output, . const AFloat * ; weights, . int ; m, . int ; n . ). Definitio",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html:12486,Performance,perform,performed,12486," . int ; m, . int ; n . ). Definition at line 800 of file Kernels.cuh. ◆ CrossEntropyGradients(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::CrossEntropyGradients ; (; AFloat * ; dY, . const AFloat * ; Y, . const AFloat * ; output, . const AFloat * ; weights, . int ; m, . int ; n . ). Definition at line 831 of file Kernels.cuh. ◆ Deflatten(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::Deflatten ; (; AFloat * ; A, . const AFloat * ; B, . int ; size, . int ; nRows, . int ; nCols . ). Deflatten a 2D-array into an array of 2D-arrays. ; Parameters. [out]AOutput array of 2D-arrays, each of which is column-major. ; [in]BInput 2D-array to be split into size parts. ; [in]sizeNumber of 2D-arrays in the output. ; [in]nRowsNumber of rows in each matrix of the output. ; [in]nColsNumber of columns on each matrix of the output. A is a pointer to size raw TCudaMatrix pointers. Each of those will contain elements saved on column major order. However the concatenation is performed row wise. Each thread writes a single output element by locating the appropriate input index. ; Definition at line 1225 of file Kernels.cuh. ◆ DeflattenRM(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::DeflattenRM ; (; AFloat * ; A, . const AFloat * ; B, . int ; size, . int ; nRows, . int ; nCols . ). Definition at line 1243 of file Kernels.cuh. ◆ Downsample(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::Downsample ; (; AFloat * ; output, . AFloat * ; indexMatrix, . const AFloat * ; input, . int ; depth, . int ; imgHeight, . int ; imgWidth, . int ; fltHeight, . int ; fltWidth, . int ; strideRows, . int ; strideCols . ). Downsampling kernel used as the forward propagation step of a Max-Pooling layer. ; Parameters. [out]AThe output matrix. Each row corresponds to a slice and each element is the max within a receptive field. ; [out]BThe winning indices matrix. Each element is the index of the max element. ; [in]CThe input matrix. Each row",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html:14850,Performance,perform,performed,14850,"d per output element in order to eliminate shared write access. ; Definition at line 1002 of file Kernels.cuh. ◆ Dropout(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::Dropout ; (; AFloat * ; A, . int ; m, . int ; n, . AFloat ; dropoutProbability, . curandState_t * ; state . ). Definition at line 964 of file Kernels.cuh. ◆ Flatten(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::Flatten ; (; AFloat * ; A, . const AFloat * ; B, . int ; size, . int ; nRows, . int ; nCols . ). Flatten an array of 2D-arrays into a single 2D-array. ; Parameters. [out]AOutput 2D-array saved in column major order. ; [in]BInput array of 2D-arrays. Each element is a matrix to be concatenated. ; [in]sizeNumber of 2D-arrays in the input. ; [in]nRowsNumber of rows in each matrix of the input. ; [in]nColsNumber of columns on each matrix of the input. B is a pointer to size raw TCudaMatrix pointers. Each of those contains elements saved on column major order. However the concatenation is performed row wise. Each thread writes a single output element by locating the appropriate input index. ; Definition at line 1171 of file Kernels.cuh. ◆ FlattenRM(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::FlattenRM ; (; AFloat * ; A, . const AFloat * ; B, . int ; size, . int ; nRows, . int ; nCols . ). Definition at line 1191 of file Kernels.cuh. ◆ Gauss(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::Gauss ; (; AFloat * ; A, . int ; m, . int ; n . ). Definition at line 650 of file Kernels.cuh. ◆ GaussDerivative(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::GaussDerivative ; (; AFloat * ; B, . const AFloat * ; A, . int ; m, . int ; n . ). Definition at line 665 of file Kernels.cuh. ◆ Hadamard(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::Hadamard ; (; AFloat * ; B, . const AFloat * ; A, . int ; m, . int ; n . ). Definition at line 321 of file Kernels.cuh. ◆ IdentityDerivative(). template<typename AFloat ",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html:13900,Security,access,access,13900,". ◆ Downsample(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::Downsample ; (; AFloat * ; output, . AFloat * ; indexMatrix, . const AFloat * ; input, . int ; depth, . int ; imgHeight, . int ; imgWidth, . int ; fltHeight, . int ; fltWidth, . int ; strideRows, . int ; strideCols . ). Downsampling kernel used as the forward propagation step of a Max-Pooling layer. ; Parameters. [out]AThe output matrix. Each row corresponds to a slice and each element is the max within a receptive field. ; [out]BThe winning indices matrix. Each element is the index of the max element. ; [in]CThe input matrix. Each row is a slice. ; [in]imgHeightThe heigh of the input. ; [in]imgWidthThe output of the input. ; [in]fltHeightHeight of the kernel. ; [in]fltWidthWidth of the kernel. ; [in]strideRowsstride size in the horizontal dimension. ; [in]strideColsstride size in the vertical dimension. Each output element is the maximum of the receptive field. The caller launches one thread per output element in order to eliminate shared write access. ; Definition at line 1002 of file Kernels.cuh. ◆ Dropout(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::Dropout ; (; AFloat * ; A, . int ; m, . int ; n, . AFloat ; dropoutProbability, . curandState_t * ; state . ). Definition at line 964 of file Kernels.cuh. ◆ Flatten(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::Flatten ; (; AFloat * ; A, . const AFloat * ; B, . int ; size, . int ; nRows, . int ; nCols . ). Flatten an array of 2D-arrays into a single 2D-array. ; Parameters. [out]AOutput 2D-array saved in column major order. ; [in]BInput array of 2D-arrays. Each element is a matrix to be concatenated. ; [in]sizeNumber of 2D-arrays in the input. ; [in]nRowsNumber of rows in each matrix of the input. ; [in]nColsNumber of columns on each matrix of the input. B is a pointer to size raw TCudaMatrix pointers. Each of those contains elements saved on column major order. However the concatenation is performed r",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html
https://root.cern/doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html:10692,Testability,assert,assert,10692,". __device__ AFloat TMVA::DNN::Cuda::AtomicAdd ; (; AFloat * ; address, . AFloat ; val . ). ◆ AtomicAdd() [2/3]. template<> . __device__ double TMVA::DNN::Cuda::AtomicAdd ; (; double * ; address, . double ; val . ). Definition at line 34 of file Kernels.cuh. ◆ AtomicAdd() [3/3]. template<> . __device__ float TMVA::DNN::Cuda::AtomicAdd ; (; float * ; address, . float ; val . ). Definition at line 48 of file Kernels.cuh. ◆ calculateDimension(). __device__ int TMVA::DNN::Cuda::calculateDimension ; (; int ; imgDim, . int ; fltDim, . int ; padding, . int ; stride . ). Calculate the dimension of an output volume, given the sliding parameters and the input shape. ; Parameters. [in]imgDimThe size of the input tensor in a spatial dimension. ; [in]fltDimThe size of the sliding filter in the same dimension. ; [in]paddingNumber of zeroes to pad the input with. ; [in]strideNumber of pixels the kernel is sliding in each iteration. . ReturnsThe output dimension.; Note that no checks are performed to assert validity of the input parameters. We are allowed to assume them valid because those checks have already been performed prior to the invocation of the kernel. ; Definition at line 226 of file Kernels.cuh. ◆ ConstAdd(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::ConstAdd ; (; AFloat * ; A, . AFloat ; beta, . int ; m, . int ; n . ). Definition at line 335 of file Kernels.cuh. ◆ ConstMult(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::ConstMult ; (; AFloat * ; A, . AFloat ; beta, . int ; m, . int ; n . ). Definition at line 349 of file Kernels.cuh. ◆ CrossEntropy(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::CrossEntropy ; (; AFloat * ; result, . const AFloat * ; Y, . const AFloat * ; output, . const AFloat * ; weights, . int ; m, . int ; n . ). Definition at line 800 of file Kernels.cuh. ◆ CrossEntropyGradients(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::CrossEntropyGradients ; (; AFloat * ; dY, . const AFl",MatchSource.WIKI,doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html
https://root.cern/doc/master/namespaceTMVA_1_1Experimental.html:421,Integrability,interface,interface,421,". ROOT: TMVA::Experimental Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Enumerations |; Functions ; TMVA::Experimental Namespace Reference. Namespaces; namespace  Internal;  ; namespace  SOFIE;  . Classes; class  Classification;  ; class  ClassificationResult;  ; class  RBDT;  ; class  RReader;  A replacement for the TMVA::Reader legacy interface. More...;  ; class  RSofieReader;  TMVA::RSofieReader class for reading external Machine Learning models in ONNX files, Keras .h5 files or PyTorch .pt files and performing the inference using SOFIE It is reccomended to use ONNX if possible since there is a larger support for model operators. More...;  ; class  RStandardScaler;  ; class  RTensor;  RTensor is a container with contiguous memory and shape information. More...;  ; class  SofieFunctorHelper;  Helper class used by SOFIEFunctor to wrap the infer signature interface to RDataFrame. More...;  ; class  SofieFunctorHelper< std::index_sequence< N... >, Session_t, T >;  . Enumerations; enum class  MemoryLayout : uint8_t { RowMajor = 0x01; , ColumnMajor = 0x02; , RowMajor = 0x01; , ColumnMajor = 0x02; };  Memory layout type (copy from RTensor.hxx) More...;  ; enum class  MemoryLayout : uint8_t { RowMajor = 0x01; , ColumnMajor = 0x02; , RowMajor = 0x01; , ColumnMajor = 0x02; };  Memory layout type. More...;  . Functions; template<typename T , typename U > ; RTensor< T > AsTensor (U &dataframe, std::vector< std::string > columns={}, MemoryLayout layout=MemoryLayout::RowMajor);  Convert the content of an RDataFrame to an RTensor. ;  ; template<std::size_t N, typename T , typename F > ; auto Compute (F &&f) -> Internal::ComputeHelper< std::make_index_sequence< N >, T, F >;  Helper to pass TMVA model to RDataFrame.Define nodes. ;  ; template<typename T > ; std::ostream & operator<< (std::ostream &os, RTensor< T > &x);  Pretty printing. ;  ; template<std::size_t N, typename Session_t > ; auto SofieF",MatchSource.WIKI,doc/master/namespaceTMVA_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1Experimental.html
https://root.cern/doc/master/namespaceTMVA_1_1Experimental.html:926,Integrability,wrap,wrap,926,". ROOT: TMVA::Experimental Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Enumerations |; Functions ; TMVA::Experimental Namespace Reference. Namespaces; namespace  Internal;  ; namespace  SOFIE;  . Classes; class  Classification;  ; class  ClassificationResult;  ; class  RBDT;  ; class  RReader;  A replacement for the TMVA::Reader legacy interface. More...;  ; class  RSofieReader;  TMVA::RSofieReader class for reading external Machine Learning models in ONNX files, Keras .h5 files or PyTorch .pt files and performing the inference using SOFIE It is reccomended to use ONNX if possible since there is a larger support for model operators. More...;  ; class  RStandardScaler;  ; class  RTensor;  RTensor is a container with contiguous memory and shape information. More...;  ; class  SofieFunctorHelper;  Helper class used by SOFIEFunctor to wrap the infer signature interface to RDataFrame. More...;  ; class  SofieFunctorHelper< std::index_sequence< N... >, Session_t, T >;  . Enumerations; enum class  MemoryLayout : uint8_t { RowMajor = 0x01; , ColumnMajor = 0x02; , RowMajor = 0x01; , ColumnMajor = 0x02; };  Memory layout type (copy from RTensor.hxx) More...;  ; enum class  MemoryLayout : uint8_t { RowMajor = 0x01; , ColumnMajor = 0x02; , RowMajor = 0x01; , ColumnMajor = 0x02; };  Memory layout type. More...;  . Functions; template<typename T , typename U > ; RTensor< T > AsTensor (U &dataframe, std::vector< std::string > columns={}, MemoryLayout layout=MemoryLayout::RowMajor);  Convert the content of an RDataFrame to an RTensor. ;  ; template<std::size_t N, typename T , typename F > ; auto Compute (F &&f) -> Internal::ComputeHelper< std::make_index_sequence< N >, T, F >;  Helper to pass TMVA model to RDataFrame.Define nodes. ;  ; template<typename T > ; std::ostream & operator<< (std::ostream &os, RTensor< T > &x);  Pretty printing. ;  ; template<std::size_t N, typename Session_t > ; auto SofieF",MatchSource.WIKI,doc/master/namespaceTMVA_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1Experimental.html
https://root.cern/doc/master/namespaceTMVA_1_1Experimental.html:951,Integrability,interface,interface,951,". ROOT: TMVA::Experimental Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Enumerations |; Functions ; TMVA::Experimental Namespace Reference. Namespaces; namespace  Internal;  ; namespace  SOFIE;  . Classes; class  Classification;  ; class  ClassificationResult;  ; class  RBDT;  ; class  RReader;  A replacement for the TMVA::Reader legacy interface. More...;  ; class  RSofieReader;  TMVA::RSofieReader class for reading external Machine Learning models in ONNX files, Keras .h5 files or PyTorch .pt files and performing the inference using SOFIE It is reccomended to use ONNX if possible since there is a larger support for model operators. More...;  ; class  RStandardScaler;  ; class  RTensor;  RTensor is a container with contiguous memory and shape information. More...;  ; class  SofieFunctorHelper;  Helper class used by SOFIEFunctor to wrap the infer signature interface to RDataFrame. More...;  ; class  SofieFunctorHelper< std::index_sequence< N... >, Session_t, T >;  . Enumerations; enum class  MemoryLayout : uint8_t { RowMajor = 0x01; , ColumnMajor = 0x02; , RowMajor = 0x01; , ColumnMajor = 0x02; };  Memory layout type (copy from RTensor.hxx) More...;  ; enum class  MemoryLayout : uint8_t { RowMajor = 0x01; , ColumnMajor = 0x02; , RowMajor = 0x01; , ColumnMajor = 0x02; };  Memory layout type. More...;  . Functions; template<typename T , typename U > ; RTensor< T > AsTensor (U &dataframe, std::vector< std::string > columns={}, MemoryLayout layout=MemoryLayout::RowMajor);  Convert the content of an RDataFrame to an RTensor. ;  ; template<std::size_t N, typename T , typename F > ; auto Compute (F &&f) -> Internal::ComputeHelper< std::make_index_sequence< N >, T, F >;  Helper to pass TMVA model to RDataFrame.Define nodes. ;  ; template<typename T > ; std::ostream & operator<< (std::ostream &os, RTensor< T > &x);  Pretty printing. ;  ; template<std::size_t N, typename Session_t > ; auto SofieF",MatchSource.WIKI,doc/master/namespaceTMVA_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1Experimental.html
https://root.cern/doc/master/namespaceTMVA_1_1Experimental.html:2165,Integrability,wrap,wrap,2165,"yLayout : uint8_t { RowMajor = 0x01; , ColumnMajor = 0x02; , RowMajor = 0x01; , ColumnMajor = 0x02; };  Memory layout type (copy from RTensor.hxx) More...;  ; enum class  MemoryLayout : uint8_t { RowMajor = 0x01; , ColumnMajor = 0x02; , RowMajor = 0x01; , ColumnMajor = 0x02; };  Memory layout type. More...;  . Functions; template<typename T , typename U > ; RTensor< T > AsTensor (U &dataframe, std::vector< std::string > columns={}, MemoryLayout layout=MemoryLayout::RowMajor);  Convert the content of an RDataFrame to an RTensor. ;  ; template<std::size_t N, typename T , typename F > ; auto Compute (F &&f) -> Internal::ComputeHelper< std::make_index_sequence< N >, T, F >;  Helper to pass TMVA model to RDataFrame.Define nodes. ;  ; template<typename T > ; std::ostream & operator<< (std::ostream &os, RTensor< T > &x);  Pretty printing. ;  ; template<std::size_t N, typename Session_t > ; auto SofieFunctor (unsigned int nslots=0, const std::string &weightsFile="""") -> SofieFunctorHelper< std::make_index_sequence< N >, Session_t, float >;  SofieFunctor : used to wrap the infer function of the generated model by SOFIE in a RDF compatible signature. ;  . Enumeration Type Documentation. ◆ MemoryLayout [1/2]. enum class TMVA::Experimental::MemoryLayout : uint8_t. strong . Memory layout type (copy from RTensor.hxx) . EnumeratorRowMajor ; ColumnMajor ; RowMajor ; ColumnMajor . Definition at line 47 of file CudaTensor.h. ◆ MemoryLayout [2/2]. enum class TMVA::Experimental::MemoryLayout : uint8_t. strong . Memory layout type. . EnumeratorRowMajor ; ColumnMajor ; RowMajor ; ColumnMajor . Definition at line 17 of file RTensor.hxx. Function Documentation. ◆ AsTensor(). template<typename T , typename U > . RTensor< T > TMVA::Experimental::AsTensor ; (; U & ; dataframe, . std::vector< std::string > ; columns = {}, . MemoryLayout ; layout = MemoryLayout::RowMajor . ). Convert the content of an RDataFrame to an RTensor. ; Parameters. [in]dataframeRDataFrame node ; [in]columnsVector of col",MatchSource.WIKI,doc/master/namespaceTMVA_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1Experimental.html
https://root.cern/doc/master/namespaceTMVA_1_1Experimental.html:4072,Integrability,wrap,wrap,4072,"taframe, . std::vector< std::string > ; columns = {}, . MemoryLayout ; layout = MemoryLayout::RowMajor . ). Convert the content of an RDataFrame to an RTensor. ; Parameters. [in]dataframeRDataFrame node ; [in]columnsVector of column names ; [in]layoutMemory layout . ReturnsRTensor with content from selected columns ; Definition at line 21 of file RTensorUtils.hxx. ◆ Compute(). template<std::size_t N, typename T , typename F > . auto TMVA::Experimental::Compute ; (; F && ; f); -> Internal::ComputeHelper<std::make_index_sequence<N>, T, F>. Helper to pass TMVA model to RDataFrame.Define nodes. ; Definition at line 32 of file RInferenceUtils.hxx. ◆ operator<<(). template<typename T > . std::ostream & TMVA::Experimental::operator<< ; (; std::ostream & ; os, . RTensor< T > & ; x . ). Pretty printing. ; Parameters. [in]osOutput stream ; [in]xRTensor . ReturnsModified output stream ; Definition at line 582 of file RTensor.hxx. ◆ SofieFunctor(). template<std::size_t N, typename Session_t > . auto TMVA::Experimental::SofieFunctor ; (; unsigned int ; nslots = 0, . const std::string & ; weightsFile = """" . ); -> SofieFunctorHelper<std::make_index_sequence<N>, Session_t, float>. SofieFunctor : used to wrap the infer function of the generated model by SOFIE in a RDF compatible signature. ; The number of slots is an optional parameter used to create multiple SOFIE Sessions, which can be run in a parallel model evaluation. One should use as number of slots the number of slots used by RDataFrame. By default, in case of nslots=0, only a single Session will be created and the Functor cannot be run in parallel. Examples of using the SofieFunctor are the C++ tutorial TMVA_SOFIE_RDataFrame.C and the Python tutorial TMVA_SOFIE_RDataFrame.py which makes use of the ROOT JIT to compile on the fly the generated SOFIE model. ; Definition at line 64 of file SOFIEHelpers.hxx. TMVAExperimental. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:47 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceTMVA_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1Experimental.html
https://root.cern/doc/master/namespaceTMVA_1_1Experimental.html:592,Performance,perform,performing,592,". ROOT: TMVA::Experimental Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Enumerations |; Functions ; TMVA::Experimental Namespace Reference. Namespaces; namespace  Internal;  ; namespace  SOFIE;  . Classes; class  Classification;  ; class  ClassificationResult;  ; class  RBDT;  ; class  RReader;  A replacement for the TMVA::Reader legacy interface. More...;  ; class  RSofieReader;  TMVA::RSofieReader class for reading external Machine Learning models in ONNX files, Keras .h5 files or PyTorch .pt files and performing the inference using SOFIE It is reccomended to use ONNX if possible since there is a larger support for model operators. More...;  ; class  RStandardScaler;  ; class  RTensor;  RTensor is a container with contiguous memory and shape information. More...;  ; class  SofieFunctorHelper;  Helper class used by SOFIEFunctor to wrap the infer signature interface to RDataFrame. More...;  ; class  SofieFunctorHelper< std::index_sequence< N... >, Session_t, T >;  . Enumerations; enum class  MemoryLayout : uint8_t { RowMajor = 0x01; , ColumnMajor = 0x02; , RowMajor = 0x01; , ColumnMajor = 0x02; };  Memory layout type (copy from RTensor.hxx) More...;  ; enum class  MemoryLayout : uint8_t { RowMajor = 0x01; , ColumnMajor = 0x02; , RowMajor = 0x01; , ColumnMajor = 0x02; };  Memory layout type. More...;  . Functions; template<typename T , typename U > ; RTensor< T > AsTensor (U &dataframe, std::vector< std::string > columns={}, MemoryLayout layout=MemoryLayout::RowMajor);  Convert the content of an RDataFrame to an RTensor. ;  ; template<std::size_t N, typename T , typename F > ; auto Compute (F &&f) -> Internal::ComputeHelper< std::make_index_sequence< N >, T, F >;  Helper to pass TMVA model to RDataFrame.Define nodes. ;  ; template<typename T > ; std::ostream & operator<< (std::ostream &os, RTensor< T > &x);  Pretty printing. ;  ; template<std::size_t N, typename Session_t > ; auto SofieF",MatchSource.WIKI,doc/master/namespaceTMVA_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1Experimental.html
https://root.cern/doc/master/namespaceTMVA_1_1TMVAGlob.html:1046,Modifiability,inherit,inherits,1046,"kNorm; , kDecorrelated; , kPCA; , ;   kGaussDecorr; , kNumOfMethods. };  . Functions; void DestroyCanvases ();  ; Bool_t ExistMethodName (TString name, TDirectory *dir=nullptr);  ; TImage * findImage (const char *imageName);  ; TKey * FindMethod (TString name, TDirectory *dir=nullptr);  ; Int_t getBackgroundFill ();  ; Int_t getBackgroundLine ();  ; Int_t getCanvas ();  ; std::vector< TString > GetClassNames (TDirectory *dir);  ; TDirectory * GetCorrelationPlotsDir (TMVAGlob::TypeOfPlot type, TDirectory *dir=nullptr);  ; Int_t getFrameFill ();  ; std::vector< TString > GetInputVariableNames (TDirectory *dir);  ; TDirectory * GetInputVariablesDir (TMVAGlob::TypeOfPlot type, TDirectory *dir=nullptr);  ; UInt_t GetListOfJobs (TFile *file, TList &jobdirs);  ; UInt_t GetListOfKeys (TList &keys, TString inherits, TDirectory *dir=nullptr);  ; UInt_t GetListOfMethods (TList &methods, TDirectory *dir=nullptr);  ; UInt_t GetListOfTitles (TDirectory *rfdir, TList &titles);  ; UInt_t GetListOfTitles (TString &methodName, TList &titles, TDirectory *dir=nullptr);  ; void GetMethodName (TString &name, TDirectory *mdir);  ; void GetMethodName (TString &name, TKey *mkey);  ; void GetMethodTitle (TString &name, TDirectory *idir);  ; void GetMethodTitle (TString &name, TKey *ikey);  ; Int_t getNovelBlue ();  ; Int_t GetNumberOfInputVariables (TDirectory *dir);  ; Int_t GetNumberOfInputVariablesMultiClass (TDirectory *dir);  ; Int_t GetNumberOfTargets (TDirectory *dir);  ; Int_t getSignalFill ();  ; Int_t getSignalLine ();  ; Int_t getTitleBorder ();  ; Int_t getTitleBox ();  ; Int_t getTitleText ();  ; void imgconv (TCanvas *c, const TString &fname);  ; void Initialize (Bool_t useTMVAStyle=kTRUE);  ; TKey * NextKey (TIter &keyIter, TString className);  ; void NormalizeHist (TH1 *h);  ; void NormalizeHists (TH1 *sig, TH1 *bkg=nullptr);  ; TFile * OpenFile (const TString &fin);  ; void plot_logo (Float_t v_scale=1.0, Float_t skew=1.0);  ; void SetFrameStyle (TH1 *frame, Float_t scale=1.0",MatchSource.WIKI,doc/master/namespaceTMVA_1_1TMVAGlob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1TMVAGlob.html
https://root.cern/doc/master/namespaceTMVA_1_1TMVAGlob.html:4553,Modifiability,inherit,inherits,4553,"ing > TMVA::TMVAGlob::GetClassNames ; (; TDirectory * ; dir). Definition at line 469 of file tmvaglob.cxx. ◆ GetCorrelationPlotsDir(). TDirectory * TMVA::TMVAGlob::GetCorrelationPlotsDir ; (; TMVAGlob::TypeOfPlot ; type, . TDirectory * ; dir = nullptr . ). Definition at line 725 of file tmvaglob.cxx. ◆ getFrameFill(). Int_t TMVA::TMVAGlob::getFrameFill ; (; ). inline . Definition at line 45 of file tmvaglob.h. ◆ GetInputVariableNames(). std::vector< TString > TMVA::TMVAGlob::GetInputVariableNames ; (; TDirectory * ; dir). Definition at line 436 of file tmvaglob.cxx. ◆ GetInputVariablesDir(). TDirectory * TMVA::TMVAGlob::GetInputVariablesDir ; (; TMVAGlob::TypeOfPlot ; type, . TDirectory * ; dir = nullptr . ). Definition at line 707 of file tmvaglob.cxx. ◆ GetListOfJobs(). UInt_t TMVA::TMVAGlob::GetListOfJobs ; (; TFile * ; file, . TList & ; jobdirs . ). Definition at line 615 of file tmvaglob.cxx. ◆ GetListOfKeys(). UInt_t TMVA::TMVAGlob::GetListOfKeys ; (; TList & ; keys, . TString ; inherits, . TDirectory * ; dir = nullptr . ). Definition at line 382 of file tmvaglob.cxx. ◆ GetListOfMethods(). UInt_t TMVA::TMVAGlob::GetListOfMethods ; (; TList & ; methods, . TDirectory * ; dir = nullptr . ). Definition at line 590 of file tmvaglob.cxx. ◆ GetListOfTitles() [1/2]. UInt_t TMVA::TMVAGlob::GetListOfTitles ; (; TDirectory * ; rfdir, . TList & ; titles . ). Definition at line 643 of file tmvaglob.cxx. ◆ GetListOfTitles() [2/2]. UInt_t TMVA::TMVAGlob::GetListOfTitles ; (; TString & ; methodName, . TList & ; titles, . TDirectory * ; dir = nullptr . ). Definition at line 670 of file tmvaglob.cxx. ◆ GetMethodName() [1/2]. void TMVA::TMVAGlob::GetMethodName ; (; TString & ; name, . TDirectory * ; mdir . ). Definition at line 353 of file tmvaglob.cxx. ◆ GetMethodName() [2/2]. void TMVA::TMVAGlob::GetMethodName ; (; TString & ; name, . TKey * ; mkey . ). Definition at line 342 of file tmvaglob.cxx. ◆ GetMethodTitle() [1/2]. void TMVA::TMVAGlob::GetMethodTitle ; (; TString & ; n",MatchSource.WIKI,doc/master/namespaceTMVA_1_1TMVAGlob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1TMVAGlob.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:1098,Integrability,rout,routines,1098,". ROOT: TStreamerInfoActions Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Typedefs |; Enumerations |; Functions ; TStreamerInfoActions Namespace Reference. Classes; struct  AssociativeLooper;  ; struct  BitsMarker;  ; struct  ConvertBasicType;  ; struct  ConvertBasicType< BitsMarker, To >;  ; struct  ConvertBasicType< NoFactorMarker< From >, To >;  ; struct  ConvertBasicType< WithFactorMarker< From >, To >;  ; struct  GenericLooper;  ; struct  NoFactorMarker;  ; class  TActionSequence;  ; class  TAssocLoopConfig;  ; struct  TBitsConfiguration;  ; class  TConfigSTL;  ; class  TConfiguration;  Base class of the Configurations. More...;  ; class  TConfigurationPushDataCache;  ; class  TConfigurationUseCache;  ; class  TConfiguredAction;  ; class  TConfNoFactor;  ; class  TConfSTLNoFactor;  ; class  TConfSTLWithFactor;  ; class  TConfWithFactor;  ; struct  TGenericConfiguration;  ; class  TGenericLoopConfig;  ; struct  TIDNode;  ; class  TLoopConfiguration;  Base class of the Configurations for the member wise looping routines. More...;  ; struct  TNestedIDs;  ; class  TVectorLoopConfig;  ; struct  VectorLooper;  ; struct  VectorPtrLooper;  ; struct  WithFactorMarker;  . Typedefs; typedef std::vector< TConfiguredAction > ActionContainer_t;  ; typedef TVirtualCollectionProxy::Next_t Next_t;  ; using TIDs = std::vector< TIDNode >;  ; typedef Int_t(* TStreamerInfoAction_t) (TBuffer &buf, void *obj, const TConfiguration *conf);  ; typedef Int_t(* TStreamerInfoLoopAction_t) (TBuffer &buf, void *iter, const void *end, const TLoopConfiguration *loopconf, const TConfiguration *conf);  ; typedef Int_t(* TStreamerInfoVecPtrLoopAction_t) (TBuffer &buf, void *iter, const void *end, const TConfiguration *conf);  . Enumerations; enum  ESelectLooper { kVectorLooper; , kVectorPtrLooper; , kAssociativeLooper; , kGenericLooper; };  . Functions; Int_t GenericReadAction (TBuffer &buf, void *addr, const TConfiguration *confi",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:1996,Modifiability,config,config,1996," Functions; Int_t GenericReadAction (TBuffer &buf, void *addr, const TConfiguration *confi",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:2082,Modifiability,config,config,2082," Functions; Int_t GenericReadAction (TBuffer &buf, void *addr, const TConfiguration *confi",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:2172,Modifiability,config,config,2172," Functions; Int_t GenericReadAction (TBuffer &buf, void *addr, const TConfiguration *confi",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:3159,Modifiability,config,config,3159,"guration *config);  ; bool IsDefaultVector (TVirtualCollectionProxy &proxy);  ; Int_t PopDataCache (TBuffer &b, void *, const TConfiguration *);  ; Int_t PopDataCacheGenericCollection (TBuffer &b, void *, const void *, const TLoopConfiguration *, const TConfiguration *);  ; Int_t PopDataCacheVectorPtr (TBuffer &b, void *, const void *, const TConfiguration *);  ; Int_t PushDataCache (TBuffer &b, void *, const TConfiguration *conf);  ; Int_t PushDataCacheGenericCollection (TBuffer &b, void *, const void *, const TLoopConfiguration *loopconfig, const TConfiguration *conf);  ; Int_t PushDataCacheVectorPtr (TBuffer &b, void *, const void *, const TConfiguration *conf);  ; void ReadArraySTLMemberWiseChangedClass (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t vers);  ; void ReadArraySTLMemberWiseSameClass (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t vers);  ; template<typename T > ; Int_t ReadBasicType (TBuffer &buf, void *addr, const TConfiguration *config);  ; template<> ; Int_t ReadBasicType< BitsMarker > (TBuffer &buf, void *addr, const TConfiguration *config);  ; template<typename T > ; Int_t ReadBasicType_NoFactor (TBuffer &buf, void *addr, const TConfiguration *config);  ; template<typename T > ; Int_t ReadBasicType_WithFactor (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadLoopInvalid (TBuffer &, void *, const void *, const TConfiguration *config);  ; template<void(*)(TBuffer &, void *, const TConfiguration *, Version_t) memberwise, void(*)(TBuffer &, void *, const TConfiguration *, Version_t, UInt_t) objectwise> ; Int_t ReadSTL (TBuffer &buf, void *addr, const TConfiguration *conf);  ; void ReadSTLMemberWiseChangedClass (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t vers);  ; void ReadSTLMemberWiseSameClass (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t vers);  ; void ReadSTLObjectWiseFastArray (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t, UInt_t); ",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:3267,Modifiability,config,config,3267,"&b, void *, const TConfiguration *);  ; Int_t PopDataCacheGenericCollection (TBuffer &b, void *, const void *, const TLoopConfiguration *, const TConfiguration *);  ; Int_t PopDataCacheVectorPtr (TBuffer &b, void *, const void *, const TConfiguration *);  ; Int_t PushDataCache (TBuffer &b, void *, const TConfiguration *conf);  ; Int_t PushDataCacheGenericCollection (TBuffer &b, void *, const void *, const TLoopConfiguration *loopconfig, const TConfiguration *conf);  ; Int_t PushDataCacheVectorPtr (TBuffer &b, void *, const void *, const TConfiguration *conf);  ; void ReadArraySTLMemberWiseChangedClass (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t vers);  ; void ReadArraySTLMemberWiseSameClass (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t vers);  ; template<typename T > ; Int_t ReadBasicType (TBuffer &buf, void *addr, const TConfiguration *config);  ; template<> ; Int_t ReadBasicType< BitsMarker > (TBuffer &buf, void *addr, const TConfiguration *config);  ; template<typename T > ; Int_t ReadBasicType_NoFactor (TBuffer &buf, void *addr, const TConfiguration *config);  ; template<typename T > ; Int_t ReadBasicType_WithFactor (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadLoopInvalid (TBuffer &, void *, const void *, const TConfiguration *config);  ; template<void(*)(TBuffer &, void *, const TConfiguration *, Version_t) memberwise, void(*)(TBuffer &, void *, const TConfiguration *, Version_t, UInt_t) objectwise> ; Int_t ReadSTL (TBuffer &buf, void *addr, const TConfiguration *conf);  ; void ReadSTLMemberWiseChangedClass (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t vers);  ; void ReadSTLMemberWiseSameClass (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t vers);  ; void ReadSTLObjectWiseFastArray (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t, UInt_t);  ; void ReadSTLObjectWiseFastArrayV2 (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t vers, ",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:3381,Modifiability,config,config,3381,"st TLoopConfiguration *, const TConfiguration *);  ; Int_t PopDataCacheVectorPtr (TBuffer &b, void *, const void *, const TConfiguration *);  ; Int_t PushDataCache (TBuffer &b, void *, const TConfiguration *conf);  ; Int_t PushDataCacheGenericCollection (TBuffer &b, void *, const void *, const TLoopConfiguration *loopconfig, const TConfiguration *conf);  ; Int_t PushDataCacheVectorPtr (TBuffer &b, void *, const void *, const TConfiguration *conf);  ; void ReadArraySTLMemberWiseChangedClass (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t vers);  ; void ReadArraySTLMemberWiseSameClass (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t vers);  ; template<typename T > ; Int_t ReadBasicType (TBuffer &buf, void *addr, const TConfiguration *config);  ; template<> ; Int_t ReadBasicType< BitsMarker > (TBuffer &buf, void *addr, const TConfiguration *config);  ; template<typename T > ; Int_t ReadBasicType_NoFactor (TBuffer &buf, void *addr, const TConfiguration *config);  ; template<typename T > ; Int_t ReadBasicType_WithFactor (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadLoopInvalid (TBuffer &, void *, const void *, const TConfiguration *config);  ; template<void(*)(TBuffer &, void *, const TConfiguration *, Version_t) memberwise, void(*)(TBuffer &, void *, const TConfiguration *, Version_t, UInt_t) objectwise> ; Int_t ReadSTL (TBuffer &buf, void *addr, const TConfiguration *conf);  ; void ReadSTLMemberWiseChangedClass (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t vers);  ; void ReadSTLMemberWiseSameClass (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t vers);  ; void ReadSTLObjectWiseFastArray (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t, UInt_t);  ; void ReadSTLObjectWiseFastArrayV2 (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t vers, UInt_t start);  ; void ReadSTLObjectWiseStreamer (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t,",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:3497,Modifiability,config,config,3497,"const TConfiguration *);  ; Int_t PushDataCache (TBuffer &b, void *, const TConfiguration *conf);  ; Int_t PushDataCacheGenericCollection (TBuffer &b, void *, const void *, const TLoopConfiguration *loopconfig, const TConfiguration *conf);  ; Int_t PushDataCacheVectorPtr (TBuffer &b, void *, const void *, const TConfiguration *conf);  ; void ReadArraySTLMemberWiseChangedClass (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t vers);  ; void ReadArraySTLMemberWiseSameClass (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t vers);  ; template<typename T > ; Int_t ReadBasicType (TBuffer &buf, void *addr, const TConfiguration *config);  ; template<> ; Int_t ReadBasicType< BitsMarker > (TBuffer &buf, void *addr, const TConfiguration *config);  ; template<typename T > ; Int_t ReadBasicType_NoFactor (TBuffer &buf, void *addr, const TConfiguration *config);  ; template<typename T > ; Int_t ReadBasicType_WithFactor (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadLoopInvalid (TBuffer &, void *, const void *, const TConfiguration *config);  ; template<void(*)(TBuffer &, void *, const TConfiguration *, Version_t) memberwise, void(*)(TBuffer &, void *, const TConfiguration *, Version_t, UInt_t) objectwise> ; Int_t ReadSTL (TBuffer &buf, void *addr, const TConfiguration *conf);  ; void ReadSTLMemberWiseChangedClass (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t vers);  ; void ReadSTLMemberWiseSameClass (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t vers);  ; void ReadSTLObjectWiseFastArray (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t, UInt_t);  ; void ReadSTLObjectWiseFastArrayV2 (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t vers, UInt_t start);  ; void ReadSTLObjectWiseStreamer (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t, UInt_t);  ; void ReadSTLObjectWiseStreamerV2 (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t vers,",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:3587,Modifiability,config,config,3587,"*conf);  ; Int_t PushDataCacheGenericCollection (TBuffer &b, void *, const void *, const TLoopConfiguration *loopconfig, const TConfiguration *conf);  ; Int_t PushDataCacheVectorPtr (TBuffer &b, void *, const void *, const TConfiguration *conf);  ; void ReadArraySTLMemberWiseChangedClass (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t vers);  ; void ReadArraySTLMemberWiseSameClass (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t vers);  ; template<typename T > ; Int_t ReadBasicType (TBuffer &buf, void *addr, const TConfiguration *config);  ; template<> ; Int_t ReadBasicType< BitsMarker > (TBuffer &buf, void *addr, const TConfiguration *config);  ; template<typename T > ; Int_t ReadBasicType_NoFactor (TBuffer &buf, void *addr, const TConfiguration *config);  ; template<typename T > ; Int_t ReadBasicType_WithFactor (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadLoopInvalid (TBuffer &, void *, const void *, const TConfiguration *config);  ; template<void(*)(TBuffer &, void *, const TConfiguration *, Version_t) memberwise, void(*)(TBuffer &, void *, const TConfiguration *, Version_t, UInt_t) objectwise> ; Int_t ReadSTL (TBuffer &buf, void *addr, const TConfiguration *conf);  ; void ReadSTLMemberWiseChangedClass (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t vers);  ; void ReadSTLMemberWiseSameClass (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t vers);  ; void ReadSTLObjectWiseFastArray (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t, UInt_t);  ; void ReadSTLObjectWiseFastArrayV2 (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t vers, UInt_t start);  ; void ReadSTLObjectWiseStreamer (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t, UInt_t);  ; void ReadSTLObjectWiseStreamerV2 (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t vers, UInt_t start);  ; template<bool kIsTextT> ; Int_t ReadSTLp (TBuffer &buf, void *addr, con",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:4610,Modifiability,config,config,4610,"ion *conf);  ; Int_t PushDataCacheVectorPtr (TBuffer &b, void *, const void *, const TConfiguration *conf);  ; void ReadArraySTLMemberWiseChangedClass (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t vers);  ; void ReadArraySTLMemberWiseSameClass (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t vers);  ; template<typename T > ; Int_t ReadBasicType (TBuffer &buf, void *addr, const TConfiguration *config);  ; template<> ; Int_t ReadBasicType< BitsMarker > (TBuffer &buf, void *addr, const TConfiguration *config);  ; template<typename T > ; Int_t ReadBasicType_NoFactor (TBuffer &buf, void *addr, const TConfiguration *config);  ; template<typename T > ; Int_t ReadBasicType_WithFactor (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadLoopInvalid (TBuffer &, void *, const void *, const TConfiguration *config);  ; template<void(*)(TBuffer &, void *, const TConfiguration *, Version_t) memberwise, void(*)(TBuffer &, void *, const TConfiguration *, Version_t, UInt_t) objectwise> ; Int_t ReadSTL (TBuffer &buf, void *addr, const TConfiguration *conf);  ; void ReadSTLMemberWiseChangedClass (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t vers);  ; void ReadSTLMemberWiseSameClass (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t vers);  ; void ReadSTLObjectWiseFastArray (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t, UInt_t);  ; void ReadSTLObjectWiseFastArrayV2 (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t vers, UInt_t start);  ; void ReadSTLObjectWiseStreamer (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t, UInt_t);  ; void ReadSTLObjectWiseStreamerV2 (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t vers, UInt_t start);  ; template<bool kIsTextT> ; Int_t ReadSTLp (TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming.",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:4833,Modifiability,config,config,4833,"oid ReadSTLMemberWiseChangedClass (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t vers);  ; void ReadSTLMemberWiseSameClass (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t vers);  ; void ReadSTLObjectWiseFastArray (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t, UInt_t);  ; void ReadSTLObjectWiseFastArrayV2 (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t vers, UInt_t start);  ; void ReadSTLObjectWiseStreamer (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t, UInt_t);  ; void ReadSTLObjectWiseStreamerV2 (TBuffer &buf, void *addr, const TConfiguration *conf, Version_t vers, UInt_t start);  ; template<bool kIsTextT> ; Int_t ReadSTLp (TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ;  ; template<bool kIsTextT> ; Int_t ReadStreamerLoop (TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ;  ; Int_t ReadTextBaseClass (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextObject (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextStreamer (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextTNamed (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextTObject (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextTObjectBase (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTNamed (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTObject (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTString (TBuffer &buf, void *addr, const TConfiguration *config);  ; ESelectLooper SelectLooper (TVirtualCollectionProxy &proxy);  ; Int_t UseCache (TBuffer &b, void *addr, const TConfiguration *conf);  ; Int_t Us",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:5031,Modifiability,config,config,5031,"(TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ;  ; Int_t ReadTextBaseClass (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextObject (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextStreamer (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextTNamed (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextTObject (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextTObjectBase (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTNamed (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTObject (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTString (TBuffer &buf, void *addr, const TConfiguration *config);  ; ESelectLooper SelectLooper (TVirtualCollectionProxy &proxy);  ; Int_t UseCache (TBuffer &b, void *addr, const TConfiguration *conf);  ; Int_t UseCacheGenericCollection (TBuffer &b, void *, const void *, const TLoopConfiguration *loopconfig, const TConfiguration *conf);  ; Int_t UseCacheVectorLoop (TBuffer &b, void *start, const void *end, const TLoopConfiguration *loopconf, const TConfiguration *conf);  ; Int_t UseCacheVectorPtrLoop (TBuffer &b, void *start, const void *end, const TConfiguration *conf);  ; template<typename T > ; Int_t WriteBasicType (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t WriteLoopInvalid (TBuffer &, void *, const void *, const TConfiguration *config);  ; template<bool kIsTextT> ; Int_t WriteSTLp (TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ;  ; template<bool kIsTextT> ; Int_t WriteStreamerLoop (TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAu",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:5113,Modifiability,config,config,5113,"(TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ;  ; Int_t ReadTextBaseClass (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextObject (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextStreamer (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextTNamed (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextTObject (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextTObjectBase (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTNamed (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTObject (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTString (TBuffer &buf, void *addr, const TConfiguration *config);  ; ESelectLooper SelectLooper (TVirtualCollectionProxy &proxy);  ; Int_t UseCache (TBuffer &b, void *addr, const TConfiguration *conf);  ; Int_t UseCacheGenericCollection (TBuffer &b, void *, const void *, const TLoopConfiguration *loopconfig, const TConfiguration *conf);  ; Int_t UseCacheVectorLoop (TBuffer &b, void *start, const void *end, const TLoopConfiguration *loopconf, const TConfiguration *conf);  ; Int_t UseCacheVectorPtrLoop (TBuffer &b, void *start, const void *end, const TConfiguration *conf);  ; template<typename T > ; Int_t WriteBasicType (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t WriteLoopInvalid (TBuffer &, void *, const void *, const TConfiguration *config);  ; template<bool kIsTextT> ; Int_t WriteSTLp (TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ;  ; template<bool kIsTextT> ; Int_t WriteStreamerLoop (TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAu",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:5197,Modifiability,config,config,5197,"(TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ;  ; Int_t ReadTextBaseClass (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextObject (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextStreamer (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextTNamed (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextTObject (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextTObjectBase (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTNamed (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTObject (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTString (TBuffer &buf, void *addr, const TConfiguration *config);  ; ESelectLooper SelectLooper (TVirtualCollectionProxy &proxy);  ; Int_t UseCache (TBuffer &b, void *addr, const TConfiguration *conf);  ; Int_t UseCacheGenericCollection (TBuffer &b, void *, const void *, const TLoopConfiguration *loopconfig, const TConfiguration *conf);  ; Int_t UseCacheVectorLoop (TBuffer &b, void *start, const void *end, const TLoopConfiguration *loopconf, const TConfiguration *conf);  ; Int_t UseCacheVectorPtrLoop (TBuffer &b, void *start, const void *end, const TConfiguration *conf);  ; template<typename T > ; Int_t WriteBasicType (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t WriteLoopInvalid (TBuffer &, void *, const void *, const TConfiguration *config);  ; template<bool kIsTextT> ; Int_t WriteSTLp (TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ;  ; template<bool kIsTextT> ; Int_t WriteStreamerLoop (TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAu",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:5279,Modifiability,config,config,5279,"(TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ;  ; Int_t ReadTextBaseClass (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextObject (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextStreamer (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextTNamed (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextTObject (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextTObjectBase (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTNamed (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTObject (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTString (TBuffer &buf, void *addr, const TConfiguration *config);  ; ESelectLooper SelectLooper (TVirtualCollectionProxy &proxy);  ; Int_t UseCache (TBuffer &b, void *addr, const TConfiguration *conf);  ; Int_t UseCacheGenericCollection (TBuffer &b, void *, const void *, const TLoopConfiguration *loopconfig, const TConfiguration *conf);  ; Int_t UseCacheVectorLoop (TBuffer &b, void *start, const void *end, const TLoopConfiguration *loopconf, const TConfiguration *conf);  ; Int_t UseCacheVectorPtrLoop (TBuffer &b, void *start, const void *end, const TConfiguration *conf);  ; template<typename T > ; Int_t WriteBasicType (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t WriteLoopInvalid (TBuffer &, void *, const void *, const TConfiguration *config);  ; template<bool kIsTextT> ; Int_t WriteSTLp (TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ;  ; template<bool kIsTextT> ; Int_t WriteStreamerLoop (TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAu",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:5362,Modifiability,config,config,5362,"(TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ;  ; Int_t ReadTextBaseClass (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextObject (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextStreamer (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextTNamed (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextTObject (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextTObjectBase (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTNamed (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTObject (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTString (TBuffer &buf, void *addr, const TConfiguration *config);  ; ESelectLooper SelectLooper (TVirtualCollectionProxy &proxy);  ; Int_t UseCache (TBuffer &b, void *addr, const TConfiguration *conf);  ; Int_t UseCacheGenericCollection (TBuffer &b, void *, const void *, const TLoopConfiguration *loopconfig, const TConfiguration *conf);  ; Int_t UseCacheVectorLoop (TBuffer &b, void *start, const void *end, const TLoopConfiguration *loopconf, const TConfiguration *conf);  ; Int_t UseCacheVectorPtrLoop (TBuffer &b, void *start, const void *end, const TConfiguration *conf);  ; template<typename T > ; Int_t WriteBasicType (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t WriteLoopInvalid (TBuffer &, void *, const void *, const TConfiguration *config);  ; template<bool kIsTextT> ; Int_t WriteSTLp (TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ;  ; template<bool kIsTextT> ; Int_t WriteStreamerLoop (TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAu",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:5449,Modifiability,config,config,5449,"(TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ;  ; Int_t ReadTextBaseClass (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextObject (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextStreamer (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextTNamed (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextTObject (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextTObjectBase (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTNamed (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTObject (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTString (TBuffer &buf, void *addr, const TConfiguration *config);  ; ESelectLooper SelectLooper (TVirtualCollectionProxy &proxy);  ; Int_t UseCache (TBuffer &b, void *addr, const TConfiguration *conf);  ; Int_t UseCacheGenericCollection (TBuffer &b, void *, const void *, const TLoopConfiguration *loopconfig, const TConfiguration *conf);  ; Int_t UseCacheVectorLoop (TBuffer &b, void *start, const void *end, const TLoopConfiguration *loopconf, const TConfiguration *conf);  ; Int_t UseCacheVectorPtrLoop (TBuffer &b, void *start, const void *end, const TConfiguration *conf);  ; template<typename T > ; Int_t WriteBasicType (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t WriteLoopInvalid (TBuffer &, void *, const void *, const TConfiguration *config);  ; template<bool kIsTextT> ; Int_t WriteSTLp (TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ;  ; template<bool kIsTextT> ; Int_t WriteStreamerLoop (TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAu",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:5527,Modifiability,config,config,5527,"(TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ;  ; Int_t ReadTextBaseClass (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextObject (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextStreamer (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextTNamed (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextTObject (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextTObjectBase (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTNamed (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTObject (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTString (TBuffer &buf, void *addr, const TConfiguration *config);  ; ESelectLooper SelectLooper (TVirtualCollectionProxy &proxy);  ; Int_t UseCache (TBuffer &b, void *addr, const TConfiguration *conf);  ; Int_t UseCacheGenericCollection (TBuffer &b, void *, const void *, const TLoopConfiguration *loopconfig, const TConfiguration *conf);  ; Int_t UseCacheVectorLoop (TBuffer &b, void *start, const void *end, const TLoopConfiguration *loopconf, const TConfiguration *conf);  ; Int_t UseCacheVectorPtrLoop (TBuffer &b, void *start, const void *end, const TConfiguration *conf);  ; template<typename T > ; Int_t WriteBasicType (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t WriteLoopInvalid (TBuffer &, void *, const void *, const TConfiguration *config);  ; template<bool kIsTextT> ; Int_t WriteSTLp (TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ;  ; template<bool kIsTextT> ; Int_t WriteStreamerLoop (TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAu",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:5606,Modifiability,config,config,5606,"(TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ;  ; Int_t ReadTextBaseClass (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextObject (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextStreamer (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextTNamed (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextTObject (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextTObjectBase (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTNamed (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTObject (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTString (TBuffer &buf, void *addr, const TConfiguration *config);  ; ESelectLooper SelectLooper (TVirtualCollectionProxy &proxy);  ; Int_t UseCache (TBuffer &b, void *addr, const TConfiguration *conf);  ; Int_t UseCacheGenericCollection (TBuffer &b, void *, const void *, const TLoopConfiguration *loopconfig, const TConfiguration *conf);  ; Int_t UseCacheVectorLoop (TBuffer &b, void *start, const void *end, const TLoopConfiguration *loopconf, const TConfiguration *conf);  ; Int_t UseCacheVectorPtrLoop (TBuffer &b, void *start, const void *end, const TConfiguration *conf);  ; template<typename T > ; Int_t WriteBasicType (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t WriteLoopInvalid (TBuffer &, void *, const void *, const TConfiguration *config);  ; template<bool kIsTextT> ; Int_t WriteSTLp (TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ;  ; template<bool kIsTextT> ; Int_t WriteStreamerLoop (TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAu",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:5685,Modifiability,config,config,5685,"(TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ;  ; Int_t ReadTextBaseClass (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextObject (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextStreamer (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextTNamed (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextTObject (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextTObjectBase (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTNamed (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTObject (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTString (TBuffer &buf, void *addr, const TConfiguration *config);  ; ESelectLooper SelectLooper (TVirtualCollectionProxy &proxy);  ; Int_t UseCache (TBuffer &b, void *addr, const TConfiguration *conf);  ; Int_t UseCacheGenericCollection (TBuffer &b, void *, const void *, const TLoopConfiguration *loopconfig, const TConfiguration *conf);  ; Int_t UseCacheVectorLoop (TBuffer &b, void *start, const void *end, const TLoopConfiguration *loopconf, const TConfiguration *conf);  ; Int_t UseCacheVectorPtrLoop (TBuffer &b, void *start, const void *end, const TConfiguration *conf);  ; template<typename T > ; Int_t WriteBasicType (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t WriteLoopInvalid (TBuffer &, void *, const void *, const TConfiguration *config);  ; template<bool kIsTextT> ; Int_t WriteSTLp (TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ;  ; template<bool kIsTextT> ; Int_t WriteStreamerLoop (TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAu",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:6303,Modifiability,config,config,6303,"(TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ;  ; Int_t ReadTextBaseClass (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextObject (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextStreamer (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextTNamed (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextTObject (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextTObjectBase (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTNamed (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTObject (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTString (TBuffer &buf, void *addr, const TConfiguration *config);  ; ESelectLooper SelectLooper (TVirtualCollectionProxy &proxy);  ; Int_t UseCache (TBuffer &b, void *addr, const TConfiguration *conf);  ; Int_t UseCacheGenericCollection (TBuffer &b, void *, const void *, const TLoopConfiguration *loopconfig, const TConfiguration *conf);  ; Int_t UseCacheVectorLoop (TBuffer &b, void *start, const void *end, const TLoopConfiguration *loopconf, const TConfiguration *conf);  ; Int_t UseCacheVectorPtrLoop (TBuffer &b, void *start, const void *end, const TConfiguration *conf);  ; template<typename T > ; Int_t WriteBasicType (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t WriteLoopInvalid (TBuffer &, void *, const void *, const TConfiguration *config);  ; template<bool kIsTextT> ; Int_t WriteSTLp (TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ;  ; template<bool kIsTextT> ; Int_t WriteStreamerLoop (TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAu",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:6394,Modifiability,config,config,6394,"(TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ;  ; Int_t ReadTextBaseClass (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextObject (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextStreamer (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextTNamed (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextTObject (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextTObjectBase (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTNamed (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTObject (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTString (TBuffer &buf, void *addr, const TConfiguration *config);  ; ESelectLooper SelectLooper (TVirtualCollectionProxy &proxy);  ; Int_t UseCache (TBuffer &b, void *addr, const TConfiguration *conf);  ; Int_t UseCacheGenericCollection (TBuffer &b, void *, const void *, const TLoopConfiguration *loopconfig, const TConfiguration *conf);  ; Int_t UseCacheVectorLoop (TBuffer &b, void *start, const void *end, const TLoopConfiguration *loopconf, const TConfiguration *conf);  ; Int_t UseCacheVectorPtrLoop (TBuffer &b, void *start, const void *end, const TConfiguration *conf);  ; template<typename T > ; Int_t WriteBasicType (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t WriteLoopInvalid (TBuffer &, void *, const void *, const TConfiguration *config);  ; template<bool kIsTextT> ; Int_t WriteSTLp (TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ;  ; template<bool kIsTextT> ; Int_t WriteStreamerLoop (TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAu",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:6497,Modifiability,config,config,6497,"(TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ;  ; Int_t ReadTextBaseClass (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextObject (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextStreamer (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextTNamed (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextTObject (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTextTObjectBase (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTNamed (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTObject (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t ReadTString (TBuffer &buf, void *addr, const TConfiguration *config);  ; ESelectLooper SelectLooper (TVirtualCollectionProxy &proxy);  ; Int_t UseCache (TBuffer &b, void *addr, const TConfiguration *conf);  ; Int_t UseCacheGenericCollection (TBuffer &b, void *, const void *, const TLoopConfiguration *loopconfig, const TConfiguration *conf);  ; Int_t UseCacheVectorLoop (TBuffer &b, void *start, const void *end, const TLoopConfiguration *loopconf, const TConfiguration *conf);  ; Int_t UseCacheVectorPtrLoop (TBuffer &b, void *start, const void *end, const TConfiguration *conf);  ; template<typename T > ; Int_t WriteBasicType (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t WriteLoopInvalid (TBuffer &, void *, const void *, const TConfiguration *config);  ; template<bool kIsTextT> ; Int_t WriteSTLp (TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ;  ; template<bool kIsTextT> ; Int_t WriteStreamerLoop (TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAu",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:6721,Modifiability,config,config,6721,"rtualCollectionProxy &proxy);  ; Int_t UseCache (TBuffer &b, void *addr, const TConfiguration *conf);  ; Int_t UseCacheGenericCollection (TBuffer &b, void *, const void *, const TLoopConfiguration *loopconfig, const TConfiguration *conf);  ; Int_t UseCacheVectorLoop (TBuffer &b, void *start, const void *end, const TLoopConfiguration *loopconf, const TConfiguration *conf);  ; Int_t UseCacheVectorPtrLoop (TBuffer &b, void *start, const void *end, const TConfiguration *conf);  ; template<typename T > ; Int_t WriteBasicType (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t WriteLoopInvalid (TBuffer &, void *, const void *, const TConfiguration *config);  ; template<bool kIsTextT> ; Int_t WriteSTLp (TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ;  ; template<bool kIsTextT> ; Int_t WriteStreamerLoop (TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ;  ; Int_t WriteTextBaseClass (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t WriteTextStreamer (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t WriteTextTNamed (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t WriteTextTObject (TBuffer &buf, void *addr, const TConfiguration *config);  . Typedef Documentation. ◆ ActionContainer_t. typedef std::vector<TConfiguredAction> TStreamerInfoActions::ActionContainer_t. Definition at line 176 of file TStreamerInfoActions.h. ◆ Next_t. typedef TVirtualCollectionProxy::Next_t TStreamerInfoActions::Next_t. Definition at line 68 of file TStreamerInfoActions.h. ◆ TIDs. using TStreamerInfoActions::TIDs = typedef std::vector<TIDNode>. Definition at line 138 of file TStreamerInfoActions.h. ◆ TStreamerInfoAction_t. typedef Int_t(* TStreamerInfoActions::TStreamerInfoAction_t) (TBuffer &buf, vo",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:6920,Modifiability,config,config,6920,"d *start, const void *end, const TLoopConfiguration *loopconf, const TConfiguration *conf);  ; Int_t UseCacheVectorPtrLoop (TBuffer &b, void *start, const void *end, const TConfiguration *conf);  ; template<typename T > ; Int_t WriteBasicType (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t WriteLoopInvalid (TBuffer &, void *, const void *, const TConfiguration *config);  ; template<bool kIsTextT> ; Int_t WriteSTLp (TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ;  ; template<bool kIsTextT> ; Int_t WriteStreamerLoop (TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ;  ; Int_t WriteTextBaseClass (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t WriteTextStreamer (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t WriteTextTNamed (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t WriteTextTObject (TBuffer &buf, void *addr, const TConfiguration *config);  . Typedef Documentation. ◆ ActionContainer_t. typedef std::vector<TConfiguredAction> TStreamerInfoActions::ActionContainer_t. Definition at line 176 of file TStreamerInfoActions.h. ◆ Next_t. typedef TVirtualCollectionProxy::Next_t TStreamerInfoActions::Next_t. Definition at line 68 of file TStreamerInfoActions.h. ◆ TIDs. using TStreamerInfoActions::TIDs = typedef std::vector<TIDNode>. Definition at line 138 of file TStreamerInfoActions.h. ◆ TStreamerInfoAction_t. typedef Int_t(* TStreamerInfoActions::TStreamerInfoAction_t) (TBuffer &buf, void *obj, const TConfiguration *conf). Definition at line 70 of file TStreamerInfoActions.h. ◆ TStreamerInfoLoopAction_t. typedef Int_t(* TStreamerInfoActions::TStreamerInfoLoopAction_t) (TBuffer &buf, void *iter, const void *end, const TLoopConfiguration *loopconf, const TConfigurati",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:7005,Modifiability,config,config,7005,"d *start, const void *end, const TLoopConfiguration *loopconf, const TConfiguration *conf);  ; Int_t UseCacheVectorPtrLoop (TBuffer &b, void *start, const void *end, const TConfiguration *conf);  ; template<typename T > ; Int_t WriteBasicType (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t WriteLoopInvalid (TBuffer &, void *, const void *, const TConfiguration *config);  ; template<bool kIsTextT> ; Int_t WriteSTLp (TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ;  ; template<bool kIsTextT> ; Int_t WriteStreamerLoop (TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ;  ; Int_t WriteTextBaseClass (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t WriteTextStreamer (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t WriteTextTNamed (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t WriteTextTObject (TBuffer &buf, void *addr, const TConfiguration *config);  . Typedef Documentation. ◆ ActionContainer_t. typedef std::vector<TConfiguredAction> TStreamerInfoActions::ActionContainer_t. Definition at line 176 of file TStreamerInfoActions.h. ◆ Next_t. typedef TVirtualCollectionProxy::Next_t TStreamerInfoActions::Next_t. Definition at line 68 of file TStreamerInfoActions.h. ◆ TIDs. using TStreamerInfoActions::TIDs = typedef std::vector<TIDNode>. Definition at line 138 of file TStreamerInfoActions.h. ◆ TStreamerInfoAction_t. typedef Int_t(* TStreamerInfoActions::TStreamerInfoAction_t) (TBuffer &buf, void *obj, const TConfiguration *conf). Definition at line 70 of file TStreamerInfoActions.h. ◆ TStreamerInfoLoopAction_t. typedef Int_t(* TStreamerInfoActions::TStreamerInfoLoopAction_t) (TBuffer &buf, void *iter, const void *end, const TLoopConfiguration *loopconf, const TConfigurati",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:7088,Modifiability,config,config,7088,"d *start, const void *end, const TLoopConfiguration *loopconf, const TConfiguration *conf);  ; Int_t UseCacheVectorPtrLoop (TBuffer &b, void *start, const void *end, const TConfiguration *conf);  ; template<typename T > ; Int_t WriteBasicType (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t WriteLoopInvalid (TBuffer &, void *, const void *, const TConfiguration *config);  ; template<bool kIsTextT> ; Int_t WriteSTLp (TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ;  ; template<bool kIsTextT> ; Int_t WriteStreamerLoop (TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ;  ; Int_t WriteTextBaseClass (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t WriteTextStreamer (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t WriteTextTNamed (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t WriteTextTObject (TBuffer &buf, void *addr, const TConfiguration *config);  . Typedef Documentation. ◆ ActionContainer_t. typedef std::vector<TConfiguredAction> TStreamerInfoActions::ActionContainer_t. Definition at line 176 of file TStreamerInfoActions.h. ◆ Next_t. typedef TVirtualCollectionProxy::Next_t TStreamerInfoActions::Next_t. Definition at line 68 of file TStreamerInfoActions.h. ◆ TIDs. using TStreamerInfoActions::TIDs = typedef std::vector<TIDNode>. Definition at line 138 of file TStreamerInfoActions.h. ◆ TStreamerInfoAction_t. typedef Int_t(* TStreamerInfoActions::TStreamerInfoAction_t) (TBuffer &buf, void *obj, const TConfiguration *conf). Definition at line 70 of file TStreamerInfoActions.h. ◆ TStreamerInfoLoopAction_t. typedef Int_t(* TStreamerInfoActions::TStreamerInfoLoopAction_t) (TBuffer &buf, void *iter, const void *end, const TLoopConfiguration *loopconf, const TConfigurati",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:7172,Modifiability,config,config,7172,"d *start, const void *end, const TLoopConfiguration *loopconf, const TConfiguration *conf);  ; Int_t UseCacheVectorPtrLoop (TBuffer &b, void *start, const void *end, const TConfiguration *conf);  ; template<typename T > ; Int_t WriteBasicType (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t WriteLoopInvalid (TBuffer &, void *, const void *, const TConfiguration *config);  ; template<bool kIsTextT> ; Int_t WriteSTLp (TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ;  ; template<bool kIsTextT> ; Int_t WriteStreamerLoop (TBuffer &buf, void *addr, const TConfiguration *config);  Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ;  ; Int_t WriteTextBaseClass (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t WriteTextStreamer (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t WriteTextTNamed (TBuffer &buf, void *addr, const TConfiguration *config);  ; Int_t WriteTextTObject (TBuffer &buf, void *addr, const TConfiguration *config);  . Typedef Documentation. ◆ ActionContainer_t. typedef std::vector<TConfiguredAction> TStreamerInfoActions::ActionContainer_t. Definition at line 176 of file TStreamerInfoActions.h. ◆ Next_t. typedef TVirtualCollectionProxy::Next_t TStreamerInfoActions::Next_t. Definition at line 68 of file TStreamerInfoActions.h. ◆ TIDs. using TStreamerInfoActions::TIDs = typedef std::vector<TIDNode>. Definition at line 138 of file TStreamerInfoActions.h. ◆ TStreamerInfoAction_t. typedef Int_t(* TStreamerInfoActions::TStreamerInfoAction_t) (TBuffer &buf, void *obj, const TConfiguration *conf). Definition at line 70 of file TStreamerInfoActions.h. ◆ TStreamerInfoLoopAction_t. typedef Int_t(* TStreamerInfoActions::TStreamerInfoLoopAction_t) (TBuffer &buf, void *iter, const void *end, const TLoopConfiguration *loopconf, const TConfigurati",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:8701,Modifiability,config,config,8701,"eamerInfoAction_t) (TBuffer &buf, void *obj, const TConfiguration *conf). Definition at line 70 of file TStreamerInfoActions.h. ◆ TStreamerInfoLoopAction_t. typedef Int_t(* TStreamerInfoActions::TStreamerInfoLoopAction_t) (TBuffer &buf, void *iter, const void *end, const TLoopConfiguration *loopconf, const TConfiguration *conf). Definition at line 72 of file TStreamerInfoActions.h. ◆ TStreamerInfoVecPtrLoopAction_t. typedef Int_t(* TStreamerInfoActions::TStreamerInfoVecPtrLoopAction_t) (TBuffer &buf, void *iter, const void *end, const TConfiguration *conf). Definition at line 71 of file TStreamerInfoActions.h. Enumeration Type Documentation. ◆ ESelectLooper. enum TStreamerInfoActions::ESelectLooper. EnumeratorkVectorLooper ; kVectorPtrLooper ; kAssociativeLooper ; kGenericLooper . Definition at line 1697 of file TStreamerInfoActions.cxx. Function Documentation. ◆ GenericReadAction(). Int_t TStreamerInfoActions::GenericReadAction ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). Definition at line 191 of file TStreamerInfoActions.cxx. ◆ GenericWriteAction(). Int_t TStreamerInfoActions::GenericWriteAction ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). Definition at line 198 of file TStreamerInfoActions.cxx. ◆ HandleReferencedTObject(). void TStreamerInfoActions::HandleReferencedTObject ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). Definition at line 214 of file TStreamerInfoActions.cxx. ◆ IsDefaultVector(). bool TStreamerInfoActions::IsDefaultVector ; (; TVirtualCollectionProxy & ; proxy). Definition at line 47 of file TStreamerInfoActions.cxx. ◆ PopDataCache(). Int_t TStreamerInfoActions::PopDataCache ; (; TBuffer & ; b, . void * ; , . const TConfiguration * ;  . ). Definition at line 1534 of file TStreamerInfoActions.cxx. ◆ PopDataCacheGenericCollection(). Int_t TStreamerInfoActions::PopDataCacheGenericCollection ; (; TBuffer & ; b, . void * ; , . const void * ; , . const TLoo",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:8907,Modifiability,config,config,8907,"foLoopAction_t) (TBuffer &buf, void *iter, const void *end, const TLoopConfiguration *loopconf, const TConfiguration *conf). Definition at line 72 of file TStreamerInfoActions.h. ◆ TStreamerInfoVecPtrLoopAction_t. typedef Int_t(* TStreamerInfoActions::TStreamerInfoVecPtrLoopAction_t) (TBuffer &buf, void *iter, const void *end, const TConfiguration *conf). Definition at line 71 of file TStreamerInfoActions.h. Enumeration Type Documentation. ◆ ESelectLooper. enum TStreamerInfoActions::ESelectLooper. EnumeratorkVectorLooper ; kVectorPtrLooper ; kAssociativeLooper ; kGenericLooper . Definition at line 1697 of file TStreamerInfoActions.cxx. Function Documentation. ◆ GenericReadAction(). Int_t TStreamerInfoActions::GenericReadAction ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). Definition at line 191 of file TStreamerInfoActions.cxx. ◆ GenericWriteAction(). Int_t TStreamerInfoActions::GenericWriteAction ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). Definition at line 198 of file TStreamerInfoActions.cxx. ◆ HandleReferencedTObject(). void TStreamerInfoActions::HandleReferencedTObject ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). Definition at line 214 of file TStreamerInfoActions.cxx. ◆ IsDefaultVector(). bool TStreamerInfoActions::IsDefaultVector ; (; TVirtualCollectionProxy & ; proxy). Definition at line 47 of file TStreamerInfoActions.cxx. ◆ PopDataCache(). Int_t TStreamerInfoActions::PopDataCache ; (; TBuffer & ; b, . void * ; , . const TConfiguration * ;  . ). Definition at line 1534 of file TStreamerInfoActions.cxx. ◆ PopDataCacheGenericCollection(). Int_t TStreamerInfoActions::PopDataCacheGenericCollection ; (; TBuffer & ; b, . void * ; , . const void * ; , . const TLoopConfiguration * ; , . const TConfiguration * ;  . ). Definition at line 1546 of file TStreamerInfoActions.cxx. ◆ PopDataCacheVectorPtr(). Int_t TStreamerInfoActions::PopDataCacheVectorPtr ; (; TBuffer & ; ",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:9122,Modifiability,config,config,9122,"ypedef Int_t(* TStreamerInfoActions::TStreamerInfoVecPtrLoopAction_t) (TBuffer &buf, void *iter, const void *end, const TConfiguration *conf). Definition at line 71 of file TStreamerInfoActions.h. Enumeration Type Documentation. ◆ ESelectLooper. enum TStreamerInfoActions::ESelectLooper. EnumeratorkVectorLooper ; kVectorPtrLooper ; kAssociativeLooper ; kGenericLooper . Definition at line 1697 of file TStreamerInfoActions.cxx. Function Documentation. ◆ GenericReadAction(). Int_t TStreamerInfoActions::GenericReadAction ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). Definition at line 191 of file TStreamerInfoActions.cxx. ◆ GenericWriteAction(). Int_t TStreamerInfoActions::GenericWriteAction ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). Definition at line 198 of file TStreamerInfoActions.cxx. ◆ HandleReferencedTObject(). void TStreamerInfoActions::HandleReferencedTObject ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). Definition at line 214 of file TStreamerInfoActions.cxx. ◆ IsDefaultVector(). bool TStreamerInfoActions::IsDefaultVector ; (; TVirtualCollectionProxy & ; proxy). Definition at line 47 of file TStreamerInfoActions.cxx. ◆ PopDataCache(). Int_t TStreamerInfoActions::PopDataCache ; (; TBuffer & ; b, . void * ; , . const TConfiguration * ;  . ). Definition at line 1534 of file TStreamerInfoActions.cxx. ◆ PopDataCacheGenericCollection(). Int_t TStreamerInfoActions::PopDataCacheGenericCollection ; (; TBuffer & ; b, . void * ; , . const void * ; , . const TLoopConfiguration * ; , . const TConfiguration * ;  . ). Definition at line 1546 of file TStreamerInfoActions.cxx. ◆ PopDataCacheVectorPtr(). Int_t TStreamerInfoActions::PopDataCacheVectorPtr ; (; TBuffer & ; b, . void * ; , . const void * ; , . const TConfiguration * ;  . ). Definition at line 1540 of file TStreamerInfoActions.cxx. ◆ PushDataCache(). Int_t TStreamerInfoActions::PushDataCache ; (; TBuffer & ; b, . void *",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:11399,Modifiability,config,config,11399," loopconfig, . const TConfiguration * ; conf . ). Definition at line 1520 of file TStreamerInfoActions.cxx. ◆ PushDataCacheVectorPtr(). Int_t TStreamerInfoActions::PushDataCacheVectorPtr ; (; TBuffer & ; b, . void * ; , . const void * ; , . const TConfiguration * ; conf . ). Definition at line 1509 of file TStreamerInfoActions.cxx. ◆ ReadArraySTLMemberWiseChangedClass(). void TStreamerInfoActions::ReadArraySTLMemberWiseChangedClass ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; conf, . Version_t ; vers . ). inline . Definition at line 1310 of file TStreamerInfoActions.cxx. ◆ ReadArraySTLMemberWiseSameClass(). void TStreamerInfoActions::ReadArraySTLMemberWiseSameClass ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; conf, . Version_t ; vers . ). inline . Definition at line 1188 of file TStreamerInfoActions.cxx. ◆ ReadBasicType(). template<typename T > . Int_t TStreamerInfoActions::ReadBasicType ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 206 of file TStreamerInfoActions.cxx. ◆ ReadBasicType< BitsMarker >(). template<> . Int_t TStreamerInfoActions::ReadBasicType< BitsMarker > ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 235 of file TStreamerInfoActions.cxx. ◆ ReadBasicType_NoFactor(). template<typename T > . Int_t TStreamerInfoActions::ReadBasicType_NoFactor ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 919 of file TStreamerInfoActions.cxx. ◆ ReadBasicType_WithFactor(). template<typename T > . Int_t TStreamerInfoActions::ReadBasicType_WithFactor ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 900 of file TStreamerInfoActions.cxx. ◆ ReadLoopInvalid(). Int_t TStreamerInfoActions::ReadLoopInvalid ; (; TBuffer & ; , . void * ; , . const void * ; , . const TConfiguration * ; config . ). Definition at ",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:11645,Modifiability,config,config,11645," TConfiguration * ; conf . ). Definition at line 1509 of file TStreamerInfoActions.cxx. ◆ ReadArraySTLMemberWiseChangedClass(). void TStreamerInfoActions::ReadArraySTLMemberWiseChangedClass ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; conf, . Version_t ; vers . ). inline . Definition at line 1310 of file TStreamerInfoActions.cxx. ◆ ReadArraySTLMemberWiseSameClass(). void TStreamerInfoActions::ReadArraySTLMemberWiseSameClass ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; conf, . Version_t ; vers . ). inline . Definition at line 1188 of file TStreamerInfoActions.cxx. ◆ ReadBasicType(). template<typename T > . Int_t TStreamerInfoActions::ReadBasicType ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 206 of file TStreamerInfoActions.cxx. ◆ ReadBasicType< BitsMarker >(). template<> . Int_t TStreamerInfoActions::ReadBasicType< BitsMarker > ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 235 of file TStreamerInfoActions.cxx. ◆ ReadBasicType_NoFactor(). template<typename T > . Int_t TStreamerInfoActions::ReadBasicType_NoFactor ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 919 of file TStreamerInfoActions.cxx. ◆ ReadBasicType_WithFactor(). template<typename T > . Int_t TStreamerInfoActions::ReadBasicType_WithFactor ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 900 of file TStreamerInfoActions.cxx. ◆ ReadLoopInvalid(). Int_t TStreamerInfoActions::ReadLoopInvalid ; (; TBuffer & ; , . void * ; , . const void * ; , . const TConfiguration * ; config . ). Definition at line 1685 of file TStreamerInfoActions.cxx. ◆ ReadSTL(). template<void(*)(TBuffer &, void *, const TConfiguration *, Version_t) memberwise, void(*)(TBuffer &, void *, const TConfiguration *, Version_t, UInt_t) objectwise> . Int_t TStreamerInfoAct",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:11892,Modifiability,config,config,11892,"tion * ; conf, . Version_t ; vers . ). inline . Definition at line 1310 of file TStreamerInfoActions.cxx. ◆ ReadArraySTLMemberWiseSameClass(). void TStreamerInfoActions::ReadArraySTLMemberWiseSameClass ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; conf, . Version_t ; vers . ). inline . Definition at line 1188 of file TStreamerInfoActions.cxx. ◆ ReadBasicType(). template<typename T > . Int_t TStreamerInfoActions::ReadBasicType ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 206 of file TStreamerInfoActions.cxx. ◆ ReadBasicType< BitsMarker >(). template<> . Int_t TStreamerInfoActions::ReadBasicType< BitsMarker > ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 235 of file TStreamerInfoActions.cxx. ◆ ReadBasicType_NoFactor(). template<typename T > . Int_t TStreamerInfoActions::ReadBasicType_NoFactor ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 919 of file TStreamerInfoActions.cxx. ◆ ReadBasicType_WithFactor(). template<typename T > . Int_t TStreamerInfoActions::ReadBasicType_WithFactor ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 900 of file TStreamerInfoActions.cxx. ◆ ReadLoopInvalid(). Int_t TStreamerInfoActions::ReadLoopInvalid ; (; TBuffer & ; , . void * ; , . const void * ; , . const TConfiguration * ; config . ). Definition at line 1685 of file TStreamerInfoActions.cxx. ◆ ReadSTL(). template<void(*)(TBuffer &, void *, const TConfiguration *, Version_t) memberwise, void(*)(TBuffer &, void *, const TConfiguration *, Version_t, UInt_t) objectwise> . Int_t TStreamerInfoActions::ReadSTL ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; conf . ). inline . Definition at line 1399 of file TStreamerInfoActions.cxx. ◆ ReadSTLMemberWiseChangedClass(). void TStreamerInfoActions::ReadSTLMemberWiseChangedClas",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:12143,Modifiability,config,config,12143,"onfiguration * ; conf, . Version_t ; vers . ). inline . Definition at line 1188 of file TStreamerInfoActions.cxx. ◆ ReadBasicType(). template<typename T > . Int_t TStreamerInfoActions::ReadBasicType ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 206 of file TStreamerInfoActions.cxx. ◆ ReadBasicType< BitsMarker >(). template<> . Int_t TStreamerInfoActions::ReadBasicType< BitsMarker > ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 235 of file TStreamerInfoActions.cxx. ◆ ReadBasicType_NoFactor(). template<typename T > . Int_t TStreamerInfoActions::ReadBasicType_NoFactor ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 919 of file TStreamerInfoActions.cxx. ◆ ReadBasicType_WithFactor(). template<typename T > . Int_t TStreamerInfoActions::ReadBasicType_WithFactor ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 900 of file TStreamerInfoActions.cxx. ◆ ReadLoopInvalid(). Int_t TStreamerInfoActions::ReadLoopInvalid ; (; TBuffer & ; , . void * ; , . const void * ; , . const TConfiguration * ; config . ). Definition at line 1685 of file TStreamerInfoActions.cxx. ◆ ReadSTL(). template<void(*)(TBuffer &, void *, const TConfiguration *, Version_t) memberwise, void(*)(TBuffer &, void *, const TConfiguration *, Version_t, UInt_t) objectwise> . Int_t TStreamerInfoActions::ReadSTL ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; conf . ). inline . Definition at line 1399 of file TStreamerInfoActions.cxx. ◆ ReadSTLMemberWiseChangedClass(). void TStreamerInfoActions::ReadSTLMemberWiseChangedClass ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; conf, . Version_t ; vers . ). inline . Definition at line 1266 of file TStreamerInfoActions.cxx. ◆ ReadSTLMemberWiseSameClass(). void TStreamerInfoActions::ReadSTLMemberWiseSameClass ",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:12364,Modifiability,config,config,12364,". void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 206 of file TStreamerInfoActions.cxx. ◆ ReadBasicType< BitsMarker >(). template<> . Int_t TStreamerInfoActions::ReadBasicType< BitsMarker > ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 235 of file TStreamerInfoActions.cxx. ◆ ReadBasicType_NoFactor(). template<typename T > . Int_t TStreamerInfoActions::ReadBasicType_NoFactor ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 919 of file TStreamerInfoActions.cxx. ◆ ReadBasicType_WithFactor(). template<typename T > . Int_t TStreamerInfoActions::ReadBasicType_WithFactor ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 900 of file TStreamerInfoActions.cxx. ◆ ReadLoopInvalid(). Int_t TStreamerInfoActions::ReadLoopInvalid ; (; TBuffer & ; , . void * ; , . const void * ; , . const TConfiguration * ; config . ). Definition at line 1685 of file TStreamerInfoActions.cxx. ◆ ReadSTL(). template<void(*)(TBuffer &, void *, const TConfiguration *, Version_t) memberwise, void(*)(TBuffer &, void *, const TConfiguration *, Version_t, UInt_t) objectwise> . Int_t TStreamerInfoActions::ReadSTL ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; conf . ). inline . Definition at line 1399 of file TStreamerInfoActions.cxx. ◆ ReadSTLMemberWiseChangedClass(). void TStreamerInfoActions::ReadSTLMemberWiseChangedClass ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; conf, . Version_t ; vers . ). inline . Definition at line 1266 of file TStreamerInfoActions.cxx. ◆ ReadSTLMemberWiseSameClass(). void TStreamerInfoActions::ReadSTLMemberWiseSameClass ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; conf, . Version_t ; vers . ). inline . Definition at line 1122 of file TStreamerInfoActions.cxx. ◆ ReadSTLObjectWiseFastArray(). void TStreamerInfoActions:",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:14494,Modifiability,config,config,14494,"). inline . Definition at line 1360 of file TStreamerInfoActions.cxx. ◆ ReadSTLObjectWiseFastArrayV2(). void TStreamerInfoActions::ReadSTLObjectWiseFastArrayV2 ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; conf, . Version_t ; vers, . UInt_t ; start . ). inline . Definition at line 1371 of file TStreamerInfoActions.cxx. ◆ ReadSTLObjectWiseStreamer(). void TStreamerInfoActions::ReadSTLObjectWiseStreamer ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; conf, . Version_t ; , . UInt_t ;  . ). inline . Definition at line 1366 of file TStreamerInfoActions.cxx. ◆ ReadSTLObjectWiseStreamerV2(). void TStreamerInfoActions::ReadSTLObjectWiseStreamerV2 ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; conf, . Version_t ; vers, . UInt_t ; start . ). inline . Definition at line 1384 of file TStreamerInfoActions.cxx. ◆ ReadSTLp(). template<bool kIsTextT> . Int_t TStreamerInfoActions::ReadSTLp ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ; Definition at line 408 of file TStreamerInfoActions.cxx. ◆ ReadStreamerLoop(). template<bool kIsTextT> . Int_t TStreamerInfoActions::ReadStreamerLoop ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ; Definition at line 638 of file TStreamerInfoActions.cxx. ◆ ReadTextBaseClass(). Int_t TStreamerInfoActions::ReadTextBaseClass ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 307 of file TStreamerInfoActions.cxx. ◆ ReadTextObject(). Int_t TStreamerInfoActions::ReadTextObject ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 293 of file TStreamerInfoActions.cxx. ◆ ReadTextStreamer(). Int_t TStr",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:14843,Modifiability,config,config,14843,"LObjectWiseStreamer(). void TStreamerInfoActions::ReadSTLObjectWiseStreamer ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; conf, . Version_t ; , . UInt_t ;  . ). inline . Definition at line 1366 of file TStreamerInfoActions.cxx. ◆ ReadSTLObjectWiseStreamerV2(). void TStreamerInfoActions::ReadSTLObjectWiseStreamerV2 ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; conf, . Version_t ; vers, . UInt_t ; start . ). inline . Definition at line 1384 of file TStreamerInfoActions.cxx. ◆ ReadSTLp(). template<bool kIsTextT> . Int_t TStreamerInfoActions::ReadSTLp ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ; Definition at line 408 of file TStreamerInfoActions.cxx. ◆ ReadStreamerLoop(). template<bool kIsTextT> . Int_t TStreamerInfoActions::ReadStreamerLoop ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ; Definition at line 638 of file TStreamerInfoActions.cxx. ◆ ReadTextBaseClass(). Int_t TStreamerInfoActions::ReadTextBaseClass ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 307 of file TStreamerInfoActions.cxx. ◆ ReadTextObject(). Int_t TStreamerInfoActions::ReadTextObject ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 293 of file TStreamerInfoActions.cxx. ◆ ReadTextStreamer(). Int_t TStreamerInfoActions::ReadTextStreamer ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 315 of file TStreamerInfoActions.cxx. ◆ ReadTextTNamed(). Int_t TStreamerInfoActions::ReadTextTNamed ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 3",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:15168,Modifiability,config,config,15168,"StreamerV2 ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; conf, . Version_t ; vers, . UInt_t ; start . ). inline . Definition at line 1384 of file TStreamerInfoActions.cxx. ◆ ReadSTLp(). template<bool kIsTextT> . Int_t TStreamerInfoActions::ReadSTLp ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ; Definition at line 408 of file TStreamerInfoActions.cxx. ◆ ReadStreamerLoop(). template<bool kIsTextT> . Int_t TStreamerInfoActions::ReadStreamerLoop ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ; Definition at line 638 of file TStreamerInfoActions.cxx. ◆ ReadTextBaseClass(). Int_t TStreamerInfoActions::ReadTextBaseClass ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 307 of file TStreamerInfoActions.cxx. ◆ ReadTextObject(). Int_t TStreamerInfoActions::ReadTextObject ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 293 of file TStreamerInfoActions.cxx. ◆ ReadTextStreamer(). Int_t TStreamerInfoActions::ReadTextStreamer ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 315 of file TStreamerInfoActions.cxx. ◆ ReadTextTNamed(). Int_t TStreamerInfoActions::ReadTextTNamed ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 335 of file TStreamerInfoActions.cxx. ◆ ReadTextTObject(). Int_t TStreamerInfoActions::ReadTextTObject ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 300 of file TStreamerInfoActions.cxx. ◆ ReadTextTObjectBase(). Int_t TStreamerInfoActions::ReadTextTObjectBase ; (; T",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:15375,Modifiability,config,config,15375,"emplate<bool kIsTextT> . Int_t TStreamerInfoActions::ReadSTLp ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ; Definition at line 408 of file TStreamerInfoActions.cxx. ◆ ReadStreamerLoop(). template<bool kIsTextT> . Int_t TStreamerInfoActions::ReadStreamerLoop ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ; Definition at line 638 of file TStreamerInfoActions.cxx. ◆ ReadTextBaseClass(). Int_t TStreamerInfoActions::ReadTextBaseClass ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 307 of file TStreamerInfoActions.cxx. ◆ ReadTextObject(). Int_t TStreamerInfoActions::ReadTextObject ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 293 of file TStreamerInfoActions.cxx. ◆ ReadTextStreamer(). Int_t TStreamerInfoActions::ReadTextStreamer ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 315 of file TStreamerInfoActions.cxx. ◆ ReadTextTNamed(). Int_t TStreamerInfoActions::ReadTextTNamed ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 335 of file TStreamerInfoActions.cxx. ◆ ReadTextTObject(). Int_t TStreamerInfoActions::ReadTextTObject ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 300 of file TStreamerInfoActions.cxx. ◆ ReadTextTObjectBase(). Int_t TStreamerInfoActions::ReadTextTObjectBase ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 327 of file TStreamerInfoActions.cxx. ◆ ReadTNamed(). Int_t TStreamerInfoActions::ReadTNamed ; (; TBuffer &",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:15586,Modifiability,config,config,15586,"ially can be used later for non-text streaming. ; Definition at line 408 of file TStreamerInfoActions.cxx. ◆ ReadStreamerLoop(). template<bool kIsTextT> . Int_t TStreamerInfoActions::ReadStreamerLoop ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ; Definition at line 638 of file TStreamerInfoActions.cxx. ◆ ReadTextBaseClass(). Int_t TStreamerInfoActions::ReadTextBaseClass ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 307 of file TStreamerInfoActions.cxx. ◆ ReadTextObject(). Int_t TStreamerInfoActions::ReadTextObject ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 293 of file TStreamerInfoActions.cxx. ◆ ReadTextStreamer(). Int_t TStreamerInfoActions::ReadTextStreamer ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 315 of file TStreamerInfoActions.cxx. ◆ ReadTextTNamed(). Int_t TStreamerInfoActions::ReadTextTNamed ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 335 of file TStreamerInfoActions.cxx. ◆ ReadTextTObject(). Int_t TStreamerInfoActions::ReadTextTObject ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 300 of file TStreamerInfoActions.cxx. ◆ ReadTextTObjectBase(). Int_t TStreamerInfoActions::ReadTextTObjectBase ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 327 of file TStreamerInfoActions.cxx. ◆ ReadTNamed(). Int_t TStreamerInfoActions::ReadTNamed ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 950 of file TStreamerInfoActions.cxx. ◆ ReadTObject(). Int_t TStreamerInfoActions::ReadTObject ; (; TBuffer & ; buf, . ",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:15793,Modifiability,config,config,15793,"uffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ; Definition at line 638 of file TStreamerInfoActions.cxx. ◆ ReadTextBaseClass(). Int_t TStreamerInfoActions::ReadTextBaseClass ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 307 of file TStreamerInfoActions.cxx. ◆ ReadTextObject(). Int_t TStreamerInfoActions::ReadTextObject ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 293 of file TStreamerInfoActions.cxx. ◆ ReadTextStreamer(). Int_t TStreamerInfoActions::ReadTextStreamer ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 315 of file TStreamerInfoActions.cxx. ◆ ReadTextTNamed(). Int_t TStreamerInfoActions::ReadTextTNamed ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 335 of file TStreamerInfoActions.cxx. ◆ ReadTextTObject(). Int_t TStreamerInfoActions::ReadTextTObject ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 300 of file TStreamerInfoActions.cxx. ◆ ReadTextTObjectBase(). Int_t TStreamerInfoActions::ReadTextTObjectBase ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 327 of file TStreamerInfoActions.cxx. ◆ ReadTNamed(). Int_t TStreamerInfoActions::ReadTNamed ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 950 of file TStreamerInfoActions.cxx. ◆ ReadTObject(). Int_t TStreamerInfoActions::ReadTObject ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 940 of file TStreamerInfoActions.cxx. ◆ ReadTString(). Int_t TStreamerInfoActions::ReadTString ; (; TBuffer & ; buf, . void *",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:16002,Modifiability,config,config,16002,"e 638 of file TStreamerInfoActions.cxx. ◆ ReadTextBaseClass(). Int_t TStreamerInfoActions::ReadTextBaseClass ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 307 of file TStreamerInfoActions.cxx. ◆ ReadTextObject(). Int_t TStreamerInfoActions::ReadTextObject ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 293 of file TStreamerInfoActions.cxx. ◆ ReadTextStreamer(). Int_t TStreamerInfoActions::ReadTextStreamer ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 315 of file TStreamerInfoActions.cxx. ◆ ReadTextTNamed(). Int_t TStreamerInfoActions::ReadTextTNamed ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 335 of file TStreamerInfoActions.cxx. ◆ ReadTextTObject(). Int_t TStreamerInfoActions::ReadTextTObject ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 300 of file TStreamerInfoActions.cxx. ◆ ReadTextTObjectBase(). Int_t TStreamerInfoActions::ReadTextTObjectBase ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 327 of file TStreamerInfoActions.cxx. ◆ ReadTNamed(). Int_t TStreamerInfoActions::ReadTNamed ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 950 of file TStreamerInfoActions.cxx. ◆ ReadTObject(). Int_t TStreamerInfoActions::ReadTObject ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 940 of file TStreamerInfoActions.cxx. ◆ ReadTString(). Int_t TStreamerInfoActions::ReadTString ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 930 of file TStreamerInfoActions.cxx. ◆ SelectLooper(). ESelectLooper TStreamerInfoActions::SelectLooper ; (; TVirtualCollectionProxy",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:16219,Modifiability,config,config,16219,"7 of file TStreamerInfoActions.cxx. ◆ ReadTextObject(). Int_t TStreamerInfoActions::ReadTextObject ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 293 of file TStreamerInfoActions.cxx. ◆ ReadTextStreamer(). Int_t TStreamerInfoActions::ReadTextStreamer ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 315 of file TStreamerInfoActions.cxx. ◆ ReadTextTNamed(). Int_t TStreamerInfoActions::ReadTextTNamed ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 335 of file TStreamerInfoActions.cxx. ◆ ReadTextTObject(). Int_t TStreamerInfoActions::ReadTextTObject ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 300 of file TStreamerInfoActions.cxx. ◆ ReadTextTObjectBase(). Int_t TStreamerInfoActions::ReadTextTObjectBase ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 327 of file TStreamerInfoActions.cxx. ◆ ReadTNamed(). Int_t TStreamerInfoActions::ReadTNamed ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 950 of file TStreamerInfoActions.cxx. ◆ ReadTObject(). Int_t TStreamerInfoActions::ReadTObject ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 940 of file TStreamerInfoActions.cxx. ◆ ReadTString(). Int_t TStreamerInfoActions::ReadTString ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 930 of file TStreamerInfoActions.cxx. ◆ SelectLooper(). ESelectLooper TStreamerInfoActions::SelectLooper ; (; TVirtualCollectionProxy & ; proxy). Definition at line 1699 of file TStreamerInfoActions.cxx. ◆ UseCache(). Int_t TStreamerInfoActions::UseCache ; (; TBuffer & ; b, . void * ; addr, . const TConfiguration * ; conf . ). inline . Definition a",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:16418,Modifiability,config,config,16418," line 293 of file TStreamerInfoActions.cxx. ◆ ReadTextStreamer(). Int_t TStreamerInfoActions::ReadTextStreamer ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 315 of file TStreamerInfoActions.cxx. ◆ ReadTextTNamed(). Int_t TStreamerInfoActions::ReadTextTNamed ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 335 of file TStreamerInfoActions.cxx. ◆ ReadTextTObject(). Int_t TStreamerInfoActions::ReadTextTObject ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 300 of file TStreamerInfoActions.cxx. ◆ ReadTextTObjectBase(). Int_t TStreamerInfoActions::ReadTextTObjectBase ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 327 of file TStreamerInfoActions.cxx. ◆ ReadTNamed(). Int_t TStreamerInfoActions::ReadTNamed ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 950 of file TStreamerInfoActions.cxx. ◆ ReadTObject(). Int_t TStreamerInfoActions::ReadTObject ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 940 of file TStreamerInfoActions.cxx. ◆ ReadTString(). Int_t TStreamerInfoActions::ReadTString ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 930 of file TStreamerInfoActions.cxx. ◆ SelectLooper(). ESelectLooper TStreamerInfoActions::SelectLooper ; (; TVirtualCollectionProxy & ; proxy). Definition at line 1699 of file TStreamerInfoActions.cxx. ◆ UseCache(). Int_t TStreamerInfoActions::UseCache ; (; TBuffer & ; b, . void * ; addr, . const TConfiguration * ; conf . ). inline . Definition at line 1582 of file TStreamerInfoActions.cxx. ◆ UseCacheGenericCollection(). Int_t TStreamerInfoActions::UseCacheGenericCollection ; (; TBuffer & ; b, . void * ; , . const void * ; , . const TLoopCon",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:16619,Modifiability,config,config,16619,"inition at line 315 of file TStreamerInfoActions.cxx. ◆ ReadTextTNamed(). Int_t TStreamerInfoActions::ReadTextTNamed ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 335 of file TStreamerInfoActions.cxx. ◆ ReadTextTObject(). Int_t TStreamerInfoActions::ReadTextTObject ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 300 of file TStreamerInfoActions.cxx. ◆ ReadTextTObjectBase(). Int_t TStreamerInfoActions::ReadTextTObjectBase ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 327 of file TStreamerInfoActions.cxx. ◆ ReadTNamed(). Int_t TStreamerInfoActions::ReadTNamed ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 950 of file TStreamerInfoActions.cxx. ◆ ReadTObject(). Int_t TStreamerInfoActions::ReadTObject ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 940 of file TStreamerInfoActions.cxx. ◆ ReadTString(). Int_t TStreamerInfoActions::ReadTString ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 930 of file TStreamerInfoActions.cxx. ◆ SelectLooper(). ESelectLooper TStreamerInfoActions::SelectLooper ; (; TVirtualCollectionProxy & ; proxy). Definition at line 1699 of file TStreamerInfoActions.cxx. ◆ UseCache(). Int_t TStreamerInfoActions::UseCache ; (; TBuffer & ; b, . void * ; addr, . const TConfiguration * ; conf . ). inline . Definition at line 1582 of file TStreamerInfoActions.cxx. ◆ UseCacheGenericCollection(). Int_t TStreamerInfoActions::UseCacheGenericCollection ; (; TBuffer & ; b, . void * ; , . const void * ; , . const TLoopConfiguration * ; loopconfig, . const TConfiguration * ; conf . ). inline . Definition at line 1656 of file TStreamerInfoActions.cxx. ◆ UseCacheVectorLoop(). Int_t TStreamerInfoActions::UseCacheVectorLoop",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:16820,Modifiability,config,config,16820," . Definition at line 335 of file TStreamerInfoActions.cxx. ◆ ReadTextTObject(). Int_t TStreamerInfoActions::ReadTextTObject ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 300 of file TStreamerInfoActions.cxx. ◆ ReadTextTObjectBase(). Int_t TStreamerInfoActions::ReadTextTObjectBase ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 327 of file TStreamerInfoActions.cxx. ◆ ReadTNamed(). Int_t TStreamerInfoActions::ReadTNamed ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 950 of file TStreamerInfoActions.cxx. ◆ ReadTObject(). Int_t TStreamerInfoActions::ReadTObject ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 940 of file TStreamerInfoActions.cxx. ◆ ReadTString(). Int_t TStreamerInfoActions::ReadTString ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 930 of file TStreamerInfoActions.cxx. ◆ SelectLooper(). ESelectLooper TStreamerInfoActions::SelectLooper ; (; TVirtualCollectionProxy & ; proxy). Definition at line 1699 of file TStreamerInfoActions.cxx. ◆ UseCache(). Int_t TStreamerInfoActions::UseCache ; (; TBuffer & ; b, . void * ; addr, . const TConfiguration * ; conf . ). inline . Definition at line 1582 of file TStreamerInfoActions.cxx. ◆ UseCacheGenericCollection(). Int_t TStreamerInfoActions::UseCacheGenericCollection ; (; TBuffer & ; b, . void * ; , . const void * ; , . const TLoopConfiguration * ; loopconfig, . const TConfiguration * ; conf . ). inline . Definition at line 1656 of file TStreamerInfoActions.cxx. ◆ UseCacheVectorLoop(). Int_t TStreamerInfoActions::UseCacheVectorLoop ; (; TBuffer & ; b, . void * ; start, . const void * ; end, . const TLoopConfiguration * ; loopconf, . const TConfiguration * ; conf . ). inline . Definition at line 1630 of file TStreamerInfoActions.",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:18210,Modifiability,config,config,18210,"inition at line 1582 of file TStreamerInfoActions.cxx. ◆ UseCacheGenericCollection(). Int_t TStreamerInfoActions::UseCacheGenericCollection ; (; TBuffer & ; b, . void * ; , . const void * ; , . const TLoopConfiguration * ; loopconfig, . const TConfiguration * ; conf . ). inline . Definition at line 1656 of file TStreamerInfoActions.cxx. ◆ UseCacheVectorLoop(). Int_t TStreamerInfoActions::UseCacheVectorLoop ; (; TBuffer & ; b, . void * ; start, . const void * ; end, . const TLoopConfiguration * ; loopconf, . const TConfiguration * ; conf . ). inline . Definition at line 1630 of file TStreamerInfoActions.cxx. ◆ UseCacheVectorPtrLoop(). Int_t TStreamerInfoActions::UseCacheVectorPtrLoop ; (; TBuffer & ; b, . void * ; start, . const void * ; end, . const TConfiguration * ; conf . ). inline . Definition at line 1604 of file TStreamerInfoActions.cxx. ◆ WriteBasicType(). template<typename T > . Int_t TStreamerInfoActions::WriteBasicType ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 251 of file TStreamerInfoActions.cxx. ◆ WriteLoopInvalid(). Int_t TStreamerInfoActions::WriteLoopInvalid ; (; TBuffer & ; , . void * ; , . const void * ; , . const TConfiguration * ; config . ). Definition at line 1691 of file TStreamerInfoActions.cxx. ◆ WriteSTLp(). template<bool kIsTextT> . Int_t TStreamerInfoActions::WriteSTLp ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ; Definition at line 345 of file TStreamerInfoActions.cxx. ◆ WriteStreamerLoop(). template<bool kIsTextT> . Int_t TStreamerInfoActions::WriteStreamerLoop ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ; Definition at line 505 of file TStreamerInfoActions.cxx. ◆ WriteTextB",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:18433,Modifiability,config,config,18433,"loopconfig, . const TConfiguration * ; conf . ). inline . Definition at line 1656 of file TStreamerInfoActions.cxx. ◆ UseCacheVectorLoop(). Int_t TStreamerInfoActions::UseCacheVectorLoop ; (; TBuffer & ; b, . void * ; start, . const void * ; end, . const TLoopConfiguration * ; loopconf, . const TConfiguration * ; conf . ). inline . Definition at line 1630 of file TStreamerInfoActions.cxx. ◆ UseCacheVectorPtrLoop(). Int_t TStreamerInfoActions::UseCacheVectorPtrLoop ; (; TBuffer & ; b, . void * ; start, . const void * ; end, . const TConfiguration * ; conf . ). inline . Definition at line 1604 of file TStreamerInfoActions.cxx. ◆ WriteBasicType(). template<typename T > . Int_t TStreamerInfoActions::WriteBasicType ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 251 of file TStreamerInfoActions.cxx. ◆ WriteLoopInvalid(). Int_t TStreamerInfoActions::WriteLoopInvalid ; (; TBuffer & ; , . void * ; , . const void * ; , . const TConfiguration * ; config . ). Definition at line 1691 of file TStreamerInfoActions.cxx. ◆ WriteSTLp(). template<bool kIsTextT> . Int_t TStreamerInfoActions::WriteSTLp ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ; Definition at line 345 of file TStreamerInfoActions.cxx. ◆ WriteStreamerLoop(). template<bool kIsTextT> . Int_t TStreamerInfoActions::WriteStreamerLoop ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ; Definition at line 505 of file TStreamerInfoActions.cxx. ◆ WriteTextBaseClass(). Int_t TStreamerInfoActions::WriteTextBaseClass ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 275 of file TStreamerInfoActions.cxx. ◆ WriteTextStreamer(",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:18648,Modifiability,config,config,18648," ; start, . const void * ; end, . const TLoopConfiguration * ; loopconf, . const TConfiguration * ; conf . ). inline . Definition at line 1630 of file TStreamerInfoActions.cxx. ◆ UseCacheVectorPtrLoop(). Int_t TStreamerInfoActions::UseCacheVectorPtrLoop ; (; TBuffer & ; b, . void * ; start, . const void * ; end, . const TConfiguration * ; conf . ). inline . Definition at line 1604 of file TStreamerInfoActions.cxx. ◆ WriteBasicType(). template<typename T > . Int_t TStreamerInfoActions::WriteBasicType ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 251 of file TStreamerInfoActions.cxx. ◆ WriteLoopInvalid(). Int_t TStreamerInfoActions::WriteLoopInvalid ; (; TBuffer & ; , . void * ; , . const void * ; , . const TConfiguration * ; config . ). Definition at line 1691 of file TStreamerInfoActions.cxx. ◆ WriteSTLp(). template<bool kIsTextT> . Int_t TStreamerInfoActions::WriteSTLp ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ; Definition at line 345 of file TStreamerInfoActions.cxx. ◆ WriteStreamerLoop(). template<bool kIsTextT> . Int_t TStreamerInfoActions::WriteStreamerLoop ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ; Definition at line 505 of file TStreamerInfoActions.cxx. ◆ WriteTextBaseClass(). Int_t TStreamerInfoActions::WriteTextBaseClass ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 275 of file TStreamerInfoActions.cxx. ◆ WriteTextStreamer(). Int_t TStreamerInfoActions::WriteTextStreamer ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 283 of file TStreamerInfoActions.cxx. ◆ WriteTextTNamed(). I",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:18999,Modifiability,config,config,18999,"inline . Definition at line 1604 of file TStreamerInfoActions.cxx. ◆ WriteBasicType(). template<typename T > . Int_t TStreamerInfoActions::WriteBasicType ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 251 of file TStreamerInfoActions.cxx. ◆ WriteLoopInvalid(). Int_t TStreamerInfoActions::WriteLoopInvalid ; (; TBuffer & ; , . void * ; , . const void * ; , . const TConfiguration * ; config . ). Definition at line 1691 of file TStreamerInfoActions.cxx. ◆ WriteSTLp(). template<bool kIsTextT> . Int_t TStreamerInfoActions::WriteSTLp ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ; Definition at line 345 of file TStreamerInfoActions.cxx. ◆ WriteStreamerLoop(). template<bool kIsTextT> . Int_t TStreamerInfoActions::WriteStreamerLoop ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ; Definition at line 505 of file TStreamerInfoActions.cxx. ◆ WriteTextBaseClass(). Int_t TStreamerInfoActions::WriteTextBaseClass ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 275 of file TStreamerInfoActions.cxx. ◆ WriteTextStreamer(). Int_t TStreamerInfoActions::WriteTextStreamer ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 283 of file TStreamerInfoActions.cxx. ◆ WriteTextTNamed(). Int_t TStreamerInfoActions::WriteTextTNamed ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 259 of file TStreamerInfoActions.cxx. ◆ WriteTextTObject(). Int_t TStreamerInfoActions::WriteTextTObject ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:19326,Modifiability,config,config,19326,"f, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 251 of file TStreamerInfoActions.cxx. ◆ WriteLoopInvalid(). Int_t TStreamerInfoActions::WriteLoopInvalid ; (; TBuffer & ; , . void * ; , . const void * ; , . const TConfiguration * ; config . ). Definition at line 1691 of file TStreamerInfoActions.cxx. ◆ WriteSTLp(). template<bool kIsTextT> . Int_t TStreamerInfoActions::WriteSTLp ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ; Definition at line 345 of file TStreamerInfoActions.cxx. ◆ WriteStreamerLoop(). template<bool kIsTextT> . Int_t TStreamerInfoActions::WriteStreamerLoop ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ; Definition at line 505 of file TStreamerInfoActions.cxx. ◆ WriteTextBaseClass(). Int_t TStreamerInfoActions::WriteTextBaseClass ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 275 of file TStreamerInfoActions.cxx. ◆ WriteTextStreamer(). Int_t TStreamerInfoActions::WriteTextStreamer ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 283 of file TStreamerInfoActions.cxx. ◆ WriteTextTNamed(). Int_t TStreamerInfoActions::WriteTextTNamed ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 259 of file TStreamerInfoActions.cxx. ◆ WriteTextTObject(). Int_t TStreamerInfoActions::WriteTextTObject ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 267 of file TStreamerInfoActions.cxx. TStreamerInfoActions. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:49 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:19539,Modifiability,config,config,19539,"f, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 251 of file TStreamerInfoActions.cxx. ◆ WriteLoopInvalid(). Int_t TStreamerInfoActions::WriteLoopInvalid ; (; TBuffer & ; , . void * ; , . const void * ; , . const TConfiguration * ; config . ). Definition at line 1691 of file TStreamerInfoActions.cxx. ◆ WriteSTLp(). template<bool kIsTextT> . Int_t TStreamerInfoActions::WriteSTLp ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ; Definition at line 345 of file TStreamerInfoActions.cxx. ◆ WriteStreamerLoop(). template<bool kIsTextT> . Int_t TStreamerInfoActions::WriteStreamerLoop ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ; Definition at line 505 of file TStreamerInfoActions.cxx. ◆ WriteTextBaseClass(). Int_t TStreamerInfoActions::WriteTextBaseClass ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 275 of file TStreamerInfoActions.cxx. ◆ WriteTextStreamer(). Int_t TStreamerInfoActions::WriteTextStreamer ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 283 of file TStreamerInfoActions.cxx. ◆ WriteTextTNamed(). Int_t TStreamerInfoActions::WriteTextTNamed ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 259 of file TStreamerInfoActions.cxx. ◆ WriteTextTObject(). Int_t TStreamerInfoActions::WriteTextTObject ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 267 of file TStreamerInfoActions.cxx. TStreamerInfoActions. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:49 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:19748,Modifiability,config,config,19748,"f, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 251 of file TStreamerInfoActions.cxx. ◆ WriteLoopInvalid(). Int_t TStreamerInfoActions::WriteLoopInvalid ; (; TBuffer & ; , . void * ; , . const void * ; , . const TConfiguration * ; config . ). Definition at line 1691 of file TStreamerInfoActions.cxx. ◆ WriteSTLp(). template<bool kIsTextT> . Int_t TStreamerInfoActions::WriteSTLp ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ; Definition at line 345 of file TStreamerInfoActions.cxx. ◆ WriteStreamerLoop(). template<bool kIsTextT> . Int_t TStreamerInfoActions::WriteStreamerLoop ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ; Definition at line 505 of file TStreamerInfoActions.cxx. ◆ WriteTextBaseClass(). Int_t TStreamerInfoActions::WriteTextBaseClass ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 275 of file TStreamerInfoActions.cxx. ◆ WriteTextStreamer(). Int_t TStreamerInfoActions::WriteTextStreamer ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 283 of file TStreamerInfoActions.cxx. ◆ WriteTextTNamed(). Int_t TStreamerInfoActions::WriteTextTNamed ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 259 of file TStreamerInfoActions.cxx. ◆ WriteTextTObject(). Int_t TStreamerInfoActions::WriteTextTObject ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 267 of file TStreamerInfoActions.cxx. TStreamerInfoActions. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:49 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/namespaceTStreamerInfoActions.html:19959,Modifiability,config,config,19959,"f, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 251 of file TStreamerInfoActions.cxx. ◆ WriteLoopInvalid(). Int_t TStreamerInfoActions::WriteLoopInvalid ; (; TBuffer & ; , . void * ; , . const void * ; , . const TConfiguration * ; config . ). Definition at line 1691 of file TStreamerInfoActions.cxx. ◆ WriteSTLp(). template<bool kIsTextT> . Int_t TStreamerInfoActions::WriteSTLp ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ; Definition at line 345 of file TStreamerInfoActions.cxx. ◆ WriteStreamerLoop(). template<bool kIsTextT> . Int_t TStreamerInfoActions::WriteStreamerLoop ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ; Definition at line 505 of file TStreamerInfoActions.cxx. ◆ WriteTextBaseClass(). Int_t TStreamerInfoActions::WriteTextBaseClass ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 275 of file TStreamerInfoActions.cxx. ◆ WriteTextStreamer(). Int_t TStreamerInfoActions::WriteTextStreamer ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 283 of file TStreamerInfoActions.cxx. ◆ WriteTextTNamed(). Int_t TStreamerInfoActions::WriteTextTNamed ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 259 of file TStreamerInfoActions.cxx. ◆ WriteTextTObject(). Int_t TStreamerInfoActions::WriteTextTObject ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 267 of file TStreamerInfoActions.cxx. TStreamerInfoActions. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:49 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceTStreamerInfoActions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:11471,Availability,error,error,11471,"titions); 252 , fMinimizerType (_eMinimizerType); 253 , m_convergenceCount (0); 254 , m_maxConvergenceCount (0); 255 , m_minError (1e10); 256 , m_useMultithreading (_useMultithreading); 257 , fMonitoring (NULL); 258 {; 259 }; 260 ; 261 Settings::~Settings () ; 262 {; 263 }; 264 ; 265 ; 266 ; 267 ; 268 ; 269 ; 270 ; 271 ; 272 ; 273 ; 274 ; 275 ; 276 ; 277 ; 278 /** \brief action to be done when the training cycle is started (e.g. update some monitoring output); 279 *; 280 */; 281 void ClassificationSettings::startTrainCycle () ; 282 {; 283 if (fMonitoring); 284 {; 285 create (""ROC"", 100, 0, 1, 100, 0, 1);; 286 create (""Significance"", 100, 0, 1, 100, 0, 3);; 287 create (""OutputSig"", 100, 0, 1);; 288 create (""OutputBkg"", 100, 0, 1);; 289 fMonitoring->ProcessEvents ();; 290 }; 291 }; 292 ; 293 /** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); 294 *; 295 */; 296 void ClassificationSettings::endTrainCycle (double /*error*/) ; 297 {; 298 if (fMonitoring) fMonitoring->ProcessEvents ();; 299 }; 300 ; 301 /** \brief action to be done after the computation of a test sample (e.g. update some monitoring output); 302 *; 303 */; 304 void ClassificationSettings::testSample (double /*error*/, double output, double target, double weight); 305 {; 306 ; 307 m_output.push_back (output);; 308 m_targets.push_back (target);; 309 m_weights.push_back (weight);; 310 }; 311 ; 312 ; 313 /** \brief action to be done when the test cycle is started (e.g. update some monitoring output); 314 *; 315 */; 316 void ClassificationSettings::startTestCycle () ; 317 {; 318 m_output.clear ();; 319 m_targets.clear ();; 320 m_weights.clear ();; 321 }; 322 ; 323 /** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); 324 *; 325 */; 326 void ClassificationSettings::endTestCycle () ; 327 {; 328 if (m_output.empty ()); 329 return;; 330 double minVal = *std::min_element (begin (m_output), end (m_output));; 331 double maxVa",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:11734,Availability,error,error,11734," 260 ; 261 Settings::~Settings () ; 262 {; 263 }; 264 ; 265 ; 266 ; 267 ; 268 ; 269 ; 270 ; 271 ; 272 ; 273 ; 274 ; 275 ; 276 ; 277 ; 278 /** \brief action to be done when the training cycle is started (e.g. update some monitoring output); 279 *; 280 */; 281 void ClassificationSettings::startTrainCycle () ; 282 {; 283 if (fMonitoring); 284 {; 285 create (""ROC"", 100, 0, 1, 100, 0, 1);; 286 create (""Significance"", 100, 0, 1, 100, 0, 3);; 287 create (""OutputSig"", 100, 0, 1);; 288 create (""OutputBkg"", 100, 0, 1);; 289 fMonitoring->ProcessEvents ();; 290 }; 291 }; 292 ; 293 /** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); 294 *; 295 */; 296 void ClassificationSettings::endTrainCycle (double /*error*/) ; 297 {; 298 if (fMonitoring) fMonitoring->ProcessEvents ();; 299 }; 300 ; 301 /** \brief action to be done after the computation of a test sample (e.g. update some monitoring output); 302 *; 303 */; 304 void ClassificationSettings::testSample (double /*error*/, double output, double target, double weight); 305 {; 306 ; 307 m_output.push_back (output);; 308 m_targets.push_back (target);; 309 m_weights.push_back (weight);; 310 }; 311 ; 312 ; 313 /** \brief action to be done when the test cycle is started (e.g. update some monitoring output); 314 *; 315 */; 316 void ClassificationSettings::startTestCycle () ; 317 {; 318 m_output.clear ();; 319 m_targets.clear ();; 320 m_weights.clear ();; 321 }; 322 ; 323 /** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); 324 *; 325 */; 326 void ClassificationSettings::endTestCycle () ; 327 {; 328 if (m_output.empty ()); 329 return;; 330 double minVal = *std::min_element (begin (m_output), end (m_output));; 331 double maxVal = *std::max_element (begin (m_output), end (m_output));; 332 const size_t numBinsROC = 1000;; 333 const size_t numBinsData = 100;; 334 ; 335 std::vector<double> truePositives (numBinsROC+1, 0);; 336 std::vector<double> false",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:22974,Availability,error,error,22974,"Net.h:1009; TMVA::DNN::ClassificationSettings::setResultComputationvoid setResultComputation(std::string _fileNameNetConfig, std::string _fileNameResult, std::vector< Pattern > *_resultPatternContainer)preparation for monitoring outputDefinition NeuralNet.cxx:520; TMVA::DNN::ClassificationSettings::m_fileNameResultstd::string m_fileNameResultDefinition NeuralNet.h:1010; TMVA::DNN::ClassificationSettings::m_significancesstd::vector< double > m_significancesDefinition NeuralNet.h:1001; TMVA::DNN::ClassificationSettings::m_sumOfSigWeightsdouble m_sumOfSigWeightsDefinition NeuralNet.h:1004; TMVA::DNN::ClassificationSettings::m_weightsstd::vector< double > m_weightsDefinition NeuralNet.h:998; TMVA::DNN::ClassificationSettings::m_fileNameNetConfigstd::string m_fileNameNetConfigDefinition NeuralNet.h:1011; TMVA::DNN::ClassificationSettings::m_targetsstd::vector< double > m_targetsDefinition NeuralNet.h:997; TMVA::DNN::ClassificationSettings::testSamplevoid testSample(double error, double output, double target, double weight)action to be done after the computation of a test sample (e.g.Definition NeuralNet.cxx:304; TMVA::DNN::ClassificationSettings::m_scaleToNumEventssize_t m_scaleToNumEventsDefinition NeuralNet.h:1006; TMVA::DNN::ClassificationSettings::startTestCyclevirtual void startTestCycle()action to be done when the test cycle is started (e.g.Definition NeuralNet.cxx:316; TMVA::DNN::ClassificationSettings::m_sumOfBkgWeightsdouble m_sumOfBkgWeightsDefinition NeuralNet.h:1005; TMVA::DNN::ClassificationSettings::setWeightSumsvoid setWeightSums(double sumOfSigWeights, double sumOfBkgWeights)set the weight sums to be scaled to (preparations for monitoring output)Definition NeuralNet.cxx:512; TMVA::DNN::ClassificationSettings::m_cutValuedouble m_cutValueDefinition NeuralNet.h:1008; TMVA::DNN::ClassificationSettings::m_outputstd::vector< double > m_outputDefinition NeuralNet.h:996; TMVA::DNN::LayerData::m_itInputBeginconst_iterator_type m_itInputBeginiterator to the first o",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:10931,Deployability,update,update,10931,"ceSteps); 241 , m_batchSize (_batchSize); 242 , m_testRepetitions (_testRepetitions); 243 , m_factorWeightDecay (_factorWeightDecay); 244 , count_E (0); 245 , count_dE (0); 246 , count_mb_E (0); 247 , count_mb_dE (0); 248 , m_regularization (eRegularization); 249 , fLearningRate (_learningRate); 250 , fMomentum (_momentum); 251 , fRepetitions (_repetitions); 252 , fMinimizerType (_eMinimizerType); 253 , m_convergenceCount (0); 254 , m_maxConvergenceCount (0); 255 , m_minError (1e10); 256 , m_useMultithreading (_useMultithreading); 257 , fMonitoring (NULL); 258 {; 259 }; 260 ; 261 Settings::~Settings () ; 262 {; 263 }; 264 ; 265 ; 266 ; 267 ; 268 ; 269 ; 270 ; 271 ; 272 ; 273 ; 274 ; 275 ; 276 ; 277 ; 278 /** \brief action to be done when the training cycle is started (e.g. update some monitoring output); 279 *; 280 */; 281 void ClassificationSettings::startTrainCycle () ; 282 {; 283 if (fMonitoring); 284 {; 285 create (""ROC"", 100, 0, 1, 100, 0, 1);; 286 create (""Significance"", 100, 0, 1, 100, 0, 3);; 287 create (""OutputSig"", 100, 0, 1);; 288 create (""OutputBkg"", 100, 0, 1);; 289 fMonitoring->ProcessEvents ();; 290 }; 291 }; 292 ; 293 /** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); 294 *; 295 */; 296 void ClassificationSettings::endTrainCycle (double /*error*/) ; 297 {; 298 if (fMonitoring) fMonitoring->ProcessEvents ();; 299 }; 300 ; 301 /** \brief action to be done after the computation of a test sample (e.g. update some monitoring output); 302 *; 303 */; 304 void ClassificationSettings::testSample (double /*error*/, double output, double target, double weight); 305 {; 306 ; 307 m_output.push_back (output);; 308 m_targets.push_back (target);; 309 m_weights.push_back (weight);; 310 }; 311 ; 312 ; 313 /** \brief action to be done when the test cycle is started (e.g. update some monitoring output); 314 *; 315 */; 316 void ClassificationSettings::startTestCycle () ; 317 {; 318 m_output.clear ();; 319 m_targets.clear (",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:11367,Deployability,update,update,11367,"titions); 252 , fMinimizerType (_eMinimizerType); 253 , m_convergenceCount (0); 254 , m_maxConvergenceCount (0); 255 , m_minError (1e10); 256 , m_useMultithreading (_useMultithreading); 257 , fMonitoring (NULL); 258 {; 259 }; 260 ; 261 Settings::~Settings () ; 262 {; 263 }; 264 ; 265 ; 266 ; 267 ; 268 ; 269 ; 270 ; 271 ; 272 ; 273 ; 274 ; 275 ; 276 ; 277 ; 278 /** \brief action to be done when the training cycle is started (e.g. update some monitoring output); 279 *; 280 */; 281 void ClassificationSettings::startTrainCycle () ; 282 {; 283 if (fMonitoring); 284 {; 285 create (""ROC"", 100, 0, 1, 100, 0, 1);; 286 create (""Significance"", 100, 0, 1, 100, 0, 3);; 287 create (""OutputSig"", 100, 0, 1);; 288 create (""OutputBkg"", 100, 0, 1);; 289 fMonitoring->ProcessEvents ();; 290 }; 291 }; 292 ; 293 /** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); 294 *; 295 */; 296 void ClassificationSettings::endTrainCycle (double /*error*/) ; 297 {; 298 if (fMonitoring) fMonitoring->ProcessEvents ();; 299 }; 300 ; 301 /** \brief action to be done after the computation of a test sample (e.g. update some monitoring output); 302 *; 303 */; 304 void ClassificationSettings::testSample (double /*error*/, double output, double target, double weight); 305 {; 306 ; 307 m_output.push_back (output);; 308 m_targets.push_back (target);; 309 m_weights.push_back (weight);; 310 }; 311 ; 312 ; 313 /** \brief action to be done when the test cycle is started (e.g. update some monitoring output); 314 *; 315 */; 316 void ClassificationSettings::startTestCycle () ; 317 {; 318 m_output.clear ();; 319 m_targets.clear ();; 320 m_weights.clear ();; 321 }; 322 ; 323 /** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); 324 *; 325 */; 326 void ClassificationSettings::endTestCycle () ; 327 {; 328 if (m_output.empty ()); 329 return;; 330 double minVal = *std::min_element (begin (m_output), end (m_output));; 331 double maxVa",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:11633,Deployability,update,update,11633," 260 ; 261 Settings::~Settings () ; 262 {; 263 }; 264 ; 265 ; 266 ; 267 ; 268 ; 269 ; 270 ; 271 ; 272 ; 273 ; 274 ; 275 ; 276 ; 277 ; 278 /** \brief action to be done when the training cycle is started (e.g. update some monitoring output); 279 *; 280 */; 281 void ClassificationSettings::startTrainCycle () ; 282 {; 283 if (fMonitoring); 284 {; 285 create (""ROC"", 100, 0, 1, 100, 0, 1);; 286 create (""Significance"", 100, 0, 1, 100, 0, 3);; 287 create (""OutputSig"", 100, 0, 1);; 288 create (""OutputBkg"", 100, 0, 1);; 289 fMonitoring->ProcessEvents ();; 290 }; 291 }; 292 ; 293 /** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); 294 *; 295 */; 296 void ClassificationSettings::endTrainCycle (double /*error*/) ; 297 {; 298 if (fMonitoring) fMonitoring->ProcessEvents ();; 299 }; 300 ; 301 /** \brief action to be done after the computation of a test sample (e.g. update some monitoring output); 302 *; 303 */; 304 void ClassificationSettings::testSample (double /*error*/, double output, double target, double weight); 305 {; 306 ; 307 m_output.push_back (output);; 308 m_targets.push_back (target);; 309 m_weights.push_back (weight);; 310 }; 311 ; 312 ; 313 /** \brief action to be done when the test cycle is started (e.g. update some monitoring output); 314 *; 315 */; 316 void ClassificationSettings::startTestCycle () ; 317 {; 318 m_output.clear ();; 319 m_targets.clear ();; 320 m_weights.clear ();; 321 }; 322 ; 323 /** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); 324 *; 325 */; 326 void ClassificationSettings::endTestCycle () ; 327 {; 328 if (m_output.empty ()); 329 return;; 330 double minVal = *std::min_element (begin (m_output), end (m_output));; 331 double maxVal = *std::max_element (begin (m_output), end (m_output));; 332 const size_t numBinsROC = 1000;; 333 const size_t numBinsData = 100;; 334 ; 335 std::vector<double> truePositives (numBinsROC+1, 0);; 336 std::vector<double> false",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:11995,Deployability,update,update,11995,"ring); 284 {; 285 create (""ROC"", 100, 0, 1, 100, 0, 1);; 286 create (""Significance"", 100, 0, 1, 100, 0, 3);; 287 create (""OutputSig"", 100, 0, 1);; 288 create (""OutputBkg"", 100, 0, 1);; 289 fMonitoring->ProcessEvents ();; 290 }; 291 }; 292 ; 293 /** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); 294 *; 295 */; 296 void ClassificationSettings::endTrainCycle (double /*error*/) ; 297 {; 298 if (fMonitoring) fMonitoring->ProcessEvents ();; 299 }; 300 ; 301 /** \brief action to be done after the computation of a test sample (e.g. update some monitoring output); 302 *; 303 */; 304 void ClassificationSettings::testSample (double /*error*/, double output, double target, double weight); 305 {; 306 ; 307 m_output.push_back (output);; 308 m_targets.push_back (target);; 309 m_weights.push_back (weight);; 310 }; 311 ; 312 ; 313 /** \brief action to be done when the test cycle is started (e.g. update some monitoring output); 314 *; 315 */; 316 void ClassificationSettings::startTestCycle () ; 317 {; 318 m_output.clear ();; 319 m_targets.clear ();; 320 m_weights.clear ();; 321 }; 322 ; 323 /** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); 324 *; 325 */; 326 void ClassificationSettings::endTestCycle () ; 327 {; 328 if (m_output.empty ()); 329 return;; 330 double minVal = *std::min_element (begin (m_output), end (m_output));; 331 double maxVal = *std::max_element (begin (m_output), end (m_output));; 332 const size_t numBinsROC = 1000;; 333 const size_t numBinsData = 100;; 334 ; 335 std::vector<double> truePositives (numBinsROC+1, 0);; 336 std::vector<double> falsePositives (numBinsROC+1, 0);; 337 std::vector<double> trueNegatives (numBinsROC+1, 0);; 338 std::vector<double> falseNegatives (numBinsROC+1, 0);; 339 ; 340 std::vector<double> x (numBinsData, 0);; 341 std::vector<double> datSig (numBinsData+1, 0);; 342 std::vector<double> datBkg (numBinsData+1, 0);; 343 ; 344 double binSizeROC =",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:12261,Deployability,update,update,12261,"e done when the training cycle is ended (e.g. update some monitoring output); 294 *; 295 */; 296 void ClassificationSettings::endTrainCycle (double /*error*/) ; 297 {; 298 if (fMonitoring) fMonitoring->ProcessEvents ();; 299 }; 300 ; 301 /** \brief action to be done after the computation of a test sample (e.g. update some monitoring output); 302 *; 303 */; 304 void ClassificationSettings::testSample (double /*error*/, double output, double target, double weight); 305 {; 306 ; 307 m_output.push_back (output);; 308 m_targets.push_back (target);; 309 m_weights.push_back (weight);; 310 }; 311 ; 312 ; 313 /** \brief action to be done when the test cycle is started (e.g. update some monitoring output); 314 *; 315 */; 316 void ClassificationSettings::startTestCycle () ; 317 {; 318 m_output.clear ();; 319 m_targets.clear ();; 320 m_weights.clear ();; 321 }; 322 ; 323 /** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); 324 *; 325 */; 326 void ClassificationSettings::endTestCycle () ; 327 {; 328 if (m_output.empty ()); 329 return;; 330 double minVal = *std::min_element (begin (m_output), end (m_output));; 331 double maxVal = *std::max_element (begin (m_output), end (m_output));; 332 const size_t numBinsROC = 1000;; 333 const size_t numBinsData = 100;; 334 ; 335 std::vector<double> truePositives (numBinsROC+1, 0);; 336 std::vector<double> falsePositives (numBinsROC+1, 0);; 337 std::vector<double> trueNegatives (numBinsROC+1, 0);; 338 std::vector<double> falseNegatives (numBinsROC+1, 0);; 339 ; 340 std::vector<double> x (numBinsData, 0);; 341 std::vector<double> datSig (numBinsData+1, 0);; 342 std::vector<double> datBkg (numBinsData+1, 0);; 343 ; 344 double binSizeROC = (maxVal - minVal)/(double)numBinsROC;; 345 double binSizeData = (maxVal - minVal)/(double)numBinsData;; 346 ; 347 double sumWeightsSig = 0.0;; 348 double sumWeightsBkg = 0.0;; 349 ; 350 for (size_t b = 0; b < numBinsData; ++b); 351 {; 352 double binData = minVal + b",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:10943,Energy Efficiency,monitor,monitoring,10943,"ceSteps); 241 , m_batchSize (_batchSize); 242 , m_testRepetitions (_testRepetitions); 243 , m_factorWeightDecay (_factorWeightDecay); 244 , count_E (0); 245 , count_dE (0); 246 , count_mb_E (0); 247 , count_mb_dE (0); 248 , m_regularization (eRegularization); 249 , fLearningRate (_learningRate); 250 , fMomentum (_momentum); 251 , fRepetitions (_repetitions); 252 , fMinimizerType (_eMinimizerType); 253 , m_convergenceCount (0); 254 , m_maxConvergenceCount (0); 255 , m_minError (1e10); 256 , m_useMultithreading (_useMultithreading); 257 , fMonitoring (NULL); 258 {; 259 }; 260 ; 261 Settings::~Settings () ; 262 {; 263 }; 264 ; 265 ; 266 ; 267 ; 268 ; 269 ; 270 ; 271 ; 272 ; 273 ; 274 ; 275 ; 276 ; 277 ; 278 /** \brief action to be done when the training cycle is started (e.g. update some monitoring output); 279 *; 280 */; 281 void ClassificationSettings::startTrainCycle () ; 282 {; 283 if (fMonitoring); 284 {; 285 create (""ROC"", 100, 0, 1, 100, 0, 1);; 286 create (""Significance"", 100, 0, 1, 100, 0, 3);; 287 create (""OutputSig"", 100, 0, 1);; 288 create (""OutputBkg"", 100, 0, 1);; 289 fMonitoring->ProcessEvents ();; 290 }; 291 }; 292 ; 293 /** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); 294 *; 295 */; 296 void ClassificationSettings::endTrainCycle (double /*error*/) ; 297 {; 298 if (fMonitoring) fMonitoring->ProcessEvents ();; 299 }; 300 ; 301 /** \brief action to be done after the computation of a test sample (e.g. update some monitoring output); 302 *; 303 */; 304 void ClassificationSettings::testSample (double /*error*/, double output, double target, double weight); 305 {; 306 ; 307 m_output.push_back (output);; 308 m_targets.push_back (target);; 309 m_weights.push_back (weight);; 310 }; 311 ; 312 ; 313 /** \brief action to be done when the test cycle is started (e.g. update some monitoring output); 314 *; 315 */; 316 void ClassificationSettings::startTestCycle () ; 317 {; 318 m_output.clear ();; 319 m_targets.clear (",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:11379,Energy Efficiency,monitor,monitoring,11379,"titions); 252 , fMinimizerType (_eMinimizerType); 253 , m_convergenceCount (0); 254 , m_maxConvergenceCount (0); 255 , m_minError (1e10); 256 , m_useMultithreading (_useMultithreading); 257 , fMonitoring (NULL); 258 {; 259 }; 260 ; 261 Settings::~Settings () ; 262 {; 263 }; 264 ; 265 ; 266 ; 267 ; 268 ; 269 ; 270 ; 271 ; 272 ; 273 ; 274 ; 275 ; 276 ; 277 ; 278 /** \brief action to be done when the training cycle is started (e.g. update some monitoring output); 279 *; 280 */; 281 void ClassificationSettings::startTrainCycle () ; 282 {; 283 if (fMonitoring); 284 {; 285 create (""ROC"", 100, 0, 1, 100, 0, 1);; 286 create (""Significance"", 100, 0, 1, 100, 0, 3);; 287 create (""OutputSig"", 100, 0, 1);; 288 create (""OutputBkg"", 100, 0, 1);; 289 fMonitoring->ProcessEvents ();; 290 }; 291 }; 292 ; 293 /** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); 294 *; 295 */; 296 void ClassificationSettings::endTrainCycle (double /*error*/) ; 297 {; 298 if (fMonitoring) fMonitoring->ProcessEvents ();; 299 }; 300 ; 301 /** \brief action to be done after the computation of a test sample (e.g. update some monitoring output); 302 *; 303 */; 304 void ClassificationSettings::testSample (double /*error*/, double output, double target, double weight); 305 {; 306 ; 307 m_output.push_back (output);; 308 m_targets.push_back (target);; 309 m_weights.push_back (weight);; 310 }; 311 ; 312 ; 313 /** \brief action to be done when the test cycle is started (e.g. update some monitoring output); 314 *; 315 */; 316 void ClassificationSettings::startTestCycle () ; 317 {; 318 m_output.clear ();; 319 m_targets.clear ();; 320 m_weights.clear ();; 321 }; 322 ; 323 /** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); 324 *; 325 */; 326 void ClassificationSettings::endTestCycle () ; 327 {; 328 if (m_output.empty ()); 329 return;; 330 double minVal = *std::min_element (begin (m_output), end (m_output));; 331 double maxVa",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:11645,Energy Efficiency,monitor,monitoring,11645," 260 ; 261 Settings::~Settings () ; 262 {; 263 }; 264 ; 265 ; 266 ; 267 ; 268 ; 269 ; 270 ; 271 ; 272 ; 273 ; 274 ; 275 ; 276 ; 277 ; 278 /** \brief action to be done when the training cycle is started (e.g. update some monitoring output); 279 *; 280 */; 281 void ClassificationSettings::startTrainCycle () ; 282 {; 283 if (fMonitoring); 284 {; 285 create (""ROC"", 100, 0, 1, 100, 0, 1);; 286 create (""Significance"", 100, 0, 1, 100, 0, 3);; 287 create (""OutputSig"", 100, 0, 1);; 288 create (""OutputBkg"", 100, 0, 1);; 289 fMonitoring->ProcessEvents ();; 290 }; 291 }; 292 ; 293 /** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); 294 *; 295 */; 296 void ClassificationSettings::endTrainCycle (double /*error*/) ; 297 {; 298 if (fMonitoring) fMonitoring->ProcessEvents ();; 299 }; 300 ; 301 /** \brief action to be done after the computation of a test sample (e.g. update some monitoring output); 302 *; 303 */; 304 void ClassificationSettings::testSample (double /*error*/, double output, double target, double weight); 305 {; 306 ; 307 m_output.push_back (output);; 308 m_targets.push_back (target);; 309 m_weights.push_back (weight);; 310 }; 311 ; 312 ; 313 /** \brief action to be done when the test cycle is started (e.g. update some monitoring output); 314 *; 315 */; 316 void ClassificationSettings::startTestCycle () ; 317 {; 318 m_output.clear ();; 319 m_targets.clear ();; 320 m_weights.clear ();; 321 }; 322 ; 323 /** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); 324 *; 325 */; 326 void ClassificationSettings::endTestCycle () ; 327 {; 328 if (m_output.empty ()); 329 return;; 330 double minVal = *std::min_element (begin (m_output), end (m_output));; 331 double maxVal = *std::max_element (begin (m_output), end (m_output));; 332 const size_t numBinsROC = 1000;; 333 const size_t numBinsData = 100;; 334 ; 335 std::vector<double> truePositives (numBinsROC+1, 0);; 336 std::vector<double> false",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:12007,Energy Efficiency,monitor,monitoring,12007,"ring); 284 {; 285 create (""ROC"", 100, 0, 1, 100, 0, 1);; 286 create (""Significance"", 100, 0, 1, 100, 0, 3);; 287 create (""OutputSig"", 100, 0, 1);; 288 create (""OutputBkg"", 100, 0, 1);; 289 fMonitoring->ProcessEvents ();; 290 }; 291 }; 292 ; 293 /** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); 294 *; 295 */; 296 void ClassificationSettings::endTrainCycle (double /*error*/) ; 297 {; 298 if (fMonitoring) fMonitoring->ProcessEvents ();; 299 }; 300 ; 301 /** \brief action to be done after the computation of a test sample (e.g. update some monitoring output); 302 *; 303 */; 304 void ClassificationSettings::testSample (double /*error*/, double output, double target, double weight); 305 {; 306 ; 307 m_output.push_back (output);; 308 m_targets.push_back (target);; 309 m_weights.push_back (weight);; 310 }; 311 ; 312 ; 313 /** \brief action to be done when the test cycle is started (e.g. update some monitoring output); 314 *; 315 */; 316 void ClassificationSettings::startTestCycle () ; 317 {; 318 m_output.clear ();; 319 m_targets.clear ();; 320 m_weights.clear ();; 321 }; 322 ; 323 /** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); 324 *; 325 */; 326 void ClassificationSettings::endTestCycle () ; 327 {; 328 if (m_output.empty ()); 329 return;; 330 double minVal = *std::min_element (begin (m_output), end (m_output));; 331 double maxVal = *std::max_element (begin (m_output), end (m_output));; 332 const size_t numBinsROC = 1000;; 333 const size_t numBinsData = 100;; 334 ; 335 std::vector<double> truePositives (numBinsROC+1, 0);; 336 std::vector<double> falsePositives (numBinsROC+1, 0);; 337 std::vector<double> trueNegatives (numBinsROC+1, 0);; 338 std::vector<double> falseNegatives (numBinsROC+1, 0);; 339 ; 340 std::vector<double> x (numBinsData, 0);; 341 std::vector<double> datSig (numBinsData+1, 0);; 342 std::vector<double> datBkg (numBinsData+1, 0);; 343 ; 344 double binSizeROC =",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:12273,Energy Efficiency,monitor,monitoring,12273,"e done when the training cycle is ended (e.g. update some monitoring output); 294 *; 295 */; 296 void ClassificationSettings::endTrainCycle (double /*error*/) ; 297 {; 298 if (fMonitoring) fMonitoring->ProcessEvents ();; 299 }; 300 ; 301 /** \brief action to be done after the computation of a test sample (e.g. update some monitoring output); 302 *; 303 */; 304 void ClassificationSettings::testSample (double /*error*/, double output, double target, double weight); 305 {; 306 ; 307 m_output.push_back (output);; 308 m_targets.push_back (target);; 309 m_weights.push_back (weight);; 310 }; 311 ; 312 ; 313 /** \brief action to be done when the test cycle is started (e.g. update some monitoring output); 314 *; 315 */; 316 void ClassificationSettings::startTestCycle () ; 317 {; 318 m_output.clear ();; 319 m_targets.clear ();; 320 m_weights.clear ();; 321 }; 322 ; 323 /** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); 324 *; 325 */; 326 void ClassificationSettings::endTestCycle () ; 327 {; 328 if (m_output.empty ()); 329 return;; 330 double minVal = *std::min_element (begin (m_output), end (m_output));; 331 double maxVal = *std::max_element (begin (m_output), end (m_output));; 332 const size_t numBinsROC = 1000;; 333 const size_t numBinsData = 100;; 334 ; 335 std::vector<double> truePositives (numBinsROC+1, 0);; 336 std::vector<double> falsePositives (numBinsROC+1, 0);; 337 std::vector<double> trueNegatives (numBinsROC+1, 0);; 338 std::vector<double> falseNegatives (numBinsROC+1, 0);; 339 ; 340 std::vector<double> x (numBinsData, 0);; 341 std::vector<double> datSig (numBinsData+1, 0);; 342 std::vector<double> datBkg (numBinsData+1, 0);; 343 ; 344 double binSizeROC = (maxVal - minVal)/(double)numBinsROC;; 345 double binSizeData = (maxVal - minVal)/(double)numBinsData;; 346 ; 347 double sumWeightsSig = 0.0;; 348 double sumWeightsBkg = 0.0;; 349 ; 350 for (size_t b = 0; b < numBinsData; ++b); 351 {; 352 double binData = minVal + b",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:17495,Energy Efficiency,monitor,monitoring,17495,"484 */; 485 bool Settings::hasConverged (double testError); 486 {; 487 // std::cout << ""check convergence; minError "" << m_minError << "" current "" << testError; 488 // << "" current convergence count "" << m_convergenceCount << std::endl;; 489 if (testError < m_minError*0.999); 490 {; 491 m_convergenceCount = 0;; 492 m_minError = testError;; 493 }; 494 else; 495 {; 496 ++m_convergenceCount;; 497 m_maxConvergenceCount = std::max (m_convergenceCount, m_maxConvergenceCount);; 498 }; 499 ; 500 ; 501 if (m_convergenceCount >= convergenceSteps () || testError <= 0); 502 return true;; 503 ; 504 return false;; 505 }; 506 ; 507 ; 508 ; 509 /** \brief set the weight sums to be scaled to (preparations for monitoring output); 510 *; 511 */; 512 void ClassificationSettings::setWeightSums (double sumOfSigWeights, double sumOfBkgWeights); 513 {; 514 m_sumOfSigWeights = sumOfSigWeights; m_sumOfBkgWeights = sumOfBkgWeights;; 515 }; 516 ; 517 /** \brief preparation for monitoring output; 518 *; 519 */; 520 void ClassificationSettings::setResultComputation (; 521 std::string _fileNameNetConfig,; 522 std::string _fileNameResult,; 523 std::vector<Pattern>* _resultPatternContainer); 524 {; 525 m_pResultPatternContainer = _resultPatternContainer;; 526 m_fileNameResult = _fileNameResult;; 527 m_fileNameNetConfig = _fileNameNetConfig;; 528 }; 529 ; 530 ; 531 ; 532 ; 533 ; 534 ; 535 ; 536 ; 537 /** \brief compute the number of weights given the size of the input layer; 538 *; 539 */; 540 size_t Net::numWeights (size_t trainingStartLayer) const ; 541 {; 542 size_t num (0);; 543 size_t index (0);; 544 size_t prevNodes (inputSize ());; 545 for (auto& layer : m_layers); 546 {; 547 if (index >= trainingStartLayer); 548 num += layer.numWeights (prevNodes);; 549 prevNodes = layer.numNodes ();; 550 ++index;; 551 }; 552 return num;; 553 }; 554 ; 555 ; 556 size_t Net::numNodes (size_t trainingStartLayer) const ; 557 {; 558 size_t num (0);; 559 size_t index (0);; 560 for (auto& layer : m_layers); 561 {; ",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:17757,Energy Efficiency,monitor,monitoring,17757,"484 */; 485 bool Settings::hasConverged (double testError); 486 {; 487 // std::cout << ""check convergence; minError "" << m_minError << "" current "" << testError; 488 // << "" current convergence count "" << m_convergenceCount << std::endl;; 489 if (testError < m_minError*0.999); 490 {; 491 m_convergenceCount = 0;; 492 m_minError = testError;; 493 }; 494 else; 495 {; 496 ++m_convergenceCount;; 497 m_maxConvergenceCount = std::max (m_convergenceCount, m_maxConvergenceCount);; 498 }; 499 ; 500 ; 501 if (m_convergenceCount >= convergenceSteps () || testError <= 0); 502 return true;; 503 ; 504 return false;; 505 }; 506 ; 507 ; 508 ; 509 /** \brief set the weight sums to be scaled to (preparations for monitoring output); 510 *; 511 */; 512 void ClassificationSettings::setWeightSums (double sumOfSigWeights, double sumOfBkgWeights); 513 {; 514 m_sumOfSigWeights = sumOfSigWeights; m_sumOfBkgWeights = sumOfBkgWeights;; 515 }; 516 ; 517 /** \brief preparation for monitoring output; 518 *; 519 */; 520 void ClassificationSettings::setResultComputation (; 521 std::string _fileNameNetConfig,; 522 std::string _fileNameResult,; 523 std::vector<Pattern>* _resultPatternContainer); 524 {; 525 m_pResultPatternContainer = _resultPatternContainer;; 526 m_fileNameResult = _fileNameResult;; 527 m_fileNameNetConfig = _fileNameNetConfig;; 528 }; 529 ; 530 ; 531 ; 532 ; 533 ; 534 ; 535 ; 536 ; 537 /** \brief compute the number of weights given the size of the input layer; 538 *; 539 */; 540 size_t Net::numWeights (size_t trainingStartLayer) const ; 541 {; 542 size_t num (0);; 543 size_t index (0);; 544 size_t prevNodes (inputSize ());; 545 for (auto& layer : m_layers); 546 {; 547 if (index >= trainingStartLayer); 548 num += layer.numWeights (prevNodes);; 549 prevNodes = layer.numNodes ();; 550 ++index;; 551 }; 552 return num;; 553 }; 554 ; 555 ; 556 size_t Net::numNodes (size_t trainingStartLayer) const ; 557 {; 558 size_t num (0);; 559 size_t index (0);; 560 for (auto& layer : m_layers); 561 {; ",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:22210,Energy Efficiency,monitor,monitoring,22210,"xy.cxx:168; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; namechar name[80]Definition TGX11.cxx:110; TMVA::DNN::ClassificationSettings::startTrainCyclevoid startTrainCycle()action to be done when the training cycle is started (e.g.Definition NeuralNet.cxx:281; TMVA::DNN::ClassificationSettings::endTrainCyclevoid endTrainCycle(double)action to be done when the training cycle is ended (e.g.Definition NeuralNet.cxx:296; TMVA::DNN::ClassificationSettings::endTestCyclevirtual void endTestCycle()action to be done when the training cycle is ended (e.g.Definition NeuralNet.cxx:326; TMVA::DNN::ClassificationSettings::m_pResultPatternContainerstd::vector< Pattern > * m_pResultPatternContainerDefinition NeuralNet.h:1009; TMVA::DNN::ClassificationSettings::setResultComputationvoid setResultComputation(std::string _fileNameNetConfig, std::string _fileNameResult, std::vector< Pattern > *_resultPatternContainer)preparation for monitoring outputDefinition NeuralNet.cxx:520; TMVA::DNN::ClassificationSettings::m_fileNameResultstd::string m_fileNameResultDefinition NeuralNet.h:1010; TMVA::DNN::ClassificationSettings::m_significancesstd::vector< double > m_significancesDefinition NeuralNet.h:1001; TMVA::DNN::ClassificationSettings::m_sumOfSigWeightsdouble m_sumOfSigWeightsDefinition NeuralNet.h:1004; TMVA::DNN::ClassificationSettings::m_weightsstd::vector< double > m_weightsDefinition NeuralNet.h:998; TMVA::DNN::ClassificationSettings::m_fileNameNetConfigstd::string m_fileNameNetConfigDefinition NeuralNet.h:1011; TMVA::DNN::ClassificationSettings::m_targetsstd::vector< double > m_targetsDefinition NeuralNet.h:997; TMVA::DNN::ClassificationSettings::testSamplevoid testSample(double error, double output, double target, double weight)action to be done after the computation of a test sample (e.g.Definition NeuralNet.cxx:304; TMVA:",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:23659,Energy Efficiency,monitor,monitoring,23659,"::DNN::ClassificationSettings::m_weightsstd::vector< double > m_weightsDefinition NeuralNet.h:998; TMVA::DNN::ClassificationSettings::m_fileNameNetConfigstd::string m_fileNameNetConfigDefinition NeuralNet.h:1011; TMVA::DNN::ClassificationSettings::m_targetsstd::vector< double > m_targetsDefinition NeuralNet.h:997; TMVA::DNN::ClassificationSettings::testSamplevoid testSample(double error, double output, double target, double weight)action to be done after the computation of a test sample (e.g.Definition NeuralNet.cxx:304; TMVA::DNN::ClassificationSettings::m_scaleToNumEventssize_t m_scaleToNumEventsDefinition NeuralNet.h:1006; TMVA::DNN::ClassificationSettings::startTestCyclevirtual void startTestCycle()action to be done when the test cycle is started (e.g.Definition NeuralNet.cxx:316; TMVA::DNN::ClassificationSettings::m_sumOfBkgWeightsdouble m_sumOfBkgWeightsDefinition NeuralNet.h:1005; TMVA::DNN::ClassificationSettings::setWeightSumsvoid setWeightSums(double sumOfSigWeights, double sumOfBkgWeights)set the weight sums to be scaled to (preparations for monitoring output)Definition NeuralNet.cxx:512; TMVA::DNN::ClassificationSettings::m_cutValuedouble m_cutValueDefinition NeuralNet.h:1008; TMVA::DNN::ClassificationSettings::m_outputstd::vector< double > m_outputDefinition NeuralNet.h:996; TMVA::DNN::LayerData::m_itInputBeginconst_iterator_type m_itInputBeginiterator to the first of the nodes in the input node vectorDefinition NeuralNet.h:639; TMVA::DNN::LayerData::m_deltasstd::vector< double > m_deltasstores the deltas for the DNN trainingDefinition NeuralNet.h:642; TMVA::DNN::LayerData::iterator_typecontainer_type::iterator iterator_typeDefinition NeuralNet.h:441; TMVA::DNN::LayerData::LayerDataLayerData(const_iterator_type itInputBegin, const_iterator_type itInputEnd, ModeOutputValues eModeOutput=ModeOutputValues::DIRECT)c'tor of LayerDataDefinition NeuralNet.cxx:81; TMVA::DNN::LayerData::container_typestd::vector< double > container_typeDefinition NeuralNet.h:439; ",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:26852,Energy Efficiency,monitor,monitoringDefinition,26852,"nctionDefinition NeuralNet.h:697; TMVA::DNN::Layer::LayerLayer(size_t numNodes, EnumFunction activationFunction, ModeOutputValues eModeOutputValues=ModeOutputValues::DIRECT)c'tor for defining a LayerDefinition NeuralNet.cxx:166; TMVA::DNN::Net::m_layersstd::vector< Layer > m_layerslayer-structure-dataDefinition NeuralNet.h:1272; TMVA::DNN::Net::inputSizesize_t inputSize() constinput size of the DNNDefinition NeuralNet.h:1098; TMVA::DNN::Net::numNodessize_t numNodes(size_t trainingStartLayer=0) constreturns the number of nodes in this netDefinition NeuralNet.cxx:556; TMVA::DNN::Net::fillDropContainervoid fillDropContainer(DropContainer &dropContainer, double dropFraction, size_t numNodes) constprepare the drop-out-container (select the nodes which are to be dropped out)Definition NeuralNet.cxx:572; TMVA::DNN::Net::numWeightssize_t numWeights(size_t trainingStartLayer=0) constreturns the number of weights in this netDefinition NeuralNet.cxx:540; TMVA::DNN::Settings::clearvoid clear(std::string histoName)for monitoringDefinition NeuralNet.h:824; TMVA::DNN::Settings::hasConvergedvirtual bool hasConverged(double testError)has this training converged already?Definition NeuralNet.cxx:485; TMVA::DNN::Settings::SettingsSettings(TString name, size_t _convergenceSteps=15, size_t _batchSize=10, size_t _testRepetitions=7, double _factorWeightDecay=1e-5, TMVA::DNN::EnumRegularization _regularization=TMVA::DNN::EnumRegularization::NONE, MinimizerType _eMinimizerType=MinimizerType::fSteepest, double _learningRate=1e-5, double _momentum=0.3, int _repetitions=3, bool _multithreading=true)c'torDefinition NeuralNet.cxx:232; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x)for monitoringDefinition NeuralNet.h:821; TMVA::DNN::Settings::~Settingsvirtual ~Settings()d'torDefinition NeuralNet.cxx:261; TMVA::DNN::Settings::m_convergenceCountsize_t m_convergenceCountDefinition NeuralNet.h:857; TMVA::DNN::Settings::m_minErrordouble m_minErrorDefinition NeuralNet.h:859; ",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:27542,Energy Efficiency,monitor,monitoringDefinition,27542,"ze_t numNodes) constprepare the drop-out-container (select the nodes which are to be dropped out)Definition NeuralNet.cxx:572; TMVA::DNN::Net::numWeightssize_t numWeights(size_t trainingStartLayer=0) constreturns the number of weights in this netDefinition NeuralNet.cxx:540; TMVA::DNN::Settings::clearvoid clear(std::string histoName)for monitoringDefinition NeuralNet.h:824; TMVA::DNN::Settings::hasConvergedvirtual bool hasConverged(double testError)has this training converged already?Definition NeuralNet.cxx:485; TMVA::DNN::Settings::SettingsSettings(TString name, size_t _convergenceSteps=15, size_t _batchSize=10, size_t _testRepetitions=7, double _factorWeightDecay=1e-5, TMVA::DNN::EnumRegularization _regularization=TMVA::DNN::EnumRegularization::NONE, MinimizerType _eMinimizerType=MinimizerType::fSteepest, double _learningRate=1e-5, double _momentum=0.3, int _repetitions=3, bool _multithreading=true)c'torDefinition NeuralNet.cxx:232; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x)for monitoringDefinition NeuralNet.h:821; TMVA::DNN::Settings::~Settingsvirtual ~Settings()d'torDefinition NeuralNet.cxx:261; TMVA::DNN::Settings::m_convergenceCountsize_t m_convergenceCountDefinition NeuralNet.h:857; TMVA::DNN::Settings::m_minErrordouble m_minErrorDefinition NeuralNet.h:859; TMVA::DNN::Settings::convergenceStepssize_t convergenceSteps() consthow many steps until training is deemed to have convergedDefinition NeuralNet.h:766; TMVA::DNN::Settings::fMonitoringstd::shared_ptr< Monitoring > fMonitoringDefinition NeuralNet.h:865; TMVA::DNN::Settings::createvoid create(std::string histoName, int bins, double min, double max)for monitoringDefinition NeuralNet.h:819; TMVA::DNN::Settings::m_maxConvergenceCountsize_t m_maxConvergenceCountDefinition NeuralNet.h:858; TStringBasic string class.Definition TString.h:139; double; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:1",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:28185,Energy Efficiency,monitor,monitoringDefinition,28185,"Repetitions=7, double _factorWeightDecay=1e-5, TMVA::DNN::EnumRegularization _regularization=TMVA::DNN::EnumRegularization::NONE, MinimizerType _eMinimizerType=MinimizerType::fSteepest, double _learningRate=1e-5, double _momentum=0.3, int _repetitions=3, bool _multithreading=true)c'torDefinition NeuralNet.cxx:232; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x)for monitoringDefinition NeuralNet.h:821; TMVA::DNN::Settings::~Settingsvirtual ~Settings()d'torDefinition NeuralNet.cxx:261; TMVA::DNN::Settings::m_convergenceCountsize_t m_convergenceCountDefinition NeuralNet.h:857; TMVA::DNN::Settings::m_minErrordouble m_minErrorDefinition NeuralNet.h:859; TMVA::DNN::Settings::convergenceStepssize_t convergenceSteps() consthow many steps until training is deemed to have convergedDefinition NeuralNet.h:766; TMVA::DNN::Settings::fMonitoringstd::shared_ptr< Monitoring > fMonitoringDefinition NeuralNet.h:865; TMVA::DNN::Settings::createvoid create(std::string histoName, int bins, double min, double max)for monitoringDefinition NeuralNet.h:819; TMVA::DNN::Settings::m_maxConvergenceCountsize_t m_maxConvergenceCountDefinition NeuralNet.h:858; TStringBasic string class.Definition TString.h:139; double; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; TMVA::DNN::InvGaussstd::shared_ptr< std::function< double(double)> > InvGaussDefinition NeuralNet.cxx:14; TMVA::DNN::uniformDoubledouble uniformDouble(double minValue, double maxValue)Definition NeuralNet.cxx:43; TMVA::DNN::SymmReLUstd::shared_ptr< std::function< double(double)> > SymmReLUDefinition NeuralNet.cxx:30; TMVA::DNN::TanhShiftstd::shared_ptr< std::function< double(double)> > TanhShiftDefinition NeuralNet.cxx:31; TMVA::DNN::Tanhstd::shared_ptr< std::function< double(double)> > TanhDefinition NeuralNet.cxx:29; TMVA::DNN::InvSigmoidstd::shared_ptr< std::function< double(double)> > InvSigmoidDefinition NeuralNet.cxx:",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:32209,Modifiability,variab,variable,32209,"::InvReLUstd::shared_ptr< std::function< double(double)> > InvReLUDefinition NeuralNet.cxx:17; TMVA::DNN::GaussComplementstd::shared_ptr< std::function< double(double)> > GaussComplementDefinition NeuralNet.cxx:13; TMVA::DNN::Gaussstd::shared_ptr< std::function< double(double)> > GaussDefinition NeuralNet.cxx:12; TMVA::DNN::MinimizerTypeMinimizerType< list all the minimizer typesDefinition NeuralNet.h:321; TMVA::DNN::Sigmoidstd::shared_ptr< std::function< double(double)> > SigmoidDefinition NeuralNet.cxx:26; TMVA::DNN::gaussDoubledouble gaussDouble(double mean, double sigma)Definition NeuralNet.cxx:35; TMVA::DNN::ModeOutputValuesModeOutputValuesDefinition NeuralNet.h:179; TMVA::DNN::ModeOutputValues::SOFTMAX@ SOFTMAX; TMVA::DNN::ModeOutputValues::DIRECT@ DIRECT; TMVA::DNN::ModeOutputValues::SIGMOID@ SIGMOID; TMVA::DNN::SoftSignstd::shared_ptr< std::function< double(double)> > SoftSignDefinition NeuralNet.cxx:32; TMVA::DNN::InvSoftPlusstd::shared_ptr< std::function< double(double)> > InvSoftPlusDefinition NeuralNet.cxx:19; TMVA::DNN::ReLUstd::shared_ptr< std::function< double(double)> > ReLUDefinition NeuralNet.cxx:25; TMVA::DNN::isFlagSetbool isFlagSet(T flag, T value)Definition NeuralNet.h:212; TMVA::DNN::randomIntint randomInt(int maxValue)Definition NeuralNet.cxx:52; TMVA::DNN::InvTanhShiftstd::shared_ptr< std::function< double(double)> > InvTanhShiftDefinition NeuralNet.cxx:23; TMVA::DNN::DropContainerstd::vector< char > DropContainerDefinition NeuralNet.h:227; TMVA::DNN::InvSymmReLUstd::shared_ptr< std::function< double(double)> > InvSymmReLUDefinition NeuralNet.cxx:21; TMVA::DNN::InvLinearstd::shared_ptr< std::function< double(double)> > InvLinearDefinition NeuralNet.cxx:16; TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345; outputstatic void output(). tmvatmvasrcNeuralNet.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:3300,Testability,log,log,3300,"e < -margin ? 1.0 : 0; });; 22 std::shared_ptr<std::function<double(double)>> InvTanh = std::make_shared<std::function<double(double)>> ([](double value){ return 1.0 - std::pow (value, 2.0); });; 23 std::shared_ptr<std::function<double(double)>> InvTanhShift = std::make_shared<std::function<double(double)>> ([](double value){ return 0.3 + (1.0 - std::pow (value, 2.0)); });; 24 std::shared_ptr<std::function<double(double)>> Linear = std::make_shared<std::function<double(double)>> ([](double value){ return value; });; 25 std::shared_ptr<std::function<double(double)>> ReLU = std::make_shared<std::function<double(double)>> ([](double value){ const double margin = 0.0; return value > margin ? value-margin : 0; });; 26 std::shared_ptr<std::function<double(double)>> Sigmoid = std::make_shared<std::function<double(double)>> ([](double value){ value = std::max (-100.0, std::min (100.0,value)); return 1.0/(1.0 + std::exp (-value)); });; 27 std::shared_ptr<std::function<double(double)>> SoftPlus = std::make_shared<std::function<double(double)>> ([](double value){ return std::log (1.0+ std::exp (value)); });; 28 std::shared_ptr<std::function<double(double)>> ZeroFnc = std::make_shared<std::function<double(double)>> ([](double /*value*/){ return 0; });; 29 std::shared_ptr<std::function<double(double)>> Tanh = std::make_shared<std::function<double(double)>> ([](double value){ return tanh (value); });; 30 std::shared_ptr<std::function<double(double)>> SymmReLU = std::make_shared<std::function<double(double)>> ([](double value){ const double margin = 0.3; return value > margin ? value-margin : value < -margin ? value+margin : 0; });; 31 std::shared_ptr<std::function<double(double)>> TanhShift = std::make_shared<std::function<double(double)>> ([](double value){ return tanh (value-0.3); });; 32 std::shared_ptr<std::function<double(double)>> SoftSign = std::make_shared<std::function<double(double)>> ([](double value){ return value / (1.0 + fabs (value)); });; 33 ; 34 ; 35 double gauss",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:11615,Testability,test,test,11615,"titions); 252 , fMinimizerType (_eMinimizerType); 253 , m_convergenceCount (0); 254 , m_maxConvergenceCount (0); 255 , m_minError (1e10); 256 , m_useMultithreading (_useMultithreading); 257 , fMonitoring (NULL); 258 {; 259 }; 260 ; 261 Settings::~Settings () ; 262 {; 263 }; 264 ; 265 ; 266 ; 267 ; 268 ; 269 ; 270 ; 271 ; 272 ; 273 ; 274 ; 275 ; 276 ; 277 ; 278 /** \brief action to be done when the training cycle is started (e.g. update some monitoring output); 279 *; 280 */; 281 void ClassificationSettings::startTrainCycle () ; 282 {; 283 if (fMonitoring); 284 {; 285 create (""ROC"", 100, 0, 1, 100, 0, 1);; 286 create (""Significance"", 100, 0, 1, 100, 0, 3);; 287 create (""OutputSig"", 100, 0, 1);; 288 create (""OutputBkg"", 100, 0, 1);; 289 fMonitoring->ProcessEvents ();; 290 }; 291 }; 292 ; 293 /** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); 294 *; 295 */; 296 void ClassificationSettings::endTrainCycle (double /*error*/) ; 297 {; 298 if (fMonitoring) fMonitoring->ProcessEvents ();; 299 }; 300 ; 301 /** \brief action to be done after the computation of a test sample (e.g. update some monitoring output); 302 *; 303 */; 304 void ClassificationSettings::testSample (double /*error*/, double output, double target, double weight); 305 {; 306 ; 307 m_output.push_back (output);; 308 m_targets.push_back (target);; 309 m_weights.push_back (weight);; 310 }; 311 ; 312 ; 313 /** \brief action to be done when the test cycle is started (e.g. update some monitoring output); 314 *; 315 */; 316 void ClassificationSettings::startTestCycle () ; 317 {; 318 m_output.clear ();; 319 m_targets.clear ();; 320 m_weights.clear ();; 321 }; 322 ; 323 /** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); 324 *; 325 */; 326 void ClassificationSettings::endTestCycle () ; 327 {; 328 if (m_output.empty ()); 329 return;; 330 double minVal = *std::min_element (begin (m_output), end (m_output));; 331 double maxVa",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:11713,Testability,test,testSample,11713," 260 ; 261 Settings::~Settings () ; 262 {; 263 }; 264 ; 265 ; 266 ; 267 ; 268 ; 269 ; 270 ; 271 ; 272 ; 273 ; 274 ; 275 ; 276 ; 277 ; 278 /** \brief action to be done when the training cycle is started (e.g. update some monitoring output); 279 *; 280 */; 281 void ClassificationSettings::startTrainCycle () ; 282 {; 283 if (fMonitoring); 284 {; 285 create (""ROC"", 100, 0, 1, 100, 0, 1);; 286 create (""Significance"", 100, 0, 1, 100, 0, 3);; 287 create (""OutputSig"", 100, 0, 1);; 288 create (""OutputBkg"", 100, 0, 1);; 289 fMonitoring->ProcessEvents ();; 290 }; 291 }; 292 ; 293 /** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); 294 *; 295 */; 296 void ClassificationSettings::endTrainCycle (double /*error*/) ; 297 {; 298 if (fMonitoring) fMonitoring->ProcessEvents ();; 299 }; 300 ; 301 /** \brief action to be done after the computation of a test sample (e.g. update some monitoring output); 302 *; 303 */; 304 void ClassificationSettings::testSample (double /*error*/, double output, double target, double weight); 305 {; 306 ; 307 m_output.push_back (output);; 308 m_targets.push_back (target);; 309 m_weights.push_back (weight);; 310 }; 311 ; 312 ; 313 /** \brief action to be done when the test cycle is started (e.g. update some monitoring output); 314 *; 315 */; 316 void ClassificationSettings::startTestCycle () ; 317 {; 318 m_output.clear ();; 319 m_targets.clear ();; 320 m_weights.clear ();; 321 }; 322 ; 323 /** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); 324 *; 325 */; 326 void ClassificationSettings::endTestCycle () ; 327 {; 328 if (m_output.empty ()); 329 return;; 330 double minVal = *std::min_element (begin (m_output), end (m_output));; 331 double maxVal = *std::max_element (begin (m_output), end (m_output));; 332 const size_t numBinsROC = 1000;; 333 const size_t numBinsData = 100;; 334 ; 335 std::vector<double> truePositives (numBinsROC+1, 0);; 336 std::vector<double> false",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:11967,Testability,test,test,11967,"some monitoring output); 279 *; 280 */; 281 void ClassificationSettings::startTrainCycle () ; 282 {; 283 if (fMonitoring); 284 {; 285 create (""ROC"", 100, 0, 1, 100, 0, 1);; 286 create (""Significance"", 100, 0, 1, 100, 0, 3);; 287 create (""OutputSig"", 100, 0, 1);; 288 create (""OutputBkg"", 100, 0, 1);; 289 fMonitoring->ProcessEvents ();; 290 }; 291 }; 292 ; 293 /** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); 294 *; 295 */; 296 void ClassificationSettings::endTrainCycle (double /*error*/) ; 297 {; 298 if (fMonitoring) fMonitoring->ProcessEvents ();; 299 }; 300 ; 301 /** \brief action to be done after the computation of a test sample (e.g. update some monitoring output); 302 *; 303 */; 304 void ClassificationSettings::testSample (double /*error*/, double output, double target, double weight); 305 {; 306 ; 307 m_output.push_back (output);; 308 m_targets.push_back (target);; 309 m_weights.push_back (weight);; 310 }; 311 ; 312 ; 313 /** \brief action to be done when the test cycle is started (e.g. update some monitoring output); 314 *; 315 */; 316 void ClassificationSettings::startTestCycle () ; 317 {; 318 m_output.clear ();; 319 m_targets.clear ();; 320 m_weights.clear ();; 321 }; 322 ; 323 /** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); 324 *; 325 */; 326 void ClassificationSettings::endTestCycle () ; 327 {; 328 if (m_output.empty ()); 329 return;; 330 double minVal = *std::min_element (begin (m_output), end (m_output));; 331 double maxVal = *std::max_element (begin (m_output), end (m_output));; 332 const size_t numBinsROC = 1000;; 333 const size_t numBinsData = 100;; 334 ; 335 std::vector<double> truePositives (numBinsROC+1, 0);; 336 std::vector<double> falsePositives (numBinsROC+1, 0);; 337 std::vector<double> trueNegatives (numBinsROC+1, 0);; 338 std::vector<double> falseNegatives (numBinsROC+1, 0);; 339 ; 340 std::vector<double> x (numBinsData, 0);; 341 std::vector<d",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:16841,Testability,test,testError,16841," bestSignificance); 447 {; 448 bestSignificance = significance;; 449 bestCutSignificance = currentCut;; 450 }; 451 ; 452 addPoint (""Significance"", currentCut, significance);; 453 // m_histSignificance->Fill (currentCut, significance);; 454 }; 455 ; 456 m_significances.push_back (bestSignificance);; 457 ; 458 clear (""OutputSig"");; 459 clear (""OutputBkg"");; 460 for (size_t i = 0; i < numBinsData; ++i); 461 {; 462 addPoint (""OutputSig"", x.at (i), datSig.at (i)/sumWeightsSig);; 463 addPoint (""OutputBkg"", x.at (i), datBkg.at (i)/sumWeightsBkg);; 464 // m_histOutputSignal->Fill (x.at (i), datSig.at (1)/sumWeightsSig);; 465 // m_histOutputBackground->Fill (x.at (i), datBkg.at (1)/sumWeightsBkg);; 466 }; 467 ; 468 ; 469 if (fMonitoring); 470 {; 471 plot (""ROC"", """", 2, kRed);; 472 plot (""Significance"", """", 3, kRed);; 473 plot (""OutputSig"", """", 4, kRed);; 474 plot (""OutputBkg"", ""same"", 4, kBlue);; 475 fMonitoring->ProcessEvents ();; 476 }; 477 ; 478 m_cutValue = bestCutSignificance;; 479 }; 480 ; 481 ; 482 /** \brief check for convergence ; 483 *; 484 */; 485 bool Settings::hasConverged (double testError); 486 {; 487 // std::cout << ""check convergence; minError "" << m_minError << "" current "" << testError; 488 // << "" current convergence count "" << m_convergenceCount << std::endl;; 489 if (testError < m_minError*0.999); 490 {; 491 m_convergenceCount = 0;; 492 m_minError = testError;; 493 }; 494 else; 495 {; 496 ++m_convergenceCount;; 497 m_maxConvergenceCount = std::max (m_convergenceCount, m_maxConvergenceCount);; 498 }; 499 ; 500 ; 501 if (m_convergenceCount >= convergenceSteps () || testError <= 0); 502 return true;; 503 ; 504 return false;; 505 }; 506 ; 507 ; 508 ; 509 /** \brief set the weight sums to be scaled to (preparations for monitoring output); 510 *; 511 */; 512 void ClassificationSettings::setWeightSums (double sumOfSigWeights, double sumOfBkgWeights); 513 {; 514 m_sumOfSigWeights = sumOfSigWeights; m_sumOfBkgWeights = sumOfBkgWeights;; 515 }; 516 ; 517 /** \brie",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:16943,Testability,test,testError,16943," bestSignificance); 447 {; 448 bestSignificance = significance;; 449 bestCutSignificance = currentCut;; 450 }; 451 ; 452 addPoint (""Significance"", currentCut, significance);; 453 // m_histSignificance->Fill (currentCut, significance);; 454 }; 455 ; 456 m_significances.push_back (bestSignificance);; 457 ; 458 clear (""OutputSig"");; 459 clear (""OutputBkg"");; 460 for (size_t i = 0; i < numBinsData; ++i); 461 {; 462 addPoint (""OutputSig"", x.at (i), datSig.at (i)/sumWeightsSig);; 463 addPoint (""OutputBkg"", x.at (i), datBkg.at (i)/sumWeightsBkg);; 464 // m_histOutputSignal->Fill (x.at (i), datSig.at (1)/sumWeightsSig);; 465 // m_histOutputBackground->Fill (x.at (i), datBkg.at (1)/sumWeightsBkg);; 466 }; 467 ; 468 ; 469 if (fMonitoring); 470 {; 471 plot (""ROC"", """", 2, kRed);; 472 plot (""Significance"", """", 3, kRed);; 473 plot (""OutputSig"", """", 4, kRed);; 474 plot (""OutputBkg"", ""same"", 4, kBlue);; 475 fMonitoring->ProcessEvents ();; 476 }; 477 ; 478 m_cutValue = bestCutSignificance;; 479 }; 480 ; 481 ; 482 /** \brief check for convergence ; 483 *; 484 */; 485 bool Settings::hasConverged (double testError); 486 {; 487 // std::cout << ""check convergence; minError "" << m_minError << "" current "" << testError; 488 // << "" current convergence count "" << m_convergenceCount << std::endl;; 489 if (testError < m_minError*0.999); 490 {; 491 m_convergenceCount = 0;; 492 m_minError = testError;; 493 }; 494 else; 495 {; 496 ++m_convergenceCount;; 497 m_maxConvergenceCount = std::max (m_convergenceCount, m_maxConvergenceCount);; 498 }; 499 ; 500 ; 501 if (m_convergenceCount >= convergenceSteps () || testError <= 0); 502 return true;; 503 ; 504 return false;; 505 }; 506 ; 507 ; 508 ; 509 /** \brief set the weight sums to be scaled to (preparations for monitoring output); 510 *; 511 */; 512 void ClassificationSettings::setWeightSums (double sumOfSigWeights, double sumOfBkgWeights); 513 {; 514 m_sumOfSigWeights = sumOfSigWeights; m_sumOfBkgWeights = sumOfBkgWeights;; 515 }; 516 ; 517 /** \brie",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:17039,Testability,test,testError,17039," bestSignificance); 447 {; 448 bestSignificance = significance;; 449 bestCutSignificance = currentCut;; 450 }; 451 ; 452 addPoint (""Significance"", currentCut, significance);; 453 // m_histSignificance->Fill (currentCut, significance);; 454 }; 455 ; 456 m_significances.push_back (bestSignificance);; 457 ; 458 clear (""OutputSig"");; 459 clear (""OutputBkg"");; 460 for (size_t i = 0; i < numBinsData; ++i); 461 {; 462 addPoint (""OutputSig"", x.at (i), datSig.at (i)/sumWeightsSig);; 463 addPoint (""OutputBkg"", x.at (i), datBkg.at (i)/sumWeightsBkg);; 464 // m_histOutputSignal->Fill (x.at (i), datSig.at (1)/sumWeightsSig);; 465 // m_histOutputBackground->Fill (x.at (i), datBkg.at (1)/sumWeightsBkg);; 466 }; 467 ; 468 ; 469 if (fMonitoring); 470 {; 471 plot (""ROC"", """", 2, kRed);; 472 plot (""Significance"", """", 3, kRed);; 473 plot (""OutputSig"", """", 4, kRed);; 474 plot (""OutputBkg"", ""same"", 4, kBlue);; 475 fMonitoring->ProcessEvents ();; 476 }; 477 ; 478 m_cutValue = bestCutSignificance;; 479 }; 480 ; 481 ; 482 /** \brief check for convergence ; 483 *; 484 */; 485 bool Settings::hasConverged (double testError); 486 {; 487 // std::cout << ""check convergence; minError "" << m_minError << "" current "" << testError; 488 // << "" current convergence count "" << m_convergenceCount << std::endl;; 489 if (testError < m_minError*0.999); 490 {; 491 m_convergenceCount = 0;; 492 m_minError = testError;; 493 }; 494 else; 495 {; 496 ++m_convergenceCount;; 497 m_maxConvergenceCount = std::max (m_convergenceCount, m_maxConvergenceCount);; 498 }; 499 ; 500 ; 501 if (m_convergenceCount >= convergenceSteps () || testError <= 0); 502 return true;; 503 ; 504 return false;; 505 }; 506 ; 507 ; 508 ; 509 /** \brief set the weight sums to be scaled to (preparations for monitoring output); 510 *; 511 */; 512 void ClassificationSettings::setWeightSums (double sumOfSigWeights, double sumOfBkgWeights); 513 {; 514 m_sumOfSigWeights = sumOfSigWeights; m_sumOfBkgWeights = sumOfBkgWeights;; 515 }; 516 ; 517 /** \brie",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:17123,Testability,test,testError,17123,"484 */; 485 bool Settings::hasConverged (double testError); 486 {; 487 // std::cout << ""check convergence; minError "" << m_minError << "" current "" << testError; 488 // << "" current convergence count "" << m_convergenceCount << std::endl;; 489 if (testError < m_minError*0.999); 490 {; 491 m_convergenceCount = 0;; 492 m_minError = testError;; 493 }; 494 else; 495 {; 496 ++m_convergenceCount;; 497 m_maxConvergenceCount = std::max (m_convergenceCount, m_maxConvergenceCount);; 498 }; 499 ; 500 ; 501 if (m_convergenceCount >= convergenceSteps () || testError <= 0); 502 return true;; 503 ; 504 return false;; 505 }; 506 ; 507 ; 508 ; 509 /** \brief set the weight sums to be scaled to (preparations for monitoring output); 510 *; 511 */; 512 void ClassificationSettings::setWeightSums (double sumOfSigWeights, double sumOfBkgWeights); 513 {; 514 m_sumOfSigWeights = sumOfSigWeights; m_sumOfBkgWeights = sumOfBkgWeights;; 515 }; 516 ; 517 /** \brief preparation for monitoring output; 518 *; 519 */; 520 void ClassificationSettings::setResultComputation (; 521 std::string _fileNameNetConfig,; 522 std::string _fileNameResult,; 523 std::vector<Pattern>* _resultPatternContainer); 524 {; 525 m_pResultPatternContainer = _resultPatternContainer;; 526 m_fileNameResult = _fileNameResult;; 527 m_fileNameNetConfig = _fileNameNetConfig;; 528 }; 529 ; 530 ; 531 ; 532 ; 533 ; 534 ; 535 ; 536 ; 537 /** \brief compute the number of weights given the size of the input layer; 538 *; 539 */; 540 size_t Net::numWeights (size_t trainingStartLayer) const ; 541 {; 542 size_t num (0);; 543 size_t index (0);; 544 size_t prevNodes (inputSize ());; 545 for (auto& layer : m_layers); 546 {; 547 if (index >= trainingStartLayer); 548 num += layer.numWeights (prevNodes);; 549 prevNodes = layer.numNodes ();; 550 ++index;; 551 }; 552 return num;; 553 }; 554 ; 555 ; 556 size_t Net::numNodes (size_t trainingStartLayer) const ; 557 {; 558 size_t num (0);; 559 size_t index (0);; 560 for (auto& layer : m_layers); 561 {; ",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:17341,Testability,test,testError,17341,"484 */; 485 bool Settings::hasConverged (double testError); 486 {; 487 // std::cout << ""check convergence; minError "" << m_minError << "" current "" << testError; 488 // << "" current convergence count "" << m_convergenceCount << std::endl;; 489 if (testError < m_minError*0.999); 490 {; 491 m_convergenceCount = 0;; 492 m_minError = testError;; 493 }; 494 else; 495 {; 496 ++m_convergenceCount;; 497 m_maxConvergenceCount = std::max (m_convergenceCount, m_maxConvergenceCount);; 498 }; 499 ; 500 ; 501 if (m_convergenceCount >= convergenceSteps () || testError <= 0); 502 return true;; 503 ; 504 return false;; 505 }; 506 ; 507 ; 508 ; 509 /** \brief set the weight sums to be scaled to (preparations for monitoring output); 510 *; 511 */; 512 void ClassificationSettings::setWeightSums (double sumOfSigWeights, double sumOfBkgWeights); 513 {; 514 m_sumOfSigWeights = sumOfSigWeights; m_sumOfBkgWeights = sumOfBkgWeights;; 515 }; 516 ; 517 /** \brief preparation for monitoring output; 518 *; 519 */; 520 void ClassificationSettings::setResultComputation (; 521 std::string _fileNameNetConfig,; 522 std::string _fileNameResult,; 523 std::vector<Pattern>* _resultPatternContainer); 524 {; 525 m_pResultPatternContainer = _resultPatternContainer;; 526 m_fileNameResult = _fileNameResult;; 527 m_fileNameNetConfig = _fileNameNetConfig;; 528 }; 529 ; 530 ; 531 ; 532 ; 533 ; 534 ; 535 ; 536 ; 537 /** \brief compute the number of weights given the size of the input layer; 538 *; 539 */; 540 size_t Net::numWeights (size_t trainingStartLayer) const ; 541 {; 542 size_t num (0);; 543 size_t index (0);; 544 size_t prevNodes (inputSize ());; 545 for (auto& layer : m_layers); 546 {; 547 if (index >= trainingStartLayer); 548 num += layer.numWeights (prevNodes);; 549 prevNodes = layer.numNodes ();; 550 ++index;; 551 }; 552 return num;; 553 }; 554 ; 555 ; 556 size_t Net::numNodes (size_t trainingStartLayer) const ; 557 {; 558 size_t num (0);; 559 size_t index (0);; 560 for (auto& layer : m_layers); 561 {; ",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:22941,Testability,test,testSamplevoid,22941,"Net.h:1009; TMVA::DNN::ClassificationSettings::setResultComputationvoid setResultComputation(std::string _fileNameNetConfig, std::string _fileNameResult, std::vector< Pattern > *_resultPatternContainer)preparation for monitoring outputDefinition NeuralNet.cxx:520; TMVA::DNN::ClassificationSettings::m_fileNameResultstd::string m_fileNameResultDefinition NeuralNet.h:1010; TMVA::DNN::ClassificationSettings::m_significancesstd::vector< double > m_significancesDefinition NeuralNet.h:1001; TMVA::DNN::ClassificationSettings::m_sumOfSigWeightsdouble m_sumOfSigWeightsDefinition NeuralNet.h:1004; TMVA::DNN::ClassificationSettings::m_weightsstd::vector< double > m_weightsDefinition NeuralNet.h:998; TMVA::DNN::ClassificationSettings::m_fileNameNetConfigstd::string m_fileNameNetConfigDefinition NeuralNet.h:1011; TMVA::DNN::ClassificationSettings::m_targetsstd::vector< double > m_targetsDefinition NeuralNet.h:997; TMVA::DNN::ClassificationSettings::testSamplevoid testSample(double error, double output, double target, double weight)action to be done after the computation of a test sample (e.g.Definition NeuralNet.cxx:304; TMVA::DNN::ClassificationSettings::m_scaleToNumEventssize_t m_scaleToNumEventsDefinition NeuralNet.h:1006; TMVA::DNN::ClassificationSettings::startTestCyclevirtual void startTestCycle()action to be done when the test cycle is started (e.g.Definition NeuralNet.cxx:316; TMVA::DNN::ClassificationSettings::m_sumOfBkgWeightsdouble m_sumOfBkgWeightsDefinition NeuralNet.h:1005; TMVA::DNN::ClassificationSettings::setWeightSumsvoid setWeightSums(double sumOfSigWeights, double sumOfBkgWeights)set the weight sums to be scaled to (preparations for monitoring output)Definition NeuralNet.cxx:512; TMVA::DNN::ClassificationSettings::m_cutValuedouble m_cutValueDefinition NeuralNet.h:1008; TMVA::DNN::ClassificationSettings::m_outputstd::vector< double > m_outputDefinition NeuralNet.h:996; TMVA::DNN::LayerData::m_itInputBeginconst_iterator_type m_itInputBeginiterator to the first o",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:22956,Testability,test,testSample,22956,"Net.h:1009; TMVA::DNN::ClassificationSettings::setResultComputationvoid setResultComputation(std::string _fileNameNetConfig, std::string _fileNameResult, std::vector< Pattern > *_resultPatternContainer)preparation for monitoring outputDefinition NeuralNet.cxx:520; TMVA::DNN::ClassificationSettings::m_fileNameResultstd::string m_fileNameResultDefinition NeuralNet.h:1010; TMVA::DNN::ClassificationSettings::m_significancesstd::vector< double > m_significancesDefinition NeuralNet.h:1001; TMVA::DNN::ClassificationSettings::m_sumOfSigWeightsdouble m_sumOfSigWeightsDefinition NeuralNet.h:1004; TMVA::DNN::ClassificationSettings::m_weightsstd::vector< double > m_weightsDefinition NeuralNet.h:998; TMVA::DNN::ClassificationSettings::m_fileNameNetConfigstd::string m_fileNameNetConfigDefinition NeuralNet.h:1011; TMVA::DNN::ClassificationSettings::m_targetsstd::vector< double > m_targetsDefinition NeuralNet.h:997; TMVA::DNN::ClassificationSettings::testSamplevoid testSample(double error, double output, double target, double weight)action to be done after the computation of a test sample (e.g.Definition NeuralNet.cxx:304; TMVA::DNN::ClassificationSettings::m_scaleToNumEventssize_t m_scaleToNumEventsDefinition NeuralNet.h:1006; TMVA::DNN::ClassificationSettings::startTestCyclevirtual void startTestCycle()action to be done when the test cycle is started (e.g.Definition NeuralNet.cxx:316; TMVA::DNN::ClassificationSettings::m_sumOfBkgWeightsdouble m_sumOfBkgWeightsDefinition NeuralNet.h:1005; TMVA::DNN::ClassificationSettings::setWeightSumsvoid setWeightSums(double sumOfSigWeights, double sumOfBkgWeights)set the weight sums to be scaled to (preparations for monitoring output)Definition NeuralNet.cxx:512; TMVA::DNN::ClassificationSettings::m_cutValuedouble m_cutValueDefinition NeuralNet.h:1008; TMVA::DNN::ClassificationSettings::m_outputstd::vector< double > m_outputDefinition NeuralNet.h:996; TMVA::DNN::LayerData::m_itInputBeginconst_iterator_type m_itInputBeginiterator to the first o",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:23070,Testability,test,test,23070,"Net.h:1009; TMVA::DNN::ClassificationSettings::setResultComputationvoid setResultComputation(std::string _fileNameNetConfig, std::string _fileNameResult, std::vector< Pattern > *_resultPatternContainer)preparation for monitoring outputDefinition NeuralNet.cxx:520; TMVA::DNN::ClassificationSettings::m_fileNameResultstd::string m_fileNameResultDefinition NeuralNet.h:1010; TMVA::DNN::ClassificationSettings::m_significancesstd::vector< double > m_significancesDefinition NeuralNet.h:1001; TMVA::DNN::ClassificationSettings::m_sumOfSigWeightsdouble m_sumOfSigWeightsDefinition NeuralNet.h:1004; TMVA::DNN::ClassificationSettings::m_weightsstd::vector< double > m_weightsDefinition NeuralNet.h:998; TMVA::DNN::ClassificationSettings::m_fileNameNetConfigstd::string m_fileNameNetConfigDefinition NeuralNet.h:1011; TMVA::DNN::ClassificationSettings::m_targetsstd::vector< double > m_targetsDefinition NeuralNet.h:997; TMVA::DNN::ClassificationSettings::testSamplevoid testSample(double error, double output, double target, double weight)action to be done after the computation of a test sample (e.g.Definition NeuralNet.cxx:304; TMVA::DNN::ClassificationSettings::m_scaleToNumEventssize_t m_scaleToNumEventsDefinition NeuralNet.h:1006; TMVA::DNN::ClassificationSettings::startTestCyclevirtual void startTestCycle()action to be done when the test cycle is started (e.g.Definition NeuralNet.cxx:316; TMVA::DNN::ClassificationSettings::m_sumOfBkgWeightsdouble m_sumOfBkgWeightsDefinition NeuralNet.h:1005; TMVA::DNN::ClassificationSettings::setWeightSumsvoid setWeightSums(double sumOfSigWeights, double sumOfBkgWeights)set the weight sums to be scaled to (preparations for monitoring output)Definition NeuralNet.cxx:512; TMVA::DNN::ClassificationSettings::m_cutValuedouble m_cutValueDefinition NeuralNet.h:1008; TMVA::DNN::ClassificationSettings::m_outputstd::vector< double > m_outputDefinition NeuralNet.h:996; TMVA::DNN::LayerData::m_itInputBeginconst_iterator_type m_itInputBeginiterator to the first o",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:23329,Testability,test,test,23329,"tings::m_fileNameResultstd::string m_fileNameResultDefinition NeuralNet.h:1010; TMVA::DNN::ClassificationSettings::m_significancesstd::vector< double > m_significancesDefinition NeuralNet.h:1001; TMVA::DNN::ClassificationSettings::m_sumOfSigWeightsdouble m_sumOfSigWeightsDefinition NeuralNet.h:1004; TMVA::DNN::ClassificationSettings::m_weightsstd::vector< double > m_weightsDefinition NeuralNet.h:998; TMVA::DNN::ClassificationSettings::m_fileNameNetConfigstd::string m_fileNameNetConfigDefinition NeuralNet.h:1011; TMVA::DNN::ClassificationSettings::m_targetsstd::vector< double > m_targetsDefinition NeuralNet.h:997; TMVA::DNN::ClassificationSettings::testSamplevoid testSample(double error, double output, double target, double weight)action to be done after the computation of a test sample (e.g.Definition NeuralNet.cxx:304; TMVA::DNN::ClassificationSettings::m_scaleToNumEventssize_t m_scaleToNumEventsDefinition NeuralNet.h:1006; TMVA::DNN::ClassificationSettings::startTestCyclevirtual void startTestCycle()action to be done when the test cycle is started (e.g.Definition NeuralNet.cxx:316; TMVA::DNN::ClassificationSettings::m_sumOfBkgWeightsdouble m_sumOfBkgWeightsDefinition NeuralNet.h:1005; TMVA::DNN::ClassificationSettings::setWeightSumsvoid setWeightSums(double sumOfSigWeights, double sumOfBkgWeights)set the weight sums to be scaled to (preparations for monitoring output)Definition NeuralNet.cxx:512; TMVA::DNN::ClassificationSettings::m_cutValuedouble m_cutValueDefinition NeuralNet.h:1008; TMVA::DNN::ClassificationSettings::m_outputstd::vector< double > m_outputDefinition NeuralNet.h:996; TMVA::DNN::LayerData::m_itInputBeginconst_iterator_type m_itInputBeginiterator to the first of the nodes in the input node vectorDefinition NeuralNet.h:639; TMVA::DNN::LayerData::m_deltasstd::vector< double > m_deltasstores the deltas for the DNN trainingDefinition NeuralNet.h:642; TMVA::DNN::LayerData::iterator_typecontainer_type::iterator iterator_typeDefinition NeuralNet.h:441; TM",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:26956,Testability,test,testError,26956,"tValues eModeOutputValues=ModeOutputValues::DIRECT)c'tor for defining a LayerDefinition NeuralNet.cxx:166; TMVA::DNN::Net::m_layersstd::vector< Layer > m_layerslayer-structure-dataDefinition NeuralNet.h:1272; TMVA::DNN::Net::inputSizesize_t inputSize() constinput size of the DNNDefinition NeuralNet.h:1098; TMVA::DNN::Net::numNodessize_t numNodes(size_t trainingStartLayer=0) constreturns the number of nodes in this netDefinition NeuralNet.cxx:556; TMVA::DNN::Net::fillDropContainervoid fillDropContainer(DropContainer &dropContainer, double dropFraction, size_t numNodes) constprepare the drop-out-container (select the nodes which are to be dropped out)Definition NeuralNet.cxx:572; TMVA::DNN::Net::numWeightssize_t numWeights(size_t trainingStartLayer=0) constreturns the number of weights in this netDefinition NeuralNet.cxx:540; TMVA::DNN::Settings::clearvoid clear(std::string histoName)for monitoringDefinition NeuralNet.h:824; TMVA::DNN::Settings::hasConvergedvirtual bool hasConverged(double testError)has this training converged already?Definition NeuralNet.cxx:485; TMVA::DNN::Settings::SettingsSettings(TString name, size_t _convergenceSteps=15, size_t _batchSize=10, size_t _testRepetitions=7, double _factorWeightDecay=1e-5, TMVA::DNN::EnumRegularization _regularization=TMVA::DNN::EnumRegularization::NONE, MinimizerType _eMinimizerType=MinimizerType::fSteepest, double _learningRate=1e-5, double _momentum=0.3, int _repetitions=3, bool _multithreading=true)c'torDefinition NeuralNet.cxx:232; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x)for monitoringDefinition NeuralNet.h:821; TMVA::DNN::Settings::~Settingsvirtual ~Settings()d'torDefinition NeuralNet.cxx:261; TMVA::DNN::Settings::m_convergenceCountsize_t m_convergenceCountDefinition NeuralNet.h:857; TMVA::DNN::Settings::m_minErrordouble m_minErrorDefinition NeuralNet.h:859; TMVA::DNN::Settings::convergenceStepssize_t convergenceSteps() consthow many steps until training is deemed to have conve",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:12115,Usability,clear,clear,12115,"nificance"", 100, 0, 1, 100, 0, 3);; 287 create (""OutputSig"", 100, 0, 1);; 288 create (""OutputBkg"", 100, 0, 1);; 289 fMonitoring->ProcessEvents ();; 290 }; 291 }; 292 ; 293 /** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); 294 *; 295 */; 296 void ClassificationSettings::endTrainCycle (double /*error*/) ; 297 {; 298 if (fMonitoring) fMonitoring->ProcessEvents ();; 299 }; 300 ; 301 /** \brief action to be done after the computation of a test sample (e.g. update some monitoring output); 302 *; 303 */; 304 void ClassificationSettings::testSample (double /*error*/, double output, double target, double weight); 305 {; 306 ; 307 m_output.push_back (output);; 308 m_targets.push_back (target);; 309 m_weights.push_back (weight);; 310 }; 311 ; 312 ; 313 /** \brief action to be done when the test cycle is started (e.g. update some monitoring output); 314 *; 315 */; 316 void ClassificationSettings::startTestCycle () ; 317 {; 318 m_output.clear ();; 319 m_targets.clear ();; 320 m_weights.clear ();; 321 }; 322 ; 323 /** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); 324 *; 325 */; 326 void ClassificationSettings::endTestCycle () ; 327 {; 328 if (m_output.empty ()); 329 return;; 330 double minVal = *std::min_element (begin (m_output), end (m_output));; 331 double maxVal = *std::max_element (begin (m_output), end (m_output));; 332 const size_t numBinsROC = 1000;; 333 const size_t numBinsData = 100;; 334 ; 335 std::vector<double> truePositives (numBinsROC+1, 0);; 336 std::vector<double> falsePositives (numBinsROC+1, 0);; 337 std::vector<double> trueNegatives (numBinsROC+1, 0);; 338 std::vector<double> falseNegatives (numBinsROC+1, 0);; 339 ; 340 std::vector<double> x (numBinsData, 0);; 341 std::vector<double> datSig (numBinsData+1, 0);; 342 std::vector<double> datBkg (numBinsData+1, 0);; 343 ; 344 double binSizeROC = (maxVal - minVal)/(double)numBinsROC;; 345 double binSizeData = (maxVal ",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:12140,Usability,clear,clear,12140,"0, 0, 3);; 287 create (""OutputSig"", 100, 0, 1);; 288 create (""OutputBkg"", 100, 0, 1);; 289 fMonitoring->ProcessEvents ();; 290 }; 291 }; 292 ; 293 /** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); 294 *; 295 */; 296 void ClassificationSettings::endTrainCycle (double /*error*/) ; 297 {; 298 if (fMonitoring) fMonitoring->ProcessEvents ();; 299 }; 300 ; 301 /** \brief action to be done after the computation of a test sample (e.g. update some monitoring output); 302 *; 303 */; 304 void ClassificationSettings::testSample (double /*error*/, double output, double target, double weight); 305 {; 306 ; 307 m_output.push_back (output);; 308 m_targets.push_back (target);; 309 m_weights.push_back (weight);; 310 }; 311 ; 312 ; 313 /** \brief action to be done when the test cycle is started (e.g. update some monitoring output); 314 *; 315 */; 316 void ClassificationSettings::startTestCycle () ; 317 {; 318 m_output.clear ();; 319 m_targets.clear ();; 320 m_weights.clear ();; 321 }; 322 ; 323 /** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); 324 *; 325 */; 326 void ClassificationSettings::endTestCycle () ; 327 {; 328 if (m_output.empty ()); 329 return;; 330 double minVal = *std::min_element (begin (m_output), end (m_output));; 331 double maxVal = *std::max_element (begin (m_output), end (m_output));; 332 const size_t numBinsROC = 1000;; 333 const size_t numBinsData = 100;; 334 ; 335 std::vector<double> truePositives (numBinsROC+1, 0);; 336 std::vector<double> falsePositives (numBinsROC+1, 0);; 337 std::vector<double> trueNegatives (numBinsROC+1, 0);; 338 std::vector<double> falseNegatives (numBinsROC+1, 0);; 339 ; 340 std::vector<double> x (numBinsData, 0);; 341 std::vector<double> datSig (numBinsData+1, 0);; 342 std::vector<double> datBkg (numBinsData+1, 0);; 343 ; 344 double binSizeROC = (maxVal - minVal)/(double)numBinsROC;; 345 double binSizeData = (maxVal - minVal)/(double)numBins",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:12165,Usability,clear,clear,12165," (""OutputBkg"", 100, 0, 1);; 289 fMonitoring->ProcessEvents ();; 290 }; 291 }; 292 ; 293 /** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); 294 *; 295 */; 296 void ClassificationSettings::endTrainCycle (double /*error*/) ; 297 {; 298 if (fMonitoring) fMonitoring->ProcessEvents ();; 299 }; 300 ; 301 /** \brief action to be done after the computation of a test sample (e.g. update some monitoring output); 302 *; 303 */; 304 void ClassificationSettings::testSample (double /*error*/, double output, double target, double weight); 305 {; 306 ; 307 m_output.push_back (output);; 308 m_targets.push_back (target);; 309 m_weights.push_back (weight);; 310 }; 311 ; 312 ; 313 /** \brief action to be done when the test cycle is started (e.g. update some monitoring output); 314 *; 315 */; 316 void ClassificationSettings::startTestCycle () ; 317 {; 318 m_output.clear ();; 319 m_targets.clear ();; 320 m_weights.clear ();; 321 }; 322 ; 323 /** \brief action to be done when the training cycle is ended (e.g. update some monitoring output); 324 *; 325 */; 326 void ClassificationSettings::endTestCycle () ; 327 {; 328 if (m_output.empty ()); 329 return;; 330 double minVal = *std::min_element (begin (m_output), end (m_output));; 331 double maxVal = *std::max_element (begin (m_output), end (m_output));; 332 const size_t numBinsROC = 1000;; 333 const size_t numBinsData = 100;; 334 ; 335 std::vector<double> truePositives (numBinsROC+1, 0);; 336 std::vector<double> falsePositives (numBinsROC+1, 0);; 337 std::vector<double> trueNegatives (numBinsROC+1, 0);; 338 std::vector<double> falseNegatives (numBinsROC+1, 0);; 339 ; 340 std::vector<double> x (numBinsData, 0);; 341 std::vector<double> datSig (numBinsData+1, 0);; 342 std::vector<double> datBkg (numBinsData+1, 0);; 343 ; 344 double binSizeROC = (maxVal - minVal)/(double)numBinsROC;; 345 double binSizeData = (maxVal - minVal)/(double)numBinsData;; 346 ; 347 double sumWeightsSig = 0.0;; 348 double su",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:14925,Usability,clear,clear,14925,"ata;; 377 ; 378 if (isSignal); 379 {; 380 for (size_t n = 0; n <= binROC; ++n); 381 {; 382 truePositives.at (n) += weight;; 383 }; 384 for (size_t n = binROC+1; n < numBinsROC; ++n); 385 {; 386 falseNegatives.at (n) += weight;; 387 }; 388 ; 389 datSig.at (binData) += weight;; 390 sumWeightsSig += weight;; 391 }; 392 else; 393 {; 394 for (size_t n = 0; n <= binROC; ++n); 395 {; 396 falsePositives.at (n) += weight;; 397 }; 398 for (size_t n = binROC+1; n < numBinsROC; ++n); 399 {; 400 trueNegatives.at (n) += weight;; 401 }; 402 ; 403 datBkg.at (binData) += weight;; 404 sumWeightsBkg += weight;; 405 }; 406 }; 407 ; 408 std::vector<double> sigEff;; 409 std::vector<double> backRej;; 410 ; 411 double bestSignificance = 0;; 412 double bestCutSignificance = 0;; 413 ; 414 double numEventsScaleFactor = 1.0;; 415 if (m_scaleToNumEvents > 0); 416 {; 417 size_t numEvents = m_output.size ();; 418 numEventsScaleFactor = double (m_scaleToNumEvents)/double (numEvents);; 419 }; 420 ; 421 clear (""ROC"");; 422 clear (""Significance"");; 423 ; 424 for (size_t i = 0; i < numBinsROC; ++i); 425 {; 426 double tp = truePositives.at (i) * numEventsScaleFactor;; 427 double fp = falsePositives.at (i) * numEventsScaleFactor;; 428 double tn = trueNegatives.at (i) * numEventsScaleFactor;; 429 double fn = falseNegatives.at (i) * numEventsScaleFactor;; 430 ; 431 double seff = (tp+fn == 0.0 ? 1.0 : (tp / (tp+fn)));; 432 double brej = (tn+fp == 0.0 ? 0.0 : (tn / (tn+fp)));; 433 ; 434 sigEff.push_back (seff);; 435 backRej.push_back (brej);; 436 ; 437 // m_histROC->Fill (seff, brej);; 438 addPoint (""ROC"", seff, brej); // x, y; 439 ; 440 ; 441 double currentCut = (i * binSizeROC)+minVal;; 442 ; 443 double sig = tp;; 444 double bkg = fp;; 445 double significance = sig / sqrt (sig + bkg);; 446 if (significance > bestSignificance); 447 {; 448 bestSignificance = significance;; 449 bestCutSignificance = currentCut;; 450 }; 451 ; 452 addPoint (""Significance"", currentCut, significance);; 453 // m_histSignificance-",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:14945,Usability,clear,clear,14945,"ata;; 377 ; 378 if (isSignal); 379 {; 380 for (size_t n = 0; n <= binROC; ++n); 381 {; 382 truePositives.at (n) += weight;; 383 }; 384 for (size_t n = binROC+1; n < numBinsROC; ++n); 385 {; 386 falseNegatives.at (n) += weight;; 387 }; 388 ; 389 datSig.at (binData) += weight;; 390 sumWeightsSig += weight;; 391 }; 392 else; 393 {; 394 for (size_t n = 0; n <= binROC; ++n); 395 {; 396 falsePositives.at (n) += weight;; 397 }; 398 for (size_t n = binROC+1; n < numBinsROC; ++n); 399 {; 400 trueNegatives.at (n) += weight;; 401 }; 402 ; 403 datBkg.at (binData) += weight;; 404 sumWeightsBkg += weight;; 405 }; 406 }; 407 ; 408 std::vector<double> sigEff;; 409 std::vector<double> backRej;; 410 ; 411 double bestSignificance = 0;; 412 double bestCutSignificance = 0;; 413 ; 414 double numEventsScaleFactor = 1.0;; 415 if (m_scaleToNumEvents > 0); 416 {; 417 size_t numEvents = m_output.size ();; 418 numEventsScaleFactor = double (m_scaleToNumEvents)/double (numEvents);; 419 }; 420 ; 421 clear (""ROC"");; 422 clear (""Significance"");; 423 ; 424 for (size_t i = 0; i < numBinsROC; ++i); 425 {; 426 double tp = truePositives.at (i) * numEventsScaleFactor;; 427 double fp = falsePositives.at (i) * numEventsScaleFactor;; 428 double tn = trueNegatives.at (i) * numEventsScaleFactor;; 429 double fn = falseNegatives.at (i) * numEventsScaleFactor;; 430 ; 431 double seff = (tp+fn == 0.0 ? 1.0 : (tp / (tp+fn)));; 432 double brej = (tn+fp == 0.0 ? 0.0 : (tn / (tn+fp)));; 433 ; 434 sigEff.push_back (seff);; 435 backRej.push_back (brej);; 436 ; 437 // m_histROC->Fill (seff, brej);; 438 addPoint (""ROC"", seff, brej); // x, y; 439 ; 440 ; 441 double currentCut = (i * binSizeROC)+minVal;; 442 ; 443 double sig = tp;; 444 double bkg = fp;; 445 double significance = sig / sqrt (sig + bkg);; 446 if (significance > bestSignificance); 447 {; 448 bestSignificance = significance;; 449 bestCutSignificance = currentCut;; 450 }; 451 ; 452 addPoint (""Significance"", currentCut, significance);; 453 // m_histSignificance-",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:16049,Usability,clear,clear,16049," double fp = falsePositives.at (i) * numEventsScaleFactor;; 428 double tn = trueNegatives.at (i) * numEventsScaleFactor;; 429 double fn = falseNegatives.at (i) * numEventsScaleFactor;; 430 ; 431 double seff = (tp+fn == 0.0 ? 1.0 : (tp / (tp+fn)));; 432 double brej = (tn+fp == 0.0 ? 0.0 : (tn / (tn+fp)));; 433 ; 434 sigEff.push_back (seff);; 435 backRej.push_back (brej);; 436 ; 437 // m_histROC->Fill (seff, brej);; 438 addPoint (""ROC"", seff, brej); // x, y; 439 ; 440 ; 441 double currentCut = (i * binSizeROC)+minVal;; 442 ; 443 double sig = tp;; 444 double bkg = fp;; 445 double significance = sig / sqrt (sig + bkg);; 446 if (significance > bestSignificance); 447 {; 448 bestSignificance = significance;; 449 bestCutSignificance = currentCut;; 450 }; 451 ; 452 addPoint (""Significance"", currentCut, significance);; 453 // m_histSignificance->Fill (currentCut, significance);; 454 }; 455 ; 456 m_significances.push_back (bestSignificance);; 457 ; 458 clear (""OutputSig"");; 459 clear (""OutputBkg"");; 460 for (size_t i = 0; i < numBinsData; ++i); 461 {; 462 addPoint (""OutputSig"", x.at (i), datSig.at (i)/sumWeightsSig);; 463 addPoint (""OutputBkg"", x.at (i), datBkg.at (i)/sumWeightsBkg);; 464 // m_histOutputSignal->Fill (x.at (i), datSig.at (1)/sumWeightsSig);; 465 // m_histOutputBackground->Fill (x.at (i), datBkg.at (1)/sumWeightsBkg);; 466 }; 467 ; 468 ; 469 if (fMonitoring); 470 {; 471 plot (""ROC"", """", 2, kRed);; 472 plot (""Significance"", """", 3, kRed);; 473 plot (""OutputSig"", """", 4, kRed);; 474 plot (""OutputBkg"", ""same"", 4, kBlue);; 475 fMonitoring->ProcessEvents ();; 476 }; 477 ; 478 m_cutValue = bestCutSignificance;; 479 }; 480 ; 481 ; 482 /** \brief check for convergence ; 483 *; 484 */; 485 bool Settings::hasConverged (double testError); 486 {; 487 // std::cout << ""check convergence; minError "" << m_minError << "" current "" << testError; 488 // << "" current convergence count "" << m_convergenceCount << std::endl;; 489 if (testError < m_minError*0.999); 490 {; 491 m_convergence",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:16075,Usability,clear,clear,16075," double fp = falsePositives.at (i) * numEventsScaleFactor;; 428 double tn = trueNegatives.at (i) * numEventsScaleFactor;; 429 double fn = falseNegatives.at (i) * numEventsScaleFactor;; 430 ; 431 double seff = (tp+fn == 0.0 ? 1.0 : (tp / (tp+fn)));; 432 double brej = (tn+fp == 0.0 ? 0.0 : (tn / (tn+fp)));; 433 ; 434 sigEff.push_back (seff);; 435 backRej.push_back (brej);; 436 ; 437 // m_histROC->Fill (seff, brej);; 438 addPoint (""ROC"", seff, brej); // x, y; 439 ; 440 ; 441 double currentCut = (i * binSizeROC)+minVal;; 442 ; 443 double sig = tp;; 444 double bkg = fp;; 445 double significance = sig / sqrt (sig + bkg);; 446 if (significance > bestSignificance); 447 {; 448 bestSignificance = significance;; 449 bestCutSignificance = currentCut;; 450 }; 451 ; 452 addPoint (""Significance"", currentCut, significance);; 453 // m_histSignificance->Fill (currentCut, significance);; 454 }; 455 ; 456 m_significances.push_back (bestSignificance);; 457 ; 458 clear (""OutputSig"");; 459 clear (""OutputBkg"");; 460 for (size_t i = 0; i < numBinsData; ++i); 461 {; 462 addPoint (""OutputSig"", x.at (i), datSig.at (i)/sumWeightsSig);; 463 addPoint (""OutputBkg"", x.at (i), datBkg.at (i)/sumWeightsBkg);; 464 // m_histOutputSignal->Fill (x.at (i), datSig.at (1)/sumWeightsSig);; 465 // m_histOutputBackground->Fill (x.at (i), datBkg.at (1)/sumWeightsBkg);; 466 }; 467 ; 468 ; 469 if (fMonitoring); 470 {; 471 plot (""ROC"", """", 2, kRed);; 472 plot (""Significance"", """", 3, kRed);; 473 plot (""OutputSig"", """", 4, kRed);; 474 plot (""OutputBkg"", ""same"", 4, kBlue);; 475 fMonitoring->ProcessEvents ();; 476 }; 477 ; 478 m_cutValue = bestCutSignificance;; 479 }; 480 ; 481 ; 482 /** \brief check for convergence ; 483 *; 484 */; 485 bool Settings::hasConverged (double testError); 486 {; 487 // std::cout << ""check convergence; minError "" << m_minError << "" current "" << testError; 488 // << "" current convergence count "" << m_convergenceCount << std::endl;; 489 if (testError < m_minError*0.999); 490 {; 491 m_convergence",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:26810,Usability,clear,clearvoid,26810,"nctionDefinition NeuralNet.h:697; TMVA::DNN::Layer::LayerLayer(size_t numNodes, EnumFunction activationFunction, ModeOutputValues eModeOutputValues=ModeOutputValues::DIRECT)c'tor for defining a LayerDefinition NeuralNet.cxx:166; TMVA::DNN::Net::m_layersstd::vector< Layer > m_layerslayer-structure-dataDefinition NeuralNet.h:1272; TMVA::DNN::Net::inputSizesize_t inputSize() constinput size of the DNNDefinition NeuralNet.h:1098; TMVA::DNN::Net::numNodessize_t numNodes(size_t trainingStartLayer=0) constreturns the number of nodes in this netDefinition NeuralNet.cxx:556; TMVA::DNN::Net::fillDropContainervoid fillDropContainer(DropContainer &dropContainer, double dropFraction, size_t numNodes) constprepare the drop-out-container (select the nodes which are to be dropped out)Definition NeuralNet.cxx:572; TMVA::DNN::Net::numWeightssize_t numWeights(size_t trainingStartLayer=0) constreturns the number of weights in this netDefinition NeuralNet.cxx:540; TMVA::DNN::Settings::clearvoid clear(std::string histoName)for monitoringDefinition NeuralNet.h:824; TMVA::DNN::Settings::hasConvergedvirtual bool hasConverged(double testError)has this training converged already?Definition NeuralNet.cxx:485; TMVA::DNN::Settings::SettingsSettings(TString name, size_t _convergenceSteps=15, size_t _batchSize=10, size_t _testRepetitions=7, double _factorWeightDecay=1e-5, TMVA::DNN::EnumRegularization _regularization=TMVA::DNN::EnumRegularization::NONE, MinimizerType _eMinimizerType=MinimizerType::fSteepest, double _learningRate=1e-5, double _momentum=0.3, int _repetitions=3, bool _multithreading=true)c'torDefinition NeuralNet.cxx:232; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x)for monitoringDefinition NeuralNet.h:821; TMVA::DNN::Settings::~Settingsvirtual ~Settings()d'torDefinition NeuralNet.cxx:261; TMVA::DNN::Settings::m_convergenceCountsize_t m_convergenceCountDefinition NeuralNet.h:857; TMVA::DNN::Settings::m_minErrordouble m_minErrorDefinition NeuralNet.h:859; ",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8cxx_source.html:26820,Usability,clear,clear,26820,"nctionDefinition NeuralNet.h:697; TMVA::DNN::Layer::LayerLayer(size_t numNodes, EnumFunction activationFunction, ModeOutputValues eModeOutputValues=ModeOutputValues::DIRECT)c'tor for defining a LayerDefinition NeuralNet.cxx:166; TMVA::DNN::Net::m_layersstd::vector< Layer > m_layerslayer-structure-dataDefinition NeuralNet.h:1272; TMVA::DNN::Net::inputSizesize_t inputSize() constinput size of the DNNDefinition NeuralNet.h:1098; TMVA::DNN::Net::numNodessize_t numNodes(size_t trainingStartLayer=0) constreturns the number of nodes in this netDefinition NeuralNet.cxx:556; TMVA::DNN::Net::fillDropContainervoid fillDropContainer(DropContainer &dropContainer, double dropFraction, size_t numNodes) constprepare the drop-out-container (select the nodes which are to be dropped out)Definition NeuralNet.cxx:572; TMVA::DNN::Net::numWeightssize_t numWeights(size_t trainingStartLayer=0) constreturns the number of weights in this netDefinition NeuralNet.cxx:540; TMVA::DNN::Settings::clearvoid clear(std::string histoName)for monitoringDefinition NeuralNet.h:824; TMVA::DNN::Settings::hasConvergedvirtual bool hasConverged(double testError)has this training converged already?Definition NeuralNet.cxx:485; TMVA::DNN::Settings::SettingsSettings(TString name, size_t _convergenceSteps=15, size_t _batchSize=10, size_t _testRepetitions=7, double _factorWeightDecay=1e-5, TMVA::DNN::EnumRegularization _regularization=TMVA::DNN::EnumRegularization::NONE, MinimizerType _eMinimizerType=MinimizerType::fSteepest, double _learningRate=1e-5, double _momentum=0.3, int _repetitions=3, bool _multithreading=true)c'torDefinition NeuralNet.cxx:232; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x)for monitoringDefinition NeuralNet.h:821; TMVA::DNN::Settings::~Settingsvirtual ~Settings()d'torDefinition NeuralNet.cxx:261; TMVA::DNN::Settings::m_convergenceCountsize_t m_convergenceCountDefinition NeuralNet.h:857; TMVA::DNN::Settings::m_minErrordouble m_minErrorDefinition NeuralNet.h:859; ",MatchSource.WIKI,doc/master/NeuralNet_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:11662,Availability,error,error,11662,"name ItDelta, typename ItInvActFnc>; 397 double sumOfSquares (ItOutput itOutputBegin, ItOutput itOutputEnd, ItTruth itTruthBegin, ItTruth itTruthEnd, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc itInvActFnc, double patternWeight);; 398 ; 399 ; 400 ; 401 template <typename ItProbability, typename ItTruth, typename ItDelta, typename ItInvActFnc>; 402 double crossEntropy (ItProbability itProbabilityBegin, ItProbability itProbabilityEnd, ItTruth itTruthBegin, ItTruth itTruthEnd, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc itInvActFnc, double patternWeight);; 403 ; 404 ; 405 ; 406 ; 407 template <typename ItOutput, typename ItTruth, typename ItDelta, typename ItInvActFnc>; 408 double softMaxCrossEntropy (ItOutput itProbabilityBegin, ItOutput itProbabilityEnd, ItTruth itTruthBegin, ItTruth itTruthEnd, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc itInvActFnc, double patternWeight);; 409 ; 410 ; 411 ; 412 ; 413 ; 414 template <typename ItWeight>; 415 double weightDecay (double error, ItWeight itWeight, ItWeight itWeightEnd, double factorWeightDecay, EnumRegularization eRegularization);; 416 ; 417 ; 418 ; 419 ; 420 ; 421 ; 422 ; 423 ; 424 ; 425 ; 426 ; 427 ; 428 ; 429 ; 430 /*! \brief LayerData holds the data of one layer; 431 *; 432 * LayerData holds the data of one layer, but not its layout; 433 *; 434 *; 435 */; 436 class LayerData; 437 {; 438 public:; 439 typedef std::vector<double> container_type;; 440 ; 441 typedef container_type::iterator iterator_type;; 442 typedef container_type::const_iterator const_iterator_type;; 443 ; 444 typedef std::vector<std::function<double(double)> > function_container_type;; 445 typedef function_container_type::iterator function_iterator_type;; 446 typedef function_container_type::const_iterator const_function_iterator_type;; 447 ; 448 typedef DropContainer::const_iterator const_dropout_iterator;; 449 ; 450 /*! \brief c'tor of LayerData; 451 *; 452 * C'tor of LayerData for the input layer; 453 *; 454 * \param itInputBegin ite",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:28317,Availability,error,error,28317," often is the test data tested; 769 double factorWeightDecay () const { return m_factorWeightDecay; } ///< get the weight-decay factor; 770 ; 771 double learningRate () const { return fLearningRate; } ///< get the learning rate; 772 double momentum () const { return fMomentum; } ///< get the momentum (e.g. for SGD); 773 int repetitions () const { return fRepetitions; } ///< how many steps have to be gone until the batch is changed; 774 MinimizerType minimizerType () const { return fMinimizerType; } ///< which minimizer shall be used (e.g. SGD); 775 ; 776 ; 777 ; 778 ; 779 ; 780 ; 781 virtual void testSample (double /*error*/, double /*output*/, double /*target*/, double /*weight*/) {} ///< virtual function to be used for monitoring (callback); 782 virtual void startTrainCycle () ///< callback for monitoring and logging; 783 {; 784 m_convergenceCount = 0;; 785 m_maxConvergenceCount= 0;; 786 m_minError = 1e10;; 787 }; 788 virtual void endTrainCycle (double /*error*/) {} ///< callback for monitoring and logging; 789 ; 790 virtual void setProgressLimits (double minProgress = 0, double maxProgress = 100) ///< for monitoring and logging (set the current ""progress"" limits for the display of the progress) \param minProgress minimum value \param maxProgress maximum value; 791 {; 792 m_minProgress = minProgress;; 793 m_maxProgress = maxProgress;; 794 }; 795 virtual void startTraining () ///< start drawing the progress bar; 796 {; 797 m_timer.DrawProgressBar (Int_t(m_minProgress));; 798 }; 799 virtual void cycle (double progress, TString text) ///< advance on the progress bar \param progress the new value \param text a label; 800 {; 801 m_timer.DrawProgressBar (Int_t(m_minProgress+(m_maxProgress-m_minProgress)*(progress/100.0)), text);; 802 }; 803 ; 804 virtual void startTestCycle () {} ///< callback for monitoring and loggging; 805 virtual void endTestCycle () {} ///< callback for monitoring and loggging; 806 virtual void testIteration () {} ///< callback for monitoring and l",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:28663,Availability,error,error,28663," often is the test data tested; 769 double factorWeightDecay () const { return m_factorWeightDecay; } ///< get the weight-decay factor; 770 ; 771 double learningRate () const { return fLearningRate; } ///< get the learning rate; 772 double momentum () const { return fMomentum; } ///< get the momentum (e.g. for SGD); 773 int repetitions () const { return fRepetitions; } ///< how many steps have to be gone until the batch is changed; 774 MinimizerType minimizerType () const { return fMinimizerType; } ///< which minimizer shall be used (e.g. SGD); 775 ; 776 ; 777 ; 778 ; 779 ; 780 ; 781 virtual void testSample (double /*error*/, double /*output*/, double /*target*/, double /*weight*/) {} ///< virtual function to be used for monitoring (callback); 782 virtual void startTrainCycle () ///< callback for monitoring and logging; 783 {; 784 m_convergenceCount = 0;; 785 m_maxConvergenceCount= 0;; 786 m_minError = 1e10;; 787 }; 788 virtual void endTrainCycle (double /*error*/) {} ///< callback for monitoring and logging; 789 ; 790 virtual void setProgressLimits (double minProgress = 0, double maxProgress = 100) ///< for monitoring and logging (set the current ""progress"" limits for the display of the progress) \param minProgress minimum value \param maxProgress maximum value; 791 {; 792 m_minProgress = minProgress;; 793 m_maxProgress = maxProgress;; 794 }; 795 virtual void startTraining () ///< start drawing the progress bar; 796 {; 797 m_timer.DrawProgressBar (Int_t(m_minProgress));; 798 }; 799 virtual void cycle (double progress, TString text) ///< advance on the progress bar \param progress the new value \param text a label; 800 {; 801 m_timer.DrawProgressBar (Int_t(m_minProgress+(m_maxProgress-m_minProgress)*(progress/100.0)), text);; 802 }; 803 ; 804 virtual void startTestCycle () {} ///< callback for monitoring and loggging; 805 virtual void endTestCycle () {} ///< callback for monitoring and loggging; 806 virtual void testIteration () {} ///< callback for monitoring and l",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:31932,Availability,error,error,31932,"d::string histoName, double x) { if (fMonitoring) fMonitoring->addPoint (histoName, x); } ///< for monitoring; 822 void addPoint (std::string histoName, double x, double y) {if (fMonitoring) fMonitoring->addPoint (histoName, x, y); } ///< for monitoring; 823 void plot (std::string histoName, std::string options, int pad, EColor color) { if (fMonitoring) fMonitoring->plot (histoName, options, pad, color); } ///< for monitoring; 824 void clear (std::string histoName) { if (fMonitoring) fMonitoring->clear (histoName); } ///< for monitoring; 825 bool exists (std::string histoName) { if (fMonitoring) return fMonitoring->exists (histoName); return false; } ///< for monitoring; 826 ; 827 size_t convergenceCount () const { return m_convergenceCount; } ///< returns the current convergence count; 828 size_t maxConvergenceCount () const { return m_maxConvergenceCount; } ///< returns the max convergence count so far; 829 size_t minError () const { return m_minError; } ///< returns the smallest error so far; 830 ; 831 public:; 832 Timer m_timer; ///< timer for monitoring; 833 double m_minProgress; ///< current limits for the progress bar; 834 double m_maxProgress; ///< current limits for the progress bar; 835 ; 836 ; 837 size_t m_convergenceSteps; ///< number of steps without improvement to consider the DNN to have converged; 838 size_t m_batchSize; ///< mini-batch size; 839 size_t m_testRepetitions;; 840 double m_factorWeightDecay;; 841 ; 842 size_t count_E;; 843 size_t count_dE;; 844 size_t count_mb_E;; 845 size_t count_mb_dE;; 846 ; 847 EnumRegularization m_regularization;; 848 ; 849 double m_dropRepetitions;; 850 std::vector<double> m_dropOut;; 851 ; 852 double fLearningRate;; 853 double fMomentum;; 854 int fRepetitions;; 855 MinimizerType fMinimizerType;; 856 ; 857 size_t m_convergenceCount;; 858 size_t m_maxConvergenceCount;; 859 double m_minError;; 860 ; 861 ; 862 protected:; 863 bool m_useMultithreading;; 864 ; 865 std::shared_ptr<Monitoring> fMonitoring;; 866 };; 867 ; ",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:34381,Availability,error,error,34381,"pe = MinimizerType::fSteepest,; 905 double _learningRate = 1e-5, double _momentum = 0.3, int _repetitions = 3,; 906 bool _useMultithreading = true); 907 : Settings (name, _convergenceSteps, _batchSize, _testRepetitions, _factorWeightDecay,; 908 _regularization, _eMinimizerType, _learningRate, _momentum, _repetitions, _useMultithreading); 909 , m_ams (); 910 , m_sumOfSigWeights (0); 911 , m_sumOfBkgWeights (0); 912 , m_scaleToNumEvents (_scaleToNumEvents); 913 , m_cutValue (10.0); 914 , m_pResultPatternContainer(nullptr); 915 , m_fileNameResult (); 916 , m_fileNameNetConfig (); 917 {; 918 }; 919 ; 920 /*! \brief d'tor; 921 *; 922 *; 923 */; 924 virtual ~ClassificationSettings (); 925 {; 926 }; 927 ; 928 void startTrainCycle ();; 929 void endTrainCycle (double /*error*/);; 930 void testIteration () { if (fMonitoring) fMonitoring->ProcessEvents (); }; 931 ; 932 ; 933 /* void createHistograms () */; 934 /* { */; 935 /* std::cout << ""is hist ROC existing?"" << std::endl; */; 936 /* if (m_histROC) */; 937 /* { */; 938 /* std::cout << ""--> yes"" << std::endl; */; 939 /* fMonitoring->ProcessEvents (); */; 940 /* return; */; 941 /* } */; 942 ; 943 /* std::cout << ""create histograms"" << std::endl; */; 944 /* TCanvas* canvas = fMonitoring->GetCanvas (); */; 945 /* if (canvas) */; 946 /* { */; 947 /* std::cout << ""canvas divide"" << std::endl; */; 948 /* canvas->cd (); */; 949 /* canvas->Divide (2,2); */; 950 /* } */; 951 /* if (!m_histROC) */; 952 /* { */; 953 /* m_histROC = new TH2F (""ROC"",""ROC"", 1000, 0, 1.0, 1000, 0, 1.0); m_histROC->SetDirectory (0); */; 954 /* m_histROC->SetLineColor (kBlue); */; 955 /* } */; 956 /* if (!m_histSignificance) */; 957 /* { */; 958 /* m_histSignificance = new TH2F (""Significance"", ""Significance"", 1000, 0,1.0, 5, 0.0, 2.0); */; 959 /* m_histSignificance->SetDirectory (0); */; 960 /* m_histSignificance->SetBit (TH1::kCanRebin); */; 961 /* m_histROC->SetLineColor (kRed); */; 962 /* } */; 963 /* if (!m_histError) */; 964 /* { */; 965 /* m_histError =",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:36412,Availability,error,error,36412,,MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:37679,Availability,error,error,37679,"round->SetBit (TH1::kCanRebin); */; 981 /* } */; 982 ; 983 /* fMonitoring->ProcessEvents (); */; 984 /* } */; 985 ; 986 void testSample (double error, double output, double target, double weight);; 987 ; 988 virtual void startTestCycle ();; 989 virtual void endTestCycle ();; 990 ; 991 ; 992 void setWeightSums (double sumOfSigWeights, double sumOfBkgWeights);; 993 void setResultComputation (std::string _fileNameNetConfig, std::string _fileNameResult, std::vector<Pattern>* _resultPatternContainer);; 994 ; 995 std::vector<double> m_input;; 996 std::vector<double> m_output;; 997 std::vector<double> m_targets;; 998 std::vector<double> m_weights;; 999 ; 1000 std::vector<double> m_ams;; 1001 std::vector<double> m_significances;; 1002 ; 1003 ; 1004 double m_sumOfSigWeights;; 1005 double m_sumOfBkgWeights;; 1006 size_t m_scaleToNumEvents;; 1007 ; 1008 double m_cutValue;; 1009 std::vector<Pattern>* m_pResultPatternContainer;; 1010 std::string m_fileNameResult;; 1011 std::string m_fileNameNetConfig;; 1012 ; 1013 ; 1014 /* TH2F* m_histROC; */; 1015 /* TH2F* m_histSignificance; */; 1016 ; 1017 /* TH1F* m_histError; */; 1018 /* TH1F* m_histOutputSignal; */; 1019 /* TH1F* m_histOutputBackground; */; 1020 };; 1021 ; 1022 ; 1023 ; 1024 ; 1025 ; 1026 ; 1027 ; 1028 ///< used to distinguish between different function signatures; 1029 enum class ModeOutput; 1030 {; 1031 FETCH; 1032 };; 1033 ; 1034 /*! \brief error functions to be chosen from; 1035 *; 1036 *; 1037 */; 1038 enum class ModeErrorFunction; 1039 {; 1040 SUMOFSQUARES = 'S',; 1041 CROSSENTROPY = 'C',; 1042 CROSSENTROPY_MUTUALEXCLUSIVE = 'M'; 1043 };; 1044 ; 1045 /*! \brief weight initialization strategies to be chosen from; 1046 *; 1047 *; 1048 */; 1049 enum class WeightInitializationStrategy; 1050 {; 1051 XAVIER, TEST, LAYERSIZE, XAVIERUNIFORM; 1052 };; 1053 ; 1054 ; 1055 ; 1056 /*! \brief neural net; 1057 *; 1058 * holds the structure of all layers and some data for the whole net; 1059 * does not know the layer data though (i.",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:39450,Availability,error,error,39450,"081 /*! \brief d'tor; 1082 *; 1083 *; 1084 */; 1085 Net (const Net& other); 1086 : m_eErrorFunction (other.m_eErrorFunction); 1087 , m_sizeInput (other.m_sizeInput); 1088 , m_layers (other.m_layers); 1089 {; 1090 }; 1091 ; 1092 void setInputSize (size_t sizeInput) { m_sizeInput = sizeInput; } ///< set the input size of the DNN; 1093 void setOutputSize (size_t sizeOutput) { m_sizeOutput = sizeOutput; } ///< set the output size of the DNN; 1094 void addLayer (Layer& layer) { m_layers.push_back (layer); } ///< add a layer (layout); 1095 void addLayer (Layer&& layer) { m_layers.push_back (layer); }; 1096 void setErrorFunction (ModeErrorFunction eErrorFunction) { m_eErrorFunction = eErrorFunction; } ///< which error function is to be used; 1097 ; 1098 size_t inputSize () const { return m_sizeInput; } ///< input size of the DNN; 1099 size_t outputSize () const { return m_sizeOutput; } ///< output size of the DNN; 1100 ; 1101 /*! \brief set the drop out configuration; 1102 *; 1103 *; 1104 */; 1105 template <typename WeightsType, typename DropProbabilities>; 1106 void dropOutWeightFactor (WeightsType& weights,; 1107 const DropProbabilities& drops,; 1108 bool inverse = false);; 1109 ; 1110 /*! \brief start the training; 1111 *; 1112 * \param weights weight vector; 1113 * \param trainPattern training pattern; 1114 * \param testPattern test pattern; 1115 * \param minimizer use this minimizer for training (e.g. SGD); 1116 * \param settings settings used for this training run; 1117 */; 1118 template <typename Minimizer>; 1119 double train (std::vector<double>& weights,; 1120 std::vector<Pattern>& trainPattern,; 1121 const std::vector<Pattern>& testPattern,; 1122 Minimizer& minimizer,; 1123 Settings& settings);; 1124 ; 1125 /*! \brief pre-training for future use; 1126 *; 1127 *; 1128 */; 1129 template <typename Minimizer>; 1130 void preTrain (std::vector<double>& weights,; 1131 std::vector<Pattern>& trainPattern,; 1132 const std::vector<Pattern>& testPattern,; 1133 Minimizer& mini",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:45270,Availability,error,error,45270,"191 ; 1192 template <typename OutputContainer>; 1193 void fetchOutput (const LayerData& lastLayerData, OutputContainer& outputContainer) const;; 1194 ; 1195 template <typename OutputContainer>; 1196 void fetchOutput (const std::vector<LayerData>& layerPatternData, OutputContainer& outputContainer) const;; 1197 ; 1198 ; 1199 template <typename ItWeight>; 1200 std::tuple</*sumError*/double,/*sumWeights*/double> computeError (const Settings& settings,; 1201 std::vector<LayerData>& lastLayerData,; 1202 Batch& batch,; 1203 ItWeight itWeightBegin,; 1204 ItWeight itWeightEnd) const;; 1205 ; 1206 template <typename Settings>; 1207 void backPropagate (std::vector<std::vector<LayerData>>& layerPatternData,; 1208 const Settings& settings,; 1209 size_t trainFromLayer,; 1210 size_t totalNumWeights) const;; 1211 ; 1212 ; 1213 ; 1214 /*! \brief main NN computation function; 1215 *; 1216 *; 1217 */; 1218 template <typename LayerContainer, typename PassThrough, typename ItWeight, typename ItGradient, typename OutContainer>; 1219 double forward_backward (LayerContainer& layers, PassThrough& settingsAndBatch,; 1220 ItWeight itWeightBegin, ItWeight itWeightEnd,; 1221 ItGradient itGradientBegin, ItGradient itGradientEnd,; 1222 size_t trainFromLayer,; 1223 OutContainer& outputContainer, bool fetchOutput) const;; 1224 ; 1225 ; 1226 ; 1227 double E ();; 1228 void dE ();; 1229 ; 1230 ; 1231 /*! \brief computes the error of the DNN; 1232 *; 1233 *; 1234 */; 1235 template <typename Container, typename ItWeight>; 1236 double errorFunction (LayerData& layerData,; 1237 Container truth,; 1238 ItWeight itWeight,; 1239 ItWeight itWeightEnd,; 1240 double patternWeight,; 1241 double factorWeightDecay,; 1242 EnumRegularization eRegularization) const;; 1243 ; 1244 ; 1245 const std::vector<Layer>& layers () const { return m_layers; } ///< returns the layers (structure); 1246 std::vector<Layer>& layers () { return m_layers; } ///< returns the layers (structure); 1247 ; 1248 void removeLayer () { m_layers.",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:45380,Availability,error,errorFunction,45380,"191 ; 1192 template <typename OutputContainer>; 1193 void fetchOutput (const LayerData& lastLayerData, OutputContainer& outputContainer) const;; 1194 ; 1195 template <typename OutputContainer>; 1196 void fetchOutput (const std::vector<LayerData>& layerPatternData, OutputContainer& outputContainer) const;; 1197 ; 1198 ; 1199 template <typename ItWeight>; 1200 std::tuple</*sumError*/double,/*sumWeights*/double> computeError (const Settings& settings,; 1201 std::vector<LayerData>& lastLayerData,; 1202 Batch& batch,; 1203 ItWeight itWeightBegin,; 1204 ItWeight itWeightEnd) const;; 1205 ; 1206 template <typename Settings>; 1207 void backPropagate (std::vector<std::vector<LayerData>>& layerPatternData,; 1208 const Settings& settings,; 1209 size_t trainFromLayer,; 1210 size_t totalNumWeights) const;; 1211 ; 1212 ; 1213 ; 1214 /*! \brief main NN computation function; 1215 *; 1216 *; 1217 */; 1218 template <typename LayerContainer, typename PassThrough, typename ItWeight, typename ItGradient, typename OutContainer>; 1219 double forward_backward (LayerContainer& layers, PassThrough& settingsAndBatch,; 1220 ItWeight itWeightBegin, ItWeight itWeightEnd,; 1221 ItGradient itGradientBegin, ItGradient itGradientEnd,; 1222 size_t trainFromLayer,; 1223 OutContainer& outputContainer, bool fetchOutput) const;; 1224 ; 1225 ; 1226 ; 1227 double E ();; 1228 void dE ();; 1229 ; 1230 ; 1231 /*! \brief computes the error of the DNN; 1232 *; 1233 *; 1234 */; 1235 template <typename Container, typename ItWeight>; 1236 double errorFunction (LayerData& layerData,; 1237 Container truth,; 1238 ItWeight itWeight,; 1239 ItWeight itWeightEnd,; 1240 double patternWeight,; 1241 double factorWeightDecay,; 1242 EnumRegularization eRegularization) const;; 1243 ; 1244 ; 1245 const std::vector<Layer>& layers () const { return m_layers; } ///< returns the layers (structure); 1246 std::vector<Layer>& layers () { return m_layers; } ///< returns the layers (structure); 1247 ; 1248 void removeLayer () { m_layers.",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:46570,Availability,error,error,46570,"ers (structure); 1247 ; 1248 void removeLayer () { m_layers.pop_back (); } ///< remove one layer; 1249 ; 1250 ; 1251 void clear () ///< clear one layer; 1252 {; 1253 m_layers.clear ();; 1254 m_eErrorFunction = ModeErrorFunction::SUMOFSQUARES;; 1255 }; 1256 ; 1257 ; 1258 template <typename OutIterator>; 1259 void initializeWeights (WeightInitializationStrategy eInitStrategy,; 1260 OutIterator itWeight); ///< initialize the weights with the given strategy; 1261 ; 1262 protected:; 1263 ; 1264 void fillDropContainer (DropContainer& dropContainer, double dropFraction, size_t numNodes) const; ///< prepare the drop-out-container (select the nodes which are to be dropped out); 1265 ; 1266 ; 1267 private:; 1268 ; 1269 ModeErrorFunction m_eErrorFunction; ///< denotes the error function; 1270 size_t m_sizeInput; ///< input size of this DNN; 1271 size_t m_sizeOutput; ///< output size of this DNN; 1272 std::vector<Layer> m_layers; ///< layer-structure-data; 1273 ; 1274 protected:; 1275 // variables for JsMVA (interactive training in jupyter notebook); 1276 IPythonInteractive *fInteractive = nullptr;; 1277 bool * fExitFromTraining = nullptr;; 1278 UInt_t *fIPyMaxIter = nullptr, *fIPyCurrentIter = nullptr;; 1279 ; 1280 public:; 1281 ; 1282 // setup ipython interactive variables; 1283 void SetIpythonInteractive(IPythonInteractive* fI, bool* fE, UInt_t *M, UInt_t *C){; 1284 fInteractive = fI;; 1285 fExitFromTraining = fE;; 1286 fIPyMaxIter = M;; 1287 fIPyCurrentIter = C;; 1288 }; 1289 };; 1290 ; 1291 ; 1292 ; 1293 ; 1294typedef std::tuple<Settings&, Batch&, DropContainer&> pass_through_type;; 1295 ; 1296 ; 1297 ; 1298 ; 1299 ; 1300 ; 1301 ; 1302 } // namespace DNN; 1303} // namespace TMVA; 1304 ; 1305 ; 1306// include the implementations (in header file, because they are templated); 1307#include ""TMVA/NeuralNet.icc""; 1308 ; 1309#endif; 1310 ; Monitoring.h; NeuralNet.icc; Pattern.h; R#define R(a, b, c, d, e, f, g, h, i)Definition RSha256.hxx:110; e#define e(i)Definition RSha256.hxx:10",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:52754,Availability,error,error,52754,"erType::fSteepest, double _learningRate=1e-5, double _momentum=0.3, int _repetitions=3, bool _useMultithreading=true)c'torDefinition NeuralNet.h:901; TMVA::DNN::ClassificationSettings::m_inputstd::vector< double > m_inputDefinition NeuralNet.h:995; TMVA::DNN::ClassificationSettings::m_significancesstd::vector< double > m_significancesDefinition NeuralNet.h:1001; TMVA::DNN::ClassificationSettings::m_sumOfSigWeightsdouble m_sumOfSigWeightsDefinition NeuralNet.h:1004; TMVA::DNN::ClassificationSettings::m_weightsstd::vector< double > m_weightsDefinition NeuralNet.h:998; TMVA::DNN::ClassificationSettings::m_fileNameNetConfigstd::string m_fileNameNetConfigDefinition NeuralNet.h:1011; TMVA::DNN::ClassificationSettings::~ClassificationSettingsvirtual ~ClassificationSettings()d'torDefinition NeuralNet.h:924; TMVA::DNN::ClassificationSettings::m_targetsstd::vector< double > m_targetsDefinition NeuralNet.h:997; TMVA::DNN::ClassificationSettings::testSamplevoid testSample(double error, double output, double target, double weight)action to be done after the computation of a test sample (e.g.Definition NeuralNet.cxx:304; TMVA::DNN::ClassificationSettings::m_scaleToNumEventssize_t m_scaleToNumEventsDefinition NeuralNet.h:1006; TMVA::DNN::ClassificationSettings::startTestCyclevirtual void startTestCycle()action to be done when the test cycle is started (e.g.Definition NeuralNet.cxx:316; TMVA::DNN::ClassificationSettings::m_sumOfBkgWeightsdouble m_sumOfBkgWeightsDefinition NeuralNet.h:1005; TMVA::DNN::ClassificationSettings::setWeightSumsvoid setWeightSums(double sumOfSigWeights, double sumOfBkgWeights)set the weight sums to be scaled to (preparations for monitoring output)Definition NeuralNet.cxx:512; TMVA::DNN::ClassificationSettings::m_amsstd::vector< double > m_amsDefinition NeuralNet.h:1000; TMVA::DNN::ClassificationSettings::m_cutValuedouble m_cutValueDefinition NeuralNet.h:1008; TMVA::DNN::ClassificationSettings::m_outputstd::vector< double > m_outputDefinition NeuralNet.h:99",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:66649,Availability,error,error,66649,"t Weights &weights) constcompute the net with the given input and the given weightsDefinition NeuralNet.icc:1037; TMVA::DNN::Net::container_typestd::vector< double > container_typeDefinition NeuralNet.h:1065; TMVA::DNN::Net::iterator_typecontainer_type::iterator iterator_typeDefinition NeuralNet.h:1066; TMVA::DNN::Net::preTrainvoid preTrain(std::vector< double > &weights, std::vector< Pattern > &trainPattern, const std::vector< Pattern > &testPattern, Minimizer &minimizer, Settings &settings)pre-training for future use; TMVA::DNN::Net::fetchOutputvoid fetchOutput(const LayerData &lastLayerData, OutputContainer &outputContainer) constDefinition NeuralNet.icc:1291; TMVA::DNN::Net::inputSizesize_t inputSize() constinput size of the DNNDefinition NeuralNet.h:1098; TMVA::DNN::Net::clearvoid clear()Definition NeuralNet.h:1251; TMVA::DNN::Net::begin_end_typestd::pair< iterator_type, iterator_type > begin_end_typeDefinition NeuralNet.h:1067; TMVA::DNN::Net::m_eErrorFunctionModeErrorFunction m_eErrorFunctiondenotes the error functionDefinition NeuralNet.h:1269; TMVA::DNN::Net::dEvoid dE(); TMVA::DNN::Net::addLayervoid addLayer(Layer &&layer)Definition NeuralNet.h:1095; TMVA::DNN::Net::numNodessize_t numNodes(size_t trainingStartLayer=0) constreturns the number of nodes in this netDefinition NeuralNet.cxx:556; TMVA::DNN::Net::traindouble train(std::vector< double > &weights, std::vector< Pattern > &trainPattern, const std::vector< Pattern > &testPattern, Minimizer &minimizer, Settings &settings)start the trainingDefinition NeuralNet.icc:712; TMVA::DNN::Net::layersconst std::vector< Layer > & layers() constreturns the layers (structure)Definition NeuralNet.h:1245; TMVA::DNN::Net::prepareLayerDatastd::vector< std::vector< LayerData > > prepareLayerData(LayerContainer &layers, Batch &batch, const DropContainer &dropContainer, ItWeight itWeightBegin, ItWeight itWeightEnd, ItGradient itGradientBegin, ItGradient itGradientEnd, size_t &totalNumWeights) constDefinition NeuralNet.icc:1",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:67722,Availability,error,error,67722,"A::DNN::Net::dEvoid dE(); TMVA::DNN::Net::addLayervoid addLayer(Layer &&layer)Definition NeuralNet.h:1095; TMVA::DNN::Net::numNodessize_t numNodes(size_t trainingStartLayer=0) constreturns the number of nodes in this netDefinition NeuralNet.cxx:556; TMVA::DNN::Net::traindouble train(std::vector< double > &weights, std::vector< Pattern > &trainPattern, const std::vector< Pattern > &testPattern, Minimizer &minimizer, Settings &settings)start the trainingDefinition NeuralNet.icc:712; TMVA::DNN::Net::layersconst std::vector< Layer > & layers() constreturns the layers (structure)Definition NeuralNet.h:1245; TMVA::DNN::Net::prepareLayerDatastd::vector< std::vector< LayerData > > prepareLayerData(LayerContainer &layers, Batch &batch, const DropContainer &dropContainer, ItWeight itWeightBegin, ItWeight itWeightEnd, ItGradient itGradientBegin, ItGradient itGradientEnd, size_t &totalNumWeights) constDefinition NeuralNet.icc:1111; TMVA::DNN::Net::setErrorFunctionvoid setErrorFunction(ModeErrorFunction eErrorFunction)which error function is to be usedDefinition NeuralNet.h:1096; TMVA::DNN::Net::initializeWeightsvoid initializeWeights(WeightInitializationStrategy eInitStrategy, OutIterator itWeight)initialize the weights with the given strategyDefinition NeuralNet.icc:1470; TMVA::DNN::Net::outputSizesize_t outputSize() constoutput size of the DNNDefinition NeuralNet.h:1099; TMVA::DNN::Net::errorFunctiondouble errorFunction(LayerData &layerData, Container truth, ItWeight itWeight, ItWeight itWeightEnd, double patternWeight, double factorWeightDecay, EnumRegularization eRegularization) constcomputes the error of the DNNDefinition NeuralNet.icc:1579; TMVA::DNN::Net::forward_backwarddouble forward_backward(LayerContainer &layers, PassThrough &settingsAndBatch, ItWeight itWeightBegin, ItWeight itWeightEnd, ItGradient itGradientBegin, ItGradient itGradientEnd, size_t trainFromLayer, OutContainer &outputContainer, bool fetchOutput) constmain NN computation functionDefinition NeuralNet.",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:68095,Availability,error,errorFunctiondouble,68095,"std::vector< Layer > & layers() constreturns the layers (structure)Definition NeuralNet.h:1245; TMVA::DNN::Net::prepareLayerDatastd::vector< std::vector< LayerData > > prepareLayerData(LayerContainer &layers, Batch &batch, const DropContainer &dropContainer, ItWeight itWeightBegin, ItWeight itWeightEnd, ItGradient itGradientBegin, ItGradient itGradientEnd, size_t &totalNumWeights) constDefinition NeuralNet.icc:1111; TMVA::DNN::Net::setErrorFunctionvoid setErrorFunction(ModeErrorFunction eErrorFunction)which error function is to be usedDefinition NeuralNet.h:1096; TMVA::DNN::Net::initializeWeightsvoid initializeWeights(WeightInitializationStrategy eInitStrategy, OutIterator itWeight)initialize the weights with the given strategyDefinition NeuralNet.icc:1470; TMVA::DNN::Net::outputSizesize_t outputSize() constoutput size of the DNNDefinition NeuralNet.h:1099; TMVA::DNN::Net::errorFunctiondouble errorFunction(LayerData &layerData, Container truth, ItWeight itWeight, ItWeight itWeightEnd, double patternWeight, double factorWeightDecay, EnumRegularization eRegularization) constcomputes the error of the DNNDefinition NeuralNet.icc:1579; TMVA::DNN::Net::forward_backwarddouble forward_backward(LayerContainer &layers, PassThrough &settingsAndBatch, ItWeight itWeightBegin, ItWeight itWeightEnd, ItGradient itGradientBegin, ItGradient itGradientEnd, size_t trainFromLayer, OutContainer &outputContainer, bool fetchOutput) constmain NN computation functionDefinition NeuralNet.icc:1405; TMVA::DNN::Net::removeLayervoid removeLayer()remove one layerDefinition NeuralNet.h:1248; TMVA::DNN::Net::m_sizeOutputsize_t m_sizeOutputoutput size of this DNNDefinition NeuralNet.h:1271; TMVA::DNN::Net::m_sizeInputsize_t m_sizeInputinput size of this DNNDefinition NeuralNet.h:1270; TMVA::DNN::Net::trainCycledouble trainCycle(Minimizer &minimizer, std::vector< double > &weights, Iterator itPatternBegin, Iterator itPatternEnd, Settings &settings, DropContainer &dropContainer)executes one training cyc",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:68115,Availability,error,errorFunction,68115,"std::vector< Layer > & layers() constreturns the layers (structure)Definition NeuralNet.h:1245; TMVA::DNN::Net::prepareLayerDatastd::vector< std::vector< LayerData > > prepareLayerData(LayerContainer &layers, Batch &batch, const DropContainer &dropContainer, ItWeight itWeightBegin, ItWeight itWeightEnd, ItGradient itGradientBegin, ItGradient itGradientEnd, size_t &totalNumWeights) constDefinition NeuralNet.icc:1111; TMVA::DNN::Net::setErrorFunctionvoid setErrorFunction(ModeErrorFunction eErrorFunction)which error function is to be usedDefinition NeuralNet.h:1096; TMVA::DNN::Net::initializeWeightsvoid initializeWeights(WeightInitializationStrategy eInitStrategy, OutIterator itWeight)initialize the weights with the given strategyDefinition NeuralNet.icc:1470; TMVA::DNN::Net::outputSizesize_t outputSize() constoutput size of the DNNDefinition NeuralNet.h:1099; TMVA::DNN::Net::errorFunctiondouble errorFunction(LayerData &layerData, Container truth, ItWeight itWeight, ItWeight itWeightEnd, double patternWeight, double factorWeightDecay, EnumRegularization eRegularization) constcomputes the error of the DNNDefinition NeuralNet.icc:1579; TMVA::DNN::Net::forward_backwarddouble forward_backward(LayerContainer &layers, PassThrough &settingsAndBatch, ItWeight itWeightBegin, ItWeight itWeightEnd, ItGradient itGradientBegin, ItGradient itGradientEnd, size_t trainFromLayer, OutContainer &outputContainer, bool fetchOutput) constmain NN computation functionDefinition NeuralNet.icc:1405; TMVA::DNN::Net::removeLayervoid removeLayer()remove one layerDefinition NeuralNet.h:1248; TMVA::DNN::Net::m_sizeOutputsize_t m_sizeOutputoutput size of this DNNDefinition NeuralNet.h:1271; TMVA::DNN::Net::m_sizeInputsize_t m_sizeInputinput size of this DNNDefinition NeuralNet.h:1270; TMVA::DNN::Net::trainCycledouble trainCycle(Minimizer &minimizer, std::vector< double > &weights, Iterator itPatternBegin, Iterator itPatternEnd, Settings &settings, DropContainer &dropContainer)executes one training cyc",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:68311,Availability,error,error,68311,"std::vector< Layer > & layers() constreturns the layers (structure)Definition NeuralNet.h:1245; TMVA::DNN::Net::prepareLayerDatastd::vector< std::vector< LayerData > > prepareLayerData(LayerContainer &layers, Batch &batch, const DropContainer &dropContainer, ItWeight itWeightBegin, ItWeight itWeightEnd, ItGradient itGradientBegin, ItGradient itGradientEnd, size_t &totalNumWeights) constDefinition NeuralNet.icc:1111; TMVA::DNN::Net::setErrorFunctionvoid setErrorFunction(ModeErrorFunction eErrorFunction)which error function is to be usedDefinition NeuralNet.h:1096; TMVA::DNN::Net::initializeWeightsvoid initializeWeights(WeightInitializationStrategy eInitStrategy, OutIterator itWeight)initialize the weights with the given strategyDefinition NeuralNet.icc:1470; TMVA::DNN::Net::outputSizesize_t outputSize() constoutput size of the DNNDefinition NeuralNet.h:1099; TMVA::DNN::Net::errorFunctiondouble errorFunction(LayerData &layerData, Container truth, ItWeight itWeight, ItWeight itWeightEnd, double patternWeight, double factorWeightDecay, EnumRegularization eRegularization) constcomputes the error of the DNNDefinition NeuralNet.icc:1579; TMVA::DNN::Net::forward_backwarddouble forward_backward(LayerContainer &layers, PassThrough &settingsAndBatch, ItWeight itWeightBegin, ItWeight itWeightEnd, ItGradient itGradientBegin, ItGradient itGradientEnd, size_t trainFromLayer, OutContainer &outputContainer, bool fetchOutput) constmain NN computation functionDefinition NeuralNet.icc:1405; TMVA::DNN::Net::removeLayervoid removeLayer()remove one layerDefinition NeuralNet.h:1248; TMVA::DNN::Net::m_sizeOutputsize_t m_sizeOutputoutput size of this DNNDefinition NeuralNet.h:1271; TMVA::DNN::Net::m_sizeInputsize_t m_sizeInputinput size of this DNNDefinition NeuralNet.h:1270; TMVA::DNN::Net::trainCycledouble trainCycle(Minimizer &minimizer, std::vector< double > &weights, Iterator itPatternBegin, Iterator itPatternEnd, Settings &settings, DropContainer &dropContainer)executes one training cyc",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:77847,Availability,error,error,77847,"monitoringDefinition NeuralNet.h:818; TMVA::DNN::Settings::m_testRepetitionssize_t m_testRepetitionsDefinition NeuralNet.h:839; TMVA::DNN::Settings::fLearningRatedouble fLearningRateDefinition NeuralNet.h:852; TMVA::DNN::Settings::fMomentumdouble fMomentumDefinition NeuralNet.h:853; TMVA::DNN::Settings::batchSizesize_t batchSize() constmini-batch sizeDefinition NeuralNet.h:767; TMVA::DNN::Settings::computeResultvirtual void computeResult(const Net &, std::vector< double > &)callback for monitoring and loggingDefinition NeuralNet.h:809; TMVA::DNN::Settings::fMonitoringstd::shared_ptr< Monitoring > fMonitoringDefinition NeuralNet.h:865; TMVA::DNN::Settings::dropRepetitionssize_t dropRepetitions() constDefinition NeuralNet.h:761; TMVA::DNN::Settings::createvoid create(std::string histoName, int bins, double min, double max)for monitoringDefinition NeuralNet.h:819; TMVA::DNN::Settings::fRepetitionsint fRepetitionsDefinition NeuralNet.h:854; TMVA::DNN::Settings::minErrorsize_t minError() constreturns the smallest error so farDefinition NeuralNet.h:829; TMVA::DNN::Settings::startTrainingvirtual void startTraining()Definition NeuralNet.h:795; TMVA::DNN::Settings::m_maxConvergenceCountsize_t m_maxConvergenceCountDefinition NeuralNet.h:858; TMVA::DNN::Settings::startTestCyclevirtual void startTestCycle()callback for monitoring and logggingDefinition NeuralNet.h:804; TMVA::DNN::SteepestSteepest Gradient Descent algorithm (SGD)Definition NeuralNet.h:334; TMVA::DNN::Steepest::m_repetitionssize_t m_repetitionsDefinition NeuralNet.h:337; TMVA::DNN::Steepest::m_betadouble m_betainternal parameter (momentum)Definition NeuralNet.h:372; TMVA::DNN::Steepest::m_localGradientsstd::vector< double > m_localGradientslocal gradients for reuse in thread.Definition NeuralNet.h:376; TMVA::DNN::Steepest::m_prevGradientsstd::vector< double > m_prevGradientsvector remembers the gradients of the previous stepDefinition NeuralNet.h:373; TMVA::DNN::Steepest::m_alphadouble m_alphainternal parameter (l",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:79434,Availability,error,errors,79434,"ouble m_betainternal parameter (momentum)Definition NeuralNet.h:372; TMVA::DNN::Steepest::m_localGradientsstd::vector< double > m_localGradientslocal gradients for reuse in thread.Definition NeuralNet.h:376; TMVA::DNN::Steepest::m_prevGradientsstd::vector< double > m_prevGradientsvector remembers the gradients of the previous stepDefinition NeuralNet.h:373; TMVA::DNN::Steepest::m_alphadouble m_alphainternal parameter (learningRate)Definition NeuralNet.h:371; TMVA::DNN::Steepest::m_localWeightsstd::vector< double > m_localWeightslocal weights for reuse in thread.Definition NeuralNet.h:375; TMVA::DNN::Steepest::operator()double operator()(Function &fitnessFunction, Weights &weights, PassThrough &passThrough)operator to call the steepest gradient descent algorithmDefinition NeuralNet.icc:271; TMVA::DNN::Steepest::SteepestSteepest(double learningRate=1e-4, double momentum=0.5, size_t repetitions=10)c'torDefinition NeuralNet.h:348; TMVA::IPythonInteractiveThis class is needed by JsMVA, and it's a helper class for tracking errors during the training in Jup...Definition MethodBase.h:94; TMVA::TimerTiming information for training and evaluation of MVA methods.Definition Timer.h:58; TMVA::Timer::DrawProgressBarvoid DrawProgressBar(Int_t, const TString &comment="""")draws progress bar in color or B&W caution:Definition Timer.cxx:202; TStringBasic string class.Definition TString.h:139; double; unsigned int; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; TMVA::DNN::sumOfSquaresdouble sumOfSquares(ItOutput itOutputBegin, ItOutput itOutputEnd, ItTruth itTruthBegin, ItTruth itTruthEnd, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc itInvActFnc, double patternWeight); TMVA::DNN::uniformDoubledouble uniformDouble(double minValue, double maxValue)Definition NeuralNet.cxx:43; TMVA::DNN::forwardvoid forward(const LAYERDATA &prevLayerData, LAYERDATA &currLayerData)apply the weights (and functions) in",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:81271,Availability,error,error,81271,"uthEnd, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc itInvActFnc, double patternWeight); TMVA::DNN::uniformDoubledouble uniformDouble(double minValue, double maxValue)Definition NeuralNet.cxx:43; TMVA::DNN::forwardvoid forward(const LAYERDATA &prevLayerData, LAYERDATA &currLayerData)apply the weights (and functions) in forward direction of the DNNDefinition NeuralNet.icc:546; TMVA::DNN::applyFunctionsvoid applyFunctions(ItValue itValue, ItValue itValueEnd, ItFunction itFunction); TMVA::DNN::operator|ModeOutputValues operator|(ModeOutputValues lhs, ModeOutputValues rhs)Definition NeuralNet.h:188; TMVA::DNN::ModeOutputModeOutputDefinition NeuralNet.h:1030; TMVA::DNN::ModeOutput::FETCH@ FETCH; TMVA::DNN::EnumRegularizationEnumRegularizationDefinition NeuralNet.h:173; TMVA::DNN::EnumRegularization::L1MAX@ L1MAX; TMVA::DNN::EnumRegularization::L2@ L2; TMVA::DNN::EnumRegularization::L1@ L1; TMVA::DNN::EnumRegularization::NONE@ NONE; TMVA::DNN::crossEntropydouble crossEntropy(ItProbability itProbabilityBegin, ItProbability itProbabilityEnd, ItTruth itTruthBegin, ItTruth itTruthEnd, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc itInvActFnc, double patternWeight)cross entropy error functionDefinition NeuralNet.icc:412; TMVA::DNN::backwardvoid backward(LAYERDATA &prevLayerData, LAYERDATA &currLayerData)backward application of the weights (back-propagation of the error)Definition NeuralNet.icc:572; TMVA::DNN::weightDecaydouble weightDecay(double error, ItWeight itWeight, ItWeight itWeightEnd, double factorWeightDecay, EnumRegularization eRegularization)compute the weight decay for regularization (L1 or L2)Definition NeuralNet.icc:498; TMVA::DNN::operator&=ModeOutputValues operator&=(ModeOutputValues &lhs, ModeOutputValues rhs)Definition NeuralNet.h:204; TMVA::DNN::EnumFunctionEnumFunctionDefinition NeuralNet.h:157; TMVA::DNN::EnumFunction::TANH@ TANH; TMVA::DNN::EnumFunction::SOFTSIGN@ SOFTSIGN; TMVA::DNN::EnumFunction::GAUSS@ GAUSS; TMVA::DNN::EnumFunction::TANHSHIFT@ ",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:81460,Availability,error,error,81460,"ns) in forward direction of the DNNDefinition NeuralNet.icc:546; TMVA::DNN::applyFunctionsvoid applyFunctions(ItValue itValue, ItValue itValueEnd, ItFunction itFunction); TMVA::DNN::operator|ModeOutputValues operator|(ModeOutputValues lhs, ModeOutputValues rhs)Definition NeuralNet.h:188; TMVA::DNN::ModeOutputModeOutputDefinition NeuralNet.h:1030; TMVA::DNN::ModeOutput::FETCH@ FETCH; TMVA::DNN::EnumRegularizationEnumRegularizationDefinition NeuralNet.h:173; TMVA::DNN::EnumRegularization::L1MAX@ L1MAX; TMVA::DNN::EnumRegularization::L2@ L2; TMVA::DNN::EnumRegularization::L1@ L1; TMVA::DNN::EnumRegularization::NONE@ NONE; TMVA::DNN::crossEntropydouble crossEntropy(ItProbability itProbabilityBegin, ItProbability itProbabilityEnd, ItTruth itTruthBegin, ItTruth itTruthEnd, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc itInvActFnc, double patternWeight)cross entropy error functionDefinition NeuralNet.icc:412; TMVA::DNN::backwardvoid backward(LAYERDATA &prevLayerData, LAYERDATA &currLayerData)backward application of the weights (back-propagation of the error)Definition NeuralNet.icc:572; TMVA::DNN::weightDecaydouble weightDecay(double error, ItWeight itWeight, ItWeight itWeightEnd, double factorWeightDecay, EnumRegularization eRegularization)compute the weight decay for regularization (L1 or L2)Definition NeuralNet.icc:498; TMVA::DNN::operator&=ModeOutputValues operator&=(ModeOutputValues &lhs, ModeOutputValues rhs)Definition NeuralNet.h:204; TMVA::DNN::EnumFunctionEnumFunctionDefinition NeuralNet.h:157; TMVA::DNN::EnumFunction::TANH@ TANH; TMVA::DNN::EnumFunction::SOFTSIGN@ SOFTSIGN; TMVA::DNN::EnumFunction::GAUSS@ GAUSS; TMVA::DNN::EnumFunction::TANHSHIFT@ TANHSHIFT; TMVA::DNN::EnumFunction::SYMMRELU@ SYMMRELU; TMVA::DNN::EnumFunction::ZERO@ ZERO; TMVA::DNN::EnumFunction::LINEAR@ LINEAR; TMVA::DNN::EnumFunction::SIGMOID@ SIGMOID; TMVA::DNN::EnumFunction::GAUSSCOMPLEMENT@ GAUSSCOMPLEMENT; TMVA::DNN::EnumFunction::RELU@ RELU; TMVA::DNN::regularizationauto regularization(c",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:81544,Availability,error,error,81544,"rator|(ModeOutputValues lhs, ModeOutputValues rhs)Definition NeuralNet.h:188; TMVA::DNN::ModeOutputModeOutputDefinition NeuralNet.h:1030; TMVA::DNN::ModeOutput::FETCH@ FETCH; TMVA::DNN::EnumRegularizationEnumRegularizationDefinition NeuralNet.h:173; TMVA::DNN::EnumRegularization::L1MAX@ L1MAX; TMVA::DNN::EnumRegularization::L2@ L2; TMVA::DNN::EnumRegularization::L1@ L1; TMVA::DNN::EnumRegularization::NONE@ NONE; TMVA::DNN::crossEntropydouble crossEntropy(ItProbability itProbabilityBegin, ItProbability itProbabilityEnd, ItTruth itTruthBegin, ItTruth itTruthEnd, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc itInvActFnc, double patternWeight)cross entropy error functionDefinition NeuralNet.icc:412; TMVA::DNN::backwardvoid backward(LAYERDATA &prevLayerData, LAYERDATA &currLayerData)backward application of the weights (back-propagation of the error)Definition NeuralNet.icc:572; TMVA::DNN::weightDecaydouble weightDecay(double error, ItWeight itWeight, ItWeight itWeightEnd, double factorWeightDecay, EnumRegularization eRegularization)compute the weight decay for regularization (L1 or L2)Definition NeuralNet.icc:498; TMVA::DNN::operator&=ModeOutputValues operator&=(ModeOutputValues &lhs, ModeOutputValues rhs)Definition NeuralNet.h:204; TMVA::DNN::EnumFunctionEnumFunctionDefinition NeuralNet.h:157; TMVA::DNN::EnumFunction::TANH@ TANH; TMVA::DNN::EnumFunction::SOFTSIGN@ SOFTSIGN; TMVA::DNN::EnumFunction::GAUSS@ GAUSS; TMVA::DNN::EnumFunction::TANHSHIFT@ TANHSHIFT; TMVA::DNN::EnumFunction::SYMMRELU@ SYMMRELU; TMVA::DNN::EnumFunction::ZERO@ ZERO; TMVA::DNN::EnumFunction::LINEAR@ LINEAR; TMVA::DNN::EnumFunction::SIGMOID@ SIGMOID; TMVA::DNN::EnumFunction::GAUSSCOMPLEMENT@ GAUSSCOMPLEMENT; TMVA::DNN::EnumFunction::RELU@ RELU; TMVA::DNN::regularizationauto regularization(const typename Architecture_t::Matrix_t &A, ERegularization R) -> decltype(Architecture_t::L1Regularization(A))Evaluate the regularization functional for a given weight matrix.Definition Functions.h:238; TMVA::DN",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:83174,Availability,error,error,83174,"mFunction::SOFTSIGN@ SOFTSIGN; TMVA::DNN::EnumFunction::GAUSS@ GAUSS; TMVA::DNN::EnumFunction::TANHSHIFT@ TANHSHIFT; TMVA::DNN::EnumFunction::SYMMRELU@ SYMMRELU; TMVA::DNN::EnumFunction::ZERO@ ZERO; TMVA::DNN::EnumFunction::LINEAR@ LINEAR; TMVA::DNN::EnumFunction::SIGMOID@ SIGMOID; TMVA::DNN::EnumFunction::GAUSSCOMPLEMENT@ GAUSSCOMPLEMENT; TMVA::DNN::EnumFunction::RELU@ RELU; TMVA::DNN::regularizationauto regularization(const typename Architecture_t::Matrix_t &A, ERegularization R) -> decltype(Architecture_t::L1Regularization(A))Evaluate the regularization functional for a given weight matrix.Definition Functions.h:238; TMVA::DNN::ModeErrorFunctionModeErrorFunctionerror functions to be chosen fromDefinition NeuralNet.h:1039; TMVA::DNN::ModeErrorFunction::CROSSENTROPY@ CROSSENTROPY; TMVA::DNN::ModeErrorFunction::SUMOFSQUARES@ SUMOFSQUARES; TMVA::DNN::ModeErrorFunction::CROSSENTROPY_MUTUALEXCLUSIVE@ CROSSENTROPY_MUTUALEXCLUSIVE; TMVA::DNN::softMaxCrossEntropydouble softMaxCrossEntropy(ItOutput itProbabilityBegin, ItOutput itProbabilityEnd, ItTruth itTruthBegin, ItTruth itTruthEnd, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc itInvActFnc, double patternWeight)soft-max-cross-entropy error function (for mutual exclusive cross-entropy)Definition NeuralNet.icc:458; TMVA::DNN::WeightInitializationStrategyWeightInitializationStrategyweight initialization strategies to be chosen fromDefinition NeuralNet.h:1050; TMVA::DNN::WeightInitializationStrategy::TEST@ TEST; TMVA::DNN::WeightInitializationStrategy::XAVIERUNIFORM@ XAVIERUNIFORM; TMVA::DNN::WeightInitializationStrategy::XAVIER@ XAVIER; TMVA::DNN::WeightInitializationStrategy::LAYERSIZE@ LAYERSIZE; TMVA::DNN::operator|=ModeOutputValues operator|=(ModeOutputValues &lhs, ModeOutputValues rhs)Definition NeuralNet.h:193; TMVA::DNN::MinimizerTypeMinimizerType< list all the minimizer typesDefinition NeuralNet.h:321; TMVA::DNN::fSteepest@ fSteepestSGD.Definition NeuralNet.h:322; TMVA::DNN::gaussDoubledouble gaussDouble(double m",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:7165,Deployability,update,update,7165,"; 258 ; 259 template <typename ItSource, typename ItWeight, typename ItTarget>; 260 void applyWeights (ItSource itSourceBegin, ItSource itSourceEnd, ItWeight itWeight, ItTarget itTargetBegin, ItTarget itTargetEnd);; 261 ; 262 ; 263 ; 264 template <typename ItSource, typename ItWeight, typename ItPrev>; 265 void applyWeightsBackwards (ItSource itCurrBegin, ItSource itCurrEnd, ItWeight itWeight, ItPrev itPrevBegin, ItPrev itPrevEnd);; 266 ; 267 ; 268 ; 269 ; 270 ; 271 template <typename ItValue, typename ItFunction>; 272 void applyFunctions (ItValue itValue, ItValue itValueEnd, ItFunction itFunction);; 273 ; 274 ; 275 template <typename ItValue, typename ItFunction, typename ItInverseFunction, typename ItGradient>; 276 void applyFunctions (ItValue itValue, ItValue itValueEnd, ItFunction itFunction, ItInverseFunction itInverseFunction, ItGradient itGradient);; 277 ; 278 ; 279 ; 280 template <typename ItSource, typename ItDelta, typename ItTargetGradient, typename ItGradient>; 281 void update (ItSource itSource, ItSource itSourceEnd,; 282 ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd,; 283 ItTargetGradient itTargetGradientBegin,; 284 ItGradient itGradient);; 285 ; 286 ; 287 ; 288 template <EnumRegularization Regularization, typename ItSource, typename ItDelta, typename ItTargetGradient, typename ItGradient, typename ItWeight>; 289 void update (ItSource itSource, ItSource itSourceEnd,; 290 ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd,; 291 ItTargetGradient itTargetGradientBegin,; 292 ItGradient itGradient,; 293 ItWeight itWeight, double weightDecay);; 294 ; 295 ; 296 ; 297 // ----- signature of a minimizer -------------; 298 // class Minimizer; 299 // {; 300 // public:; 301 ; 302 // template <typename Function, typename Variables, typename PassThrough>; 303 // double operator() (Function& fnc, Variables& vars, PassThrough& passThrough); 304 // {; 305 // // auto itVars = begin (vars);; 306 // // auto itVarsEnd = end (vars);; 307 ; 308 // std::vector<double> ",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:7529,Deployability,update,update,7529,"ce itCurrEnd, ItWeight itWeight, ItPrev itPrevBegin, ItPrev itPrevEnd);; 266 ; 267 ; 268 ; 269 ; 270 ; 271 template <typename ItValue, typename ItFunction>; 272 void applyFunctions (ItValue itValue, ItValue itValueEnd, ItFunction itFunction);; 273 ; 274 ; 275 template <typename ItValue, typename ItFunction, typename ItInverseFunction, typename ItGradient>; 276 void applyFunctions (ItValue itValue, ItValue itValueEnd, ItFunction itFunction, ItInverseFunction itInverseFunction, ItGradient itGradient);; 277 ; 278 ; 279 ; 280 template <typename ItSource, typename ItDelta, typename ItTargetGradient, typename ItGradient>; 281 void update (ItSource itSource, ItSource itSourceEnd,; 282 ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd,; 283 ItTargetGradient itTargetGradientBegin,; 284 ItGradient itGradient);; 285 ; 286 ; 287 ; 288 template <EnumRegularization Regularization, typename ItSource, typename ItDelta, typename ItTargetGradient, typename ItGradient, typename ItWeight>; 289 void update (ItSource itSource, ItSource itSourceEnd,; 290 ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd,; 291 ItTargetGradient itTargetGradientBegin,; 292 ItGradient itGradient,; 293 ItWeight itWeight, double weightDecay);; 294 ; 295 ; 296 ; 297 // ----- signature of a minimizer -------------; 298 // class Minimizer; 299 // {; 300 // public:; 301 ; 302 // template <typename Function, typename Variables, typename PassThrough>; 303 // double operator() (Function& fnc, Variables& vars, PassThrough& passThrough); 304 // {; 305 // // auto itVars = begin (vars);; 306 // // auto itVarsEnd = end (vars);; 307 ; 308 // std::vector<double> myweights;; 309 // std::vector<double> gradients;; 310 ; 311 // double value = fnc (passThrough, myweights);; 312 // value = fnc (passThrough, myweights, gradients);; 313 // return value;; 314 // }; 315 // };; 316 ; 317 ; 318 ; 319 ///< list all the minimizer types; 320 enum MinimizerType; 321 {; 322 fSteepest ///< SGD; 323 };; 324 ; 325 ; 326 ; 327 ; 328 ; 329 ",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:25702,Deployability,update,update,25702," for this layer; 692 ; 693 private:; 694 ; 695 ; 696 std::shared_ptr<std::function<double(double)>> m_activationFunction; ///< stores the activation function; 697 std::shared_ptr<std::function<double(double)>> m_inverseActivationFunction; ///< stores the inverse activation function; 698 ; 699 ; 700 size_t m_numNodes;; 701 ; 702 ModeOutputValues m_eModeOutputValues; ///< do the output values of this layer have to be transformed somehow (e.g. to probabilities) or returned as such; 703 EnumFunction m_activationFunctionType;; 704 ; 705 friend class Net;; 706 };; 707 ; 708 ; 709 ; 710 ; 711 ; 712 template <typename LAYERDATA>; 713 void forward (const LAYERDATA& prevLayerData, LAYERDATA& currLayerData);; 714 ; 715 ; 716 template <typename LAYERDATA>; 717 void backward (LAYERDATA& prevLayerData, LAYERDATA& currLayerData);; 718 ; 719 ; 720 template <typename LAYERDATA>; 721 void update (const LAYERDATA& prevLayerData, LAYERDATA& currLayerData, double weightDecay, EnumRegularization regularization);; 722 ; 723 ; 724 ; 725 /*! \brief Settings for the training of the neural net; 726 *; 727 *; 728 */; 729 class Settings; 730 {; 731 public:; 732 ; 733 /*! \brief c'tor; 734 *; 735 *; 736 */; 737 Settings (TString name,; 738 size_t _convergenceSteps = 15, size_t _batchSize = 10, size_t _testRepetitions = 7,; 739 double _factorWeightDecay = 1e-5, TMVA::DNN::EnumRegularization _regularization = TMVA::DNN::EnumRegularization::NONE,; 740 MinimizerType _eMinimizerType = MinimizerType::fSteepest,; 741 double _learningRate = 1e-5, double _momentum = 0.3,; 742 int _repetitions = 3,; 743 bool _multithreading = true);; 744 ; 745 /*! \brief d'tor; 746 *; 747 *; 748 */; 749 virtual ~Settings ();; 750 ; 751 ; 752 /*! \brief set the drop-out configuration (layer-wise); 753 *; 754 * \param begin begin of an array or vector denoting the drop-out probabilities for each layer; 755 * \param end end of an array or vector denoting the drop-out probabilities for each layer; 756 * \param _dropRepetition",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:26561,Deployability,configurat,configuration,26561," LAYERDATA& prevLayerData, LAYERDATA& currLayerData, double weightDecay, EnumRegularization regularization);; 722 ; 723 ; 724 ; 725 /*! \brief Settings for the training of the neural net; 726 *; 727 *; 728 */; 729 class Settings; 730 {; 731 public:; 732 ; 733 /*! \brief c'tor; 734 *; 735 *; 736 */; 737 Settings (TString name,; 738 size_t _convergenceSteps = 15, size_t _batchSize = 10, size_t _testRepetitions = 7,; 739 double _factorWeightDecay = 1e-5, TMVA::DNN::EnumRegularization _regularization = TMVA::DNN::EnumRegularization::NONE,; 740 MinimizerType _eMinimizerType = MinimizerType::fSteepest,; 741 double _learningRate = 1e-5, double _momentum = 0.3,; 742 int _repetitions = 3,; 743 bool _multithreading = true);; 744 ; 745 /*! \brief d'tor; 746 *; 747 *; 748 */; 749 virtual ~Settings ();; 750 ; 751 ; 752 /*! \brief set the drop-out configuration (layer-wise); 753 *; 754 * \param begin begin of an array or vector denoting the drop-out probabilities for each layer; 755 * \param end end of an array or vector denoting the drop-out probabilities for each layer; 756 * \param _dropRepetitions denotes after how many repetitions the drop-out setting (which nodes are dropped out exactly) is changed; 757 */; 758 template <typename Iterator>; 759 void setDropOut (Iterator begin, Iterator end, size_t _dropRepetitions) { m_dropOut.assign (begin, end); m_dropRepetitions = _dropRepetitions; }; 760 ; 761 size_t dropRepetitions () const { return m_dropRepetitions; }; 762 const std::vector<double>& dropFractions () const { return m_dropOut; }; 763 ; 764 void setMonitoring (std::shared_ptr<Monitoring> ptrMonitoring) { fMonitoring = ptrMonitoring; } ///< prepared for monitoring; 765 ; 766 size_t convergenceSteps () const { return m_convergenceSteps; } ///< how many steps until training is deemed to have converged; 767 size_t batchSize () const { return m_batchSize; } ///< mini-batch size; 768 size_t testRepetitions () const { return m_testRepetitions; } ///< how often is the test data",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:39696,Deployability,configurat,configuration,39696,"081 /*! \brief d'tor; 1082 *; 1083 *; 1084 */; 1085 Net (const Net& other); 1086 : m_eErrorFunction (other.m_eErrorFunction); 1087 , m_sizeInput (other.m_sizeInput); 1088 , m_layers (other.m_layers); 1089 {; 1090 }; 1091 ; 1092 void setInputSize (size_t sizeInput) { m_sizeInput = sizeInput; } ///< set the input size of the DNN; 1093 void setOutputSize (size_t sizeOutput) { m_sizeOutput = sizeOutput; } ///< set the output size of the DNN; 1094 void addLayer (Layer& layer) { m_layers.push_back (layer); } ///< add a layer (layout); 1095 void addLayer (Layer&& layer) { m_layers.push_back (layer); }; 1096 void setErrorFunction (ModeErrorFunction eErrorFunction) { m_eErrorFunction = eErrorFunction; } ///< which error function is to be used; 1097 ; 1098 size_t inputSize () const { return m_sizeInput; } ///< input size of the DNN; 1099 size_t outputSize () const { return m_sizeOutput; } ///< output size of the DNN; 1100 ; 1101 /*! \brief set the drop out configuration; 1102 *; 1103 *; 1104 */; 1105 template <typename WeightsType, typename DropProbabilities>; 1106 void dropOutWeightFactor (WeightsType& weights,; 1107 const DropProbabilities& drops,; 1108 bool inverse = false);; 1109 ; 1110 /*! \brief start the training; 1111 *; 1112 * \param weights weight vector; 1113 * \param trainPattern training pattern; 1114 * \param testPattern test pattern; 1115 * \param minimizer use this minimizer for training (e.g. SGD); 1116 * \param settings settings used for this training run; 1117 */; 1118 template <typename Minimizer>; 1119 double train (std::vector<double>& weights,; 1120 std::vector<Pattern>& trainPattern,; 1121 const std::vector<Pattern>& testPattern,; 1122 Minimizer& minimizer,; 1123 Settings& settings);; 1124 ; 1125 /*! \brief pre-training for future use; 1126 *; 1127 *; 1128 */; 1129 template <typename Minimizer>; 1130 void preTrain (std::vector<double>& weights,; 1131 std::vector<Pattern>& trainPattern,; 1132 const std::vector<Pattern>& testPattern,; 1133 Minimizer& mini",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:41140,Deployability,configurat,configuration,41140,,MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:69715,Deployability,configurat,configurationDefinition,69715,"N computation functionDefinition NeuralNet.icc:1405; TMVA::DNN::Net::removeLayervoid removeLayer()remove one layerDefinition NeuralNet.h:1248; TMVA::DNN::Net::m_sizeOutputsize_t m_sizeOutputoutput size of this DNNDefinition NeuralNet.h:1271; TMVA::DNN::Net::m_sizeInputsize_t m_sizeInputinput size of this DNNDefinition NeuralNet.h:1270; TMVA::DNN::Net::trainCycledouble trainCycle(Minimizer &minimizer, std::vector< double > &weights, Iterator itPatternBegin, Iterator itPatternEnd, Settings &settings, DropContainer &dropContainer)executes one training cycleDefinition NeuralNet.icc:939; TMVA::DNN::Net::fIPyCurrentIterUInt_t * fIPyCurrentIterDefinition NeuralNet.h:1278; TMVA::DNN::Net::operator()double operator()(PassThrough &settingsAndBatch, const Weights &weights) constexecute computation of the DNN for one mini-batch (used by the minimizer); no computation of gradient...Definition NeuralNet.icc:1070; TMVA::DNN::Net::dropOutWeightFactorvoid dropOutWeightFactor(WeightsType &weights, const DropProbabilities &drops, bool inverse=false)set the drop out configurationDefinition NeuralNet.icc:652; TMVA::DNN::Net::fillDropContainervoid fillDropContainer(DropContainer &dropContainer, double dropFraction, size_t numNodes) constprepare the drop-out-container (select the nodes which are to be dropped out)Definition NeuralNet.cxx:572; TMVA::DNN::Net::addLayervoid addLayer(Layer &layer)add a layer (layout)Definition NeuralNet.h:1094; TMVA::DNN::Net::numWeightssize_t numWeights(size_t trainingStartLayer=0) constreturns the number of weights in this netDefinition NeuralNet.cxx:540; TMVA::DNN::Net::fInteractiveIPythonInteractive * fInteractiveDefinition NeuralNet.h:1276; TMVA::DNN::Net::Edouble E(); TMVA::DNN::Net::computeErrorstd::tuple< double, double > computeError(const Settings &settings, std::vector< LayerData > &lastLayerData, Batch &batch, ItWeight itWeightBegin, ItWeight itWeightEnd) constDefinition NeuralNet.icc:1321; TMVA::DNN::Net::setOutputSizevoid setOutputSize(size_t si",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:71392,Deployability,configurat,configuration,71392,"ble E(); TMVA::DNN::Net::computeErrorstd::tuple< double, double > computeError(const Settings &settings, std::vector< LayerData > &lastLayerData, Batch &batch, ItWeight itWeightBegin, ItWeight itWeightEnd) constDefinition NeuralNet.icc:1321; TMVA::DNN::Net::setOutputSizevoid setOutputSize(size_t sizeOutput)set the output size of the DNNDefinition NeuralNet.h:1093; TMVA::DNN::Net::forwardPatternvoid forwardPattern(const LayerContainer &_layers, std::vector< LayerData > &layerData) constDefinition NeuralNet.icc:1221; TMVA::DNN::Net::backPropagatevoid backPropagate(std::vector< std::vector< LayerData > > &layerPatternData, const Settings &settings, size_t trainFromLayer, size_t totalNumWeights) constDefinition NeuralNet.icc:1355; TMVA::DNN::SettingsSettings for the training of the neural net.Definition NeuralNet.h:730; TMVA::DNN::Settings::m_batchSizesize_t m_batchSizemini-batch sizeDefinition NeuralNet.h:838; TMVA::DNN::Settings::setDropOutvoid setDropOut(Iterator begin, Iterator end, size_t _dropRepetitions)set the drop-out configuration (layer-wise)Definition NeuralNet.h:759; TMVA::DNN::Settings::createvoid create(std::string histoName, int bins, double min, double max, int bins2, double min2, double max2)for monitoringDefinition NeuralNet.h:820; TMVA::DNN::Settings::useMultithreadingbool useMultithreading() constis multithreading turned on?Definition NeuralNet.h:815; TMVA::DNN::Settings::regularizationEnumRegularization regularization() constsome regularization of the DNN is turned on?Definition NeuralNet.h:813; TMVA::DNN::Settings::convergenceCountsize_t convergenceCount() constreturns the current convergence countDefinition NeuralNet.h:827; TMVA::DNN::Settings::momentumdouble momentum() constget the momentum (e.g. for SGD)Definition NeuralNet.h:772; TMVA::DNN::Settings::count_Esize_t count_EDefinition NeuralNet.h:842; TMVA::DNN::Settings::m_timerTimer m_timertimer for monitoringDefinition NeuralNet.h:832; TMVA::DNN::Settings::testRepetitionssize_t testRepetitions",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:84814,Deployability,update,updatevoid,84814,"VIERUNIFORM; TMVA::DNN::WeightInitializationStrategy::XAVIER@ XAVIER; TMVA::DNN::WeightInitializationStrategy::LAYERSIZE@ LAYERSIZE; TMVA::DNN::operator|=ModeOutputValues operator|=(ModeOutputValues &lhs, ModeOutputValues rhs)Definition NeuralNet.h:193; TMVA::DNN::MinimizerTypeMinimizerType< list all the minimizer typesDefinition NeuralNet.h:321; TMVA::DNN::fSteepest@ fSteepestSGD.Definition NeuralNet.h:322; TMVA::DNN::gaussDoubledouble gaussDouble(double mean, double sigma)Definition NeuralNet.cxx:35; TMVA::DNN::operator&ModeOutputValues operator&(ModeOutputValues lhs, ModeOutputValues rhs)Definition NeuralNet.h:199; TMVA::DNN::ModeOutputValuesModeOutputValuesDefinition NeuralNet.h:179; TMVA::DNN::ModeOutputValues::SOFTMAX@ SOFTMAX; TMVA::DNN::ModeOutputValues::BATCHNORMALIZATION@ BATCHNORMALIZATION; TMVA::DNN::ModeOutputValues::DIRECT@ DIRECT; TMVA::DNN::applyWeightsvoid applyWeights(ItSource itSourceBegin, ItSource itSourceEnd, ItWeight itWeight, ItTarget itTargetBegin, ItTarget itTargetEnd); TMVA::DNN::pass_through_typestd::tuple< Settings &, Batch &, DropContainer & > pass_through_typeDefinition NeuralNet.h:1294; TMVA::DNN::isFlagSetbool isFlagSet(T flag, T value)Definition NeuralNet.h:212; TMVA::DNN::randomIntint randomInt(int maxValue)Definition NeuralNet.cxx:52; TMVA::DNN::updatevoid update(ItSource itSource, ItSource itSourceEnd, ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd, ItTargetGradient itTargetGradientBegin, ItGradient itGradient)update the gradientsDefinition NeuralNet.icc:183; TMVA::DNN::DropContainerstd::vector< char > DropContainerDefinition NeuralNet.h:227; TMVA::DNN::applyWeightsBackwardsvoid applyWeightsBackwards(ItSource itCurrBegin, ItSource itCurrEnd, ItWeight itWeight, ItPrev itPrevBegin, ItPrev itPrevEnd); TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22; outputstatic void output(). tmvatmvaincTMVANeuralNet.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:58 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:84825,Deployability,update,update,84825,"VIERUNIFORM; TMVA::DNN::WeightInitializationStrategy::XAVIER@ XAVIER; TMVA::DNN::WeightInitializationStrategy::LAYERSIZE@ LAYERSIZE; TMVA::DNN::operator|=ModeOutputValues operator|=(ModeOutputValues &lhs, ModeOutputValues rhs)Definition NeuralNet.h:193; TMVA::DNN::MinimizerTypeMinimizerType< list all the minimizer typesDefinition NeuralNet.h:321; TMVA::DNN::fSteepest@ fSteepestSGD.Definition NeuralNet.h:322; TMVA::DNN::gaussDoubledouble gaussDouble(double mean, double sigma)Definition NeuralNet.cxx:35; TMVA::DNN::operator&ModeOutputValues operator&(ModeOutputValues lhs, ModeOutputValues rhs)Definition NeuralNet.h:199; TMVA::DNN::ModeOutputValuesModeOutputValuesDefinition NeuralNet.h:179; TMVA::DNN::ModeOutputValues::SOFTMAX@ SOFTMAX; TMVA::DNN::ModeOutputValues::BATCHNORMALIZATION@ BATCHNORMALIZATION; TMVA::DNN::ModeOutputValues::DIRECT@ DIRECT; TMVA::DNN::applyWeightsvoid applyWeights(ItSource itSourceBegin, ItSource itSourceEnd, ItWeight itWeight, ItTarget itTargetBegin, ItTarget itTargetEnd); TMVA::DNN::pass_through_typestd::tuple< Settings &, Batch &, DropContainer & > pass_through_typeDefinition NeuralNet.h:1294; TMVA::DNN::isFlagSetbool isFlagSet(T flag, T value)Definition NeuralNet.h:212; TMVA::DNN::randomIntint randomInt(int maxValue)Definition NeuralNet.cxx:52; TMVA::DNN::updatevoid update(ItSource itSource, ItSource itSourceEnd, ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd, ItTargetGradient itTargetGradientBegin, ItGradient itGradient)update the gradientsDefinition NeuralNet.icc:183; TMVA::DNN::DropContainerstd::vector< char > DropContainerDefinition NeuralNet.h:227; TMVA::DNN::applyWeightsBackwardsvoid applyWeightsBackwards(ItSource itCurrBegin, ItSource itCurrEnd, ItWeight itWeight, ItPrev itPrevBegin, ItPrev itPrevEnd); TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22; outputstatic void output(). tmvatmvaincTMVANeuralNet.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:58 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:84989,Deployability,update,update,84989,"VIERUNIFORM; TMVA::DNN::WeightInitializationStrategy::XAVIER@ XAVIER; TMVA::DNN::WeightInitializationStrategy::LAYERSIZE@ LAYERSIZE; TMVA::DNN::operator|=ModeOutputValues operator|=(ModeOutputValues &lhs, ModeOutputValues rhs)Definition NeuralNet.h:193; TMVA::DNN::MinimizerTypeMinimizerType< list all the minimizer typesDefinition NeuralNet.h:321; TMVA::DNN::fSteepest@ fSteepestSGD.Definition NeuralNet.h:322; TMVA::DNN::gaussDoubledouble gaussDouble(double mean, double sigma)Definition NeuralNet.cxx:35; TMVA::DNN::operator&ModeOutputValues operator&(ModeOutputValues lhs, ModeOutputValues rhs)Definition NeuralNet.h:199; TMVA::DNN::ModeOutputValuesModeOutputValuesDefinition NeuralNet.h:179; TMVA::DNN::ModeOutputValues::SOFTMAX@ SOFTMAX; TMVA::DNN::ModeOutputValues::BATCHNORMALIZATION@ BATCHNORMALIZATION; TMVA::DNN::ModeOutputValues::DIRECT@ DIRECT; TMVA::DNN::applyWeightsvoid applyWeights(ItSource itSourceBegin, ItSource itSourceEnd, ItWeight itWeight, ItTarget itTargetBegin, ItTarget itTargetEnd); TMVA::DNN::pass_through_typestd::tuple< Settings &, Batch &, DropContainer & > pass_through_typeDefinition NeuralNet.h:1294; TMVA::DNN::isFlagSetbool isFlagSet(T flag, T value)Definition NeuralNet.h:212; TMVA::DNN::randomIntint randomInt(int maxValue)Definition NeuralNet.cxx:52; TMVA::DNN::updatevoid update(ItSource itSource, ItSource itSourceEnd, ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd, ItTargetGradient itTargetGradientBegin, ItGradient itGradient)update the gradientsDefinition NeuralNet.icc:183; TMVA::DNN::DropContainerstd::vector< char > DropContainerDefinition NeuralNet.h:227; TMVA::DNN::applyWeightsBackwardsvoid applyWeightsBackwards(ItSource itCurrBegin, ItSource itCurrEnd, ItWeight itWeight, ItPrev itPrevBegin, ItPrev itPrevEnd); TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22; outputstatic void output(). tmvatmvaincTMVANeuralNet.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:58 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:27392,Energy Efficiency,monitor,monitoring,27392," ; 752 /*! \brief set the drop-out configuration (layer-wise); 753 *; 754 * \param begin begin of an array or vector denoting the drop-out probabilities for each layer; 755 * \param end end of an array or vector denoting the drop-out probabilities for each layer; 756 * \param _dropRepetitions denotes after how many repetitions the drop-out setting (which nodes are dropped out exactly) is changed; 757 */; 758 template <typename Iterator>; 759 void setDropOut (Iterator begin, Iterator end, size_t _dropRepetitions) { m_dropOut.assign (begin, end); m_dropRepetitions = _dropRepetitions; }; 760 ; 761 size_t dropRepetitions () const { return m_dropRepetitions; }; 762 const std::vector<double>& dropFractions () const { return m_dropOut; }; 763 ; 764 void setMonitoring (std::shared_ptr<Monitoring> ptrMonitoring) { fMonitoring = ptrMonitoring; } ///< prepared for monitoring; 765 ; 766 size_t convergenceSteps () const { return m_convergenceSteps; } ///< how many steps until training is deemed to have converged; 767 size_t batchSize () const { return m_batchSize; } ///< mini-batch size; 768 size_t testRepetitions () const { return m_testRepetitions; } ///< how often is the test data tested; 769 double factorWeightDecay () const { return m_factorWeightDecay; } ///< get the weight-decay factor; 770 ; 771 double learningRate () const { return fLearningRate; } ///< get the learning rate; 772 double momentum () const { return fMomentum; } ///< get the momentum (e.g. for SGD); 773 int repetitions () const { return fRepetitions; } ///< how many steps have to be gone until the batch is changed; 774 MinimizerType minimizerType () const { return fMinimizerType; } ///< which minimizer shall be used (e.g. SGD); 775 ; 776 ; 777 ; 778 ; 779 ; 780 ; 781 virtual void testSample (double /*error*/, double /*output*/, double /*target*/, double /*weight*/) {} ///< virtual function to be used for monitoring (callback); 782 virtual void startTrainCycle () ///< callback for monitoring and logging; 783",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:28423,Energy Efficiency,monitor,monitoring,28423," often is the test data tested; 769 double factorWeightDecay () const { return m_factorWeightDecay; } ///< get the weight-decay factor; 770 ; 771 double learningRate () const { return fLearningRate; } ///< get the learning rate; 772 double momentum () const { return fMomentum; } ///< get the momentum (e.g. for SGD); 773 int repetitions () const { return fRepetitions; } ///< how many steps have to be gone until the batch is changed; 774 MinimizerType minimizerType () const { return fMinimizerType; } ///< which minimizer shall be used (e.g. SGD); 775 ; 776 ; 777 ; 778 ; 779 ; 780 ; 781 virtual void testSample (double /*error*/, double /*output*/, double /*target*/, double /*weight*/) {} ///< virtual function to be used for monitoring (callback); 782 virtual void startTrainCycle () ///< callback for monitoring and logging; 783 {; 784 m_convergenceCount = 0;; 785 m_maxConvergenceCount= 0;; 786 m_minError = 1e10;; 787 }; 788 virtual void endTrainCycle (double /*error*/) {} ///< callback for monitoring and logging; 789 ; 790 virtual void setProgressLimits (double minProgress = 0, double maxProgress = 100) ///< for monitoring and logging (set the current ""progress"" limits for the display of the progress) \param minProgress minimum value \param maxProgress maximum value; 791 {; 792 m_minProgress = minProgress;; 793 m_maxProgress = maxProgress;; 794 }; 795 virtual void startTraining () ///< start drawing the progress bar; 796 {; 797 m_timer.DrawProgressBar (Int_t(m_minProgress));; 798 }; 799 virtual void cycle (double progress, TString text) ///< advance on the progress bar \param progress the new value \param text a label; 800 {; 801 m_timer.DrawProgressBar (Int_t(m_minProgress+(m_maxProgress-m_minProgress)*(progress/100.0)), text);; 802 }; 803 ; 804 virtual void startTestCycle () {} ///< callback for monitoring and loggging; 805 virtual void endTestCycle () {} ///< callback for monitoring and loggging; 806 virtual void testIteration () {} ///< callback for monitoring and l",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:28500,Energy Efficiency,monitor,monitoring,28500," often is the test data tested; 769 double factorWeightDecay () const { return m_factorWeightDecay; } ///< get the weight-decay factor; 770 ; 771 double learningRate () const { return fLearningRate; } ///< get the learning rate; 772 double momentum () const { return fMomentum; } ///< get the momentum (e.g. for SGD); 773 int repetitions () const { return fRepetitions; } ///< how many steps have to be gone until the batch is changed; 774 MinimizerType minimizerType () const { return fMinimizerType; } ///< which minimizer shall be used (e.g. SGD); 775 ; 776 ; 777 ; 778 ; 779 ; 780 ; 781 virtual void testSample (double /*error*/, double /*output*/, double /*target*/, double /*weight*/) {} ///< virtual function to be used for monitoring (callback); 782 virtual void startTrainCycle () ///< callback for monitoring and logging; 783 {; 784 m_convergenceCount = 0;; 785 m_maxConvergenceCount= 0;; 786 m_minError = 1e10;; 787 }; 788 virtual void endTrainCycle (double /*error*/) {} ///< callback for monitoring and logging; 789 ; 790 virtual void setProgressLimits (double minProgress = 0, double maxProgress = 100) ///< for monitoring and logging (set the current ""progress"" limits for the display of the progress) \param minProgress minimum value \param maxProgress maximum value; 791 {; 792 m_minProgress = minProgress;; 793 m_maxProgress = maxProgress;; 794 }; 795 virtual void startTraining () ///< start drawing the progress bar; 796 {; 797 m_timer.DrawProgressBar (Int_t(m_minProgress));; 798 }; 799 virtual void cycle (double progress, TString text) ///< advance on the progress bar \param progress the new value \param text a label; 800 {; 801 m_timer.DrawProgressBar (Int_t(m_minProgress+(m_maxProgress-m_minProgress)*(progress/100.0)), text);; 802 }; 803 ; 804 virtual void startTestCycle () {} ///< callback for monitoring and loggging; 805 virtual void endTestCycle () {} ///< callback for monitoring and loggging; 806 virtual void testIteration () {} ///< callback for monitoring and l",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:28693,Energy Efficiency,monitor,monitoring,28693," often is the test data tested; 769 double factorWeightDecay () const { return m_factorWeightDecay; } ///< get the weight-decay factor; 770 ; 771 double learningRate () const { return fLearningRate; } ///< get the learning rate; 772 double momentum () const { return fMomentum; } ///< get the momentum (e.g. for SGD); 773 int repetitions () const { return fRepetitions; } ///< how many steps have to be gone until the batch is changed; 774 MinimizerType minimizerType () const { return fMinimizerType; } ///< which minimizer shall be used (e.g. SGD); 775 ; 776 ; 777 ; 778 ; 779 ; 780 ; 781 virtual void testSample (double /*error*/, double /*output*/, double /*target*/, double /*weight*/) {} ///< virtual function to be used for monitoring (callback); 782 virtual void startTrainCycle () ///< callback for monitoring and logging; 783 {; 784 m_convergenceCount = 0;; 785 m_maxConvergenceCount= 0;; 786 m_minError = 1e10;; 787 }; 788 virtual void endTrainCycle (double /*error*/) {} ///< callback for monitoring and logging; 789 ; 790 virtual void setProgressLimits (double minProgress = 0, double maxProgress = 100) ///< for monitoring and logging (set the current ""progress"" limits for the display of the progress) \param minProgress minimum value \param maxProgress maximum value; 791 {; 792 m_minProgress = minProgress;; 793 m_maxProgress = maxProgress;; 794 }; 795 virtual void startTraining () ///< start drawing the progress bar; 796 {; 797 m_timer.DrawProgressBar (Int_t(m_minProgress));; 798 }; 799 virtual void cycle (double progress, TString text) ///< advance on the progress bar \param progress the new value \param text a label; 800 {; 801 m_timer.DrawProgressBar (Int_t(m_minProgress+(m_maxProgress-m_minProgress)*(progress/100.0)), text);; 802 }; 803 ; 804 virtual void startTestCycle () {} ///< callback for monitoring and loggging; 805 virtual void endTestCycle () {} ///< callback for monitoring and loggging; 806 virtual void testIteration () {} ///< callback for monitoring and l",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:28818,Energy Efficiency,monitor,monitoring,28818," often is the test data tested; 769 double factorWeightDecay () const { return m_factorWeightDecay; } ///< get the weight-decay factor; 770 ; 771 double learningRate () const { return fLearningRate; } ///< get the learning rate; 772 double momentum () const { return fMomentum; } ///< get the momentum (e.g. for SGD); 773 int repetitions () const { return fRepetitions; } ///< how many steps have to be gone until the batch is changed; 774 MinimizerType minimizerType () const { return fMinimizerType; } ///< which minimizer shall be used (e.g. SGD); 775 ; 776 ; 777 ; 778 ; 779 ; 780 ; 781 virtual void testSample (double /*error*/, double /*output*/, double /*target*/, double /*weight*/) {} ///< virtual function to be used for monitoring (callback); 782 virtual void startTrainCycle () ///< callback for monitoring and logging; 783 {; 784 m_convergenceCount = 0;; 785 m_maxConvergenceCount= 0;; 786 m_minError = 1e10;; 787 }; 788 virtual void endTrainCycle (double /*error*/) {} ///< callback for monitoring and logging; 789 ; 790 virtual void setProgressLimits (double minProgress = 0, double maxProgress = 100) ///< for monitoring and logging (set the current ""progress"" limits for the display of the progress) \param minProgress minimum value \param maxProgress maximum value; 791 {; 792 m_minProgress = minProgress;; 793 m_maxProgress = maxProgress;; 794 }; 795 virtual void startTraining () ///< start drawing the progress bar; 796 {; 797 m_timer.DrawProgressBar (Int_t(m_minProgress));; 798 }; 799 virtual void cycle (double progress, TString text) ///< advance on the progress bar \param progress the new value \param text a label; 800 {; 801 m_timer.DrawProgressBar (Int_t(m_minProgress+(m_maxProgress-m_minProgress)*(progress/100.0)), text);; 802 }; 803 ; 804 virtual void startTestCycle () {} ///< callback for monitoring and loggging; 805 virtual void endTestCycle () {} ///< callback for monitoring and loggging; 806 virtual void testIteration () {} ///< callback for monitoring and l",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:29517,Energy Efficiency,monitor,monitoring,29517,,MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:29596,Energy Efficiency,monitor,monitoring,29596,,MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:29676,Energy Efficiency,monitor,monitoring,29676,,MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:29899,Energy Efficiency,monitor,monitoring,29899,,MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:30040,Energy Efficiency,monitor,monitoring,30040,,MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:30516,Energy Efficiency,monitor,monitoring,30516,"toring and loggging; 805 virtual void endTestCycle () {} ///< callback for monitoring and loggging; 806 virtual void testIteration () {} ///< callback for monitoring and loggging; 807 virtual void drawSample (const std::vector<double>& /*input*/, const std::vector<double>& /* output */, const std::vector<double>& /* target */, double /* patternWeight */) {} ///< callback for monitoring and logging; 808 ; 809 virtual void computeResult (const Net& /* net */, std::vector<double>& /* weights */) {} ///< callback for monitoring and logging; 810 ; 811 virtual bool hasConverged (double testError); ///< has this training converged already?; 812 ; 813 EnumRegularization regularization () const { return m_regularization; } ///< some regularization of the DNN is turned on?; 814 ; 815 bool useMultithreading () const { return m_useMultithreading; } ///< is multithreading turned on?; 816 ; 817 ; 818 void pads (int numPads) { if (fMonitoring) fMonitoring->pads (numPads); } ///< preparation for monitoring; 819 void create (std::string histoName, int bins, double min, double max) { if (fMonitoring) fMonitoring->create (histoName, bins, min, max); } ///< for monitoring; 820 void create (std::string histoName, int bins, double min, double max, int bins2, double min2, double max2) { if (fMonitoring) fMonitoring->create (histoName, bins, min, max, bins2, min2, max2); } ///< for monitoring; 821 void addPoint (std::string histoName, double x) { if (fMonitoring) fMonitoring->addPoint (histoName, x); } ///< for monitoring; 822 void addPoint (std::string histoName, double x, double y) {if (fMonitoring) fMonitoring->addPoint (histoName, x, y); } ///< for monitoring; 823 void plot (std::string histoName, std::string options, int pad, EColor color) { if (fMonitoring) fMonitoring->plot (histoName, options, pad, color); } ///< for monitoring; 824 void clear (std::string histoName) { if (fMonitoring) fMonitoring->clear (histoName); } ///< for monitoring; 825 bool exists (std::string histoName) { i",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:30681,Energy Efficiency,monitor,monitoring,30681," and loggging; 807 virtual void drawSample (const std::vector<double>& /*input*/, const std::vector<double>& /* output */, const std::vector<double>& /* target */, double /* patternWeight */) {} ///< callback for monitoring and logging; 808 ; 809 virtual void computeResult (const Net& /* net */, std::vector<double>& /* weights */) {} ///< callback for monitoring and logging; 810 ; 811 virtual bool hasConverged (double testError); ///< has this training converged already?; 812 ; 813 EnumRegularization regularization () const { return m_regularization; } ///< some regularization of the DNN is turned on?; 814 ; 815 bool useMultithreading () const { return m_useMultithreading; } ///< is multithreading turned on?; 816 ; 817 ; 818 void pads (int numPads) { if (fMonitoring) fMonitoring->pads (numPads); } ///< preparation for monitoring; 819 void create (std::string histoName, int bins, double min, double max) { if (fMonitoring) fMonitoring->create (histoName, bins, min, max); } ///< for monitoring; 820 void create (std::string histoName, int bins, double min, double max, int bins2, double min2, double max2) { if (fMonitoring) fMonitoring->create (histoName, bins, min, max, bins2, min2, max2); } ///< for monitoring; 821 void addPoint (std::string histoName, double x) { if (fMonitoring) fMonitoring->addPoint (histoName, x); } ///< for monitoring; 822 void addPoint (std::string histoName, double x, double y) {if (fMonitoring) fMonitoring->addPoint (histoName, x, y); } ///< for monitoring; 823 void plot (std::string histoName, std::string options, int pad, EColor color) { if (fMonitoring) fMonitoring->plot (histoName, options, pad, color); } ///< for monitoring; 824 void clear (std::string histoName) { if (fMonitoring) fMonitoring->clear (histoName); } ///< for monitoring; 825 bool exists (std::string histoName) { if (fMonitoring) return fMonitoring->exists (histoName); return false; } ///< for monitoring; 826 ; 827 size_t convergenceCount () const { return m_convergenceCount; ",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:30902,Energy Efficiency,monitor,monitoring,30902,"ng and logging; 808 ; 809 virtual void computeResult (const Net& /* net */, std::vector<double>& /* weights */) {} ///< callback for monitoring and logging; 810 ; 811 virtual bool hasConverged (double testError); ///< has this training converged already?; 812 ; 813 EnumRegularization regularization () const { return m_regularization; } ///< some regularization of the DNN is turned on?; 814 ; 815 bool useMultithreading () const { return m_useMultithreading; } ///< is multithreading turned on?; 816 ; 817 ; 818 void pads (int numPads) { if (fMonitoring) fMonitoring->pads (numPads); } ///< preparation for monitoring; 819 void create (std::string histoName, int bins, double min, double max) { if (fMonitoring) fMonitoring->create (histoName, bins, min, max); } ///< for monitoring; 820 void create (std::string histoName, int bins, double min, double max, int bins2, double min2, double max2) { if (fMonitoring) fMonitoring->create (histoName, bins, min, max, bins2, min2, max2); } ///< for monitoring; 821 void addPoint (std::string histoName, double x) { if (fMonitoring) fMonitoring->addPoint (histoName, x); } ///< for monitoring; 822 void addPoint (std::string histoName, double x, double y) {if (fMonitoring) fMonitoring->addPoint (histoName, x, y); } ///< for monitoring; 823 void plot (std::string histoName, std::string options, int pad, EColor color) { if (fMonitoring) fMonitoring->plot (histoName, options, pad, color); } ///< for monitoring; 824 void clear (std::string histoName) { if (fMonitoring) fMonitoring->clear (histoName); } ///< for monitoring; 825 bool exists (std::string histoName) { if (fMonitoring) return fMonitoring->exists (histoName); return false; } ///< for monitoring; 826 ; 827 size_t convergenceCount () const { return m_convergenceCount; } ///< returns the current convergence count; 828 size_t maxConvergenceCount () const { return m_maxConvergenceCount; } ///< returns the max convergence count so far; 829 size_t minError () const { return m_minError; } //",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:31034,Energy Efficiency,monitor,monitoring,31034," monitoring and logging; 810 ; 811 virtual bool hasConverged (double testError); ///< has this training converged already?; 812 ; 813 EnumRegularization regularization () const { return m_regularization; } ///< some regularization of the DNN is turned on?; 814 ; 815 bool useMultithreading () const { return m_useMultithreading; } ///< is multithreading turned on?; 816 ; 817 ; 818 void pads (int numPads) { if (fMonitoring) fMonitoring->pads (numPads); } ///< preparation for monitoring; 819 void create (std::string histoName, int bins, double min, double max) { if (fMonitoring) fMonitoring->create (histoName, bins, min, max); } ///< for monitoring; 820 void create (std::string histoName, int bins, double min, double max, int bins2, double min2, double max2) { if (fMonitoring) fMonitoring->create (histoName, bins, min, max, bins2, min2, max2); } ///< for monitoring; 821 void addPoint (std::string histoName, double x) { if (fMonitoring) fMonitoring->addPoint (histoName, x); } ///< for monitoring; 822 void addPoint (std::string histoName, double x, double y) {if (fMonitoring) fMonitoring->addPoint (histoName, x, y); } ///< for monitoring; 823 void plot (std::string histoName, std::string options, int pad, EColor color) { if (fMonitoring) fMonitoring->plot (histoName, options, pad, color); } ///< for monitoring; 824 void clear (std::string histoName) { if (fMonitoring) fMonitoring->clear (histoName); } ///< for monitoring; 825 bool exists (std::string histoName) { if (fMonitoring) return fMonitoring->exists (histoName); return false; } ///< for monitoring; 826 ; 827 size_t convergenceCount () const { return m_convergenceCount; } ///< returns the current convergence count; 828 size_t maxConvergenceCount () const { return m_maxConvergenceCount; } ///< returns the max convergence count so far; 829 size_t minError () const { return m_minError; } ///< returns the smallest error so far; 830 ; 831 public:; 832 Timer m_timer; ///< timer for monitoring; 833 double m_minProgress; ///",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:31178,Energy Efficiency,monitor,monitoring,31178,"rization regularization () const { return m_regularization; } ///< some regularization of the DNN is turned on?; 814 ; 815 bool useMultithreading () const { return m_useMultithreading; } ///< is multithreading turned on?; 816 ; 817 ; 818 void pads (int numPads) { if (fMonitoring) fMonitoring->pads (numPads); } ///< preparation for monitoring; 819 void create (std::string histoName, int bins, double min, double max) { if (fMonitoring) fMonitoring->create (histoName, bins, min, max); } ///< for monitoring; 820 void create (std::string histoName, int bins, double min, double max, int bins2, double min2, double max2) { if (fMonitoring) fMonitoring->create (histoName, bins, min, max, bins2, min2, max2); } ///< for monitoring; 821 void addPoint (std::string histoName, double x) { if (fMonitoring) fMonitoring->addPoint (histoName, x); } ///< for monitoring; 822 void addPoint (std::string histoName, double x, double y) {if (fMonitoring) fMonitoring->addPoint (histoName, x, y); } ///< for monitoring; 823 void plot (std::string histoName, std::string options, int pad, EColor color) { if (fMonitoring) fMonitoring->plot (histoName, options, pad, color); } ///< for monitoring; 824 void clear (std::string histoName) { if (fMonitoring) fMonitoring->clear (histoName); } ///< for monitoring; 825 bool exists (std::string histoName) { if (fMonitoring) return fMonitoring->exists (histoName); return false; } ///< for monitoring; 826 ; 827 size_t convergenceCount () const { return m_convergenceCount; } ///< returns the current convergence count; 828 size_t maxConvergenceCount () const { return m_maxConvergenceCount; } ///< returns the max convergence count so far; 829 size_t minError () const { return m_minError; } ///< returns the smallest error so far; 830 ; 831 public:; 832 Timer m_timer; ///< timer for monitoring; 833 double m_minProgress; ///< current limits for the progress bar; 834 double m_maxProgress; ///< current limits for the progress bar; 835 ; 836 ; 837 size_t m_convergenceS",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:31354,Energy Efficiency,monitor,monitoring,31354,"reading; } ///< is multithreading turned on?; 816 ; 817 ; 818 void pads (int numPads) { if (fMonitoring) fMonitoring->pads (numPads); } ///< preparation for monitoring; 819 void create (std::string histoName, int bins, double min, double max) { if (fMonitoring) fMonitoring->create (histoName, bins, min, max); } ///< for monitoring; 820 void create (std::string histoName, int bins, double min, double max, int bins2, double min2, double max2) { if (fMonitoring) fMonitoring->create (histoName, bins, min, max, bins2, min2, max2); } ///< for monitoring; 821 void addPoint (std::string histoName, double x) { if (fMonitoring) fMonitoring->addPoint (histoName, x); } ///< for monitoring; 822 void addPoint (std::string histoName, double x, double y) {if (fMonitoring) fMonitoring->addPoint (histoName, x, y); } ///< for monitoring; 823 void plot (std::string histoName, std::string options, int pad, EColor color) { if (fMonitoring) fMonitoring->plot (histoName, options, pad, color); } ///< for monitoring; 824 void clear (std::string histoName) { if (fMonitoring) fMonitoring->clear (histoName); } ///< for monitoring; 825 bool exists (std::string histoName) { if (fMonitoring) return fMonitoring->exists (histoName); return false; } ///< for monitoring; 826 ; 827 size_t convergenceCount () const { return m_convergenceCount; } ///< returns the current convergence count; 828 size_t maxConvergenceCount () const { return m_maxConvergenceCount; } ///< returns the max convergence count so far; 829 size_t minError () const { return m_minError; } ///< returns the smallest error so far; 830 ; 831 public:; 832 Timer m_timer; ///< timer for monitoring; 833 double m_minProgress; ///< current limits for the progress bar; 834 double m_maxProgress; ///< current limits for the progress bar; 835 ; 836 ; 837 size_t m_convergenceSteps; ///< number of steps without improvement to consider the DNN to have converged; 838 size_t m_batchSize; ///< mini-batch size; 839 size_t m_testRepetitions;; 840 double m_",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:31467,Energy Efficiency,monitor,monitoring,31467,"ing->pads (numPads); } ///< preparation for monitoring; 819 void create (std::string histoName, int bins, double min, double max) { if (fMonitoring) fMonitoring->create (histoName, bins, min, max); } ///< for monitoring; 820 void create (std::string histoName, int bins, double min, double max, int bins2, double min2, double max2) { if (fMonitoring) fMonitoring->create (histoName, bins, min, max, bins2, min2, max2); } ///< for monitoring; 821 void addPoint (std::string histoName, double x) { if (fMonitoring) fMonitoring->addPoint (histoName, x); } ///< for monitoring; 822 void addPoint (std::string histoName, double x, double y) {if (fMonitoring) fMonitoring->addPoint (histoName, x, y); } ///< for monitoring; 823 void plot (std::string histoName, std::string options, int pad, EColor color) { if (fMonitoring) fMonitoring->plot (histoName, options, pad, color); } ///< for monitoring; 824 void clear (std::string histoName) { if (fMonitoring) fMonitoring->clear (histoName); } ///< for monitoring; 825 bool exists (std::string histoName) { if (fMonitoring) return fMonitoring->exists (histoName); return false; } ///< for monitoring; 826 ; 827 size_t convergenceCount () const { return m_convergenceCount; } ///< returns the current convergence count; 828 size_t maxConvergenceCount () const { return m_maxConvergenceCount; } ///< returns the max convergence count so far; 829 size_t minError () const { return m_minError; } ///< returns the smallest error so far; 830 ; 831 public:; 832 Timer m_timer; ///< timer for monitoring; 833 double m_minProgress; ///< current limits for the progress bar; 834 double m_maxProgress; ///< current limits for the progress bar; 835 ; 836 ; 837 size_t m_convergenceSteps; ///< number of steps without improvement to consider the DNN to have converged; 838 size_t m_batchSize; ///< mini-batch size; 839 size_t m_testRepetitions;; 840 double m_factorWeightDecay;; 841 ; 842 size_t count_E;; 843 size_t count_dE;; 844 size_t count_mb_E;; 845 size_t count_mb_",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:31603,Energy Efficiency,monitor,monitoring,31603,"fMonitoring) fMonitoring->create (histoName, bins, min, max); } ///< for monitoring; 820 void create (std::string histoName, int bins, double min, double max, int bins2, double min2, double max2) { if (fMonitoring) fMonitoring->create (histoName, bins, min, max, bins2, min2, max2); } ///< for monitoring; 821 void addPoint (std::string histoName, double x) { if (fMonitoring) fMonitoring->addPoint (histoName, x); } ///< for monitoring; 822 void addPoint (std::string histoName, double x, double y) {if (fMonitoring) fMonitoring->addPoint (histoName, x, y); } ///< for monitoring; 823 void plot (std::string histoName, std::string options, int pad, EColor color) { if (fMonitoring) fMonitoring->plot (histoName, options, pad, color); } ///< for monitoring; 824 void clear (std::string histoName) { if (fMonitoring) fMonitoring->clear (histoName); } ///< for monitoring; 825 bool exists (std::string histoName) { if (fMonitoring) return fMonitoring->exists (histoName); return false; } ///< for monitoring; 826 ; 827 size_t convergenceCount () const { return m_convergenceCount; } ///< returns the current convergence count; 828 size_t maxConvergenceCount () const { return m_maxConvergenceCount; } ///< returns the max convergence count so far; 829 size_t minError () const { return m_minError; } ///< returns the smallest error so far; 830 ; 831 public:; 832 Timer m_timer; ///< timer for monitoring; 833 double m_minProgress; ///< current limits for the progress bar; 834 double m_maxProgress; ///< current limits for the progress bar; 835 ; 836 ; 837 size_t m_convergenceSteps; ///< number of steps without improvement to consider the DNN to have converged; 838 size_t m_batchSize; ///< mini-batch size; 839 size_t m_testRepetitions;; 840 double m_factorWeightDecay;; 841 ; 842 size_t count_E;; 843 size_t count_dE;; 844 size_t count_mb_E;; 845 size_t count_mb_dE;; 846 ; 847 EnumRegularization m_regularization;; 848 ; 849 double m_dropRepetitions;; 850 std::vector<double> m_dropOut;; 851 ; 852 ",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:31999,Energy Efficiency,monitor,monitoring,31999,"nt (histoName, x); } ///< for monitoring; 822 void addPoint (std::string histoName, double x, double y) {if (fMonitoring) fMonitoring->addPoint (histoName, x, y); } ///< for monitoring; 823 void plot (std::string histoName, std::string options, int pad, EColor color) { if (fMonitoring) fMonitoring->plot (histoName, options, pad, color); } ///< for monitoring; 824 void clear (std::string histoName) { if (fMonitoring) fMonitoring->clear (histoName); } ///< for monitoring; 825 bool exists (std::string histoName) { if (fMonitoring) return fMonitoring->exists (histoName); return false; } ///< for monitoring; 826 ; 827 size_t convergenceCount () const { return m_convergenceCount; } ///< returns the current convergence count; 828 size_t maxConvergenceCount () const { return m_maxConvergenceCount; } ///< returns the max convergence count so far; 829 size_t minError () const { return m_minError; } ///< returns the smallest error so far; 830 ; 831 public:; 832 Timer m_timer; ///< timer for monitoring; 833 double m_minProgress; ///< current limits for the progress bar; 834 double m_maxProgress; ///< current limits for the progress bar; 835 ; 836 ; 837 size_t m_convergenceSteps; ///< number of steps without improvement to consider the DNN to have converged; 838 size_t m_batchSize; ///< mini-batch size; 839 size_t m_testRepetitions;; 840 double m_factorWeightDecay;; 841 ; 842 size_t count_E;; 843 size_t count_dE;; 844 size_t count_mb_E;; 845 size_t count_mb_dE;; 846 ; 847 EnumRegularization m_regularization;; 848 ; 849 double m_dropRepetitions;; 850 std::vector<double> m_dropOut;; 851 ; 852 double fLearningRate;; 853 double fMomentum;; 854 int fRepetitions;; 855 MinimizerType fMinimizerType;; 856 ; 857 size_t m_convergenceCount;; 858 size_t m_maxConvergenceCount;; 859 double m_minError;; 860 ; 861 ; 862 protected:; 863 bool m_useMultithreading;; 864 ; 865 std::shared_ptr<Monitoring> fMonitoring;; 866 };; 867 ; 868 ; 869 ; 870 ; 871 ; 872 ; 873 ; 874 ; 875 ; 876 ; 877 ; 878 ; 879 ",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:50571,Energy Efficiency,monitor,monitoring,50571,"t.h:251; TMVA::DNN::Batch::beginconst_iterator begin() constDefinition NeuralNet.h:244; TMVA::DNN::Batch::endconst_iterator end() constDefinition NeuralNet.h:245; TMVA::DNN::Batch::BatchBatch(typename std::vector< Pattern >::const_iterator itBegin, typename std::vector< Pattern >::const_iterator itEnd)Definition NeuralNet.h:239; TMVA::DNN::Batch::sizesize_t size() constDefinition NeuralNet.h:247; TMVA::DNN::Batch::const_iteratorstd::vector< Pattern >::const_iterator const_iteratorDefinition NeuralNet.h:237; TMVA::DNN::Batch::m_itBeginconst_iterator m_itBeginiterator denoting the beginning of the batchDefinition NeuralNet.h:250; TMVA::DNN::ClassificationSettingsSettings for classificationused to distinguish between different function signatures.Definition NeuralNet.h:895; TMVA::DNN::ClassificationSettings::startTrainCyclevoid startTrainCycle()action to be done when the training cycle is started (e.g.Definition NeuralNet.cxx:281; TMVA::DNN::ClassificationSettings::testIterationvoid testIteration()callback for monitoring and logggingDefinition NeuralNet.h:930; TMVA::DNN::ClassificationSettings::endTrainCyclevoid endTrainCycle(double)action to be done when the training cycle is ended (e.g.Definition NeuralNet.cxx:296; TMVA::DNN::ClassificationSettings::endTestCyclevirtual void endTestCycle()action to be done when the training cycle is ended (e.g.Definition NeuralNet.cxx:326; TMVA::DNN::ClassificationSettings::m_pResultPatternContainerstd::vector< Pattern > * m_pResultPatternContainerDefinition NeuralNet.h:1009; TMVA::DNN::ClassificationSettings::setResultComputationvoid setResultComputation(std::string _fileNameNetConfig, std::string _fileNameResult, std::vector< Pattern > *_resultPatternContainer)preparation for monitoring outputDefinition NeuralNet.cxx:520; TMVA::DNN::ClassificationSettings::m_fileNameResultstd::string m_fileNameResultDefinition NeuralNet.h:1010; TMVA::DNN::ClassificationSettings::ClassificationSettingsClassificationSettings(TString name, size_t _conv",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:51287,Energy Efficiency,monitor,monitoring,51287,"sificationSettingsSettings for classificationused to distinguish between different function signatures.Definition NeuralNet.h:895; TMVA::DNN::ClassificationSettings::startTrainCyclevoid startTrainCycle()action to be done when the training cycle is started (e.g.Definition NeuralNet.cxx:281; TMVA::DNN::ClassificationSettings::testIterationvoid testIteration()callback for monitoring and logggingDefinition NeuralNet.h:930; TMVA::DNN::ClassificationSettings::endTrainCyclevoid endTrainCycle(double)action to be done when the training cycle is ended (e.g.Definition NeuralNet.cxx:296; TMVA::DNN::ClassificationSettings::endTestCyclevirtual void endTestCycle()action to be done when the training cycle is ended (e.g.Definition NeuralNet.cxx:326; TMVA::DNN::ClassificationSettings::m_pResultPatternContainerstd::vector< Pattern > * m_pResultPatternContainerDefinition NeuralNet.h:1009; TMVA::DNN::ClassificationSettings::setResultComputationvoid setResultComputation(std::string _fileNameNetConfig, std::string _fileNameResult, std::vector< Pattern > *_resultPatternContainer)preparation for monitoring outputDefinition NeuralNet.cxx:520; TMVA::DNN::ClassificationSettings::m_fileNameResultstd::string m_fileNameResultDefinition NeuralNet.h:1010; TMVA::DNN::ClassificationSettings::ClassificationSettingsClassificationSettings(TString name, size_t _convergenceSteps=15, size_t _batchSize=10, size_t _testRepetitions=7, double _factorWeightDecay=1e-5, EnumRegularization _regularization=EnumRegularization::NONE, size_t _scaleToNumEvents=0, MinimizerType _eMinimizerType=MinimizerType::fSteepest, double _learningRate=1e-5, double _momentum=0.3, int _repetitions=3, bool _useMultithreading=true)c'torDefinition NeuralNet.h:901; TMVA::DNN::ClassificationSettings::m_inputstd::vector< double > m_inputDefinition NeuralNet.h:995; TMVA::DNN::ClassificationSettings::m_significancesstd::vector< double > m_significancesDefinition NeuralNet.h:1001; TMVA::DNN::ClassificationSettings::m_sumOfSigWeightsdouble m_s",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:53439,Energy Efficiency,monitor,monitoring,53439,"Settings::m_fileNameNetConfigstd::string m_fileNameNetConfigDefinition NeuralNet.h:1011; TMVA::DNN::ClassificationSettings::~ClassificationSettingsvirtual ~ClassificationSettings()d'torDefinition NeuralNet.h:924; TMVA::DNN::ClassificationSettings::m_targetsstd::vector< double > m_targetsDefinition NeuralNet.h:997; TMVA::DNN::ClassificationSettings::testSamplevoid testSample(double error, double output, double target, double weight)action to be done after the computation of a test sample (e.g.Definition NeuralNet.cxx:304; TMVA::DNN::ClassificationSettings::m_scaleToNumEventssize_t m_scaleToNumEventsDefinition NeuralNet.h:1006; TMVA::DNN::ClassificationSettings::startTestCyclevirtual void startTestCycle()action to be done when the test cycle is started (e.g.Definition NeuralNet.cxx:316; TMVA::DNN::ClassificationSettings::m_sumOfBkgWeightsdouble m_sumOfBkgWeightsDefinition NeuralNet.h:1005; TMVA::DNN::ClassificationSettings::setWeightSumsvoid setWeightSums(double sumOfSigWeights, double sumOfBkgWeights)set the weight sums to be scaled to (preparations for monitoring output)Definition NeuralNet.cxx:512; TMVA::DNN::ClassificationSettings::m_amsstd::vector< double > m_amsDefinition NeuralNet.h:1000; TMVA::DNN::ClassificationSettings::m_cutValuedouble m_cutValueDefinition NeuralNet.h:1008; TMVA::DNN::ClassificationSettings::m_outputstd::vector< double > m_outputDefinition NeuralNet.h:996; TMVA::DNN::LayerDataLayerData holds the data of one layer.Definition NeuralNet.h:437; TMVA::DNN::LayerData::m_itInputBeginconst_iterator_type m_itInputBeginiterator to the first of the nodes in the input node vectorDefinition NeuralNet.h:639; TMVA::DNN::LayerData::deltasBeginconst_iterator_type deltasBegin() constreturns const iterator to the begin of the deltas (back-propagation)Definition NeuralNet.h:594; TMVA::DNN::LayerData::valuesBeginiterator_type valuesBegin()returns iterator to the begin of the (node) valuesDefinition NeuralNet.h:585; TMVA::DNN::LayerData::valuesEndconst_iterator_t",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:71582,Energy Efficiency,monitor,monitoringDefinition,71582,"ightBegin, ItWeight itWeightEnd) constDefinition NeuralNet.icc:1321; TMVA::DNN::Net::setOutputSizevoid setOutputSize(size_t sizeOutput)set the output size of the DNNDefinition NeuralNet.h:1093; TMVA::DNN::Net::forwardPatternvoid forwardPattern(const LayerContainer &_layers, std::vector< LayerData > &layerData) constDefinition NeuralNet.icc:1221; TMVA::DNN::Net::backPropagatevoid backPropagate(std::vector< std::vector< LayerData > > &layerPatternData, const Settings &settings, size_t trainFromLayer, size_t totalNumWeights) constDefinition NeuralNet.icc:1355; TMVA::DNN::SettingsSettings for the training of the neural net.Definition NeuralNet.h:730; TMVA::DNN::Settings::m_batchSizesize_t m_batchSizemini-batch sizeDefinition NeuralNet.h:838; TMVA::DNN::Settings::setDropOutvoid setDropOut(Iterator begin, Iterator end, size_t _dropRepetitions)set the drop-out configuration (layer-wise)Definition NeuralNet.h:759; TMVA::DNN::Settings::createvoid create(std::string histoName, int bins, double min, double max, int bins2, double min2, double max2)for monitoringDefinition NeuralNet.h:820; TMVA::DNN::Settings::useMultithreadingbool useMultithreading() constis multithreading turned on?Definition NeuralNet.h:815; TMVA::DNN::Settings::regularizationEnumRegularization regularization() constsome regularization of the DNN is turned on?Definition NeuralNet.h:813; TMVA::DNN::Settings::convergenceCountsize_t convergenceCount() constreturns the current convergence countDefinition NeuralNet.h:827; TMVA::DNN::Settings::momentumdouble momentum() constget the momentum (e.g. for SGD)Definition NeuralNet.h:772; TMVA::DNN::Settings::count_Esize_t count_EDefinition NeuralNet.h:842; TMVA::DNN::Settings::m_timerTimer m_timertimer for monitoringDefinition NeuralNet.h:832; TMVA::DNN::Settings::testRepetitionssize_t testRepetitions() consthow often is the test data testedDefinition NeuralNet.h:768; TMVA::DNN::Settings::clearvoid clear(std::string histoName)for monitoringDefinition NeuralNet.h:824; TMV",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:72257,Energy Efficiency,monitor,monitoringDefinition,72257,"izeDefinition NeuralNet.h:838; TMVA::DNN::Settings::setDropOutvoid setDropOut(Iterator begin, Iterator end, size_t _dropRepetitions)set the drop-out configuration (layer-wise)Definition NeuralNet.h:759; TMVA::DNN::Settings::createvoid create(std::string histoName, int bins, double min, double max, int bins2, double min2, double max2)for monitoringDefinition NeuralNet.h:820; TMVA::DNN::Settings::useMultithreadingbool useMultithreading() constis multithreading turned on?Definition NeuralNet.h:815; TMVA::DNN::Settings::regularizationEnumRegularization regularization() constsome regularization of the DNN is turned on?Definition NeuralNet.h:813; TMVA::DNN::Settings::convergenceCountsize_t convergenceCount() constreturns the current convergence countDefinition NeuralNet.h:827; TMVA::DNN::Settings::momentumdouble momentum() constget the momentum (e.g. for SGD)Definition NeuralNet.h:772; TMVA::DNN::Settings::count_Esize_t count_EDefinition NeuralNet.h:842; TMVA::DNN::Settings::m_timerTimer m_timertimer for monitoringDefinition NeuralNet.h:832; TMVA::DNN::Settings::testRepetitionssize_t testRepetitions() consthow often is the test data testedDefinition NeuralNet.h:768; TMVA::DNN::Settings::clearvoid clear(std::string histoName)for monitoringDefinition NeuralNet.h:824; TMVA::DNN::Settings::endTestCyclevirtual void endTestCycle()callback for monitoring and logggingDefinition NeuralNet.h:805; TMVA::DNN::Settings::fMinimizerTypeMinimizerType fMinimizerTypeDefinition NeuralNet.h:855; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x, double y)for monitoringDefinition NeuralNet.h:822; TMVA::DNN::Settings::setMonitoringvoid setMonitoring(std::shared_ptr< Monitoring > ptrMonitoring)prepared for monitoringDefinition NeuralNet.h:764; TMVA::DNN::Settings::testIterationvirtual void testIteration()callback for monitoring and logggingDefinition NeuralNet.h:806; TMVA::DNN::Settings::m_convergenceStepssize_t m_convergenceStepsnumber of steps without improvement to co",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:72485,Energy Efficiency,monitor,monitoringDefinition,72485,"::createvoid create(std::string histoName, int bins, double min, double max, int bins2, double min2, double max2)for monitoringDefinition NeuralNet.h:820; TMVA::DNN::Settings::useMultithreadingbool useMultithreading() constis multithreading turned on?Definition NeuralNet.h:815; TMVA::DNN::Settings::regularizationEnumRegularization regularization() constsome regularization of the DNN is turned on?Definition NeuralNet.h:813; TMVA::DNN::Settings::convergenceCountsize_t convergenceCount() constreturns the current convergence countDefinition NeuralNet.h:827; TMVA::DNN::Settings::momentumdouble momentum() constget the momentum (e.g. for SGD)Definition NeuralNet.h:772; TMVA::DNN::Settings::count_Esize_t count_EDefinition NeuralNet.h:842; TMVA::DNN::Settings::m_timerTimer m_timertimer for monitoringDefinition NeuralNet.h:832; TMVA::DNN::Settings::testRepetitionssize_t testRepetitions() consthow often is the test data testedDefinition NeuralNet.h:768; TMVA::DNN::Settings::clearvoid clear(std::string histoName)for monitoringDefinition NeuralNet.h:824; TMVA::DNN::Settings::endTestCyclevirtual void endTestCycle()callback for monitoring and logggingDefinition NeuralNet.h:805; TMVA::DNN::Settings::fMinimizerTypeMinimizerType fMinimizerTypeDefinition NeuralNet.h:855; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x, double y)for monitoringDefinition NeuralNet.h:822; TMVA::DNN::Settings::setMonitoringvoid setMonitoring(std::shared_ptr< Monitoring > ptrMonitoring)prepared for monitoringDefinition NeuralNet.h:764; TMVA::DNN::Settings::testIterationvirtual void testIteration()callback for monitoring and logggingDefinition NeuralNet.h:806; TMVA::DNN::Settings::m_convergenceStepssize_t m_convergenceStepsnumber of steps without improvement to consider the DNN to have convergedDefinition NeuralNet.h:837; TMVA::DNN::Settings::hasConvergedvirtual bool hasConverged(double testError)has this training converged already?Definition NeuralNet.cxx:485; TMVA::DNN::Settings:",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:72596,Energy Efficiency,monitor,monitoring,72596,"for monitoringDefinition NeuralNet.h:820; TMVA::DNN::Settings::useMultithreadingbool useMultithreading() constis multithreading turned on?Definition NeuralNet.h:815; TMVA::DNN::Settings::regularizationEnumRegularization regularization() constsome regularization of the DNN is turned on?Definition NeuralNet.h:813; TMVA::DNN::Settings::convergenceCountsize_t convergenceCount() constreturns the current convergence countDefinition NeuralNet.h:827; TMVA::DNN::Settings::momentumdouble momentum() constget the momentum (e.g. for SGD)Definition NeuralNet.h:772; TMVA::DNN::Settings::count_Esize_t count_EDefinition NeuralNet.h:842; TMVA::DNN::Settings::m_timerTimer m_timertimer for monitoringDefinition NeuralNet.h:832; TMVA::DNN::Settings::testRepetitionssize_t testRepetitions() consthow often is the test data testedDefinition NeuralNet.h:768; TMVA::DNN::Settings::clearvoid clear(std::string histoName)for monitoringDefinition NeuralNet.h:824; TMVA::DNN::Settings::endTestCyclevirtual void endTestCycle()callback for monitoring and logggingDefinition NeuralNet.h:805; TMVA::DNN::Settings::fMinimizerTypeMinimizerType fMinimizerTypeDefinition NeuralNet.h:855; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x, double y)for monitoringDefinition NeuralNet.h:822; TMVA::DNN::Settings::setMonitoringvoid setMonitoring(std::shared_ptr< Monitoring > ptrMonitoring)prepared for monitoringDefinition NeuralNet.h:764; TMVA::DNN::Settings::testIterationvirtual void testIteration()callback for monitoring and logggingDefinition NeuralNet.h:806; TMVA::DNN::Settings::m_convergenceStepssize_t m_convergenceStepsnumber of steps without improvement to consider the DNN to have convergedDefinition NeuralNet.h:837; TMVA::DNN::Settings::hasConvergedvirtual bool hasConverged(double testError)has this training converged already?Definition NeuralNet.cxx:485; TMVA::DNN::Settings::minimizerTypeMinimizerType minimizerType() constwhich minimizer shall be used (e.g. SGD)Definition NeuralNet.h:",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:72827,Energy Efficiency,monitor,monitoringDefinition,72827,"ion regularization() constsome regularization of the DNN is turned on?Definition NeuralNet.h:813; TMVA::DNN::Settings::convergenceCountsize_t convergenceCount() constreturns the current convergence countDefinition NeuralNet.h:827; TMVA::DNN::Settings::momentumdouble momentum() constget the momentum (e.g. for SGD)Definition NeuralNet.h:772; TMVA::DNN::Settings::count_Esize_t count_EDefinition NeuralNet.h:842; TMVA::DNN::Settings::m_timerTimer m_timertimer for monitoringDefinition NeuralNet.h:832; TMVA::DNN::Settings::testRepetitionssize_t testRepetitions() consthow often is the test data testedDefinition NeuralNet.h:768; TMVA::DNN::Settings::clearvoid clear(std::string histoName)for monitoringDefinition NeuralNet.h:824; TMVA::DNN::Settings::endTestCyclevirtual void endTestCycle()callback for monitoring and logggingDefinition NeuralNet.h:805; TMVA::DNN::Settings::fMinimizerTypeMinimizerType fMinimizerTypeDefinition NeuralNet.h:855; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x, double y)for monitoringDefinition NeuralNet.h:822; TMVA::DNN::Settings::setMonitoringvoid setMonitoring(std::shared_ptr< Monitoring > ptrMonitoring)prepared for monitoringDefinition NeuralNet.h:764; TMVA::DNN::Settings::testIterationvirtual void testIteration()callback for monitoring and logggingDefinition NeuralNet.h:806; TMVA::DNN::Settings::m_convergenceStepssize_t m_convergenceStepsnumber of steps without improvement to consider the DNN to have convergedDefinition NeuralNet.h:837; TMVA::DNN::Settings::hasConvergedvirtual bool hasConverged(double testError)has this training converged already?Definition NeuralNet.cxx:485; TMVA::DNN::Settings::minimizerTypeMinimizerType minimizerType() constwhich minimizer shall be used (e.g. SGD)Definition NeuralNet.h:774; TMVA::DNN::Settings::m_dropOutstd::vector< double > m_dropOutDefinition NeuralNet.h:850; TMVA::DNN::Settings::m_minProgressdouble m_minProgresscurrent limits for the progress barDefinition NeuralNet.h:833; TMVA::",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:72975,Energy Efficiency,monitor,monitoringDefinition,72975,"e_t convergenceCount() constreturns the current convergence countDefinition NeuralNet.h:827; TMVA::DNN::Settings::momentumdouble momentum() constget the momentum (e.g. for SGD)Definition NeuralNet.h:772; TMVA::DNN::Settings::count_Esize_t count_EDefinition NeuralNet.h:842; TMVA::DNN::Settings::m_timerTimer m_timertimer for monitoringDefinition NeuralNet.h:832; TMVA::DNN::Settings::testRepetitionssize_t testRepetitions() consthow often is the test data testedDefinition NeuralNet.h:768; TMVA::DNN::Settings::clearvoid clear(std::string histoName)for monitoringDefinition NeuralNet.h:824; TMVA::DNN::Settings::endTestCyclevirtual void endTestCycle()callback for monitoring and logggingDefinition NeuralNet.h:805; TMVA::DNN::Settings::fMinimizerTypeMinimizerType fMinimizerTypeDefinition NeuralNet.h:855; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x, double y)for monitoringDefinition NeuralNet.h:822; TMVA::DNN::Settings::setMonitoringvoid setMonitoring(std::shared_ptr< Monitoring > ptrMonitoring)prepared for monitoringDefinition NeuralNet.h:764; TMVA::DNN::Settings::testIterationvirtual void testIteration()callback for monitoring and logggingDefinition NeuralNet.h:806; TMVA::DNN::Settings::m_convergenceStepssize_t m_convergenceStepsnumber of steps without improvement to consider the DNN to have convergedDefinition NeuralNet.h:837; TMVA::DNN::Settings::hasConvergedvirtual bool hasConverged(double testError)has this training converged already?Definition NeuralNet.cxx:485; TMVA::DNN::Settings::minimizerTypeMinimizerType minimizerType() constwhich minimizer shall be used (e.g. SGD)Definition NeuralNet.h:774; TMVA::DNN::Settings::m_dropOutstd::vector< double > m_dropOutDefinition NeuralNet.h:850; TMVA::DNN::Settings::m_minProgressdouble m_minProgresscurrent limits for the progress barDefinition NeuralNet.h:833; TMVA::DNN::Settings::cyclevirtual void cycle(double progress, TString text)Definition NeuralNet.h:799; TMVA::DNN::Settings::setProgressLimitsvi",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:73088,Energy Efficiency,monitor,monitoring,73088,"() constget the momentum (e.g. for SGD)Definition NeuralNet.h:772; TMVA::DNN::Settings::count_Esize_t count_EDefinition NeuralNet.h:842; TMVA::DNN::Settings::m_timerTimer m_timertimer for monitoringDefinition NeuralNet.h:832; TMVA::DNN::Settings::testRepetitionssize_t testRepetitions() consthow often is the test data testedDefinition NeuralNet.h:768; TMVA::DNN::Settings::clearvoid clear(std::string histoName)for monitoringDefinition NeuralNet.h:824; TMVA::DNN::Settings::endTestCyclevirtual void endTestCycle()callback for monitoring and logggingDefinition NeuralNet.h:805; TMVA::DNN::Settings::fMinimizerTypeMinimizerType fMinimizerTypeDefinition NeuralNet.h:855; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x, double y)for monitoringDefinition NeuralNet.h:822; TMVA::DNN::Settings::setMonitoringvoid setMonitoring(std::shared_ptr< Monitoring > ptrMonitoring)prepared for monitoringDefinition NeuralNet.h:764; TMVA::DNN::Settings::testIterationvirtual void testIteration()callback for monitoring and logggingDefinition NeuralNet.h:806; TMVA::DNN::Settings::m_convergenceStepssize_t m_convergenceStepsnumber of steps without improvement to consider the DNN to have convergedDefinition NeuralNet.h:837; TMVA::DNN::Settings::hasConvergedvirtual bool hasConverged(double testError)has this training converged already?Definition NeuralNet.cxx:485; TMVA::DNN::Settings::minimizerTypeMinimizerType minimizerType() constwhich minimizer shall be used (e.g. SGD)Definition NeuralNet.h:774; TMVA::DNN::Settings::m_dropOutstd::vector< double > m_dropOutDefinition NeuralNet.h:850; TMVA::DNN::Settings::m_minProgressdouble m_minProgresscurrent limits for the progress barDefinition NeuralNet.h:833; TMVA::DNN::Settings::cyclevirtual void cycle(double progress, TString text)Definition NeuralNet.h:799; TMVA::DNN::Settings::setProgressLimitsvirtual void setProgressLimits(double minProgress=0, double maxProgress=100)Definition NeuralNet.h:790; TMVA::DNN::Settings::m_maxProgressd",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:74232,Energy Efficiency,monitor,monitoring,74232," of steps without improvement to consider the DNN to have convergedDefinition NeuralNet.h:837; TMVA::DNN::Settings::hasConvergedvirtual bool hasConverged(double testError)has this training converged already?Definition NeuralNet.cxx:485; TMVA::DNN::Settings::minimizerTypeMinimizerType minimizerType() constwhich minimizer shall be used (e.g. SGD)Definition NeuralNet.h:774; TMVA::DNN::Settings::m_dropOutstd::vector< double > m_dropOutDefinition NeuralNet.h:850; TMVA::DNN::Settings::m_minProgressdouble m_minProgresscurrent limits for the progress barDefinition NeuralNet.h:833; TMVA::DNN::Settings::cyclevirtual void cycle(double progress, TString text)Definition NeuralNet.h:799; TMVA::DNN::Settings::setProgressLimitsvirtual void setProgressLimits(double minProgress=0, double maxProgress=100)Definition NeuralNet.h:790; TMVA::DNN::Settings::m_maxProgressdouble m_maxProgresscurrent limits for the progress barDefinition NeuralNet.h:834; TMVA::DNN::Settings::endTrainCyclevirtual void endTrainCycle(double)callback for monitoring and loggingDefinition NeuralNet.h:788; TMVA::DNN::Settings::count_dEsize_t count_dEDefinition NeuralNet.h:843; TMVA::DNN::Settings::drawSamplevirtual void drawSample(const std::vector< double > &, const std::vector< double > &, const std::vector< double > &, double)callback for monitoring and loggingDefinition NeuralNet.h:807; TMVA::DNN::Settings::learningRatedouble learningRate() constget the learning rateDefinition NeuralNet.h:771; TMVA::DNN::Settings::m_dropRepetitionsdouble m_dropRepetitionsDefinition NeuralNet.h:849; TMVA::DNN::Settings::dropFractionsconst std::vector< double > & dropFractions() constDefinition NeuralNet.h:762; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x)for monitoringDefinition NeuralNet.h:821; TMVA::DNN::Settings::~Settingsvirtual ~Settings()d'torDefinition NeuralNet.cxx:261; TMVA::DNN::Settings::m_convergenceCountsize_t m_convergenceCountDefinition NeuralNet.h:857; TMVA::DNN::Settings::m_regulariza",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:74522,Energy Efficiency,monitor,monitoring,74522,":Settings::minimizerTypeMinimizerType minimizerType() constwhich minimizer shall be used (e.g. SGD)Definition NeuralNet.h:774; TMVA::DNN::Settings::m_dropOutstd::vector< double > m_dropOutDefinition NeuralNet.h:850; TMVA::DNN::Settings::m_minProgressdouble m_minProgresscurrent limits for the progress barDefinition NeuralNet.h:833; TMVA::DNN::Settings::cyclevirtual void cycle(double progress, TString text)Definition NeuralNet.h:799; TMVA::DNN::Settings::setProgressLimitsvirtual void setProgressLimits(double minProgress=0, double maxProgress=100)Definition NeuralNet.h:790; TMVA::DNN::Settings::m_maxProgressdouble m_maxProgresscurrent limits for the progress barDefinition NeuralNet.h:834; TMVA::DNN::Settings::endTrainCyclevirtual void endTrainCycle(double)callback for monitoring and loggingDefinition NeuralNet.h:788; TMVA::DNN::Settings::count_dEsize_t count_dEDefinition NeuralNet.h:843; TMVA::DNN::Settings::drawSamplevirtual void drawSample(const std::vector< double > &, const std::vector< double > &, const std::vector< double > &, double)callback for monitoring and loggingDefinition NeuralNet.h:807; TMVA::DNN::Settings::learningRatedouble learningRate() constget the learning rateDefinition NeuralNet.h:771; TMVA::DNN::Settings::m_dropRepetitionsdouble m_dropRepetitionsDefinition NeuralNet.h:849; TMVA::DNN::Settings::dropFractionsconst std::vector< double > & dropFractions() constDefinition NeuralNet.h:762; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x)for monitoringDefinition NeuralNet.h:821; TMVA::DNN::Settings::~Settingsvirtual ~Settings()d'torDefinition NeuralNet.cxx:261; TMVA::DNN::Settings::m_convergenceCountsize_t m_convergenceCountDefinition NeuralNet.h:857; TMVA::DNN::Settings::m_regularizationEnumRegularization m_regularizationDefinition NeuralNet.h:847; TMVA::DNN::Settings::repetitionsint repetitions() consthow many steps have to be gone until the batch is changedDefinition NeuralNet.h:773; TMVA::DNN::Settings::m_minErrordouble m",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:74963,Energy Efficiency,monitor,monitoringDefinition,74963,"al void setProgressLimits(double minProgress=0, double maxProgress=100)Definition NeuralNet.h:790; TMVA::DNN::Settings::m_maxProgressdouble m_maxProgresscurrent limits for the progress barDefinition NeuralNet.h:834; TMVA::DNN::Settings::endTrainCyclevirtual void endTrainCycle(double)callback for monitoring and loggingDefinition NeuralNet.h:788; TMVA::DNN::Settings::count_dEsize_t count_dEDefinition NeuralNet.h:843; TMVA::DNN::Settings::drawSamplevirtual void drawSample(const std::vector< double > &, const std::vector< double > &, const std::vector< double > &, double)callback for monitoring and loggingDefinition NeuralNet.h:807; TMVA::DNN::Settings::learningRatedouble learningRate() constget the learning rateDefinition NeuralNet.h:771; TMVA::DNN::Settings::m_dropRepetitionsdouble m_dropRepetitionsDefinition NeuralNet.h:849; TMVA::DNN::Settings::dropFractionsconst std::vector< double > & dropFractions() constDefinition NeuralNet.h:762; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x)for monitoringDefinition NeuralNet.h:821; TMVA::DNN::Settings::~Settingsvirtual ~Settings()d'torDefinition NeuralNet.cxx:261; TMVA::DNN::Settings::m_convergenceCountsize_t m_convergenceCountDefinition NeuralNet.h:857; TMVA::DNN::Settings::m_regularizationEnumRegularization m_regularizationDefinition NeuralNet.h:847; TMVA::DNN::Settings::repetitionsint repetitions() consthow many steps have to be gone until the batch is changedDefinition NeuralNet.h:773; TMVA::DNN::Settings::m_minErrordouble m_minErrorDefinition NeuralNet.h:859; TMVA::DNN::Settings::testSamplevirtual void testSample(double, double, double, double)virtual function to be used for monitoring (callback)Definition NeuralNet.h:781; TMVA::DNN::Settings::plotvoid plot(std::string histoName, std::string options, int pad, EColor color)for monitoringDefinition NeuralNet.h:823; TMVA::DNN::Settings::startTrainCyclevirtual void startTrainCycle()Definition NeuralNet.h:782; TMVA::DNN::Settings::convergenceStepssi",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:75611,Energy Efficiency,monitor,monitoring,75611,"7; TMVA::DNN::Settings::learningRatedouble learningRate() constget the learning rateDefinition NeuralNet.h:771; TMVA::DNN::Settings::m_dropRepetitionsdouble m_dropRepetitionsDefinition NeuralNet.h:849; TMVA::DNN::Settings::dropFractionsconst std::vector< double > & dropFractions() constDefinition NeuralNet.h:762; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x)for monitoringDefinition NeuralNet.h:821; TMVA::DNN::Settings::~Settingsvirtual ~Settings()d'torDefinition NeuralNet.cxx:261; TMVA::DNN::Settings::m_convergenceCountsize_t m_convergenceCountDefinition NeuralNet.h:857; TMVA::DNN::Settings::m_regularizationEnumRegularization m_regularizationDefinition NeuralNet.h:847; TMVA::DNN::Settings::repetitionsint repetitions() consthow many steps have to be gone until the batch is changedDefinition NeuralNet.h:773; TMVA::DNN::Settings::m_minErrordouble m_minErrorDefinition NeuralNet.h:859; TMVA::DNN::Settings::testSamplevirtual void testSample(double, double, double, double)virtual function to be used for monitoring (callback)Definition NeuralNet.h:781; TMVA::DNN::Settings::plotvoid plot(std::string histoName, std::string options, int pad, EColor color)for monitoringDefinition NeuralNet.h:823; TMVA::DNN::Settings::startTrainCyclevirtual void startTrainCycle()Definition NeuralNet.h:782; TMVA::DNN::Settings::convergenceStepssize_t convergenceSteps() consthow many steps until training is deemed to have convergedDefinition NeuralNet.h:766; TMVA::DNN::Settings::m_factorWeightDecaydouble m_factorWeightDecayDefinition NeuralNet.h:840; TMVA::DNN::Settings::factorWeightDecaydouble factorWeightDecay() constget the weight-decay factorDefinition NeuralNet.h:769; TMVA::DNN::Settings::count_mb_dEsize_t count_mb_dEDefinition NeuralNet.h:845; TMVA::DNN::Settings::m_useMultithreadingbool m_useMultithreadingDefinition NeuralNet.h:863; TMVA::DNN::Settings::count_mb_Esize_t count_mb_EDefinition NeuralNet.h:844; TMVA::DNN::Settings::existsbool exists(std::string hist",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:75765,Energy Efficiency,monitor,monitoringDefinition,75765,"e m_dropRepetitionsDefinition NeuralNet.h:849; TMVA::DNN::Settings::dropFractionsconst std::vector< double > & dropFractions() constDefinition NeuralNet.h:762; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x)for monitoringDefinition NeuralNet.h:821; TMVA::DNN::Settings::~Settingsvirtual ~Settings()d'torDefinition NeuralNet.cxx:261; TMVA::DNN::Settings::m_convergenceCountsize_t m_convergenceCountDefinition NeuralNet.h:857; TMVA::DNN::Settings::m_regularizationEnumRegularization m_regularizationDefinition NeuralNet.h:847; TMVA::DNN::Settings::repetitionsint repetitions() consthow many steps have to be gone until the batch is changedDefinition NeuralNet.h:773; TMVA::DNN::Settings::m_minErrordouble m_minErrorDefinition NeuralNet.h:859; TMVA::DNN::Settings::testSamplevirtual void testSample(double, double, double, double)virtual function to be used for monitoring (callback)Definition NeuralNet.h:781; TMVA::DNN::Settings::plotvoid plot(std::string histoName, std::string options, int pad, EColor color)for monitoringDefinition NeuralNet.h:823; TMVA::DNN::Settings::startTrainCyclevirtual void startTrainCycle()Definition NeuralNet.h:782; TMVA::DNN::Settings::convergenceStepssize_t convergenceSteps() consthow many steps until training is deemed to have convergedDefinition NeuralNet.h:766; TMVA::DNN::Settings::m_factorWeightDecaydouble m_factorWeightDecayDefinition NeuralNet.h:840; TMVA::DNN::Settings::factorWeightDecaydouble factorWeightDecay() constget the weight-decay factorDefinition NeuralNet.h:769; TMVA::DNN::Settings::count_mb_dEsize_t count_mb_dEDefinition NeuralNet.h:845; TMVA::DNN::Settings::m_useMultithreadingbool m_useMultithreadingDefinition NeuralNet.h:863; TMVA::DNN::Settings::count_mb_Esize_t count_mb_EDefinition NeuralNet.h:844; TMVA::DNN::Settings::existsbool exists(std::string histoName)for monitoringDefinition NeuralNet.h:825; TMVA::DNN::Settings::maxConvergenceCountsize_t maxConvergenceCount() constreturns the max convergence count",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:76580,Energy Efficiency,monitor,monitoringDefinition,76580,"ble, double, double)virtual function to be used for monitoring (callback)Definition NeuralNet.h:781; TMVA::DNN::Settings::plotvoid plot(std::string histoName, std::string options, int pad, EColor color)for monitoringDefinition NeuralNet.h:823; TMVA::DNN::Settings::startTrainCyclevirtual void startTrainCycle()Definition NeuralNet.h:782; TMVA::DNN::Settings::convergenceStepssize_t convergenceSteps() consthow many steps until training is deemed to have convergedDefinition NeuralNet.h:766; TMVA::DNN::Settings::m_factorWeightDecaydouble m_factorWeightDecayDefinition NeuralNet.h:840; TMVA::DNN::Settings::factorWeightDecaydouble factorWeightDecay() constget the weight-decay factorDefinition NeuralNet.h:769; TMVA::DNN::Settings::count_mb_dEsize_t count_mb_dEDefinition NeuralNet.h:845; TMVA::DNN::Settings::m_useMultithreadingbool m_useMultithreadingDefinition NeuralNet.h:863; TMVA::DNN::Settings::count_mb_Esize_t count_mb_EDefinition NeuralNet.h:844; TMVA::DNN::Settings::existsbool exists(std::string histoName)for monitoringDefinition NeuralNet.h:825; TMVA::DNN::Settings::maxConvergenceCountsize_t maxConvergenceCount() constreturns the max convergence count so farDefinition NeuralNet.h:828; TMVA::DNN::Settings::padsvoid pads(int numPads)preparation for monitoringDefinition NeuralNet.h:818; TMVA::DNN::Settings::m_testRepetitionssize_t m_testRepetitionsDefinition NeuralNet.h:839; TMVA::DNN::Settings::fLearningRatedouble fLearningRateDefinition NeuralNet.h:852; TMVA::DNN::Settings::fMomentumdouble fMomentumDefinition NeuralNet.h:853; TMVA::DNN::Settings::batchSizesize_t batchSize() constmini-batch sizeDefinition NeuralNet.h:767; TMVA::DNN::Settings::computeResultvirtual void computeResult(const Net &, std::vector< double > &)callback for monitoring and loggingDefinition NeuralNet.h:809; TMVA::DNN::Settings::fMonitoringstd::shared_ptr< Monitoring > fMonitoringDefinition NeuralNet.h:865; TMVA::DNN::Settings::dropRepetitionssize_t dropRepetitions() constDefinition NeuralNet.h:761; ",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:76823,Energy Efficiency,monitor,monitoringDefinition,76823,"TMVA::DNN::Settings::startTrainCyclevirtual void startTrainCycle()Definition NeuralNet.h:782; TMVA::DNN::Settings::convergenceStepssize_t convergenceSteps() consthow many steps until training is deemed to have convergedDefinition NeuralNet.h:766; TMVA::DNN::Settings::m_factorWeightDecaydouble m_factorWeightDecayDefinition NeuralNet.h:840; TMVA::DNN::Settings::factorWeightDecaydouble factorWeightDecay() constget the weight-decay factorDefinition NeuralNet.h:769; TMVA::DNN::Settings::count_mb_dEsize_t count_mb_dEDefinition NeuralNet.h:845; TMVA::DNN::Settings::m_useMultithreadingbool m_useMultithreadingDefinition NeuralNet.h:863; TMVA::DNN::Settings::count_mb_Esize_t count_mb_EDefinition NeuralNet.h:844; TMVA::DNN::Settings::existsbool exists(std::string histoName)for monitoringDefinition NeuralNet.h:825; TMVA::DNN::Settings::maxConvergenceCountsize_t maxConvergenceCount() constreturns the max convergence count so farDefinition NeuralNet.h:828; TMVA::DNN::Settings::padsvoid pads(int numPads)preparation for monitoringDefinition NeuralNet.h:818; TMVA::DNN::Settings::m_testRepetitionssize_t m_testRepetitionsDefinition NeuralNet.h:839; TMVA::DNN::Settings::fLearningRatedouble fLearningRateDefinition NeuralNet.h:852; TMVA::DNN::Settings::fMomentumdouble fMomentumDefinition NeuralNet.h:853; TMVA::DNN::Settings::batchSizesize_t batchSize() constmini-batch sizeDefinition NeuralNet.h:767; TMVA::DNN::Settings::computeResultvirtual void computeResult(const Net &, std::vector< double > &)callback for monitoring and loggingDefinition NeuralNet.h:809; TMVA::DNN::Settings::fMonitoringstd::shared_ptr< Monitoring > fMonitoringDefinition NeuralNet.h:865; TMVA::DNN::Settings::dropRepetitionssize_t dropRepetitions() constDefinition NeuralNet.h:761; TMVA::DNN::Settings::createvoid create(std::string histoName, int bins, double min, double max)for monitoringDefinition NeuralNet.h:819; TMVA::DNN::Settings::fRepetitionsint fRepetitionsDefinition NeuralNet.h:854; TMVA::DNN::Settings::minErrors",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:77315,Energy Efficiency,monitor,monitoring,77315,"N::Settings::count_mb_dEsize_t count_mb_dEDefinition NeuralNet.h:845; TMVA::DNN::Settings::m_useMultithreadingbool m_useMultithreadingDefinition NeuralNet.h:863; TMVA::DNN::Settings::count_mb_Esize_t count_mb_EDefinition NeuralNet.h:844; TMVA::DNN::Settings::existsbool exists(std::string histoName)for monitoringDefinition NeuralNet.h:825; TMVA::DNN::Settings::maxConvergenceCountsize_t maxConvergenceCount() constreturns the max convergence count so farDefinition NeuralNet.h:828; TMVA::DNN::Settings::padsvoid pads(int numPads)preparation for monitoringDefinition NeuralNet.h:818; TMVA::DNN::Settings::m_testRepetitionssize_t m_testRepetitionsDefinition NeuralNet.h:839; TMVA::DNN::Settings::fLearningRatedouble fLearningRateDefinition NeuralNet.h:852; TMVA::DNN::Settings::fMomentumdouble fMomentumDefinition NeuralNet.h:853; TMVA::DNN::Settings::batchSizesize_t batchSize() constmini-batch sizeDefinition NeuralNet.h:767; TMVA::DNN::Settings::computeResultvirtual void computeResult(const Net &, std::vector< double > &)callback for monitoring and loggingDefinition NeuralNet.h:809; TMVA::DNN::Settings::fMonitoringstd::shared_ptr< Monitoring > fMonitoringDefinition NeuralNet.h:865; TMVA::DNN::Settings::dropRepetitionssize_t dropRepetitions() constDefinition NeuralNet.h:761; TMVA::DNN::Settings::createvoid create(std::string histoName, int bins, double min, double max)for monitoringDefinition NeuralNet.h:819; TMVA::DNN::Settings::fRepetitionsint fRepetitionsDefinition NeuralNet.h:854; TMVA::DNN::Settings::minErrorsize_t minError() constreturns the smallest error so farDefinition NeuralNet.h:829; TMVA::DNN::Settings::startTrainingvirtual void startTraining()Definition NeuralNet.h:795; TMVA::DNN::Settings::m_maxConvergenceCountsize_t m_maxConvergenceCountDefinition NeuralNet.h:858; TMVA::DNN::Settings::startTestCyclevirtual void startTestCycle()callback for monitoring and logggingDefinition NeuralNet.h:804; TMVA::DNN::SteepestSteepest Gradient Descent algorithm (SGD)Definition Neur",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:77659,Energy Efficiency,monitor,monitoringDefinition,77659,"A::DNN::Settings::maxConvergenceCountsize_t maxConvergenceCount() constreturns the max convergence count so farDefinition NeuralNet.h:828; TMVA::DNN::Settings::padsvoid pads(int numPads)preparation for monitoringDefinition NeuralNet.h:818; TMVA::DNN::Settings::m_testRepetitionssize_t m_testRepetitionsDefinition NeuralNet.h:839; TMVA::DNN::Settings::fLearningRatedouble fLearningRateDefinition NeuralNet.h:852; TMVA::DNN::Settings::fMomentumdouble fMomentumDefinition NeuralNet.h:853; TMVA::DNN::Settings::batchSizesize_t batchSize() constmini-batch sizeDefinition NeuralNet.h:767; TMVA::DNN::Settings::computeResultvirtual void computeResult(const Net &, std::vector< double > &)callback for monitoring and loggingDefinition NeuralNet.h:809; TMVA::DNN::Settings::fMonitoringstd::shared_ptr< Monitoring > fMonitoringDefinition NeuralNet.h:865; TMVA::DNN::Settings::dropRepetitionssize_t dropRepetitions() constDefinition NeuralNet.h:761; TMVA::DNN::Settings::createvoid create(std::string histoName, int bins, double min, double max)for monitoringDefinition NeuralNet.h:819; TMVA::DNN::Settings::fRepetitionsint fRepetitionsDefinition NeuralNet.h:854; TMVA::DNN::Settings::minErrorsize_t minError() constreturns the smallest error so farDefinition NeuralNet.h:829; TMVA::DNN::Settings::startTrainingvirtual void startTraining()Definition NeuralNet.h:795; TMVA::DNN::Settings::m_maxConvergenceCountsize_t m_maxConvergenceCountDefinition NeuralNet.h:858; TMVA::DNN::Settings::startTestCyclevirtual void startTestCycle()callback for monitoring and logggingDefinition NeuralNet.h:804; TMVA::DNN::SteepestSteepest Gradient Descent algorithm (SGD)Definition NeuralNet.h:334; TMVA::DNN::Steepest::m_repetitionssize_t m_repetitionsDefinition NeuralNet.h:337; TMVA::DNN::Steepest::m_betadouble m_betainternal parameter (momentum)Definition NeuralNet.h:372; TMVA::DNN::Steepest::m_localGradientsstd::vector< double > m_localGradientslocal gradients for reuse in thread.Definition NeuralNet.h:376; TMVA::DNN::St",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:78152,Energy Efficiency,monitor,monitoring,78152,"hSizesize_t batchSize() constmini-batch sizeDefinition NeuralNet.h:767; TMVA::DNN::Settings::computeResultvirtual void computeResult(const Net &, std::vector< double > &)callback for monitoring and loggingDefinition NeuralNet.h:809; TMVA::DNN::Settings::fMonitoringstd::shared_ptr< Monitoring > fMonitoringDefinition NeuralNet.h:865; TMVA::DNN::Settings::dropRepetitionssize_t dropRepetitions() constDefinition NeuralNet.h:761; TMVA::DNN::Settings::createvoid create(std::string histoName, int bins, double min, double max)for monitoringDefinition NeuralNet.h:819; TMVA::DNN::Settings::fRepetitionsint fRepetitionsDefinition NeuralNet.h:854; TMVA::DNN::Settings::minErrorsize_t minError() constreturns the smallest error so farDefinition NeuralNet.h:829; TMVA::DNN::Settings::startTrainingvirtual void startTraining()Definition NeuralNet.h:795; TMVA::DNN::Settings::m_maxConvergenceCountsize_t m_maxConvergenceCountDefinition NeuralNet.h:858; TMVA::DNN::Settings::startTestCyclevirtual void startTestCycle()callback for monitoring and logggingDefinition NeuralNet.h:804; TMVA::DNN::SteepestSteepest Gradient Descent algorithm (SGD)Definition NeuralNet.h:334; TMVA::DNN::Steepest::m_repetitionssize_t m_repetitionsDefinition NeuralNet.h:337; TMVA::DNN::Steepest::m_betadouble m_betainternal parameter (momentum)Definition NeuralNet.h:372; TMVA::DNN::Steepest::m_localGradientsstd::vector< double > m_localGradientslocal gradients for reuse in thread.Definition NeuralNet.h:376; TMVA::DNN::Steepest::m_prevGradientsstd::vector< double > m_prevGradientsvector remembers the gradients of the previous stepDefinition NeuralNet.h:373; TMVA::DNN::Steepest::m_alphadouble m_alphainternal parameter (learningRate)Definition NeuralNet.h:371; TMVA::DNN::Steepest::m_localWeightsstd::vector< double > m_localWeightslocal weights for reuse in thread.Definition NeuralNet.h:375; TMVA::DNN::Steepest::operator()double operator()(Function &fitnessFunction, Weights &weights, PassThrough &passThrough)operator to call",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:13674,Modifiability,layers,layers,13674," begin of a vector which holds the values of the nodes of the neural net; 455 * \param itInputEnd iterator to the end of a vector which holdsd the values of the nodes of the neural net; 456 * \param eModeOutput indicates a potential tranformation of the output values before further computation; 457 * DIRECT does not further transformation; SIGMOID applies a sigmoid transformation to each; 458 * output value (to create a probability); SOFTMAX applies a softmax transformation to all; 459 * output values (mutually exclusive probability); 460 */; 461 LayerData (const_iterator_type itInputBegin, const_iterator_type itInputEnd, ModeOutputValues eModeOutput = ModeOutputValues::DIRECT);; 462 ; 463 ; 464 /*! \brief c'tor of LayerData; 465 *; 466 * C'tor of LayerData for the input layer; 467 *; 468 * \param inputSize input size of this layer; 469 */; 470 LayerData (size_t inputSize);; 471 ~LayerData () {}; 472 ; 473 ; 474 /*! \brief c'tor of LayerData; 475 *; 476 * C'tor of LayerData for all layers which are not the input layer; Used during the training of the DNN; 477 *; 478 * \param size size of the layer; 479 * \param itWeightBegin indicates the start of the weights for this layer on the weight vector; 480 * \param itGradientBegin indicates the start of the gradients for this layer on the gradient vector; 481 * \param activationFunction indicates activation functions for this layer; 482 * \param inverseActivationFunction indicates the inverse activation functions for this layer; 483 * \param eModeOutput indicates a potential tranformation of the output values before further computation; 484 * DIRECT does not further transformation; SIGMOID applies a sigmoid transformation to each; 485 * output value (to create a probability); SOFTMAX applies a softmax transformation to all; 486 * output values (mutually exclusive probability); 487 */; 488 LayerData (size_t size,; 489 const_iterator_type itWeightBegin,; 490 iterator_type itGradientBegin,; 491 std::shared_ptr<std::function<do",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:14937,Modifiability,layers,layers,14937,"s the start of the gradients for this layer on the gradient vector; 481 * \param activationFunction indicates activation functions for this layer; 482 * \param inverseActivationFunction indicates the inverse activation functions for this layer; 483 * \param eModeOutput indicates a potential tranformation of the output values before further computation; 484 * DIRECT does not further transformation; SIGMOID applies a sigmoid transformation to each; 485 * output value (to create a probability); SOFTMAX applies a softmax transformation to all; 486 * output values (mutually exclusive probability); 487 */; 488 LayerData (size_t size,; 489 const_iterator_type itWeightBegin,; 490 iterator_type itGradientBegin,; 491 std::shared_ptr<std::function<double(double)>> activationFunction,; 492 std::shared_ptr<std::function<double(double)>> inverseActivationFunction,; 493 ModeOutputValues eModeOutput = ModeOutputValues::DIRECT);; 494 ; 495 /*! \brief c'tor of LayerData; 496 *; 497 * C'tor of LayerData for all layers which are not the input layer; Used during the application of the DNN; 498 *; 499 * \param size size of the layer; 500 * \param itWeightBegin indicates the start of the weights for this layer on the weight vector; 501 * \param activationFunction indicates the activation function for this layer; 502 * \param eModeOutput indicates a potential tranformation of the output values before further computation; 503 * DIRECT does not further transformation; SIGMOID applies a sigmoid transformation to each; 504 * output value (to create a probability); SOFTMAX applies a softmax transformation to all; 505 * output values (mutually exclusive probability); 506 */; 507 LayerData (size_t size, const_iterator_type itWeightBegin,; 508 std::shared_ptr<std::function<double(double)>> activationFunction,; 509 ModeOutputValues eModeOutput = ModeOutputValues::DIRECT);; 510 ; 511 /*! \brief copy c'tor of LayerData; 512 *; 513 *; 514 */; 515 LayerData (const LayerData& other); 516 : m_size (other.",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:26561,Modifiability,config,configuration,26561," LAYERDATA& prevLayerData, LAYERDATA& currLayerData, double weightDecay, EnumRegularization regularization);; 722 ; 723 ; 724 ; 725 /*! \brief Settings for the training of the neural net; 726 *; 727 *; 728 */; 729 class Settings; 730 {; 731 public:; 732 ; 733 /*! \brief c'tor; 734 *; 735 *; 736 */; 737 Settings (TString name,; 738 size_t _convergenceSteps = 15, size_t _batchSize = 10, size_t _testRepetitions = 7,; 739 double _factorWeightDecay = 1e-5, TMVA::DNN::EnumRegularization _regularization = TMVA::DNN::EnumRegularization::NONE,; 740 MinimizerType _eMinimizerType = MinimizerType::fSteepest,; 741 double _learningRate = 1e-5, double _momentum = 0.3,; 742 int _repetitions = 3,; 743 bool _multithreading = true);; 744 ; 745 /*! \brief d'tor; 746 *; 747 *; 748 */; 749 virtual ~Settings ();; 750 ; 751 ; 752 /*! \brief set the drop-out configuration (layer-wise); 753 *; 754 * \param begin begin of an array or vector denoting the drop-out probabilities for each layer; 755 * \param end end of an array or vector denoting the drop-out probabilities for each layer; 756 * \param _dropRepetitions denotes after how many repetitions the drop-out setting (which nodes are dropped out exactly) is changed; 757 */; 758 template <typename Iterator>; 759 void setDropOut (Iterator begin, Iterator end, size_t _dropRepetitions) { m_dropOut.assign (begin, end); m_dropRepetitions = _dropRepetitions; }; 760 ; 761 size_t dropRepetitions () const { return m_dropRepetitions; }; 762 const std::vector<double>& dropFractions () const { return m_dropOut; }; 763 ; 764 void setMonitoring (std::shared_ptr<Monitoring> ptrMonitoring) { fMonitoring = ptrMonitoring; } ///< prepared for monitoring; 765 ; 766 size_t convergenceSteps () const { return m_convergenceSteps; } ///< how many steps until training is deemed to have converged; 767 size_t batchSize () const { return m_batchSize; } ///< mini-batch size; 768 size_t testRepetitions () const { return m_testRepetitions; } ///< how often is the test data",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:38183,Modifiability,layers,layers,38183,"round->SetBit (TH1::kCanRebin); */; 981 /* } */; 982 ; 983 /* fMonitoring->ProcessEvents (); */; 984 /* } */; 985 ; 986 void testSample (double error, double output, double target, double weight);; 987 ; 988 virtual void startTestCycle ();; 989 virtual void endTestCycle ();; 990 ; 991 ; 992 void setWeightSums (double sumOfSigWeights, double sumOfBkgWeights);; 993 void setResultComputation (std::string _fileNameNetConfig, std::string _fileNameResult, std::vector<Pattern>* _resultPatternContainer);; 994 ; 995 std::vector<double> m_input;; 996 std::vector<double> m_output;; 997 std::vector<double> m_targets;; 998 std::vector<double> m_weights;; 999 ; 1000 std::vector<double> m_ams;; 1001 std::vector<double> m_significances;; 1002 ; 1003 ; 1004 double m_sumOfSigWeights;; 1005 double m_sumOfBkgWeights;; 1006 size_t m_scaleToNumEvents;; 1007 ; 1008 double m_cutValue;; 1009 std::vector<Pattern>* m_pResultPatternContainer;; 1010 std::string m_fileNameResult;; 1011 std::string m_fileNameNetConfig;; 1012 ; 1013 ; 1014 /* TH2F* m_histROC; */; 1015 /* TH2F* m_histSignificance; */; 1016 ; 1017 /* TH1F* m_histError; */; 1018 /* TH1F* m_histOutputSignal; */; 1019 /* TH1F* m_histOutputBackground; */; 1020 };; 1021 ; 1022 ; 1023 ; 1024 ; 1025 ; 1026 ; 1027 ; 1028 ///< used to distinguish between different function signatures; 1029 enum class ModeOutput; 1030 {; 1031 FETCH; 1032 };; 1033 ; 1034 /*! \brief error functions to be chosen from; 1035 *; 1036 *; 1037 */; 1038 enum class ModeErrorFunction; 1039 {; 1040 SUMOFSQUARES = 'S',; 1041 CROSSENTROPY = 'C',; 1042 CROSSENTROPY_MUTUALEXCLUSIVE = 'M'; 1043 };; 1044 ; 1045 /*! \brief weight initialization strategies to be chosen from; 1046 *; 1047 *; 1048 */; 1049 enum class WeightInitializationStrategy; 1050 {; 1051 XAVIER, TEST, LAYERSIZE, XAVIERUNIFORM; 1052 };; 1053 ; 1054 ; 1055 ; 1056 /*! \brief neural net; 1057 *; 1058 * holds the structure of all layers and some data for the whole net; 1059 * does not know the layer data though (i.",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:39696,Modifiability,config,configuration,39696,"081 /*! \brief d'tor; 1082 *; 1083 *; 1084 */; 1085 Net (const Net& other); 1086 : m_eErrorFunction (other.m_eErrorFunction); 1087 , m_sizeInput (other.m_sizeInput); 1088 , m_layers (other.m_layers); 1089 {; 1090 }; 1091 ; 1092 void setInputSize (size_t sizeInput) { m_sizeInput = sizeInput; } ///< set the input size of the DNN; 1093 void setOutputSize (size_t sizeOutput) { m_sizeOutput = sizeOutput; } ///< set the output size of the DNN; 1094 void addLayer (Layer& layer) { m_layers.push_back (layer); } ///< add a layer (layout); 1095 void addLayer (Layer&& layer) { m_layers.push_back (layer); }; 1096 void setErrorFunction (ModeErrorFunction eErrorFunction) { m_eErrorFunction = eErrorFunction; } ///< which error function is to be used; 1097 ; 1098 size_t inputSize () const { return m_sizeInput; } ///< input size of the DNN; 1099 size_t outputSize () const { return m_sizeOutput; } ///< output size of the DNN; 1100 ; 1101 /*! \brief set the drop out configuration; 1102 *; 1103 *; 1104 */; 1105 template <typename WeightsType, typename DropProbabilities>; 1106 void dropOutWeightFactor (WeightsType& weights,; 1107 const DropProbabilities& drops,; 1108 bool inverse = false);; 1109 ; 1110 /*! \brief start the training; 1111 *; 1112 * \param weights weight vector; 1113 * \param trainPattern training pattern; 1114 * \param testPattern test pattern; 1115 * \param minimizer use this minimizer for training (e.g. SGD); 1116 * \param settings settings used for this training run; 1117 */; 1118 template <typename Minimizer>; 1119 double train (std::vector<double>& weights,; 1120 std::vector<Pattern>& trainPattern,; 1121 const std::vector<Pattern>& testPattern,; 1122 Minimizer& minimizer,; 1123 Settings& settings);; 1124 ; 1125 /*! \brief pre-training for future use; 1126 *; 1127 *; 1128 */; 1129 template <typename Minimizer>; 1130 void preTrain (std::vector<double>& weights,; 1131 std::vector<Pattern>& trainPattern,; 1132 const std::vector<Pattern>& testPattern,; 1133 Minimizer& mini",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:41140,Modifiability,config,configuration,41140,,MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:43163,Modifiability,layers,layers,43163,"ename PassThrough, typename OutContainer>; 1161 double operator() (PassThrough& settingsAndBatch, const Weights& weights, ModeOutput eFetch, OutContainer& outputContainer) const; ///< execute computation of the DNN for one mini-batch; helper function; 1162 ; 1163 template <typename Weights, typename Gradients, typename PassThrough>; 1164 double operator() (PassThrough& settingsAndBatch, Weights& weights, Gradients& gradients) const; ///< execute computation of the DNN for one mini-batch (used by the minimizer); returns gradients as well; 1165 ; 1166 template <typename Weights, typename Gradients, typename PassThrough, typename OutContainer>; 1167 double operator() (PassThrough& settingsAndBatch, Weights& weights, Gradients& gradients, ModeOutput eFetch, OutContainer& outputContainer) const;; 1168 ; 1169 ; 1170 template <typename LayerContainer, typename DropContainer, typename ItWeight, typename ItGradient>; 1171 std::vector<std::vector<LayerData>> prepareLayerData (LayerContainer& layers,; 1172 Batch& batch,; 1173 const DropContainer& dropContainer,; 1174 ItWeight itWeightBegin,; 1175 ItWeight itWeightEnd,; 1176 ItGradient itGradientBegin,; 1177 ItGradient itGradientEnd,; 1178 size_t& totalNumWeights) const;; 1179 ; 1180 template <typename LayerContainer>; 1181 void forwardPattern (const LayerContainer& _layers,; 1182 std::vector<LayerData>& layerData) const;; 1183 ; 1184 ; 1185 template <typename LayerContainer, typename LayerPatternContainer>; 1186 void forwardBatch (const LayerContainer& _layers,; 1187 LayerPatternContainer& layerPatternData,; 1188 std::vector<double>& valuesMean,; 1189 std::vector<double>& valuesStdDev,; 1190 size_t trainFromLayer) const;; 1191 ; 1192 template <typename OutputContainer>; 1193 void fetchOutput (const LayerData& lastLayerData, OutputContainer& outputContainer) const;; 1194 ; 1195 template <typename OutputContainer>; 1196 void fetchOutput (const std::vector<LayerData>& layerPatternData, OutputContainer& outputContainer) const;; 119",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:44926,Modifiability,layers,layers,44926,"191 ; 1192 template <typename OutputContainer>; 1193 void fetchOutput (const LayerData& lastLayerData, OutputContainer& outputContainer) const;; 1194 ; 1195 template <typename OutputContainer>; 1196 void fetchOutput (const std::vector<LayerData>& layerPatternData, OutputContainer& outputContainer) const;; 1197 ; 1198 ; 1199 template <typename ItWeight>; 1200 std::tuple</*sumError*/double,/*sumWeights*/double> computeError (const Settings& settings,; 1201 std::vector<LayerData>& lastLayerData,; 1202 Batch& batch,; 1203 ItWeight itWeightBegin,; 1204 ItWeight itWeightEnd) const;; 1205 ; 1206 template <typename Settings>; 1207 void backPropagate (std::vector<std::vector<LayerData>>& layerPatternData,; 1208 const Settings& settings,; 1209 size_t trainFromLayer,; 1210 size_t totalNumWeights) const;; 1211 ; 1212 ; 1213 ; 1214 /*! \brief main NN computation function; 1215 *; 1216 *; 1217 */; 1218 template <typename LayerContainer, typename PassThrough, typename ItWeight, typename ItGradient, typename OutContainer>; 1219 double forward_backward (LayerContainer& layers, PassThrough& settingsAndBatch,; 1220 ItWeight itWeightBegin, ItWeight itWeightEnd,; 1221 ItGradient itGradientBegin, ItGradient itGradientEnd,; 1222 size_t trainFromLayer,; 1223 OutContainer& outputContainer, bool fetchOutput) const;; 1224 ; 1225 ; 1226 ; 1227 double E ();; 1228 void dE ();; 1229 ; 1230 ; 1231 /*! \brief computes the error of the DNN; 1232 *; 1233 *; 1234 */; 1235 template <typename Container, typename ItWeight>; 1236 double errorFunction (LayerData& layerData,; 1237 Container truth,; 1238 ItWeight itWeight,; 1239 ItWeight itWeightEnd,; 1240 double patternWeight,; 1241 double factorWeightDecay,; 1242 EnumRegularization eRegularization) const;; 1243 ; 1244 ; 1245 const std::vector<Layer>& layers () const { return m_layers; } ///< returns the layers (structure); 1246 std::vector<Layer>& layers () { return m_layers; } ///< returns the layers (structure); 1247 ; 1248 void removeLayer () { m_layers.",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:45648,Modifiability,layers,layers,45648,"191 ; 1192 template <typename OutputContainer>; 1193 void fetchOutput (const LayerData& lastLayerData, OutputContainer& outputContainer) const;; 1194 ; 1195 template <typename OutputContainer>; 1196 void fetchOutput (const std::vector<LayerData>& layerPatternData, OutputContainer& outputContainer) const;; 1197 ; 1198 ; 1199 template <typename ItWeight>; 1200 std::tuple</*sumError*/double,/*sumWeights*/double> computeError (const Settings& settings,; 1201 std::vector<LayerData>& lastLayerData,; 1202 Batch& batch,; 1203 ItWeight itWeightBegin,; 1204 ItWeight itWeightEnd) const;; 1205 ; 1206 template <typename Settings>; 1207 void backPropagate (std::vector<std::vector<LayerData>>& layerPatternData,; 1208 const Settings& settings,; 1209 size_t trainFromLayer,; 1210 size_t totalNumWeights) const;; 1211 ; 1212 ; 1213 ; 1214 /*! \brief main NN computation function; 1215 *; 1216 *; 1217 */; 1218 template <typename LayerContainer, typename PassThrough, typename ItWeight, typename ItGradient, typename OutContainer>; 1219 double forward_backward (LayerContainer& layers, PassThrough& settingsAndBatch,; 1220 ItWeight itWeightBegin, ItWeight itWeightEnd,; 1221 ItGradient itGradientBegin, ItGradient itGradientEnd,; 1222 size_t trainFromLayer,; 1223 OutContainer& outputContainer, bool fetchOutput) const;; 1224 ; 1225 ; 1226 ; 1227 double E ();; 1228 void dE ();; 1229 ; 1230 ; 1231 /*! \brief computes the error of the DNN; 1232 *; 1233 *; 1234 */; 1235 template <typename Container, typename ItWeight>; 1236 double errorFunction (LayerData& layerData,; 1237 Container truth,; 1238 ItWeight itWeight,; 1239 ItWeight itWeightEnd,; 1240 double patternWeight,; 1241 double factorWeightDecay,; 1242 EnumRegularization eRegularization) const;; 1243 ; 1244 ; 1245 const std::vector<Layer>& layers () const { return m_layers; } ///< returns the layers (structure); 1246 std::vector<Layer>& layers () { return m_layers; } ///< returns the layers (structure); 1247 ; 1248 void removeLayer () { m_layers.",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:45702,Modifiability,layers,layers,45702,"191 ; 1192 template <typename OutputContainer>; 1193 void fetchOutput (const LayerData& lastLayerData, OutputContainer& outputContainer) const;; 1194 ; 1195 template <typename OutputContainer>; 1196 void fetchOutput (const std::vector<LayerData>& layerPatternData, OutputContainer& outputContainer) const;; 1197 ; 1198 ; 1199 template <typename ItWeight>; 1200 std::tuple</*sumError*/double,/*sumWeights*/double> computeError (const Settings& settings,; 1201 std::vector<LayerData>& lastLayerData,; 1202 Batch& batch,; 1203 ItWeight itWeightBegin,; 1204 ItWeight itWeightEnd) const;; 1205 ; 1206 template <typename Settings>; 1207 void backPropagate (std::vector<std::vector<LayerData>>& layerPatternData,; 1208 const Settings& settings,; 1209 size_t trainFromLayer,; 1210 size_t totalNumWeights) const;; 1211 ; 1212 ; 1213 ; 1214 /*! \brief main NN computation function; 1215 *; 1216 *; 1217 */; 1218 template <typename LayerContainer, typename PassThrough, typename ItWeight, typename ItGradient, typename OutContainer>; 1219 double forward_backward (LayerContainer& layers, PassThrough& settingsAndBatch,; 1220 ItWeight itWeightBegin, ItWeight itWeightEnd,; 1221 ItGradient itGradientBegin, ItGradient itGradientEnd,; 1222 size_t trainFromLayer,; 1223 OutContainer& outputContainer, bool fetchOutput) const;; 1224 ; 1225 ; 1226 ; 1227 double E ();; 1228 void dE ();; 1229 ; 1230 ; 1231 /*! \brief computes the error of the DNN; 1232 *; 1233 *; 1234 */; 1235 template <typename Container, typename ItWeight>; 1236 double errorFunction (LayerData& layerData,; 1237 Container truth,; 1238 ItWeight itWeight,; 1239 ItWeight itWeightEnd,; 1240 double patternWeight,; 1241 double factorWeightDecay,; 1242 EnumRegularization eRegularization) const;; 1243 ; 1244 ; 1245 const std::vector<Layer>& layers () const { return m_layers; } ///< returns the layers (structure); 1246 std::vector<Layer>& layers () { return m_layers; } ///< returns the layers (structure); 1247 ; 1248 void removeLayer () { m_layers.",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:45747,Modifiability,layers,layers,45747,"191 ; 1192 template <typename OutputContainer>; 1193 void fetchOutput (const LayerData& lastLayerData, OutputContainer& outputContainer) const;; 1194 ; 1195 template <typename OutputContainer>; 1196 void fetchOutput (const std::vector<LayerData>& layerPatternData, OutputContainer& outputContainer) const;; 1197 ; 1198 ; 1199 template <typename ItWeight>; 1200 std::tuple</*sumError*/double,/*sumWeights*/double> computeError (const Settings& settings,; 1201 std::vector<LayerData>& lastLayerData,; 1202 Batch& batch,; 1203 ItWeight itWeightBegin,; 1204 ItWeight itWeightEnd) const;; 1205 ; 1206 template <typename Settings>; 1207 void backPropagate (std::vector<std::vector<LayerData>>& layerPatternData,; 1208 const Settings& settings,; 1209 size_t trainFromLayer,; 1210 size_t totalNumWeights) const;; 1211 ; 1212 ; 1213 ; 1214 /*! \brief main NN computation function; 1215 *; 1216 *; 1217 */; 1218 template <typename LayerContainer, typename PassThrough, typename ItWeight, typename ItGradient, typename OutContainer>; 1219 double forward_backward (LayerContainer& layers, PassThrough& settingsAndBatch,; 1220 ItWeight itWeightBegin, ItWeight itWeightEnd,; 1221 ItGradient itGradientBegin, ItGradient itGradientEnd,; 1222 size_t trainFromLayer,; 1223 OutContainer& outputContainer, bool fetchOutput) const;; 1224 ; 1225 ; 1226 ; 1227 double E ();; 1228 void dE ();; 1229 ; 1230 ; 1231 /*! \brief computes the error of the DNN; 1232 *; 1233 *; 1234 */; 1235 template <typename Container, typename ItWeight>; 1236 double errorFunction (LayerData& layerData,; 1237 Container truth,; 1238 ItWeight itWeight,; 1239 ItWeight itWeightEnd,; 1240 double patternWeight,; 1241 double factorWeightDecay,; 1242 EnumRegularization eRegularization) const;; 1243 ; 1244 ; 1245 const std::vector<Layer>& layers () const { return m_layers; } ///< returns the layers (structure); 1246 std::vector<Layer>& layers () { return m_layers; } ///< returns the layers (structure); 1247 ; 1248 void removeLayer () { m_layers.",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:45795,Modifiability,layers,layers,45795,"191 ; 1192 template <typename OutputContainer>; 1193 void fetchOutput (const LayerData& lastLayerData, OutputContainer& outputContainer) const;; 1194 ; 1195 template <typename OutputContainer>; 1196 void fetchOutput (const std::vector<LayerData>& layerPatternData, OutputContainer& outputContainer) const;; 1197 ; 1198 ; 1199 template <typename ItWeight>; 1200 std::tuple</*sumError*/double,/*sumWeights*/double> computeError (const Settings& settings,; 1201 std::vector<LayerData>& lastLayerData,; 1202 Batch& batch,; 1203 ItWeight itWeightBegin,; 1204 ItWeight itWeightEnd) const;; 1205 ; 1206 template <typename Settings>; 1207 void backPropagate (std::vector<std::vector<LayerData>>& layerPatternData,; 1208 const Settings& settings,; 1209 size_t trainFromLayer,; 1210 size_t totalNumWeights) const;; 1211 ; 1212 ; 1213 ; 1214 /*! \brief main NN computation function; 1215 *; 1216 *; 1217 */; 1218 template <typename LayerContainer, typename PassThrough, typename ItWeight, typename ItGradient, typename OutContainer>; 1219 double forward_backward (LayerContainer& layers, PassThrough& settingsAndBatch,; 1220 ItWeight itWeightBegin, ItWeight itWeightEnd,; 1221 ItGradient itGradientBegin, ItGradient itGradientEnd,; 1222 size_t trainFromLayer,; 1223 OutContainer& outputContainer, bool fetchOutput) const;; 1224 ; 1225 ; 1226 ; 1227 double E ();; 1228 void dE ();; 1229 ; 1230 ; 1231 /*! \brief computes the error of the DNN; 1232 *; 1233 *; 1234 */; 1235 template <typename Container, typename ItWeight>; 1236 double errorFunction (LayerData& layerData,; 1237 Container truth,; 1238 ItWeight itWeight,; 1239 ItWeight itWeightEnd,; 1240 double patternWeight,; 1241 double factorWeightDecay,; 1242 EnumRegularization eRegularization) const;; 1243 ; 1244 ; 1245 const std::vector<Layer>& layers () const { return m_layers; } ///< returns the layers (structure); 1246 std::vector<Layer>& layers () { return m_layers; } ///< returns the layers (structure); 1247 ; 1248 void removeLayer () { m_layers.",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:46789,Modifiability,variab,variables,46789,"ers (structure); 1247 ; 1248 void removeLayer () { m_layers.pop_back (); } ///< remove one layer; 1249 ; 1250 ; 1251 void clear () ///< clear one layer; 1252 {; 1253 m_layers.clear ();; 1254 m_eErrorFunction = ModeErrorFunction::SUMOFSQUARES;; 1255 }; 1256 ; 1257 ; 1258 template <typename OutIterator>; 1259 void initializeWeights (WeightInitializationStrategy eInitStrategy,; 1260 OutIterator itWeight); ///< initialize the weights with the given strategy; 1261 ; 1262 protected:; 1263 ; 1264 void fillDropContainer (DropContainer& dropContainer, double dropFraction, size_t numNodes) const; ///< prepare the drop-out-container (select the nodes which are to be dropped out); 1265 ; 1266 ; 1267 private:; 1268 ; 1269 ModeErrorFunction m_eErrorFunction; ///< denotes the error function; 1270 size_t m_sizeInput; ///< input size of this DNN; 1271 size_t m_sizeOutput; ///< output size of this DNN; 1272 std::vector<Layer> m_layers; ///< layer-structure-data; 1273 ; 1274 protected:; 1275 // variables for JsMVA (interactive training in jupyter notebook); 1276 IPythonInteractive *fInteractive = nullptr;; 1277 bool * fExitFromTraining = nullptr;; 1278 UInt_t *fIPyMaxIter = nullptr, *fIPyCurrentIter = nullptr;; 1279 ; 1280 public:; 1281 ; 1282 // setup ipython interactive variables; 1283 void SetIpythonInteractive(IPythonInteractive* fI, bool* fE, UInt_t *M, UInt_t *C){; 1284 fInteractive = fI;; 1285 fExitFromTraining = fE;; 1286 fIPyMaxIter = M;; 1287 fIPyCurrentIter = C;; 1288 }; 1289 };; 1290 ; 1291 ; 1292 ; 1293 ; 1294typedef std::tuple<Settings&, Batch&, DropContainer&> pass_through_type;; 1295 ; 1296 ; 1297 ; 1298 ; 1299 ; 1300 ; 1301 ; 1302 } // namespace DNN; 1303} // namespace TMVA; 1304 ; 1305 ; 1306// include the implementations (in header file, because they are templated); 1307#include ""TMVA/NeuralNet.icc""; 1308 ; 1309#endif; 1310 ; Monitoring.h; NeuralNet.icc; Pattern.h; R#define R(a, b, c, d, e, f, g, h, i)Definition RSha256.hxx:110; e#define e(i)Definition RSha256.hxx:10",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:47072,Modifiability,variab,variables,47072,"ers (structure); 1247 ; 1248 void removeLayer () { m_layers.pop_back (); } ///< remove one layer; 1249 ; 1250 ; 1251 void clear () ///< clear one layer; 1252 {; 1253 m_layers.clear ();; 1254 m_eErrorFunction = ModeErrorFunction::SUMOFSQUARES;; 1255 }; 1256 ; 1257 ; 1258 template <typename OutIterator>; 1259 void initializeWeights (WeightInitializationStrategy eInitStrategy,; 1260 OutIterator itWeight); ///< initialize the weights with the given strategy; 1261 ; 1262 protected:; 1263 ; 1264 void fillDropContainer (DropContainer& dropContainer, double dropFraction, size_t numNodes) const; ///< prepare the drop-out-container (select the nodes which are to be dropped out); 1265 ; 1266 ; 1267 private:; 1268 ; 1269 ModeErrorFunction m_eErrorFunction; ///< denotes the error function; 1270 size_t m_sizeInput; ///< input size of this DNN; 1271 size_t m_sizeOutput; ///< output size of this DNN; 1272 std::vector<Layer> m_layers; ///< layer-structure-data; 1273 ; 1274 protected:; 1275 // variables for JsMVA (interactive training in jupyter notebook); 1276 IPythonInteractive *fInteractive = nullptr;; 1277 bool * fExitFromTraining = nullptr;; 1278 UInt_t *fIPyMaxIter = nullptr, *fIPyCurrentIter = nullptr;; 1279 ; 1280 public:; 1281 ; 1282 // setup ipython interactive variables; 1283 void SetIpythonInteractive(IPythonInteractive* fI, bool* fE, UInt_t *M, UInt_t *C){; 1284 fInteractive = fI;; 1285 fExitFromTraining = fE;; 1286 fIPyMaxIter = M;; 1287 fIPyCurrentIter = C;; 1288 }; 1289 };; 1290 ; 1291 ; 1292 ; 1293 ; 1294typedef std::tuple<Settings&, Batch&, DropContainer&> pass_through_type;; 1295 ; 1296 ; 1297 ; 1298 ; 1299 ; 1300 ; 1301 ; 1302 } // namespace DNN; 1303} // namespace TMVA; 1304 ; 1305 ; 1306// include the implementations (in header file, because they are templated); 1307#include ""TMVA/NeuralNet.icc""; 1308 ; 1309#endif; 1310 ; Monitoring.h; NeuralNet.icc; Pattern.h; R#define R(a, b, c, d, e, f, g, h, i)Definition RSha256.hxx:110; e#define e(i)Definition RSha256.hxx:10",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:64641,Modifiability,layers,layersstd,64641,"T value, double weight=1.0)Definition NeuralNet.h:93; TMVA::DNN::MeanVariance::stdDev_corrdouble stdDev_corr() constDefinition NeuralNet.h:144; TMVA::DNN::MeanVariance::weightsdouble weights() constDefinition NeuralNet.h:125; TMVA::DNN::MeanVariance::m_meandouble m_meanDefinition NeuralNet.h:150; TMVA::DNN::MeanVariance::m_nsize_t m_nDefinition NeuralNet.h:148; TMVA::DNN::MeanVariance::m_squareddouble m_squaredDefinition NeuralNet.h:151; TMVA::DNN::MeanVariance::m_sumWeightsdouble m_sumWeightsDefinition NeuralNet.h:149; TMVA::DNN::MeanVariance::addvoid add(ITERATOR itBegin, ITERATOR itEnd)Definition NeuralNet.h:116; TMVA::DNN::MeanVariance::vardouble var() constDefinition NeuralNet.h:127; TMVA::DNN::MeanVariance::stdDevdouble stdDev() constDefinition NeuralNet.h:145; TMVA::DNN::Netneural netDefinition NeuralNet.h:1062; TMVA::DNN::Net::setInputSizevoid setInputSize(size_t sizeInput)set the input size of the DNNDefinition NeuralNet.h:1092; TMVA::DNN::Net::layersstd::vector< Layer > & layers()returns the layers (structure)Definition NeuralNet.h:1246; TMVA::DNN::Net::forwardBatchvoid forwardBatch(const LayerContainer &_layers, LayerPatternContainer &layerPatternData, std::vector< double > &valuesMean, std::vector< double > &valuesStdDev, size_t trainFromLayer) constDefinition NeuralNet.icc:1240; TMVA::DNN::Net::NetNet(const Net &other)d'torDefinition NeuralNet.h:1085; TMVA::DNN::Net::fExitFromTrainingbool * fExitFromTrainingDefinition NeuralNet.h:1277; TMVA::DNN::Net::NetNet()c'torDefinition NeuralNet.h:1074; TMVA::DNN::Net::m_layersstd::vector< Layer > m_layerslayer-structure-dataDefinition NeuralNet.h:1272; TMVA::DNN::Net::fIPyMaxIterUInt_t * fIPyMaxIterDefinition NeuralNet.h:1278; TMVA::DNN::Net::SetIpythonInteractivevoid SetIpythonInteractive(IPythonInteractive *fI, bool *fE, UInt_t *M, UInt_t *C)Definition NeuralNet.h:1283; TMVA::DNN::Net::computestd::vector< double > compute(const std::vector< double > &input, const Weights &weights) constcompute the net with the ",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:64670,Modifiability,layers,layers,64670,"T value, double weight=1.0)Definition NeuralNet.h:93; TMVA::DNN::MeanVariance::stdDev_corrdouble stdDev_corr() constDefinition NeuralNet.h:144; TMVA::DNN::MeanVariance::weightsdouble weights() constDefinition NeuralNet.h:125; TMVA::DNN::MeanVariance::m_meandouble m_meanDefinition NeuralNet.h:150; TMVA::DNN::MeanVariance::m_nsize_t m_nDefinition NeuralNet.h:148; TMVA::DNN::MeanVariance::m_squareddouble m_squaredDefinition NeuralNet.h:151; TMVA::DNN::MeanVariance::m_sumWeightsdouble m_sumWeightsDefinition NeuralNet.h:149; TMVA::DNN::MeanVariance::addvoid add(ITERATOR itBegin, ITERATOR itEnd)Definition NeuralNet.h:116; TMVA::DNN::MeanVariance::vardouble var() constDefinition NeuralNet.h:127; TMVA::DNN::MeanVariance::stdDevdouble stdDev() constDefinition NeuralNet.h:145; TMVA::DNN::Netneural netDefinition NeuralNet.h:1062; TMVA::DNN::Net::setInputSizevoid setInputSize(size_t sizeInput)set the input size of the DNNDefinition NeuralNet.h:1092; TMVA::DNN::Net::layersstd::vector< Layer > & layers()returns the layers (structure)Definition NeuralNet.h:1246; TMVA::DNN::Net::forwardBatchvoid forwardBatch(const LayerContainer &_layers, LayerPatternContainer &layerPatternData, std::vector< double > &valuesMean, std::vector< double > &valuesStdDev, size_t trainFromLayer) constDefinition NeuralNet.icc:1240; TMVA::DNN::Net::NetNet(const Net &other)d'torDefinition NeuralNet.h:1085; TMVA::DNN::Net::fExitFromTrainingbool * fExitFromTrainingDefinition NeuralNet.h:1277; TMVA::DNN::Net::NetNet()c'torDefinition NeuralNet.h:1074; TMVA::DNN::Net::m_layersstd::vector< Layer > m_layerslayer-structure-dataDefinition NeuralNet.h:1272; TMVA::DNN::Net::fIPyMaxIterUInt_t * fIPyMaxIterDefinition NeuralNet.h:1278; TMVA::DNN::Net::SetIpythonInteractivevoid SetIpythonInteractive(IPythonInteractive *fI, bool *fE, UInt_t *M, UInt_t *C)Definition NeuralNet.h:1283; TMVA::DNN::Net::computestd::vector< double > compute(const std::vector< double > &input, const Weights &weights) constcompute the net with the ",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:64690,Modifiability,layers,layers,64690,"T value, double weight=1.0)Definition NeuralNet.h:93; TMVA::DNN::MeanVariance::stdDev_corrdouble stdDev_corr() constDefinition NeuralNet.h:144; TMVA::DNN::MeanVariance::weightsdouble weights() constDefinition NeuralNet.h:125; TMVA::DNN::MeanVariance::m_meandouble m_meanDefinition NeuralNet.h:150; TMVA::DNN::MeanVariance::m_nsize_t m_nDefinition NeuralNet.h:148; TMVA::DNN::MeanVariance::m_squareddouble m_squaredDefinition NeuralNet.h:151; TMVA::DNN::MeanVariance::m_sumWeightsdouble m_sumWeightsDefinition NeuralNet.h:149; TMVA::DNN::MeanVariance::addvoid add(ITERATOR itBegin, ITERATOR itEnd)Definition NeuralNet.h:116; TMVA::DNN::MeanVariance::vardouble var() constDefinition NeuralNet.h:127; TMVA::DNN::MeanVariance::stdDevdouble stdDev() constDefinition NeuralNet.h:145; TMVA::DNN::Netneural netDefinition NeuralNet.h:1062; TMVA::DNN::Net::setInputSizevoid setInputSize(size_t sizeInput)set the input size of the DNNDefinition NeuralNet.h:1092; TMVA::DNN::Net::layersstd::vector< Layer > & layers()returns the layers (structure)Definition NeuralNet.h:1246; TMVA::DNN::Net::forwardBatchvoid forwardBatch(const LayerContainer &_layers, LayerPatternContainer &layerPatternData, std::vector< double > &valuesMean, std::vector< double > &valuesStdDev, size_t trainFromLayer) constDefinition NeuralNet.icc:1240; TMVA::DNN::Net::NetNet(const Net &other)d'torDefinition NeuralNet.h:1085; TMVA::DNN::Net::fExitFromTrainingbool * fExitFromTrainingDefinition NeuralNet.h:1277; TMVA::DNN::Net::NetNet()c'torDefinition NeuralNet.h:1074; TMVA::DNN::Net::m_layersstd::vector< Layer > m_layerslayer-structure-dataDefinition NeuralNet.h:1272; TMVA::DNN::Net::fIPyMaxIterUInt_t * fIPyMaxIterDefinition NeuralNet.h:1278; TMVA::DNN::Net::SetIpythonInteractivevoid SetIpythonInteractive(IPythonInteractive *fI, bool *fE, UInt_t *M, UInt_t *C)Definition NeuralNet.h:1283; TMVA::DNN::Net::computestd::vector< double > compute(const std::vector< double > &input, const Weights &weights) constcompute the net with the ",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:67197,Modifiability,layers,layersconst,67197,"tainer &outputContainer) constDefinition NeuralNet.icc:1291; TMVA::DNN::Net::inputSizesize_t inputSize() constinput size of the DNNDefinition NeuralNet.h:1098; TMVA::DNN::Net::clearvoid clear()Definition NeuralNet.h:1251; TMVA::DNN::Net::begin_end_typestd::pair< iterator_type, iterator_type > begin_end_typeDefinition NeuralNet.h:1067; TMVA::DNN::Net::m_eErrorFunctionModeErrorFunction m_eErrorFunctiondenotes the error functionDefinition NeuralNet.h:1269; TMVA::DNN::Net::dEvoid dE(); TMVA::DNN::Net::addLayervoid addLayer(Layer &&layer)Definition NeuralNet.h:1095; TMVA::DNN::Net::numNodessize_t numNodes(size_t trainingStartLayer=0) constreturns the number of nodes in this netDefinition NeuralNet.cxx:556; TMVA::DNN::Net::traindouble train(std::vector< double > &weights, std::vector< Pattern > &trainPattern, const std::vector< Pattern > &testPattern, Minimizer &minimizer, Settings &settings)start the trainingDefinition NeuralNet.icc:712; TMVA::DNN::Net::layersconst std::vector< Layer > & layers() constreturns the layers (structure)Definition NeuralNet.h:1245; TMVA::DNN::Net::prepareLayerDatastd::vector< std::vector< LayerData > > prepareLayerData(LayerContainer &layers, Batch &batch, const DropContainer &dropContainer, ItWeight itWeightBegin, ItWeight itWeightEnd, ItGradient itGradientBegin, ItGradient itGradientEnd, size_t &totalNumWeights) constDefinition NeuralNet.icc:1111; TMVA::DNN::Net::setErrorFunctionvoid setErrorFunction(ModeErrorFunction eErrorFunction)which error function is to be usedDefinition NeuralNet.h:1096; TMVA::DNN::Net::initializeWeightsvoid initializeWeights(WeightInitializationStrategy eInitStrategy, OutIterator itWeight)initialize the weights with the given strategyDefinition NeuralNet.icc:1470; TMVA::DNN::Net::outputSizesize_t outputSize() constoutput size of the DNNDefinition NeuralNet.h:1099; TMVA::DNN::Net::errorFunctiondouble errorFunction(LayerData &layerData, Container truth, ItWeight itWeight, ItWeight itWeightEnd, double patternWeight, doub",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:67232,Modifiability,layers,layers,67232,"tainer &outputContainer) constDefinition NeuralNet.icc:1291; TMVA::DNN::Net::inputSizesize_t inputSize() constinput size of the DNNDefinition NeuralNet.h:1098; TMVA::DNN::Net::clearvoid clear()Definition NeuralNet.h:1251; TMVA::DNN::Net::begin_end_typestd::pair< iterator_type, iterator_type > begin_end_typeDefinition NeuralNet.h:1067; TMVA::DNN::Net::m_eErrorFunctionModeErrorFunction m_eErrorFunctiondenotes the error functionDefinition NeuralNet.h:1269; TMVA::DNN::Net::dEvoid dE(); TMVA::DNN::Net::addLayervoid addLayer(Layer &&layer)Definition NeuralNet.h:1095; TMVA::DNN::Net::numNodessize_t numNodes(size_t trainingStartLayer=0) constreturns the number of nodes in this netDefinition NeuralNet.cxx:556; TMVA::DNN::Net::traindouble train(std::vector< double > &weights, std::vector< Pattern > &trainPattern, const std::vector< Pattern > &testPattern, Minimizer &minimizer, Settings &settings)start the trainingDefinition NeuralNet.icc:712; TMVA::DNN::Net::layersconst std::vector< Layer > & layers() constreturns the layers (structure)Definition NeuralNet.h:1245; TMVA::DNN::Net::prepareLayerDatastd::vector< std::vector< LayerData > > prepareLayerData(LayerContainer &layers, Batch &batch, const DropContainer &dropContainer, ItWeight itWeightBegin, ItWeight itWeightEnd, ItGradient itGradientBegin, ItGradient itGradientEnd, size_t &totalNumWeights) constDefinition NeuralNet.icc:1111; TMVA::DNN::Net::setErrorFunctionvoid setErrorFunction(ModeErrorFunction eErrorFunction)which error function is to be usedDefinition NeuralNet.h:1096; TMVA::DNN::Net::initializeWeightsvoid initializeWeights(WeightInitializationStrategy eInitStrategy, OutIterator itWeight)initialize the weights with the given strategyDefinition NeuralNet.icc:1470; TMVA::DNN::Net::outputSizesize_t outputSize() constoutput size of the DNNDefinition NeuralNet.h:1099; TMVA::DNN::Net::errorFunctiondouble errorFunction(LayerData &layerData, Container truth, ItWeight itWeight, ItWeight itWeightEnd, double patternWeight, doub",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:67258,Modifiability,layers,layers,67258,"tainer &outputContainer) constDefinition NeuralNet.icc:1291; TMVA::DNN::Net::inputSizesize_t inputSize() constinput size of the DNNDefinition NeuralNet.h:1098; TMVA::DNN::Net::clearvoid clear()Definition NeuralNet.h:1251; TMVA::DNN::Net::begin_end_typestd::pair< iterator_type, iterator_type > begin_end_typeDefinition NeuralNet.h:1067; TMVA::DNN::Net::m_eErrorFunctionModeErrorFunction m_eErrorFunctiondenotes the error functionDefinition NeuralNet.h:1269; TMVA::DNN::Net::dEvoid dE(); TMVA::DNN::Net::addLayervoid addLayer(Layer &&layer)Definition NeuralNet.h:1095; TMVA::DNN::Net::numNodessize_t numNodes(size_t trainingStartLayer=0) constreturns the number of nodes in this netDefinition NeuralNet.cxx:556; TMVA::DNN::Net::traindouble train(std::vector< double > &weights, std::vector< Pattern > &trainPattern, const std::vector< Pattern > &testPattern, Minimizer &minimizer, Settings &settings)start the trainingDefinition NeuralNet.icc:712; TMVA::DNN::Net::layersconst std::vector< Layer > & layers() constreturns the layers (structure)Definition NeuralNet.h:1245; TMVA::DNN::Net::prepareLayerDatastd::vector< std::vector< LayerData > > prepareLayerData(LayerContainer &layers, Batch &batch, const DropContainer &dropContainer, ItWeight itWeightBegin, ItWeight itWeightEnd, ItGradient itGradientBegin, ItGradient itGradientEnd, size_t &totalNumWeights) constDefinition NeuralNet.icc:1111; TMVA::DNN::Net::setErrorFunctionvoid setErrorFunction(ModeErrorFunction eErrorFunction)which error function is to be usedDefinition NeuralNet.h:1096; TMVA::DNN::Net::initializeWeightsvoid initializeWeights(WeightInitializationStrategy eInitStrategy, OutIterator itWeight)initialize the weights with the given strategyDefinition NeuralNet.icc:1470; TMVA::DNN::Net::outputSizesize_t outputSize() constoutput size of the DNNDefinition NeuralNet.h:1099; TMVA::DNN::Net::errorFunctiondouble errorFunction(LayerData &layerData, Container truth, ItWeight itWeight, ItWeight itWeightEnd, double patternWeight, doub",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:67410,Modifiability,layers,layers,67410,"VA::DNN::Net::begin_end_typestd::pair< iterator_type, iterator_type > begin_end_typeDefinition NeuralNet.h:1067; TMVA::DNN::Net::m_eErrorFunctionModeErrorFunction m_eErrorFunctiondenotes the error functionDefinition NeuralNet.h:1269; TMVA::DNN::Net::dEvoid dE(); TMVA::DNN::Net::addLayervoid addLayer(Layer &&layer)Definition NeuralNet.h:1095; TMVA::DNN::Net::numNodessize_t numNodes(size_t trainingStartLayer=0) constreturns the number of nodes in this netDefinition NeuralNet.cxx:556; TMVA::DNN::Net::traindouble train(std::vector< double > &weights, std::vector< Pattern > &trainPattern, const std::vector< Pattern > &testPattern, Minimizer &minimizer, Settings &settings)start the trainingDefinition NeuralNet.icc:712; TMVA::DNN::Net::layersconst std::vector< Layer > & layers() constreturns the layers (structure)Definition NeuralNet.h:1245; TMVA::DNN::Net::prepareLayerDatastd::vector< std::vector< LayerData > > prepareLayerData(LayerContainer &layers, Batch &batch, const DropContainer &dropContainer, ItWeight itWeightBegin, ItWeight itWeightEnd, ItGradient itGradientBegin, ItGradient itGradientEnd, size_t &totalNumWeights) constDefinition NeuralNet.icc:1111; TMVA::DNN::Net::setErrorFunctionvoid setErrorFunction(ModeErrorFunction eErrorFunction)which error function is to be usedDefinition NeuralNet.h:1096; TMVA::DNN::Net::initializeWeightsvoid initializeWeights(WeightInitializationStrategy eInitStrategy, OutIterator itWeight)initialize the weights with the given strategyDefinition NeuralNet.icc:1470; TMVA::DNN::Net::outputSizesize_t outputSize() constoutput size of the DNNDefinition NeuralNet.h:1099; TMVA::DNN::Net::errorFunctiondouble errorFunction(LayerData &layerData, Container truth, ItWeight itWeight, ItWeight itWeightEnd, double patternWeight, double factorWeightDecay, EnumRegularization eRegularization) constcomputes the error of the DNNDefinition NeuralNet.icc:1579; TMVA::DNN::Net::forward_backwarddouble forward_backward(LayerContainer &layers, PassThrough &setting",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:68430,Modifiability,layers,layers,68430,"ent itGradientBegin, ItGradient itGradientEnd, size_t &totalNumWeights) constDefinition NeuralNet.icc:1111; TMVA::DNN::Net::setErrorFunctionvoid setErrorFunction(ModeErrorFunction eErrorFunction)which error function is to be usedDefinition NeuralNet.h:1096; TMVA::DNN::Net::initializeWeightsvoid initializeWeights(WeightInitializationStrategy eInitStrategy, OutIterator itWeight)initialize the weights with the given strategyDefinition NeuralNet.icc:1470; TMVA::DNN::Net::outputSizesize_t outputSize() constoutput size of the DNNDefinition NeuralNet.h:1099; TMVA::DNN::Net::errorFunctiondouble errorFunction(LayerData &layerData, Container truth, ItWeight itWeight, ItWeight itWeightEnd, double patternWeight, double factorWeightDecay, EnumRegularization eRegularization) constcomputes the error of the DNNDefinition NeuralNet.icc:1579; TMVA::DNN::Net::forward_backwarddouble forward_backward(LayerContainer &layers, PassThrough &settingsAndBatch, ItWeight itWeightBegin, ItWeight itWeightEnd, ItGradient itGradientBegin, ItGradient itGradientEnd, size_t trainFromLayer, OutContainer &outputContainer, bool fetchOutput) constmain NN computation functionDefinition NeuralNet.icc:1405; TMVA::DNN::Net::removeLayervoid removeLayer()remove one layerDefinition NeuralNet.h:1248; TMVA::DNN::Net::m_sizeOutputsize_t m_sizeOutputoutput size of this DNNDefinition NeuralNet.h:1271; TMVA::DNN::Net::m_sizeInputsize_t m_sizeInputinput size of this DNNDefinition NeuralNet.h:1270; TMVA::DNN::Net::trainCycledouble trainCycle(Minimizer &minimizer, std::vector< double > &weights, Iterator itPatternBegin, Iterator itPatternEnd, Settings &settings, DropContainer &dropContainer)executes one training cycleDefinition NeuralNet.icc:939; TMVA::DNN::Net::fIPyCurrentIterUInt_t * fIPyCurrentIterDefinition NeuralNet.h:1278; TMVA::DNN::Net::operator()double operator()(PassThrough &settingsAndBatch, const Weights &weights) constexecute computation of the DNN for one mini-batch (used by the minimizer); no computation of",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:69715,Modifiability,config,configurationDefinition,69715,"N computation functionDefinition NeuralNet.icc:1405; TMVA::DNN::Net::removeLayervoid removeLayer()remove one layerDefinition NeuralNet.h:1248; TMVA::DNN::Net::m_sizeOutputsize_t m_sizeOutputoutput size of this DNNDefinition NeuralNet.h:1271; TMVA::DNN::Net::m_sizeInputsize_t m_sizeInputinput size of this DNNDefinition NeuralNet.h:1270; TMVA::DNN::Net::trainCycledouble trainCycle(Minimizer &minimizer, std::vector< double > &weights, Iterator itPatternBegin, Iterator itPatternEnd, Settings &settings, DropContainer &dropContainer)executes one training cycleDefinition NeuralNet.icc:939; TMVA::DNN::Net::fIPyCurrentIterUInt_t * fIPyCurrentIterDefinition NeuralNet.h:1278; TMVA::DNN::Net::operator()double operator()(PassThrough &settingsAndBatch, const Weights &weights) constexecute computation of the DNN for one mini-batch (used by the minimizer); no computation of gradient...Definition NeuralNet.icc:1070; TMVA::DNN::Net::dropOutWeightFactorvoid dropOutWeightFactor(WeightsType &weights, const DropProbabilities &drops, bool inverse=false)set the drop out configurationDefinition NeuralNet.icc:652; TMVA::DNN::Net::fillDropContainervoid fillDropContainer(DropContainer &dropContainer, double dropFraction, size_t numNodes) constprepare the drop-out-container (select the nodes which are to be dropped out)Definition NeuralNet.cxx:572; TMVA::DNN::Net::addLayervoid addLayer(Layer &layer)add a layer (layout)Definition NeuralNet.h:1094; TMVA::DNN::Net::numWeightssize_t numWeights(size_t trainingStartLayer=0) constreturns the number of weights in this netDefinition NeuralNet.cxx:540; TMVA::DNN::Net::fInteractiveIPythonInteractive * fInteractiveDefinition NeuralNet.h:1276; TMVA::DNN::Net::Edouble E(); TMVA::DNN::Net::computeErrorstd::tuple< double, double > computeError(const Settings &settings, std::vector< LayerData > &lastLayerData, Batch &batch, ItWeight itWeightBegin, ItWeight itWeightEnd) constDefinition NeuralNet.icc:1321; TMVA::DNN::Net::setOutputSizevoid setOutputSize(size_t si",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:71392,Modifiability,config,configuration,71392,"ble E(); TMVA::DNN::Net::computeErrorstd::tuple< double, double > computeError(const Settings &settings, std::vector< LayerData > &lastLayerData, Batch &batch, ItWeight itWeightBegin, ItWeight itWeightEnd) constDefinition NeuralNet.icc:1321; TMVA::DNN::Net::setOutputSizevoid setOutputSize(size_t sizeOutput)set the output size of the DNNDefinition NeuralNet.h:1093; TMVA::DNN::Net::forwardPatternvoid forwardPattern(const LayerContainer &_layers, std::vector< LayerData > &layerData) constDefinition NeuralNet.icc:1221; TMVA::DNN::Net::backPropagatevoid backPropagate(std::vector< std::vector< LayerData > > &layerPatternData, const Settings &settings, size_t trainFromLayer, size_t totalNumWeights) constDefinition NeuralNet.icc:1355; TMVA::DNN::SettingsSettings for the training of the neural net.Definition NeuralNet.h:730; TMVA::DNN::Settings::m_batchSizesize_t m_batchSizemini-batch sizeDefinition NeuralNet.h:838; TMVA::DNN::Settings::setDropOutvoid setDropOut(Iterator begin, Iterator end, size_t _dropRepetitions)set the drop-out configuration (layer-wise)Definition NeuralNet.h:759; TMVA::DNN::Settings::createvoid create(std::string histoName, int bins, double min, double max, int bins2, double min2, double max2)for monitoringDefinition NeuralNet.h:820; TMVA::DNN::Settings::useMultithreadingbool useMultithreading() constis multithreading turned on?Definition NeuralNet.h:815; TMVA::DNN::Settings::regularizationEnumRegularization regularization() constsome regularization of the DNN is turned on?Definition NeuralNet.h:813; TMVA::DNN::Settings::convergenceCountsize_t convergenceCount() constreturns the current convergence countDefinition NeuralNet.h:827; TMVA::DNN::Settings::momentumdouble momentum() constget the momentum (e.g. for SGD)Definition NeuralNet.h:772; TMVA::DNN::Settings::count_Esize_t count_EDefinition NeuralNet.h:842; TMVA::DNN::Settings::m_timerTimer m_timertimer for monitoringDefinition NeuralNet.h:832; TMVA::DNN::Settings::testRepetitionssize_t testRepetitions",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:85294,Modifiability,variab,variable,85294,"VIERUNIFORM; TMVA::DNN::WeightInitializationStrategy::XAVIER@ XAVIER; TMVA::DNN::WeightInitializationStrategy::LAYERSIZE@ LAYERSIZE; TMVA::DNN::operator|=ModeOutputValues operator|=(ModeOutputValues &lhs, ModeOutputValues rhs)Definition NeuralNet.h:193; TMVA::DNN::MinimizerTypeMinimizerType< list all the minimizer typesDefinition NeuralNet.h:321; TMVA::DNN::fSteepest@ fSteepestSGD.Definition NeuralNet.h:322; TMVA::DNN::gaussDoubledouble gaussDouble(double mean, double sigma)Definition NeuralNet.cxx:35; TMVA::DNN::operator&ModeOutputValues operator&(ModeOutputValues lhs, ModeOutputValues rhs)Definition NeuralNet.h:199; TMVA::DNN::ModeOutputValuesModeOutputValuesDefinition NeuralNet.h:179; TMVA::DNN::ModeOutputValues::SOFTMAX@ SOFTMAX; TMVA::DNN::ModeOutputValues::BATCHNORMALIZATION@ BATCHNORMALIZATION; TMVA::DNN::ModeOutputValues::DIRECT@ DIRECT; TMVA::DNN::applyWeightsvoid applyWeights(ItSource itSourceBegin, ItSource itSourceEnd, ItWeight itWeight, ItTarget itTargetBegin, ItTarget itTargetEnd); TMVA::DNN::pass_through_typestd::tuple< Settings &, Batch &, DropContainer & > pass_through_typeDefinition NeuralNet.h:1294; TMVA::DNN::isFlagSetbool isFlagSet(T flag, T value)Definition NeuralNet.h:212; TMVA::DNN::randomIntint randomInt(int maxValue)Definition NeuralNet.cxx:52; TMVA::DNN::updatevoid update(ItSource itSource, ItSource itSourceEnd, ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd, ItTargetGradient itTargetGradientBegin, ItGradient itGradient)update the gradientsDefinition NeuralNet.icc:183; TMVA::DNN::DropContainerstd::vector< char > DropContainerDefinition NeuralNet.h:227; TMVA::DNN::applyWeightsBackwardsvoid applyWeightsBackwards(ItSource itCurrBegin, ItSource itCurrEnd, ItWeight itWeight, ItPrev itPrevBegin, ItPrev itPrevEnd); TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22; outputstatic void output(). tmvatmvaincTMVANeuralNet.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:58 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:18520,Testability,assert,assert,18520,,MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:18663,Testability,assert,assert,18663,,MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:20231,Testability,assert,assert,20231,ns iterator to the end of the deltas (back-propagation); 593 ; 594 const_iterator_type deltasBegin () const { return begin (m_deltas); } ///< returns const iterator to the begin of the deltas (back-propagation); 595 const_iterator_type deltasEnd () const { return end (m_deltas); } ///< returns const iterator to the end of the deltas (back-propagation); 596 ; 597 iterator_type valueGradientsBegin () { return begin (m_valueGradients); } ///< returns iterator to the begin of the gradients of the node values; 598 iterator_type valueGradientsEnd () { return end (m_valueGradients); } ///< returns iterator to the end of the gradients of the node values; 599 ; 600 const_iterator_type valueGradientsBegin () const { return begin (m_valueGradients); } ///< returns const iterator to the begin of the gradients; 601 const_iterator_type valueGradientsEnd () const { return end (m_valueGradients); } ///< returns const iterator to the end of the gradients; 602 ; 603 iterator_type gradientsBegin () { assert (m_hasGradients); return m_itGradientBegin; } ///< returns iterator to the begin of the gradients; 604 const_iterator_type gradientsBegin () const { assert (m_hasGradients); return m_itGradientBegin; } ///< returns const iterator to the begin of the gradients; 605 const_iterator_type weightsBegin () const { assert (m_hasWeights); return m_itConstWeightBegin; } ///< returns const iterator to the begin of the weights for this layer; 606 ; 607 std::shared_ptr<std::function<double(double)>> activationFunction () const { return m_activationFunction; }; 608 std::shared_ptr<std::function<double(double)>> inverseActivationFunction () const { return m_inverseActivationFunction; }; 609 ; 610 /*! \brief set the drop-out info for this layer; 611 *; 612 */; 613 template <typename Iterator>; 614 void setDropOut (Iterator itDrop) { m_itDropOut = itDrop; m_hasDropOut = true; }; 615 ; 616 /*! \brief clear the drop-out-data for this layer; 617 *; 618 *; 619 */; 620 void clearDropOut () { m_hasDropOut,MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:20387,Testability,assert,assert,20387,iterator to the begin of the deltas (back-propagation); 595 const_iterator_type deltasEnd () const { return end (m_deltas); } ///< returns const iterator to the end of the deltas (back-propagation); 596 ; 597 iterator_type valueGradientsBegin () { return begin (m_valueGradients); } ///< returns iterator to the begin of the gradients of the node values; 598 iterator_type valueGradientsEnd () { return end (m_valueGradients); } ///< returns iterator to the end of the gradients of the node values; 599 ; 600 const_iterator_type valueGradientsBegin () const { return begin (m_valueGradients); } ///< returns const iterator to the begin of the gradients; 601 const_iterator_type valueGradientsEnd () const { return end (m_valueGradients); } ///< returns const iterator to the end of the gradients; 602 ; 603 iterator_type gradientsBegin () { assert (m_hasGradients); return m_itGradientBegin; } ///< returns iterator to the begin of the gradients; 604 const_iterator_type gradientsBegin () const { assert (m_hasGradients); return m_itGradientBegin; } ///< returns const iterator to the begin of the gradients; 605 const_iterator_type weightsBegin () const { assert (m_hasWeights); return m_itConstWeightBegin; } ///< returns const iterator to the begin of the weights for this layer; 606 ; 607 std::shared_ptr<std::function<double(double)>> activationFunction () const { return m_activationFunction; }; 608 std::shared_ptr<std::function<double(double)>> inverseActivationFunction () const { return m_inverseActivationFunction; }; 609 ; 610 /*! \brief set the drop-out info for this layer; 611 *; 612 */; 613 template <typename Iterator>; 614 void setDropOut (Iterator itDrop) { m_itDropOut = itDrop; m_hasDropOut = true; }; 615 ; 616 /*! \brief clear the drop-out-data for this layer; 617 *; 618 *; 619 */; 620 void clearDropOut () { m_hasDropOut = false; }; 621 ; 622 bool hasDropOut () const { return m_hasDropOut; } ///< has this layer drop-out turned on?; 623 const_dropout_iterator dropOut () cons,MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:20547,Testability,assert,assert,20547, end of the deltas (back-propagation); 596 ; 597 iterator_type valueGradientsBegin () { return begin (m_valueGradients); } ///< returns iterator to the begin of the gradients of the node values; 598 iterator_type valueGradientsEnd () { return end (m_valueGradients); } ///< returns iterator to the end of the gradients of the node values; 599 ; 600 const_iterator_type valueGradientsBegin () const { return begin (m_valueGradients); } ///< returns const iterator to the begin of the gradients; 601 const_iterator_type valueGradientsEnd () const { return end (m_valueGradients); } ///< returns const iterator to the end of the gradients; 602 ; 603 iterator_type gradientsBegin () { assert (m_hasGradients); return m_itGradientBegin; } ///< returns iterator to the begin of the gradients; 604 const_iterator_type gradientsBegin () const { assert (m_hasGradients); return m_itGradientBegin; } ///< returns const iterator to the begin of the gradients; 605 const_iterator_type weightsBegin () const { assert (m_hasWeights); return m_itConstWeightBegin; } ///< returns const iterator to the begin of the weights for this layer; 606 ; 607 std::shared_ptr<std::function<double(double)>> activationFunction () const { return m_activationFunction; }; 608 std::shared_ptr<std::function<double(double)>> inverseActivationFunction () const { return m_inverseActivationFunction; }; 609 ; 610 /*! \brief set the drop-out info for this layer; 611 *; 612 */; 613 template <typename Iterator>; 614 void setDropOut (Iterator itDrop) { m_itDropOut = itDrop; m_hasDropOut = true; }; 615 ; 616 /*! \brief clear the drop-out-data for this layer; 617 *; 618 *; 619 */; 620 void clearDropOut () { m_hasDropOut = false; }; 621 ; 622 bool hasDropOut () const { return m_hasDropOut; } ///< has this layer drop-out turned on?; 623 const_dropout_iterator dropOut () const { assert (m_hasDropOut); return m_itDropOut; } ///< return the begin of the drop-out information; 624 ; 625 size_t size () const { return m_size; } ///< retur,MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:21395,Testability,assert,assert,21395,asGradients); return m_itGradientBegin; } ///< returns const iterator to the begin of the gradients; 605 const_iterator_type weightsBegin () const { assert (m_hasWeights); return m_itConstWeightBegin; } ///< returns const iterator to the begin of the weights for this layer; 606 ; 607 std::shared_ptr<std::function<double(double)>> activationFunction () const { return m_activationFunction; }; 608 std::shared_ptr<std::function<double(double)>> inverseActivationFunction () const { return m_inverseActivationFunction; }; 609 ; 610 /*! \brief set the drop-out info for this layer; 611 *; 612 */; 613 template <typename Iterator>; 614 void setDropOut (Iterator itDrop) { m_itDropOut = itDrop; m_hasDropOut = true; }; 615 ; 616 /*! \brief clear the drop-out-data for this layer; 617 *; 618 *; 619 */; 620 void clearDropOut () { m_hasDropOut = false; }; 621 ; 622 bool hasDropOut () const { return m_hasDropOut; } ///< has this layer drop-out turned on?; 623 const_dropout_iterator dropOut () const { assert (m_hasDropOut); return m_itDropOut; } ///< return the begin of the drop-out information; 624 ; 625 size_t size () const { return m_size; } ///< return the size of the layer; 626 ; 627 private:; 628 ; 629 /*! \brief compute the probabilities from the node values; 630 *; 631 *; 632 */; 633 container_type computeProbabilities () const;; 634 ; 635 private:; 636 ; 637 size_t m_size; ////< layer size; 638 ; 639 const_iterator_type m_itInputBegin; ///< iterator to the first of the nodes in the input node vector; 640 const_iterator_type m_itInputEnd; ///< iterator to the end of the nodes in the input node vector; 641 ; 642 std::vector<double> m_deltas; ///< stores the deltas for the DNN training; 643 std::vector<double> m_valueGradients; ///< stores the gradients of the values (nodes); 644 std::vector<double> m_values; ///< stores the values of the nodes in this layer; 645 const_dropout_iterator m_itDropOut; ///< iterator to a container indicating if the corresponding node is to be dropped;,MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:27629,Testability,test,testRepetitions,27629," ; 752 /*! \brief set the drop-out configuration (layer-wise); 753 *; 754 * \param begin begin of an array or vector denoting the drop-out probabilities for each layer; 755 * \param end end of an array or vector denoting the drop-out probabilities for each layer; 756 * \param _dropRepetitions denotes after how many repetitions the drop-out setting (which nodes are dropped out exactly) is changed; 757 */; 758 template <typename Iterator>; 759 void setDropOut (Iterator begin, Iterator end, size_t _dropRepetitions) { m_dropOut.assign (begin, end); m_dropRepetitions = _dropRepetitions; }; 760 ; 761 size_t dropRepetitions () const { return m_dropRepetitions; }; 762 const std::vector<double>& dropFractions () const { return m_dropOut; }; 763 ; 764 void setMonitoring (std::shared_ptr<Monitoring> ptrMonitoring) { fMonitoring = ptrMonitoring; } ///< prepared for monitoring; 765 ; 766 size_t convergenceSteps () const { return m_convergenceSteps; } ///< how many steps until training is deemed to have converged; 767 size_t batchSize () const { return m_batchSize; } ///< mini-batch size; 768 size_t testRepetitions () const { return m_testRepetitions; } ///< how often is the test data tested; 769 double factorWeightDecay () const { return m_factorWeightDecay; } ///< get the weight-decay factor; 770 ; 771 double learningRate () const { return fLearningRate; } ///< get the learning rate; 772 double momentum () const { return fMomentum; } ///< get the momentum (e.g. for SGD); 773 int repetitions () const { return fRepetitions; } ///< how many steps have to be gone until the batch is changed; 774 MinimizerType minimizerType () const { return fMinimizerType; } ///< which minimizer shall be used (e.g. SGD); 775 ; 776 ; 777 ; 778 ; 779 ; 780 ; 781 virtual void testSample (double /*error*/, double /*output*/, double /*target*/, double /*weight*/) {} ///< virtual function to be used for monitoring (callback); 782 virtual void startTrainCycle () ///< callback for monitoring and logging; 783",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:27706,Testability,test,test,27706," ; 752 /*! \brief set the drop-out configuration (layer-wise); 753 *; 754 * \param begin begin of an array or vector denoting the drop-out probabilities for each layer; 755 * \param end end of an array or vector denoting the drop-out probabilities for each layer; 756 * \param _dropRepetitions denotes after how many repetitions the drop-out setting (which nodes are dropped out exactly) is changed; 757 */; 758 template <typename Iterator>; 759 void setDropOut (Iterator begin, Iterator end, size_t _dropRepetitions) { m_dropOut.assign (begin, end); m_dropRepetitions = _dropRepetitions; }; 760 ; 761 size_t dropRepetitions () const { return m_dropRepetitions; }; 762 const std::vector<double>& dropFractions () const { return m_dropOut; }; 763 ; 764 void setMonitoring (std::shared_ptr<Monitoring> ptrMonitoring) { fMonitoring = ptrMonitoring; } ///< prepared for monitoring; 765 ; 766 size_t convergenceSteps () const { return m_convergenceSteps; } ///< how many steps until training is deemed to have converged; 767 size_t batchSize () const { return m_batchSize; } ///< mini-batch size; 768 size_t testRepetitions () const { return m_testRepetitions; } ///< how often is the test data tested; 769 double factorWeightDecay () const { return m_factorWeightDecay; } ///< get the weight-decay factor; 770 ; 771 double learningRate () const { return fLearningRate; } ///< get the learning rate; 772 double momentum () const { return fMomentum; } ///< get the momentum (e.g. for SGD); 773 int repetitions () const { return fRepetitions; } ///< how many steps have to be gone until the batch is changed; 774 MinimizerType minimizerType () const { return fMinimizerType; } ///< which minimizer shall be used (e.g. SGD); 775 ; 776 ; 777 ; 778 ; 779 ; 780 ; 781 virtual void testSample (double /*error*/, double /*output*/, double /*target*/, double /*weight*/) {} ///< virtual function to be used for monitoring (callback); 782 virtual void startTrainCycle () ///< callback for monitoring and logging; 783",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:27716,Testability,test,tested,27716," ; 752 /*! \brief set the drop-out configuration (layer-wise); 753 *; 754 * \param begin begin of an array or vector denoting the drop-out probabilities for each layer; 755 * \param end end of an array or vector denoting the drop-out probabilities for each layer; 756 * \param _dropRepetitions denotes after how many repetitions the drop-out setting (which nodes are dropped out exactly) is changed; 757 */; 758 template <typename Iterator>; 759 void setDropOut (Iterator begin, Iterator end, size_t _dropRepetitions) { m_dropOut.assign (begin, end); m_dropRepetitions = _dropRepetitions; }; 760 ; 761 size_t dropRepetitions () const { return m_dropRepetitions; }; 762 const std::vector<double>& dropFractions () const { return m_dropOut; }; 763 ; 764 void setMonitoring (std::shared_ptr<Monitoring> ptrMonitoring) { fMonitoring = ptrMonitoring; } ///< prepared for monitoring; 765 ; 766 size_t convergenceSteps () const { return m_convergenceSteps; } ///< how many steps until training is deemed to have converged; 767 size_t batchSize () const { return m_batchSize; } ///< mini-batch size; 768 size_t testRepetitions () const { return m_testRepetitions; } ///< how often is the test data tested; 769 double factorWeightDecay () const { return m_factorWeightDecay; } ///< get the weight-decay factor; 770 ; 771 double learningRate () const { return fLearningRate; } ///< get the learning rate; 772 double momentum () const { return fMomentum; } ///< get the momentum (e.g. for SGD); 773 int repetitions () const { return fRepetitions; } ///< how many steps have to be gone until the batch is changed; 774 MinimizerType minimizerType () const { return fMinimizerType; } ///< which minimizer shall be used (e.g. SGD); 775 ; 776 ; 777 ; 778 ; 779 ; 780 ; 781 virtual void testSample (double /*error*/, double /*output*/, double /*target*/, double /*weight*/) {} ///< virtual function to be used for monitoring (callback); 782 virtual void startTrainCycle () ///< callback for monitoring and logging; 783",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:28296,Testability,test,testSample,28296," often is the test data tested; 769 double factorWeightDecay () const { return m_factorWeightDecay; } ///< get the weight-decay factor; 770 ; 771 double learningRate () const { return fLearningRate; } ///< get the learning rate; 772 double momentum () const { return fMomentum; } ///< get the momentum (e.g. for SGD); 773 int repetitions () const { return fRepetitions; } ///< how many steps have to be gone until the batch is changed; 774 MinimizerType minimizerType () const { return fMinimizerType; } ///< which minimizer shall be used (e.g. SGD); 775 ; 776 ; 777 ; 778 ; 779 ; 780 ; 781 virtual void testSample (double /*error*/, double /*output*/, double /*target*/, double /*weight*/) {} ///< virtual function to be used for monitoring (callback); 782 virtual void startTrainCycle () ///< callback for monitoring and logging; 783 {; 784 m_convergenceCount = 0;; 785 m_maxConvergenceCount= 0;; 786 m_minError = 1e10;; 787 }; 788 virtual void endTrainCycle (double /*error*/) {} ///< callback for monitoring and logging; 789 ; 790 virtual void setProgressLimits (double minProgress = 0, double maxProgress = 100) ///< for monitoring and logging (set the current ""progress"" limits for the display of the progress) \param minProgress minimum value \param maxProgress maximum value; 791 {; 792 m_minProgress = minProgress;; 793 m_maxProgress = maxProgress;; 794 }; 795 virtual void startTraining () ///< start drawing the progress bar; 796 {; 797 m_timer.DrawProgressBar (Int_t(m_minProgress));; 798 }; 799 virtual void cycle (double progress, TString text) ///< advance on the progress bar \param progress the new value \param text a label; 800 {; 801 m_timer.DrawProgressBar (Int_t(m_minProgress+(m_maxProgress-m_minProgress)*(progress/100.0)), text);; 802 }; 803 ; 804 virtual void startTestCycle () {} ///< callback for monitoring and loggging; 805 virtual void endTestCycle () {} ///< callback for monitoring and loggging; 806 virtual void testIteration () {} ///< callback for monitoring and l",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:28515,Testability,log,logging,28515," often is the test data tested; 769 double factorWeightDecay () const { return m_factorWeightDecay; } ///< get the weight-decay factor; 770 ; 771 double learningRate () const { return fLearningRate; } ///< get the learning rate; 772 double momentum () const { return fMomentum; } ///< get the momentum (e.g. for SGD); 773 int repetitions () const { return fRepetitions; } ///< how many steps have to be gone until the batch is changed; 774 MinimizerType minimizerType () const { return fMinimizerType; } ///< which minimizer shall be used (e.g. SGD); 775 ; 776 ; 777 ; 778 ; 779 ; 780 ; 781 virtual void testSample (double /*error*/, double /*output*/, double /*target*/, double /*weight*/) {} ///< virtual function to be used for monitoring (callback); 782 virtual void startTrainCycle () ///< callback for monitoring and logging; 783 {; 784 m_convergenceCount = 0;; 785 m_maxConvergenceCount= 0;; 786 m_minError = 1e10;; 787 }; 788 virtual void endTrainCycle (double /*error*/) {} ///< callback for monitoring and logging; 789 ; 790 virtual void setProgressLimits (double minProgress = 0, double maxProgress = 100) ///< for monitoring and logging (set the current ""progress"" limits for the display of the progress) \param minProgress minimum value \param maxProgress maximum value; 791 {; 792 m_minProgress = minProgress;; 793 m_maxProgress = maxProgress;; 794 }; 795 virtual void startTraining () ///< start drawing the progress bar; 796 {; 797 m_timer.DrawProgressBar (Int_t(m_minProgress));; 798 }; 799 virtual void cycle (double progress, TString text) ///< advance on the progress bar \param progress the new value \param text a label; 800 {; 801 m_timer.DrawProgressBar (Int_t(m_minProgress+(m_maxProgress-m_minProgress)*(progress/100.0)), text);; 802 }; 803 ; 804 virtual void startTestCycle () {} ///< callback for monitoring and loggging; 805 virtual void endTestCycle () {} ///< callback for monitoring and loggging; 806 virtual void testIteration () {} ///< callback for monitoring and l",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:28708,Testability,log,logging,28708," often is the test data tested; 769 double factorWeightDecay () const { return m_factorWeightDecay; } ///< get the weight-decay factor; 770 ; 771 double learningRate () const { return fLearningRate; } ///< get the learning rate; 772 double momentum () const { return fMomentum; } ///< get the momentum (e.g. for SGD); 773 int repetitions () const { return fRepetitions; } ///< how many steps have to be gone until the batch is changed; 774 MinimizerType minimizerType () const { return fMinimizerType; } ///< which minimizer shall be used (e.g. SGD); 775 ; 776 ; 777 ; 778 ; 779 ; 780 ; 781 virtual void testSample (double /*error*/, double /*output*/, double /*target*/, double /*weight*/) {} ///< virtual function to be used for monitoring (callback); 782 virtual void startTrainCycle () ///< callback for monitoring and logging; 783 {; 784 m_convergenceCount = 0;; 785 m_maxConvergenceCount= 0;; 786 m_minError = 1e10;; 787 }; 788 virtual void endTrainCycle (double /*error*/) {} ///< callback for monitoring and logging; 789 ; 790 virtual void setProgressLimits (double minProgress = 0, double maxProgress = 100) ///< for monitoring and logging (set the current ""progress"" limits for the display of the progress) \param minProgress minimum value \param maxProgress maximum value; 791 {; 792 m_minProgress = minProgress;; 793 m_maxProgress = maxProgress;; 794 }; 795 virtual void startTraining () ///< start drawing the progress bar; 796 {; 797 m_timer.DrawProgressBar (Int_t(m_minProgress));; 798 }; 799 virtual void cycle (double progress, TString text) ///< advance on the progress bar \param progress the new value \param text a label; 800 {; 801 m_timer.DrawProgressBar (Int_t(m_minProgress+(m_maxProgress-m_minProgress)*(progress/100.0)), text);; 802 }; 803 ; 804 virtual void startTestCycle () {} ///< callback for monitoring and loggging; 805 virtual void endTestCycle () {} ///< callback for monitoring and loggging; 806 virtual void testIteration () {} ///< callback for monitoring and l",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:28833,Testability,log,logging,28833," often is the test data tested; 769 double factorWeightDecay () const { return m_factorWeightDecay; } ///< get the weight-decay factor; 770 ; 771 double learningRate () const { return fLearningRate; } ///< get the learning rate; 772 double momentum () const { return fMomentum; } ///< get the momentum (e.g. for SGD); 773 int repetitions () const { return fRepetitions; } ///< how many steps have to be gone until the batch is changed; 774 MinimizerType minimizerType () const { return fMinimizerType; } ///< which minimizer shall be used (e.g. SGD); 775 ; 776 ; 777 ; 778 ; 779 ; 780 ; 781 virtual void testSample (double /*error*/, double /*output*/, double /*target*/, double /*weight*/) {} ///< virtual function to be used for monitoring (callback); 782 virtual void startTrainCycle () ///< callback for monitoring and logging; 783 {; 784 m_convergenceCount = 0;; 785 m_maxConvergenceCount= 0;; 786 m_minError = 1e10;; 787 }; 788 virtual void endTrainCycle (double /*error*/) {} ///< callback for monitoring and logging; 789 ; 790 virtual void setProgressLimits (double minProgress = 0, double maxProgress = 100) ///< for monitoring and logging (set the current ""progress"" limits for the display of the progress) \param minProgress minimum value \param maxProgress maximum value; 791 {; 792 m_minProgress = minProgress;; 793 m_maxProgress = maxProgress;; 794 }; 795 virtual void startTraining () ///< start drawing the progress bar; 796 {; 797 m_timer.DrawProgressBar (Int_t(m_minProgress));; 798 }; 799 virtual void cycle (double progress, TString text) ///< advance on the progress bar \param progress the new value \param text a label; 800 {; 801 m_timer.DrawProgressBar (Int_t(m_minProgress+(m_maxProgress-m_minProgress)*(progress/100.0)), text);; 802 }; 803 ; 804 virtual void startTestCycle () {} ///< callback for monitoring and loggging; 805 virtual void endTestCycle () {} ///< callback for monitoring and loggging; 806 virtual void testIteration () {} ///< callback for monitoring and l",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:29532,Testability,log,loggging,29532,,MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:29611,Testability,log,loggging,29611,,MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:29638,Testability,test,testIteration,29638,,MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:29691,Testability,log,loggging,29691,,MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:29914,Testability,log,logging,29914,,MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:30055,Testability,log,logging,30055,,MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:30108,Testability,test,testError,30108,,MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:34401,Testability,test,testIteration,34401,"pe = MinimizerType::fSteepest,; 905 double _learningRate = 1e-5, double _momentum = 0.3, int _repetitions = 3,; 906 bool _useMultithreading = true); 907 : Settings (name, _convergenceSteps, _batchSize, _testRepetitions, _factorWeightDecay,; 908 _regularization, _eMinimizerType, _learningRate, _momentum, _repetitions, _useMultithreading); 909 , m_ams (); 910 , m_sumOfSigWeights (0); 911 , m_sumOfBkgWeights (0); 912 , m_scaleToNumEvents (_scaleToNumEvents); 913 , m_cutValue (10.0); 914 , m_pResultPatternContainer(nullptr); 915 , m_fileNameResult (); 916 , m_fileNameNetConfig (); 917 {; 918 }; 919 ; 920 /*! \brief d'tor; 921 *; 922 *; 923 */; 924 virtual ~ClassificationSettings (); 925 {; 926 }; 927 ; 928 void startTrainCycle ();; 929 void endTrainCycle (double /*error*/);; 930 void testIteration () { if (fMonitoring) fMonitoring->ProcessEvents (); }; 931 ; 932 ; 933 /* void createHistograms () */; 934 /* { */; 935 /* std::cout << ""is hist ROC existing?"" << std::endl; */; 936 /* if (m_histROC) */; 937 /* { */; 938 /* std::cout << ""--> yes"" << std::endl; */; 939 /* fMonitoring->ProcessEvents (); */; 940 /* return; */; 941 /* } */; 942 ; 943 /* std::cout << ""create histograms"" << std::endl; */; 944 /* TCanvas* canvas = fMonitoring->GetCanvas (); */; 945 /* if (canvas) */; 946 /* { */; 947 /* std::cout << ""canvas divide"" << std::endl; */; 948 /* canvas->cd (); */; 949 /* canvas->Divide (2,2); */; 950 /* } */; 951 /* if (!m_histROC) */; 952 /* { */; 953 /* m_histROC = new TH2F (""ROC"",""ROC"", 1000, 0, 1.0, 1000, 0, 1.0); m_histROC->SetDirectory (0); */; 954 /* m_histROC->SetLineColor (kBlue); */; 955 /* } */; 956 /* if (!m_histSignificance) */; 957 /* { */; 958 /* m_histSignificance = new TH2F (""Significance"", ""Significance"", 1000, 0,1.0, 5, 0.0, 2.0); */; 959 /* m_histSignificance->SetDirectory (0); */; 960 /* m_histSignificance->SetBit (TH1::kCanRebin); */; 961 /* m_histROC->SetLineColor (kRed); */; 962 /* } */; 963 /* if (!m_histError) */; 964 /* { */; 965 /* m_histError =",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:36393,Testability,test,testSample,36393,,MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:40070,Testability,test,testPattern,40070,"081 /*! \brief d'tor; 1082 *; 1083 *; 1084 */; 1085 Net (const Net& other); 1086 : m_eErrorFunction (other.m_eErrorFunction); 1087 , m_sizeInput (other.m_sizeInput); 1088 , m_layers (other.m_layers); 1089 {; 1090 }; 1091 ; 1092 void setInputSize (size_t sizeInput) { m_sizeInput = sizeInput; } ///< set the input size of the DNN; 1093 void setOutputSize (size_t sizeOutput) { m_sizeOutput = sizeOutput; } ///< set the output size of the DNN; 1094 void addLayer (Layer& layer) { m_layers.push_back (layer); } ///< add a layer (layout); 1095 void addLayer (Layer&& layer) { m_layers.push_back (layer); }; 1096 void setErrorFunction (ModeErrorFunction eErrorFunction) { m_eErrorFunction = eErrorFunction; } ///< which error function is to be used; 1097 ; 1098 size_t inputSize () const { return m_sizeInput; } ///< input size of the DNN; 1099 size_t outputSize () const { return m_sizeOutput; } ///< output size of the DNN; 1100 ; 1101 /*! \brief set the drop out configuration; 1102 *; 1103 *; 1104 */; 1105 template <typename WeightsType, typename DropProbabilities>; 1106 void dropOutWeightFactor (WeightsType& weights,; 1107 const DropProbabilities& drops,; 1108 bool inverse = false);; 1109 ; 1110 /*! \brief start the training; 1111 *; 1112 * \param weights weight vector; 1113 * \param trainPattern training pattern; 1114 * \param testPattern test pattern; 1115 * \param minimizer use this minimizer for training (e.g. SGD); 1116 * \param settings settings used for this training run; 1117 */; 1118 template <typename Minimizer>; 1119 double train (std::vector<double>& weights,; 1120 std::vector<Pattern>& trainPattern,; 1121 const std::vector<Pattern>& testPattern,; 1122 Minimizer& minimizer,; 1123 Settings& settings);; 1124 ; 1125 /*! \brief pre-training for future use; 1126 *; 1127 *; 1128 */; 1129 template <typename Minimizer>; 1130 void preTrain (std::vector<double>& weights,; 1131 std::vector<Pattern>& trainPattern,; 1132 const std::vector<Pattern>& testPattern,; 1133 Minimizer& mini",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:40082,Testability,test,test,40082,"081 /*! \brief d'tor; 1082 *; 1083 *; 1084 */; 1085 Net (const Net& other); 1086 : m_eErrorFunction (other.m_eErrorFunction); 1087 , m_sizeInput (other.m_sizeInput); 1088 , m_layers (other.m_layers); 1089 {; 1090 }; 1091 ; 1092 void setInputSize (size_t sizeInput) { m_sizeInput = sizeInput; } ///< set the input size of the DNN; 1093 void setOutputSize (size_t sizeOutput) { m_sizeOutput = sizeOutput; } ///< set the output size of the DNN; 1094 void addLayer (Layer& layer) { m_layers.push_back (layer); } ///< add a layer (layout); 1095 void addLayer (Layer&& layer) { m_layers.push_back (layer); }; 1096 void setErrorFunction (ModeErrorFunction eErrorFunction) { m_eErrorFunction = eErrorFunction; } ///< which error function is to be used; 1097 ; 1098 size_t inputSize () const { return m_sizeInput; } ///< input size of the DNN; 1099 size_t outputSize () const { return m_sizeOutput; } ///< output size of the DNN; 1100 ; 1101 /*! \brief set the drop out configuration; 1102 *; 1103 *; 1104 */; 1105 template <typename WeightsType, typename DropProbabilities>; 1106 void dropOutWeightFactor (WeightsType& weights,; 1107 const DropProbabilities& drops,; 1108 bool inverse = false);; 1109 ; 1110 /*! \brief start the training; 1111 *; 1112 * \param weights weight vector; 1113 * \param trainPattern training pattern; 1114 * \param testPattern test pattern; 1115 * \param minimizer use this minimizer for training (e.g. SGD); 1116 * \param settings settings used for this training run; 1117 */; 1118 template <typename Minimizer>; 1119 double train (std::vector<double>& weights,; 1120 std::vector<Pattern>& trainPattern,; 1121 const std::vector<Pattern>& testPattern,; 1122 Minimizer& minimizer,; 1123 Settings& settings);; 1124 ; 1125 /*! \brief pre-training for future use; 1126 *; 1127 *; 1128 */; 1129 template <typename Minimizer>; 1130 void preTrain (std::vector<double>& weights,; 1131 std::vector<Pattern>& trainPattern,; 1132 const std::vector<Pattern>& testPattern,; 1133 Minimizer& mini",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:40394,Testability,test,testPattern,40394,,MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:40702,Testability,test,testPattern,40702,,MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:50525,Testability,test,testIterationvoid,50525,"t.h:251; TMVA::DNN::Batch::beginconst_iterator begin() constDefinition NeuralNet.h:244; TMVA::DNN::Batch::endconst_iterator end() constDefinition NeuralNet.h:245; TMVA::DNN::Batch::BatchBatch(typename std::vector< Pattern >::const_iterator itBegin, typename std::vector< Pattern >::const_iterator itEnd)Definition NeuralNet.h:239; TMVA::DNN::Batch::sizesize_t size() constDefinition NeuralNet.h:247; TMVA::DNN::Batch::const_iteratorstd::vector< Pattern >::const_iterator const_iteratorDefinition NeuralNet.h:237; TMVA::DNN::Batch::m_itBeginconst_iterator m_itBeginiterator denoting the beginning of the batchDefinition NeuralNet.h:250; TMVA::DNN::ClassificationSettingsSettings for classificationused to distinguish between different function signatures.Definition NeuralNet.h:895; TMVA::DNN::ClassificationSettings::startTrainCyclevoid startTrainCycle()action to be done when the training cycle is started (e.g.Definition NeuralNet.cxx:281; TMVA::DNN::ClassificationSettings::testIterationvoid testIteration()callback for monitoring and logggingDefinition NeuralNet.h:930; TMVA::DNN::ClassificationSettings::endTrainCyclevoid endTrainCycle(double)action to be done when the training cycle is ended (e.g.Definition NeuralNet.cxx:296; TMVA::DNN::ClassificationSettings::endTestCyclevirtual void endTestCycle()action to be done when the training cycle is ended (e.g.Definition NeuralNet.cxx:326; TMVA::DNN::ClassificationSettings::m_pResultPatternContainerstd::vector< Pattern > * m_pResultPatternContainerDefinition NeuralNet.h:1009; TMVA::DNN::ClassificationSettings::setResultComputationvoid setResultComputation(std::string _fileNameNetConfig, std::string _fileNameResult, std::vector< Pattern > *_resultPatternContainer)preparation for monitoring outputDefinition NeuralNet.cxx:520; TMVA::DNN::ClassificationSettings::m_fileNameResultstd::string m_fileNameResultDefinition NeuralNet.h:1010; TMVA::DNN::ClassificationSettings::ClassificationSettingsClassificationSettings(TString name, size_t _conv",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:50543,Testability,test,testIteration,50543,"t.h:251; TMVA::DNN::Batch::beginconst_iterator begin() constDefinition NeuralNet.h:244; TMVA::DNN::Batch::endconst_iterator end() constDefinition NeuralNet.h:245; TMVA::DNN::Batch::BatchBatch(typename std::vector< Pattern >::const_iterator itBegin, typename std::vector< Pattern >::const_iterator itEnd)Definition NeuralNet.h:239; TMVA::DNN::Batch::sizesize_t size() constDefinition NeuralNet.h:247; TMVA::DNN::Batch::const_iteratorstd::vector< Pattern >::const_iterator const_iteratorDefinition NeuralNet.h:237; TMVA::DNN::Batch::m_itBeginconst_iterator m_itBeginiterator denoting the beginning of the batchDefinition NeuralNet.h:250; TMVA::DNN::ClassificationSettingsSettings for classificationused to distinguish between different function signatures.Definition NeuralNet.h:895; TMVA::DNN::ClassificationSettings::startTrainCyclevoid startTrainCycle()action to be done when the training cycle is started (e.g.Definition NeuralNet.cxx:281; TMVA::DNN::ClassificationSettings::testIterationvoid testIteration()callback for monitoring and logggingDefinition NeuralNet.h:930; TMVA::DNN::ClassificationSettings::endTrainCyclevoid endTrainCycle(double)action to be done when the training cycle is ended (e.g.Definition NeuralNet.cxx:296; TMVA::DNN::ClassificationSettings::endTestCyclevirtual void endTestCycle()action to be done when the training cycle is ended (e.g.Definition NeuralNet.cxx:326; TMVA::DNN::ClassificationSettings::m_pResultPatternContainerstd::vector< Pattern > * m_pResultPatternContainerDefinition NeuralNet.h:1009; TMVA::DNN::ClassificationSettings::setResultComputationvoid setResultComputation(std::string _fileNameNetConfig, std::string _fileNameResult, std::vector< Pattern > *_resultPatternContainer)preparation for monitoring outputDefinition NeuralNet.cxx:520; TMVA::DNN::ClassificationSettings::m_fileNameResultstd::string m_fileNameResultDefinition NeuralNet.h:1010; TMVA::DNN::ClassificationSettings::ClassificationSettingsClassificationSettings(TString name, size_t _conv",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:50586,Testability,log,logggingDefinition,50586,"t.h:251; TMVA::DNN::Batch::beginconst_iterator begin() constDefinition NeuralNet.h:244; TMVA::DNN::Batch::endconst_iterator end() constDefinition NeuralNet.h:245; TMVA::DNN::Batch::BatchBatch(typename std::vector< Pattern >::const_iterator itBegin, typename std::vector< Pattern >::const_iterator itEnd)Definition NeuralNet.h:239; TMVA::DNN::Batch::sizesize_t size() constDefinition NeuralNet.h:247; TMVA::DNN::Batch::const_iteratorstd::vector< Pattern >::const_iterator const_iteratorDefinition NeuralNet.h:237; TMVA::DNN::Batch::m_itBeginconst_iterator m_itBeginiterator denoting the beginning of the batchDefinition NeuralNet.h:250; TMVA::DNN::ClassificationSettingsSettings for classificationused to distinguish between different function signatures.Definition NeuralNet.h:895; TMVA::DNN::ClassificationSettings::startTrainCyclevoid startTrainCycle()action to be done when the training cycle is started (e.g.Definition NeuralNet.cxx:281; TMVA::DNN::ClassificationSettings::testIterationvoid testIteration()callback for monitoring and logggingDefinition NeuralNet.h:930; TMVA::DNN::ClassificationSettings::endTrainCyclevoid endTrainCycle(double)action to be done when the training cycle is ended (e.g.Definition NeuralNet.cxx:296; TMVA::DNN::ClassificationSettings::endTestCyclevirtual void endTestCycle()action to be done when the training cycle is ended (e.g.Definition NeuralNet.cxx:326; TMVA::DNN::ClassificationSettings::m_pResultPatternContainerstd::vector< Pattern > * m_pResultPatternContainerDefinition NeuralNet.h:1009; TMVA::DNN::ClassificationSettings::setResultComputationvoid setResultComputation(std::string _fileNameNetConfig, std::string _fileNameResult, std::vector< Pattern > *_resultPatternContainer)preparation for monitoring outputDefinition NeuralNet.cxx:520; TMVA::DNN::ClassificationSettings::m_fileNameResultstd::string m_fileNameResultDefinition NeuralNet.h:1010; TMVA::DNN::ClassificationSettings::ClassificationSettingsClassificationSettings(TString name, size_t _conv",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:52721,Testability,test,testSamplevoid,52721,"erType::fSteepest, double _learningRate=1e-5, double _momentum=0.3, int _repetitions=3, bool _useMultithreading=true)c'torDefinition NeuralNet.h:901; TMVA::DNN::ClassificationSettings::m_inputstd::vector< double > m_inputDefinition NeuralNet.h:995; TMVA::DNN::ClassificationSettings::m_significancesstd::vector< double > m_significancesDefinition NeuralNet.h:1001; TMVA::DNN::ClassificationSettings::m_sumOfSigWeightsdouble m_sumOfSigWeightsDefinition NeuralNet.h:1004; TMVA::DNN::ClassificationSettings::m_weightsstd::vector< double > m_weightsDefinition NeuralNet.h:998; TMVA::DNN::ClassificationSettings::m_fileNameNetConfigstd::string m_fileNameNetConfigDefinition NeuralNet.h:1011; TMVA::DNN::ClassificationSettings::~ClassificationSettingsvirtual ~ClassificationSettings()d'torDefinition NeuralNet.h:924; TMVA::DNN::ClassificationSettings::m_targetsstd::vector< double > m_targetsDefinition NeuralNet.h:997; TMVA::DNN::ClassificationSettings::testSamplevoid testSample(double error, double output, double target, double weight)action to be done after the computation of a test sample (e.g.Definition NeuralNet.cxx:304; TMVA::DNN::ClassificationSettings::m_scaleToNumEventssize_t m_scaleToNumEventsDefinition NeuralNet.h:1006; TMVA::DNN::ClassificationSettings::startTestCyclevirtual void startTestCycle()action to be done when the test cycle is started (e.g.Definition NeuralNet.cxx:316; TMVA::DNN::ClassificationSettings::m_sumOfBkgWeightsdouble m_sumOfBkgWeightsDefinition NeuralNet.h:1005; TMVA::DNN::ClassificationSettings::setWeightSumsvoid setWeightSums(double sumOfSigWeights, double sumOfBkgWeights)set the weight sums to be scaled to (preparations for monitoring output)Definition NeuralNet.cxx:512; TMVA::DNN::ClassificationSettings::m_amsstd::vector< double > m_amsDefinition NeuralNet.h:1000; TMVA::DNN::ClassificationSettings::m_cutValuedouble m_cutValueDefinition NeuralNet.h:1008; TMVA::DNN::ClassificationSettings::m_outputstd::vector< double > m_outputDefinition NeuralNet.h:99",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:52736,Testability,test,testSample,52736,"erType::fSteepest, double _learningRate=1e-5, double _momentum=0.3, int _repetitions=3, bool _useMultithreading=true)c'torDefinition NeuralNet.h:901; TMVA::DNN::ClassificationSettings::m_inputstd::vector< double > m_inputDefinition NeuralNet.h:995; TMVA::DNN::ClassificationSettings::m_significancesstd::vector< double > m_significancesDefinition NeuralNet.h:1001; TMVA::DNN::ClassificationSettings::m_sumOfSigWeightsdouble m_sumOfSigWeightsDefinition NeuralNet.h:1004; TMVA::DNN::ClassificationSettings::m_weightsstd::vector< double > m_weightsDefinition NeuralNet.h:998; TMVA::DNN::ClassificationSettings::m_fileNameNetConfigstd::string m_fileNameNetConfigDefinition NeuralNet.h:1011; TMVA::DNN::ClassificationSettings::~ClassificationSettingsvirtual ~ClassificationSettings()d'torDefinition NeuralNet.h:924; TMVA::DNN::ClassificationSettings::m_targetsstd::vector< double > m_targetsDefinition NeuralNet.h:997; TMVA::DNN::ClassificationSettings::testSamplevoid testSample(double error, double output, double target, double weight)action to be done after the computation of a test sample (e.g.Definition NeuralNet.cxx:304; TMVA::DNN::ClassificationSettings::m_scaleToNumEventssize_t m_scaleToNumEventsDefinition NeuralNet.h:1006; TMVA::DNN::ClassificationSettings::startTestCyclevirtual void startTestCycle()action to be done when the test cycle is started (e.g.Definition NeuralNet.cxx:316; TMVA::DNN::ClassificationSettings::m_sumOfBkgWeightsdouble m_sumOfBkgWeightsDefinition NeuralNet.h:1005; TMVA::DNN::ClassificationSettings::setWeightSumsvoid setWeightSums(double sumOfSigWeights, double sumOfBkgWeights)set the weight sums to be scaled to (preparations for monitoring output)Definition NeuralNet.cxx:512; TMVA::DNN::ClassificationSettings::m_amsstd::vector< double > m_amsDefinition NeuralNet.h:1000; TMVA::DNN::ClassificationSettings::m_cutValuedouble m_cutValueDefinition NeuralNet.h:1008; TMVA::DNN::ClassificationSettings::m_outputstd::vector< double > m_outputDefinition NeuralNet.h:99",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:52850,Testability,test,test,52850,"erType::fSteepest, double _learningRate=1e-5, double _momentum=0.3, int _repetitions=3, bool _useMultithreading=true)c'torDefinition NeuralNet.h:901; TMVA::DNN::ClassificationSettings::m_inputstd::vector< double > m_inputDefinition NeuralNet.h:995; TMVA::DNN::ClassificationSettings::m_significancesstd::vector< double > m_significancesDefinition NeuralNet.h:1001; TMVA::DNN::ClassificationSettings::m_sumOfSigWeightsdouble m_sumOfSigWeightsDefinition NeuralNet.h:1004; TMVA::DNN::ClassificationSettings::m_weightsstd::vector< double > m_weightsDefinition NeuralNet.h:998; TMVA::DNN::ClassificationSettings::m_fileNameNetConfigstd::string m_fileNameNetConfigDefinition NeuralNet.h:1011; TMVA::DNN::ClassificationSettings::~ClassificationSettingsvirtual ~ClassificationSettings()d'torDefinition NeuralNet.h:924; TMVA::DNN::ClassificationSettings::m_targetsstd::vector< double > m_targetsDefinition NeuralNet.h:997; TMVA::DNN::ClassificationSettings::testSamplevoid testSample(double error, double output, double target, double weight)action to be done after the computation of a test sample (e.g.Definition NeuralNet.cxx:304; TMVA::DNN::ClassificationSettings::m_scaleToNumEventssize_t m_scaleToNumEventsDefinition NeuralNet.h:1006; TMVA::DNN::ClassificationSettings::startTestCyclevirtual void startTestCycle()action to be done when the test cycle is started (e.g.Definition NeuralNet.cxx:316; TMVA::DNN::ClassificationSettings::m_sumOfBkgWeightsdouble m_sumOfBkgWeightsDefinition NeuralNet.h:1005; TMVA::DNN::ClassificationSettings::setWeightSumsvoid setWeightSums(double sumOfSigWeights, double sumOfBkgWeights)set the weight sums to be scaled to (preparations for monitoring output)Definition NeuralNet.cxx:512; TMVA::DNN::ClassificationSettings::m_amsstd::vector< double > m_amsDefinition NeuralNet.h:1000; TMVA::DNN::ClassificationSettings::m_cutValuedouble m_cutValueDefinition NeuralNet.h:1008; TMVA::DNN::ClassificationSettings::m_outputstd::vector< double > m_outputDefinition NeuralNet.h:99",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:53109,Testability,test,test,53109,"cancesstd::vector< double > m_significancesDefinition NeuralNet.h:1001; TMVA::DNN::ClassificationSettings::m_sumOfSigWeightsdouble m_sumOfSigWeightsDefinition NeuralNet.h:1004; TMVA::DNN::ClassificationSettings::m_weightsstd::vector< double > m_weightsDefinition NeuralNet.h:998; TMVA::DNN::ClassificationSettings::m_fileNameNetConfigstd::string m_fileNameNetConfigDefinition NeuralNet.h:1011; TMVA::DNN::ClassificationSettings::~ClassificationSettingsvirtual ~ClassificationSettings()d'torDefinition NeuralNet.h:924; TMVA::DNN::ClassificationSettings::m_targetsstd::vector< double > m_targetsDefinition NeuralNet.h:997; TMVA::DNN::ClassificationSettings::testSamplevoid testSample(double error, double output, double target, double weight)action to be done after the computation of a test sample (e.g.Definition NeuralNet.cxx:304; TMVA::DNN::ClassificationSettings::m_scaleToNumEventssize_t m_scaleToNumEventsDefinition NeuralNet.h:1006; TMVA::DNN::ClassificationSettings::startTestCyclevirtual void startTestCycle()action to be done when the test cycle is started (e.g.Definition NeuralNet.cxx:316; TMVA::DNN::ClassificationSettings::m_sumOfBkgWeightsdouble m_sumOfBkgWeightsDefinition NeuralNet.h:1005; TMVA::DNN::ClassificationSettings::setWeightSumsvoid setWeightSums(double sumOfSigWeights, double sumOfBkgWeights)set the weight sums to be scaled to (preparations for monitoring output)Definition NeuralNet.cxx:512; TMVA::DNN::ClassificationSettings::m_amsstd::vector< double > m_amsDefinition NeuralNet.h:1000; TMVA::DNN::ClassificationSettings::m_cutValuedouble m_cutValueDefinition NeuralNet.h:1008; TMVA::DNN::ClassificationSettings::m_outputstd::vector< double > m_outputDefinition NeuralNet.h:996; TMVA::DNN::LayerDataLayerData holds the data of one layer.Definition NeuralNet.h:437; TMVA::DNN::LayerData::m_itInputBeginconst_iterator_type m_itInputBeginiterator to the first of the nodes in the input node vectorDefinition NeuralNet.h:639; TMVA::DNN::LayerData::deltasBeginconst_iterator",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:66066,Testability,test,testPattern,66066,"xitFromTrainingDefinition NeuralNet.h:1277; TMVA::DNN::Net::NetNet()c'torDefinition NeuralNet.h:1074; TMVA::DNN::Net::m_layersstd::vector< Layer > m_layerslayer-structure-dataDefinition NeuralNet.h:1272; TMVA::DNN::Net::fIPyMaxIterUInt_t * fIPyMaxIterDefinition NeuralNet.h:1278; TMVA::DNN::Net::SetIpythonInteractivevoid SetIpythonInteractive(IPythonInteractive *fI, bool *fE, UInt_t *M, UInt_t *C)Definition NeuralNet.h:1283; TMVA::DNN::Net::computestd::vector< double > compute(const std::vector< double > &input, const Weights &weights) constcompute the net with the given input and the given weightsDefinition NeuralNet.icc:1037; TMVA::DNN::Net::container_typestd::vector< double > container_typeDefinition NeuralNet.h:1065; TMVA::DNN::Net::iterator_typecontainer_type::iterator iterator_typeDefinition NeuralNet.h:1066; TMVA::DNN::Net::preTrainvoid preTrain(std::vector< double > &weights, std::vector< Pattern > &trainPattern, const std::vector< Pattern > &testPattern, Minimizer &minimizer, Settings &settings)pre-training for future use; TMVA::DNN::Net::fetchOutputvoid fetchOutput(const LayerData &lastLayerData, OutputContainer &outputContainer) constDefinition NeuralNet.icc:1291; TMVA::DNN::Net::inputSizesize_t inputSize() constinput size of the DNNDefinition NeuralNet.h:1098; TMVA::DNN::Net::clearvoid clear()Definition NeuralNet.h:1251; TMVA::DNN::Net::begin_end_typestd::pair< iterator_type, iterator_type > begin_end_typeDefinition NeuralNet.h:1067; TMVA::DNN::Net::m_eErrorFunctionModeErrorFunction m_eErrorFunctiondenotes the error functionDefinition NeuralNet.h:1269; TMVA::DNN::Net::dEvoid dE(); TMVA::DNN::Net::addLayervoid addLayer(Layer &&layer)Definition NeuralNet.h:1095; TMVA::DNN::Net::numNodessize_t numNodes(size_t trainingStartLayer=0) constreturns the number of nodes in this netDefinition NeuralNet.cxx:556; TMVA::DNN::Net::traindouble train(std::vector< double > &weights, std::vector< Pattern > &trainPattern, const std::vector< Pattern > &testPattern, Minimizer &",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:67079,Testability,test,testPattern,67079," Pattern > &testPattern, Minimizer &minimizer, Settings &settings)pre-training for future use; TMVA::DNN::Net::fetchOutputvoid fetchOutput(const LayerData &lastLayerData, OutputContainer &outputContainer) constDefinition NeuralNet.icc:1291; TMVA::DNN::Net::inputSizesize_t inputSize() constinput size of the DNNDefinition NeuralNet.h:1098; TMVA::DNN::Net::clearvoid clear()Definition NeuralNet.h:1251; TMVA::DNN::Net::begin_end_typestd::pair< iterator_type, iterator_type > begin_end_typeDefinition NeuralNet.h:1067; TMVA::DNN::Net::m_eErrorFunctionModeErrorFunction m_eErrorFunctiondenotes the error functionDefinition NeuralNet.h:1269; TMVA::DNN::Net::dEvoid dE(); TMVA::DNN::Net::addLayervoid addLayer(Layer &&layer)Definition NeuralNet.h:1095; TMVA::DNN::Net::numNodessize_t numNodes(size_t trainingStartLayer=0) constreturns the number of nodes in this netDefinition NeuralNet.cxx:556; TMVA::DNN::Net::traindouble train(std::vector< double > &weights, std::vector< Pattern > &trainPattern, const std::vector< Pattern > &testPattern, Minimizer &minimizer, Settings &settings)start the trainingDefinition NeuralNet.icc:712; TMVA::DNN::Net::layersconst std::vector< Layer > & layers() constreturns the layers (structure)Definition NeuralNet.h:1245; TMVA::DNN::Net::prepareLayerDatastd::vector< std::vector< LayerData > > prepareLayerData(LayerContainer &layers, Batch &batch, const DropContainer &dropContainer, ItWeight itWeightBegin, ItWeight itWeightEnd, ItGradient itGradientBegin, ItGradient itGradientEnd, size_t &totalNumWeights) constDefinition NeuralNet.icc:1111; TMVA::DNN::Net::setErrorFunctionvoid setErrorFunction(ModeErrorFunction eErrorFunction)which error function is to be usedDefinition NeuralNet.h:1096; TMVA::DNN::Net::initializeWeightsvoid initializeWeights(WeightInitializationStrategy eInitStrategy, OutIterator itWeight)initialize the weights with the given strategyDefinition NeuralNet.icc:1470; TMVA::DNN::Net::outputSizesize_t outputSize() constoutput size of the DNNDefi",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:72338,Testability,test,testRepetitions,72338,"size_t _dropRepetitions)set the drop-out configuration (layer-wise)Definition NeuralNet.h:759; TMVA::DNN::Settings::createvoid create(std::string histoName, int bins, double min, double max, int bins2, double min2, double max2)for monitoringDefinition NeuralNet.h:820; TMVA::DNN::Settings::useMultithreadingbool useMultithreading() constis multithreading turned on?Definition NeuralNet.h:815; TMVA::DNN::Settings::regularizationEnumRegularization regularization() constsome regularization of the DNN is turned on?Definition NeuralNet.h:813; TMVA::DNN::Settings::convergenceCountsize_t convergenceCount() constreturns the current convergence countDefinition NeuralNet.h:827; TMVA::DNN::Settings::momentumdouble momentum() constget the momentum (e.g. for SGD)Definition NeuralNet.h:772; TMVA::DNN::Settings::count_Esize_t count_EDefinition NeuralNet.h:842; TMVA::DNN::Settings::m_timerTimer m_timertimer for monitoringDefinition NeuralNet.h:832; TMVA::DNN::Settings::testRepetitionssize_t testRepetitions() consthow often is the test data testedDefinition NeuralNet.h:768; TMVA::DNN::Settings::clearvoid clear(std::string histoName)for monitoringDefinition NeuralNet.h:824; TMVA::DNN::Settings::endTestCyclevirtual void endTestCycle()callback for monitoring and logggingDefinition NeuralNet.h:805; TMVA::DNN::Settings::fMinimizerTypeMinimizerType fMinimizerTypeDefinition NeuralNet.h:855; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x, double y)for monitoringDefinition NeuralNet.h:822; TMVA::DNN::Settings::setMonitoringvoid setMonitoring(std::shared_ptr< Monitoring > ptrMonitoring)prepared for monitoringDefinition NeuralNet.h:764; TMVA::DNN::Settings::testIterationvirtual void testIteration()callback for monitoring and logggingDefinition NeuralNet.h:806; TMVA::DNN::Settings::m_convergenceStepssize_t m_convergenceStepsnumber of steps without improvement to consider the DNN to have convergedDefinition NeuralNet.h:837; TMVA::DNN::Settings::hasConvergedvirtual bool ha",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:72378,Testability,test,test,72378,"size_t _dropRepetitions)set the drop-out configuration (layer-wise)Definition NeuralNet.h:759; TMVA::DNN::Settings::createvoid create(std::string histoName, int bins, double min, double max, int bins2, double min2, double max2)for monitoringDefinition NeuralNet.h:820; TMVA::DNN::Settings::useMultithreadingbool useMultithreading() constis multithreading turned on?Definition NeuralNet.h:815; TMVA::DNN::Settings::regularizationEnumRegularization regularization() constsome regularization of the DNN is turned on?Definition NeuralNet.h:813; TMVA::DNN::Settings::convergenceCountsize_t convergenceCount() constreturns the current convergence countDefinition NeuralNet.h:827; TMVA::DNN::Settings::momentumdouble momentum() constget the momentum (e.g. for SGD)Definition NeuralNet.h:772; TMVA::DNN::Settings::count_Esize_t count_EDefinition NeuralNet.h:842; TMVA::DNN::Settings::m_timerTimer m_timertimer for monitoringDefinition NeuralNet.h:832; TMVA::DNN::Settings::testRepetitionssize_t testRepetitions() consthow often is the test data testedDefinition NeuralNet.h:768; TMVA::DNN::Settings::clearvoid clear(std::string histoName)for monitoringDefinition NeuralNet.h:824; TMVA::DNN::Settings::endTestCyclevirtual void endTestCycle()callback for monitoring and logggingDefinition NeuralNet.h:805; TMVA::DNN::Settings::fMinimizerTypeMinimizerType fMinimizerTypeDefinition NeuralNet.h:855; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x, double y)for monitoringDefinition NeuralNet.h:822; TMVA::DNN::Settings::setMonitoringvoid setMonitoring(std::shared_ptr< Monitoring > ptrMonitoring)prepared for monitoringDefinition NeuralNet.h:764; TMVA::DNN::Settings::testIterationvirtual void testIteration()callback for monitoring and logggingDefinition NeuralNet.h:806; TMVA::DNN::Settings::m_convergenceStepssize_t m_convergenceStepsnumber of steps without improvement to consider the DNN to have convergedDefinition NeuralNet.h:837; TMVA::DNN::Settings::hasConvergedvirtual bool ha",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:72388,Testability,test,testedDefinition,72388,"size_t _dropRepetitions)set the drop-out configuration (layer-wise)Definition NeuralNet.h:759; TMVA::DNN::Settings::createvoid create(std::string histoName, int bins, double min, double max, int bins2, double min2, double max2)for monitoringDefinition NeuralNet.h:820; TMVA::DNN::Settings::useMultithreadingbool useMultithreading() constis multithreading turned on?Definition NeuralNet.h:815; TMVA::DNN::Settings::regularizationEnumRegularization regularization() constsome regularization of the DNN is turned on?Definition NeuralNet.h:813; TMVA::DNN::Settings::convergenceCountsize_t convergenceCount() constreturns the current convergence countDefinition NeuralNet.h:827; TMVA::DNN::Settings::momentumdouble momentum() constget the momentum (e.g. for SGD)Definition NeuralNet.h:772; TMVA::DNN::Settings::count_Esize_t count_EDefinition NeuralNet.h:842; TMVA::DNN::Settings::m_timerTimer m_timertimer for monitoringDefinition NeuralNet.h:832; TMVA::DNN::Settings::testRepetitionssize_t testRepetitions() consthow often is the test data testedDefinition NeuralNet.h:768; TMVA::DNN::Settings::clearvoid clear(std::string histoName)for monitoringDefinition NeuralNet.h:824; TMVA::DNN::Settings::endTestCyclevirtual void endTestCycle()callback for monitoring and logggingDefinition NeuralNet.h:805; TMVA::DNN::Settings::fMinimizerTypeMinimizerType fMinimizerTypeDefinition NeuralNet.h:855; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x, double y)for monitoringDefinition NeuralNet.h:822; TMVA::DNN::Settings::setMonitoringvoid setMonitoring(std::shared_ptr< Monitoring > ptrMonitoring)prepared for monitoringDefinition NeuralNet.h:764; TMVA::DNN::Settings::testIterationvirtual void testIteration()callback for monitoring and logggingDefinition NeuralNet.h:806; TMVA::DNN::Settings::m_convergenceStepssize_t m_convergenceStepsnumber of steps without improvement to consider the DNN to have convergedDefinition NeuralNet.h:837; TMVA::DNN::Settings::hasConvergedvirtual bool ha",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:72611,Testability,log,logggingDefinition,72611,"for monitoringDefinition NeuralNet.h:820; TMVA::DNN::Settings::useMultithreadingbool useMultithreading() constis multithreading turned on?Definition NeuralNet.h:815; TMVA::DNN::Settings::regularizationEnumRegularization regularization() constsome regularization of the DNN is turned on?Definition NeuralNet.h:813; TMVA::DNN::Settings::convergenceCountsize_t convergenceCount() constreturns the current convergence countDefinition NeuralNet.h:827; TMVA::DNN::Settings::momentumdouble momentum() constget the momentum (e.g. for SGD)Definition NeuralNet.h:772; TMVA::DNN::Settings::count_Esize_t count_EDefinition NeuralNet.h:842; TMVA::DNN::Settings::m_timerTimer m_timertimer for monitoringDefinition NeuralNet.h:832; TMVA::DNN::Settings::testRepetitionssize_t testRepetitions() consthow often is the test data testedDefinition NeuralNet.h:768; TMVA::DNN::Settings::clearvoid clear(std::string histoName)for monitoringDefinition NeuralNet.h:824; TMVA::DNN::Settings::endTestCyclevirtual void endTestCycle()callback for monitoring and logggingDefinition NeuralNet.h:805; TMVA::DNN::Settings::fMinimizerTypeMinimizerType fMinimizerTypeDefinition NeuralNet.h:855; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x, double y)for monitoringDefinition NeuralNet.h:822; TMVA::DNN::Settings::setMonitoringvoid setMonitoring(std::shared_ptr< Monitoring > ptrMonitoring)prepared for monitoringDefinition NeuralNet.h:764; TMVA::DNN::Settings::testIterationvirtual void testIteration()callback for monitoring and logggingDefinition NeuralNet.h:806; TMVA::DNN::Settings::m_convergenceStepssize_t m_convergenceStepsnumber of steps without improvement to consider the DNN to have convergedDefinition NeuralNet.h:837; TMVA::DNN::Settings::hasConvergedvirtual bool hasConverged(double testError)has this training converged already?Definition NeuralNet.cxx:485; TMVA::DNN::Settings::minimizerTypeMinimizerType minimizerType() constwhich minimizer shall be used (e.g. SGD)Definition NeuralNet.h:",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:73034,Testability,test,testIterationvirtual,73034,"() constget the momentum (e.g. for SGD)Definition NeuralNet.h:772; TMVA::DNN::Settings::count_Esize_t count_EDefinition NeuralNet.h:842; TMVA::DNN::Settings::m_timerTimer m_timertimer for monitoringDefinition NeuralNet.h:832; TMVA::DNN::Settings::testRepetitionssize_t testRepetitions() consthow often is the test data testedDefinition NeuralNet.h:768; TMVA::DNN::Settings::clearvoid clear(std::string histoName)for monitoringDefinition NeuralNet.h:824; TMVA::DNN::Settings::endTestCyclevirtual void endTestCycle()callback for monitoring and logggingDefinition NeuralNet.h:805; TMVA::DNN::Settings::fMinimizerTypeMinimizerType fMinimizerTypeDefinition NeuralNet.h:855; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x, double y)for monitoringDefinition NeuralNet.h:822; TMVA::DNN::Settings::setMonitoringvoid setMonitoring(std::shared_ptr< Monitoring > ptrMonitoring)prepared for monitoringDefinition NeuralNet.h:764; TMVA::DNN::Settings::testIterationvirtual void testIteration()callback for monitoring and logggingDefinition NeuralNet.h:806; TMVA::DNN::Settings::m_convergenceStepssize_t m_convergenceStepsnumber of steps without improvement to consider the DNN to have convergedDefinition NeuralNet.h:837; TMVA::DNN::Settings::hasConvergedvirtual bool hasConverged(double testError)has this training converged already?Definition NeuralNet.cxx:485; TMVA::DNN::Settings::minimizerTypeMinimizerType minimizerType() constwhich minimizer shall be used (e.g. SGD)Definition NeuralNet.h:774; TMVA::DNN::Settings::m_dropOutstd::vector< double > m_dropOutDefinition NeuralNet.h:850; TMVA::DNN::Settings::m_minProgressdouble m_minProgresscurrent limits for the progress barDefinition NeuralNet.h:833; TMVA::DNN::Settings::cyclevirtual void cycle(double progress, TString text)Definition NeuralNet.h:799; TMVA::DNN::Settings::setProgressLimitsvirtual void setProgressLimits(double minProgress=0, double maxProgress=100)Definition NeuralNet.h:790; TMVA::DNN::Settings::m_maxProgressd",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:73060,Testability,test,testIteration,73060,"() constget the momentum (e.g. for SGD)Definition NeuralNet.h:772; TMVA::DNN::Settings::count_Esize_t count_EDefinition NeuralNet.h:842; TMVA::DNN::Settings::m_timerTimer m_timertimer for monitoringDefinition NeuralNet.h:832; TMVA::DNN::Settings::testRepetitionssize_t testRepetitions() consthow often is the test data testedDefinition NeuralNet.h:768; TMVA::DNN::Settings::clearvoid clear(std::string histoName)for monitoringDefinition NeuralNet.h:824; TMVA::DNN::Settings::endTestCyclevirtual void endTestCycle()callback for monitoring and logggingDefinition NeuralNet.h:805; TMVA::DNN::Settings::fMinimizerTypeMinimizerType fMinimizerTypeDefinition NeuralNet.h:855; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x, double y)for monitoringDefinition NeuralNet.h:822; TMVA::DNN::Settings::setMonitoringvoid setMonitoring(std::shared_ptr< Monitoring > ptrMonitoring)prepared for monitoringDefinition NeuralNet.h:764; TMVA::DNN::Settings::testIterationvirtual void testIteration()callback for monitoring and logggingDefinition NeuralNet.h:806; TMVA::DNN::Settings::m_convergenceStepssize_t m_convergenceStepsnumber of steps without improvement to consider the DNN to have convergedDefinition NeuralNet.h:837; TMVA::DNN::Settings::hasConvergedvirtual bool hasConverged(double testError)has this training converged already?Definition NeuralNet.cxx:485; TMVA::DNN::Settings::minimizerTypeMinimizerType minimizerType() constwhich minimizer shall be used (e.g. SGD)Definition NeuralNet.h:774; TMVA::DNN::Settings::m_dropOutstd::vector< double > m_dropOutDefinition NeuralNet.h:850; TMVA::DNN::Settings::m_minProgressdouble m_minProgresscurrent limits for the progress barDefinition NeuralNet.h:833; TMVA::DNN::Settings::cyclevirtual void cycle(double progress, TString text)Definition NeuralNet.h:799; TMVA::DNN::Settings::setProgressLimitsvirtual void setProgressLimits(double minProgress=0, double maxProgress=100)Definition NeuralNet.h:790; TMVA::DNN::Settings::m_maxProgressd",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:73103,Testability,log,logggingDefinition,73103,"() constget the momentum (e.g. for SGD)Definition NeuralNet.h:772; TMVA::DNN::Settings::count_Esize_t count_EDefinition NeuralNet.h:842; TMVA::DNN::Settings::m_timerTimer m_timertimer for monitoringDefinition NeuralNet.h:832; TMVA::DNN::Settings::testRepetitionssize_t testRepetitions() consthow often is the test data testedDefinition NeuralNet.h:768; TMVA::DNN::Settings::clearvoid clear(std::string histoName)for monitoringDefinition NeuralNet.h:824; TMVA::DNN::Settings::endTestCyclevirtual void endTestCycle()callback for monitoring and logggingDefinition NeuralNet.h:805; TMVA::DNN::Settings::fMinimizerTypeMinimizerType fMinimizerTypeDefinition NeuralNet.h:855; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x, double y)for monitoringDefinition NeuralNet.h:822; TMVA::DNN::Settings::setMonitoringvoid setMonitoring(std::shared_ptr< Monitoring > ptrMonitoring)prepared for monitoringDefinition NeuralNet.h:764; TMVA::DNN::Settings::testIterationvirtual void testIteration()callback for monitoring and logggingDefinition NeuralNet.h:806; TMVA::DNN::Settings::m_convergenceStepssize_t m_convergenceStepsnumber of steps without improvement to consider the DNN to have convergedDefinition NeuralNet.h:837; TMVA::DNN::Settings::hasConvergedvirtual bool hasConverged(double testError)has this training converged already?Definition NeuralNet.cxx:485; TMVA::DNN::Settings::minimizerTypeMinimizerType minimizerType() constwhich minimizer shall be used (e.g. SGD)Definition NeuralNet.h:774; TMVA::DNN::Settings::m_dropOutstd::vector< double > m_dropOutDefinition NeuralNet.h:850; TMVA::DNN::Settings::m_minProgressdouble m_minProgresscurrent limits for the progress barDefinition NeuralNet.h:833; TMVA::DNN::Settings::cyclevirtual void cycle(double progress, TString text)Definition NeuralNet.h:799; TMVA::DNN::Settings::setProgressLimitsvirtual void setProgressLimits(double minProgress=0, double maxProgress=100)Definition NeuralNet.h:790; TMVA::DNN::Settings::m_maxProgressd",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:73370,Testability,test,testError,73370,"ten is the test data testedDefinition NeuralNet.h:768; TMVA::DNN::Settings::clearvoid clear(std::string histoName)for monitoringDefinition NeuralNet.h:824; TMVA::DNN::Settings::endTestCyclevirtual void endTestCycle()callback for monitoring and logggingDefinition NeuralNet.h:805; TMVA::DNN::Settings::fMinimizerTypeMinimizerType fMinimizerTypeDefinition NeuralNet.h:855; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x, double y)for monitoringDefinition NeuralNet.h:822; TMVA::DNN::Settings::setMonitoringvoid setMonitoring(std::shared_ptr< Monitoring > ptrMonitoring)prepared for monitoringDefinition NeuralNet.h:764; TMVA::DNN::Settings::testIterationvirtual void testIteration()callback for monitoring and logggingDefinition NeuralNet.h:806; TMVA::DNN::Settings::m_convergenceStepssize_t m_convergenceStepsnumber of steps without improvement to consider the DNN to have convergedDefinition NeuralNet.h:837; TMVA::DNN::Settings::hasConvergedvirtual bool hasConverged(double testError)has this training converged already?Definition NeuralNet.cxx:485; TMVA::DNN::Settings::minimizerTypeMinimizerType minimizerType() constwhich minimizer shall be used (e.g. SGD)Definition NeuralNet.h:774; TMVA::DNN::Settings::m_dropOutstd::vector< double > m_dropOutDefinition NeuralNet.h:850; TMVA::DNN::Settings::m_minProgressdouble m_minProgresscurrent limits for the progress barDefinition NeuralNet.h:833; TMVA::DNN::Settings::cyclevirtual void cycle(double progress, TString text)Definition NeuralNet.h:799; TMVA::DNN::Settings::setProgressLimitsvirtual void setProgressLimits(double minProgress=0, double maxProgress=100)Definition NeuralNet.h:790; TMVA::DNN::Settings::m_maxProgressdouble m_maxProgresscurrent limits for the progress barDefinition NeuralNet.h:834; TMVA::DNN::Settings::endTrainCyclevirtual void endTrainCycle(double)callback for monitoring and loggingDefinition NeuralNet.h:788; TMVA::DNN::Settings::count_dEsize_t count_dEDefinition NeuralNet.h:843; TMVA::DNN::Se",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:74247,Testability,log,loggingDefinition,74247," of steps without improvement to consider the DNN to have convergedDefinition NeuralNet.h:837; TMVA::DNN::Settings::hasConvergedvirtual bool hasConverged(double testError)has this training converged already?Definition NeuralNet.cxx:485; TMVA::DNN::Settings::minimizerTypeMinimizerType minimizerType() constwhich minimizer shall be used (e.g. SGD)Definition NeuralNet.h:774; TMVA::DNN::Settings::m_dropOutstd::vector< double > m_dropOutDefinition NeuralNet.h:850; TMVA::DNN::Settings::m_minProgressdouble m_minProgresscurrent limits for the progress barDefinition NeuralNet.h:833; TMVA::DNN::Settings::cyclevirtual void cycle(double progress, TString text)Definition NeuralNet.h:799; TMVA::DNN::Settings::setProgressLimitsvirtual void setProgressLimits(double minProgress=0, double maxProgress=100)Definition NeuralNet.h:790; TMVA::DNN::Settings::m_maxProgressdouble m_maxProgresscurrent limits for the progress barDefinition NeuralNet.h:834; TMVA::DNN::Settings::endTrainCyclevirtual void endTrainCycle(double)callback for monitoring and loggingDefinition NeuralNet.h:788; TMVA::DNN::Settings::count_dEsize_t count_dEDefinition NeuralNet.h:843; TMVA::DNN::Settings::drawSamplevirtual void drawSample(const std::vector< double > &, const std::vector< double > &, const std::vector< double > &, double)callback for monitoring and loggingDefinition NeuralNet.h:807; TMVA::DNN::Settings::learningRatedouble learningRate() constget the learning rateDefinition NeuralNet.h:771; TMVA::DNN::Settings::m_dropRepetitionsdouble m_dropRepetitionsDefinition NeuralNet.h:849; TMVA::DNN::Settings::dropFractionsconst std::vector< double > & dropFractions() constDefinition NeuralNet.h:762; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x)for monitoringDefinition NeuralNet.h:821; TMVA::DNN::Settings::~Settingsvirtual ~Settings()d'torDefinition NeuralNet.cxx:261; TMVA::DNN::Settings::m_convergenceCountsize_t m_convergenceCountDefinition NeuralNet.h:857; TMVA::DNN::Settings::m_regulariza",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:74537,Testability,log,loggingDefinition,74537,":Settings::minimizerTypeMinimizerType minimizerType() constwhich minimizer shall be used (e.g. SGD)Definition NeuralNet.h:774; TMVA::DNN::Settings::m_dropOutstd::vector< double > m_dropOutDefinition NeuralNet.h:850; TMVA::DNN::Settings::m_minProgressdouble m_minProgresscurrent limits for the progress barDefinition NeuralNet.h:833; TMVA::DNN::Settings::cyclevirtual void cycle(double progress, TString text)Definition NeuralNet.h:799; TMVA::DNN::Settings::setProgressLimitsvirtual void setProgressLimits(double minProgress=0, double maxProgress=100)Definition NeuralNet.h:790; TMVA::DNN::Settings::m_maxProgressdouble m_maxProgresscurrent limits for the progress barDefinition NeuralNet.h:834; TMVA::DNN::Settings::endTrainCyclevirtual void endTrainCycle(double)callback for monitoring and loggingDefinition NeuralNet.h:788; TMVA::DNN::Settings::count_dEsize_t count_dEDefinition NeuralNet.h:843; TMVA::DNN::Settings::drawSamplevirtual void drawSample(const std::vector< double > &, const std::vector< double > &, const std::vector< double > &, double)callback for monitoring and loggingDefinition NeuralNet.h:807; TMVA::DNN::Settings::learningRatedouble learningRate() constget the learning rateDefinition NeuralNet.h:771; TMVA::DNN::Settings::m_dropRepetitionsdouble m_dropRepetitionsDefinition NeuralNet.h:849; TMVA::DNN::Settings::dropFractionsconst std::vector< double > & dropFractions() constDefinition NeuralNet.h:762; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x)for monitoringDefinition NeuralNet.h:821; TMVA::DNN::Settings::~Settingsvirtual ~Settings()d'torDefinition NeuralNet.cxx:261; TMVA::DNN::Settings::m_convergenceCountsize_t m_convergenceCountDefinition NeuralNet.h:857; TMVA::DNN::Settings::m_regularizationEnumRegularization m_regularizationDefinition NeuralNet.h:847; TMVA::DNN::Settings::repetitionsint repetitions() consthow many steps have to be gone until the batch is changedDefinition NeuralNet.h:773; TMVA::DNN::Settings::m_minErrordouble m",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:75514,Testability,test,testSamplevirtual,75514,"7; TMVA::DNN::Settings::learningRatedouble learningRate() constget the learning rateDefinition NeuralNet.h:771; TMVA::DNN::Settings::m_dropRepetitionsdouble m_dropRepetitionsDefinition NeuralNet.h:849; TMVA::DNN::Settings::dropFractionsconst std::vector< double > & dropFractions() constDefinition NeuralNet.h:762; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x)for monitoringDefinition NeuralNet.h:821; TMVA::DNN::Settings::~Settingsvirtual ~Settings()d'torDefinition NeuralNet.cxx:261; TMVA::DNN::Settings::m_convergenceCountsize_t m_convergenceCountDefinition NeuralNet.h:857; TMVA::DNN::Settings::m_regularizationEnumRegularization m_regularizationDefinition NeuralNet.h:847; TMVA::DNN::Settings::repetitionsint repetitions() consthow many steps have to be gone until the batch is changedDefinition NeuralNet.h:773; TMVA::DNN::Settings::m_minErrordouble m_minErrorDefinition NeuralNet.h:859; TMVA::DNN::Settings::testSamplevirtual void testSample(double, double, double, double)virtual function to be used for monitoring (callback)Definition NeuralNet.h:781; TMVA::DNN::Settings::plotvoid plot(std::string histoName, std::string options, int pad, EColor color)for monitoringDefinition NeuralNet.h:823; TMVA::DNN::Settings::startTrainCyclevirtual void startTrainCycle()Definition NeuralNet.h:782; TMVA::DNN::Settings::convergenceStepssize_t convergenceSteps() consthow many steps until training is deemed to have convergedDefinition NeuralNet.h:766; TMVA::DNN::Settings::m_factorWeightDecaydouble m_factorWeightDecayDefinition NeuralNet.h:840; TMVA::DNN::Settings::factorWeightDecaydouble factorWeightDecay() constget the weight-decay factorDefinition NeuralNet.h:769; TMVA::DNN::Settings::count_mb_dEsize_t count_mb_dEDefinition NeuralNet.h:845; TMVA::DNN::Settings::m_useMultithreadingbool m_useMultithreadingDefinition NeuralNet.h:863; TMVA::DNN::Settings::count_mb_Esize_t count_mb_EDefinition NeuralNet.h:844; TMVA::DNN::Settings::existsbool exists(std::string hist",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:75537,Testability,test,testSample,75537,"7; TMVA::DNN::Settings::learningRatedouble learningRate() constget the learning rateDefinition NeuralNet.h:771; TMVA::DNN::Settings::m_dropRepetitionsdouble m_dropRepetitionsDefinition NeuralNet.h:849; TMVA::DNN::Settings::dropFractionsconst std::vector< double > & dropFractions() constDefinition NeuralNet.h:762; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x)for monitoringDefinition NeuralNet.h:821; TMVA::DNN::Settings::~Settingsvirtual ~Settings()d'torDefinition NeuralNet.cxx:261; TMVA::DNN::Settings::m_convergenceCountsize_t m_convergenceCountDefinition NeuralNet.h:857; TMVA::DNN::Settings::m_regularizationEnumRegularization m_regularizationDefinition NeuralNet.h:847; TMVA::DNN::Settings::repetitionsint repetitions() consthow many steps have to be gone until the batch is changedDefinition NeuralNet.h:773; TMVA::DNN::Settings::m_minErrordouble m_minErrorDefinition NeuralNet.h:859; TMVA::DNN::Settings::testSamplevirtual void testSample(double, double, double, double)virtual function to be used for monitoring (callback)Definition NeuralNet.h:781; TMVA::DNN::Settings::plotvoid plot(std::string histoName, std::string options, int pad, EColor color)for monitoringDefinition NeuralNet.h:823; TMVA::DNN::Settings::startTrainCyclevirtual void startTrainCycle()Definition NeuralNet.h:782; TMVA::DNN::Settings::convergenceStepssize_t convergenceSteps() consthow many steps until training is deemed to have convergedDefinition NeuralNet.h:766; TMVA::DNN::Settings::m_factorWeightDecaydouble m_factorWeightDecayDefinition NeuralNet.h:840; TMVA::DNN::Settings::factorWeightDecaydouble factorWeightDecay() constget the weight-decay factorDefinition NeuralNet.h:769; TMVA::DNN::Settings::count_mb_dEsize_t count_mb_dEDefinition NeuralNet.h:845; TMVA::DNN::Settings::m_useMultithreadingbool m_useMultithreadingDefinition NeuralNet.h:863; TMVA::DNN::Settings::count_mb_Esize_t count_mb_EDefinition NeuralNet.h:844; TMVA::DNN::Settings::existsbool exists(std::string hist",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:77330,Testability,log,loggingDefinition,77330,"N::Settings::count_mb_dEsize_t count_mb_dEDefinition NeuralNet.h:845; TMVA::DNN::Settings::m_useMultithreadingbool m_useMultithreadingDefinition NeuralNet.h:863; TMVA::DNN::Settings::count_mb_Esize_t count_mb_EDefinition NeuralNet.h:844; TMVA::DNN::Settings::existsbool exists(std::string histoName)for monitoringDefinition NeuralNet.h:825; TMVA::DNN::Settings::maxConvergenceCountsize_t maxConvergenceCount() constreturns the max convergence count so farDefinition NeuralNet.h:828; TMVA::DNN::Settings::padsvoid pads(int numPads)preparation for monitoringDefinition NeuralNet.h:818; TMVA::DNN::Settings::m_testRepetitionssize_t m_testRepetitionsDefinition NeuralNet.h:839; TMVA::DNN::Settings::fLearningRatedouble fLearningRateDefinition NeuralNet.h:852; TMVA::DNN::Settings::fMomentumdouble fMomentumDefinition NeuralNet.h:853; TMVA::DNN::Settings::batchSizesize_t batchSize() constmini-batch sizeDefinition NeuralNet.h:767; TMVA::DNN::Settings::computeResultvirtual void computeResult(const Net &, std::vector< double > &)callback for monitoring and loggingDefinition NeuralNet.h:809; TMVA::DNN::Settings::fMonitoringstd::shared_ptr< Monitoring > fMonitoringDefinition NeuralNet.h:865; TMVA::DNN::Settings::dropRepetitionssize_t dropRepetitions() constDefinition NeuralNet.h:761; TMVA::DNN::Settings::createvoid create(std::string histoName, int bins, double min, double max)for monitoringDefinition NeuralNet.h:819; TMVA::DNN::Settings::fRepetitionsint fRepetitionsDefinition NeuralNet.h:854; TMVA::DNN::Settings::minErrorsize_t minError() constreturns the smallest error so farDefinition NeuralNet.h:829; TMVA::DNN::Settings::startTrainingvirtual void startTraining()Definition NeuralNet.h:795; TMVA::DNN::Settings::m_maxConvergenceCountsize_t m_maxConvergenceCountDefinition NeuralNet.h:858; TMVA::DNN::Settings::startTestCyclevirtual void startTestCycle()callback for monitoring and logggingDefinition NeuralNet.h:804; TMVA::DNN::SteepestSteepest Gradient Descent algorithm (SGD)Definition Neur",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:78167,Testability,log,logggingDefinition,78167,"hSizesize_t batchSize() constmini-batch sizeDefinition NeuralNet.h:767; TMVA::DNN::Settings::computeResultvirtual void computeResult(const Net &, std::vector< double > &)callback for monitoring and loggingDefinition NeuralNet.h:809; TMVA::DNN::Settings::fMonitoringstd::shared_ptr< Monitoring > fMonitoringDefinition NeuralNet.h:865; TMVA::DNN::Settings::dropRepetitionssize_t dropRepetitions() constDefinition NeuralNet.h:761; TMVA::DNN::Settings::createvoid create(std::string histoName, int bins, double min, double max)for monitoringDefinition NeuralNet.h:819; TMVA::DNN::Settings::fRepetitionsint fRepetitionsDefinition NeuralNet.h:854; TMVA::DNN::Settings::minErrorsize_t minError() constreturns the smallest error so farDefinition NeuralNet.h:829; TMVA::DNN::Settings::startTrainingvirtual void startTraining()Definition NeuralNet.h:795; TMVA::DNN::Settings::m_maxConvergenceCountsize_t m_maxConvergenceCountDefinition NeuralNet.h:858; TMVA::DNN::Settings::startTestCyclevirtual void startTestCycle()callback for monitoring and logggingDefinition NeuralNet.h:804; TMVA::DNN::SteepestSteepest Gradient Descent algorithm (SGD)Definition NeuralNet.h:334; TMVA::DNN::Steepest::m_repetitionssize_t m_repetitionsDefinition NeuralNet.h:337; TMVA::DNN::Steepest::m_betadouble m_betainternal parameter (momentum)Definition NeuralNet.h:372; TMVA::DNN::Steepest::m_localGradientsstd::vector< double > m_localGradientslocal gradients for reuse in thread.Definition NeuralNet.h:376; TMVA::DNN::Steepest::m_prevGradientsstd::vector< double > m_prevGradientsvector remembers the gradients of the previous stepDefinition NeuralNet.h:373; TMVA::DNN::Steepest::m_alphadouble m_alphainternal parameter (learningRate)Definition NeuralNet.h:371; TMVA::DNN::Steepest::m_localWeightsstd::vector< double > m_localWeightslocal weights for reuse in thread.Definition NeuralNet.h:375; TMVA::DNN::Steepest::operator()double operator()(Function &fitnessFunction, Weights &weights, PassThrough &passThrough)operator to call",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:1834,Usability,clear,clear,1834,"////////////////////////////////////////////////////////////; 23 ; 24#ifndef TMVA_NEURAL_NET; 25#define TMVA_NEURAL_NET; 26#pragma once; 27 ; 28#include <vector>; 29#include <iostream>; 30#include <algorithm>; 31#include <iterator>; 32#include <functional>; 33#include <tuple>; 34#include <cmath>; 35#include <cassert>; 36#include <random>; 37#include <thread>; 38#include <future>; 39#include <type_traits>; 40#include <string>; 41#include <utility>; 42 ; 43#include ""Pattern.h""; 44#include ""Monitoring.h""; 45 ; 46#include ""TApplication.h""; 47#include ""Timer.h""; 48 ; 49#include ""TH1F.h""; 50#include ""TH2F.h""; 51 ; 52#include <fenv.h> // turn on or off exceptions for NaN and other numeric exceptions; 53 ; 54 ; 55namespace TMVA; 56{; 57 ; 58 class IPythonInteractive;; 59 ; 60 namespace DNN; 61 {; 62 ; 63 // double gaussDoubl (edouble mean, double sigma);; 64 ; 65 ; 66 ; 67 double gaussDouble (double mean, double sigma);; 68 double uniformDouble (double minValue, double maxValue);; 69 int randomInt (int maxValue);; 70 ; 71 ; 72 ; 73 ; 74 class MeanVariance; 75 {; 76 public:; 77 MeanVariance(); 78 : m_n(0); 79 , m_sumWeights(0); 80 , m_mean(0); 81 , m_squared(0); 82 {}; 83 ; 84 inline void clear(); 85 {; 86 m_n = 0;; 87 m_sumWeights = 0;; 88 m_mean = 0;; 89 m_squared = 0;; 90 }; 91 ; 92 template <typename T>; 93 inline void add(T value, double weight = 1.0); 94 {; 95 ++m_n; // a value has been added; 96 ; 97 if (m_n == 1) // initialization; 98 {; 99 m_mean = value;; 100 m_squared = 0.0;; 101 m_sumWeights = weight;; 102 return;; 103 }; 104 ; 105 double tmpWeight = m_sumWeights+weight;; 106 double Q = value - m_mean;; 107 ; 108 double R = Q*weight/tmpWeight;; 109 m_mean += R;; 110 m_squared += m_sumWeights*R*Q;; 111 ; 112 m_sumWeights = tmpWeight;; 113 }; 114 ; 115 template <typename ITERATOR>; 116 inline void add (ITERATOR itBegin, ITERATOR itEnd); 117 {; 118 for (ITERATOR it = itBegin; it != itEnd; ++it); 119 add (*it);; 120 }; 121 ; 122 ; 123 ; 124 inline int count() const {",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:8818,Usability,learn,learningRate,8818,"tTargetGradient, typename ItGradient>; 281 void update (ItSource itSource, ItSource itSourceEnd,; 282 ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd,; 283 ItTargetGradient itTargetGradientBegin,; 284 ItGradient itGradient);; 285 ; 286 ; 287 ; 288 template <EnumRegularization Regularization, typename ItSource, typename ItDelta, typename ItTargetGradient, typename ItGradient, typename ItWeight>; 289 void update (ItSource itSource, ItSource itSourceEnd,; 290 ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd,; 291 ItTargetGradient itTargetGradientBegin,; 292 ItGradient itGradient,; 293 ItWeight itWeight, double weightDecay);; 294 ; 295 ; 296 ; 297 // ----- signature of a minimizer -------------; 298 // class Minimizer; 299 // {; 300 // public:; 301 ; 302 // template <typename Function, typename Variables, typename PassThrough>; 303 // double operator() (Function& fnc, Variables& vars, PassThrough& passThrough); 304 // {; 305 // // auto itVars = begin (vars);; 306 // // auto itVarsEnd = end (vars);; 307 ; 308 // std::vector<double> myweights;; 309 // std::vector<double> gradients;; 310 ; 311 // double value = fnc (passThrough, myweights);; 312 // value = fnc (passThrough, myweights, gradients);; 313 // return value;; 314 // }; 315 // };; 316 ; 317 ; 318 ; 319 ///< list all the minimizer types; 320 enum MinimizerType; 321 {; 322 fSteepest ///< SGD; 323 };; 324 ; 325 ; 326 ; 327 ; 328 ; 329 /*! \brief Steepest Gradient Descent algorithm (SGD); 330 *; 331 * Implements a steepest gradient descent minimization algorithm; 332 */; 333 class Steepest; 334 {; 335 public:; 336 ; 337 size_t m_repetitions;; 338 ; 339 ; 340 /*! \brief c'tor; 341 *; 342 * C'tor; 343 *; 344 * \param learningRate denotes the learning rate for the SGD algorithm; 345 * \param momentum fraction of the velocity which is taken over from the last step; 346 * \param repetitions re-compute the gradients each ""repetitions"" steps; 347 */; 348 Steepest (double learningRate = 1e-4,; 349 double momentum = 0.",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:8843,Usability,learn,learning,8843,"tTargetGradient, typename ItGradient>; 281 void update (ItSource itSource, ItSource itSourceEnd,; 282 ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd,; 283 ItTargetGradient itTargetGradientBegin,; 284 ItGradient itGradient);; 285 ; 286 ; 287 ; 288 template <EnumRegularization Regularization, typename ItSource, typename ItDelta, typename ItTargetGradient, typename ItGradient, typename ItWeight>; 289 void update (ItSource itSource, ItSource itSourceEnd,; 290 ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd,; 291 ItTargetGradient itTargetGradientBegin,; 292 ItGradient itGradient,; 293 ItWeight itWeight, double weightDecay);; 294 ; 295 ; 296 ; 297 // ----- signature of a minimizer -------------; 298 // class Minimizer; 299 // {; 300 // public:; 301 ; 302 // template <typename Function, typename Variables, typename PassThrough>; 303 // double operator() (Function& fnc, Variables& vars, PassThrough& passThrough); 304 // {; 305 // // auto itVars = begin (vars);; 306 // // auto itVarsEnd = end (vars);; 307 ; 308 // std::vector<double> myweights;; 309 // std::vector<double> gradients;; 310 ; 311 // double value = fnc (passThrough, myweights);; 312 // value = fnc (passThrough, myweights, gradients);; 313 // return value;; 314 // }; 315 // };; 316 ; 317 ; 318 ; 319 ///< list all the minimizer types; 320 enum MinimizerType; 321 {; 322 fSteepest ///< SGD; 323 };; 324 ; 325 ; 326 ; 327 ; 328 ; 329 /*! \brief Steepest Gradient Descent algorithm (SGD); 330 *; 331 * Implements a steepest gradient descent minimization algorithm; 332 */; 333 class Steepest; 334 {; 335 public:; 336 ; 337 size_t m_repetitions;; 338 ; 339 ; 340 /*! \brief c'tor; 341 *; 342 * C'tor; 343 *; 344 * \param learningRate denotes the learning rate for the SGD algorithm; 345 * \param momentum fraction of the velocity which is taken over from the last step; 346 * \param repetitions re-compute the gradients each ""repetitions"" steps; 347 */; 348 Steepest (double learningRate = 1e-4,; 349 double momentum = 0.",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:9072,Usability,learn,learningRate,9072,"tTargetGradient, typename ItGradient>; 281 void update (ItSource itSource, ItSource itSourceEnd,; 282 ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd,; 283 ItTargetGradient itTargetGradientBegin,; 284 ItGradient itGradient);; 285 ; 286 ; 287 ; 288 template <EnumRegularization Regularization, typename ItSource, typename ItDelta, typename ItTargetGradient, typename ItGradient, typename ItWeight>; 289 void update (ItSource itSource, ItSource itSourceEnd,; 290 ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd,; 291 ItTargetGradient itTargetGradientBegin,; 292 ItGradient itGradient,; 293 ItWeight itWeight, double weightDecay);; 294 ; 295 ; 296 ; 297 // ----- signature of a minimizer -------------; 298 // class Minimizer; 299 // {; 300 // public:; 301 ; 302 // template <typename Function, typename Variables, typename PassThrough>; 303 // double operator() (Function& fnc, Variables& vars, PassThrough& passThrough); 304 // {; 305 // // auto itVars = begin (vars);; 306 // // auto itVarsEnd = end (vars);; 307 ; 308 // std::vector<double> myweights;; 309 // std::vector<double> gradients;; 310 ; 311 // double value = fnc (passThrough, myweights);; 312 // value = fnc (passThrough, myweights, gradients);; 313 // return value;; 314 // }; 315 // };; 316 ; 317 ; 318 ; 319 ///< list all the minimizer types; 320 enum MinimizerType; 321 {; 322 fSteepest ///< SGD; 323 };; 324 ; 325 ; 326 ; 327 ; 328 ; 329 /*! \brief Steepest Gradient Descent algorithm (SGD); 330 *; 331 * Implements a steepest gradient descent minimization algorithm; 332 */; 333 class Steepest; 334 {; 335 public:; 336 ; 337 size_t m_repetitions;; 338 ; 339 ; 340 /*! \brief c'tor; 341 *; 342 * C'tor; 343 *; 344 * \param learningRate denotes the learning rate for the SGD algorithm; 345 * \param momentum fraction of the velocity which is taken over from the last step; 346 * \param repetitions re-compute the gradients each ""repetitions"" steps; 347 */; 348 Steepest (double learningRate = 1e-4,; 349 double momentum = 0.",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:9202,Usability,learn,learningRate,9202,"nc (passThrough, myweights, gradients);; 313 // return value;; 314 // }; 315 // };; 316 ; 317 ; 318 ; 319 ///< list all the minimizer types; 320 enum MinimizerType; 321 {; 322 fSteepest ///< SGD; 323 };; 324 ; 325 ; 326 ; 327 ; 328 ; 329 /*! \brief Steepest Gradient Descent algorithm (SGD); 330 *; 331 * Implements a steepest gradient descent minimization algorithm; 332 */; 333 class Steepest; 334 {; 335 public:; 336 ; 337 size_t m_repetitions;; 338 ; 339 ; 340 /*! \brief c'tor; 341 *; 342 * C'tor; 343 *; 344 * \param learningRate denotes the learning rate for the SGD algorithm; 345 * \param momentum fraction of the velocity which is taken over from the last step; 346 * \param repetitions re-compute the gradients each ""repetitions"" steps; 347 */; 348 Steepest (double learningRate = 1e-4,; 349 double momentum = 0.5,; 350 size_t repetitions = 10); 351 : m_repetitions (repetitions); 352 , m_alpha (learningRate); 353 , m_beta (momentum); 354 {}; 355 ; 356 /*! \brief operator to call the steepest gradient descent algorithm; 357 *; 358 * entry point to start the minimization procedure; 359 *; 360 * \param fitnessFunction (templated) function which has to be provided. This function is minimized; 361 * \param weights (templated) a reference to a container of weights. The result of the minimization procedure; 362 * is returned via this reference (needs to support std::begin and std::end; 363 * \param passThrough (templated) object which can hold any data which the fitness function needs. This object; 364 * is not touched by the minimizer; This object is provided to the fitness function when; 365 * called; 366 */; 367 template <typename Function, typename Weights, typename PassThrough>; 368 double operator() (Function& fitnessFunction, Weights& weights, PassThrough& passThrough);; 369 ; 370 ; 371 double m_alpha; ///< internal parameter (learningRate); 372 double m_beta; ///< internal parameter (momentum); 373 std::vector<double> m_prevGradients; ///< vector remembers the gradie",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
https://root.cern/doc/master/NeuralNet_8h_source.html:10153,Usability,learn,learningRate,10153,"le momentum = 0.5,; 350 size_t repetitions = 10); 351 : m_repetitions (repetitions); 352 , m_alpha (learningRate); 353 , m_beta (momentum); 354 {}; 355 ; 356 /*! \brief operator to call the steepest gradient descent algorithm; 357 *; 358 * entry point to start the minimization procedure; 359 *; 360 * \param fitnessFunction (templated) function which has to be provided. This function is minimized; 361 * \param weights (templated) a reference to a container of weights. The result of the minimization procedure; 362 * is returned via this reference (needs to support std::begin and std::end; 363 * \param passThrough (templated) object which can hold any data which the fitness function needs. This object; 364 * is not touched by the minimizer; This object is provided to the fitness function when; 365 * called; 366 */; 367 template <typename Function, typename Weights, typename PassThrough>; 368 double operator() (Function& fitnessFunction, Weights& weights, PassThrough& passThrough);; 369 ; 370 ; 371 double m_alpha; ///< internal parameter (learningRate); 372 double m_beta; ///< internal parameter (momentum); 373 std::vector<double> m_prevGradients; ///< vector remembers the gradients of the previous step; 374 ; 375 std::vector<double> m_localWeights; ///< local weights for reuse in thread.; 376 std::vector<double> m_localGradients; ///< local gradients for reuse in thread.; 377 };; 378 ; 379 ; 380 ; 381 ; 382 ; 383 ; 384 ; 385 ; 386 ; 387 ; 388 ; 389 ; 390 ; 391 ; 392 ; 393 ; 394 ; 395 ; 396 template <typename ItOutput, typename ItTruth, typename ItDelta, typename ItInvActFnc>; 397 double sumOfSquares (ItOutput itOutputBegin, ItOutput itOutputEnd, ItTruth itTruthBegin, ItTruth itTruthEnd, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc itInvActFnc, double patternWeight);; 398 ; 399 ; 400 ; 401 template <typename ItProbability, typename ItTruth, typename ItDelta, typename ItInvActFnc>; 402 double crossEntropy (ItProbability itProbabilityBegin, ItProbability itProbability",MatchSource.WIKI,doc/master/NeuralNet_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html
