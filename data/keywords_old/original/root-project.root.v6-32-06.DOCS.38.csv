id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt:477,Performance,load,load,477,"Manual Data Model Evolution Capabilities - the user documentation. 1. Overview. The automatic data model schema evolution implemented in ROOT makes it possible; to read back the serialized data object in the situation when the definition of; the classes those objects represent changed slightly (some of the data members were; removed or some new ones added). It is also possible to manually specify the rules; for more sophisticated data transformations done while reading to load the serialized; objects into data structures that changed quite significantly. ROOT provides two interface enabling users to specify the conversion rules. The; first way is to define a rule in the dictionary file and the second way is to insert; it to the TClass object using the C++ API. There are two types of conversion rules. The first of them, the normal rules, are; the ones that should be used in the most of the cases. They provide a buffered input; data and an address of the in-memory target object and allow user to specify the; conversion function mapping the data being read to the output format. The second type; of the rules, the raw rules, also provide the pointer to the target object but the; input is a raw TBuffer object containing the input data member declared as an input; to the rule. This type of a rule is provided mainly to handle the file format changes; that couldn't have been handled otherwise and in general should not be used unless there; is no other option. 2. The dictionaries. The most convenient place to specify the conversion rules is a dictionary. One can; do that either in CINT's LinkDef file or in the selection xml file being fed to genreflex.; The syntax of the rules is the following:. * For CINT dictionaries:. #pragma read \; sourceClass=""ClassA"" \; source=""double m_a; double m_b; double m_c"" \; version=""[4-5,7,9,12-]"" \; checksum=""[12345,123456]"" \; targetClass=""ClassB"" \; target=""m_x"" \; embed=""true"" \; include=""iostream,cstdlib"" \; code=""{m_x = onfile.m_a * onfil",MatchSource.DOCS,io/doc/DataModelEvolution.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt
https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt:3060,Performance,cache,cached,3060,"aw \; sourceClass=""TAxis"" \; source=""fXbins"" \; targetClass=""TAxis"" \; target=""fXbins"" \; version=""[-5]"" \; include=""TAxis.h"" \; code=""\; {\; Float_t * xbins=0; \; Int_t n = buffer.ReadArray( xbins ); \; fXbins.Set( xbins ); \; }"". * For REFLEX dictionaries:. <ioread sourceClass=""ClassA""; source=""double m_a; double m_b; double m_c""; version=""[4-5,7,9,12-]""; checksum=""[12345,123456]""; targetClass=""ClassB""; target=""m_x""; embed=""true""; include=""iostream,cstdlib"">; <![CDATA[; m_x = onfile.m_a * onfile.m_b * onfile.m_c;; ]] >; </ioread>. <ioreadraw sourceClass=""TAxis""; source=""fXbins""; targetClass=""TAxis""; target=""fXbins""; version=""[-5]""; include=""TAxis.h"">; <![CDATA[; Float_t *xbins = 0;; Int_t n = buffer.ReadArray( xbins ) ;; fXbins.Set( xbins );; ]] >; </ioreadraw>. The variables in the rules have the following meaning:. * sourceClass - The field defines the on-disk class that is the input for the rule.; * source - A semicolon-separated list of values defining the source class data members; that need to be cached and accessible via object proxy when the rule is; executed. The values are either the names of the data members or the type-name; pairs (separated by a space). If types are specified then the ondisk structure; can be generated and used in the code snippet defined by the user.; * version - A list of versions of the source class that can be an input for this rule.; The list has to be enclosed in a square bracket and be a comma-separated; list of versions or version ranges. The version is an integer number, whereas; the version range is one of the following:; – ""a-b"" - a and b are integers and the expression means all the numbers between; and including a and b; – ""-a"" - a is an integer and the expression means all the version numbers smaller; than or equal to a; – ""a-"" - a is an integer and the expression means all the version numbers greater; than or equal to a; * checksum - A list of checksums of the source class that can be an input for this; rule. The list h",MatchSource.DOCS,io/doc/DataModelEvolution.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt
https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt:1855,Security,checksum,checksum,1855,"at should be used in the most of the cases. They provide a buffered input; data and an address of the in-memory target object and allow user to specify the; conversion function mapping the data being read to the output format. The second type; of the rules, the raw rules, also provide the pointer to the target object but the; input is a raw TBuffer object containing the input data member declared as an input; to the rule. This type of a rule is provided mainly to handle the file format changes; that couldn't have been handled otherwise and in general should not be used unless there; is no other option. 2. The dictionaries. The most convenient place to specify the conversion rules is a dictionary. One can; do that either in CINT's LinkDef file or in the selection xml file being fed to genreflex.; The syntax of the rules is the following:. * For CINT dictionaries:. #pragma read \; sourceClass=""ClassA"" \; source=""double m_a; double m_b; double m_c"" \; version=""[4-5,7,9,12-]"" \; checksum=""[12345,123456]"" \; targetClass=""ClassB"" \; target=""m_x"" \; embed=""true"" \; include=""iostream,cstdlib"" \; code=""{m_x = onfile.m_a * onfile.m_b * onfile.m_c; }"" \. #pragma readraw \; sourceClass=""TAxis"" \; source=""fXbins"" \; targetClass=""TAxis"" \; target=""fXbins"" \; version=""[-5]"" \; include=""TAxis.h"" \; code=""\; {\; Float_t * xbins=0; \; Int_t n = buffer.ReadArray( xbins ); \; fXbins.Set( xbins ); \; }"". * For REFLEX dictionaries:. <ioread sourceClass=""ClassA""; source=""double m_a; double m_b; double m_c""; version=""[4-5,7,9,12-]""; checksum=""[12345,123456]""; targetClass=""ClassB""; target=""m_x""; embed=""true""; include=""iostream,cstdlib"">; <![CDATA[; m_x = onfile.m_a * onfile.m_b * onfile.m_c;; ]] >; </ioread>. <ioreadraw sourceClass=""TAxis""; source=""fXbins""; targetClass=""TAxis""; target=""fXbins""; version=""[-5]""; include=""TAxis.h"">; <![CDATA[; Float_t *xbins = 0;; Int_t n = buffer.ReadArray( xbins ) ;; fXbins.Set( xbins );; ]] >; </ioreadraw>. The variables in the rules have the following mean",MatchSource.DOCS,io/doc/DataModelEvolution.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt
https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt:2400,Security,checksum,checksum,2400,"general should not be used unless there; is no other option. 2. The dictionaries. The most convenient place to specify the conversion rules is a dictionary. One can; do that either in CINT's LinkDef file or in the selection xml file being fed to genreflex.; The syntax of the rules is the following:. * For CINT dictionaries:. #pragma read \; sourceClass=""ClassA"" \; source=""double m_a; double m_b; double m_c"" \; version=""[4-5,7,9,12-]"" \; checksum=""[12345,123456]"" \; targetClass=""ClassB"" \; target=""m_x"" \; embed=""true"" \; include=""iostream,cstdlib"" \; code=""{m_x = onfile.m_a * onfile.m_b * onfile.m_c; }"" \. #pragma readraw \; sourceClass=""TAxis"" \; source=""fXbins"" \; targetClass=""TAxis"" \; target=""fXbins"" \; version=""[-5]"" \; include=""TAxis.h"" \; code=""\; {\; Float_t * xbins=0; \; Int_t n = buffer.ReadArray( xbins ); \; fXbins.Set( xbins ); \; }"". * For REFLEX dictionaries:. <ioread sourceClass=""ClassA""; source=""double m_a; double m_b; double m_c""; version=""[4-5,7,9,12-]""; checksum=""[12345,123456]""; targetClass=""ClassB""; target=""m_x""; embed=""true""; include=""iostream,cstdlib"">; <![CDATA[; m_x = onfile.m_a * onfile.m_b * onfile.m_c;; ]] >; </ioread>. <ioreadraw sourceClass=""TAxis""; source=""fXbins""; targetClass=""TAxis""; target=""fXbins""; version=""[-5]""; include=""TAxis.h"">; <![CDATA[; Float_t *xbins = 0;; Int_t n = buffer.ReadArray( xbins ) ;; fXbins.Set( xbins );; ]] >; </ioreadraw>. The variables in the rules have the following meaning:. * sourceClass - The field defines the on-disk class that is the input for the rule.; * source - A semicolon-separated list of values defining the source class data members; that need to be cached and accessible via object proxy when the rule is; executed. The values are either the names of the data members or the type-name; pairs (separated by a space). If types are specified then the ondisk structure; can be generated and used in the code snippet defined by the user.; * version - A list of versions of the source class that can be an inpu",MatchSource.DOCS,io/doc/DataModelEvolution.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt
https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt:3071,Security,access,accessible,3071,"aw \; sourceClass=""TAxis"" \; source=""fXbins"" \; targetClass=""TAxis"" \; target=""fXbins"" \; version=""[-5]"" \; include=""TAxis.h"" \; code=""\; {\; Float_t * xbins=0; \; Int_t n = buffer.ReadArray( xbins ); \; fXbins.Set( xbins ); \; }"". * For REFLEX dictionaries:. <ioread sourceClass=""ClassA""; source=""double m_a; double m_b; double m_c""; version=""[4-5,7,9,12-]""; checksum=""[12345,123456]""; targetClass=""ClassB""; target=""m_x""; embed=""true""; include=""iostream,cstdlib"">; <![CDATA[; m_x = onfile.m_a * onfile.m_b * onfile.m_c;; ]] >; </ioread>. <ioreadraw sourceClass=""TAxis""; source=""fXbins""; targetClass=""TAxis""; target=""fXbins""; version=""[-5]""; include=""TAxis.h"">; <![CDATA[; Float_t *xbins = 0;; Int_t n = buffer.ReadArray( xbins ) ;; fXbins.Set( xbins );; ]] >; </ioreadraw>. The variables in the rules have the following meaning:. * sourceClass - The field defines the on-disk class that is the input for the rule.; * source - A semicolon-separated list of values defining the source class data members; that need to be cached and accessible via object proxy when the rule is; executed. The values are either the names of the data members or the type-name; pairs (separated by a space). If types are specified then the ondisk structure; can be generated and used in the code snippet defined by the user.; * version - A list of versions of the source class that can be an input for this rule.; The list has to be enclosed in a square bracket and be a comma-separated; list of versions or version ranges. The version is an integer number, whereas; the version range is one of the following:; – ""a-b"" - a and b are integers and the expression means all the numbers between; and including a and b; – ""-a"" - a is an integer and the expression means all the version numbers smaller; than or equal to a; – ""a-"" - a is an integer and the expression means all the version numbers greater; than or equal to a; * checksum - A list of checksums of the source class that can be an input for this; rule. The list h",MatchSource.DOCS,io/doc/DataModelEvolution.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt
https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt:3942,Security,checksum,checksum,3942,"xbins );; ]] >; </ioreadraw>. The variables in the rules have the following meaning:. * sourceClass - The field defines the on-disk class that is the input for the rule.; * source - A semicolon-separated list of values defining the source class data members; that need to be cached and accessible via object proxy when the rule is; executed. The values are either the names of the data members or the type-name; pairs (separated by a space). If types are specified then the ondisk structure; can be generated and used in the code snippet defined by the user.; * version - A list of versions of the source class that can be an input for this rule.; The list has to be enclosed in a square bracket and be a comma-separated; list of versions or version ranges. The version is an integer number, whereas; the version range is one of the following:; – ""a-b"" - a and b are integers and the expression means all the numbers between; and including a and b; – ""-a"" - a is an integer and the expression means all the version numbers smaller; than or equal to a; – ""a-"" - a is an integer and the expression means all the version numbers greater; than or equal to a; * checksum - A list of checksums of the source class that can be an input for this; rule. The list has to be enclosed in a square brackets and is a; comma-separated list of integers.; * targetClass - The field is obligatory and defines the name of the in-memory class that; this rule can be applied to.; * target - A semicolon-separated list of target class data member names that this rule; is capable of calculating.; * embed - This property tells the system if the rule should be written in the output; file is some objects of this class are serialized.; * include - A list of header files that should be included in order to provide the func-; tionality used in the code snippet; the list is comma delimited.; * code - An user specified code snippet. The user can assume that in the provided code snippet the following variables; will be defi",MatchSource.DOCS,io/doc/DataModelEvolution.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt
https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt:3963,Security,checksum,checksums,3963,"xbins );; ]] >; </ioreadraw>. The variables in the rules have the following meaning:. * sourceClass - The field defines the on-disk class that is the input for the rule.; * source - A semicolon-separated list of values defining the source class data members; that need to be cached and accessible via object proxy when the rule is; executed. The values are either the names of the data members or the type-name; pairs (separated by a space). If types are specified then the ondisk structure; can be generated and used in the code snippet defined by the user.; * version - A list of versions of the source class that can be an input for this rule.; The list has to be enclosed in a square bracket and be a comma-separated; list of versions or version ranges. The version is an integer number, whereas; the version range is one of the following:; – ""a-b"" - a and b are integers and the expression means all the numbers between; and including a and b; – ""-a"" - a is an integer and the expression means all the version numbers smaller; than or equal to a; – ""a-"" - a is an integer and the expression means all the version numbers greater; than or equal to a; * checksum - A list of checksums of the source class that can be an input for this; rule. The list has to be enclosed in a square brackets and is a; comma-separated list of integers.; * targetClass - The field is obligatory and defines the name of the in-memory class that; this rule can be applied to.; * target - A semicolon-separated list of target class data member names that this rule; is capable of calculating.; * embed - This property tells the system if the rule should be written in the output; file is some objects of this class are serialized.; * include - A list of header files that should be included in order to provide the func-; tionality used in the code snippet; the list is comma delimited.; * code - An user specified code snippet. The user can assume that in the provided code snippet the following variables; will be defi",MatchSource.DOCS,io/doc/DataModelEvolution.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt
https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt:6259,Security,access,accessed,6259,"ber names that this rule; is capable of calculating.; * embed - This property tells the system if the rule should be written in the output; file is some objects of this class are serialized.; * include - A list of header files that should be included in order to provide the func-; tionality used in the code snippet; the list is comma delimited.; * code - An user specified code snippet. The user can assume that in the provided code snippet the following variables; will be defined:. The user provided code snippets have to consist of valid C++ code. The system can do; some preprocessing before wrapping the code into function calls and declare some variables to; facilitate the rule definitions. The user can expect the following variables being predeclared:. * newObj - variable representing the target in-memory object, it’s type is that of the; target object; * oldObj - in normal conversion rules, an object of TVirtualObject class representing the; input data, guaranteed to hold the data members declared in the source property; of the rule; * buffer - in raw conversion rules, an object of TBuﬀer class holding the data member; declared in source property of the rule; * names of the data members of the target object declared in the target property of the; rule declared to be the appropriate type; * onfile.xxx - in normal conversion rules, names of the variables of basic types declared; in the source property of the rule. 3. The C++ API. The schema evolution C++ API consists of two classes: ROOT::TSchemaRuleSet and ROOT::TSchemaRule.; Objects of the TSchemaRule class represent the rules and their fields have exactly the same; meaning as the ones of rules specified in the dictionaries. TSchemaRuleSet objects; manage the sets of rules and ensure their consistency. There can be no conflicting; rules in the rule sets. The rule sets are owned by the TClass objects corresponding to the; target classes defined in the rules and can be accessed using TClass::{Get|Adopt}SchemaRules; ",MatchSource.DOCS,io/doc/DataModelEvolution.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/DataModelEvolution.txt
https://github.com/root-project/root/tree/v6-32-06/io/io/CMakeLists.txt:1592,Integrability,DEPEND,DEPENDENCIES,1592,set(rawfile_local_sources src/RRawFileUnix.cxx); endif (). if (uring); list(APPEND rawfile_local_headers ROOT/RIoUring.hxx); endif (). ROOT_LINKER_LIBRARY(RIO; src/RRawFile.cxx; ${rawfile_local_sources}; src/TArchiveFile.cxx; src/TBufferFile.cxx; src/TBufferText.cxx; src/TBufferIO.cxx; src/TBufferJSON.cxx; src/TBufferMerger.cxx; src/TBufferMergerFile.cxx; src/TCollectionProxyFactory.cxx; src/TContainerConverters.cxx; src/TEmulatedMapProxy.cxx; src/TEmulatedCollectionProxy.cxx; src/TDirectoryFile.cxx; src/TFileCacheRead.cxx; src/TFileMerger.cxx; src/TFree.cxx; src/TFileCacheWrite.cxx; src/TFilePrefetch.cxx; src/TFile.cxx; src/TFPBlock.cxx; src/TGenCollectionStreamer.cxx; src/TGenCollectionProxy.cxx; src/TKey.cxx; src/TKeyMapFile.cxx; src/TLockFile.cxx; src/TMemFile.cxx; src/TMapFile.cxx; src/TMakeProject.cxx; src/TStreamerInfo.cxx; src/TStreamerInfoActions.cxx; src/TStreamerInfoReadBuffer.cxx; src/TStreamerInfoWriteBuffer.cxx; src/TZIPFile.cxx; $<TARGET_OBJECTS:RootPcmObjs>; LIBRARIES; ${CMAKE_DL_LIBS}; DEPENDENCIES; Core; Thread; ). target_include_directories(RIO PRIVATE ${CMAKE_SOURCE_DIR}/core/clib/res); target_link_libraries(RIO PUBLIC ${ROOT_ATOMIC_LIBS}). if(builtin_nlohmannjson); target_include_directories(RIO PRIVATE ${CMAKE_SOURCE_DIR}/builtins); else(); target_link_libraries(RIO PRIVATE nlohmann_json::nlohmann_json); endif(). if(root7); set(RIO_EXTRA_HEADERS ROOT/RFile.hxx); target_sources(RIO PRIVATE v7/src/RFile.cxx); endif(). if(uring); target_link_libraries(RIO PUBLIC ${LIBURING_LIBRARY}); target_include_directories(RIO PRIVATE ${LIBURING_INCLUDE_DIR}); endif(). ROOT_GENERATE_DICTIONARY(G__RIO; ROOT/RRawFile.hxx; ROOT/RRawFileTFile.hxx; ${rawfile_local_headers}; ROOT/TBufferMerger.hxx; TArchiveFile.h; TBufferFile.h; TBufferText.h; TBufferIO.h; TBufferJSON.h; TCollectionProxyFactory.h; TContainerConverters.h; TEmulatedMapProxy.h; TEmulatedCollectionProxy.h; TDirectoryFile.h; TFileCacheRead.h; TFileMerger.h; TFree.h; TFileCacheWrite.h; TFilePrefetch.h; TFi,MatchSource.DOCS,io/io/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/io/io/CMakeLists.txt:2894,Integrability,DEPEND,DEPENDENCIES,2894,"; src/TStreamerInfoReadBuffer.cxx; src/TStreamerInfoWriteBuffer.cxx; src/TZIPFile.cxx; $<TARGET_OBJECTS:RootPcmObjs>; LIBRARIES; ${CMAKE_DL_LIBS}; DEPENDENCIES; Core; Thread; ). target_include_directories(RIO PRIVATE ${CMAKE_SOURCE_DIR}/core/clib/res); target_link_libraries(RIO PUBLIC ${ROOT_ATOMIC_LIBS}). if(builtin_nlohmannjson); target_include_directories(RIO PRIVATE ${CMAKE_SOURCE_DIR}/builtins); else(); target_link_libraries(RIO PRIVATE nlohmann_json::nlohmann_json); endif(). if(root7); set(RIO_EXTRA_HEADERS ROOT/RFile.hxx); target_sources(RIO PRIVATE v7/src/RFile.cxx); endif(). if(uring); target_link_libraries(RIO PUBLIC ${LIBURING_LIBRARY}); target_include_directories(RIO PRIVATE ${LIBURING_INCLUDE_DIR}); endif(). ROOT_GENERATE_DICTIONARY(G__RIO; ROOT/RRawFile.hxx; ROOT/RRawFileTFile.hxx; ${rawfile_local_headers}; ROOT/TBufferMerger.hxx; TArchiveFile.h; TBufferFile.h; TBufferText.h; TBufferIO.h; TBufferJSON.h; TCollectionProxyFactory.h; TContainerConverters.h; TEmulatedMapProxy.h; TEmulatedCollectionProxy.h; TDirectoryFile.h; TFileCacheRead.h; TFileMerger.h; TFree.h; TFileCacheWrite.h; TFilePrefetch.h; TFile.h; TFPBlock.h; TGenCollectionStreamer.h; TGenCollectionProxy.h; TKey.h; TKeyMapFile.h; TLockFile.h; TMemFile.h; TMapFile.h; TMakeProject.h; TStreamerInfoActions.h; TVirtualCollectionIterators.h; TStreamerInfo.h; TZIPFile.h; ${RIO_EXTRA_HEADERS}; STAGE1; MODULE; RIO; LINKDEF; LinkDef.h; OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; Core; Thread; ). # TStreamerInfoReadBuffer in O0 needs 6k on the stack. It is called; # recursively, quickly exhausting the stack. Prevent that by forcing; # the many scope-local vars to share their stack space / become; # registers, thanks to the optimizer.; if(MSVC); set_source_files_properties(src/TStreamerInfoReadBuffer.cxx COMPILE_FLAGS $<IF:$<CONFIG:Debug>,""/Od"",""/O2"">); else(); set_source_files_properties(src/TStreamerInfoReadBuffer.cxx COMPILE_FLAGS ""-O3""); endif(). ROOT_INSTALL_HEADERS(). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,io/io/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/io/io/CMakeLists.txt:3259,Modifiability,CONFIG,CONFIG,3259,"; src/TStreamerInfoReadBuffer.cxx; src/TStreamerInfoWriteBuffer.cxx; src/TZIPFile.cxx; $<TARGET_OBJECTS:RootPcmObjs>; LIBRARIES; ${CMAKE_DL_LIBS}; DEPENDENCIES; Core; Thread; ). target_include_directories(RIO PRIVATE ${CMAKE_SOURCE_DIR}/core/clib/res); target_link_libraries(RIO PUBLIC ${ROOT_ATOMIC_LIBS}). if(builtin_nlohmannjson); target_include_directories(RIO PRIVATE ${CMAKE_SOURCE_DIR}/builtins); else(); target_link_libraries(RIO PRIVATE nlohmann_json::nlohmann_json); endif(). if(root7); set(RIO_EXTRA_HEADERS ROOT/RFile.hxx); target_sources(RIO PRIVATE v7/src/RFile.cxx); endif(). if(uring); target_link_libraries(RIO PUBLIC ${LIBURING_LIBRARY}); target_include_directories(RIO PRIVATE ${LIBURING_INCLUDE_DIR}); endif(). ROOT_GENERATE_DICTIONARY(G__RIO; ROOT/RRawFile.hxx; ROOT/RRawFileTFile.hxx; ${rawfile_local_headers}; ROOT/TBufferMerger.hxx; TArchiveFile.h; TBufferFile.h; TBufferText.h; TBufferIO.h; TBufferJSON.h; TCollectionProxyFactory.h; TContainerConverters.h; TEmulatedMapProxy.h; TEmulatedCollectionProxy.h; TDirectoryFile.h; TFileCacheRead.h; TFileMerger.h; TFree.h; TFileCacheWrite.h; TFilePrefetch.h; TFile.h; TFPBlock.h; TGenCollectionStreamer.h; TGenCollectionProxy.h; TKey.h; TKeyMapFile.h; TLockFile.h; TMemFile.h; TMapFile.h; TMakeProject.h; TStreamerInfoActions.h; TVirtualCollectionIterators.h; TStreamerInfo.h; TZIPFile.h; ${RIO_EXTRA_HEADERS}; STAGE1; MODULE; RIO; LINKDEF; LinkDef.h; OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; Core; Thread; ). # TStreamerInfoReadBuffer in O0 needs 6k on the stack. It is called; # recursively, quickly exhausting the stack. Prevent that by forcing; # the many scope-local vars to share their stack space / become; # registers, thanks to the optimizer.; if(MSVC); set_source_files_properties(src/TStreamerInfoReadBuffer.cxx COMPILE_FLAGS $<IF:$<CONFIG:Debug>,""/Od"",""/O2"">); else(); set_source_files_properties(src/TStreamerInfoReadBuffer.cxx COMPILE_FLAGS ""-O3""); endif(). ROOT_INSTALL_HEADERS(). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,io/io/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/io/io/CMakeLists.txt:3156,Performance,optimiz,optimizer,3156,"; src/TStreamerInfoReadBuffer.cxx; src/TStreamerInfoWriteBuffer.cxx; src/TZIPFile.cxx; $<TARGET_OBJECTS:RootPcmObjs>; LIBRARIES; ${CMAKE_DL_LIBS}; DEPENDENCIES; Core; Thread; ). target_include_directories(RIO PRIVATE ${CMAKE_SOURCE_DIR}/core/clib/res); target_link_libraries(RIO PUBLIC ${ROOT_ATOMIC_LIBS}). if(builtin_nlohmannjson); target_include_directories(RIO PRIVATE ${CMAKE_SOURCE_DIR}/builtins); else(); target_link_libraries(RIO PRIVATE nlohmann_json::nlohmann_json); endif(). if(root7); set(RIO_EXTRA_HEADERS ROOT/RFile.hxx); target_sources(RIO PRIVATE v7/src/RFile.cxx); endif(). if(uring); target_link_libraries(RIO PUBLIC ${LIBURING_LIBRARY}); target_include_directories(RIO PRIVATE ${LIBURING_INCLUDE_DIR}); endif(). ROOT_GENERATE_DICTIONARY(G__RIO; ROOT/RRawFile.hxx; ROOT/RRawFileTFile.hxx; ${rawfile_local_headers}; ROOT/TBufferMerger.hxx; TArchiveFile.h; TBufferFile.h; TBufferText.h; TBufferIO.h; TBufferJSON.h; TCollectionProxyFactory.h; TContainerConverters.h; TEmulatedMapProxy.h; TEmulatedCollectionProxy.h; TDirectoryFile.h; TFileCacheRead.h; TFileMerger.h; TFree.h; TFileCacheWrite.h; TFilePrefetch.h; TFile.h; TFPBlock.h; TGenCollectionStreamer.h; TGenCollectionProxy.h; TKey.h; TKeyMapFile.h; TLockFile.h; TMemFile.h; TMapFile.h; TMakeProject.h; TStreamerInfoActions.h; TVirtualCollectionIterators.h; TStreamerInfo.h; TZIPFile.h; ${RIO_EXTRA_HEADERS}; STAGE1; MODULE; RIO; LINKDEF; LinkDef.h; OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; Core; Thread; ). # TStreamerInfoReadBuffer in O0 needs 6k on the stack. It is called; # recursively, quickly exhausting the stack. Prevent that by forcing; # the many scope-local vars to share their stack space / become; # registers, thanks to the optimizer.; if(MSVC); set_source_files_properties(src/TStreamerInfoReadBuffer.cxx COMPILE_FLAGS $<IF:$<CONFIG:Debug>,""/Od"",""/O2"">); else(); set_source_files_properties(src/TStreamerInfoReadBuffer.cxx COMPILE_FLAGS ""-O3""); endif(). ROOT_INSTALL_HEADERS(). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,io/io/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/io/io/CMakeLists.txt:3438,Testability,test,test,3438,"; src/TStreamerInfoReadBuffer.cxx; src/TStreamerInfoWriteBuffer.cxx; src/TZIPFile.cxx; $<TARGET_OBJECTS:RootPcmObjs>; LIBRARIES; ${CMAKE_DL_LIBS}; DEPENDENCIES; Core; Thread; ). target_include_directories(RIO PRIVATE ${CMAKE_SOURCE_DIR}/core/clib/res); target_link_libraries(RIO PUBLIC ${ROOT_ATOMIC_LIBS}). if(builtin_nlohmannjson); target_include_directories(RIO PRIVATE ${CMAKE_SOURCE_DIR}/builtins); else(); target_link_libraries(RIO PRIVATE nlohmann_json::nlohmann_json); endif(). if(root7); set(RIO_EXTRA_HEADERS ROOT/RFile.hxx); target_sources(RIO PRIVATE v7/src/RFile.cxx); endif(). if(uring); target_link_libraries(RIO PUBLIC ${LIBURING_LIBRARY}); target_include_directories(RIO PRIVATE ${LIBURING_INCLUDE_DIR}); endif(). ROOT_GENERATE_DICTIONARY(G__RIO; ROOT/RRawFile.hxx; ROOT/RRawFileTFile.hxx; ${rawfile_local_headers}; ROOT/TBufferMerger.hxx; TArchiveFile.h; TBufferFile.h; TBufferText.h; TBufferIO.h; TBufferJSON.h; TCollectionProxyFactory.h; TContainerConverters.h; TEmulatedMapProxy.h; TEmulatedCollectionProxy.h; TDirectoryFile.h; TFileCacheRead.h; TFileMerger.h; TFree.h; TFileCacheWrite.h; TFilePrefetch.h; TFile.h; TFPBlock.h; TGenCollectionStreamer.h; TGenCollectionProxy.h; TKey.h; TKeyMapFile.h; TLockFile.h; TMemFile.h; TMapFile.h; TMakeProject.h; TStreamerInfoActions.h; TVirtualCollectionIterators.h; TStreamerInfo.h; TZIPFile.h; ${RIO_EXTRA_HEADERS}; STAGE1; MODULE; RIO; LINKDEF; LinkDef.h; OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; Core; Thread; ). # TStreamerInfoReadBuffer in O0 needs 6k on the stack. It is called; # recursively, quickly exhausting the stack. Prevent that by forcing; # the many scope-local vars to share their stack space / become; # registers, thanks to the optimizer.; if(MSVC); set_source_files_properties(src/TStreamerInfoReadBuffer.cxx COMPILE_FLAGS $<IF:$<CONFIG:Debug>,""/Od"",""/O2"">); else(); set_source_files_properties(src/TStreamerInfoReadBuffer.cxx COMPILE_FLAGS ""-O3""); endif(). ROOT_INSTALL_HEADERS(). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,io/io/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/io/mpi/CMakeLists.txt:533,Integrability,DEPEND,DEPENDENCIES,533,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT io/mpi package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(RMPI; HEADERS; TMPIClientInfo.h; TMPIFile.h; SOURCES; src/TMPIClientInfo.cxx; src/TMPIFile.cxx; DEPENDENCIES; RIO; MathCore; ). target_include_directories(RMPI PUBLIC ${MPI_CXX_HEADER_DIR}); target_link_libraries(RMPI; PRIVATE; MPI::MPI_CXX; $<$<PLATFORM_ID:Windows>:ws2_32.lib>; ); ",MatchSource.DOCS,io/mpi/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/mpi/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/io/sql/CMakeLists.txt:678,Integrability,DEPEND,DEPENDENCIES,678,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT io/sql package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(SQLIO; HEADERS; TBufferSQL2.h; TKeySQL.h; TSQLClassInfo.h; TSQLFile.h; TSQLObjectData.h; TSQLStructure.h; SOURCES; src/TBufferSQL2.cxx; src/TKeySQL.cxx; src/TSQLClassInfo.cxx; src/TSQLFile.cxx; src/TSQLObjectData.cxx; src/TSQLStructure.cxx; DEPENDENCIES Net RIO); ",MatchSource.DOCS,io/sql/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/sql/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/io/xml/CMakeLists.txt:654,Integrability,DEPEND,DEPENDENCIES,654,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT io/xml package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(XMLIO; HEADERS; TBufferXML.h; TKeyXML.h; TXMLEngine.h; TXMLFile.h; TXMLPlayer.h; TXMLSetup.h; SOURCES; src/TBufferXML.cxx; src/TKeyXML.cxx; src/TXMLEngine.cxx; src/TXMLFile.cxx; src/TXMLPlayer.cxx; src/TXMLSetup.cxx; DEPENDENCIES RIO); ",MatchSource.DOCS,io/xml/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/xml/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/io/xmlparser/CMakeLists.txt:699,Integrability,DEPEND,DEPENDENCIES,699,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT io/xmlparser package; # @author Pere Mato, CERN; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(XMLParser; HEADERS; TDOMParser.h; TSAXParser.h; TXMLAttr.h; TXMLDocument.h; TXMLNode.h; TXMLParser.h; SOURCES; src/TDOMParser.cxx; src/TSAXParser.cxx; src/TXMLAttr.cxx; src/TXMLDocument.cxx; src/TXMLNode.cxx; src/TXMLParser.cxx; DEPENDENCIES; Core; ). # not needed to propagate includes to rootcling; target_include_directories(XMLParser PRIVATE; ${LIBXML2_INCLUDE_DIR}; ${LIBXML2_INCLUDE_DIRS}; ). target_link_libraries(XMLParser; PRIVATE; ${LIBXML2_LIBRARIES}; $<$<PLATFORM_ID:Windows>:ws2_32.lib>; ); ",MatchSource.DOCS,io/xmlparser/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/xmlparser/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/io/dcache/doc/index.txt:44,Integrability,interface,interface,44,"BEGIN_HTML; This directory contains the I/O interface classes for the <b>Dcache</b> system.; For more information about <b>Dcache</b>, see:; <ul>; <li><a href=""http://www-dcache.desy.de/"">the DESY Dcache site; </a></li>; </ul>; END_HTML; ",MatchSource.DOCS,io/dcache/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/dcache/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/io/io/test/CMakeLists.txt:786,Integrability,rout,routinely,786,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_GTEST(RRawFile RRawFile.cxx LIBRARIES RIO); ROOT_ADD_GTEST(TFile TFileTests.cxx LIBRARIES RIO); ROOT_ADD_GTEST(TBufferFile TBufferFileTests.cxx LIBRARIES RIO); ROOT_ADD_GTEST(TBufferMerger TBufferMerger.cxx LIBRARIES RIO Imt Tree); ROOT_ADD_GTEST(TBufferJSON TBufferJSONTests.cxx LIBRARIES RIO); ROOT_ADD_GTEST(TFileMerger TFileMergerTests.cxx LIBRARIES RIO Tree Hist); ROOT_ADD_GTEST(TROMemFile TROMemFileTests.cxx LIBRARIES RIO Tree); if(uring AND NOT DEFINED ENV{ROOTTEST_IGNORE_URING}); ROOT_ADD_GTEST(RIoUring RIoUring.cxx LIBRARIES RIO); endif(). # Temporarily disabled. Test routinely fails on MacOS and some Linuxes.; #if(NOT WIN32 AND (NOT MACOS_VERSION OR NOT MACOSX_VERSION VERSION_LESS 13.00)); # ROOT_EXECUTABLE(TMapFileTest TMapFileTest.cxx LIBRARIES RIO Hist New); # ROOT_ADD_TEST(io-io-test-TMapFileTest COMMAND TMapFileTest complete); #endif(); ",MatchSource.DOCS,io/io/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/io/io/test/CMakeLists.txt:781,Testability,Test,Test,781,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_GTEST(RRawFile RRawFile.cxx LIBRARIES RIO); ROOT_ADD_GTEST(TFile TFileTests.cxx LIBRARIES RIO); ROOT_ADD_GTEST(TBufferFile TBufferFileTests.cxx LIBRARIES RIO); ROOT_ADD_GTEST(TBufferMerger TBufferMerger.cxx LIBRARIES RIO Imt Tree); ROOT_ADD_GTEST(TBufferJSON TBufferJSONTests.cxx LIBRARIES RIO); ROOT_ADD_GTEST(TFileMerger TFileMergerTests.cxx LIBRARIES RIO Tree Hist); ROOT_ADD_GTEST(TROMemFile TROMemFileTests.cxx LIBRARIES RIO Tree); if(uring AND NOT DEFINED ENV{ROOTTEST_IGNORE_URING}); ROOT_ADD_GTEST(RIoUring RIoUring.cxx LIBRARIES RIO); endif(). # Temporarily disabled. Test routinely fails on MacOS and some Linuxes.; #if(NOT WIN32 AND (NOT MACOS_VERSION OR NOT MACOSX_VERSION VERSION_LESS 13.00)); # ROOT_EXECUTABLE(TMapFileTest TMapFileTest.cxx LIBRARIES RIO Hist New); # ROOT_ADD_TEST(io-io-test-TMapFileTest COMMAND TMapFileTest complete); #endif(); ",MatchSource.DOCS,io/io/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/io/io/test/CMakeLists.txt:1006,Testability,test,test-TMapFileTest,1006,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_ADD_GTEST(RRawFile RRawFile.cxx LIBRARIES RIO); ROOT_ADD_GTEST(TFile TFileTests.cxx LIBRARIES RIO); ROOT_ADD_GTEST(TBufferFile TBufferFileTests.cxx LIBRARIES RIO); ROOT_ADD_GTEST(TBufferMerger TBufferMerger.cxx LIBRARIES RIO Imt Tree); ROOT_ADD_GTEST(TBufferJSON TBufferJSONTests.cxx LIBRARIES RIO); ROOT_ADD_GTEST(TFileMerger TFileMergerTests.cxx LIBRARIES RIO Tree Hist); ROOT_ADD_GTEST(TROMemFile TROMemFileTests.cxx LIBRARIES RIO Tree); if(uring AND NOT DEFINED ENV{ROOTTEST_IGNORE_URING}); ROOT_ADD_GTEST(RIoUring RIoUring.cxx LIBRARIES RIO); endif(). # Temporarily disabled. Test routinely fails on MacOS and some Linuxes.; #if(NOT WIN32 AND (NOT MACOS_VERSION OR NOT MACOSX_VERSION VERSION_LESS 13.00)); # ROOT_EXECUTABLE(TMapFileTest TMapFileTest.cxx LIBRARIES RIO Hist New); # ROOT_ADD_TEST(io-io-test-TMapFileTest COMMAND TMapFileTest complete); #endif(); ",MatchSource.DOCS,io/io/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/io/xmlparser/doc/index.txt:61,Integrability,interface,interface,61,"BEGIN_HTML; This directory contains classes that provide and interface to the libxml2; XML parser. Both DOM and SAX parser interfaces are provided.; See:; <ul>; <li><a href=""http://www.xmlsoft.org"">For more on libxml2</a></li>; </ul>; END_HTML; ",MatchSource.DOCS,io/xmlparser/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/xmlparser/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/io/xmlparser/doc/index.txt:123,Integrability,interface,interfaces,123,"BEGIN_HTML; This directory contains classes that provide and interface to the libxml2; XML parser. Both DOM and SAX parser interfaces are provided.; See:; <ul>; <li><a href=""http://www.xmlsoft.org"">For more on libxml2</a></li>; </ul>; END_HTML; ",MatchSource.DOCS,io/xmlparser/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/xmlparser/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/math/fftw/CMakeLists.txt:645,Integrability,DEPEND,DEPENDENCIES,645,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT math/fftw package; # @author Pere Mato, CERN; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(FFTW; HEADERS; TFFTComplex.h; TFFTComplexReal.h; TFFTReal.h; TFFTRealComplex.h; SOURCES; src/TFFTComplex.cxx; src/TFFTComplexReal.cxx; src/TFFTReal.cxx; src/TFFTRealComplex.cxx; DEPENDENCIES; Core; MathCore; BUILTINS; FFTW3; ). target_include_directories(FFTW PRIVATE ${FFTW_INCLUDE_DIR}); target_link_libraries(FFTW PRIVATE ${FFTW_LIBRARIES}); ",MatchSource.DOCS,math/fftw/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/fftw/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/foam/CMakeLists.txt:666,Integrability,DEPEND,DEPENDENCIES,666,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT math/foam package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(Foam; HEADERS; TFoam.h; TFoamCell.h; TFoamIntegrand.h; TFoamMaxwt.h; TFoamSampler.h; TFoamVect.h; SOURCES; src/TFoam.cxx; src/TFoamCell.cxx; src/TFoamIntegrand.cxx; src/TFoamMaxwt.cxx; src/TFoamSampler.cxx; src/TFoamVect.cxx; DEPENDENCIES; Hist; MathCore; ). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,math/foam/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/foam/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/foam/CMakeLists.txt:726,Testability,test,test,726,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT math/foam package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(Foam; HEADERS; TFoam.h; TFoamCell.h; TFoamIntegrand.h; TFoamMaxwt.h; TFoamSampler.h; TFoamVect.h; SOURCES; src/TFoam.cxx; src/TFoamCell.cxx; src/TFoamIntegrand.cxx; src/TFoamMaxwt.cxx; src/TFoamSampler.cxx; src/TFoamVect.cxx; DEPENDENCIES; Hist; MathCore; ). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,math/foam/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/foam/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/fumili/CMakeLists.txt:542,Integrability,DEPEND,DEPENDENCIES,542,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT math/fumili package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(Fumili; HEADERS; TFumili.h; TFumiliMinimizer.h; SOURCES; src/TFumili.cxx; src/TFumiliMinimizer.cxx; DEPENDENCIES; Graf; Hist; MathCore; ); ",MatchSource.DOCS,math/fumili/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/fumili/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genetic/CMakeLists.txt:588,Integrability,DEPEND,DEPENDENCIES,588,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT math/genetic package; # @author Pere Mato, CERN; ############################################################################; ROOT_STANDARD_LIBRARY_PACKAGE(Genetic; HEADERS; Math/GeneticMinimizer.h; SOURCES; src/GeneticMinimizer.cxx; DICTIONARY_OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; Core; MathCore; TMVA; ). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,math/genetic/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genetic/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genetic/CMakeLists.txt:654,Testability,test,test,654,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT math/genetic package; # @author Pere Mato, CERN; ############################################################################; ROOT_STANDARD_LIBRARY_PACKAGE(Genetic; HEADERS; Math/GeneticMinimizer.h; SOURCES; src/GeneticMinimizer.cxx; DICTIONARY_OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; Core; MathCore; TMVA; ). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,math/genetic/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genetic/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genvector/CMakeLists.txt:801,Integrability,DEPEND,DEPENDENCIES,801,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT math/genvector package; ############################################################################. ROOT_LINKER_LIBRARY(GenVector; src/3DConversions.cxx; src/3DDistances.cxx; src/AxisAngle.cxx; src/AxisAngleXother.cxx; src/BitReproducible.cxx; src/Boost.cxx; src/BoostX.cxx; src/BoostY.cxx; src/BoostZ.cxx; src/EulerAngles.cxx; src/LorentzRotation.cxx; src/Quaternion.cxx; src/QuaternionXaxial.cxx; src/Rotation3D.cxx; src/Rotation3DxAxial.cxx; src/RotationZYX.cxx; src/VectorUtil.cxx; DEPENDENCIES; Core; MathCore; ). ROOT_GENERATE_DICTIONARY(G__GenVector; Math/AxisAngle.h; Math/Boost.h; Math/BoostX.h; Math/BoostY.h; Math/BoostZ.h; Math/Cartesian2D.h; Math/Cartesian3D.h; Math/Cylindrical3D.h; Math/CylindricalEta3D.h; Math/DisplacementVector2D.h; Math/DisplacementVector3D.h; Math/EulerAngles.h; Math/GenVector/3DConversions.h; Math/GenVector/3DDistances.h; Math/GenVector/AxisAnglefwd.h; Math/GenVector/AxisAngle.h; Math/GenVector/BitReproducible.h; Math/GenVector/Boostfwd.h; Math/GenVector/Boost.h; Math/GenVector/BoostXfwd.h; Math/GenVector/BoostX.h; Math/GenVector/BoostYfwd.h; Math/GenVector/BoostY.h; Math/GenVector/BoostZfwd.h; Math/GenVector/BoostZ.h; Math/GenVector/Cartesian2Dfwd.h; Math/GenVector/Cartesian2D.h; Math/GenVector/Cartesian3Dfwd.h; Math/GenVector/Cartesian3D.h; Math/GenVector/CoordinateSystemTags.h; Math/GenVector/Cylindrical3Dfwd.h; Math/GenVector/Cylindrical3D.h; Math/GenVector/CylindricalEta3Dfwd.h; Math/GenVector/CylindricalEta3D.h; Math/GenVector/DisplacementVector2Dfwd.h; Math/GenVector/DisplacementVector2D.h; Math/GenVector/DisplacementVector3Dfwd.h; Math/GenVector/DisplacementVector3D.h; Math/GenVector/eta.h; Math/GenVector/etaMax.h; Math/Ge",MatchSource.DOCS,math/genvector/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genvector/CMakeLists.txt:3899,Integrability,DEPEND,DEPENDENCIES,3899,or/LorentzVector.h; Math/GenVector/Plane3D.h; Math/GenVector/Polar2Dfwd.h; Math/GenVector/Polar2D.h; Math/GenVector/Polar3Dfwd.h; Math/GenVector/Polar3D.h; Math/GenVector/PositionVector2Dfwd.h; Math/GenVector/PositionVector2D.h; Math/GenVector/PositionVector3Dfwd.h; Math/GenVector/PositionVector3D.h; Math/GenVector/PtEtaPhiE4Dfwd.h; Math/GenVector/PtEtaPhiE4D.h; Math/GenVector/PtEtaPhiM4Dfwd.h; Math/GenVector/PtEtaPhiM4D.h; Math/GenVector/PxPyPzE4Dfwd.h; Math/GenVector/PxPyPzE4D.h; Math/GenVector/PxPyPzM4Dfwd.h; Math/GenVector/PxPyPzM4D.h; Math/GenVector/Quaternionfwd.h; Math/GenVector/Quaternion.h; Math/GenVector/Rotation3Dfwd.h; Math/GenVector/Rotation3D.h; Math/GenVector/RotationXfwd.h; Math/GenVector/RotationX.h; Math/GenVector/RotationYfwd.h; Math/GenVector/RotationY.h; Math/GenVector/RotationZfwd.h; Math/GenVector/RotationZ.h; Math/GenVector/RotationZYXfwd.h; Math/GenVector/RotationZYX.h; Math/GenVector/Transform3D.h; Math/GenVector/Translation3D.h; Math/GenVector/VectorUtil.h; Math/LorentzRotation.h; Math/LorentzVector.h; Math/Plane3D.h; Math/Point2Dfwd.h; Math/Point2D.h; Math/Point3Dfwd.h; Math/Point3D.h; Math/Polar2D.h; Math/Polar3D.h; Math/PositionVector2D.h; Math/PositionVector3D.h; Math/PtEtaPhiE4D.h; Math/PtEtaPhiM4D.h; Math/PxPyPzE4D.h; Math/PxPyPzM4D.h; Math/Quaternion.h; Math/Rotation3D.h; Math/RotationX.h; Math/RotationY.h; Math/RotationZ.h; Math/RotationZYX.h; Math/Transform3D.h; Math/Translation3D.h; Math/Vector2Dfwd.h; Math/Vector2D.h; Math/Vector3Dfwd.h; Math/Vector3D.h; Math/Vector4Dfwd.h; Math/Vector4D.h; Math/VectorUtil.h; MODULE; GenVector; LINKDEF; Math/LinkDef_GenVector.h; OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; Core; MathCore; ). ROOT_GENERATE_DICTIONARY(G__GenVector32; Math/Point2D.h; Math/Point3D.h; Math/Vector2D.h; Math/Vector3D.h; Math/Vector4D.h; MODULE; GenVector; MULTIDICT; LINKDEF; Math/LinkDef_GenVector32.h; OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; Core; MathCore; ). ROOT_ADD_TEST_SUBDIRECTORY(test). ROOT_INSTALL_HEADERS(); ,MatchSource.DOCS,math/genvector/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genvector/CMakeLists.txt:4152,Integrability,DEPEND,DEPENDENCIES,4152,or/LorentzVector.h; Math/GenVector/Plane3D.h; Math/GenVector/Polar2Dfwd.h; Math/GenVector/Polar2D.h; Math/GenVector/Polar3Dfwd.h; Math/GenVector/Polar3D.h; Math/GenVector/PositionVector2Dfwd.h; Math/GenVector/PositionVector2D.h; Math/GenVector/PositionVector3Dfwd.h; Math/GenVector/PositionVector3D.h; Math/GenVector/PtEtaPhiE4Dfwd.h; Math/GenVector/PtEtaPhiE4D.h; Math/GenVector/PtEtaPhiM4Dfwd.h; Math/GenVector/PtEtaPhiM4D.h; Math/GenVector/PxPyPzE4Dfwd.h; Math/GenVector/PxPyPzE4D.h; Math/GenVector/PxPyPzM4Dfwd.h; Math/GenVector/PxPyPzM4D.h; Math/GenVector/Quaternionfwd.h; Math/GenVector/Quaternion.h; Math/GenVector/Rotation3Dfwd.h; Math/GenVector/Rotation3D.h; Math/GenVector/RotationXfwd.h; Math/GenVector/RotationX.h; Math/GenVector/RotationYfwd.h; Math/GenVector/RotationY.h; Math/GenVector/RotationZfwd.h; Math/GenVector/RotationZ.h; Math/GenVector/RotationZYXfwd.h; Math/GenVector/RotationZYX.h; Math/GenVector/Transform3D.h; Math/GenVector/Translation3D.h; Math/GenVector/VectorUtil.h; Math/LorentzRotation.h; Math/LorentzVector.h; Math/Plane3D.h; Math/Point2Dfwd.h; Math/Point2D.h; Math/Point3Dfwd.h; Math/Point3D.h; Math/Polar2D.h; Math/Polar3D.h; Math/PositionVector2D.h; Math/PositionVector3D.h; Math/PtEtaPhiE4D.h; Math/PtEtaPhiM4D.h; Math/PxPyPzE4D.h; Math/PxPyPzM4D.h; Math/Quaternion.h; Math/Rotation3D.h; Math/RotationX.h; Math/RotationY.h; Math/RotationZ.h; Math/RotationZYX.h; Math/Transform3D.h; Math/Translation3D.h; Math/Vector2Dfwd.h; Math/Vector2D.h; Math/Vector3Dfwd.h; Math/Vector3D.h; Math/Vector4Dfwd.h; Math/Vector4D.h; Math/VectorUtil.h; MODULE; GenVector; LINKDEF; Math/LinkDef_GenVector.h; OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; Core; MathCore; ). ROOT_GENERATE_DICTIONARY(G__GenVector32; Math/Point2D.h; Math/Point3D.h; Math/Vector2D.h; Math/Vector3D.h; Math/Vector4D.h; MODULE; GenVector; MULTIDICT; LINKDEF; Math/LinkDef_GenVector32.h; OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; Core; MathCore; ). ROOT_ADD_TEST_SUBDIRECTORY(test). ROOT_INSTALL_HEADERS(); ,MatchSource.DOCS,math/genvector/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genvector/CMakeLists.txt:4212,Testability,test,test,4212,or/LorentzVector.h; Math/GenVector/Plane3D.h; Math/GenVector/Polar2Dfwd.h; Math/GenVector/Polar2D.h; Math/GenVector/Polar3Dfwd.h; Math/GenVector/Polar3D.h; Math/GenVector/PositionVector2Dfwd.h; Math/GenVector/PositionVector2D.h; Math/GenVector/PositionVector3Dfwd.h; Math/GenVector/PositionVector3D.h; Math/GenVector/PtEtaPhiE4Dfwd.h; Math/GenVector/PtEtaPhiE4D.h; Math/GenVector/PtEtaPhiM4Dfwd.h; Math/GenVector/PtEtaPhiM4D.h; Math/GenVector/PxPyPzE4Dfwd.h; Math/GenVector/PxPyPzE4D.h; Math/GenVector/PxPyPzM4Dfwd.h; Math/GenVector/PxPyPzM4D.h; Math/GenVector/Quaternionfwd.h; Math/GenVector/Quaternion.h; Math/GenVector/Rotation3Dfwd.h; Math/GenVector/Rotation3D.h; Math/GenVector/RotationXfwd.h; Math/GenVector/RotationX.h; Math/GenVector/RotationYfwd.h; Math/GenVector/RotationY.h; Math/GenVector/RotationZfwd.h; Math/GenVector/RotationZ.h; Math/GenVector/RotationZYXfwd.h; Math/GenVector/RotationZYX.h; Math/GenVector/Transform3D.h; Math/GenVector/Translation3D.h; Math/GenVector/VectorUtil.h; Math/LorentzRotation.h; Math/LorentzVector.h; Math/Plane3D.h; Math/Point2Dfwd.h; Math/Point2D.h; Math/Point3Dfwd.h; Math/Point3D.h; Math/Polar2D.h; Math/Polar3D.h; Math/PositionVector2D.h; Math/PositionVector3D.h; Math/PtEtaPhiE4D.h; Math/PtEtaPhiM4D.h; Math/PxPyPzE4D.h; Math/PxPyPzM4D.h; Math/Quaternion.h; Math/Rotation3D.h; Math/RotationX.h; Math/RotationY.h; Math/RotationZ.h; Math/RotationZYX.h; Math/Transform3D.h; Math/Translation3D.h; Math/Vector2Dfwd.h; Math/Vector2D.h; Math/Vector3Dfwd.h; Math/Vector3D.h; Math/Vector4Dfwd.h; Math/Vector4D.h; Math/VectorUtil.h; MODULE; GenVector; LINKDEF; Math/LinkDef_GenVector.h; OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; Core; MathCore; ). ROOT_GENERATE_DICTIONARY(G__GenVector32; Math/Point2D.h; Math/Point3D.h; Math/Vector2D.h; Math/Vector3D.h; Math/Vector4D.h; MODULE; GenVector; MULTIDICT; LINKDEF; Math/LinkDef_GenVector32.h; OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; Core; MathCore; ). ROOT_ADD_TEST_SUBDIRECTORY(test). ROOT_INSTALL_HEADERS(); ,MatchSource.DOCS,math/genvector/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt:1016,Availability,Error,Error,1016," 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT math/mathcore package; ############################################################################. set(HEADERS; Fit/BasicFCN.h; Fit/BinData.h; Fit/Chi2FCN.h; Fit/DataOptions.h; Fit/DataRange.h; Fit/FcnAdapter.h; Fit/FitConfig.h; Fit/FitData.h; Fit/FitExecutionPolicy.h; Fit/FitResult.h; Fit/FitUtil.h; Fit/Fitter.h; Fit/LogLikelihoodFCN.h; Fit/ParameterSettings.h; Fit/PoissonLikelihoodFCN.h; Fit/SparseData.h; Fit/UnBinData.h; Math/AdaptiveIntegratorMultiDim.h; Math/AllIntegrationTypes.h; Math/BasicMinimizer.h; Math/BrentMethods.h; Math/BrentMinimizer1D.h; Math/BrentRootFinder.h; Math/ChebyshevPol.h; Math/Delaunay2D.h; Math/DistFuncMathCore.h; Math/DistSampler.h; Math/DistSamplerOptions.h; Math/Error.h; Math/Factory.h; Math/FitMethodFunction.h; Math/Functor.h; Math/GaussIntegrator.h; Math/GaussLegendreIntegrator.h; Math/GenAlgoOptions.h; Math/GoFTest.h; Math/IFunction.h; Math/IFunctionfwd.h; Math/IMinimizer1D.h; Math/IOptions.h; Math/IParamFunction.h; Math/IParamFunctionfwd.h; Math/IRootFinderMethod.h; Math/Integrator.h; Math/IntegratorMultiDim.h; Math/IntegratorOptions.h; Math/KDTree.h; Math/LCGEngine.h; Math/Math.h; Math/MersenneTwisterEngine.h; Math/MinimTransformFunction.h; Math/MinimTransformVariable.h; Math/Minimizer.h; Math/MinimizerOptions.h; Math/MinimizerVariableTransformation.h; Math/MixMaxEngine.h; Math/MultiDimParamFunctionAdapter.h; Math/OneDimFunctionAdapter.h; Math/ParamFunctor.h; Math/PdfFuncMathCore.h; Math/ProbFuncMathCore.h; Math/QuantFuncMathCore.h; Math/Random.h; Math/RandomFunctions.h; Math/RanluxppEngine.h; Math/RichardsonDerivator.h; Math/RootFinder.h; Math/SpecFuncMathCore.h; Math/StdEngine.h; Math/TDataPoint.h; Math/TDataPointN.h; Math/TRandomEngin",MatchSource.DOCS,math/mathcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt:1335,Deployability,Integrat,Integrator,1335,############################################################################. set(HEADERS; Fit/BasicFCN.h; Fit/BinData.h; Fit/Chi2FCN.h; Fit/DataOptions.h; Fit/DataRange.h; Fit/FcnAdapter.h; Fit/FitConfig.h; Fit/FitData.h; Fit/FitExecutionPolicy.h; Fit/FitResult.h; Fit/FitUtil.h; Fit/Fitter.h; Fit/LogLikelihoodFCN.h; Fit/ParameterSettings.h; Fit/PoissonLikelihoodFCN.h; Fit/SparseData.h; Fit/UnBinData.h; Math/AdaptiveIntegratorMultiDim.h; Math/AllIntegrationTypes.h; Math/BasicMinimizer.h; Math/BrentMethods.h; Math/BrentMinimizer1D.h; Math/BrentRootFinder.h; Math/ChebyshevPol.h; Math/Delaunay2D.h; Math/DistFuncMathCore.h; Math/DistSampler.h; Math/DistSamplerOptions.h; Math/Error.h; Math/Factory.h; Math/FitMethodFunction.h; Math/Functor.h; Math/GaussIntegrator.h; Math/GaussLegendreIntegrator.h; Math/GenAlgoOptions.h; Math/GoFTest.h; Math/IFunction.h; Math/IFunctionfwd.h; Math/IMinimizer1D.h; Math/IOptions.h; Math/IParamFunction.h; Math/IParamFunctionfwd.h; Math/IRootFinderMethod.h; Math/Integrator.h; Math/IntegratorMultiDim.h; Math/IntegratorOptions.h; Math/KDTree.h; Math/LCGEngine.h; Math/Math.h; Math/MersenneTwisterEngine.h; Math/MinimTransformFunction.h; Math/MinimTransformVariable.h; Math/Minimizer.h; Math/MinimizerOptions.h; Math/MinimizerVariableTransformation.h; Math/MixMaxEngine.h; Math/MultiDimParamFunctionAdapter.h; Math/OneDimFunctionAdapter.h; Math/ParamFunctor.h; Math/PdfFuncMathCore.h; Math/ProbFuncMathCore.h; Math/QuantFuncMathCore.h; Math/Random.h; Math/RandomFunctions.h; Math/RanluxppEngine.h; Math/RichardsonDerivator.h; Math/RootFinder.h; Math/SpecFuncMathCore.h; Math/StdEngine.h; Math/TDataPoint.h; Math/TDataPointN.h; Math/TRandomEngine.h; Math/Types.h; Math/Util.h; Math/VirtualIntegrator.h; Math/WrappedFunction.h; Math/WrappedParamFunction.h; TComplex.h; TKDTree.h; TKDTreeBinning.h; TMath.h; TRandom.h; TRandom1.h; TRandom2.h; TRandom3.h; TRandomGen.h; TStatistic.h; VectorizedTMath.h; ). if(runtime_cxxmodules); # Adding Math/Math.h to the MathCore mod,MatchSource.DOCS,math/mathcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt:1354,Deployability,Integrat,IntegratorMultiDim,1354,#####################################################. set(HEADERS; Fit/BasicFCN.h; Fit/BinData.h; Fit/Chi2FCN.h; Fit/DataOptions.h; Fit/DataRange.h; Fit/FcnAdapter.h; Fit/FitConfig.h; Fit/FitData.h; Fit/FitExecutionPolicy.h; Fit/FitResult.h; Fit/FitUtil.h; Fit/Fitter.h; Fit/LogLikelihoodFCN.h; Fit/ParameterSettings.h; Fit/PoissonLikelihoodFCN.h; Fit/SparseData.h; Fit/UnBinData.h; Math/AdaptiveIntegratorMultiDim.h; Math/AllIntegrationTypes.h; Math/BasicMinimizer.h; Math/BrentMethods.h; Math/BrentMinimizer1D.h; Math/BrentRootFinder.h; Math/ChebyshevPol.h; Math/Delaunay2D.h; Math/DistFuncMathCore.h; Math/DistSampler.h; Math/DistSamplerOptions.h; Math/Error.h; Math/Factory.h; Math/FitMethodFunction.h; Math/Functor.h; Math/GaussIntegrator.h; Math/GaussLegendreIntegrator.h; Math/GenAlgoOptions.h; Math/GoFTest.h; Math/IFunction.h; Math/IFunctionfwd.h; Math/IMinimizer1D.h; Math/IOptions.h; Math/IParamFunction.h; Math/IParamFunctionfwd.h; Math/IRootFinderMethod.h; Math/Integrator.h; Math/IntegratorMultiDim.h; Math/IntegratorOptions.h; Math/KDTree.h; Math/LCGEngine.h; Math/Math.h; Math/MersenneTwisterEngine.h; Math/MinimTransformFunction.h; Math/MinimTransformVariable.h; Math/Minimizer.h; Math/MinimizerOptions.h; Math/MinimizerVariableTransformation.h; Math/MixMaxEngine.h; Math/MultiDimParamFunctionAdapter.h; Math/OneDimFunctionAdapter.h; Math/ParamFunctor.h; Math/PdfFuncMathCore.h; Math/ProbFuncMathCore.h; Math/QuantFuncMathCore.h; Math/Random.h; Math/RandomFunctions.h; Math/RanluxppEngine.h; Math/RichardsonDerivator.h; Math/RootFinder.h; Math/SpecFuncMathCore.h; Math/StdEngine.h; Math/TDataPoint.h; Math/TDataPointN.h; Math/TRandomEngine.h; Math/Types.h; Math/Util.h; Math/VirtualIntegrator.h; Math/WrappedFunction.h; Math/WrappedParamFunction.h; TComplex.h; TKDTree.h; TKDTreeBinning.h; TMath.h; TRandom.h; TRandom1.h; TRandom2.h; TRandom3.h; TRandomGen.h; TStatistic.h; VectorizedTMath.h; ). if(runtime_cxxmodules); # Adding Math/Math.h to the MathCore module makes the generatio,MatchSource.DOCS,math/mathcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt:1381,Deployability,Integrat,IntegratorOptions,1381,##########################. set(HEADERS; Fit/BasicFCN.h; Fit/BinData.h; Fit/Chi2FCN.h; Fit/DataOptions.h; Fit/DataRange.h; Fit/FcnAdapter.h; Fit/FitConfig.h; Fit/FitData.h; Fit/FitExecutionPolicy.h; Fit/FitResult.h; Fit/FitUtil.h; Fit/Fitter.h; Fit/LogLikelihoodFCN.h; Fit/ParameterSettings.h; Fit/PoissonLikelihoodFCN.h; Fit/SparseData.h; Fit/UnBinData.h; Math/AdaptiveIntegratorMultiDim.h; Math/AllIntegrationTypes.h; Math/BasicMinimizer.h; Math/BrentMethods.h; Math/BrentMinimizer1D.h; Math/BrentRootFinder.h; Math/ChebyshevPol.h; Math/Delaunay2D.h; Math/DistFuncMathCore.h; Math/DistSampler.h; Math/DistSamplerOptions.h; Math/Error.h; Math/Factory.h; Math/FitMethodFunction.h; Math/Functor.h; Math/GaussIntegrator.h; Math/GaussLegendreIntegrator.h; Math/GenAlgoOptions.h; Math/GoFTest.h; Math/IFunction.h; Math/IFunctionfwd.h; Math/IMinimizer1D.h; Math/IOptions.h; Math/IParamFunction.h; Math/IParamFunctionfwd.h; Math/IRootFinderMethod.h; Math/Integrator.h; Math/IntegratorMultiDim.h; Math/IntegratorOptions.h; Math/KDTree.h; Math/LCGEngine.h; Math/Math.h; Math/MersenneTwisterEngine.h; Math/MinimTransformFunction.h; Math/MinimTransformVariable.h; Math/Minimizer.h; Math/MinimizerOptions.h; Math/MinimizerVariableTransformation.h; Math/MixMaxEngine.h; Math/MultiDimParamFunctionAdapter.h; Math/OneDimFunctionAdapter.h; Math/ParamFunctor.h; Math/PdfFuncMathCore.h; Math/ProbFuncMathCore.h; Math/QuantFuncMathCore.h; Math/Random.h; Math/RandomFunctions.h; Math/RanluxppEngine.h; Math/RichardsonDerivator.h; Math/RootFinder.h; Math/SpecFuncMathCore.h; Math/StdEngine.h; Math/TDataPoint.h; Math/TDataPointN.h; Math/TRandomEngine.h; Math/Types.h; Math/Util.h; Math/VirtualIntegrator.h; Math/WrappedFunction.h; Math/WrappedParamFunction.h; TComplex.h; TKDTree.h; TKDTreeBinning.h; TMath.h; TRandom.h; TRandom1.h; TRandom2.h; TRandom3.h; TRandomGen.h; TStatistic.h; VectorizedTMath.h; ). if(runtime_cxxmodules); # Adding Math/Math.h to the MathCore module makes the generation of GenVector; # dictiona,MatchSource.DOCS,math/mathcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt:2541,Deployability,upgrade,upgrade,2541,"inimizer.h; Math/MinimizerOptions.h; Math/MinimizerVariableTransformation.h; Math/MixMaxEngine.h; Math/MultiDimParamFunctionAdapter.h; Math/OneDimFunctionAdapter.h; Math/ParamFunctor.h; Math/PdfFuncMathCore.h; Math/ProbFuncMathCore.h; Math/QuantFuncMathCore.h; Math/Random.h; Math/RandomFunctions.h; Math/RanluxppEngine.h; Math/RichardsonDerivator.h; Math/RootFinder.h; Math/SpecFuncMathCore.h; Math/StdEngine.h; Math/TDataPoint.h; Math/TDataPointN.h; Math/TRandomEngine.h; Math/Types.h; Math/Util.h; Math/VirtualIntegrator.h; Math/WrappedFunction.h; Math/WrappedParamFunction.h; TComplex.h; TKDTree.h; TKDTreeBinning.h; TMath.h; TRandom.h; TRandom1.h; TRandom2.h; TRandom3.h; TRandomGen.h; TStatistic.h; VectorizedTMath.h; ). if(runtime_cxxmodules); # Adding Math/Math.h to the MathCore module makes the generation of GenVector; # dictionary hand due to a bug in rootcling/clang. The redeclaration chain of; # 'abs' shadow declaration (from stl math.h) is broken.; # FIXME: Revise after a llvm upgrade or reproduce it outside rootcling.; list(REMOVE_ITEM HEADERS ""Math/Math.h""). if(vc); # We do not link against libVc.a thus it makes no sense to check for; # version compatibility between libraries and header files. This fixes; # ROOT-11002 where upon building the modules.idx we run the static ctor; # runLibraryAbiCheck which fails to find the corresponding symbol.; set(dictoptions ""-m"" ""Vc"" ""-mByproduct"" ""Vc"" ""-D"" ""Vc_NO_VERSION_CHECK""); endif(vc); endif(). ROOT_ADD_C_FLAG(_flags -Wno-strict-overflow) # Avoid what it seems a compiler false positive warning; ROOT_ADD_C_FLAG(_flags -Wno-maybe-uninitialized) # Avoid what it seems a compiler false positive warning; ROOT_ADD_C_FLAG(_flags -Wno-parentheses-equality). if(imt); set(MATHCORE_DEPENDENCIES Imt); endif(). if(veccore); set(MATHCORE_BUILTINS VECCORE); set(MATHCORE_LIBRARIES ${VecCore_LIBRARIES}); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(MathCore; HEADERS; ${HEADERS}; SOURCES; src/AdaptiveIntegratorMultiDim.cxx; src/BasicMinimizer.cx",MatchSource.DOCS,math/mathcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt:3976,Deployability,Integrat,Integrator,3976,"SION_CHECK""); endif(vc); endif(). ROOT_ADD_C_FLAG(_flags -Wno-strict-overflow) # Avoid what it seems a compiler false positive warning; ROOT_ADD_C_FLAG(_flags -Wno-maybe-uninitialized) # Avoid what it seems a compiler false positive warning; ROOT_ADD_C_FLAG(_flags -Wno-parentheses-equality). if(imt); set(MATHCORE_DEPENDENCIES Imt); endif(). if(veccore); set(MATHCORE_BUILTINS VECCORE); set(MATHCORE_LIBRARIES ${VecCore_LIBRARIES}); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(MathCore; HEADERS; ${HEADERS}; SOURCES; src/AdaptiveIntegratorMultiDim.cxx; src/BasicMinimizer.cxx; src/BinData.cxx; src/BrentMethods.cxx; src/BrentMinimizer1D.cxx; src/BrentRootFinder.cxx; src/ChebyshevPol.cxx; src/DataRange.cxx; src/Delaunay2D.cxx; src/DistSampler.cxx; src/DistSamplerOptions.cxx; src/Factory.cxx; src/FitConfig.cxx; src/FitData.cxx; src/FitResult.cxx; src/FitUtil.cxx; src/Fitter.cxx; src/GaussIntegrator.cxx; src/GaussLegendreIntegrator.cxx; src/GenAlgoOptions.cxx; src/GoFTest.cxx; src/IOptions.cxx; src/Integrator.cxx; src/IntegratorOptions.cxx; src/MersenneTwisterEngine.cxx; src/MinimTransformFunction.cxx; src/Minimizer.cxx; src/MinimizerOptions.cxx; src/MinimizerVariableTransformation.cxx; src/MixMaxEngineImpl17.cxx; src/MixMaxEngineImpl240.cxx; src/MixMaxEngineImpl256.cxx; src/ParameterSettings.cxx; src/PdfFuncMathCore.cxx; src/ProbFuncMathCore.cxx; src/QuantFuncMathCore.cxx; src/RandomFunctions.cxx; src/RanluxppEngineImpl.cxx; src/RichardsonDerivator.cxx; src/RootFinder.cxx; src/SparseData.cxx; src/SpecFuncCephes.cxx; src/SpecFuncCephes.h; src/SpecFuncCephesInv.cxx; src/SpecFuncMathCore.cxx; src/StdEngine.cxx; src/TComplex.cxx; src/TKDTree.cxx; src/TKDTreeBinning.cxx; src/TMath.cxx; src/TRandom.cxx; src/TRandom1.cxx; src/TRandom2.cxx; src/TRandom3.cxx; src/TRandomGen.cxx; src/TStatistic.cxx; src/UnBinData.cxx; src/VectorizedTMath.cxx; LIBRARIES; ${MATHCORE_LIBRARIES}; DICTIONARY_OPTIONS; -writeEmptyRootPCM; ${dictoptions}; DEPENDENCIES; Core; ${MATHCORE_DEPENDENCIES}; BUILTINS; ${M",MatchSource.DOCS,math/mathcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt:3996,Deployability,Integrat,IntegratorOptions,3996,; endif(). ROOT_ADD_C_FLAG(_flags -Wno-strict-overflow) # Avoid what it seems a compiler false positive warning; ROOT_ADD_C_FLAG(_flags -Wno-maybe-uninitialized) # Avoid what it seems a compiler false positive warning; ROOT_ADD_C_FLAG(_flags -Wno-parentheses-equality). if(imt); set(MATHCORE_DEPENDENCIES Imt); endif(). if(veccore); set(MATHCORE_BUILTINS VECCORE); set(MATHCORE_LIBRARIES ${VecCore_LIBRARIES}); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(MathCore; HEADERS; ${HEADERS}; SOURCES; src/AdaptiveIntegratorMultiDim.cxx; src/BasicMinimizer.cxx; src/BinData.cxx; src/BrentMethods.cxx; src/BrentMinimizer1D.cxx; src/BrentRootFinder.cxx; src/ChebyshevPol.cxx; src/DataRange.cxx; src/Delaunay2D.cxx; src/DistSampler.cxx; src/DistSamplerOptions.cxx; src/Factory.cxx; src/FitConfig.cxx; src/FitData.cxx; src/FitResult.cxx; src/FitUtil.cxx; src/Fitter.cxx; src/GaussIntegrator.cxx; src/GaussLegendreIntegrator.cxx; src/GenAlgoOptions.cxx; src/GoFTest.cxx; src/IOptions.cxx; src/Integrator.cxx; src/IntegratorOptions.cxx; src/MersenneTwisterEngine.cxx; src/MinimTransformFunction.cxx; src/Minimizer.cxx; src/MinimizerOptions.cxx; src/MinimizerVariableTransformation.cxx; src/MixMaxEngineImpl17.cxx; src/MixMaxEngineImpl240.cxx; src/MixMaxEngineImpl256.cxx; src/ParameterSettings.cxx; src/PdfFuncMathCore.cxx; src/ProbFuncMathCore.cxx; src/QuantFuncMathCore.cxx; src/RandomFunctions.cxx; src/RanluxppEngineImpl.cxx; src/RichardsonDerivator.cxx; src/RootFinder.cxx; src/SparseData.cxx; src/SpecFuncCephes.cxx; src/SpecFuncCephes.h; src/SpecFuncCephesInv.cxx; src/SpecFuncMathCore.cxx; src/StdEngine.cxx; src/TComplex.cxx; src/TKDTree.cxx; src/TKDTreeBinning.cxx; src/TMath.cxx; src/TRandom.cxx; src/TRandom1.cxx; src/TRandom2.cxx; src/TRandom3.cxx; src/TRandomGen.cxx; src/TStatistic.cxx; src/UnBinData.cxx; src/VectorizedTMath.cxx; LIBRARIES; ${MATHCORE_LIBRARIES}; DICTIONARY_OPTIONS; -writeEmptyRootPCM; ${dictoptions}; DEPENDENCIES; Core; ${MATHCORE_DEPENDENCIES}; BUILTINS; ${MATHCORE_BUILTINS}; ). ta,MatchSource.DOCS,math/mathcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt:748,Energy Efficiency,Adapt,AdaptiveIntegratorMultiDim,748,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT math/mathcore package; ############################################################################. set(HEADERS; Fit/BasicFCN.h; Fit/BinData.h; Fit/Chi2FCN.h; Fit/DataOptions.h; Fit/DataRange.h; Fit/FcnAdapter.h; Fit/FitConfig.h; Fit/FitData.h; Fit/FitExecutionPolicy.h; Fit/FitResult.h; Fit/FitUtil.h; Fit/Fitter.h; Fit/LogLikelihoodFCN.h; Fit/ParameterSettings.h; Fit/PoissonLikelihoodFCN.h; Fit/SparseData.h; Fit/UnBinData.h; Math/AdaptiveIntegratorMultiDim.h; Math/AllIntegrationTypes.h; Math/BasicMinimizer.h; Math/BrentMethods.h; Math/BrentMinimizer1D.h; Math/BrentRootFinder.h; Math/ChebyshevPol.h; Math/Delaunay2D.h; Math/DistFuncMathCore.h; Math/DistSampler.h; Math/DistSamplerOptions.h; Math/Error.h; Math/Factory.h; Math/FitMethodFunction.h; Math/Functor.h; Math/GaussIntegrator.h; Math/GaussLegendreIntegrator.h; Math/GenAlgoOptions.h; Math/GoFTest.h; Math/IFunction.h; Math/IFunctionfwd.h; Math/IMinimizer1D.h; Math/IOptions.h; Math/IParamFunction.h; Math/IParamFunctionfwd.h; Math/IRootFinderMethod.h; Math/Integrator.h; Math/IntegratorMultiDim.h; Math/IntegratorOptions.h; Math/KDTree.h; Math/LCGEngine.h; Math/Math.h; Math/MersenneTwisterEngine.h; Math/MinimTransformFunction.h; Math/MinimTransformVariable.h; Math/Minimizer.h; Math/MinimizerOptions.h; Math/MinimizerVariableTransformation.h; Math/MixMaxEngine.h; Math/MultiDimParamFunctionAdapter.h; Math/OneDimFunctionAdapter.h; Math/ParamFunctor.h; Math/PdfFuncMathCore.h; Math/ProbFuncMathCore.h; Math/QuantFuncMathCore.h; Math/Random.h; Math/RandomFunctions.h; Math/RanluxppEngine.h; Math/RichardsonDerivator.h; Math/RootFinder.h; Math/SpecFuncMathCore.h; Math/StdEngine.h; Math/TDataPoint.h; Math/TDataPointN.h; Mat",MatchSource.DOCS,math/mathcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt:3494,Energy Efficiency,Adapt,AdaptiveIntegratorMultiDim,3494,"declaration (from stl math.h) is broken.; # FIXME: Revise after a llvm upgrade or reproduce it outside rootcling.; list(REMOVE_ITEM HEADERS ""Math/Math.h""). if(vc); # We do not link against libVc.a thus it makes no sense to check for; # version compatibility between libraries and header files. This fixes; # ROOT-11002 where upon building the modules.idx we run the static ctor; # runLibraryAbiCheck which fails to find the corresponding symbol.; set(dictoptions ""-m"" ""Vc"" ""-mByproduct"" ""Vc"" ""-D"" ""Vc_NO_VERSION_CHECK""); endif(vc); endif(). ROOT_ADD_C_FLAG(_flags -Wno-strict-overflow) # Avoid what it seems a compiler false positive warning; ROOT_ADD_C_FLAG(_flags -Wno-maybe-uninitialized) # Avoid what it seems a compiler false positive warning; ROOT_ADD_C_FLAG(_flags -Wno-parentheses-equality). if(imt); set(MATHCORE_DEPENDENCIES Imt); endif(). if(veccore); set(MATHCORE_BUILTINS VECCORE); set(MATHCORE_LIBRARIES ${VecCore_LIBRARIES}); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(MathCore; HEADERS; ${HEADERS}; SOURCES; src/AdaptiveIntegratorMultiDim.cxx; src/BasicMinimizer.cxx; src/BinData.cxx; src/BrentMethods.cxx; src/BrentMinimizer1D.cxx; src/BrentRootFinder.cxx; src/ChebyshevPol.cxx; src/DataRange.cxx; src/Delaunay2D.cxx; src/DistSampler.cxx; src/DistSamplerOptions.cxx; src/Factory.cxx; src/FitConfig.cxx; src/FitData.cxx; src/FitResult.cxx; src/FitUtil.cxx; src/Fitter.cxx; src/GaussIntegrator.cxx; src/GaussLegendreIntegrator.cxx; src/GenAlgoOptions.cxx; src/GoFTest.cxx; src/IOptions.cxx; src/Integrator.cxx; src/IntegratorOptions.cxx; src/MersenneTwisterEngine.cxx; src/MinimTransformFunction.cxx; src/Minimizer.cxx; src/MinimizerOptions.cxx; src/MinimizerVariableTransformation.cxx; src/MixMaxEngineImpl17.cxx; src/MixMaxEngineImpl240.cxx; src/MixMaxEngineImpl256.cxx; src/ParameterSettings.cxx; src/PdfFuncMathCore.cxx; src/ProbFuncMathCore.cxx; src/QuantFuncMathCore.cxx; src/RandomFunctions.cxx; src/RanluxppEngineImpl.cxx; src/RichardsonDerivator.cxx; src/RootFinder.cxx; src/Spars",MatchSource.DOCS,math/mathcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt:1335,Integrability,Integrat,Integrator,1335,############################################################################. set(HEADERS; Fit/BasicFCN.h; Fit/BinData.h; Fit/Chi2FCN.h; Fit/DataOptions.h; Fit/DataRange.h; Fit/FcnAdapter.h; Fit/FitConfig.h; Fit/FitData.h; Fit/FitExecutionPolicy.h; Fit/FitResult.h; Fit/FitUtil.h; Fit/Fitter.h; Fit/LogLikelihoodFCN.h; Fit/ParameterSettings.h; Fit/PoissonLikelihoodFCN.h; Fit/SparseData.h; Fit/UnBinData.h; Math/AdaptiveIntegratorMultiDim.h; Math/AllIntegrationTypes.h; Math/BasicMinimizer.h; Math/BrentMethods.h; Math/BrentMinimizer1D.h; Math/BrentRootFinder.h; Math/ChebyshevPol.h; Math/Delaunay2D.h; Math/DistFuncMathCore.h; Math/DistSampler.h; Math/DistSamplerOptions.h; Math/Error.h; Math/Factory.h; Math/FitMethodFunction.h; Math/Functor.h; Math/GaussIntegrator.h; Math/GaussLegendreIntegrator.h; Math/GenAlgoOptions.h; Math/GoFTest.h; Math/IFunction.h; Math/IFunctionfwd.h; Math/IMinimizer1D.h; Math/IOptions.h; Math/IParamFunction.h; Math/IParamFunctionfwd.h; Math/IRootFinderMethod.h; Math/Integrator.h; Math/IntegratorMultiDim.h; Math/IntegratorOptions.h; Math/KDTree.h; Math/LCGEngine.h; Math/Math.h; Math/MersenneTwisterEngine.h; Math/MinimTransformFunction.h; Math/MinimTransformVariable.h; Math/Minimizer.h; Math/MinimizerOptions.h; Math/MinimizerVariableTransformation.h; Math/MixMaxEngine.h; Math/MultiDimParamFunctionAdapter.h; Math/OneDimFunctionAdapter.h; Math/ParamFunctor.h; Math/PdfFuncMathCore.h; Math/ProbFuncMathCore.h; Math/QuantFuncMathCore.h; Math/Random.h; Math/RandomFunctions.h; Math/RanluxppEngine.h; Math/RichardsonDerivator.h; Math/RootFinder.h; Math/SpecFuncMathCore.h; Math/StdEngine.h; Math/TDataPoint.h; Math/TDataPointN.h; Math/TRandomEngine.h; Math/Types.h; Math/Util.h; Math/VirtualIntegrator.h; Math/WrappedFunction.h; Math/WrappedParamFunction.h; TComplex.h; TKDTree.h; TKDTreeBinning.h; TMath.h; TRandom.h; TRandom1.h; TRandom2.h; TRandom3.h; TRandomGen.h; TStatistic.h; VectorizedTMath.h; ). if(runtime_cxxmodules); # Adding Math/Math.h to the MathCore mod,MatchSource.DOCS,math/mathcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt:1354,Integrability,Integrat,IntegratorMultiDim,1354,#####################################################. set(HEADERS; Fit/BasicFCN.h; Fit/BinData.h; Fit/Chi2FCN.h; Fit/DataOptions.h; Fit/DataRange.h; Fit/FcnAdapter.h; Fit/FitConfig.h; Fit/FitData.h; Fit/FitExecutionPolicy.h; Fit/FitResult.h; Fit/FitUtil.h; Fit/Fitter.h; Fit/LogLikelihoodFCN.h; Fit/ParameterSettings.h; Fit/PoissonLikelihoodFCN.h; Fit/SparseData.h; Fit/UnBinData.h; Math/AdaptiveIntegratorMultiDim.h; Math/AllIntegrationTypes.h; Math/BasicMinimizer.h; Math/BrentMethods.h; Math/BrentMinimizer1D.h; Math/BrentRootFinder.h; Math/ChebyshevPol.h; Math/Delaunay2D.h; Math/DistFuncMathCore.h; Math/DistSampler.h; Math/DistSamplerOptions.h; Math/Error.h; Math/Factory.h; Math/FitMethodFunction.h; Math/Functor.h; Math/GaussIntegrator.h; Math/GaussLegendreIntegrator.h; Math/GenAlgoOptions.h; Math/GoFTest.h; Math/IFunction.h; Math/IFunctionfwd.h; Math/IMinimizer1D.h; Math/IOptions.h; Math/IParamFunction.h; Math/IParamFunctionfwd.h; Math/IRootFinderMethod.h; Math/Integrator.h; Math/IntegratorMultiDim.h; Math/IntegratorOptions.h; Math/KDTree.h; Math/LCGEngine.h; Math/Math.h; Math/MersenneTwisterEngine.h; Math/MinimTransformFunction.h; Math/MinimTransformVariable.h; Math/Minimizer.h; Math/MinimizerOptions.h; Math/MinimizerVariableTransformation.h; Math/MixMaxEngine.h; Math/MultiDimParamFunctionAdapter.h; Math/OneDimFunctionAdapter.h; Math/ParamFunctor.h; Math/PdfFuncMathCore.h; Math/ProbFuncMathCore.h; Math/QuantFuncMathCore.h; Math/Random.h; Math/RandomFunctions.h; Math/RanluxppEngine.h; Math/RichardsonDerivator.h; Math/RootFinder.h; Math/SpecFuncMathCore.h; Math/StdEngine.h; Math/TDataPoint.h; Math/TDataPointN.h; Math/TRandomEngine.h; Math/Types.h; Math/Util.h; Math/VirtualIntegrator.h; Math/WrappedFunction.h; Math/WrappedParamFunction.h; TComplex.h; TKDTree.h; TKDTreeBinning.h; TMath.h; TRandom.h; TRandom1.h; TRandom2.h; TRandom3.h; TRandomGen.h; TStatistic.h; VectorizedTMath.h; ). if(runtime_cxxmodules); # Adding Math/Math.h to the MathCore module makes the generatio,MatchSource.DOCS,math/mathcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt:1381,Integrability,Integrat,IntegratorOptions,1381,##########################. set(HEADERS; Fit/BasicFCN.h; Fit/BinData.h; Fit/Chi2FCN.h; Fit/DataOptions.h; Fit/DataRange.h; Fit/FcnAdapter.h; Fit/FitConfig.h; Fit/FitData.h; Fit/FitExecutionPolicy.h; Fit/FitResult.h; Fit/FitUtil.h; Fit/Fitter.h; Fit/LogLikelihoodFCN.h; Fit/ParameterSettings.h; Fit/PoissonLikelihoodFCN.h; Fit/SparseData.h; Fit/UnBinData.h; Math/AdaptiveIntegratorMultiDim.h; Math/AllIntegrationTypes.h; Math/BasicMinimizer.h; Math/BrentMethods.h; Math/BrentMinimizer1D.h; Math/BrentRootFinder.h; Math/ChebyshevPol.h; Math/Delaunay2D.h; Math/DistFuncMathCore.h; Math/DistSampler.h; Math/DistSamplerOptions.h; Math/Error.h; Math/Factory.h; Math/FitMethodFunction.h; Math/Functor.h; Math/GaussIntegrator.h; Math/GaussLegendreIntegrator.h; Math/GenAlgoOptions.h; Math/GoFTest.h; Math/IFunction.h; Math/IFunctionfwd.h; Math/IMinimizer1D.h; Math/IOptions.h; Math/IParamFunction.h; Math/IParamFunctionfwd.h; Math/IRootFinderMethod.h; Math/Integrator.h; Math/IntegratorMultiDim.h; Math/IntegratorOptions.h; Math/KDTree.h; Math/LCGEngine.h; Math/Math.h; Math/MersenneTwisterEngine.h; Math/MinimTransformFunction.h; Math/MinimTransformVariable.h; Math/Minimizer.h; Math/MinimizerOptions.h; Math/MinimizerVariableTransformation.h; Math/MixMaxEngine.h; Math/MultiDimParamFunctionAdapter.h; Math/OneDimFunctionAdapter.h; Math/ParamFunctor.h; Math/PdfFuncMathCore.h; Math/ProbFuncMathCore.h; Math/QuantFuncMathCore.h; Math/Random.h; Math/RandomFunctions.h; Math/RanluxppEngine.h; Math/RichardsonDerivator.h; Math/RootFinder.h; Math/SpecFuncMathCore.h; Math/StdEngine.h; Math/TDataPoint.h; Math/TDataPointN.h; Math/TRandomEngine.h; Math/Types.h; Math/Util.h; Math/VirtualIntegrator.h; Math/WrappedFunction.h; Math/WrappedParamFunction.h; TComplex.h; TKDTree.h; TKDTreeBinning.h; TMath.h; TRandom.h; TRandom1.h; TRandom2.h; TRandom3.h; TRandomGen.h; TStatistic.h; VectorizedTMath.h; ). if(runtime_cxxmodules); # Adding Math/Math.h to the MathCore module makes the generation of GenVector; # dictiona,MatchSource.DOCS,math/mathcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt:2078,Integrability,Wrap,WrappedFunction,2078," Math/GaussIntegrator.h; Math/GaussLegendreIntegrator.h; Math/GenAlgoOptions.h; Math/GoFTest.h; Math/IFunction.h; Math/IFunctionfwd.h; Math/IMinimizer1D.h; Math/IOptions.h; Math/IParamFunction.h; Math/IParamFunctionfwd.h; Math/IRootFinderMethod.h; Math/Integrator.h; Math/IntegratorMultiDim.h; Math/IntegratorOptions.h; Math/KDTree.h; Math/LCGEngine.h; Math/Math.h; Math/MersenneTwisterEngine.h; Math/MinimTransformFunction.h; Math/MinimTransformVariable.h; Math/Minimizer.h; Math/MinimizerOptions.h; Math/MinimizerVariableTransformation.h; Math/MixMaxEngine.h; Math/MultiDimParamFunctionAdapter.h; Math/OneDimFunctionAdapter.h; Math/ParamFunctor.h; Math/PdfFuncMathCore.h; Math/ProbFuncMathCore.h; Math/QuantFuncMathCore.h; Math/Random.h; Math/RandomFunctions.h; Math/RanluxppEngine.h; Math/RichardsonDerivator.h; Math/RootFinder.h; Math/SpecFuncMathCore.h; Math/StdEngine.h; Math/TDataPoint.h; Math/TDataPointN.h; Math/TRandomEngine.h; Math/Types.h; Math/Util.h; Math/VirtualIntegrator.h; Math/WrappedFunction.h; Math/WrappedParamFunction.h; TComplex.h; TKDTree.h; TKDTreeBinning.h; TMath.h; TRandom.h; TRandom1.h; TRandom2.h; TRandom3.h; TRandomGen.h; TStatistic.h; VectorizedTMath.h; ). if(runtime_cxxmodules); # Adding Math/Math.h to the MathCore module makes the generation of GenVector; # dictionary hand due to a bug in rootcling/clang. The redeclaration chain of; # 'abs' shadow declaration (from stl math.h) is broken.; # FIXME: Revise after a llvm upgrade or reproduce it outside rootcling.; list(REMOVE_ITEM HEADERS ""Math/Math.h""). if(vc); # We do not link against libVc.a thus it makes no sense to check for; # version compatibility between libraries and header files. This fixes; # ROOT-11002 where upon building the modules.idx we run the static ctor; # runLibraryAbiCheck which fails to find the corresponding symbol.; set(dictoptions ""-m"" ""Vc"" ""-mByproduct"" ""Vc"" ""-D"" ""Vc_NO_VERSION_CHECK""); endif(vc); endif(). ROOT_ADD_C_FLAG(_flags -Wno-strict-overflow) # Avoid what it seems a co",MatchSource.DOCS,math/mathcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt:2102,Integrability,Wrap,WrappedParamFunction,2102,"ath/GaussLegendreIntegrator.h; Math/GenAlgoOptions.h; Math/GoFTest.h; Math/IFunction.h; Math/IFunctionfwd.h; Math/IMinimizer1D.h; Math/IOptions.h; Math/IParamFunction.h; Math/IParamFunctionfwd.h; Math/IRootFinderMethod.h; Math/Integrator.h; Math/IntegratorMultiDim.h; Math/IntegratorOptions.h; Math/KDTree.h; Math/LCGEngine.h; Math/Math.h; Math/MersenneTwisterEngine.h; Math/MinimTransformFunction.h; Math/MinimTransformVariable.h; Math/Minimizer.h; Math/MinimizerOptions.h; Math/MinimizerVariableTransformation.h; Math/MixMaxEngine.h; Math/MultiDimParamFunctionAdapter.h; Math/OneDimFunctionAdapter.h; Math/ParamFunctor.h; Math/PdfFuncMathCore.h; Math/ProbFuncMathCore.h; Math/QuantFuncMathCore.h; Math/Random.h; Math/RandomFunctions.h; Math/RanluxppEngine.h; Math/RichardsonDerivator.h; Math/RootFinder.h; Math/SpecFuncMathCore.h; Math/StdEngine.h; Math/TDataPoint.h; Math/TDataPointN.h; Math/TRandomEngine.h; Math/Types.h; Math/Util.h; Math/VirtualIntegrator.h; Math/WrappedFunction.h; Math/WrappedParamFunction.h; TComplex.h; TKDTree.h; TKDTreeBinning.h; TMath.h; TRandom.h; TRandom1.h; TRandom2.h; TRandom3.h; TRandomGen.h; TStatistic.h; VectorizedTMath.h; ). if(runtime_cxxmodules); # Adding Math/Math.h to the MathCore module makes the generation of GenVector; # dictionary hand due to a bug in rootcling/clang. The redeclaration chain of; # 'abs' shadow declaration (from stl math.h) is broken.; # FIXME: Revise after a llvm upgrade or reproduce it outside rootcling.; list(REMOVE_ITEM HEADERS ""Math/Math.h""). if(vc); # We do not link against libVc.a thus it makes no sense to check for; # version compatibility between libraries and header files. This fixes; # ROOT-11002 where upon building the modules.idx we run the static ctor; # runLibraryAbiCheck which fails to find the corresponding symbol.; set(dictoptions ""-m"" ""Vc"" ""-mByproduct"" ""Vc"" ""-D"" ""Vc_NO_VERSION_CHECK""); endif(vc); endif(). ROOT_ADD_C_FLAG(_flags -Wno-strict-overflow) # Avoid what it seems a compiler false positive warni",MatchSource.DOCS,math/mathcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt:3976,Integrability,Integrat,Integrator,3976,"SION_CHECK""); endif(vc); endif(). ROOT_ADD_C_FLAG(_flags -Wno-strict-overflow) # Avoid what it seems a compiler false positive warning; ROOT_ADD_C_FLAG(_flags -Wno-maybe-uninitialized) # Avoid what it seems a compiler false positive warning; ROOT_ADD_C_FLAG(_flags -Wno-parentheses-equality). if(imt); set(MATHCORE_DEPENDENCIES Imt); endif(). if(veccore); set(MATHCORE_BUILTINS VECCORE); set(MATHCORE_LIBRARIES ${VecCore_LIBRARIES}); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(MathCore; HEADERS; ${HEADERS}; SOURCES; src/AdaptiveIntegratorMultiDim.cxx; src/BasicMinimizer.cxx; src/BinData.cxx; src/BrentMethods.cxx; src/BrentMinimizer1D.cxx; src/BrentRootFinder.cxx; src/ChebyshevPol.cxx; src/DataRange.cxx; src/Delaunay2D.cxx; src/DistSampler.cxx; src/DistSamplerOptions.cxx; src/Factory.cxx; src/FitConfig.cxx; src/FitData.cxx; src/FitResult.cxx; src/FitUtil.cxx; src/Fitter.cxx; src/GaussIntegrator.cxx; src/GaussLegendreIntegrator.cxx; src/GenAlgoOptions.cxx; src/GoFTest.cxx; src/IOptions.cxx; src/Integrator.cxx; src/IntegratorOptions.cxx; src/MersenneTwisterEngine.cxx; src/MinimTransformFunction.cxx; src/Minimizer.cxx; src/MinimizerOptions.cxx; src/MinimizerVariableTransformation.cxx; src/MixMaxEngineImpl17.cxx; src/MixMaxEngineImpl240.cxx; src/MixMaxEngineImpl256.cxx; src/ParameterSettings.cxx; src/PdfFuncMathCore.cxx; src/ProbFuncMathCore.cxx; src/QuantFuncMathCore.cxx; src/RandomFunctions.cxx; src/RanluxppEngineImpl.cxx; src/RichardsonDerivator.cxx; src/RootFinder.cxx; src/SparseData.cxx; src/SpecFuncCephes.cxx; src/SpecFuncCephes.h; src/SpecFuncCephesInv.cxx; src/SpecFuncMathCore.cxx; src/StdEngine.cxx; src/TComplex.cxx; src/TKDTree.cxx; src/TKDTreeBinning.cxx; src/TMath.cxx; src/TRandom.cxx; src/TRandom1.cxx; src/TRandom2.cxx; src/TRandom3.cxx; src/TRandomGen.cxx; src/TStatistic.cxx; src/UnBinData.cxx; src/VectorizedTMath.cxx; LIBRARIES; ${MATHCORE_LIBRARIES}; DICTIONARY_OPTIONS; -writeEmptyRootPCM; ${dictoptions}; DEPENDENCIES; Core; ${MATHCORE_DEPENDENCIES}; BUILTINS; ${M",MatchSource.DOCS,math/mathcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt:3996,Integrability,Integrat,IntegratorOptions,3996,; endif(). ROOT_ADD_C_FLAG(_flags -Wno-strict-overflow) # Avoid what it seems a compiler false positive warning; ROOT_ADD_C_FLAG(_flags -Wno-maybe-uninitialized) # Avoid what it seems a compiler false positive warning; ROOT_ADD_C_FLAG(_flags -Wno-parentheses-equality). if(imt); set(MATHCORE_DEPENDENCIES Imt); endif(). if(veccore); set(MATHCORE_BUILTINS VECCORE); set(MATHCORE_LIBRARIES ${VecCore_LIBRARIES}); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(MathCore; HEADERS; ${HEADERS}; SOURCES; src/AdaptiveIntegratorMultiDim.cxx; src/BasicMinimizer.cxx; src/BinData.cxx; src/BrentMethods.cxx; src/BrentMinimizer1D.cxx; src/BrentRootFinder.cxx; src/ChebyshevPol.cxx; src/DataRange.cxx; src/Delaunay2D.cxx; src/DistSampler.cxx; src/DistSamplerOptions.cxx; src/Factory.cxx; src/FitConfig.cxx; src/FitData.cxx; src/FitResult.cxx; src/FitUtil.cxx; src/Fitter.cxx; src/GaussIntegrator.cxx; src/GaussLegendreIntegrator.cxx; src/GenAlgoOptions.cxx; src/GoFTest.cxx; src/IOptions.cxx; src/Integrator.cxx; src/IntegratorOptions.cxx; src/MersenneTwisterEngine.cxx; src/MinimTransformFunction.cxx; src/Minimizer.cxx; src/MinimizerOptions.cxx; src/MinimizerVariableTransformation.cxx; src/MixMaxEngineImpl17.cxx; src/MixMaxEngineImpl240.cxx; src/MixMaxEngineImpl256.cxx; src/ParameterSettings.cxx; src/PdfFuncMathCore.cxx; src/ProbFuncMathCore.cxx; src/QuantFuncMathCore.cxx; src/RandomFunctions.cxx; src/RanluxppEngineImpl.cxx; src/RichardsonDerivator.cxx; src/RootFinder.cxx; src/SparseData.cxx; src/SpecFuncCephes.cxx; src/SpecFuncCephes.h; src/SpecFuncCephesInv.cxx; src/SpecFuncMathCore.cxx; src/StdEngine.cxx; src/TComplex.cxx; src/TKDTree.cxx; src/TKDTreeBinning.cxx; src/TMath.cxx; src/TRandom.cxx; src/TRandom1.cxx; src/TRandom2.cxx; src/TRandom3.cxx; src/TRandomGen.cxx; src/TStatistic.cxx; src/UnBinData.cxx; src/VectorizedTMath.cxx; LIBRARIES; ${MATHCORE_LIBRARIES}; DICTIONARY_OPTIONS; -writeEmptyRootPCM; ${dictoptions}; DEPENDENCIES; Core; ${MATHCORE_DEPENDENCIES}; BUILTINS; ${MATHCORE_BUILTINS}; ). ta,MatchSource.DOCS,math/mathcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt:4918,Integrability,DEPEND,DEPENDENCIES,4918,torMultiDim.cxx; src/BasicMinimizer.cxx; src/BinData.cxx; src/BrentMethods.cxx; src/BrentMinimizer1D.cxx; src/BrentRootFinder.cxx; src/ChebyshevPol.cxx; src/DataRange.cxx; src/Delaunay2D.cxx; src/DistSampler.cxx; src/DistSamplerOptions.cxx; src/Factory.cxx; src/FitConfig.cxx; src/FitData.cxx; src/FitResult.cxx; src/FitUtil.cxx; src/Fitter.cxx; src/GaussIntegrator.cxx; src/GaussLegendreIntegrator.cxx; src/GenAlgoOptions.cxx; src/GoFTest.cxx; src/IOptions.cxx; src/Integrator.cxx; src/IntegratorOptions.cxx; src/MersenneTwisterEngine.cxx; src/MinimTransformFunction.cxx; src/Minimizer.cxx; src/MinimizerOptions.cxx; src/MinimizerVariableTransformation.cxx; src/MixMaxEngineImpl17.cxx; src/MixMaxEngineImpl240.cxx; src/MixMaxEngineImpl256.cxx; src/ParameterSettings.cxx; src/PdfFuncMathCore.cxx; src/ProbFuncMathCore.cxx; src/QuantFuncMathCore.cxx; src/RandomFunctions.cxx; src/RanluxppEngineImpl.cxx; src/RichardsonDerivator.cxx; src/RootFinder.cxx; src/SparseData.cxx; src/SpecFuncCephes.cxx; src/SpecFuncCephes.h; src/SpecFuncCephesInv.cxx; src/SpecFuncMathCore.cxx; src/StdEngine.cxx; src/TComplex.cxx; src/TKDTree.cxx; src/TKDTreeBinning.cxx; src/TMath.cxx; src/TRandom.cxx; src/TRandom1.cxx; src/TRandom2.cxx; src/TRandom3.cxx; src/TRandomGen.cxx; src/TStatistic.cxx; src/UnBinData.cxx; src/VectorizedTMath.cxx; LIBRARIES; ${MATHCORE_LIBRARIES}; DICTIONARY_OPTIONS; -writeEmptyRootPCM; ${dictoptions}; DEPENDENCIES; Core; ${MATHCORE_DEPENDENCIES}; BUILTINS; ${MATHCORE_BUILTINS}; ). target_include_directories(MathCore PRIVATE ${Vc_INCLUDE_DIR}); target_include_directories(MathCore PRIVATE ${VecCore_INCLUDE_DIRS}). list(APPEND math_incl ${Vc_INCLUDE_DIR}); list(APPEND math_incl ${VecCore_INCLUDE_DIRS}). foreach(incl ${math_incl}); target_include_directories(MathCore PUBLIC $<BUILD_INTERFACE:${incl}>); endforeach(). target_compile_definitions(MathCore INTERFACE ${VecCore_DEFINITIONS}); target_link_libraries(MathCore PRIVATE ${CMAKE_THREAD_LIBS_INIT}). ROOT_ADD_TEST_SUBDIRECTORY(test); ,MatchSource.DOCS,math/mathcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt:5373,Integrability,INTERFACE,INTERFACE,5373,torMultiDim.cxx; src/BasicMinimizer.cxx; src/BinData.cxx; src/BrentMethods.cxx; src/BrentMinimizer1D.cxx; src/BrentRootFinder.cxx; src/ChebyshevPol.cxx; src/DataRange.cxx; src/Delaunay2D.cxx; src/DistSampler.cxx; src/DistSamplerOptions.cxx; src/Factory.cxx; src/FitConfig.cxx; src/FitData.cxx; src/FitResult.cxx; src/FitUtil.cxx; src/Fitter.cxx; src/GaussIntegrator.cxx; src/GaussLegendreIntegrator.cxx; src/GenAlgoOptions.cxx; src/GoFTest.cxx; src/IOptions.cxx; src/Integrator.cxx; src/IntegratorOptions.cxx; src/MersenneTwisterEngine.cxx; src/MinimTransformFunction.cxx; src/Minimizer.cxx; src/MinimizerOptions.cxx; src/MinimizerVariableTransformation.cxx; src/MixMaxEngineImpl17.cxx; src/MixMaxEngineImpl240.cxx; src/MixMaxEngineImpl256.cxx; src/ParameterSettings.cxx; src/PdfFuncMathCore.cxx; src/ProbFuncMathCore.cxx; src/QuantFuncMathCore.cxx; src/RandomFunctions.cxx; src/RanluxppEngineImpl.cxx; src/RichardsonDerivator.cxx; src/RootFinder.cxx; src/SparseData.cxx; src/SpecFuncCephes.cxx; src/SpecFuncCephes.h; src/SpecFuncCephesInv.cxx; src/SpecFuncMathCore.cxx; src/StdEngine.cxx; src/TComplex.cxx; src/TKDTree.cxx; src/TKDTreeBinning.cxx; src/TMath.cxx; src/TRandom.cxx; src/TRandom1.cxx; src/TRandom2.cxx; src/TRandom3.cxx; src/TRandomGen.cxx; src/TStatistic.cxx; src/UnBinData.cxx; src/VectorizedTMath.cxx; LIBRARIES; ${MATHCORE_LIBRARIES}; DICTIONARY_OPTIONS; -writeEmptyRootPCM; ${dictoptions}; DEPENDENCIES; Core; ${MATHCORE_DEPENDENCIES}; BUILTINS; ${MATHCORE_BUILTINS}; ). target_include_directories(MathCore PRIVATE ${Vc_INCLUDE_DIR}); target_include_directories(MathCore PRIVATE ${VecCore_INCLUDE_DIRS}). list(APPEND math_incl ${Vc_INCLUDE_DIR}); list(APPEND math_incl ${VecCore_INCLUDE_DIRS}). foreach(incl ${math_incl}); target_include_directories(MathCore PUBLIC $<BUILD_INTERFACE:${incl}>); endforeach(). target_compile_definitions(MathCore INTERFACE ${VecCore_DEFINITIONS}); target_link_libraries(MathCore PRIVATE ${CMAKE_THREAD_LIBS_INIT}). ROOT_ADD_TEST_SUBDIRECTORY(test); ,MatchSource.DOCS,math/mathcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt:748,Modifiability,Adapt,AdaptiveIntegratorMultiDim,748,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT math/mathcore package; ############################################################################. set(HEADERS; Fit/BasicFCN.h; Fit/BinData.h; Fit/Chi2FCN.h; Fit/DataOptions.h; Fit/DataRange.h; Fit/FcnAdapter.h; Fit/FitConfig.h; Fit/FitData.h; Fit/FitExecutionPolicy.h; Fit/FitResult.h; Fit/FitUtil.h; Fit/Fitter.h; Fit/LogLikelihoodFCN.h; Fit/ParameterSettings.h; Fit/PoissonLikelihoodFCN.h; Fit/SparseData.h; Fit/UnBinData.h; Math/AdaptiveIntegratorMultiDim.h; Math/AllIntegrationTypes.h; Math/BasicMinimizer.h; Math/BrentMethods.h; Math/BrentMinimizer1D.h; Math/BrentRootFinder.h; Math/ChebyshevPol.h; Math/Delaunay2D.h; Math/DistFuncMathCore.h; Math/DistSampler.h; Math/DistSamplerOptions.h; Math/Error.h; Math/Factory.h; Math/FitMethodFunction.h; Math/Functor.h; Math/GaussIntegrator.h; Math/GaussLegendreIntegrator.h; Math/GenAlgoOptions.h; Math/GoFTest.h; Math/IFunction.h; Math/IFunctionfwd.h; Math/IMinimizer1D.h; Math/IOptions.h; Math/IParamFunction.h; Math/IParamFunctionfwd.h; Math/IRootFinderMethod.h; Math/Integrator.h; Math/IntegratorMultiDim.h; Math/IntegratorOptions.h; Math/KDTree.h; Math/LCGEngine.h; Math/Math.h; Math/MersenneTwisterEngine.h; Math/MinimTransformFunction.h; Math/MinimTransformVariable.h; Math/Minimizer.h; Math/MinimizerOptions.h; Math/MinimizerVariableTransformation.h; Math/MixMaxEngine.h; Math/MultiDimParamFunctionAdapter.h; Math/OneDimFunctionAdapter.h; Math/ParamFunctor.h; Math/PdfFuncMathCore.h; Math/ProbFuncMathCore.h; Math/QuantFuncMathCore.h; Math/Random.h; Math/RandomFunctions.h; Math/RanluxppEngine.h; Math/RichardsonDerivator.h; Math/RootFinder.h; Math/SpecFuncMathCore.h; Math/StdEngine.h; Math/TDataPoint.h; Math/TDataPointN.h; Mat",MatchSource.DOCS,math/mathcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt:3494,Modifiability,Adapt,AdaptiveIntegratorMultiDim,3494,"declaration (from stl math.h) is broken.; # FIXME: Revise after a llvm upgrade or reproduce it outside rootcling.; list(REMOVE_ITEM HEADERS ""Math/Math.h""). if(vc); # We do not link against libVc.a thus it makes no sense to check for; # version compatibility between libraries and header files. This fixes; # ROOT-11002 where upon building the modules.idx we run the static ctor; # runLibraryAbiCheck which fails to find the corresponding symbol.; set(dictoptions ""-m"" ""Vc"" ""-mByproduct"" ""Vc"" ""-D"" ""Vc_NO_VERSION_CHECK""); endif(vc); endif(). ROOT_ADD_C_FLAG(_flags -Wno-strict-overflow) # Avoid what it seems a compiler false positive warning; ROOT_ADD_C_FLAG(_flags -Wno-maybe-uninitialized) # Avoid what it seems a compiler false positive warning; ROOT_ADD_C_FLAG(_flags -Wno-parentheses-equality). if(imt); set(MATHCORE_DEPENDENCIES Imt); endif(). if(veccore); set(MATHCORE_BUILTINS VECCORE); set(MATHCORE_LIBRARIES ${VecCore_LIBRARIES}); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(MathCore; HEADERS; ${HEADERS}; SOURCES; src/AdaptiveIntegratorMultiDim.cxx; src/BasicMinimizer.cxx; src/BinData.cxx; src/BrentMethods.cxx; src/BrentMinimizer1D.cxx; src/BrentRootFinder.cxx; src/ChebyshevPol.cxx; src/DataRange.cxx; src/Delaunay2D.cxx; src/DistSampler.cxx; src/DistSamplerOptions.cxx; src/Factory.cxx; src/FitConfig.cxx; src/FitData.cxx; src/FitResult.cxx; src/FitUtil.cxx; src/Fitter.cxx; src/GaussIntegrator.cxx; src/GaussLegendreIntegrator.cxx; src/GenAlgoOptions.cxx; src/GoFTest.cxx; src/IOptions.cxx; src/Integrator.cxx; src/IntegratorOptions.cxx; src/MersenneTwisterEngine.cxx; src/MinimTransformFunction.cxx; src/Minimizer.cxx; src/MinimizerOptions.cxx; src/MinimizerVariableTransformation.cxx; src/MixMaxEngineImpl17.cxx; src/MixMaxEngineImpl240.cxx; src/MixMaxEngineImpl256.cxx; src/ParameterSettings.cxx; src/PdfFuncMathCore.cxx; src/ProbFuncMathCore.cxx; src/QuantFuncMathCore.cxx; src/RandomFunctions.cxx; src/RanluxppEngineImpl.cxx; src/RichardsonDerivator.cxx; src/RootFinder.cxx; src/Spars",MatchSource.DOCS,math/mathcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt:3058,Safety,Avoid,Avoid,3058,"KDTree.h; TKDTreeBinning.h; TMath.h; TRandom.h; TRandom1.h; TRandom2.h; TRandom3.h; TRandomGen.h; TStatistic.h; VectorizedTMath.h; ). if(runtime_cxxmodules); # Adding Math/Math.h to the MathCore module makes the generation of GenVector; # dictionary hand due to a bug in rootcling/clang. The redeclaration chain of; # 'abs' shadow declaration (from stl math.h) is broken.; # FIXME: Revise after a llvm upgrade or reproduce it outside rootcling.; list(REMOVE_ITEM HEADERS ""Math/Math.h""). if(vc); # We do not link against libVc.a thus it makes no sense to check for; # version compatibility between libraries and header files. This fixes; # ROOT-11002 where upon building the modules.idx we run the static ctor; # runLibraryAbiCheck which fails to find the corresponding symbol.; set(dictoptions ""-m"" ""Vc"" ""-mByproduct"" ""Vc"" ""-D"" ""Vc_NO_VERSION_CHECK""); endif(vc); endif(). ROOT_ADD_C_FLAG(_flags -Wno-strict-overflow) # Avoid what it seems a compiler false positive warning; ROOT_ADD_C_FLAG(_flags -Wno-maybe-uninitialized) # Avoid what it seems a compiler false positive warning; ROOT_ADD_C_FLAG(_flags -Wno-parentheses-equality). if(imt); set(MATHCORE_DEPENDENCIES Imt); endif(). if(veccore); set(MATHCORE_BUILTINS VECCORE); set(MATHCORE_LIBRARIES ${VecCore_LIBRARIES}); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(MathCore; HEADERS; ${HEADERS}; SOURCES; src/AdaptiveIntegratorMultiDim.cxx; src/BasicMinimizer.cxx; src/BinData.cxx; src/BrentMethods.cxx; src/BrentMinimizer1D.cxx; src/BrentRootFinder.cxx; src/ChebyshevPol.cxx; src/DataRange.cxx; src/Delaunay2D.cxx; src/DistSampler.cxx; src/DistSamplerOptions.cxx; src/Factory.cxx; src/FitConfig.cxx; src/FitData.cxx; src/FitResult.cxx; src/FitUtil.cxx; src/Fitter.cxx; src/GaussIntegrator.cxx; src/GaussLegendreIntegrator.cxx; src/GenAlgoOptions.cxx; src/GoFTest.cxx; src/IOptions.cxx; src/Integrator.cxx; src/IntegratorOptions.cxx; src/MersenneTwisterEngine.cxx; src/MinimTransformFunction.cxx; src/Minimizer.cxx; src/MinimizerOptions.cxx; src/Minimizer",MatchSource.DOCS,math/mathcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt:3164,Safety,Avoid,Avoid,3164,"KDTree.h; TKDTreeBinning.h; TMath.h; TRandom.h; TRandom1.h; TRandom2.h; TRandom3.h; TRandomGen.h; TStatistic.h; VectorizedTMath.h; ). if(runtime_cxxmodules); # Adding Math/Math.h to the MathCore module makes the generation of GenVector; # dictionary hand due to a bug in rootcling/clang. The redeclaration chain of; # 'abs' shadow declaration (from stl math.h) is broken.; # FIXME: Revise after a llvm upgrade or reproduce it outside rootcling.; list(REMOVE_ITEM HEADERS ""Math/Math.h""). if(vc); # We do not link against libVc.a thus it makes no sense to check for; # version compatibility between libraries and header files. This fixes; # ROOT-11002 where upon building the modules.idx we run the static ctor; # runLibraryAbiCheck which fails to find the corresponding symbol.; set(dictoptions ""-m"" ""Vc"" ""-mByproduct"" ""Vc"" ""-D"" ""Vc_NO_VERSION_CHECK""); endif(vc); endif(). ROOT_ADD_C_FLAG(_flags -Wno-strict-overflow) # Avoid what it seems a compiler false positive warning; ROOT_ADD_C_FLAG(_flags -Wno-maybe-uninitialized) # Avoid what it seems a compiler false positive warning; ROOT_ADD_C_FLAG(_flags -Wno-parentheses-equality). if(imt); set(MATHCORE_DEPENDENCIES Imt); endif(). if(veccore); set(MATHCORE_BUILTINS VECCORE); set(MATHCORE_LIBRARIES ${VecCore_LIBRARIES}); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(MathCore; HEADERS; ${HEADERS}; SOURCES; src/AdaptiveIntegratorMultiDim.cxx; src/BasicMinimizer.cxx; src/BinData.cxx; src/BrentMethods.cxx; src/BrentMinimizer1D.cxx; src/BrentRootFinder.cxx; src/ChebyshevPol.cxx; src/DataRange.cxx; src/Delaunay2D.cxx; src/DistSampler.cxx; src/DistSamplerOptions.cxx; src/Factory.cxx; src/FitConfig.cxx; src/FitData.cxx; src/FitResult.cxx; src/FitUtil.cxx; src/Fitter.cxx; src/GaussIntegrator.cxx; src/GaussLegendreIntegrator.cxx; src/GenAlgoOptions.cxx; src/GoFTest.cxx; src/IOptions.cxx; src/Integrator.cxx; src/IntegratorOptions.cxx; src/MersenneTwisterEngine.cxx; src/MinimTransformFunction.cxx; src/Minimizer.cxx; src/MinimizerOptions.cxx; src/Minimizer",MatchSource.DOCS,math/mathcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt:635,Testability,Log,LogLikelihoodFCN,635,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT math/mathcore package; ############################################################################. set(HEADERS; Fit/BasicFCN.h; Fit/BinData.h; Fit/Chi2FCN.h; Fit/DataOptions.h; Fit/DataRange.h; Fit/FcnAdapter.h; Fit/FitConfig.h; Fit/FitData.h; Fit/FitExecutionPolicy.h; Fit/FitResult.h; Fit/FitUtil.h; Fit/Fitter.h; Fit/LogLikelihoodFCN.h; Fit/ParameterSettings.h; Fit/PoissonLikelihoodFCN.h; Fit/SparseData.h; Fit/UnBinData.h; Math/AdaptiveIntegratorMultiDim.h; Math/AllIntegrationTypes.h; Math/BasicMinimizer.h; Math/BrentMethods.h; Math/BrentMinimizer1D.h; Math/BrentRootFinder.h; Math/ChebyshevPol.h; Math/Delaunay2D.h; Math/DistFuncMathCore.h; Math/DistSampler.h; Math/DistSamplerOptions.h; Math/Error.h; Math/Factory.h; Math/FitMethodFunction.h; Math/Functor.h; Math/GaussIntegrator.h; Math/GaussLegendreIntegrator.h; Math/GenAlgoOptions.h; Math/GoFTest.h; Math/IFunction.h; Math/IFunctionfwd.h; Math/IMinimizer1D.h; Math/IOptions.h; Math/IParamFunction.h; Math/IParamFunctionfwd.h; Math/IRootFinderMethod.h; Math/Integrator.h; Math/IntegratorMultiDim.h; Math/IntegratorOptions.h; Math/KDTree.h; Math/LCGEngine.h; Math/Math.h; Math/MersenneTwisterEngine.h; Math/MinimTransformFunction.h; Math/MinimTransformVariable.h; Math/Minimizer.h; Math/MinimizerOptions.h; Math/MinimizerVariableTransformation.h; Math/MixMaxEngine.h; Math/MultiDimParamFunctionAdapter.h; Math/OneDimFunctionAdapter.h; Math/ParamFunctor.h; Math/PdfFuncMathCore.h; Math/ProbFuncMathCore.h; Math/QuantFuncMathCore.h; Math/Random.h; Math/RandomFunctions.h; Math/RanluxppEngine.h; Math/RichardsonDerivator.h; Math/RootFinder.h; Math/SpecFuncMathCore.h; Math/StdEngine.h; Math/TDataPoint.h; Math/TDataPointN.h; Mat",MatchSource.DOCS,math/mathcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt:5502,Testability,test,test,5502,torMultiDim.cxx; src/BasicMinimizer.cxx; src/BinData.cxx; src/BrentMethods.cxx; src/BrentMinimizer1D.cxx; src/BrentRootFinder.cxx; src/ChebyshevPol.cxx; src/DataRange.cxx; src/Delaunay2D.cxx; src/DistSampler.cxx; src/DistSamplerOptions.cxx; src/Factory.cxx; src/FitConfig.cxx; src/FitData.cxx; src/FitResult.cxx; src/FitUtil.cxx; src/Fitter.cxx; src/GaussIntegrator.cxx; src/GaussLegendreIntegrator.cxx; src/GenAlgoOptions.cxx; src/GoFTest.cxx; src/IOptions.cxx; src/Integrator.cxx; src/IntegratorOptions.cxx; src/MersenneTwisterEngine.cxx; src/MinimTransformFunction.cxx; src/Minimizer.cxx; src/MinimizerOptions.cxx; src/MinimizerVariableTransformation.cxx; src/MixMaxEngineImpl17.cxx; src/MixMaxEngineImpl240.cxx; src/MixMaxEngineImpl256.cxx; src/ParameterSettings.cxx; src/PdfFuncMathCore.cxx; src/ProbFuncMathCore.cxx; src/QuantFuncMathCore.cxx; src/RandomFunctions.cxx; src/RanluxppEngineImpl.cxx; src/RichardsonDerivator.cxx; src/RootFinder.cxx; src/SparseData.cxx; src/SpecFuncCephes.cxx; src/SpecFuncCephes.h; src/SpecFuncCephesInv.cxx; src/SpecFuncMathCore.cxx; src/StdEngine.cxx; src/TComplex.cxx; src/TKDTree.cxx; src/TKDTreeBinning.cxx; src/TMath.cxx; src/TRandom.cxx; src/TRandom1.cxx; src/TRandom2.cxx; src/TRandom3.cxx; src/TRandomGen.cxx; src/TStatistic.cxx; src/UnBinData.cxx; src/VectorizedTMath.cxx; LIBRARIES; ${MATHCORE_LIBRARIES}; DICTIONARY_OPTIONS; -writeEmptyRootPCM; ${dictoptions}; DEPENDENCIES; Core; ${MATHCORE_DEPENDENCIES}; BUILTINS; ${MATHCORE_BUILTINS}; ). target_include_directories(MathCore PRIVATE ${Vc_INCLUDE_DIR}); target_include_directories(MathCore PRIVATE ${VecCore_INCLUDE_DIRS}). list(APPEND math_incl ${Vc_INCLUDE_DIR}); list(APPEND math_incl ${VecCore_INCLUDE_DIRS}). foreach(incl ${math_incl}); target_include_directories(MathCore PUBLIC $<BUILD_INTERFACE:${incl}>); endforeach(). target_compile_definitions(MathCore INTERFACE ${VecCore_DEFINITIONS}); target_link_libraries(MathCore PRIVATE ${CMAKE_THREAD_LIBS_INIT}). ROOT_ADD_TEST_SUBDIRECTORY(test); ,MatchSource.DOCS,math/mathcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/CMakeLists.txt:2024,Integrability,DEPEND,DEPENDENCIES,2024,#########################################; # CMakeLists.txt file for building ROOT math/mathmore package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(MathMore; HEADERS; Math/ChebyshevApprox.h; Math/Derivator.h; Math/DistFuncMathMore.h; Math/GSLIntegrator.h; Math/GSLMCIntegrator.h; Math/GSLMinimizer.h; Math/GSLMinimizer1D.h; Math/GSLMultiRootFinder.h; Math/GSLNLSMinimizer.h; Math/GSLQuasiRandom.h; Math/GSLRandom.h; Math/GSLRandomFunctions.h; Math/GSLRndmEngines.h; Math/GSLRootFinder.h; Math/GSLRootFinderDeriv.h; Math/GSLSimAnMinimizer.h; Math/InterpolationTypes.h; Math/Interpolator.h; Math/MCParameters.h; Math/PdfFuncMathMore.h; Math/Polynomial.h; Math/ParamFunction.h; Math/QuasiRandom.h; Math/RootFinderAlgorithms.h; Math/SpecFuncMathMore.h; Math/Vavilov.h; Math/VavilovAccurate.h; Math/VavilovAccurateCdf.h; Math/VavilovAccuratePdf.h; Math/VavilovAccurateQuantile.h; Math/VavilovFast.h; SOURCES; src/ChebyshevApprox.cxx; src/Derivator.cxx; src/GSLDerivator.cxx; src/GSLError.cxx; src/GSLIntegrator.cxx; src/GSLInterpolator.cxx; src/GSLMCIntegrator.cxx; src/GSLMinimizer.cxx; src/GSLMinimizer1D.cxx; src/GSLMultiRootFinder.cxx; src/GSLNLSMinimizer.cxx; src/GSLQuasiRandom.cxx; src/GSLRndmEngines.cxx; src/GSLRootFinder.cxx; src/GSLRootFinderDeriv.cxx; src/GSLRootHelper.cxx; src/GSLSimAnMinimizer.cxx; src/GSLSimAnnealing.cxx; src/Interpolator.cxx; src/MCParameters.cxx; src/MultiNumGradFunction.cxx; src/PdfFuncMathMore.cxx; src/Polynomial.cxx; src/QuantFuncMathMore.cxx; src/RootFinderAlgorithms.cxx; src/SpecFuncMathMore.cxx; src/Vavilov.cxx; src/VavilovAccurate.cxx; src/VavilovAccurateCdf.cxx; src/VavilovAccuratePdf.cxx; src/VavilovAccurateQuantile.cxx; src/VavilovFast.cxx; src/cblas.cxx; LINKDEF; Math/LinkDef.h; DEPENDENCIES; MathCore; BUILTINS; GSL; ). target_include_directories(MathMore SYSTEM PRIVATE ${GSL_INCLUDE_DIR}); target_link_libraries(MathMore PRIVATE ${GSL_LIBRARIES}). ROOT_ADD_TEST_SUBDIRECTORY(test); ,MatchSource.DOCS,math/mathmore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/CMakeLists.txt:2223,Testability,test,test,2223,#########################################; # CMakeLists.txt file for building ROOT math/mathmore package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(MathMore; HEADERS; Math/ChebyshevApprox.h; Math/Derivator.h; Math/DistFuncMathMore.h; Math/GSLIntegrator.h; Math/GSLMCIntegrator.h; Math/GSLMinimizer.h; Math/GSLMinimizer1D.h; Math/GSLMultiRootFinder.h; Math/GSLNLSMinimizer.h; Math/GSLQuasiRandom.h; Math/GSLRandom.h; Math/GSLRandomFunctions.h; Math/GSLRndmEngines.h; Math/GSLRootFinder.h; Math/GSLRootFinderDeriv.h; Math/GSLSimAnMinimizer.h; Math/InterpolationTypes.h; Math/Interpolator.h; Math/MCParameters.h; Math/PdfFuncMathMore.h; Math/Polynomial.h; Math/ParamFunction.h; Math/QuasiRandom.h; Math/RootFinderAlgorithms.h; Math/SpecFuncMathMore.h; Math/Vavilov.h; Math/VavilovAccurate.h; Math/VavilovAccurateCdf.h; Math/VavilovAccuratePdf.h; Math/VavilovAccurateQuantile.h; Math/VavilovFast.h; SOURCES; src/ChebyshevApprox.cxx; src/Derivator.cxx; src/GSLDerivator.cxx; src/GSLError.cxx; src/GSLIntegrator.cxx; src/GSLInterpolator.cxx; src/GSLMCIntegrator.cxx; src/GSLMinimizer.cxx; src/GSLMinimizer1D.cxx; src/GSLMultiRootFinder.cxx; src/GSLNLSMinimizer.cxx; src/GSLQuasiRandom.cxx; src/GSLRndmEngines.cxx; src/GSLRootFinder.cxx; src/GSLRootFinderDeriv.cxx; src/GSLRootHelper.cxx; src/GSLSimAnMinimizer.cxx; src/GSLSimAnnealing.cxx; src/Interpolator.cxx; src/MCParameters.cxx; src/MultiNumGradFunction.cxx; src/PdfFuncMathMore.cxx; src/Polynomial.cxx; src/QuantFuncMathMore.cxx; src/RootFinderAlgorithms.cxx; src/SpecFuncMathMore.cxx; src/Vavilov.cxx; src/VavilovAccurate.cxx; src/VavilovAccurateCdf.cxx; src/VavilovAccuratePdf.cxx; src/VavilovAccurateQuantile.cxx; src/VavilovFast.cxx; src/cblas.cxx; LINKDEF; Math/LinkDef.h; DEPENDENCIES; MathCore; BUILTINS; GSL; ). target_include_directories(MathMore SYSTEM PRIVATE ${GSL_INCLUDE_DIR}); target_link_libraries(MathMore PRIVATE ${GSL_LIBRARIES}). ROOT_ADD_TEST_SUBDIRECTORY(test); ,MatchSource.DOCS,math/mathmore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/matrix/CMakeLists.txt:1618,Integrability,DEPEND,DEPENDENCIES,1618,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT math/matrix package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(Matrix; HEADERS; TDecompBK.h; TDecompBase.h; TDecompChol.h; TDecompLU.h; TDecompQRH.h; TDecompSVD.h; TDecompSparse.h; TMatrix.h; TMatrixD.h; TMatrixDBase.h; TMatrixDBasefwd.h; TMatrixDEigen.h; TMatrixDLazy.h; TMatrixDSparse.h; TMatrixDSparsefwd.h; TMatrixDSym.h; TMatrixDSymEigen.h; TMatrixDSymfwd.h; TMatrixDUtils.h; TMatrixDUtilsfwd.h; TMatrixDfwd.h; TMatrixF.h; TMatrixFBase.h; TMatrixFBasefwd.h; TMatrixFLazy.h; TMatrixFSparse.h; TMatrixFSparsefwd.h; TMatrixFSym.h; TMatrixFSymfwd.h; TMatrixFUtils.h; TMatrixFUtilsfwd.h; TMatrixFfwd.h; TMatrixT.h; TMatrixTBase.h; TMatrixTCramerInv.h; TMatrixTLazy.h; TMatrixTSparse.h; TMatrixTSym.h; TMatrixTSymCramerInv.h; TMatrixTUtils.h; TVector.h; TVectorD.h; TVectorDfwd.h; TVectorF.h; TVectorFfwd.h; TVectorT.h; TVectorfwd.h; SOURCES; src/TDecompBK.cxx; src/TDecompBase.cxx; src/TDecompChol.cxx; src/TDecompLU.cxx; src/TDecompQRH.cxx; src/TDecompSVD.cxx; src/TDecompSparse.cxx; src/TMatrixDEigen.cxx; src/TMatrixDSymEigen.cxx; src/TMatrixT.cxx; src/TMatrixTBase.cxx; src/TMatrixTCramerInv.cxx; src/TMatrixTLazy.cxx; src/TMatrixTSparse.cxx; src/TMatrixTSym.cxx; src/TMatrixTSymCramerInv.cxx; src/TMatrixTUtils.cxx; src/TVectorT.cxx; DEPENDENCIES; MathCore; DICTIONARY_OPTIONS; -writeEmptyRootPCM; ). ROOT_ADD_TEST_SUBDIRECTORY(test). ",MatchSource.DOCS,math/matrix/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/matrix/CMakeLists.txt:1712,Testability,test,test,1712,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT math/matrix package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(Matrix; HEADERS; TDecompBK.h; TDecompBase.h; TDecompChol.h; TDecompLU.h; TDecompQRH.h; TDecompSVD.h; TDecompSparse.h; TMatrix.h; TMatrixD.h; TMatrixDBase.h; TMatrixDBasefwd.h; TMatrixDEigen.h; TMatrixDLazy.h; TMatrixDSparse.h; TMatrixDSparsefwd.h; TMatrixDSym.h; TMatrixDSymEigen.h; TMatrixDSymfwd.h; TMatrixDUtils.h; TMatrixDUtilsfwd.h; TMatrixDfwd.h; TMatrixF.h; TMatrixFBase.h; TMatrixFBasefwd.h; TMatrixFLazy.h; TMatrixFSparse.h; TMatrixFSparsefwd.h; TMatrixFSym.h; TMatrixFSymfwd.h; TMatrixFUtils.h; TMatrixFUtilsfwd.h; TMatrixFfwd.h; TMatrixT.h; TMatrixTBase.h; TMatrixTCramerInv.h; TMatrixTLazy.h; TMatrixTSparse.h; TMatrixTSym.h; TMatrixTSymCramerInv.h; TMatrixTUtils.h; TVector.h; TVectorD.h; TVectorDfwd.h; TVectorF.h; TVectorFfwd.h; TVectorT.h; TVectorfwd.h; SOURCES; src/TDecompBK.cxx; src/TDecompBase.cxx; src/TDecompChol.cxx; src/TDecompLU.cxx; src/TDecompQRH.cxx; src/TDecompSVD.cxx; src/TDecompSparse.cxx; src/TMatrixDEigen.cxx; src/TMatrixDSymEigen.cxx; src/TMatrixT.cxx; src/TMatrixTBase.cxx; src/TMatrixTCramerInv.cxx; src/TMatrixTLazy.cxx; src/TMatrixTSparse.cxx; src/TMatrixTSym.cxx; src/TMatrixTSymCramerInv.cxx; src/TMatrixTUtils.cxx; src/TVectorT.cxx; DEPENDENCIES; MathCore; DICTIONARY_OPTIONS; -writeEmptyRootPCM; ). ROOT_ADD_TEST_SUBDIRECTORY(test). ",MatchSource.DOCS,math/matrix/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit/CMakeLists.txt:656,Integrability,DEPEND,DEPENDENCIES,656,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT math/minuit package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(Minuit; HEADERS; TFitter.h; TLinearFitter.h; TLinearMinimizer.h; TMinuit.h; TMinuitMinimizer.h; SOURCES; src/TFitter.cxx; src/TLinearFitter.cxx; src/TLinearMinimizer.cxx; src/TMinuit.cxx; src/TMinuitMinimizer.cxx; DEPENDENCIES; Graf; Hist; Matrix; MathCore; DICTIONARY_OPTIONS; -writeEmptyRootPCM; ). if (CMAKE_BUILD_TYPE STREQUAL Optimized); target_compile_options(Minuit PRIVATE ""-fno-fast-math""); endif(); ",MatchSource.DOCS,math/minuit/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit/CMakeLists.txt:773,Performance,Optimiz,Optimized,773,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT math/minuit package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(Minuit; HEADERS; TFitter.h; TLinearFitter.h; TLinearMinimizer.h; TMinuit.h; TMinuitMinimizer.h; SOURCES; src/TFitter.cxx; src/TLinearFitter.cxx; src/TLinearMinimizer.cxx; src/TMinuit.cxx; src/TMinuitMinimizer.cxx; DEPENDENCIES; Graf; Hist; Matrix; MathCore; DICTIONARY_OPTIONS; -writeEmptyRootPCM; ). if (CMAKE_BUILD_TYPE STREQUAL Optimized); target_compile_options(Minuit PRIVATE ""-fno-fast-math""); endif(); ",MatchSource.DOCS,math/minuit/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/CMakeLists.txt:5455,Integrability,DEPEND,DEPENDENCIES,5455,rScan.cxx; src/MnPlot.cxx; src/MnPosDef.cxx; src/MnPrint.cxx; src/MnPrintImpl.cxx; src/MnScan.cxx; src/MnSeedGenerator.cxx; src/MnStrategy.cxx; src/MnTiny.cxx; src/MnTraceObject.cxx; src/MnUserFcn.cxx; src/MnUserParameterState.cxx; src/MnUserParameters.cxx; src/MnUserTransformation.cxx; src/ModularFunctionMinimizer.cxx; src/NegativeG2LineSearch.cxx; src/Numerical2PGradientCalculator.cxx; src/NumericalDerivator.cxx; src/ParametricFunction.cxx; src/ScanBuilder.cxx; src/SimplexBuilder.cxx; src/SimplexParameters.cxx; src/SimplexSeedGenerator.cxx; src/SinParameterTransformation.cxx; src/SqrtLowParameterTransformation.cxx; src/SqrtUpParameterTransformation.cxx; src/TMinuit2TraceObject.cxx; src/VariableMetricBuilder.cxx; src/VariableMetricEDMEstimator.cxx; src/mnbins.cxx; src/mndasum.cxx; src/mndaxpy.cxx; src/mnddot.cxx; src/mndscal.cxx; src/mndspmv.cxx; src/mndspr.cxx; src/mnlsame.cxx; src/mnteigen.cxx; src/mntplot.cxx; src/mnvert.cxx; src/mnxerbla.cxx; DICTIONARY_OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; MathCore; Hist; ); endif(). if(minuit2_omp); find_package(OpenMP REQUIRED); find_package(Threads REQUIRED). if(NOT TARGET OpenMP::OpenMP_CXX); add_library(OpenMP::OpenMP_CXX IMPORTED INTERFACE); set_property(TARGET OpenMP::OpenMP_CXX PROPERTY INTERFACE_COMPILE_DEFINITIONS -D_GLIBCXX_PARALLEL); set_property(TARGET OpenMP::OpenMP_CXX PROPERTY INTERFACE_COMPILE_OPTIONS ${OpenMP_CXX_FLAGS}); set_property(TARGET OpenMP::OpenMP_CXX PROPERTY INTERFACE_LINK_LIBRARIES ${OpenMP_CXX_LIBRARIES}); endif(). if(CMAKE_PROJECT_NAME STREQUAL ROOT); target_link_libraries(Minuit2 PUBLIC Threads::Threads OpenMP::OpenMP_CXX); endif(); endif(). if(minuit2_mpi); find_package(MPI REQUIRED). if(NOT TARGET MPI::MPI_CXX); add_library(MPI::MPI_CXX IMPORTED INTERFACE); set_property(TARGET MPI::MPI_CXX PROPERTY INTERFACE_COMPILE_DEFINITIONS ${MPI_CXX_COMPILE_DEFINITIONS}); set_property(TARGET MPI::MPI_CXX PROPERTY INTERFACE_COMPILE_OPTIONS ${MPI_CXX_COMPILE_FLAGS}); set_property(TARGET MPI::MPI_CXX P,MatchSource.DOCS,math/minuit2/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/CMakeLists.txt:5652,Integrability,INTERFACE,INTERFACE,5652,xx; src/NegativeG2LineSearch.cxx; src/Numerical2PGradientCalculator.cxx; src/NumericalDerivator.cxx; src/ParametricFunction.cxx; src/ScanBuilder.cxx; src/SimplexBuilder.cxx; src/SimplexParameters.cxx; src/SimplexSeedGenerator.cxx; src/SinParameterTransformation.cxx; src/SqrtLowParameterTransformation.cxx; src/SqrtUpParameterTransformation.cxx; src/TMinuit2TraceObject.cxx; src/VariableMetricBuilder.cxx; src/VariableMetricEDMEstimator.cxx; src/mnbins.cxx; src/mndasum.cxx; src/mndaxpy.cxx; src/mnddot.cxx; src/mndscal.cxx; src/mndspmv.cxx; src/mndspr.cxx; src/mnlsame.cxx; src/mnteigen.cxx; src/mntplot.cxx; src/mnvert.cxx; src/mnxerbla.cxx; DICTIONARY_OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; MathCore; Hist; ); endif(). if(minuit2_omp); find_package(OpenMP REQUIRED); find_package(Threads REQUIRED). if(NOT TARGET OpenMP::OpenMP_CXX); add_library(OpenMP::OpenMP_CXX IMPORTED INTERFACE); set_property(TARGET OpenMP::OpenMP_CXX PROPERTY INTERFACE_COMPILE_DEFINITIONS -D_GLIBCXX_PARALLEL); set_property(TARGET OpenMP::OpenMP_CXX PROPERTY INTERFACE_COMPILE_OPTIONS ${OpenMP_CXX_FLAGS}); set_property(TARGET OpenMP::OpenMP_CXX PROPERTY INTERFACE_LINK_LIBRARIES ${OpenMP_CXX_LIBRARIES}); endif(). if(CMAKE_PROJECT_NAME STREQUAL ROOT); target_link_libraries(Minuit2 PUBLIC Threads::Threads OpenMP::OpenMP_CXX); endif(); endif(). if(minuit2_mpi); find_package(MPI REQUIRED). if(NOT TARGET MPI::MPI_CXX); add_library(MPI::MPI_CXX IMPORTED INTERFACE); set_property(TARGET MPI::MPI_CXX PROPERTY INTERFACE_COMPILE_DEFINITIONS ${MPI_CXX_COMPILE_DEFINITIONS}); set_property(TARGET MPI::MPI_CXX PROPERTY INTERFACE_COMPILE_OPTIONS ${MPI_CXX_COMPILE_FLAGS}); set_property(TARGET MPI::MPI_CXX PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${MPI_CXX_INCLUDE_DIRS}); set_property(TARGET MPI::MPI_CXX PROPERTY INTERFACE_LINK_LIBRARIES ${MPI_CXX_LINK_FLAGS} ${MPI_CXX_LIBRARIES}); endif(). if(CMAKE_PROJECT_NAME STREQUAL ROOT); target_compile_definitions(Minuit2 PUBLIC MPIPROC); target_link_libraries(Minuit2 PUBLIC MPI::MP,MatchSource.DOCS,math/minuit2/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/CMakeLists.txt:6207,Integrability,INTERFACE,INTERFACE,6207,SimplexParameters.cxx; src/SimplexSeedGenerator.cxx; src/SinParameterTransformation.cxx; src/SqrtLowParameterTransformation.cxx; src/SqrtUpParameterTransformation.cxx; src/TMinuit2TraceObject.cxx; src/VariableMetricBuilder.cxx; src/VariableMetricEDMEstimator.cxx; src/mnbins.cxx; src/mndasum.cxx; src/mndaxpy.cxx; src/mnddot.cxx; src/mndscal.cxx; src/mndspmv.cxx; src/mndspr.cxx; src/mnlsame.cxx; src/mnteigen.cxx; src/mntplot.cxx; src/mnvert.cxx; src/mnxerbla.cxx; DICTIONARY_OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; MathCore; Hist; ); endif(). if(minuit2_omp); find_package(OpenMP REQUIRED); find_package(Threads REQUIRED). if(NOT TARGET OpenMP::OpenMP_CXX); add_library(OpenMP::OpenMP_CXX IMPORTED INTERFACE); set_property(TARGET OpenMP::OpenMP_CXX PROPERTY INTERFACE_COMPILE_DEFINITIONS -D_GLIBCXX_PARALLEL); set_property(TARGET OpenMP::OpenMP_CXX PROPERTY INTERFACE_COMPILE_OPTIONS ${OpenMP_CXX_FLAGS}); set_property(TARGET OpenMP::OpenMP_CXX PROPERTY INTERFACE_LINK_LIBRARIES ${OpenMP_CXX_LIBRARIES}); endif(). if(CMAKE_PROJECT_NAME STREQUAL ROOT); target_link_libraries(Minuit2 PUBLIC Threads::Threads OpenMP::OpenMP_CXX); endif(); endif(). if(minuit2_mpi); find_package(MPI REQUIRED). if(NOT TARGET MPI::MPI_CXX); add_library(MPI::MPI_CXX IMPORTED INTERFACE); set_property(TARGET MPI::MPI_CXX PROPERTY INTERFACE_COMPILE_DEFINITIONS ${MPI_CXX_COMPILE_DEFINITIONS}); set_property(TARGET MPI::MPI_CXX PROPERTY INTERFACE_COMPILE_OPTIONS ${MPI_CXX_COMPILE_FLAGS}); set_property(TARGET MPI::MPI_CXX PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${MPI_CXX_INCLUDE_DIRS}); set_property(TARGET MPI::MPI_CXX PROPERTY INTERFACE_LINK_LIBRARIES ${MPI_CXX_LINK_FLAGS} ${MPI_CXX_LIBRARIES}); endif(). if(CMAKE_PROJECT_NAME STREQUAL ROOT); target_compile_definitions(Minuit2 PUBLIC MPIPROC); target_link_libraries(Minuit2 PUBLIC MPI::MPI_CXX); endif(); endif(). if(CMAKE_PROJECT_NAME STREQUAL ROOT); add_definitions(-DUSE_ROOT_ERROR); ROOT_ADD_TEST_SUBDIRECTORY(test); else(); include(StandAlone.cmake); endif(); ,MatchSource.DOCS,math/minuit2/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/CMakeLists.txt:3324,Modifiability,Variab,VariableMetricBuilder,3324,.h; Minuit2/MnMinimize.h; Minuit2/MnMinos.h; Minuit2/MnParabola.h; Minuit2/MnParabolaFactory.h; Minuit2/MnParabolaPoint.h; Minuit2/MnParameterScan.h; Minuit2/MnPlot.h; Minuit2/MnPosDef.h; Minuit2/MnPrint.h; Minuit2/MnScan.h; Minuit2/MnSeedGenerator.h; Minuit2/MnSimplex.h; Minuit2/MnStrategy.h; Minuit2/MnTiny.h; Minuit2/MnTraceObject.h; Minuit2/MnUserCovariance.h; Minuit2/MnUserFcn.h; Minuit2/MnUserParameterState.h; Minuit2/MnUserParameters.h; Minuit2/MnUserTransformation.h; Minuit2/MnVectorTransform.h; Minuit2/ModularFunctionMinimizer.h; Minuit2/NegativeG2LineSearch.h; Minuit2/Numerical2PGradientCalculator.h; Minuit2/NumericalDerivator.h; Minuit2/ParametricFunction.h; Minuit2/ScanBuilder.h; Minuit2/ScanMinimizer.h; Minuit2/SimplexBuilder.h; Minuit2/SimplexMinimizer.h; Minuit2/SimplexParameters.h; Minuit2/SimplexSeedGenerator.h; Minuit2/SinParameterTransformation.h; Minuit2/SqrtLowParameterTransformation.h; Minuit2/SqrtUpParameterTransformation.h; Minuit2/StackAllocator.h; Minuit2/VariableMetricBuilder.h; Minuit2/VariableMetricEDMEstimator.h; Minuit2/VariableMetricMinimizer.h; Minuit2/VectorOuterProduct.h; TMinuit2TraceObject.h; SOURCES; src/AnalyticalGradientCalculator.cxx; src/BFGSErrorUpdator.cxx; src/CMakeLists.txt; src/CombinedMinimumBuilder.cxx; src/DavidonErrorUpdator.cxx; src/ExternalInternalGradientCalculator.cxx; src/FumiliBuilder.cxx; src/FumiliErrorUpdator.cxx; src/FumiliGradientCalculator.cxx; src/FumiliMinimizer.cxx; src/FumiliStandardChi2FCN.cxx; src/FumiliStandardMaximumLikelihoodFCN.cxx; src/HessianGradientCalculator.cxx; src/InitialGradientCalculator.cxx; src/LaEigenValues.cxx; src/LaInnerProduct.cxx; src/LaInverse.cxx; src/LaOuterProduct.cxx; src/LaSumOfElements.cxx; src/LaVtMVSimilarity.cxx; src/MPIProcess.cxx; src/MinimumBuilder.cxx; src/Minuit2Minimizer.cxx; src/MnApplication.cxx; src/MnContours.cxx; src/MnCovarianceSqueeze.cxx; src/MnEigen.cxx; src/MnFcn.cxx; src/MnFumiliMinimize.cxx; src/MnFunctionCross.cxx; src/MnGlobalCorrelationCoeff.cxx; sr,MatchSource.DOCS,math/minuit2/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/CMakeLists.txt:3357,Modifiability,Variab,VariableMetricEDMEstimator,3357,Minos.h; Minuit2/MnParabola.h; Minuit2/MnParabolaFactory.h; Minuit2/MnParabolaPoint.h; Minuit2/MnParameterScan.h; Minuit2/MnPlot.h; Minuit2/MnPosDef.h; Minuit2/MnPrint.h; Minuit2/MnScan.h; Minuit2/MnSeedGenerator.h; Minuit2/MnSimplex.h; Minuit2/MnStrategy.h; Minuit2/MnTiny.h; Minuit2/MnTraceObject.h; Minuit2/MnUserCovariance.h; Minuit2/MnUserFcn.h; Minuit2/MnUserParameterState.h; Minuit2/MnUserParameters.h; Minuit2/MnUserTransformation.h; Minuit2/MnVectorTransform.h; Minuit2/ModularFunctionMinimizer.h; Minuit2/NegativeG2LineSearch.h; Minuit2/Numerical2PGradientCalculator.h; Minuit2/NumericalDerivator.h; Minuit2/ParametricFunction.h; Minuit2/ScanBuilder.h; Minuit2/ScanMinimizer.h; Minuit2/SimplexBuilder.h; Minuit2/SimplexMinimizer.h; Minuit2/SimplexParameters.h; Minuit2/SimplexSeedGenerator.h; Minuit2/SinParameterTransformation.h; Minuit2/SqrtLowParameterTransformation.h; Minuit2/SqrtUpParameterTransformation.h; Minuit2/StackAllocator.h; Minuit2/VariableMetricBuilder.h; Minuit2/VariableMetricEDMEstimator.h; Minuit2/VariableMetricMinimizer.h; Minuit2/VectorOuterProduct.h; TMinuit2TraceObject.h; SOURCES; src/AnalyticalGradientCalculator.cxx; src/BFGSErrorUpdator.cxx; src/CMakeLists.txt; src/CombinedMinimumBuilder.cxx; src/DavidonErrorUpdator.cxx; src/ExternalInternalGradientCalculator.cxx; src/FumiliBuilder.cxx; src/FumiliErrorUpdator.cxx; src/FumiliGradientCalculator.cxx; src/FumiliMinimizer.cxx; src/FumiliStandardChi2FCN.cxx; src/FumiliStandardMaximumLikelihoodFCN.cxx; src/HessianGradientCalculator.cxx; src/InitialGradientCalculator.cxx; src/LaEigenValues.cxx; src/LaInnerProduct.cxx; src/LaInverse.cxx; src/LaOuterProduct.cxx; src/LaSumOfElements.cxx; src/LaVtMVSimilarity.cxx; src/MPIProcess.cxx; src/MinimumBuilder.cxx; src/Minuit2Minimizer.cxx; src/MnApplication.cxx; src/MnContours.cxx; src/MnCovarianceSqueeze.cxx; src/MnEigen.cxx; src/MnFcn.cxx; src/MnFumiliMinimize.cxx; src/MnFunctionCross.cxx; src/MnGlobalCorrelationCoeff.cxx; src/MnHesse.cxx; src/MnLineSearch.cxx,MatchSource.DOCS,math/minuit2/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/CMakeLists.txt:3395,Modifiability,Variab,VariableMetricMinimizer,3395,t2/MnParabolaFactory.h; Minuit2/MnParabolaPoint.h; Minuit2/MnParameterScan.h; Minuit2/MnPlot.h; Minuit2/MnPosDef.h; Minuit2/MnPrint.h; Minuit2/MnScan.h; Minuit2/MnSeedGenerator.h; Minuit2/MnSimplex.h; Minuit2/MnStrategy.h; Minuit2/MnTiny.h; Minuit2/MnTraceObject.h; Minuit2/MnUserCovariance.h; Minuit2/MnUserFcn.h; Minuit2/MnUserParameterState.h; Minuit2/MnUserParameters.h; Minuit2/MnUserTransformation.h; Minuit2/MnVectorTransform.h; Minuit2/ModularFunctionMinimizer.h; Minuit2/NegativeG2LineSearch.h; Minuit2/Numerical2PGradientCalculator.h; Minuit2/NumericalDerivator.h; Minuit2/ParametricFunction.h; Minuit2/ScanBuilder.h; Minuit2/ScanMinimizer.h; Minuit2/SimplexBuilder.h; Minuit2/SimplexMinimizer.h; Minuit2/SimplexParameters.h; Minuit2/SimplexSeedGenerator.h; Minuit2/SinParameterTransformation.h; Minuit2/SqrtLowParameterTransformation.h; Minuit2/SqrtUpParameterTransformation.h; Minuit2/StackAllocator.h; Minuit2/VariableMetricBuilder.h; Minuit2/VariableMetricEDMEstimator.h; Minuit2/VariableMetricMinimizer.h; Minuit2/VectorOuterProduct.h; TMinuit2TraceObject.h; SOURCES; src/AnalyticalGradientCalculator.cxx; src/BFGSErrorUpdator.cxx; src/CMakeLists.txt; src/CombinedMinimumBuilder.cxx; src/DavidonErrorUpdator.cxx; src/ExternalInternalGradientCalculator.cxx; src/FumiliBuilder.cxx; src/FumiliErrorUpdator.cxx; src/FumiliGradientCalculator.cxx; src/FumiliMinimizer.cxx; src/FumiliStandardChi2FCN.cxx; src/FumiliStandardMaximumLikelihoodFCN.cxx; src/HessianGradientCalculator.cxx; src/InitialGradientCalculator.cxx; src/LaEigenValues.cxx; src/LaInnerProduct.cxx; src/LaInverse.cxx; src/LaOuterProduct.cxx; src/LaSumOfElements.cxx; src/LaVtMVSimilarity.cxx; src/MPIProcess.cxx; src/MinimumBuilder.cxx; src/Minuit2Minimizer.cxx; src/MnApplication.cxx; src/MnContours.cxx; src/MnCovarianceSqueeze.cxx; src/MnEigen.cxx; src/MnFcn.cxx; src/MnFumiliMinimize.cxx; src/MnFunctionCross.cxx; src/MnGlobalCorrelationCoeff.cxx; src/MnHesse.cxx; src/MnLineSearch.cxx; src/MnMachinePrecision.cxx; src/MnM,MatchSource.DOCS,math/minuit2/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/CMakeLists.txt:5150,Modifiability,Variab,VariableMetricBuilder,5150,.cxx; src/MnContours.cxx; src/MnCovarianceSqueeze.cxx; src/MnEigen.cxx; src/MnFcn.cxx; src/MnFumiliMinimize.cxx; src/MnFunctionCross.cxx; src/MnGlobalCorrelationCoeff.cxx; src/MnHesse.cxx; src/MnLineSearch.cxx; src/MnMachinePrecision.cxx; src/MnMinos.cxx; src/MnParabolaFactory.cxx; src/MnParameterScan.cxx; src/MnPlot.cxx; src/MnPosDef.cxx; src/MnPrint.cxx; src/MnPrintImpl.cxx; src/MnScan.cxx; src/MnSeedGenerator.cxx; src/MnStrategy.cxx; src/MnTiny.cxx; src/MnTraceObject.cxx; src/MnUserFcn.cxx; src/MnUserParameterState.cxx; src/MnUserParameters.cxx; src/MnUserTransformation.cxx; src/ModularFunctionMinimizer.cxx; src/NegativeG2LineSearch.cxx; src/Numerical2PGradientCalculator.cxx; src/NumericalDerivator.cxx; src/ParametricFunction.cxx; src/ScanBuilder.cxx; src/SimplexBuilder.cxx; src/SimplexParameters.cxx; src/SimplexSeedGenerator.cxx; src/SinParameterTransformation.cxx; src/SqrtLowParameterTransformation.cxx; src/SqrtUpParameterTransformation.cxx; src/TMinuit2TraceObject.cxx; src/VariableMetricBuilder.cxx; src/VariableMetricEDMEstimator.cxx; src/mnbins.cxx; src/mndasum.cxx; src/mndaxpy.cxx; src/mnddot.cxx; src/mndscal.cxx; src/mndspmv.cxx; src/mndspr.cxx; src/mnlsame.cxx; src/mnteigen.cxx; src/mntplot.cxx; src/mnvert.cxx; src/mnxerbla.cxx; DICTIONARY_OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; MathCore; Hist; ); endif(). if(minuit2_omp); find_package(OpenMP REQUIRED); find_package(Threads REQUIRED). if(NOT TARGET OpenMP::OpenMP_CXX); add_library(OpenMP::OpenMP_CXX IMPORTED INTERFACE); set_property(TARGET OpenMP::OpenMP_CXX PROPERTY INTERFACE_COMPILE_DEFINITIONS -D_GLIBCXX_PARALLEL); set_property(TARGET OpenMP::OpenMP_CXX PROPERTY INTERFACE_COMPILE_OPTIONS ${OpenMP_CXX_FLAGS}); set_property(TARGET OpenMP::OpenMP_CXX PROPERTY INTERFACE_LINK_LIBRARIES ${OpenMP_CXX_LIBRARIES}); endif(). if(CMAKE_PROJECT_NAME STREQUAL ROOT); target_link_libraries(Minuit2 PUBLIC Threads::Threads OpenMP::OpenMP_CXX); endif(); endif(). if(minuit2_mpi); find_package(MPI REQUIRED). if(NOT TARGET,MatchSource.DOCS,math/minuit2/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/CMakeLists.txt:5181,Modifiability,Variab,VariableMetricEDMEstimator,5181,varianceSqueeze.cxx; src/MnEigen.cxx; src/MnFcn.cxx; src/MnFumiliMinimize.cxx; src/MnFunctionCross.cxx; src/MnGlobalCorrelationCoeff.cxx; src/MnHesse.cxx; src/MnLineSearch.cxx; src/MnMachinePrecision.cxx; src/MnMinos.cxx; src/MnParabolaFactory.cxx; src/MnParameterScan.cxx; src/MnPlot.cxx; src/MnPosDef.cxx; src/MnPrint.cxx; src/MnPrintImpl.cxx; src/MnScan.cxx; src/MnSeedGenerator.cxx; src/MnStrategy.cxx; src/MnTiny.cxx; src/MnTraceObject.cxx; src/MnUserFcn.cxx; src/MnUserParameterState.cxx; src/MnUserParameters.cxx; src/MnUserTransformation.cxx; src/ModularFunctionMinimizer.cxx; src/NegativeG2LineSearch.cxx; src/Numerical2PGradientCalculator.cxx; src/NumericalDerivator.cxx; src/ParametricFunction.cxx; src/ScanBuilder.cxx; src/SimplexBuilder.cxx; src/SimplexParameters.cxx; src/SimplexSeedGenerator.cxx; src/SinParameterTransformation.cxx; src/SqrtLowParameterTransformation.cxx; src/SqrtUpParameterTransformation.cxx; src/TMinuit2TraceObject.cxx; src/VariableMetricBuilder.cxx; src/VariableMetricEDMEstimator.cxx; src/mnbins.cxx; src/mndasum.cxx; src/mndaxpy.cxx; src/mnddot.cxx; src/mndscal.cxx; src/mndspmv.cxx; src/mndspr.cxx; src/mnlsame.cxx; src/mnteigen.cxx; src/mntplot.cxx; src/mnvert.cxx; src/mnxerbla.cxx; DICTIONARY_OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; MathCore; Hist; ); endif(). if(minuit2_omp); find_package(OpenMP REQUIRED); find_package(Threads REQUIRED). if(NOT TARGET OpenMP::OpenMP_CXX); add_library(OpenMP::OpenMP_CXX IMPORTED INTERFACE); set_property(TARGET OpenMP::OpenMP_CXX PROPERTY INTERFACE_COMPILE_DEFINITIONS -D_GLIBCXX_PARALLEL); set_property(TARGET OpenMP::OpenMP_CXX PROPERTY INTERFACE_COMPILE_OPTIONS ${OpenMP_CXX_FLAGS}); set_property(TARGET OpenMP::OpenMP_CXX PROPERTY INTERFACE_LINK_LIBRARIES ${OpenMP_CXX_LIBRARIES}); endif(). if(CMAKE_PROJECT_NAME STREQUAL ROOT); target_link_libraries(Minuit2 PUBLIC Threads::Threads OpenMP::OpenMP_CXX); endif(); endif(). if(minuit2_mpi); find_package(MPI REQUIRED). if(NOT TARGET MPI::MPI_CXX); add_library(MPI::,MatchSource.DOCS,math/minuit2/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/CMakeLists.txt:6898,Testability,test,test,6898,SimplexParameters.cxx; src/SimplexSeedGenerator.cxx; src/SinParameterTransformation.cxx; src/SqrtLowParameterTransformation.cxx; src/SqrtUpParameterTransformation.cxx; src/TMinuit2TraceObject.cxx; src/VariableMetricBuilder.cxx; src/VariableMetricEDMEstimator.cxx; src/mnbins.cxx; src/mndasum.cxx; src/mndaxpy.cxx; src/mnddot.cxx; src/mndscal.cxx; src/mndspmv.cxx; src/mndspr.cxx; src/mnlsame.cxx; src/mnteigen.cxx; src/mntplot.cxx; src/mnvert.cxx; src/mnxerbla.cxx; DICTIONARY_OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; MathCore; Hist; ); endif(). if(minuit2_omp); find_package(OpenMP REQUIRED); find_package(Threads REQUIRED). if(NOT TARGET OpenMP::OpenMP_CXX); add_library(OpenMP::OpenMP_CXX IMPORTED INTERFACE); set_property(TARGET OpenMP::OpenMP_CXX PROPERTY INTERFACE_COMPILE_DEFINITIONS -D_GLIBCXX_PARALLEL); set_property(TARGET OpenMP::OpenMP_CXX PROPERTY INTERFACE_COMPILE_OPTIONS ${OpenMP_CXX_FLAGS}); set_property(TARGET OpenMP::OpenMP_CXX PROPERTY INTERFACE_LINK_LIBRARIES ${OpenMP_CXX_LIBRARIES}); endif(). if(CMAKE_PROJECT_NAME STREQUAL ROOT); target_link_libraries(Minuit2 PUBLIC Threads::Threads OpenMP::OpenMP_CXX); endif(); endif(). if(minuit2_mpi); find_package(MPI REQUIRED). if(NOT TARGET MPI::MPI_CXX); add_library(MPI::MPI_CXX IMPORTED INTERFACE); set_property(TARGET MPI::MPI_CXX PROPERTY INTERFACE_COMPILE_DEFINITIONS ${MPI_CXX_COMPILE_DEFINITIONS}); set_property(TARGET MPI::MPI_CXX PROPERTY INTERFACE_COMPILE_OPTIONS ${MPI_CXX_COMPILE_FLAGS}); set_property(TARGET MPI::MPI_CXX PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${MPI_CXX_INCLUDE_DIRS}); set_property(TARGET MPI::MPI_CXX PROPERTY INTERFACE_LINK_LIBRARIES ${MPI_CXX_LINK_FLAGS} ${MPI_CXX_LIBRARIES}); endif(). if(CMAKE_PROJECT_NAME STREQUAL ROOT); target_compile_definitions(Minuit2 PUBLIC MPIPROC); target_link_libraries(Minuit2 PUBLIC MPI::MPI_CXX); endif(); endif(). if(CMAKE_PROJECT_NAME STREQUAL ROOT); add_definitions(-DUSE_ROOT_ERROR); ROOT_ADD_TEST_SUBDIRECTORY(test); else(); include(StandAlone.cmake); endif(); ,MatchSource.DOCS,math/minuit2/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/CMakeLists.txt:3062,Usability,Simpl,SimplexBuilder,3062,ss.h; Minuit2/MnEigen.h; Minuit2/MnFcn.h; Minuit2/MnFumiliMinimize.h; Minuit2/MnFunctionCross.h; Minuit2/MnGlobalCorrelationCoeff.h; Minuit2/MnHesse.h; Minuit2/MnLineSearch.h; Minuit2/MnMachinePrecision.h; Minuit2/MnMatrix.h; Minuit2/MnMatrixfwd.h; Minuit2/MnMigrad.h; Minuit2/MnMinimize.h; Minuit2/MnMinos.h; Minuit2/MnParabola.h; Minuit2/MnParabolaFactory.h; Minuit2/MnParabolaPoint.h; Minuit2/MnParameterScan.h; Minuit2/MnPlot.h; Minuit2/MnPosDef.h; Minuit2/MnPrint.h; Minuit2/MnScan.h; Minuit2/MnSeedGenerator.h; Minuit2/MnSimplex.h; Minuit2/MnStrategy.h; Minuit2/MnTiny.h; Minuit2/MnTraceObject.h; Minuit2/MnUserCovariance.h; Minuit2/MnUserFcn.h; Minuit2/MnUserParameterState.h; Minuit2/MnUserParameters.h; Minuit2/MnUserTransformation.h; Minuit2/MnVectorTransform.h; Minuit2/ModularFunctionMinimizer.h; Minuit2/NegativeG2LineSearch.h; Minuit2/Numerical2PGradientCalculator.h; Minuit2/NumericalDerivator.h; Minuit2/ParametricFunction.h; Minuit2/ScanBuilder.h; Minuit2/ScanMinimizer.h; Minuit2/SimplexBuilder.h; Minuit2/SimplexMinimizer.h; Minuit2/SimplexParameters.h; Minuit2/SimplexSeedGenerator.h; Minuit2/SinParameterTransformation.h; Minuit2/SqrtLowParameterTransformation.h; Minuit2/SqrtUpParameterTransformation.h; Minuit2/StackAllocator.h; Minuit2/VariableMetricBuilder.h; Minuit2/VariableMetricEDMEstimator.h; Minuit2/VariableMetricMinimizer.h; Minuit2/VectorOuterProduct.h; TMinuit2TraceObject.h; SOURCES; src/AnalyticalGradientCalculator.cxx; src/BFGSErrorUpdator.cxx; src/CMakeLists.txt; src/CombinedMinimumBuilder.cxx; src/DavidonErrorUpdator.cxx; src/ExternalInternalGradientCalculator.cxx; src/FumiliBuilder.cxx; src/FumiliErrorUpdator.cxx; src/FumiliGradientCalculator.cxx; src/FumiliMinimizer.cxx; src/FumiliStandardChi2FCN.cxx; src/FumiliStandardMaximumLikelihoodFCN.cxx; src/HessianGradientCalculator.cxx; src/InitialGradientCalculator.cxx; src/LaEigenValues.cxx; src/LaInnerProduct.cxx; src/LaInverse.cxx; src/LaOuterProduct.cxx; src/LaSumOfElements.cxx; src/LaVtMVSimilarity.,MatchSource.DOCS,math/minuit2/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/CMakeLists.txt:3088,Usability,Simpl,SimplexMinimizer,3088,nuit2/MnFcn.h; Minuit2/MnFumiliMinimize.h; Minuit2/MnFunctionCross.h; Minuit2/MnGlobalCorrelationCoeff.h; Minuit2/MnHesse.h; Minuit2/MnLineSearch.h; Minuit2/MnMachinePrecision.h; Minuit2/MnMatrix.h; Minuit2/MnMatrixfwd.h; Minuit2/MnMigrad.h; Minuit2/MnMinimize.h; Minuit2/MnMinos.h; Minuit2/MnParabola.h; Minuit2/MnParabolaFactory.h; Minuit2/MnParabolaPoint.h; Minuit2/MnParameterScan.h; Minuit2/MnPlot.h; Minuit2/MnPosDef.h; Minuit2/MnPrint.h; Minuit2/MnScan.h; Minuit2/MnSeedGenerator.h; Minuit2/MnSimplex.h; Minuit2/MnStrategy.h; Minuit2/MnTiny.h; Minuit2/MnTraceObject.h; Minuit2/MnUserCovariance.h; Minuit2/MnUserFcn.h; Minuit2/MnUserParameterState.h; Minuit2/MnUserParameters.h; Minuit2/MnUserTransformation.h; Minuit2/MnVectorTransform.h; Minuit2/ModularFunctionMinimizer.h; Minuit2/NegativeG2LineSearch.h; Minuit2/Numerical2PGradientCalculator.h; Minuit2/NumericalDerivator.h; Minuit2/ParametricFunction.h; Minuit2/ScanBuilder.h; Minuit2/ScanMinimizer.h; Minuit2/SimplexBuilder.h; Minuit2/SimplexMinimizer.h; Minuit2/SimplexParameters.h; Minuit2/SimplexSeedGenerator.h; Minuit2/SinParameterTransformation.h; Minuit2/SqrtLowParameterTransformation.h; Minuit2/SqrtUpParameterTransformation.h; Minuit2/StackAllocator.h; Minuit2/VariableMetricBuilder.h; Minuit2/VariableMetricEDMEstimator.h; Minuit2/VariableMetricMinimizer.h; Minuit2/VectorOuterProduct.h; TMinuit2TraceObject.h; SOURCES; src/AnalyticalGradientCalculator.cxx; src/BFGSErrorUpdator.cxx; src/CMakeLists.txt; src/CombinedMinimumBuilder.cxx; src/DavidonErrorUpdator.cxx; src/ExternalInternalGradientCalculator.cxx; src/FumiliBuilder.cxx; src/FumiliErrorUpdator.cxx; src/FumiliGradientCalculator.cxx; src/FumiliMinimizer.cxx; src/FumiliStandardChi2FCN.cxx; src/FumiliStandardMaximumLikelihoodFCN.cxx; src/HessianGradientCalculator.cxx; src/InitialGradientCalculator.cxx; src/LaEigenValues.cxx; src/LaInnerProduct.cxx; src/LaInverse.cxx; src/LaOuterProduct.cxx; src/LaSumOfElements.cxx; src/LaVtMVSimilarity.cxx; src/MPIProcess.cxx; sr,MatchSource.DOCS,math/minuit2/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/CMakeLists.txt:3116,Usability,Simpl,SimplexParameters,3116,iliMinimize.h; Minuit2/MnFunctionCross.h; Minuit2/MnGlobalCorrelationCoeff.h; Minuit2/MnHesse.h; Minuit2/MnLineSearch.h; Minuit2/MnMachinePrecision.h; Minuit2/MnMatrix.h; Minuit2/MnMatrixfwd.h; Minuit2/MnMigrad.h; Minuit2/MnMinimize.h; Minuit2/MnMinos.h; Minuit2/MnParabola.h; Minuit2/MnParabolaFactory.h; Minuit2/MnParabolaPoint.h; Minuit2/MnParameterScan.h; Minuit2/MnPlot.h; Minuit2/MnPosDef.h; Minuit2/MnPrint.h; Minuit2/MnScan.h; Minuit2/MnSeedGenerator.h; Minuit2/MnSimplex.h; Minuit2/MnStrategy.h; Minuit2/MnTiny.h; Minuit2/MnTraceObject.h; Minuit2/MnUserCovariance.h; Minuit2/MnUserFcn.h; Minuit2/MnUserParameterState.h; Minuit2/MnUserParameters.h; Minuit2/MnUserTransformation.h; Minuit2/MnVectorTransform.h; Minuit2/ModularFunctionMinimizer.h; Minuit2/NegativeG2LineSearch.h; Minuit2/Numerical2PGradientCalculator.h; Minuit2/NumericalDerivator.h; Minuit2/ParametricFunction.h; Minuit2/ScanBuilder.h; Minuit2/ScanMinimizer.h; Minuit2/SimplexBuilder.h; Minuit2/SimplexMinimizer.h; Minuit2/SimplexParameters.h; Minuit2/SimplexSeedGenerator.h; Minuit2/SinParameterTransformation.h; Minuit2/SqrtLowParameterTransformation.h; Minuit2/SqrtUpParameterTransformation.h; Minuit2/StackAllocator.h; Minuit2/VariableMetricBuilder.h; Minuit2/VariableMetricEDMEstimator.h; Minuit2/VariableMetricMinimizer.h; Minuit2/VectorOuterProduct.h; TMinuit2TraceObject.h; SOURCES; src/AnalyticalGradientCalculator.cxx; src/BFGSErrorUpdator.cxx; src/CMakeLists.txt; src/CombinedMinimumBuilder.cxx; src/DavidonErrorUpdator.cxx; src/ExternalInternalGradientCalculator.cxx; src/FumiliBuilder.cxx; src/FumiliErrorUpdator.cxx; src/FumiliGradientCalculator.cxx; src/FumiliMinimizer.cxx; src/FumiliStandardChi2FCN.cxx; src/FumiliStandardMaximumLikelihoodFCN.cxx; src/HessianGradientCalculator.cxx; src/InitialGradientCalculator.cxx; src/LaEigenValues.cxx; src/LaInnerProduct.cxx; src/LaInverse.cxx; src/LaOuterProduct.cxx; src/LaSumOfElements.cxx; src/LaVtMVSimilarity.cxx; src/MPIProcess.cxx; src/MinimumBuilder.cxx; src/Min,MatchSource.DOCS,math/minuit2/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/CMakeLists.txt:3145,Usability,Simpl,SimplexSeedGenerator,3145,onCross.h; Minuit2/MnGlobalCorrelationCoeff.h; Minuit2/MnHesse.h; Minuit2/MnLineSearch.h; Minuit2/MnMachinePrecision.h; Minuit2/MnMatrix.h; Minuit2/MnMatrixfwd.h; Minuit2/MnMigrad.h; Minuit2/MnMinimize.h; Minuit2/MnMinos.h; Minuit2/MnParabola.h; Minuit2/MnParabolaFactory.h; Minuit2/MnParabolaPoint.h; Minuit2/MnParameterScan.h; Minuit2/MnPlot.h; Minuit2/MnPosDef.h; Minuit2/MnPrint.h; Minuit2/MnScan.h; Minuit2/MnSeedGenerator.h; Minuit2/MnSimplex.h; Minuit2/MnStrategy.h; Minuit2/MnTiny.h; Minuit2/MnTraceObject.h; Minuit2/MnUserCovariance.h; Minuit2/MnUserFcn.h; Minuit2/MnUserParameterState.h; Minuit2/MnUserParameters.h; Minuit2/MnUserTransformation.h; Minuit2/MnVectorTransform.h; Minuit2/ModularFunctionMinimizer.h; Minuit2/NegativeG2LineSearch.h; Minuit2/Numerical2PGradientCalculator.h; Minuit2/NumericalDerivator.h; Minuit2/ParametricFunction.h; Minuit2/ScanBuilder.h; Minuit2/ScanMinimizer.h; Minuit2/SimplexBuilder.h; Minuit2/SimplexMinimizer.h; Minuit2/SimplexParameters.h; Minuit2/SimplexSeedGenerator.h; Minuit2/SinParameterTransformation.h; Minuit2/SqrtLowParameterTransformation.h; Minuit2/SqrtUpParameterTransformation.h; Minuit2/StackAllocator.h; Minuit2/VariableMetricBuilder.h; Minuit2/VariableMetricEDMEstimator.h; Minuit2/VariableMetricMinimizer.h; Minuit2/VectorOuterProduct.h; TMinuit2TraceObject.h; SOURCES; src/AnalyticalGradientCalculator.cxx; src/BFGSErrorUpdator.cxx; src/CMakeLists.txt; src/CombinedMinimumBuilder.cxx; src/DavidonErrorUpdator.cxx; src/ExternalInternalGradientCalculator.cxx; src/FumiliBuilder.cxx; src/FumiliErrorUpdator.cxx; src/FumiliGradientCalculator.cxx; src/FumiliMinimizer.cxx; src/FumiliStandardChi2FCN.cxx; src/FumiliStandardMaximumLikelihoodFCN.cxx; src/HessianGradientCalculator.cxx; src/InitialGradientCalculator.cxx; src/LaEigenValues.cxx; src/LaInnerProduct.cxx; src/LaInverse.cxx; src/LaOuterProduct.cxx; src/LaSumOfElements.cxx; src/LaVtMVSimilarity.cxx; src/MPIProcess.cxx; src/MinimumBuilder.cxx; src/Minuit2Minimizer.cxx; src/MnAppli,MatchSource.DOCS,math/minuit2/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/CMakeLists.txt:4925,Usability,Simpl,SimplexBuilder,4925,src/LaEigenValues.cxx; src/LaInnerProduct.cxx; src/LaInverse.cxx; src/LaOuterProduct.cxx; src/LaSumOfElements.cxx; src/LaVtMVSimilarity.cxx; src/MPIProcess.cxx; src/MinimumBuilder.cxx; src/Minuit2Minimizer.cxx; src/MnApplication.cxx; src/MnContours.cxx; src/MnCovarianceSqueeze.cxx; src/MnEigen.cxx; src/MnFcn.cxx; src/MnFumiliMinimize.cxx; src/MnFunctionCross.cxx; src/MnGlobalCorrelationCoeff.cxx; src/MnHesse.cxx; src/MnLineSearch.cxx; src/MnMachinePrecision.cxx; src/MnMinos.cxx; src/MnParabolaFactory.cxx; src/MnParameterScan.cxx; src/MnPlot.cxx; src/MnPosDef.cxx; src/MnPrint.cxx; src/MnPrintImpl.cxx; src/MnScan.cxx; src/MnSeedGenerator.cxx; src/MnStrategy.cxx; src/MnTiny.cxx; src/MnTraceObject.cxx; src/MnUserFcn.cxx; src/MnUserParameterState.cxx; src/MnUserParameters.cxx; src/MnUserTransformation.cxx; src/ModularFunctionMinimizer.cxx; src/NegativeG2LineSearch.cxx; src/Numerical2PGradientCalculator.cxx; src/NumericalDerivator.cxx; src/ParametricFunction.cxx; src/ScanBuilder.cxx; src/SimplexBuilder.cxx; src/SimplexParameters.cxx; src/SimplexSeedGenerator.cxx; src/SinParameterTransformation.cxx; src/SqrtLowParameterTransformation.cxx; src/SqrtUpParameterTransformation.cxx; src/TMinuit2TraceObject.cxx; src/VariableMetricBuilder.cxx; src/VariableMetricEDMEstimator.cxx; src/mnbins.cxx; src/mndasum.cxx; src/mndaxpy.cxx; src/mnddot.cxx; src/mndscal.cxx; src/mndspmv.cxx; src/mndspr.cxx; src/mnlsame.cxx; src/mnteigen.cxx; src/mntplot.cxx; src/mnvert.cxx; src/mnxerbla.cxx; DICTIONARY_OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; MathCore; Hist; ); endif(). if(minuit2_omp); find_package(OpenMP REQUIRED); find_package(Threads REQUIRED). if(NOT TARGET OpenMP::OpenMP_CXX); add_library(OpenMP::OpenMP_CXX IMPORTED INTERFACE); set_property(TARGET OpenMP::OpenMP_CXX PROPERTY INTERFACE_COMPILE_DEFINITIONS -D_GLIBCXX_PARALLEL); set_property(TARGET OpenMP::OpenMP_CXX PROPERTY INTERFACE_COMPILE_OPTIONS ${OpenMP_CXX_FLAGS}); set_property(TARGET OpenMP::OpenMP_CXX PROPERTY INTERFACE_LINK_LIBRA,MatchSource.DOCS,math/minuit2/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/CMakeLists.txt:4949,Usability,Simpl,SimplexParameters,4949,c/LaInnerProduct.cxx; src/LaInverse.cxx; src/LaOuterProduct.cxx; src/LaSumOfElements.cxx; src/LaVtMVSimilarity.cxx; src/MPIProcess.cxx; src/MinimumBuilder.cxx; src/Minuit2Minimizer.cxx; src/MnApplication.cxx; src/MnContours.cxx; src/MnCovarianceSqueeze.cxx; src/MnEigen.cxx; src/MnFcn.cxx; src/MnFumiliMinimize.cxx; src/MnFunctionCross.cxx; src/MnGlobalCorrelationCoeff.cxx; src/MnHesse.cxx; src/MnLineSearch.cxx; src/MnMachinePrecision.cxx; src/MnMinos.cxx; src/MnParabolaFactory.cxx; src/MnParameterScan.cxx; src/MnPlot.cxx; src/MnPosDef.cxx; src/MnPrint.cxx; src/MnPrintImpl.cxx; src/MnScan.cxx; src/MnSeedGenerator.cxx; src/MnStrategy.cxx; src/MnTiny.cxx; src/MnTraceObject.cxx; src/MnUserFcn.cxx; src/MnUserParameterState.cxx; src/MnUserParameters.cxx; src/MnUserTransformation.cxx; src/ModularFunctionMinimizer.cxx; src/NegativeG2LineSearch.cxx; src/Numerical2PGradientCalculator.cxx; src/NumericalDerivator.cxx; src/ParametricFunction.cxx; src/ScanBuilder.cxx; src/SimplexBuilder.cxx; src/SimplexParameters.cxx; src/SimplexSeedGenerator.cxx; src/SinParameterTransformation.cxx; src/SqrtLowParameterTransformation.cxx; src/SqrtUpParameterTransformation.cxx; src/TMinuit2TraceObject.cxx; src/VariableMetricBuilder.cxx; src/VariableMetricEDMEstimator.cxx; src/mnbins.cxx; src/mndasum.cxx; src/mndaxpy.cxx; src/mnddot.cxx; src/mndscal.cxx; src/mndspmv.cxx; src/mndspr.cxx; src/mnlsame.cxx; src/mnteigen.cxx; src/mntplot.cxx; src/mnvert.cxx; src/mnxerbla.cxx; DICTIONARY_OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; MathCore; Hist; ); endif(). if(minuit2_omp); find_package(OpenMP REQUIRED); find_package(Threads REQUIRED). if(NOT TARGET OpenMP::OpenMP_CXX); add_library(OpenMP::OpenMP_CXX IMPORTED INTERFACE); set_property(TARGET OpenMP::OpenMP_CXX PROPERTY INTERFACE_COMPILE_DEFINITIONS -D_GLIBCXX_PARALLEL); set_property(TARGET OpenMP::OpenMP_CXX PROPERTY INTERFACE_COMPILE_OPTIONS ${OpenMP_CXX_FLAGS}); set_property(TARGET OpenMP::OpenMP_CXX PROPERTY INTERFACE_LINK_LIBRARIES ${OpenMP_CXX_LIBRARIE,MatchSource.DOCS,math/minuit2/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/CMakeLists.txt:4976,Usability,Simpl,SimplexSeedGenerator,4976,nverse.cxx; src/LaOuterProduct.cxx; src/LaSumOfElements.cxx; src/LaVtMVSimilarity.cxx; src/MPIProcess.cxx; src/MinimumBuilder.cxx; src/Minuit2Minimizer.cxx; src/MnApplication.cxx; src/MnContours.cxx; src/MnCovarianceSqueeze.cxx; src/MnEigen.cxx; src/MnFcn.cxx; src/MnFumiliMinimize.cxx; src/MnFunctionCross.cxx; src/MnGlobalCorrelationCoeff.cxx; src/MnHesse.cxx; src/MnLineSearch.cxx; src/MnMachinePrecision.cxx; src/MnMinos.cxx; src/MnParabolaFactory.cxx; src/MnParameterScan.cxx; src/MnPlot.cxx; src/MnPosDef.cxx; src/MnPrint.cxx; src/MnPrintImpl.cxx; src/MnScan.cxx; src/MnSeedGenerator.cxx; src/MnStrategy.cxx; src/MnTiny.cxx; src/MnTraceObject.cxx; src/MnUserFcn.cxx; src/MnUserParameterState.cxx; src/MnUserParameters.cxx; src/MnUserTransformation.cxx; src/ModularFunctionMinimizer.cxx; src/NegativeG2LineSearch.cxx; src/Numerical2PGradientCalculator.cxx; src/NumericalDerivator.cxx; src/ParametricFunction.cxx; src/ScanBuilder.cxx; src/SimplexBuilder.cxx; src/SimplexParameters.cxx; src/SimplexSeedGenerator.cxx; src/SinParameterTransformation.cxx; src/SqrtLowParameterTransformation.cxx; src/SqrtUpParameterTransformation.cxx; src/TMinuit2TraceObject.cxx; src/VariableMetricBuilder.cxx; src/VariableMetricEDMEstimator.cxx; src/mnbins.cxx; src/mndasum.cxx; src/mndaxpy.cxx; src/mnddot.cxx; src/mndscal.cxx; src/mndspmv.cxx; src/mndspr.cxx; src/mnlsame.cxx; src/mnteigen.cxx; src/mntplot.cxx; src/mnvert.cxx; src/mnxerbla.cxx; DICTIONARY_OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; MathCore; Hist; ); endif(). if(minuit2_omp); find_package(OpenMP REQUIRED); find_package(Threads REQUIRED). if(NOT TARGET OpenMP::OpenMP_CXX); add_library(OpenMP::OpenMP_CXX IMPORTED INTERFACE); set_property(TARGET OpenMP::OpenMP_CXX PROPERTY INTERFACE_COMPILE_DEFINITIONS -D_GLIBCXX_PARALLEL); set_property(TARGET OpenMP::OpenMP_CXX PROPERTY INTERFACE_COMPILE_OPTIONS ${OpenMP_CXX_FLAGS}); set_property(TARGET OpenMP::OpenMP_CXX PROPERTY INTERFACE_LINK_LIBRARIES ${OpenMP_CXX_LIBRARIES}); endif(). if(CMAKE_PROJE,MatchSource.DOCS,math/minuit2/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mlp/CMakeLists.txt:614,Integrability,DEPEND,DEPENDENCIES,614,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT math/mlp package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(MLP; HEADERS; TMLPAnalyzer.h; TMultiLayerPerceptron.h; TNeuron.h; TSynapse.h; SOURCES; src/TMLPAnalyzer.cxx; src/TMultiLayerPerceptron.cxx; src/TNeuron.cxx; src/TSynapse.cxx; DEPENDENCIES; Hist; Matrix; Tree; Graf; Gpad; TreePlayer; MathCore; ); ",MatchSource.DOCS,math/mlp/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/physics/CMakeLists.txt:844,Integrability,DEPEND,DEPENDENCIES,844,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT math/physics package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(Physics; HEADERS; TFeldmanCousins.h; TGenPhaseSpace.h; TLorentzRotation.h; TLorentzVector.h; TQuaternion.h; TRobustEstimator.h; TRolke.h; TRotation.h; TVector2.h; TVector3.h; SOURCES; src/TFeldmanCousins.cxx; src/TGenPhaseSpace.cxx; src/TLorentzRotation.cxx; src/TLorentzVector.cxx; src/TQuaternion.cxx; src/TRobustEstimator.cxx; src/TRolke.cxx; src/TRotation.cxx; src/TVector2.cxx; src/TVector3.cxx; DEPENDENCIES; Matrix; MathCore; GenVector; DICTIONARY_OPTIONS; -writeEmptyRootPCM; ); ",MatchSource.DOCS,math/physics/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/physics/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/quadp/CMakeLists.txt:1020,Integrability,DEPEND,DEPENDENCIES,1020,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT math/quadp package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(Quadp; HEADERS; TGondzioSolver.h; TMehrotraSolver.h; TQpDataBase.h; TQpDataDens.h; TQpDataSparse.h; TQpLinSolverBase.h; TQpLinSolverDens.h; TQpLinSolverSparse.h; TQpProbBase.h; TQpProbDens.h; TQpProbSparse.h; TQpResidual.h; TQpSolverBase.h; TQpVar.h; SOURCES; src/TGondzioSolver.cxx; src/TMehrotraSolver.cxx; src/TQpDataBase.cxx; src/TQpDataDens.cxx; src/TQpDataSparse.cxx; src/TQpLinSolverBase.cxx; src/TQpLinSolverDens.cxx; src/TQpLinSolverSparse.cxx; src/TQpProbBase.cxx; src/TQpProbDens.cxx; src/TQpProbSparse.cxx; src/TQpResidual.cxx; src/TQpSolverBase.cxx; src/TQpVar.cxx; DEPENDENCIES; Matrix; ); ",MatchSource.DOCS,math/quadp/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/quadp/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/rtools/CMakeLists.txt:534,Integrability,DEPEND,DEPENDENCIES,534,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT math/rtools package; # @author Pere Mato, CERN; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(Rtools; HEADERS; Math/RMinimizer.h; SOURCES; src/RMinimizer.cxx; DEPENDENCIES; Core; MathCore; RInterface; NO_CXXMODULE; ). target_include_directories(Rtools PRIVATE ${R_INCLUDE_DIRS}). file(COPY ""${CMAKE_SOURCE_DIR}/etc/plugins/ROOT@@Math@@Minimizer/P090_RMinimizer.C""; DESTINATION ""${CMAKE_BINARY_DIR}/etc/plugins/ROOT@@Math@@Minimizer/""); ",MatchSource.DOCS,math/rtools/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/rtools/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/rtools/CMakeLists.txt:690,Modifiability,plugin,plugins,690,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT math/rtools package; # @author Pere Mato, CERN; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(Rtools; HEADERS; Math/RMinimizer.h; SOURCES; src/RMinimizer.cxx; DEPENDENCIES; Core; MathCore; RInterface; NO_CXXMODULE; ). target_include_directories(Rtools PRIVATE ${R_INCLUDE_DIRS}). file(COPY ""${CMAKE_SOURCE_DIR}/etc/plugins/ROOT@@Math@@Minimizer/P090_RMinimizer.C""; DESTINATION ""${CMAKE_BINARY_DIR}/etc/plugins/ROOT@@Math@@Minimizer/""); ",MatchSource.DOCS,math/rtools/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/rtools/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/rtools/CMakeLists.txt:777,Modifiability,plugin,plugins,777,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT math/rtools package; # @author Pere Mato, CERN; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(Rtools; HEADERS; Math/RMinimizer.h; SOURCES; src/RMinimizer.cxx; DEPENDENCIES; Core; MathCore; RInterface; NO_CXXMODULE; ). target_include_directories(Rtools PRIVATE ${R_INCLUDE_DIRS}). file(COPY ""${CMAKE_SOURCE_DIR}/etc/plugins/ROOT@@Math@@Minimizer/P090_RMinimizer.C""; DESTINATION ""${CMAKE_BINARY_DIR}/etc/plugins/ROOT@@Math@@Minimizer/""); ",MatchSource.DOCS,math/rtools/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/rtools/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/smatrix/CMakeLists.txt:935,Integrability,DEPEND,DEPENDENCIES,935,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT math/smatrix package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(Smatrix; HEADERS; Math/BinaryOperators.h; Math/BinaryOpPolicy.h; Math/CholeskyDecomp.h; Math/Dfact.h; Math/Dfactir.h; Math/Dfinv.h; Math/Dinv.h; Math/Dsfact.h; Math/Dsinv.h; Math/Expression.h; Math/Functions.h; Math/HelperOps.h; Math/MatrixFunctions.h; Math/MatrixRepresentationsStatic.h; Math/MConfig.h; Math/SMatrixDfwd.h; Math/SMatrixFfwd.h; Math/SMatrix.h; Math/StaticCheck.h; Math/SVector.h; Math/UnaryOperators.h; NO_SOURCES; LINKDEF; LinkDef.h; DICTIONARY_OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; Core; MathCore; ). ROOT_GENERATE_DICTIONARY(G__Smatrix32; Math/SMatrix.h; Math/SMatrixDfwd.h; Math/SMatrixFfwd.h; Math/SVector.h; MULTIDICT; MODULE; Smatrix; LINKDEF; LinkDefD32.h; OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; Core; MathCore; ); ",MatchSource.DOCS,math/smatrix/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/smatrix/CMakeLists.txt:1159,Integrability,DEPEND,DEPENDENCIES,1159,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT math/smatrix package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(Smatrix; HEADERS; Math/BinaryOperators.h; Math/BinaryOpPolicy.h; Math/CholeskyDecomp.h; Math/Dfact.h; Math/Dfactir.h; Math/Dfinv.h; Math/Dinv.h; Math/Dsfact.h; Math/Dsinv.h; Math/Expression.h; Math/Functions.h; Math/HelperOps.h; Math/MatrixFunctions.h; Math/MatrixRepresentationsStatic.h; Math/MConfig.h; Math/SMatrixDfwd.h; Math/SMatrixFfwd.h; Math/SMatrix.h; Math/StaticCheck.h; Math/SVector.h; Math/UnaryOperators.h; NO_SOURCES; LINKDEF; LinkDef.h; DICTIONARY_OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; Core; MathCore; ). ROOT_GENERATE_DICTIONARY(G__Smatrix32; Math/SMatrix.h; Math/SMatrixDfwd.h; Math/SMatrixFfwd.h; Math/SVector.h; MULTIDICT; MODULE; Smatrix; LINKDEF; LinkDefD32.h; OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; Core; MathCore; ); ",MatchSource.DOCS,math/smatrix/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/splot/CMakeLists.txt:492,Integrability,DEPEND,DEPENDENCIES,492,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT math/splot package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(SPlot; HEADERS; TSPlot.h; SOURCES; src/TSPlot.cxx; DEPENDENCIES; Matrix; Hist; Tree; TreePlayer; Graf3d; Graf; MathCore; ); ",MatchSource.DOCS,math/splot/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/splot/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt:847,Deployability,configurat,configuration,847,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT math/unurun package; ############################################################################. #---Define package related variables-----------------------------------------------------------------. if(builtin_unuran). set(UNR_SRCDIR ${CMAKE_CURRENT_SOURCE_DIR}/src); set(UNR_VERSION ""1.8.0-root""); set(UNR_TARNAME ""unuran-${UNR_VERSION}""); set(UNR_TARGZFILE ${UNR_SRCDIR}/${UNR_TARNAME}.tar.gz); set(UNR_TARFILE ${UNR_SRCDIR}/${UNR_TARNAME}.tar); set(UNR_UNTARDIR ${CMAKE_CURRENT_BINARY_DIR}/${UNR_TARNAME}). #---Untar sources at configuration/generation time (needed for listing sources); if(NOT EXISTS ${UNR_UNTARDIR}); execute_process( COMMAND ${CMAKE_COMMAND} -E tar xzf ${UNR_TARGZFILE}; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} ); # This is necessary to replace the config.guess of unuran 1.8.0 as it does not allow to compile the ; # package on arm64.; execute_process( COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/config.guess_patch1 ${UNR_UNTARDIR}/autoconf/config.guess; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} ); endif(). if(WIN32); configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.win.in ${UNR_UNTARDIR}/config.h); else(); #---Define special compiler settings for unurun-----------------------------------------------------; set(UNR_CC ${CMAKE_C_COMPILER}); if(ROOT_ARCHITECTURE MATCHES hpuxia64acc); set(UNR_CC ""${UNR_CC} +DD64 -Ae""); elseif(ROOT_ARCHITECTURE MATCHES linuxppc64gcc); set(UNR_CC ""${UNR_CC} -m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664gcc); set(UNR_CFLAGS ""-m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxicc); set(UNR_CFLAGS ""-m32""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664icc); set(UNR_CFLAGS ""-m64""); e",MatchSource.DOCS,math/unuran/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt:3812,Integrability,DEPEND,DEPENDENCIES,3812,"root ${CMAKE_OSX_SYSROOT}""); endif(). #---configure unuran (required for creating the config.h used by unuran source files)----------------; add_custom_command(OUTPUT ${UNR_UNTARDIR}/config.h; COMMAND GNUMAKE=make ./configure CC=${UNR_CC} CFLAGS=${UNR_CFLAGS} > /dev/null 2>& 1; WORKING_DIRECTORY ${UNR_UNTARDIR}); endif(). #---We need to disable some warnings-------------------------------------------------------------------; string(REPLACE -Wall """" CMAKE_C_FLAGS ""${CMAKE_C_FLAGS}""); if(${CMAKE_CXX_COMPILER_ID} MATCHES Clang); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-parentheses-equality); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-deprecated-non-prototype); endif(); if(${CMAKE_CXX_COMPILER_ID} MATCHES GNU); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-maybe-uninitialized); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-alloc-size-larger-than). endif(). set(unrsources ${UNR_UNTARDIR}/src/utils/*.c; ${UNR_UNTARDIR}/src/methods/*.c; ${UNR_UNTARDIR}/src/specfunct/*.c; ${UNR_UNTARDIR}/src/distr/*.c; ${UNR_UNTARDIR}/src/distributions/*.c; ${UNR_UNTARDIR}/src/parser/*.c; ${UNR_UNTARDIR}/src/tests/*.c; ${UNR_UNTARDIR}/src/uniform/*.c; ${UNR_UNTARDIR}/src/urng/*.c ); set(unrconfig ${UNR_UNTARDIR}/config.h). else(). set(unrsources); set(unrconfig). endif(builtin_unuran). ROOT_STANDARD_LIBRARY_PACKAGE(Unuran; HEADERS; TUnuran.h; TUnuranBaseDist.h; TUnuranContDist.h; TUnuranDiscrDist.h; TUnuranEmpDist.h; TUnuranMultiContDist.h; TUnuranSampler.h; SOURCES; src/TUnuran.cxx; src/TUnuranContDist.cxx; src/TUnuranDiscrDist.cxx; src/TUnuranEmpDist.cxx; src/TUnuranMultiContDist.cxx; src/TUnuranSampler.cxx; ${unrconfig}; ${unrsources}; LIBRARIES; ${UNURAN_LIBRARIES}; DEPENDENCIES; Core; Hist; MathCore; ). if(builtin_unuran); target_include_directories(Unuran SYSTEM BEFORE PRIVATE ${UNR_UNTARDIR} ${UNR_UNTARDIR}/src ${UNR_UNTARDIR}/src/utils); target_compile_definitions(Unuran PRIVATE HAVE_CONFIG_H); else(); target_include_directories(Unuran SYSTEM PRIVATE ${UNURAN_INCLUDE_DIRS}); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,math/unuran/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt:439,Modifiability,variab,variables,439,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT math/unurun package; ############################################################################. #---Define package related variables-----------------------------------------------------------------. if(builtin_unuran). set(UNR_SRCDIR ${CMAKE_CURRENT_SOURCE_DIR}/src); set(UNR_VERSION ""1.8.0-root""); set(UNR_TARNAME ""unuran-${UNR_VERSION}""); set(UNR_TARGZFILE ${UNR_SRCDIR}/${UNR_TARNAME}.tar.gz); set(UNR_TARFILE ${UNR_SRCDIR}/${UNR_TARNAME}.tar); set(UNR_UNTARDIR ${CMAKE_CURRENT_BINARY_DIR}/${UNR_TARNAME}). #---Untar sources at configuration/generation time (needed for listing sources); if(NOT EXISTS ${UNR_UNTARDIR}); execute_process( COMMAND ${CMAKE_COMMAND} -E tar xzf ${UNR_TARGZFILE}; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} ); # This is necessary to replace the config.guess of unuran 1.8.0 as it does not allow to compile the ; # package on arm64.; execute_process( COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/config.guess_patch1 ${UNR_UNTARDIR}/autoconf/config.guess; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} ); endif(). if(WIN32); configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.win.in ${UNR_UNTARDIR}/config.h); else(); #---Define special compiler settings for unurun-----------------------------------------------------; set(UNR_CC ${CMAKE_C_COMPILER}); if(ROOT_ARCHITECTURE MATCHES hpuxia64acc); set(UNR_CC ""${UNR_CC} +DD64 -Ae""); elseif(ROOT_ARCHITECTURE MATCHES linuxppc64gcc); set(UNR_CC ""${UNR_CC} -m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664gcc); set(UNR_CFLAGS ""-m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxicc); set(UNR_CFLAGS ""-m32""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664icc); set(UNR_CFLAGS ""-m64""); e",MatchSource.DOCS,math/unuran/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt:847,Modifiability,config,configuration,847,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT math/unurun package; ############################################################################. #---Define package related variables-----------------------------------------------------------------. if(builtin_unuran). set(UNR_SRCDIR ${CMAKE_CURRENT_SOURCE_DIR}/src); set(UNR_VERSION ""1.8.0-root""); set(UNR_TARNAME ""unuran-${UNR_VERSION}""); set(UNR_TARGZFILE ${UNR_SRCDIR}/${UNR_TARNAME}.tar.gz); set(UNR_TARFILE ${UNR_SRCDIR}/${UNR_TARNAME}.tar); set(UNR_UNTARDIR ${CMAKE_CURRENT_BINARY_DIR}/${UNR_TARNAME}). #---Untar sources at configuration/generation time (needed for listing sources); if(NOT EXISTS ${UNR_UNTARDIR}); execute_process( COMMAND ${CMAKE_COMMAND} -E tar xzf ${UNR_TARGZFILE}; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} ); # This is necessary to replace the config.guess of unuran 1.8.0 as it does not allow to compile the ; # package on arm64.; execute_process( COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/config.guess_patch1 ${UNR_UNTARDIR}/autoconf/config.guess; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} ); endif(). if(WIN32); configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.win.in ${UNR_UNTARDIR}/config.h); else(); #---Define special compiler settings for unurun-----------------------------------------------------; set(UNR_CC ${CMAKE_C_COMPILER}); if(ROOT_ARCHITECTURE MATCHES hpuxia64acc); set(UNR_CC ""${UNR_CC} +DD64 -Ae""); elseif(ROOT_ARCHITECTURE MATCHES linuxppc64gcc); set(UNR_CC ""${UNR_CC} -m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664gcc); set(UNR_CFLAGS ""-m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxicc); set(UNR_CFLAGS ""-m32""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664icc); set(UNR_CFLAGS ""-m64""); e",MatchSource.DOCS,math/unuran/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt:1094,Modifiability,config,config,1094,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT math/unurun package; ############################################################################. #---Define package related variables-----------------------------------------------------------------. if(builtin_unuran). set(UNR_SRCDIR ${CMAKE_CURRENT_SOURCE_DIR}/src); set(UNR_VERSION ""1.8.0-root""); set(UNR_TARNAME ""unuran-${UNR_VERSION}""); set(UNR_TARGZFILE ${UNR_SRCDIR}/${UNR_TARNAME}.tar.gz); set(UNR_TARFILE ${UNR_SRCDIR}/${UNR_TARNAME}.tar); set(UNR_UNTARDIR ${CMAKE_CURRENT_BINARY_DIR}/${UNR_TARNAME}). #---Untar sources at configuration/generation time (needed for listing sources); if(NOT EXISTS ${UNR_UNTARDIR}); execute_process( COMMAND ${CMAKE_COMMAND} -E tar xzf ${UNR_TARGZFILE}; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} ); # This is necessary to replace the config.guess of unuran 1.8.0 as it does not allow to compile the ; # package on arm64.; execute_process( COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/config.guess_patch1 ${UNR_UNTARDIR}/autoconf/config.guess; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} ); endif(). if(WIN32); configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.win.in ${UNR_UNTARDIR}/config.h); else(); #---Define special compiler settings for unurun-----------------------------------------------------; set(UNR_CC ${CMAKE_C_COMPILER}); if(ROOT_ARCHITECTURE MATCHES hpuxia64acc); set(UNR_CC ""${UNR_CC} +DD64 -Ae""); elseif(ROOT_ARCHITECTURE MATCHES linuxppc64gcc); set(UNR_CC ""${UNR_CC} -m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664gcc); set(UNR_CFLAGS ""-m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxicc); set(UNR_CFLAGS ""-m32""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664icc); set(UNR_CFLAGS ""-m64""); e",MatchSource.DOCS,math/unuran/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt:1260,Modifiability,config,config,1260,"################################################; # CMakeLists.txt file for building ROOT math/unurun package; ############################################################################. #---Define package related variables-----------------------------------------------------------------. if(builtin_unuran). set(UNR_SRCDIR ${CMAKE_CURRENT_SOURCE_DIR}/src); set(UNR_VERSION ""1.8.0-root""); set(UNR_TARNAME ""unuran-${UNR_VERSION}""); set(UNR_TARGZFILE ${UNR_SRCDIR}/${UNR_TARNAME}.tar.gz); set(UNR_TARFILE ${UNR_SRCDIR}/${UNR_TARNAME}.tar); set(UNR_UNTARDIR ${CMAKE_CURRENT_BINARY_DIR}/${UNR_TARNAME}). #---Untar sources at configuration/generation time (needed for listing sources); if(NOT EXISTS ${UNR_UNTARDIR}); execute_process( COMMAND ${CMAKE_COMMAND} -E tar xzf ${UNR_TARGZFILE}; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} ); # This is necessary to replace the config.guess of unuran 1.8.0 as it does not allow to compile the ; # package on arm64.; execute_process( COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/config.guess_patch1 ${UNR_UNTARDIR}/autoconf/config.guess; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} ); endif(). if(WIN32); configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.win.in ${UNR_UNTARDIR}/config.h); else(); #---Define special compiler settings for unurun-----------------------------------------------------; set(UNR_CC ${CMAKE_C_COMPILER}); if(ROOT_ARCHITECTURE MATCHES hpuxia64acc); set(UNR_CC ""${UNR_CC} +DD64 -Ae""); elseif(ROOT_ARCHITECTURE MATCHES linuxppc64gcc); set(UNR_CC ""${UNR_CC} -m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664gcc); set(UNR_CFLAGS ""-m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxicc); set(UNR_CFLAGS ""-m32""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664icc); set(UNR_CFLAGS ""-m64""); elseif(ROOT_ARCHITECTURE MATCHES win32 OR ROOT_ARCHITECTURE MATCHES win64); set(UNR_CFLAGS ""-MD -G5 -GX""); endif(); if(CMAKE_OSX_SYSROOT); set(UNR_CFLAGS ""${UNR_CFLAGS} -isysroot ${CMAKE_OSX_SYSROOT}""); endif(). #---configur",MatchSource.DOCS,math/unuran/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt:1305,Modifiability,config,config,1305," file for building ROOT math/unurun package; ############################################################################. #---Define package related variables-----------------------------------------------------------------. if(builtin_unuran). set(UNR_SRCDIR ${CMAKE_CURRENT_SOURCE_DIR}/src); set(UNR_VERSION ""1.8.0-root""); set(UNR_TARNAME ""unuran-${UNR_VERSION}""); set(UNR_TARGZFILE ${UNR_SRCDIR}/${UNR_TARNAME}.tar.gz); set(UNR_TARFILE ${UNR_SRCDIR}/${UNR_TARNAME}.tar); set(UNR_UNTARDIR ${CMAKE_CURRENT_BINARY_DIR}/${UNR_TARNAME}). #---Untar sources at configuration/generation time (needed for listing sources); if(NOT EXISTS ${UNR_UNTARDIR}); execute_process( COMMAND ${CMAKE_COMMAND} -E tar xzf ${UNR_TARGZFILE}; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} ); # This is necessary to replace the config.guess of unuran 1.8.0 as it does not allow to compile the ; # package on arm64.; execute_process( COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/config.guess_patch1 ${UNR_UNTARDIR}/autoconf/config.guess; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} ); endif(). if(WIN32); configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.win.in ${UNR_UNTARDIR}/config.h); else(); #---Define special compiler settings for unurun-----------------------------------------------------; set(UNR_CC ${CMAKE_C_COMPILER}); if(ROOT_ARCHITECTURE MATCHES hpuxia64acc); set(UNR_CC ""${UNR_CC} +DD64 -Ae""); elseif(ROOT_ARCHITECTURE MATCHES linuxppc64gcc); set(UNR_CC ""${UNR_CC} -m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664gcc); set(UNR_CFLAGS ""-m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxicc); set(UNR_CFLAGS ""-m32""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664icc); set(UNR_CFLAGS ""-m64""); elseif(ROOT_ARCHITECTURE MATCHES win32 OR ROOT_ARCHITECTURE MATCHES win64); set(UNR_CFLAGS ""-MD -G5 -GX""); endif(); if(CMAKE_OSX_SYSROOT); set(UNR_CFLAGS ""${UNR_CFLAGS} -isysroot ${CMAKE_OSX_SYSROOT}""); endif(). #---configure unuran (required for creating the config.h used by unuran source",MatchSource.DOCS,math/unuran/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt:1431,Modifiability,config,config,1431,"###. #---Define package related variables-----------------------------------------------------------------. if(builtin_unuran). set(UNR_SRCDIR ${CMAKE_CURRENT_SOURCE_DIR}/src); set(UNR_VERSION ""1.8.0-root""); set(UNR_TARNAME ""unuran-${UNR_VERSION}""); set(UNR_TARGZFILE ${UNR_SRCDIR}/${UNR_TARNAME}.tar.gz); set(UNR_TARFILE ${UNR_SRCDIR}/${UNR_TARNAME}.tar); set(UNR_UNTARDIR ${CMAKE_CURRENT_BINARY_DIR}/${UNR_TARNAME}). #---Untar sources at configuration/generation time (needed for listing sources); if(NOT EXISTS ${UNR_UNTARDIR}); execute_process( COMMAND ${CMAKE_COMMAND} -E tar xzf ${UNR_TARGZFILE}; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} ); # This is necessary to replace the config.guess of unuran 1.8.0 as it does not allow to compile the ; # package on arm64.; execute_process( COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/config.guess_patch1 ${UNR_UNTARDIR}/autoconf/config.guess; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} ); endif(). if(WIN32); configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.win.in ${UNR_UNTARDIR}/config.h); else(); #---Define special compiler settings for unurun-----------------------------------------------------; set(UNR_CC ${CMAKE_C_COMPILER}); if(ROOT_ARCHITECTURE MATCHES hpuxia64acc); set(UNR_CC ""${UNR_CC} +DD64 -Ae""); elseif(ROOT_ARCHITECTURE MATCHES linuxppc64gcc); set(UNR_CC ""${UNR_CC} -m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664gcc); set(UNR_CFLAGS ""-m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxicc); set(UNR_CFLAGS ""-m32""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664icc); set(UNR_CFLAGS ""-m64""); elseif(ROOT_ARCHITECTURE MATCHES win32 OR ROOT_ARCHITECTURE MATCHES win64); set(UNR_CFLAGS ""-MD -G5 -GX""); endif(); if(CMAKE_OSX_SYSROOT); set(UNR_CFLAGS ""${UNR_CFLAGS} -isysroot ${CMAKE_OSX_SYSROOT}""); endif(). #---configure unuran (required for creating the config.h used by unuran source files)----------------; add_custom_command(OUTPUT ${UNR_UNTARDIR}/config.h; COMMAND GNUMAKE=make ./configure CC=${UN",MatchSource.DOCS,math/unuran/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt:1463,Modifiability,config,config,1463,"--------------------------------------------------------. if(builtin_unuran). set(UNR_SRCDIR ${CMAKE_CURRENT_SOURCE_DIR}/src); set(UNR_VERSION ""1.8.0-root""); set(UNR_TARNAME ""unuran-${UNR_VERSION}""); set(UNR_TARGZFILE ${UNR_SRCDIR}/${UNR_TARNAME}.tar.gz); set(UNR_TARFILE ${UNR_SRCDIR}/${UNR_TARNAME}.tar); set(UNR_UNTARDIR ${CMAKE_CURRENT_BINARY_DIR}/${UNR_TARNAME}). #---Untar sources at configuration/generation time (needed for listing sources); if(NOT EXISTS ${UNR_UNTARDIR}); execute_process( COMMAND ${CMAKE_COMMAND} -E tar xzf ${UNR_TARGZFILE}; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} ); # This is necessary to replace the config.guess of unuran 1.8.0 as it does not allow to compile the ; # package on arm64.; execute_process( COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/config.guess_patch1 ${UNR_UNTARDIR}/autoconf/config.guess; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} ); endif(). if(WIN32); configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.win.in ${UNR_UNTARDIR}/config.h); else(); #---Define special compiler settings for unurun-----------------------------------------------------; set(UNR_CC ${CMAKE_C_COMPILER}); if(ROOT_ARCHITECTURE MATCHES hpuxia64acc); set(UNR_CC ""${UNR_CC} +DD64 -Ae""); elseif(ROOT_ARCHITECTURE MATCHES linuxppc64gcc); set(UNR_CC ""${UNR_CC} -m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664gcc); set(UNR_CFLAGS ""-m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxicc); set(UNR_CFLAGS ""-m32""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664icc); set(UNR_CFLAGS ""-m64""); elseif(ROOT_ARCHITECTURE MATCHES win32 OR ROOT_ARCHITECTURE MATCHES win64); set(UNR_CFLAGS ""-MD -G5 -GX""); endif(); if(CMAKE_OSX_SYSROOT); set(UNR_CFLAGS ""${UNR_CFLAGS} -isysroot ${CMAKE_OSX_SYSROOT}""); endif(). #---configure unuran (required for creating the config.h used by unuran source files)----------------; add_custom_command(OUTPUT ${UNR_UNTARDIR}/config.h; COMMAND GNUMAKE=make ./configure CC=${UNR_CC} CFLAGS=${UNR_CFLAGS} > /dev/null 2>& 1; WORK",MatchSource.DOCS,math/unuran/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt:2216,Modifiability,config,configure,2216,"_CURRENT_SOURCE_DIR}/config.guess_patch1 ${UNR_UNTARDIR}/autoconf/config.guess; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} ); endif(). if(WIN32); configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.win.in ${UNR_UNTARDIR}/config.h); else(); #---Define special compiler settings for unurun-----------------------------------------------------; set(UNR_CC ${CMAKE_C_COMPILER}); if(ROOT_ARCHITECTURE MATCHES hpuxia64acc); set(UNR_CC ""${UNR_CC} +DD64 -Ae""); elseif(ROOT_ARCHITECTURE MATCHES linuxppc64gcc); set(UNR_CC ""${UNR_CC} -m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664gcc); set(UNR_CFLAGS ""-m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxicc); set(UNR_CFLAGS ""-m32""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664icc); set(UNR_CFLAGS ""-m64""); elseif(ROOT_ARCHITECTURE MATCHES win32 OR ROOT_ARCHITECTURE MATCHES win64); set(UNR_CFLAGS ""-MD -G5 -GX""); endif(); if(CMAKE_OSX_SYSROOT); set(UNR_CFLAGS ""${UNR_CFLAGS} -isysroot ${CMAKE_OSX_SYSROOT}""); endif(). #---configure unuran (required for creating the config.h used by unuran source files)----------------; add_custom_command(OUTPUT ${UNR_UNTARDIR}/config.h; COMMAND GNUMAKE=make ./configure CC=${UNR_CC} CFLAGS=${UNR_CFLAGS} > /dev/null 2>& 1; WORKING_DIRECTORY ${UNR_UNTARDIR}); endif(). #---We need to disable some warnings-------------------------------------------------------------------; string(REPLACE -Wall """" CMAKE_C_FLAGS ""${CMAKE_C_FLAGS}""); if(${CMAKE_CXX_COMPILER_ID} MATCHES Clang); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-parentheses-equality); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-deprecated-non-prototype); endif(); if(${CMAKE_CXX_COMPILER_ID} MATCHES GNU); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-maybe-uninitialized); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-alloc-size-larger-than). endif(). set(unrsources ${UNR_UNTARDIR}/src/utils/*.c; ${UNR_UNTARDIR}/src/methods/*.c; ${UNR_UNTARDIR}/src/specfunct/*.c; ${UNR_UNTARDIR}/src/distr/*.c; ${UNR_UNTARDIR}/src/distributions/*.c; ${UNR_UNTARDIR}/src/parser/*.c; ${UNR_UNTARDIR}/src/",MatchSource.DOCS,math/unuran/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt:2260,Modifiability,config,config,2260,"_CURRENT_SOURCE_DIR}/config.guess_patch1 ${UNR_UNTARDIR}/autoconf/config.guess; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} ); endif(). if(WIN32); configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.win.in ${UNR_UNTARDIR}/config.h); else(); #---Define special compiler settings for unurun-----------------------------------------------------; set(UNR_CC ${CMAKE_C_COMPILER}); if(ROOT_ARCHITECTURE MATCHES hpuxia64acc); set(UNR_CC ""${UNR_CC} +DD64 -Ae""); elseif(ROOT_ARCHITECTURE MATCHES linuxppc64gcc); set(UNR_CC ""${UNR_CC} -m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664gcc); set(UNR_CFLAGS ""-m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxicc); set(UNR_CFLAGS ""-m32""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664icc); set(UNR_CFLAGS ""-m64""); elseif(ROOT_ARCHITECTURE MATCHES win32 OR ROOT_ARCHITECTURE MATCHES win64); set(UNR_CFLAGS ""-MD -G5 -GX""); endif(); if(CMAKE_OSX_SYSROOT); set(UNR_CFLAGS ""${UNR_CFLAGS} -isysroot ${CMAKE_OSX_SYSROOT}""); endif(). #---configure unuran (required for creating the config.h used by unuran source files)----------------; add_custom_command(OUTPUT ${UNR_UNTARDIR}/config.h; COMMAND GNUMAKE=make ./configure CC=${UNR_CC} CFLAGS=${UNR_CFLAGS} > /dev/null 2>& 1; WORKING_DIRECTORY ${UNR_UNTARDIR}); endif(). #---We need to disable some warnings-------------------------------------------------------------------; string(REPLACE -Wall """" CMAKE_C_FLAGS ""${CMAKE_C_FLAGS}""); if(${CMAKE_CXX_COMPILER_ID} MATCHES Clang); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-parentheses-equality); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-deprecated-non-prototype); endif(); if(${CMAKE_CXX_COMPILER_ID} MATCHES GNU); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-maybe-uninitialized); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-alloc-size-larger-than). endif(). set(unrsources ${UNR_UNTARDIR}/src/utils/*.c; ${UNR_UNTARDIR}/src/methods/*.c; ${UNR_UNTARDIR}/src/specfunct/*.c; ${UNR_UNTARDIR}/src/distr/*.c; ${UNR_UNTARDIR}/src/distributions/*.c; ${UNR_UNTARDIR}/src/parser/*.c; ${UNR_UNTARDIR}/src/",MatchSource.DOCS,math/unuran/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt:2357,Modifiability,config,config,2357,"ss; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} ); endif(). if(WIN32); configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.win.in ${UNR_UNTARDIR}/config.h); else(); #---Define special compiler settings for unurun-----------------------------------------------------; set(UNR_CC ${CMAKE_C_COMPILER}); if(ROOT_ARCHITECTURE MATCHES hpuxia64acc); set(UNR_CC ""${UNR_CC} +DD64 -Ae""); elseif(ROOT_ARCHITECTURE MATCHES linuxppc64gcc); set(UNR_CC ""${UNR_CC} -m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664gcc); set(UNR_CFLAGS ""-m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxicc); set(UNR_CFLAGS ""-m32""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664icc); set(UNR_CFLAGS ""-m64""); elseif(ROOT_ARCHITECTURE MATCHES win32 OR ROOT_ARCHITECTURE MATCHES win64); set(UNR_CFLAGS ""-MD -G5 -GX""); endif(); if(CMAKE_OSX_SYSROOT); set(UNR_CFLAGS ""${UNR_CFLAGS} -isysroot ${CMAKE_OSX_SYSROOT}""); endif(). #---configure unuran (required for creating the config.h used by unuran source files)----------------; add_custom_command(OUTPUT ${UNR_UNTARDIR}/config.h; COMMAND GNUMAKE=make ./configure CC=${UNR_CC} CFLAGS=${UNR_CFLAGS} > /dev/null 2>& 1; WORKING_DIRECTORY ${UNR_UNTARDIR}); endif(). #---We need to disable some warnings-------------------------------------------------------------------; string(REPLACE -Wall """" CMAKE_C_FLAGS ""${CMAKE_C_FLAGS}""); if(${CMAKE_CXX_COMPILER_ID} MATCHES Clang); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-parentheses-equality); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-deprecated-non-prototype); endif(); if(${CMAKE_CXX_COMPILER_ID} MATCHES GNU); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-maybe-uninitialized); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-alloc-size-larger-than). endif(). set(unrsources ${UNR_UNTARDIR}/src/utils/*.c; ${UNR_UNTARDIR}/src/methods/*.c; ${UNR_UNTARDIR}/src/specfunct/*.c; ${UNR_UNTARDIR}/src/distr/*.c; ${UNR_UNTARDIR}/src/distributions/*.c; ${UNR_UNTARDIR}/src/parser/*.c; ${UNR_UNTARDIR}/src/tests/*.c; ${UNR_UNTARDIR}/src/uniform/*.c; ${UNR_UNTARDIR}/src/urng/*.c ); s",MatchSource.DOCS,math/unuran/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt:2390,Modifiability,config,configure,2390,".in ${UNR_UNTARDIR}/config.h); else(); #---Define special compiler settings for unurun-----------------------------------------------------; set(UNR_CC ${CMAKE_C_COMPILER}); if(ROOT_ARCHITECTURE MATCHES hpuxia64acc); set(UNR_CC ""${UNR_CC} +DD64 -Ae""); elseif(ROOT_ARCHITECTURE MATCHES linuxppc64gcc); set(UNR_CC ""${UNR_CC} -m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664gcc); set(UNR_CFLAGS ""-m64 -fPIC""); elseif(ROOT_ARCHITECTURE MATCHES linuxicc); set(UNR_CFLAGS ""-m32""); elseif(ROOT_ARCHITECTURE MATCHES linuxx8664icc); set(UNR_CFLAGS ""-m64""); elseif(ROOT_ARCHITECTURE MATCHES win32 OR ROOT_ARCHITECTURE MATCHES win64); set(UNR_CFLAGS ""-MD -G5 -GX""); endif(); if(CMAKE_OSX_SYSROOT); set(UNR_CFLAGS ""${UNR_CFLAGS} -isysroot ${CMAKE_OSX_SYSROOT}""); endif(). #---configure unuran (required for creating the config.h used by unuran source files)----------------; add_custom_command(OUTPUT ${UNR_UNTARDIR}/config.h; COMMAND GNUMAKE=make ./configure CC=${UNR_CC} CFLAGS=${UNR_CFLAGS} > /dev/null 2>& 1; WORKING_DIRECTORY ${UNR_UNTARDIR}); endif(). #---We need to disable some warnings-------------------------------------------------------------------; string(REPLACE -Wall """" CMAKE_C_FLAGS ""${CMAKE_C_FLAGS}""); if(${CMAKE_CXX_COMPILER_ID} MATCHES Clang); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-parentheses-equality); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-deprecated-non-prototype); endif(); if(${CMAKE_CXX_COMPILER_ID} MATCHES GNU); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-maybe-uninitialized); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-alloc-size-larger-than). endif(). set(unrsources ${UNR_UNTARDIR}/src/utils/*.c; ${UNR_UNTARDIR}/src/methods/*.c; ${UNR_UNTARDIR}/src/specfunct/*.c; ${UNR_UNTARDIR}/src/distr/*.c; ${UNR_UNTARDIR}/src/distributions/*.c; ${UNR_UNTARDIR}/src/parser/*.c; ${UNR_UNTARDIR}/src/tests/*.c; ${UNR_UNTARDIR}/src/uniform/*.c; ${UNR_UNTARDIR}/src/urng/*.c ); set(unrconfig ${UNR_UNTARDIR}/config.h). else(). set(unrsources); set(unrconfig). endif(builtin_unuran). ROOT_STANDARD_LIBRARY_P",MatchSource.DOCS,math/unuran/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt:3345,Modifiability,config,config,3345,"root ${CMAKE_OSX_SYSROOT}""); endif(). #---configure unuran (required for creating the config.h used by unuran source files)----------------; add_custom_command(OUTPUT ${UNR_UNTARDIR}/config.h; COMMAND GNUMAKE=make ./configure CC=${UNR_CC} CFLAGS=${UNR_CFLAGS} > /dev/null 2>& 1; WORKING_DIRECTORY ${UNR_UNTARDIR}); endif(). #---We need to disable some warnings-------------------------------------------------------------------; string(REPLACE -Wall """" CMAKE_C_FLAGS ""${CMAKE_C_FLAGS}""); if(${CMAKE_CXX_COMPILER_ID} MATCHES Clang); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-parentheses-equality); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-deprecated-non-prototype); endif(); if(${CMAKE_CXX_COMPILER_ID} MATCHES GNU); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-maybe-uninitialized); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-alloc-size-larger-than). endif(). set(unrsources ${UNR_UNTARDIR}/src/utils/*.c; ${UNR_UNTARDIR}/src/methods/*.c; ${UNR_UNTARDIR}/src/specfunct/*.c; ${UNR_UNTARDIR}/src/distr/*.c; ${UNR_UNTARDIR}/src/distributions/*.c; ${UNR_UNTARDIR}/src/parser/*.c; ${UNR_UNTARDIR}/src/tests/*.c; ${UNR_UNTARDIR}/src/uniform/*.c; ${UNR_UNTARDIR}/src/urng/*.c ); set(unrconfig ${UNR_UNTARDIR}/config.h). else(). set(unrsources); set(unrconfig). endif(builtin_unuran). ROOT_STANDARD_LIBRARY_PACKAGE(Unuran; HEADERS; TUnuran.h; TUnuranBaseDist.h; TUnuranContDist.h; TUnuranDiscrDist.h; TUnuranEmpDist.h; TUnuranMultiContDist.h; TUnuranSampler.h; SOURCES; src/TUnuran.cxx; src/TUnuranContDist.cxx; src/TUnuranDiscrDist.cxx; src/TUnuranEmpDist.cxx; src/TUnuranMultiContDist.cxx; src/TUnuranSampler.cxx; ${unrconfig}; ${unrsources}; LIBRARIES; ${UNURAN_LIBRARIES}; DEPENDENCIES; Core; Hist; MathCore; ). if(builtin_unuran); target_include_directories(Unuran SYSTEM BEFORE PRIVATE ${UNR_UNTARDIR} ${UNR_UNTARDIR}/src ${UNR_UNTARDIR}/src/utils); target_compile_definitions(Unuran PRIVATE HAVE_CONFIG_H); else(); target_include_directories(Unuran SYSTEM PRIVATE ${UNURAN_INCLUDE_DIRS}); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,math/unuran/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt:3239,Testability,test,tests,3239,"root ${CMAKE_OSX_SYSROOT}""); endif(). #---configure unuran (required for creating the config.h used by unuran source files)----------------; add_custom_command(OUTPUT ${UNR_UNTARDIR}/config.h; COMMAND GNUMAKE=make ./configure CC=${UNR_CC} CFLAGS=${UNR_CFLAGS} > /dev/null 2>& 1; WORKING_DIRECTORY ${UNR_UNTARDIR}); endif(). #---We need to disable some warnings-------------------------------------------------------------------; string(REPLACE -Wall """" CMAKE_C_FLAGS ""${CMAKE_C_FLAGS}""); if(${CMAKE_CXX_COMPILER_ID} MATCHES Clang); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-parentheses-equality); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-deprecated-non-prototype); endif(); if(${CMAKE_CXX_COMPILER_ID} MATCHES GNU); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-maybe-uninitialized); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-alloc-size-larger-than). endif(). set(unrsources ${UNR_UNTARDIR}/src/utils/*.c; ${UNR_UNTARDIR}/src/methods/*.c; ${UNR_UNTARDIR}/src/specfunct/*.c; ${UNR_UNTARDIR}/src/distr/*.c; ${UNR_UNTARDIR}/src/distributions/*.c; ${UNR_UNTARDIR}/src/parser/*.c; ${UNR_UNTARDIR}/src/tests/*.c; ${UNR_UNTARDIR}/src/uniform/*.c; ${UNR_UNTARDIR}/src/urng/*.c ); set(unrconfig ${UNR_UNTARDIR}/config.h). else(). set(unrsources); set(unrconfig). endif(builtin_unuran). ROOT_STANDARD_LIBRARY_PACKAGE(Unuran; HEADERS; TUnuran.h; TUnuranBaseDist.h; TUnuranContDist.h; TUnuranDiscrDist.h; TUnuranEmpDist.h; TUnuranMultiContDist.h; TUnuranSampler.h; SOURCES; src/TUnuran.cxx; src/TUnuranContDist.cxx; src/TUnuranDiscrDist.cxx; src/TUnuranEmpDist.cxx; src/TUnuranMultiContDist.cxx; src/TUnuranSampler.cxx; ${unrconfig}; ${unrsources}; LIBRARIES; ${UNURAN_LIBRARIES}; DEPENDENCIES; Core; Hist; MathCore; ). if(builtin_unuran); target_include_directories(Unuran SYSTEM BEFORE PRIVATE ${UNR_UNTARDIR} ${UNR_UNTARDIR}/src ${UNR_UNTARDIR}/src/utils); target_compile_definitions(Unuran PRIVATE HAVE_CONFIG_H); else(); target_include_directories(Unuran SYSTEM PRIVATE ${UNURAN_INCLUDE_DIRS}); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,math/unuran/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt:4167,Testability,test,test,4167,"root ${CMAKE_OSX_SYSROOT}""); endif(). #---configure unuran (required for creating the config.h used by unuran source files)----------------; add_custom_command(OUTPUT ${UNR_UNTARDIR}/config.h; COMMAND GNUMAKE=make ./configure CC=${UNR_CC} CFLAGS=${UNR_CFLAGS} > /dev/null 2>& 1; WORKING_DIRECTORY ${UNR_UNTARDIR}); endif(). #---We need to disable some warnings-------------------------------------------------------------------; string(REPLACE -Wall """" CMAKE_C_FLAGS ""${CMAKE_C_FLAGS}""); if(${CMAKE_CXX_COMPILER_ID} MATCHES Clang); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-parentheses-equality); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-deprecated-non-prototype); endif(); if(${CMAKE_CXX_COMPILER_ID} MATCHES GNU); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-maybe-uninitialized); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-alloc-size-larger-than). endif(). set(unrsources ${UNR_UNTARDIR}/src/utils/*.c; ${UNR_UNTARDIR}/src/methods/*.c; ${UNR_UNTARDIR}/src/specfunct/*.c; ${UNR_UNTARDIR}/src/distr/*.c; ${UNR_UNTARDIR}/src/distributions/*.c; ${UNR_UNTARDIR}/src/parser/*.c; ${UNR_UNTARDIR}/src/tests/*.c; ${UNR_UNTARDIR}/src/uniform/*.c; ${UNR_UNTARDIR}/src/urng/*.c ); set(unrconfig ${UNR_UNTARDIR}/config.h). else(). set(unrsources); set(unrconfig). endif(builtin_unuran). ROOT_STANDARD_LIBRARY_PACKAGE(Unuran; HEADERS; TUnuran.h; TUnuranBaseDist.h; TUnuranContDist.h; TUnuranDiscrDist.h; TUnuranEmpDist.h; TUnuranMultiContDist.h; TUnuranSampler.h; SOURCES; src/TUnuran.cxx; src/TUnuranContDist.cxx; src/TUnuranDiscrDist.cxx; src/TUnuranEmpDist.cxx; src/TUnuranMultiContDist.cxx; src/TUnuranSampler.cxx; ${unrconfig}; ${unrsources}; LIBRARIES; ${UNURAN_LIBRARIES}; DEPENDENCIES; Core; Hist; MathCore; ). if(builtin_unuran); target_include_directories(Unuran SYSTEM BEFORE PRIVATE ${UNR_UNTARDIR} ${UNR_UNTARDIR}/src ${UNR_UNTARDIR}/src/utils); target_compile_definitions(Unuran PRIVATE HAVE_CONFIG_H); else(); target_include_directories(Unuran SYSTEM PRIVATE ${UNURAN_INCLUDE_DIRS}); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,math/unuran/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/vecops/CMakeLists.txt:541,Integrability,DEPEND,DEPENDENCIES,541,"# Copyright (C) 1995-2022, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT math/vecops package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(ROOTVecOps; HEADERS; ROOT/RVec.hxx; SOURCES; src/RVec.cxx; DICTIONARY_OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; Core; ). if(builtin_vdt OR vdt); target_link_libraries(ROOTVecOps PUBLIC VDT::VDT); endif(); if(builtin_vdt); add_dependencies(ROOTVecOps VDT); endif(). include(CheckCXXSymbolExists); check_symbol_exists(m __sqrt_finite HAVE_FINITE_MATH); if(NOT HAVE_FINITE_MATH AND NOT MSVC); target_compile_options(ROOTVecOps PRIVATE -fno-finite-math-only); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,math/vecops/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/vecops/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/vecops/CMakeLists.txt:935,Testability,test,test,935,"# Copyright (C) 1995-2022, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT math/vecops package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(ROOTVecOps; HEADERS; ROOT/RVec.hxx; SOURCES; src/RVec.cxx; DICTIONARY_OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; Core; ). if(builtin_vdt OR vdt); target_link_libraries(ROOTVecOps PUBLIC VDT::VDT); endif(); if(builtin_vdt); add_dependencies(ROOTVecOps VDT); endif(). include(CheckCXXSymbolExists); check_symbol_exists(m __sqrt_finite HAVE_FINITE_MATH); if(NOT HAVE_FINITE_MATH AND NOT MSVC); target_compile_options(ROOTVecOps PRIVATE -fno-finite-math-only); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,math/vecops/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/vecops/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/foam/test/CMakeLists.txt:2,Testability,Test,Testing,2,"# Testing TFoam; # @author Stephan Hageboeck, CERN, 2020. ROOT_ADD_GTEST(testTFoam testTFoam.cxx; LIBRARIES Tree Foam; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testTFoam_1.root). ",MatchSource.DOCS,math/foam/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/foam/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/foam/test/CMakeLists.txt:73,Testability,test,testTFoam,73,"# Testing TFoam; # @author Stephan Hageboeck, CERN, 2020. ROOT_ADD_GTEST(testTFoam testTFoam.cxx; LIBRARIES Tree Foam; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testTFoam_1.root). ",MatchSource.DOCS,math/foam/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/foam/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/foam/test/CMakeLists.txt:83,Testability,test,testTFoam,83,"# Testing TFoam; # @author Stephan Hageboeck, CERN, 2020. ROOT_ADD_GTEST(testTFoam testTFoam.cxx; LIBRARIES Tree Foam; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testTFoam_1.root). ",MatchSource.DOCS,math/foam/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/foam/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genetic/doc/index.txt:342,Integrability,interface,interface,342,"This directory contains the ROOT::Math::GeneticMinimizer class; BEGIN_HTML; The GeneticMinimizer class is used to implement a genetic minimizer algorithm.; The algorithm is based on an algorithm implemented in the TMVA package; (TMVA::GeneticAlgorithm class).; <p>; The ROOT::Math:GeneticMinimizer class implements the; ROOT::Math::Minimizer interface, as a new plugin with name ""Genetic"".; The class can be used when fitting histograms or graph by selecting it; as default minimizer. This can be done via:; <pre>; ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""Genetic"");; </pre>; Via the MinimizerOptions, one can control the possible options for the; class. These are described in the TMVA user guide, Option Table 7.; A list of the default options can be obtained by doing:; <pre>; ROOT::Math::Minimizer * min =ROOT::Math::Factory::CreateMinimizer(""Genetic"");; min->Options().Print();; </pre>; The user can change a default option, like the population size to 500; and the steps to 60 by doing:; <pre>; ROOT::Math::MinimizerOptions::Default(""Genetic"").SetValue(""PopSize"",500);; ROOT::Math::MinimizerOptions::Default(""Genetic"").SetValue(""Steps"",60);; </pre>. END_HTML. ",MatchSource.DOCS,math/genetic/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genetic/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/math/genetic/doc/index.txt:362,Modifiability,plugin,plugin,362,"This directory contains the ROOT::Math::GeneticMinimizer class; BEGIN_HTML; The GeneticMinimizer class is used to implement a genetic minimizer algorithm.; The algorithm is based on an algorithm implemented in the TMVA package; (TMVA::GeneticAlgorithm class).; <p>; The ROOT::Math:GeneticMinimizer class implements the; ROOT::Math::Minimizer interface, as a new plugin with name ""Genetic"".; The class can be used when fitting histograms or graph by selecting it; as default minimizer. This can be done via:; <pre>; ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""Genetic"");; </pre>; Via the MinimizerOptions, one can control the possible options for the; class. These are described in the TMVA user guide, Option Table 7.; A list of the default options can be obtained by doing:; <pre>; ROOT::Math::Minimizer * min =ROOT::Math::Factory::CreateMinimizer(""Genetic"");; min->Options().Print();; </pre>; The user can change a default option, like the population size to 500; and the steps to 60 by doing:; <pre>; ROOT::Math::MinimizerOptions::Default(""Genetic"").SetValue(""PopSize"",500);; ROOT::Math::MinimizerOptions::Default(""Genetic"").SetValue(""Steps"",60);; </pre>. END_HTML. ",MatchSource.DOCS,math/genetic/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genetic/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/math/genetic/doc/index.txt:702,Usability,guid,guide,702,"This directory contains the ROOT::Math::GeneticMinimizer class; BEGIN_HTML; The GeneticMinimizer class is used to implement a genetic minimizer algorithm.; The algorithm is based on an algorithm implemented in the TMVA package; (TMVA::GeneticAlgorithm class).; <p>; The ROOT::Math:GeneticMinimizer class implements the; ROOT::Math::Minimizer interface, as a new plugin with name ""Genetic"".; The class can be used when fitting histograms or graph by selecting it; as default minimizer. This can be done via:; <pre>; ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""Genetic"");; </pre>; Via the MinimizerOptions, one can control the possible options for the; class. These are described in the TMVA user guide, Option Table 7.; A list of the default options can be obtained by doing:; <pre>; ROOT::Math::Minimizer * min =ROOT::Math::Factory::CreateMinimizer(""Genetic"");; min->Options().Print();; </pre>; The user can change a default option, like the population size to 500; and the steps to 60 by doing:; <pre>; ROOT::Math::MinimizerOptions::Default(""Genetic"").SetValue(""PopSize"",500);; ROOT::Math::MinimizerOptions::Default(""Genetic"").SetValue(""Steps"",60);; </pre>. END_HTML. ",MatchSource.DOCS,math/genetic/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genetic/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/math/genetic/test/CMakeLists.txt:282,Testability,test,tests,282,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(genetic-tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread Genetic). set(TestGeneticSource; testGAMinimizer.cxx; GAMinTutorial.cxx). #---Build and add all the defined test in the list---------------; foreach(file ${TestGeneticSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(genetic-${testname} COMMAND ${testname}); endforeach(); ",MatchSource.DOCS,math/genetic/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genetic/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genetic/test/CMakeLists.txt:471,Testability,Test,TestGeneticSource,471,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(genetic-tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread Genetic). set(TestGeneticSource; testGAMinimizer.cxx; GAMinTutorial.cxx). #---Build and add all the defined test in the list---------------; foreach(file ${TestGeneticSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(genetic-${testname} COMMAND ${testname}); endforeach(); ",MatchSource.DOCS,math/genetic/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genetic/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genetic/test/CMakeLists.txt:490,Testability,test,testGAMinimizer,490,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(genetic-tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread Genetic). set(TestGeneticSource; testGAMinimizer.cxx; GAMinTutorial.cxx). #---Build and add all the defined test in the list---------------; foreach(file ${TestGeneticSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(genetic-${testname} COMMAND ${testname}); endforeach(); ",MatchSource.DOCS,math/genetic/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genetic/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genetic/test/CMakeLists.txt:565,Testability,test,test,565,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(genetic-tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread Genetic). set(TestGeneticSource; testGAMinimizer.cxx; GAMinTutorial.cxx). #---Build and add all the defined test in the list---------------; foreach(file ${TestGeneticSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(genetic-${testname} COMMAND ${testname}); endforeach(); ",MatchSource.DOCS,math/genetic/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genetic/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genetic/test/CMakeLists.txt:613,Testability,Test,TestGeneticSource,613,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(genetic-tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread Genetic). set(TestGeneticSource; testGAMinimizer.cxx; GAMinTutorial.cxx). #---Build and add all the defined test in the list---------------; foreach(file ${TestGeneticSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(genetic-${testname} COMMAND ${testname}); endforeach(); ",MatchSource.DOCS,math/genetic/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genetic/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genetic/test/CMakeLists.txt:657,Testability,test,testname,657,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(genetic-tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread Genetic). set(TestGeneticSource; testGAMinimizer.cxx; GAMinTutorial.cxx). #---Build and add all the defined test in the list---------------; foreach(file ${TestGeneticSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(genetic-${testname} COMMAND ${testname}); endforeach(); ",MatchSource.DOCS,math/genetic/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genetic/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genetic/test/CMakeLists.txt:702,Testability,test,testname,702,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(genetic-tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread Genetic). set(TestGeneticSource; testGAMinimizer.cxx; GAMinTutorial.cxx). #---Build and add all the defined test in the list---------------; foreach(file ${TestGeneticSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(genetic-${testname} COMMAND ${testname}); endforeach(); ",MatchSource.DOCS,math/genetic/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genetic/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genetic/test/CMakeLists.txt:769,Testability,test,testname,769,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(genetic-tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread Genetic). set(TestGeneticSource; testGAMinimizer.cxx; GAMinTutorial.cxx). #---Build and add all the defined test in the list---------------; foreach(file ${TestGeneticSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(genetic-${testname} COMMAND ${testname}); endforeach(); ",MatchSource.DOCS,math/genetic/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genetic/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genetic/test/CMakeLists.txt:789,Testability,test,testname,789,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(genetic-tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread Genetic). set(TestGeneticSource; testGAMinimizer.cxx; GAMinTutorial.cxx). #---Build and add all the defined test in the list---------------; foreach(file ${TestGeneticSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(genetic-${testname} COMMAND ${testname}); endforeach(); ",MatchSource.DOCS,math/genetic/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genetic/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt:321,Testability,test,test-genvector-rotationApplication,321,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN. ROOT_EXECUTABLE(rotationApplication rotationApplication.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-rotationApplication COMMAND rotationApplication). ROOT_EXECUTABLE(boost testBoost.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-boost COMMAND boost). ROOT_EXECUTABLE(testGenvector testGenVector.cxx LIBRARIES GenVector Hist Smatrix); ROOT_ADD_TEST(test-genvector-genvector COMMAND testGenvector). ROOT_EXECUTABLE(testVectorIO testVectorIO.cxx LIBRARIES GenVector Tree Hist Gpad Physics); ROOT_ADD_TEST(test-genvector-vectorio COMMAND testVectorIO; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/Track.h). ROOT_EXECUTABLE(coordinates3D coordinates3D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates3D COMMAND coordinates3D). ROOT_EXECUTABLE(coordinates4D coordinates4D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates4D COMMAND coordinates4D); ",MatchSource.DOCS,math/genvector/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt:408,Testability,test,testBoost,408,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN. ROOT_EXECUTABLE(rotationApplication rotationApplication.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-rotationApplication COMMAND rotationApplication). ROOT_EXECUTABLE(boost testBoost.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-boost COMMAND boost). ROOT_EXECUTABLE(testGenvector testGenVector.cxx LIBRARIES GenVector Hist Smatrix); ROOT_ADD_TEST(test-genvector-genvector COMMAND testGenvector). ROOT_EXECUTABLE(testVectorIO testVectorIO.cxx LIBRARIES GenVector Tree Hist Gpad Physics); ROOT_ADD_TEST(test-genvector-vectorio COMMAND testVectorIO; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/Track.h). ROOT_EXECUTABLE(coordinates3D coordinates3D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates3D COMMAND coordinates3D). ROOT_EXECUTABLE(coordinates4D coordinates4D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates4D COMMAND coordinates4D); ",MatchSource.DOCS,math/genvector/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt:458,Testability,test,test-genvector-boost,458,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN. ROOT_EXECUTABLE(rotationApplication rotationApplication.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-rotationApplication COMMAND rotationApplication). ROOT_EXECUTABLE(boost testBoost.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-boost COMMAND boost). ROOT_EXECUTABLE(testGenvector testGenVector.cxx LIBRARIES GenVector Hist Smatrix); ROOT_ADD_TEST(test-genvector-genvector COMMAND testGenvector). ROOT_EXECUTABLE(testVectorIO testVectorIO.cxx LIBRARIES GenVector Tree Hist Gpad Physics); ROOT_ADD_TEST(test-genvector-vectorio COMMAND testVectorIO; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/Track.h). ROOT_EXECUTABLE(coordinates3D coordinates3D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates3D COMMAND coordinates3D). ROOT_EXECUTABLE(coordinates4D coordinates4D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates4D COMMAND coordinates4D); ",MatchSource.DOCS,math/genvector/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt:511,Testability,test,testGenvector,511,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN. ROOT_EXECUTABLE(rotationApplication rotationApplication.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-rotationApplication COMMAND rotationApplication). ROOT_EXECUTABLE(boost testBoost.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-boost COMMAND boost). ROOT_EXECUTABLE(testGenvector testGenVector.cxx LIBRARIES GenVector Hist Smatrix); ROOT_ADD_TEST(test-genvector-genvector COMMAND testGenvector). ROOT_EXECUTABLE(testVectorIO testVectorIO.cxx LIBRARIES GenVector Tree Hist Gpad Physics); ROOT_ADD_TEST(test-genvector-vectorio COMMAND testVectorIO; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/Track.h). ROOT_EXECUTABLE(coordinates3D coordinates3D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates3D COMMAND coordinates3D). ROOT_EXECUTABLE(coordinates4D coordinates4D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates4D COMMAND coordinates4D); ",MatchSource.DOCS,math/genvector/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt:525,Testability,test,testGenVector,525,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN. ROOT_EXECUTABLE(rotationApplication rotationApplication.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-rotationApplication COMMAND rotationApplication). ROOT_EXECUTABLE(boost testBoost.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-boost COMMAND boost). ROOT_EXECUTABLE(testGenvector testGenVector.cxx LIBRARIES GenVector Hist Smatrix); ROOT_ADD_TEST(test-genvector-genvector COMMAND testGenvector). ROOT_EXECUTABLE(testVectorIO testVectorIO.cxx LIBRARIES GenVector Tree Hist Gpad Physics); ROOT_ADD_TEST(test-genvector-vectorio COMMAND testVectorIO; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/Track.h). ROOT_EXECUTABLE(coordinates3D coordinates3D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates3D COMMAND coordinates3D). ROOT_EXECUTABLE(coordinates4D coordinates4D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates4D COMMAND coordinates4D); ",MatchSource.DOCS,math/genvector/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt:592,Testability,test,test-genvector-genvector,592,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN. ROOT_EXECUTABLE(rotationApplication rotationApplication.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-rotationApplication COMMAND rotationApplication). ROOT_EXECUTABLE(boost testBoost.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-boost COMMAND boost). ROOT_EXECUTABLE(testGenvector testGenVector.cxx LIBRARIES GenVector Hist Smatrix); ROOT_ADD_TEST(test-genvector-genvector COMMAND testGenvector). ROOT_EXECUTABLE(testVectorIO testVectorIO.cxx LIBRARIES GenVector Tree Hist Gpad Physics); ROOT_ADD_TEST(test-genvector-vectorio COMMAND testVectorIO; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/Track.h). ROOT_EXECUTABLE(coordinates3D coordinates3D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates3D COMMAND coordinates3D). ROOT_EXECUTABLE(coordinates4D coordinates4D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates4D COMMAND coordinates4D); ",MatchSource.DOCS,math/genvector/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt:625,Testability,test,testGenvector,625,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN. ROOT_EXECUTABLE(rotationApplication rotationApplication.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-rotationApplication COMMAND rotationApplication). ROOT_EXECUTABLE(boost testBoost.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-boost COMMAND boost). ROOT_EXECUTABLE(testGenvector testGenVector.cxx LIBRARIES GenVector Hist Smatrix); ROOT_ADD_TEST(test-genvector-genvector COMMAND testGenvector). ROOT_EXECUTABLE(testVectorIO testVectorIO.cxx LIBRARIES GenVector Tree Hist Gpad Physics); ROOT_ADD_TEST(test-genvector-vectorio COMMAND testVectorIO; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/Track.h). ROOT_EXECUTABLE(coordinates3D coordinates3D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates3D COMMAND coordinates3D). ROOT_EXECUTABLE(coordinates4D coordinates4D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates4D COMMAND coordinates4D); ",MatchSource.DOCS,math/genvector/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt:657,Testability,test,testVectorIO,657,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN. ROOT_EXECUTABLE(rotationApplication rotationApplication.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-rotationApplication COMMAND rotationApplication). ROOT_EXECUTABLE(boost testBoost.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-boost COMMAND boost). ROOT_EXECUTABLE(testGenvector testGenVector.cxx LIBRARIES GenVector Hist Smatrix); ROOT_ADD_TEST(test-genvector-genvector COMMAND testGenvector). ROOT_EXECUTABLE(testVectorIO testVectorIO.cxx LIBRARIES GenVector Tree Hist Gpad Physics); ROOT_ADD_TEST(test-genvector-vectorio COMMAND testVectorIO; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/Track.h). ROOT_EXECUTABLE(coordinates3D coordinates3D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates3D COMMAND coordinates3D). ROOT_EXECUTABLE(coordinates4D coordinates4D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates4D COMMAND coordinates4D); ",MatchSource.DOCS,math/genvector/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt:670,Testability,test,testVectorIO,670,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN. ROOT_EXECUTABLE(rotationApplication rotationApplication.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-rotationApplication COMMAND rotationApplication). ROOT_EXECUTABLE(boost testBoost.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-boost COMMAND boost). ROOT_EXECUTABLE(testGenvector testGenVector.cxx LIBRARIES GenVector Hist Smatrix); ROOT_ADD_TEST(test-genvector-genvector COMMAND testGenvector). ROOT_EXECUTABLE(testVectorIO testVectorIO.cxx LIBRARIES GenVector Tree Hist Gpad Physics); ROOT_ADD_TEST(test-genvector-vectorio COMMAND testVectorIO; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/Track.h). ROOT_EXECUTABLE(coordinates3D coordinates3D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates3D COMMAND coordinates3D). ROOT_EXECUTABLE(coordinates4D coordinates4D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates4D COMMAND coordinates4D); ",MatchSource.DOCS,math/genvector/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt:746,Testability,test,test-genvector-vectorio,746,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN. ROOT_EXECUTABLE(rotationApplication rotationApplication.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-rotationApplication COMMAND rotationApplication). ROOT_EXECUTABLE(boost testBoost.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-boost COMMAND boost). ROOT_EXECUTABLE(testGenvector testGenVector.cxx LIBRARIES GenVector Hist Smatrix); ROOT_ADD_TEST(test-genvector-genvector COMMAND testGenvector). ROOT_EXECUTABLE(testVectorIO testVectorIO.cxx LIBRARIES GenVector Tree Hist Gpad Physics); ROOT_ADD_TEST(test-genvector-vectorio COMMAND testVectorIO; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/Track.h). ROOT_EXECUTABLE(coordinates3D coordinates3D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates3D COMMAND coordinates3D). ROOT_EXECUTABLE(coordinates4D coordinates4D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates4D COMMAND coordinates4D); ",MatchSource.DOCS,math/genvector/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt:778,Testability,test,testVectorIO,778,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN. ROOT_EXECUTABLE(rotationApplication rotationApplication.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-rotationApplication COMMAND rotationApplication). ROOT_EXECUTABLE(boost testBoost.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-boost COMMAND boost). ROOT_EXECUTABLE(testGenvector testGenVector.cxx LIBRARIES GenVector Hist Smatrix); ROOT_ADD_TEST(test-genvector-genvector COMMAND testGenvector). ROOT_EXECUTABLE(testVectorIO testVectorIO.cxx LIBRARIES GenVector Tree Hist Gpad Physics); ROOT_ADD_TEST(test-genvector-vectorio COMMAND testVectorIO; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/Track.h). ROOT_EXECUTABLE(coordinates3D coordinates3D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates3D COMMAND coordinates3D). ROOT_EXECUTABLE(coordinates4D coordinates4D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates4D COMMAND coordinates4D); ",MatchSource.DOCS,math/genvector/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt:931,Testability,test,test-genvector-,931,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN. ROOT_EXECUTABLE(rotationApplication rotationApplication.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-rotationApplication COMMAND rotationApplication). ROOT_EXECUTABLE(boost testBoost.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-boost COMMAND boost). ROOT_EXECUTABLE(testGenvector testGenVector.cxx LIBRARIES GenVector Hist Smatrix); ROOT_ADD_TEST(test-genvector-genvector COMMAND testGenvector). ROOT_EXECUTABLE(testVectorIO testVectorIO.cxx LIBRARIES GenVector Tree Hist Gpad Physics); ROOT_ADD_TEST(test-genvector-vectorio COMMAND testVectorIO; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/Track.h). ROOT_EXECUTABLE(coordinates3D coordinates3D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates3D COMMAND coordinates3D). ROOT_EXECUTABLE(coordinates4D coordinates4D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates4D COMMAND coordinates4D); ",MatchSource.DOCS,math/genvector/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt:1068,Testability,test,test-genvector-,1068,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN. ROOT_EXECUTABLE(rotationApplication rotationApplication.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-rotationApplication COMMAND rotationApplication). ROOT_EXECUTABLE(boost testBoost.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-boost COMMAND boost). ROOT_EXECUTABLE(testGenvector testGenVector.cxx LIBRARIES GenVector Hist Smatrix); ROOT_ADD_TEST(test-genvector-genvector COMMAND testGenvector). ROOT_EXECUTABLE(testVectorIO testVectorIO.cxx LIBRARIES GenVector Tree Hist Gpad Physics); ROOT_ADD_TEST(test-genvector-vectorio COMMAND testVectorIO; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/Track.h). ROOT_EXECUTABLE(coordinates3D coordinates3D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates3D COMMAND coordinates3D). ROOT_EXECUTABLE(coordinates4D coordinates4D.cxx LIBRARIES GenVector); ROOT_ADD_TEST(test-genvector-coordinates4D COMMAND coordinates4D); ",MatchSource.DOCS,math/genvector/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:1620,Integrability,DEPEND,DEPENDENCIES,1620,FuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.cxx stress/testGenVector.cxx; stress/testStat.cxx stress/testSVector.cxx stress/testVector.cxx stress/testVector34.cxx; stress/TestHelper.cxx; LIBRARIES Core MathCore Hist RIO Tree GenVector). ROOT_ADD_GTEST(GradientUnit testGradient.cxx LIBRARIES Core MathCore Hist ). ROOT_ADD_GTEST(GradientFittingUnit testGradientFitting.cxx LIBRARIES Core MathCore Hist). ROOT_ADD_GTEST(MulmodUnitOpt mulmod_opt.cxx); ROOT_ADD_GTEST(MulmodUnitNoInt128 mulmod_noint128.cxx); ROOT_ADD_GTEST(RanluxLCGUnit ranlux_lcg.cxx). ROOT_ADD_GTEST(RanluxppEngineTests RanluxppEngine.cxx; LIBRARIES Core MathCore). if(veccore AND vc); ROOT_ADD_GTEST(VectorizedTMathUnit,MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:1842,Modifiability,CONFIG,CONFIG,1842,grals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.cxx stress/testGenVector.cxx; stress/testStat.cxx stress/testSVector.cxx stress/testVector.cxx stress/testVector34.cxx; stress/TestHelper.cxx; LIBRARIES Core MathCore Hist RIO Tree GenVector). ROOT_ADD_GTEST(GradientUnit testGradient.cxx LIBRARIES Core MathCore Hist ). ROOT_ADD_GTEST(GradientFittingUnit testGradientFitting.cxx LIBRARIES Core MathCore Hist). ROOT_ADD_GTEST(MulmodUnitOpt mulmod_opt.cxx); ROOT_ADD_GTEST(MulmodUnitNoInt128 mulmod_noint128.cxx); ROOT_ADD_GTEST(RanluxLCGUnit ranlux_lcg.cxx). ROOT_ADD_GTEST(RanluxppEngineTests RanluxppEngine.cxx; LIBRARIES Core MathCore). if(veccore AND vc); ROOT_ADD_GTEST(VectorizedTMathUnit testVectorizedTMath.cxx; LIBRARIES Core MathCore); endif(). ROOT_ADD_GTEST(testRootFinder testRootFinder.cxx LIBRARIES ${Librari,MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:212,Testability,test,tests,212,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:336,Testability,Test,TestSource,336,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:348,Testability,test,testMathRandom,348,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:368,Testability,test,testTMath,368,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:383,Testability,test,testBinarySearch,383,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:405,Testability,test,testSortOrder,405,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:475,Testability,test,testIntegration,475,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:496,Testability,test,testSampleQuantiles,496,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:537,Testability,test,testkdTreeBinning,537,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:614,Testability,test,testSpecFuncErf,614,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:635,Testability,test,testSpecFuncGamma,635,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:658,Testability,test,testSpecFuncBeta,658,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:680,Testability,test,testSpecFuncBetaI,680,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:703,Testability,test,testSpecFuncSiCi,703,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:725,Testability,test,testIntegrationMultiDim,725,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:754,Testability,test,testAnalyticalIntegrals,754,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:783,Testability,test,testTStatistic,783,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:875,Testability,test,testBinnedFitExecPolicy,875,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:908,Testability,test,testFit,908,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:925,Testability,test,testGraphFit,925,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:947,Testability,test,testLogLExecPolicy,947,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:975,Testability,test,testMinim,975,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathcore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree Minuit2; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.",MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:1163,Testability,test,test,1163,; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.cxx stress/testGenVector.cxx; stress/testStat.cxx stress/testSVector.cxx stress/testVector.cxx stress/testVector34.cxx; stress/TestHelper.cxx; LIBRARIES Core MathCore Hist RIO Tree GenVector). ROOT_ADD_GTEST(GradientUnit testGradient.cxx LIBRARIES Core MathCore Hist ). ROOT_ADD_GT,MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:1211,Testability,Test,TestSource,1211,; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.cxx stress/testGenVector.cxx; stress/testStat.cxx stress/testSVector.cxx stress/testVector.cxx stress/testVector34.cxx; stress/TestHelper.cxx; LIBRARIES Core MathCore Hist RIO Tree GenVector). ROOT_ADD_GTEST(GradientUnit testGradient.cxx LIBRARIES Core MathCore Hist ). ROOT_ADD_GT,MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:1248,Testability,test,testname,1248,; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.cxx stress/testGenVector.cxx; stress/testStat.cxx stress/testSVector.cxx stress/testVector.cxx stress/testVector34.cxx; stress/TestHelper.cxx; LIBRARIES Core MathCore Hist RIO Tree GenVector). ROOT_ADD_GTEST(GradientUnit testGradient.cxx LIBRARIES Core MathCore Hist ). ROOT_ADD_GT,MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:1293,Testability,test,testname,1293,; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.cxx stress/testGenVector.cxx; stress/testStat.cxx stress/testSVector.cxx stress/testVector.cxx stress/testVector34.cxx; stress/TestHelper.cxx; LIBRARIES Core MathCore Hist RIO Tree GenVector). ROOT_ADD_GTEST(GradientUnit testGradient.cxx LIBRARIES Core MathCore Hist ). ROOT_ADD_GT,MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:1361,Testability,test,testname,1361,; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.cxx stress/testGenVector.cxx; stress/testStat.cxx stress/testSVector.cxx stress/testVector.cxx stress/testVector34.cxx; stress/TestHelper.cxx; LIBRARIES Core MathCore Hist RIO Tree GenVector). ROOT_ADD_GTEST(GradientUnit testGradient.cxx LIBRARIES Core MathCore Hist ). ROOT_ADD_GT,MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:1381,Testability,test,testname,1381,; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.cxx stress/testGenVector.cxx; stress/testStat.cxx stress/testSVector.cxx stress/testVector.cxx stress/testVector34.cxx; stress/TestHelper.cxx; LIBRARIES Core MathCore Hist RIO Tree GenVector). ROOT_ADD_GTEST(GradientUnit testGradient.cxx LIBRARIES Core MathCore Hist ). ROOT_ADD_GT,MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:1402,Testability,test,testname,1402,; Rint Postscript Matrix Physics MathCore Thread). set(TestSource; testMathRandom.cxx; testTMath.cxx; testBinarySearch.cxx; testSortOrder.cxx; stressGoFTest.cxx; stressTMath.cxx; stressTF1.cxx; testIntegration.cxx; testSampleQuantiles.cxx; kDTreeTest.cxx; testkdTreeBinning.cxx; newKDTreeTest.cxx; binarySearchTime.cxx; stdsort.cxx; testSpecFuncErf.cxx; testSpecFuncGamma.cxx; testSpecFuncBeta.cxx; testSpecFuncBetaI.cxx; testSpecFuncSiCi.cxx; testIntegrationMultiDim.cxx; testAnalyticalIntegrals.cxx; testTStatistic.cxx; fit/SparseDataComparer.cxx; fit/SparseFit3.cxx; fit/SparseFit4.cxx; fit/testBinnedFitExecPolicy.cxx; fit/testFit.cxx; fit/testGraphFit.cxx; fit/testLogLExecPolicy.cxx; fit/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.cxx stress/testGenVector.cxx; stress/testStat.cxx stress/testSVector.cxx stress/testVector.cxx stress/testVector34.cxx; stress/TestHelper.cxx; LIBRARIES Core MathCore Hist RIO Tree GenVector). ROOT_ADD_GTEST(GradientUnit testGradient.cxx LIBRARIES Core MathCore Hist ). ROOT_ADD_GT,MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:1989,Testability,test,testSMatrix,1989,/testMinim.cxx). if(mathmore); list(APPEND Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.cxx stress/testGenVector.cxx; stress/testStat.cxx stress/testSVector.cxx stress/testVector.cxx stress/testVector34.cxx; stress/TestHelper.cxx; LIBRARIES Core MathCore Hist RIO Tree GenVector). ROOT_ADD_GTEST(GradientUnit testGradient.cxx LIBRARIES Core MathCore Hist ). ROOT_ADD_GTEST(GradientFittingUnit testGradientFitting.cxx LIBRARIES Core MathCore Hist). ROOT_ADD_GTEST(MulmodUnitOpt mulmod_opt.cxx); ROOT_ADD_GTEST(MulmodUnitNoInt128 mulmod_noint128.cxx); ROOT_ADD_GTEST(RanluxLCGUnit ranlux_lcg.cxx). ROOT_ADD_GTEST(RanluxppEngineTests RanluxppEngine.cxx; LIBRARIES Core MathCore). if(veccore AND vc); ROOT_ADD_GTEST(VectorizedTMathUnit testVectorizedTMath.cxx; LIBRARIES Core MathCore); endif(). ROOT_ADD_GTEST(testRootFinder testRootFinder.cxx LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testKahan testKahan.cxx LIBRARIES Core MathCore); ROOT_ADD_GTEST(testDelaunay2D testDelaunay2D.cxx LIBRARIES Core MathCore). if(clad); ROOT_ADD_GTEST(CladDerivatorTests CladDerivat,MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:2012,Testability,test,testGenVector,2012,END Libraries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.cxx stress/testGenVector.cxx; stress/testStat.cxx stress/testSVector.cxx stress/testVector.cxx stress/testVector34.cxx; stress/TestHelper.cxx; LIBRARIES Core MathCore Hist RIO Tree GenVector). ROOT_ADD_GTEST(GradientUnit testGradient.cxx LIBRARIES Core MathCore Hist ). ROOT_ADD_GTEST(GradientFittingUnit testGradientFitting.cxx LIBRARIES Core MathCore Hist). ROOT_ADD_GTEST(MulmodUnitOpt mulmod_opt.cxx); ROOT_ADD_GTEST(MulmodUnitNoInt128 mulmod_noint128.cxx); ROOT_ADD_GTEST(RanluxLCGUnit ranlux_lcg.cxx). ROOT_ADD_GTEST(RanluxppEngineTests RanluxppEngine.cxx; LIBRARIES Core MathCore). if(veccore AND vc); ROOT_ADD_GTEST(VectorizedTMathUnit testVectorizedTMath.cxx; LIBRARIES Core MathCore); endif(). ROOT_ADD_GTEST(testRootFinder testRootFinder.cxx LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testKahan testKahan.cxx LIBRARIES Core MathCore); ROOT_ADD_GTEST(testDelaunay2D testDelaunay2D.cxx LIBRARIES Core MathCore). if(clad); ROOT_ADD_GTEST(CladDerivatorTests CladDerivatorTests.cxx LIBRARIES Core MathCore); en,MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:2038,Testability,test,testStat,2038,aries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.cxx stress/testGenVector.cxx; stress/testStat.cxx stress/testSVector.cxx stress/testVector.cxx stress/testVector34.cxx; stress/TestHelper.cxx; LIBRARIES Core MathCore Hist RIO Tree GenVector). ROOT_ADD_GTEST(GradientUnit testGradient.cxx LIBRARIES Core MathCore Hist ). ROOT_ADD_GTEST(GradientFittingUnit testGradientFitting.cxx LIBRARIES Core MathCore Hist). ROOT_ADD_GTEST(MulmodUnitOpt mulmod_opt.cxx); ROOT_ADD_GTEST(MulmodUnitNoInt128 mulmod_noint128.cxx); ROOT_ADD_GTEST(RanluxLCGUnit ranlux_lcg.cxx). ROOT_ADD_GTEST(RanluxppEngineTests RanluxppEngine.cxx; LIBRARIES Core MathCore). if(veccore AND vc); ROOT_ADD_GTEST(VectorizedTMathUnit testVectorizedTMath.cxx; LIBRARIES Core MathCore); endif(). ROOT_ADD_GTEST(testRootFinder testRootFinder.cxx LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testKahan testKahan.cxx LIBRARIES Core MathCore); ROOT_ADD_GTEST(testDelaunay2D testDelaunay2D.cxx LIBRARIES Core MathCore). if(clad); ROOT_ADD_GTEST(CladDerivatorTests CladDerivatorTests.cxx LIBRARIES Core MathCore); endif(); ,MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:2058,Testability,test,testSVector,2058,aries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.cxx stress/testGenVector.cxx; stress/testStat.cxx stress/testSVector.cxx stress/testVector.cxx stress/testVector34.cxx; stress/TestHelper.cxx; LIBRARIES Core MathCore Hist RIO Tree GenVector). ROOT_ADD_GTEST(GradientUnit testGradient.cxx LIBRARIES Core MathCore Hist ). ROOT_ADD_GTEST(GradientFittingUnit testGradientFitting.cxx LIBRARIES Core MathCore Hist). ROOT_ADD_GTEST(MulmodUnitOpt mulmod_opt.cxx); ROOT_ADD_GTEST(MulmodUnitNoInt128 mulmod_noint128.cxx); ROOT_ADD_GTEST(RanluxLCGUnit ranlux_lcg.cxx). ROOT_ADD_GTEST(RanluxppEngineTests RanluxppEngine.cxx; LIBRARIES Core MathCore). if(veccore AND vc); ROOT_ADD_GTEST(VectorizedTMathUnit testVectorizedTMath.cxx; LIBRARIES Core MathCore); endif(). ROOT_ADD_GTEST(testRootFinder testRootFinder.cxx LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testKahan testKahan.cxx LIBRARIES Core MathCore); ROOT_ADD_GTEST(testDelaunay2D testDelaunay2D.cxx LIBRARIES Core MathCore). if(clad); ROOT_ADD_GTEST(CladDerivatorTests CladDerivatorTests.cxx LIBRARIES Core MathCore); endif(); ,MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:2081,Testability,test,testVector,2081,aries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.cxx stress/testGenVector.cxx; stress/testStat.cxx stress/testSVector.cxx stress/testVector.cxx stress/testVector34.cxx; stress/TestHelper.cxx; LIBRARIES Core MathCore Hist RIO Tree GenVector). ROOT_ADD_GTEST(GradientUnit testGradient.cxx LIBRARIES Core MathCore Hist ). ROOT_ADD_GTEST(GradientFittingUnit testGradientFitting.cxx LIBRARIES Core MathCore Hist). ROOT_ADD_GTEST(MulmodUnitOpt mulmod_opt.cxx); ROOT_ADD_GTEST(MulmodUnitNoInt128 mulmod_noint128.cxx); ROOT_ADD_GTEST(RanluxLCGUnit ranlux_lcg.cxx). ROOT_ADD_GTEST(RanluxppEngineTests RanluxppEngine.cxx; LIBRARIES Core MathCore). if(veccore AND vc); ROOT_ADD_GTEST(VectorizedTMathUnit testVectorizedTMath.cxx; LIBRARIES Core MathCore); endif(). ROOT_ADD_GTEST(testRootFinder testRootFinder.cxx LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testKahan testKahan.cxx LIBRARIES Core MathCore); ROOT_ADD_GTEST(testDelaunay2D testDelaunay2D.cxx LIBRARIES Core MathCore). if(clad); ROOT_ADD_GTEST(CladDerivatorTests CladDerivatorTests.cxx LIBRARIES Core MathCore); endif(); ,MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:2128,Testability,Test,TestHelper,2128,aries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.cxx stress/testGenVector.cxx; stress/testStat.cxx stress/testSVector.cxx stress/testVector.cxx stress/testVector34.cxx; stress/TestHelper.cxx; LIBRARIES Core MathCore Hist RIO Tree GenVector). ROOT_ADD_GTEST(GradientUnit testGradient.cxx LIBRARIES Core MathCore Hist ). ROOT_ADD_GTEST(GradientFittingUnit testGradientFitting.cxx LIBRARIES Core MathCore Hist). ROOT_ADD_GTEST(MulmodUnitOpt mulmod_opt.cxx); ROOT_ADD_GTEST(MulmodUnitNoInt128 mulmod_noint128.cxx); ROOT_ADD_GTEST(RanluxLCGUnit ranlux_lcg.cxx). ROOT_ADD_GTEST(RanluxppEngineTests RanluxppEngine.cxx; LIBRARIES Core MathCore). if(veccore AND vc); ROOT_ADD_GTEST(VectorizedTMathUnit testVectorizedTMath.cxx; LIBRARIES Core MathCore); endif(). ROOT_ADD_GTEST(testRootFinder testRootFinder.cxx LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testKahan testKahan.cxx LIBRARIES Core MathCore); ROOT_ADD_GTEST(testDelaunay2D testDelaunay2D.cxx LIBRARIES Core MathCore). if(clad); ROOT_ADD_GTEST(CladDerivatorTests CladDerivatorTests.cxx LIBRARIES Core MathCore); endif(); ,MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:2222,Testability,test,testGradient,2222,aries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.cxx stress/testGenVector.cxx; stress/testStat.cxx stress/testSVector.cxx stress/testVector.cxx stress/testVector34.cxx; stress/TestHelper.cxx; LIBRARIES Core MathCore Hist RIO Tree GenVector). ROOT_ADD_GTEST(GradientUnit testGradient.cxx LIBRARIES Core MathCore Hist ). ROOT_ADD_GTEST(GradientFittingUnit testGradientFitting.cxx LIBRARIES Core MathCore Hist). ROOT_ADD_GTEST(MulmodUnitOpt mulmod_opt.cxx); ROOT_ADD_GTEST(MulmodUnitNoInt128 mulmod_noint128.cxx); ROOT_ADD_GTEST(RanluxLCGUnit ranlux_lcg.cxx). ROOT_ADD_GTEST(RanluxppEngineTests RanluxppEngine.cxx; LIBRARIES Core MathCore). if(veccore AND vc); ROOT_ADD_GTEST(VectorizedTMathUnit testVectorizedTMath.cxx; LIBRARIES Core MathCore); endif(). ROOT_ADD_GTEST(testRootFinder testRootFinder.cxx LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testKahan testKahan.cxx LIBRARIES Core MathCore); ROOT_ADD_GTEST(testDelaunay2D testDelaunay2D.cxx LIBRARIES Core MathCore). if(clad); ROOT_ADD_GTEST(CladDerivatorTests CladDerivatorTests.cxx LIBRARIES Core MathCore); endif(); ,MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:2306,Testability,test,testGradientFitting,2306,aries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.cxx stress/testGenVector.cxx; stress/testStat.cxx stress/testSVector.cxx stress/testVector.cxx stress/testVector34.cxx; stress/TestHelper.cxx; LIBRARIES Core MathCore Hist RIO Tree GenVector). ROOT_ADD_GTEST(GradientUnit testGradient.cxx LIBRARIES Core MathCore Hist ). ROOT_ADD_GTEST(GradientFittingUnit testGradientFitting.cxx LIBRARIES Core MathCore Hist). ROOT_ADD_GTEST(MulmodUnitOpt mulmod_opt.cxx); ROOT_ADD_GTEST(MulmodUnitNoInt128 mulmod_noint128.cxx); ROOT_ADD_GTEST(RanluxLCGUnit ranlux_lcg.cxx). ROOT_ADD_GTEST(RanluxppEngineTests RanluxppEngine.cxx; LIBRARIES Core MathCore). if(veccore AND vc); ROOT_ADD_GTEST(VectorizedTMathUnit testVectorizedTMath.cxx; LIBRARIES Core MathCore); endif(). ROOT_ADD_GTEST(testRootFinder testRootFinder.cxx LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testKahan testKahan.cxx LIBRARIES Core MathCore); ROOT_ADD_GTEST(testDelaunay2D testDelaunay2D.cxx LIBRARIES Core MathCore). if(clad); ROOT_ADD_GTEST(CladDerivatorTests CladDerivatorTests.cxx LIBRARIES Core MathCore); endif(); ,MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:2645,Testability,test,testVectorizedTMath,2645,aries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.cxx stress/testGenVector.cxx; stress/testStat.cxx stress/testSVector.cxx stress/testVector.cxx stress/testVector34.cxx; stress/TestHelper.cxx; LIBRARIES Core MathCore Hist RIO Tree GenVector). ROOT_ADD_GTEST(GradientUnit testGradient.cxx LIBRARIES Core MathCore Hist ). ROOT_ADD_GTEST(GradientFittingUnit testGradientFitting.cxx LIBRARIES Core MathCore Hist). ROOT_ADD_GTEST(MulmodUnitOpt mulmod_opt.cxx); ROOT_ADD_GTEST(MulmodUnitNoInt128 mulmod_noint128.cxx); ROOT_ADD_GTEST(RanluxLCGUnit ranlux_lcg.cxx). ROOT_ADD_GTEST(RanluxppEngineTests RanluxppEngine.cxx; LIBRARIES Core MathCore). if(veccore AND vc); ROOT_ADD_GTEST(VectorizedTMathUnit testVectorizedTMath.cxx; LIBRARIES Core MathCore); endif(). ROOT_ADD_GTEST(testRootFinder testRootFinder.cxx LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testKahan testKahan.cxx LIBRARIES Core MathCore); ROOT_ADD_GTEST(testDelaunay2D testDelaunay2D.cxx LIBRARIES Core MathCore). if(clad); ROOT_ADD_GTEST(CladDerivatorTests CladDerivatorTests.cxx LIBRARIES Core MathCore); endif(); ,MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:2720,Testability,test,testRootFinder,2720,aries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.cxx stress/testGenVector.cxx; stress/testStat.cxx stress/testSVector.cxx stress/testVector.cxx stress/testVector34.cxx; stress/TestHelper.cxx; LIBRARIES Core MathCore Hist RIO Tree GenVector). ROOT_ADD_GTEST(GradientUnit testGradient.cxx LIBRARIES Core MathCore Hist ). ROOT_ADD_GTEST(GradientFittingUnit testGradientFitting.cxx LIBRARIES Core MathCore Hist). ROOT_ADD_GTEST(MulmodUnitOpt mulmod_opt.cxx); ROOT_ADD_GTEST(MulmodUnitNoInt128 mulmod_noint128.cxx); ROOT_ADD_GTEST(RanluxLCGUnit ranlux_lcg.cxx). ROOT_ADD_GTEST(RanluxppEngineTests RanluxppEngine.cxx; LIBRARIES Core MathCore). if(veccore AND vc); ROOT_ADD_GTEST(VectorizedTMathUnit testVectorizedTMath.cxx; LIBRARIES Core MathCore); endif(). ROOT_ADD_GTEST(testRootFinder testRootFinder.cxx LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testKahan testKahan.cxx LIBRARIES Core MathCore); ROOT_ADD_GTEST(testDelaunay2D testDelaunay2D.cxx LIBRARIES Core MathCore). if(clad); ROOT_ADD_GTEST(CladDerivatorTests CladDerivatorTests.cxx LIBRARIES Core MathCore); endif(); ,MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:2735,Testability,test,testRootFinder,2735,aries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.cxx stress/testGenVector.cxx; stress/testStat.cxx stress/testSVector.cxx stress/testVector.cxx stress/testVector34.cxx; stress/TestHelper.cxx; LIBRARIES Core MathCore Hist RIO Tree GenVector). ROOT_ADD_GTEST(GradientUnit testGradient.cxx LIBRARIES Core MathCore Hist ). ROOT_ADD_GTEST(GradientFittingUnit testGradientFitting.cxx LIBRARIES Core MathCore Hist). ROOT_ADD_GTEST(MulmodUnitOpt mulmod_opt.cxx); ROOT_ADD_GTEST(MulmodUnitNoInt128 mulmod_noint128.cxx); ROOT_ADD_GTEST(RanluxLCGUnit ranlux_lcg.cxx). ROOT_ADD_GTEST(RanluxppEngineTests RanluxppEngine.cxx; LIBRARIES Core MathCore). if(veccore AND vc); ROOT_ADD_GTEST(VectorizedTMathUnit testVectorizedTMath.cxx; LIBRARIES Core MathCore); endif(). ROOT_ADD_GTEST(testRootFinder testRootFinder.cxx LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testKahan testKahan.cxx LIBRARIES Core MathCore); ROOT_ADD_GTEST(testDelaunay2D testDelaunay2D.cxx LIBRARIES Core MathCore). if(clad); ROOT_ADD_GTEST(CladDerivatorTests CladDerivatorTests.cxx LIBRARIES Core MathCore); endif(); ,MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:2794,Testability,test,testKahan,2794,aries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.cxx stress/testGenVector.cxx; stress/testStat.cxx stress/testSVector.cxx stress/testVector.cxx stress/testVector34.cxx; stress/TestHelper.cxx; LIBRARIES Core MathCore Hist RIO Tree GenVector). ROOT_ADD_GTEST(GradientUnit testGradient.cxx LIBRARIES Core MathCore Hist ). ROOT_ADD_GTEST(GradientFittingUnit testGradientFitting.cxx LIBRARIES Core MathCore Hist). ROOT_ADD_GTEST(MulmodUnitOpt mulmod_opt.cxx); ROOT_ADD_GTEST(MulmodUnitNoInt128 mulmod_noint128.cxx); ROOT_ADD_GTEST(RanluxLCGUnit ranlux_lcg.cxx). ROOT_ADD_GTEST(RanluxppEngineTests RanluxppEngine.cxx; LIBRARIES Core MathCore). if(veccore AND vc); ROOT_ADD_GTEST(VectorizedTMathUnit testVectorizedTMath.cxx; LIBRARIES Core MathCore); endif(). ROOT_ADD_GTEST(testRootFinder testRootFinder.cxx LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testKahan testKahan.cxx LIBRARIES Core MathCore); ROOT_ADD_GTEST(testDelaunay2D testDelaunay2D.cxx LIBRARIES Core MathCore). if(clad); ROOT_ADD_GTEST(CladDerivatorTests CladDerivatorTests.cxx LIBRARIES Core MathCore); endif(); ,MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt:2804,Testability,test,testKahan,2804,aries MathMore); endif(). if(r); add_definitions(-DROOT_HAS_R); list(APPEND Libraries RInterface); endif(). #---Build and add all the defined test in the list---------------; foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(mathcore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreUnitDict; NO_INSTALL_HEADERS; NO_SOURCES; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/stress/TrackMathCore.h; LINKDEF stress/TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix). if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreUnitDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreUnitDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreUnitDict.dll); endif(). ROOT_ADD_GTEST(stressMathCoreUnit stress/testSMatrix.cxx stress/testGenVector.cxx; stress/testStat.cxx stress/testSVector.cxx stress/testVector.cxx stress/testVector34.cxx; stress/TestHelper.cxx; LIBRARIES Core MathCore Hist RIO Tree GenVector). ROOT_ADD_GTEST(GradientUnit testGradient.cxx LIBRARIES Core MathCore Hist ). ROOT_ADD_GTEST(GradientFittingUnit testGradientFitting.cxx LIBRARIES Core MathCore Hist). ROOT_ADD_GTEST(MulmodUnitOpt mulmod_opt.cxx); ROOT_ADD_GTEST(MulmodUnitNoInt128 mulmod_noint128.cxx); ROOT_ADD_GTEST(RanluxLCGUnit ranlux_lcg.cxx). ROOT_ADD_GTEST(RanluxppEngineTests RanluxppEngine.cxx; LIBRARIES Core MathCore). if(veccore AND vc); ROOT_ADD_GTEST(VectorizedTMathUnit testVectorizedTMath.cxx; LIBRARIES Core MathCore); endif(). ROOT_ADD_GTEST(testRootFinder testRootFinder.cxx LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testKahan testKahan.cxx LIBRARIES Core MathCore); ROOT_ADD_GTEST(testDelaunay2D testDelaunay2D.cxx LIBRARIES Core MathCore). if(clad); ROOT_ADD_GTEST(CladDerivatorTests CladDerivatorTests.cxx LIBRARIES Core MathCore); endif(); ,MatchSource.DOCS,math/mathcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:212,Testability,test,tests,212,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:337,Testability,Test,TestMathMoreSource,337,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:357,Testability,test,testChebyshev,357,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:376,Testability,test,testPermute,376,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:393,Testability,test,testDerivation,393,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:413,Testability,test,testGSLIntegration,413,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:437,Testability,test,testMCIntegration,437,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:460,Testability,test,testGSLRootFinder,460,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:483,Testability,test,testMultiRootFinder,483,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:532,Testability,test,testInterpolation,532,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:555,Testability,test,testRandom,555,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:571,Testability,test,testRandomDist,571,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:591,Testability,test,testQuasiRandom,591,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:612,Testability,test,testSpecFunc,612,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:630,Testability,test,testStatFunc,630,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:648,Testability,test,testFunctor,648,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:665,Testability,test,testVavilov,665,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:928,Testability,test,tests,928,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:1066,Testability,test,test,1066,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:1114,Testability,Test,TestMathMoreSource,1114,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:1159,Testability,test,testname,1159,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:1204,Testability,test,testname,1204,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:1289,Testability,test,testname,1289,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:1309,Testability,test,testname,1309,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:1330,Testability,test,testname,1330,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:1398,Testability,test,testStress,1398,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:1480,Testability,test,testPolynomialRoots,1480,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt:1500,Testability,test,testPolynomialRoots,1500,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. project(mathmore-tests). set(Libraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics Thread MathCore MathMore). set(TestMathMoreSource; testChebyshev.cxx; testPermute.cxx; testDerivation.cxx; testGSLIntegration.cxx; testMCIntegration.cxx; testGSLRootFinder.cxx; testMultiRootFinder.cxx; testMinimization1D.cxx; testInterpolation.cxx; testRandom.cxx; testRandomDist.cxx; testQuasiRandom.cxx; testSpecFunc.cxx; testStatFunc.cxx; testFunctor.cxx; testVavilov.cxx; simanTSP.cxx). set(testFunctor_LABELS longtest); set(testPermute_LABELS longtest); set(testRandom_LABELS longtest); set(testMCIntegration_LABELS longtest). if(unuran); list(APPEND Libraries Unuran); add_definitions(-DHAVE_UNURAN); endif(). #some tests requires directly gsl; include_directories(${GSL_INCLUDE_DIR}); add_definitions(-DHAVE_ROOTLIBS). #---Build and add all the defined test in the list---------------; foreach(file ${TestMathMoreSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${GSL_LIBRARIES} ${Libraries}); ROOT_ADD_TEST(mathmore-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). ROOT_ADD_GTEST(stressMathMoreUnit testStress.cxx StatFunction.cxx LIBRARIES Core MathCore MathMore); ROOT_ADD_GTEST(testPolynomialRoots testPolynomialRoots.cxx LIBRARIES Core MathCore MathMore); ",MatchSource.DOCS,math/mathmore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/matrix/test/CMakeLists.txt:213,Testability,test,testMatrixTSparse,213,"#Copyright(C) 1995 - 2023, Rene Brun and Fons Rademakers.; #All rights reserved.; #; #For the licensing terms see $ROOTSYS / LICENSE.; #For the list of contributors see $ROOTSYS / README / CREDITS. ROOT_ADD_GTEST(testMatrixTSparse testMatrixTSparse.cxx LIBRARIES Matrix); ROOT_ADD_GTEST(testMatrixTDecomp testMatrixTDecomp.cxx LIBRARIES Matrix); ROOT_ADD_GTEST(testMatrixT testMatrixT.cxx LIBRARIES Matrix)",MatchSource.DOCS,math/matrix/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/matrix/test/CMakeLists.txt:231,Testability,test,testMatrixTSparse,231,"#Copyright(C) 1995 - 2023, Rene Brun and Fons Rademakers.; #All rights reserved.; #; #For the licensing terms see $ROOTSYS / LICENSE.; #For the list of contributors see $ROOTSYS / README / CREDITS. ROOT_ADD_GTEST(testMatrixTSparse testMatrixTSparse.cxx LIBRARIES Matrix); ROOT_ADD_GTEST(testMatrixTDecomp testMatrixTDecomp.cxx LIBRARIES Matrix); ROOT_ADD_GTEST(testMatrixT testMatrixT.cxx LIBRARIES Matrix)",MatchSource.DOCS,math/matrix/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/matrix/test/CMakeLists.txt:287,Testability,test,testMatrixTDecomp,287,"#Copyright(C) 1995 - 2023, Rene Brun and Fons Rademakers.; #All rights reserved.; #; #For the licensing terms see $ROOTSYS / LICENSE.; #For the list of contributors see $ROOTSYS / README / CREDITS. ROOT_ADD_GTEST(testMatrixTSparse testMatrixTSparse.cxx LIBRARIES Matrix); ROOT_ADD_GTEST(testMatrixTDecomp testMatrixTDecomp.cxx LIBRARIES Matrix); ROOT_ADD_GTEST(testMatrixT testMatrixT.cxx LIBRARIES Matrix)",MatchSource.DOCS,math/matrix/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/matrix/test/CMakeLists.txt:305,Testability,test,testMatrixTDecomp,305,"#Copyright(C) 1995 - 2023, Rene Brun and Fons Rademakers.; #All rights reserved.; #; #For the licensing terms see $ROOTSYS / LICENSE.; #For the list of contributors see $ROOTSYS / README / CREDITS. ROOT_ADD_GTEST(testMatrixTSparse testMatrixTSparse.cxx LIBRARIES Matrix); ROOT_ADD_GTEST(testMatrixTDecomp testMatrixTDecomp.cxx LIBRARIES Matrix); ROOT_ADD_GTEST(testMatrixT testMatrixT.cxx LIBRARIES Matrix)",MatchSource.DOCS,math/matrix/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/matrix/test/CMakeLists.txt:361,Testability,test,testMatrixT,361,"#Copyright(C) 1995 - 2023, Rene Brun and Fons Rademakers.; #All rights reserved.; #; #For the licensing terms see $ROOTSYS / LICENSE.; #For the list of contributors see $ROOTSYS / README / CREDITS. ROOT_ADD_GTEST(testMatrixTSparse testMatrixTSparse.cxx LIBRARIES Matrix); ROOT_ADD_GTEST(testMatrixTDecomp testMatrixTDecomp.cxx LIBRARIES Matrix); ROOT_ADD_GTEST(testMatrixT testMatrixT.cxx LIBRARIES Matrix)",MatchSource.DOCS,math/matrix/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/matrix/test/CMakeLists.txt:373,Testability,test,testMatrixT,373,"#Copyright(C) 1995 - 2023, Rene Brun and Fons Rademakers.; #All rights reserved.; #; #For the licensing terms see $ROOTSYS / LICENSE.; #For the list of contributors see $ROOTSYS / README / CREDITS. ROOT_ADD_GTEST(testMatrixTSparse testMatrixTSparse.cxx LIBRARIES Matrix); ROOT_ADD_GTEST(testMatrixTDecomp testMatrixTDecomp.cxx LIBRARIES Matrix); ROOT_ADD_GTEST(testMatrixT testMatrixT.cxx LIBRARIES Matrix)",MatchSource.DOCS,math/matrix/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/CMakeLists.txt:1213,Integrability,message,message,1213,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. set_package_properties(Doxygen PROPERTIES; URL ""http://www.doxygen.org""; DESCRIPTION ""Documentation generator""; TYPE OPTIONAL; PURPOSE ""Requires CMake 3.9, adds docs target""). find_package(Doxygen OPTIONAL_COMPONENTS dot). # Only add docs target if Doxygen present; if(TARGET Doxygen::doxygen AND TARGET Doxygen::dot); # Setting DOXYGEN settings; set(DOXYGEN_GENERATE_LATEX YES); set(DOXYGEN_SOURCE_BROWSER YES); set(DOXYGEN_EXTRACT_ALL YES); set(DOXYGEN EXTRACT_PRIVATE YES); set(DOXYGEN_EXTRACT_STATIC YES). get_target_property(MATH_SOURCES Minuit2Math SOURCES); get_target_property(MINUIT2_SOURCES Minuit2 SOURCES). file(READ Minuit2.md MINUIT2_MAINPAGE); string(REPLACE ""\\page Minuit2Page"" ""\\mainpage"" MINUIT2_MAINPAGE ""${MINUIT2_MAINPAGE}""); file(WRITE ""${CMAKE_CURRENT_BINARY_DIR}/index.md"" ""${MINUIT2_MAINPAGE}""). # Actually add the docs target; doxygen_add_docs(docs; ""${CMAKE_CURRENT_BINARY_DIR}/index.md""; ${MATH_SOURCES}; ${MINUIT2_SOURCES}; WORKING_DIRECTORY ""${CMAKE_CURRENT_SOURCE_DIR}/..""; ); else(); message(STATUS ""Doxygen and/or Dot not found, not adding docs target""); endif(); ",MatchSource.DOCS,math/minuit2/doc/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/index.txt:2143,Availability,Error,Errors,2143,"limits or the FUMILI algorithm, which is an optimized method for least square and log likelihood minimizations. The package has been originally developed by M. Winkler and F. James. More information on the new C++ version can be found on the <a href=""http://www.cern.ch/minuit"">MINUIT Web Site</a> and in particular the online doc can be found here <a href=""http://www.cern.ch/mathlibs/sw/html/Minuit2.html"">here</a>.<p>; Minuit2, originally developed in the SEAL project, is now distributed within ROOT. The API has been then changed in this new version to follow the ROOT coding convention (function names starting with capital letters) and the classes have been moved inside the namespace <em>ROOT::Minuit2</em>. In addition, the ROOT distribution contains classes like TFitterMinuit and TFitterFumili needed to integrate Minuit2 in the ROOT framework. <p>; In the latest version (from 5.17.08) a new class has been introduced, ROOT::Minuit2::Minuit2Minimizer, which implements the interface; ROOT::Math::Minimizer from <a href=""http://www.cern.ch/mathlibs/sw/html/MathCore.html"">MathCore</a>.; . It can be instantiates also using the ROOT plug-in manager. It is a convenient entry point for using Minuit2. <h3>References</h3>; <p>; <ol>; <li>; F. James, <em>Fortran MINUIT Reference Manual</em> (<a href=""https://cern-tex.web.cern.ch/cern-tex/minuit/minmain.html"">html</a>); </li>; <li>; F. James and M. Winkler, <em>C++ MINUIT User's Guide</em> (<a href=""http://seal.cern.ch/documents/minuit/mnusersguide.pdf"">pdf</a>); </li>; <li>; F. James, <em>Minuit Tutorial on Function Minimization</em> (<a href=""http://seal.cern.ch/documents/minuit/mntutorial.pdf"">pdf</a>); </li>; <li>; F. James, <em>The Interpretation of Errors in Minuit</em> (<a href=""http://seal.cern.ch/documents/minuit/mnerror.pdf"">pdf</a>); </li>; </ol>; <p>; <hr>; <h3>See also:</h3>; <ul>; <li>Recommended <a href=""http://www.cern.ch/mathlibs/sw/html/Minuit2.html"">Online doc for all Minuit2 classes</a></li>; </ul>; END_HTML; ",MatchSource.DOCS,math/minuit2/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/index.txt:1238,Deployability,integrat,integrate,1238,"ctionality present in the old Fortran version, with almost equivalent numerical accuracy and computational performances. Furthermore, it contains new functionality, like the possibility to set single side parameter limits or the FUMILI algorithm, which is an optimized method for least square and log likelihood minimizations. The package has been originally developed by M. Winkler and F. James. More information on the new C++ version can be found on the <a href=""http://www.cern.ch/minuit"">MINUIT Web Site</a> and in particular the online doc can be found here <a href=""http://www.cern.ch/mathlibs/sw/html/Minuit2.html"">here</a>.<p>; Minuit2, originally developed in the SEAL project, is now distributed within ROOT. The API has been then changed in this new version to follow the ROOT coding convention (function names starting with capital letters) and the classes have been moved inside the namespace <em>ROOT::Minuit2</em>. In addition, the ROOT distribution contains classes like TFitterMinuit and TFitterFumili needed to integrate Minuit2 in the ROOT framework. <p>; In the latest version (from 5.17.08) a new class has been introduced, ROOT::Minuit2::Minuit2Minimizer, which implements the interface; ROOT::Math::Minimizer from <a href=""http://www.cern.ch/mathlibs/sw/html/MathCore.html"">MathCore</a>.; . It can be instantiates also using the ROOT plug-in manager. It is a convenient entry point for using Minuit2. <h3>References</h3>; <p>; <ol>; <li>; F. James, <em>Fortran MINUIT Reference Manual</em> (<a href=""https://cern-tex.web.cern.ch/cern-tex/minuit/minmain.html"">html</a>); </li>; <li>; F. James and M. Winkler, <em>C++ MINUIT User's Guide</em> (<a href=""http://seal.cern.ch/documents/minuit/mnusersguide.pdf"">pdf</a>); </li>; <li>; F. James, <em>Minuit Tutorial on Function Minimization</em> (<a href=""http://seal.cern.ch/documents/minuit/mntutorial.pdf"">pdf</a>); </li>; <li>; F. James, <em>The Interpretation of Errors in Minuit</em> (<a href=""http://seal.cern.ch/documents/min",MatchSource.DOCS,math/minuit2/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/index.txt:1238,Integrability,integrat,integrate,1238,"ctionality present in the old Fortran version, with almost equivalent numerical accuracy and computational performances. Furthermore, it contains new functionality, like the possibility to set single side parameter limits or the FUMILI algorithm, which is an optimized method for least square and log likelihood minimizations. The package has been originally developed by M. Winkler and F. James. More information on the new C++ version can be found on the <a href=""http://www.cern.ch/minuit"">MINUIT Web Site</a> and in particular the online doc can be found here <a href=""http://www.cern.ch/mathlibs/sw/html/Minuit2.html"">here</a>.<p>; Minuit2, originally developed in the SEAL project, is now distributed within ROOT. The API has been then changed in this new version to follow the ROOT coding convention (function names starting with capital letters) and the classes have been moved inside the namespace <em>ROOT::Minuit2</em>. In addition, the ROOT distribution contains classes like TFitterMinuit and TFitterFumili needed to integrate Minuit2 in the ROOT framework. <p>; In the latest version (from 5.17.08) a new class has been introduced, ROOT::Minuit2::Minuit2Minimizer, which implements the interface; ROOT::Math::Minimizer from <a href=""http://www.cern.ch/mathlibs/sw/html/MathCore.html"">MathCore</a>.; . It can be instantiates also using the ROOT plug-in manager. It is a convenient entry point for using Minuit2. <h3>References</h3>; <p>; <ol>; <li>; F. James, <em>Fortran MINUIT Reference Manual</em> (<a href=""https://cern-tex.web.cern.ch/cern-tex/minuit/minmain.html"">html</a>); </li>; <li>; F. James and M. Winkler, <em>C++ MINUIT User's Guide</em> (<a href=""http://seal.cern.ch/documents/minuit/mnusersguide.pdf"">pdf</a>); </li>; <li>; F. James, <em>Minuit Tutorial on Function Minimization</em> (<a href=""http://seal.cern.ch/documents/minuit/mntutorial.pdf"">pdf</a>); </li>; <li>; F. James, <em>The Interpretation of Errors in Minuit</em> (<a href=""http://seal.cern.ch/documents/min",MatchSource.DOCS,math/minuit2/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/index.txt:1408,Integrability,interface,interface,1408,"ty to set single side parameter limits or the FUMILI algorithm, which is an optimized method for least square and log likelihood minimizations. The package has been originally developed by M. Winkler and F. James. More information on the new C++ version can be found on the <a href=""http://www.cern.ch/minuit"">MINUIT Web Site</a> and in particular the online doc can be found here <a href=""http://www.cern.ch/mathlibs/sw/html/Minuit2.html"">here</a>.<p>; Minuit2, originally developed in the SEAL project, is now distributed within ROOT. The API has been then changed in this new version to follow the ROOT coding convention (function names starting with capital letters) and the classes have been moved inside the namespace <em>ROOT::Minuit2</em>. In addition, the ROOT distribution contains classes like TFitterMinuit and TFitterFumili needed to integrate Minuit2 in the ROOT framework. <p>; In the latest version (from 5.17.08) a new class has been introduced, ROOT::Minuit2::Minuit2Minimizer, which implements the interface; ROOT::Math::Minimizer from <a href=""http://www.cern.ch/mathlibs/sw/html/MathCore.html"">MathCore</a>.; . It can be instantiates also using the ROOT plug-in manager. It is a convenient entry point for using Minuit2. <h3>References</h3>; <p>; <ol>; <li>; F. James, <em>Fortran MINUIT Reference Manual</em> (<a href=""https://cern-tex.web.cern.ch/cern-tex/minuit/minmain.html"">html</a>); </li>; <li>; F. James and M. Winkler, <em>C++ MINUIT User's Guide</em> (<a href=""http://seal.cern.ch/documents/minuit/mnusersguide.pdf"">pdf</a>); </li>; <li>; F. James, <em>Minuit Tutorial on Function Minimization</em> (<a href=""http://seal.cern.ch/documents/minuit/mntutorial.pdf"">pdf</a>); </li>; <li>; F. James, <em>The Interpretation of Errors in Minuit</em> (<a href=""http://seal.cern.ch/documents/minuit/mnerror.pdf"">pdf</a>); </li>; </ol>; <p>; <hr>; <h3>See also:</h3>; <ul>; <li>Recommended <a href=""http://www.cern.ch/mathlibs/sw/html/Minuit2.html"">Online doc for all Minuit2 clas",MatchSource.DOCS,math/minuit2/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/index.txt:1566,Modifiability,plug-in,plug-in,1566,"limits or the FUMILI algorithm, which is an optimized method for least square and log likelihood minimizations. The package has been originally developed by M. Winkler and F. James. More information on the new C++ version can be found on the <a href=""http://www.cern.ch/minuit"">MINUIT Web Site</a> and in particular the online doc can be found here <a href=""http://www.cern.ch/mathlibs/sw/html/Minuit2.html"">here</a>.<p>; Minuit2, originally developed in the SEAL project, is now distributed within ROOT. The API has been then changed in this new version to follow the ROOT coding convention (function names starting with capital letters) and the classes have been moved inside the namespace <em>ROOT::Minuit2</em>. In addition, the ROOT distribution contains classes like TFitterMinuit and TFitterFumili needed to integrate Minuit2 in the ROOT framework. <p>; In the latest version (from 5.17.08) a new class has been introduced, ROOT::Minuit2::Minuit2Minimizer, which implements the interface; ROOT::Math::Minimizer from <a href=""http://www.cern.ch/mathlibs/sw/html/MathCore.html"">MathCore</a>.; . It can be instantiates also using the ROOT plug-in manager. It is a convenient entry point for using Minuit2. <h3>References</h3>; <p>; <ol>; <li>; F. James, <em>Fortran MINUIT Reference Manual</em> (<a href=""https://cern-tex.web.cern.ch/cern-tex/minuit/minmain.html"">html</a>); </li>; <li>; F. James and M. Winkler, <em>C++ MINUIT User's Guide</em> (<a href=""http://seal.cern.ch/documents/minuit/mnusersguide.pdf"">pdf</a>); </li>; <li>; F. James, <em>Minuit Tutorial on Function Minimization</em> (<a href=""http://seal.cern.ch/documents/minuit/mntutorial.pdf"">pdf</a>); </li>; <li>; F. James, <em>The Interpretation of Errors in Minuit</em> (<a href=""http://seal.cern.ch/documents/minuit/mnerror.pdf"">pdf</a>); </li>; </ol>; <p>; <hr>; <h3>See also:</h3>; <ul>; <li>Recommended <a href=""http://www.cern.ch/mathlibs/sw/html/Minuit2.html"">Online doc for all Minuit2 classes</a></li>; </ul>; END_HTML; ",MatchSource.DOCS,math/minuit2/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/index.txt:315,Performance,perform,performances,315,"; BEGIN_HTML; <h2>Minuit2 Package</h2>. <b>Minuit2</b> is a new object-oriented implementation, written in C++, of the popular MINUIT minimization package.<p>; These new version provides basically all the functionality present in the old Fortran version, with almost equivalent numerical accuracy and computational performances. Furthermore, it contains new functionality, like the possibility to set single side parameter limits or the FUMILI algorithm, which is an optimized method for least square and log likelihood minimizations. The package has been originally developed by M. Winkler and F. James. More information on the new C++ version can be found on the <a href=""http://www.cern.ch/minuit"">MINUIT Web Site</a> and in particular the online doc can be found here <a href=""http://www.cern.ch/mathlibs/sw/html/Minuit2.html"">here</a>.<p>; Minuit2, originally developed in the SEAL project, is now distributed within ROOT. The API has been then changed in this new version to follow the ROOT coding convention (function names starting with capital letters) and the classes have been moved inside the namespace <em>ROOT::Minuit2</em>. In addition, the ROOT distribution contains classes like TFitterMinuit and TFitterFumili needed to integrate Minuit2 in the ROOT framework. <p>; In the latest version (from 5.17.08) a new class has been introduced, ROOT::Minuit2::Minuit2Minimizer, which implements the interface; ROOT::Math::Minimizer from <a href=""http://www.cern.ch/mathlibs/sw/html/MathCore.html"">MathCore</a>.; . It can be instantiates also using the ROOT plug-in manager. It is a convenient entry point for using Minuit2. <h3>References</h3>; <p>; <ol>; <li>; F. James, <em>Fortran MINUIT Reference Manual</em> (<a href=""https://cern-tex.web.cern.ch/cern-tex/minuit/minmain.html"">html</a>); </li>; <li>; F. James and M. Winkler, <em>C++ MINUIT User's Guide</em> (<a href=""http://seal.cern.ch/documents/minuit/mnusersguide.pdf"">pdf</a>); </li>; <li>; F. James, <em>Minuit Tutorial on Functio",MatchSource.DOCS,math/minuit2/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/index.txt:467,Performance,optimiz,optimized,467,"; BEGIN_HTML; <h2>Minuit2 Package</h2>. <b>Minuit2</b> is a new object-oriented implementation, written in C++, of the popular MINUIT minimization package.<p>; These new version provides basically all the functionality present in the old Fortran version, with almost equivalent numerical accuracy and computational performances. Furthermore, it contains new functionality, like the possibility to set single side parameter limits or the FUMILI algorithm, which is an optimized method for least square and log likelihood minimizations. The package has been originally developed by M. Winkler and F. James. More information on the new C++ version can be found on the <a href=""http://www.cern.ch/minuit"">MINUIT Web Site</a> and in particular the online doc can be found here <a href=""http://www.cern.ch/mathlibs/sw/html/Minuit2.html"">here</a>.<p>; Minuit2, originally developed in the SEAL project, is now distributed within ROOT. The API has been then changed in this new version to follow the ROOT coding convention (function names starting with capital letters) and the classes have been moved inside the namespace <em>ROOT::Minuit2</em>. In addition, the ROOT distribution contains classes like TFitterMinuit and TFitterFumili needed to integrate Minuit2 in the ROOT framework. <p>; In the latest version (from 5.17.08) a new class has been introduced, ROOT::Minuit2::Minuit2Minimizer, which implements the interface; ROOT::Math::Minimizer from <a href=""http://www.cern.ch/mathlibs/sw/html/MathCore.html"">MathCore</a>.; . It can be instantiates also using the ROOT plug-in manager. It is a convenient entry point for using Minuit2. <h3>References</h3>; <p>; <ol>; <li>; F. James, <em>Fortran MINUIT Reference Manual</em> (<a href=""https://cern-tex.web.cern.ch/cern-tex/minuit/minmain.html"">html</a>); </li>; <li>; F. James and M. Winkler, <em>C++ MINUIT User's Guide</em> (<a href=""http://seal.cern.ch/documents/minuit/mnusersguide.pdf"">pdf</a>); </li>; <li>; F. James, <em>Minuit Tutorial on Functio",MatchSource.DOCS,math/minuit2/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/index.txt:505,Testability,log,log,505,"; BEGIN_HTML; <h2>Minuit2 Package</h2>. <b>Minuit2</b> is a new object-oriented implementation, written in C++, of the popular MINUIT minimization package.<p>; These new version provides basically all the functionality present in the old Fortran version, with almost equivalent numerical accuracy and computational performances. Furthermore, it contains new functionality, like the possibility to set single side parameter limits or the FUMILI algorithm, which is an optimized method for least square and log likelihood minimizations. The package has been originally developed by M. Winkler and F. James. More information on the new C++ version can be found on the <a href=""http://www.cern.ch/minuit"">MINUIT Web Site</a> and in particular the online doc can be found here <a href=""http://www.cern.ch/mathlibs/sw/html/Minuit2.html"">here</a>.<p>; Minuit2, originally developed in the SEAL project, is now distributed within ROOT. The API has been then changed in this new version to follow the ROOT coding convention (function names starting with capital letters) and the classes have been moved inside the namespace <em>ROOT::Minuit2</em>. In addition, the ROOT distribution contains classes like TFitterMinuit and TFitterFumili needed to integrate Minuit2 in the ROOT framework. <p>; In the latest version (from 5.17.08) a new class has been introduced, ROOT::Minuit2::Minuit2Minimizer, which implements the interface; ROOT::Math::Minimizer from <a href=""http://www.cern.ch/mathlibs/sw/html/MathCore.html"">MathCore</a>.; . It can be instantiates also using the ROOT plug-in manager. It is a convenient entry point for using Minuit2. <h3>References</h3>; <p>; <ol>; <li>; F. James, <em>Fortran MINUIT Reference Manual</em> (<a href=""https://cern-tex.web.cern.ch/cern-tex/minuit/minmain.html"">html</a>); </li>; <li>; F. James and M. Winkler, <em>C++ MINUIT User's Guide</em> (<a href=""http://seal.cern.ch/documents/minuit/mnusersguide.pdf"">pdf</a>); </li>; <li>; F. James, <em>Minuit Tutorial on Functio",MatchSource.DOCS,math/minuit2/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/index.txt:1862,Usability,Guid,Guide,1862,"limits or the FUMILI algorithm, which is an optimized method for least square and log likelihood minimizations. The package has been originally developed by M. Winkler and F. James. More information on the new C++ version can be found on the <a href=""http://www.cern.ch/minuit"">MINUIT Web Site</a> and in particular the online doc can be found here <a href=""http://www.cern.ch/mathlibs/sw/html/Minuit2.html"">here</a>.<p>; Minuit2, originally developed in the SEAL project, is now distributed within ROOT. The API has been then changed in this new version to follow the ROOT coding convention (function names starting with capital letters) and the classes have been moved inside the namespace <em>ROOT::Minuit2</em>. In addition, the ROOT distribution contains classes like TFitterMinuit and TFitterFumili needed to integrate Minuit2 in the ROOT framework. <p>; In the latest version (from 5.17.08) a new class has been introduced, ROOT::Minuit2::Minuit2Minimizer, which implements the interface; ROOT::Math::Minimizer from <a href=""http://www.cern.ch/mathlibs/sw/html/MathCore.html"">MathCore</a>.; . It can be instantiates also using the ROOT plug-in manager. It is a convenient entry point for using Minuit2. <h3>References</h3>; <p>; <ol>; <li>; F. James, <em>Fortran MINUIT Reference Manual</em> (<a href=""https://cern-tex.web.cern.ch/cern-tex/minuit/minmain.html"">html</a>); </li>; <li>; F. James and M. Winkler, <em>C++ MINUIT User's Guide</em> (<a href=""http://seal.cern.ch/documents/minuit/mnusersguide.pdf"">pdf</a>); </li>; <li>; F. James, <em>Minuit Tutorial on Function Minimization</em> (<a href=""http://seal.cern.ch/documents/minuit/mntutorial.pdf"">pdf</a>); </li>; <li>; F. James, <em>The Interpretation of Errors in Minuit</em> (<a href=""http://seal.cern.ch/documents/minuit/mnerror.pdf"">pdf</a>); </li>; </ol>; <p>; <hr>; <h3>See also:</h3>; <ul>; <li>Recommended <a href=""http://www.cern.ch/mathlibs/sw/html/Minuit2.html"">Online doc for all Minuit2 classes</a></li>; </ul>; END_HTML; ",MatchSource.DOCS,math/minuit2/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/CMakeLists.txt:4488,Deployability,install,install,4488,"x; LaSumOfElements.cxx; LaVtMVSimilarity.cxx; MPIProcess.cxx; MinimumBuilder.cxx; Minuit2Minimizer.cxx; MnApplication.cxx; MnContours.cxx; MnCovarianceSqueeze.cxx; MnEigen.cxx; MnFcn.cxx; MnFumiliMinimize.cxx; MnFunctionCross.cxx; MnGlobalCorrelationCoeff.cxx; MnHesse.cxx; MnLineSearch.cxx; MnMachinePrecision.cxx; MnMinos.cxx; MnParabolaFactory.cxx; MnParameterScan.cxx; MnPlot.cxx; MnPosDef.cxx; MnPrint.cxx; MnPrintImpl.cxx; MnScan.cxx; MnSeedGenerator.cxx; MnStrategy.cxx; MnTiny.cxx; MnTraceObject.cxx; MnUserFcn.cxx; MnUserParameterState.cxx; MnUserParameters.cxx; MnUserTransformation.cxx; ModularFunctionMinimizer.cxx; NegativeG2LineSearch.cxx; Numerical2PGradientCalculator.cxx; ParametricFunction.cxx; ScanBuilder.cxx; SimplexBuilder.cxx; SimplexParameters.cxx; SimplexSeedGenerator.cxx; SinParameterTransformation.cxx; SqrtLowParameterTransformation.cxx; SqrtUpParameterTransformation.cxx; VariableMetricBuilder.cxx; VariableMetricEDMEstimator.cxx; mnbins.cxx; mndasum.cxx; mndaxpy.cxx; mnddot.cxx; mndscal.cxx; mndspmv.cxx; mndspr.cxx; mnlsame.cxx; mnteigen.cxx; mntplot.cxx; mnvert.cxx; mnxerbla.cxx; ). prepend_path(MINUIT2_HEADERS ""${Minuit2_SOURCE_DIR}/inc/Minuit2"" ${MINUIT2_HEADERS}); prepend_path(MINUIT2_SOURCES ""${CMAKE_CURRENT_SOURCE_DIR}"" ${MINUIT2_SOURCES}). add_library(Minuit2; ${MINUIT2_SOURCES}; ${MINUIT2_HEADERS}; ). # Add alias for direct inclusion with add_subdirectory; add_library(Minuit2::Minuit2 ALIAS Minuit2). target_include_directories(; Minuit2; PUBLIC; $<BUILD_INTERFACE:${Minuit2_SOURCE_DIR}/inc>; $<INSTALL_INTERFACE:include/Minuit2>; ). target_compile_features(Minuit2 PUBLIC cxx_nullptr cxx_nonstatic_member_init); set_target_properties(Minuit2 PROPERTIES CXX_EXTENSIONS OFF). target_link_libraries(Minuit2 PUBLIC Minuit2Math Minuit2Common). install(TARGETS Minuit2; EXPORT Minuit2Targets; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}; ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}; ). install(FILES ${MINUIT2_HEADERS} DESTINATION include/Minuit2/Minuit2); ",MatchSource.DOCS,math/minuit2/src/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/CMakeLists.txt:4629,Deployability,install,install,4629,"x; LaSumOfElements.cxx; LaVtMVSimilarity.cxx; MPIProcess.cxx; MinimumBuilder.cxx; Minuit2Minimizer.cxx; MnApplication.cxx; MnContours.cxx; MnCovarianceSqueeze.cxx; MnEigen.cxx; MnFcn.cxx; MnFumiliMinimize.cxx; MnFunctionCross.cxx; MnGlobalCorrelationCoeff.cxx; MnHesse.cxx; MnLineSearch.cxx; MnMachinePrecision.cxx; MnMinos.cxx; MnParabolaFactory.cxx; MnParameterScan.cxx; MnPlot.cxx; MnPosDef.cxx; MnPrint.cxx; MnPrintImpl.cxx; MnScan.cxx; MnSeedGenerator.cxx; MnStrategy.cxx; MnTiny.cxx; MnTraceObject.cxx; MnUserFcn.cxx; MnUserParameterState.cxx; MnUserParameters.cxx; MnUserTransformation.cxx; ModularFunctionMinimizer.cxx; NegativeG2LineSearch.cxx; Numerical2PGradientCalculator.cxx; ParametricFunction.cxx; ScanBuilder.cxx; SimplexBuilder.cxx; SimplexParameters.cxx; SimplexSeedGenerator.cxx; SinParameterTransformation.cxx; SqrtLowParameterTransformation.cxx; SqrtUpParameterTransformation.cxx; VariableMetricBuilder.cxx; VariableMetricEDMEstimator.cxx; mnbins.cxx; mndasum.cxx; mndaxpy.cxx; mnddot.cxx; mndscal.cxx; mndspmv.cxx; mndspr.cxx; mnlsame.cxx; mnteigen.cxx; mntplot.cxx; mnvert.cxx; mnxerbla.cxx; ). prepend_path(MINUIT2_HEADERS ""${Minuit2_SOURCE_DIR}/inc/Minuit2"" ${MINUIT2_HEADERS}); prepend_path(MINUIT2_SOURCES ""${CMAKE_CURRENT_SOURCE_DIR}"" ${MINUIT2_SOURCES}). add_library(Minuit2; ${MINUIT2_SOURCES}; ${MINUIT2_HEADERS}; ). # Add alias for direct inclusion with add_subdirectory; add_library(Minuit2::Minuit2 ALIAS Minuit2). target_include_directories(; Minuit2; PUBLIC; $<BUILD_INTERFACE:${Minuit2_SOURCE_DIR}/inc>; $<INSTALL_INTERFACE:include/Minuit2>; ). target_compile_features(Minuit2 PUBLIC cxx_nullptr cxx_nonstatic_member_init); set_target_properties(Minuit2 PROPERTIES CXX_EXTENSIONS OFF). target_link_libraries(Minuit2 PUBLIC Minuit2Math Minuit2Common). install(TARGETS Minuit2; EXPORT Minuit2Targets; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}; ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}; ). install(FILES ${MINUIT2_HEADERS} DESTINATION include/Minuit2/Minuit2); ",MatchSource.DOCS,math/minuit2/src/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/CMakeLists.txt:2129,Modifiability,Variab,VariableMetricBuilder,2129,imumState.h; MinosError.h; Minuit2Minimizer.h; MinuitParameter.h; MnApplication.h; MnConfig.h; MnContours.h; MnCovarianceSqueeze.h; MnCross.h; MnEigen.h; MnFcn.h; MnFumiliMinimize.h; MnFunctionCross.h; MnGlobalCorrelationCoeff.h; MnHesse.h; MnLineSearch.h; MnMachinePrecision.h; MnMatrix.h; MnMatrixfwd.h; MnMigrad.h; MnMinimize.h; MnMinos.h; MnParabola.h; MnParabolaFactory.h; MnParabolaPoint.h; MnParameterScan.h; MnPlot.h; MnPosDef.h; MnPrint.h; MnScan.h; MnSeedGenerator.h; MnSimplex.h; MnStrategy.h; MnTiny.h; MnTraceObject.h; MnUserCovariance.h; MnUserFcn.h; MnUserParameterState.h; MnUserParameters.h; MnUserTransformation.h; MnVectorTransform.h; ModularFunctionMinimizer.h; NegativeG2LineSearch.h; Numerical2PGradientCalculator.h; ParametricFunction.h; ScanBuilder.h; ScanMinimizer.h; SimplexBuilder.h; SimplexMinimizer.h; SimplexParameters.h; SimplexSeedGenerator.h; SinParameterTransformation.h; SqrtLowParameterTransformation.h; SqrtUpParameterTransformation.h; StackAllocator.h; VariableMetricBuilder.h; VariableMetricEDMEstimator.h; VariableMetricMinimizer.h; VectorOuterProduct.h; ). set(MINUIT2_SOURCES; AnalyticalGradientCalculator.cxx; BFGSErrorUpdator.cxx; CombinedMinimumBuilder.cxx; DavidonErrorUpdator.cxx; ExternalInternalGradientCalculator.cxx; FumiliBuilder.cxx; FumiliErrorUpdator.cxx; FumiliGradientCalculator.cxx; FumiliMinimizer.cxx; FumiliStandardChi2FCN.cxx; FumiliStandardMaximumLikelihoodFCN.cxx; HessianGradientCalculator.cxx; InitialGradientCalculator.cxx; LaEigenValues.cxx; LaInnerProduct.cxx; LaInverse.cxx; LaOuterProduct.cxx; LaSumOfElements.cxx; LaVtMVSimilarity.cxx; MPIProcess.cxx; MinimumBuilder.cxx; Minuit2Minimizer.cxx; MnApplication.cxx; MnContours.cxx; MnCovarianceSqueeze.cxx; MnEigen.cxx; MnFcn.cxx; MnFumiliMinimize.cxx; MnFunctionCross.cxx; MnGlobalCorrelationCoeff.cxx; MnHesse.cxx; MnLineSearch.cxx; MnMachinePrecision.cxx; MnMinos.cxx; MnParabolaFactory.cxx; MnParameterScan.cxx; MnPlot.cxx; MnPosDef.cxx; MnPrint.cxx; MnPrintImpl.cxx; MnScan.cxx,MatchSource.DOCS,math/minuit2/src/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/CMakeLists.txt:2154,Modifiability,Variab,VariableMetricEDMEstimator,2154,inuit2Minimizer.h; MinuitParameter.h; MnApplication.h; MnConfig.h; MnContours.h; MnCovarianceSqueeze.h; MnCross.h; MnEigen.h; MnFcn.h; MnFumiliMinimize.h; MnFunctionCross.h; MnGlobalCorrelationCoeff.h; MnHesse.h; MnLineSearch.h; MnMachinePrecision.h; MnMatrix.h; MnMatrixfwd.h; MnMigrad.h; MnMinimize.h; MnMinos.h; MnParabola.h; MnParabolaFactory.h; MnParabolaPoint.h; MnParameterScan.h; MnPlot.h; MnPosDef.h; MnPrint.h; MnScan.h; MnSeedGenerator.h; MnSimplex.h; MnStrategy.h; MnTiny.h; MnTraceObject.h; MnUserCovariance.h; MnUserFcn.h; MnUserParameterState.h; MnUserParameters.h; MnUserTransformation.h; MnVectorTransform.h; ModularFunctionMinimizer.h; NegativeG2LineSearch.h; Numerical2PGradientCalculator.h; ParametricFunction.h; ScanBuilder.h; ScanMinimizer.h; SimplexBuilder.h; SimplexMinimizer.h; SimplexParameters.h; SimplexSeedGenerator.h; SinParameterTransformation.h; SqrtLowParameterTransformation.h; SqrtUpParameterTransformation.h; StackAllocator.h; VariableMetricBuilder.h; VariableMetricEDMEstimator.h; VariableMetricMinimizer.h; VectorOuterProduct.h; ). set(MINUIT2_SOURCES; AnalyticalGradientCalculator.cxx; BFGSErrorUpdator.cxx; CombinedMinimumBuilder.cxx; DavidonErrorUpdator.cxx; ExternalInternalGradientCalculator.cxx; FumiliBuilder.cxx; FumiliErrorUpdator.cxx; FumiliGradientCalculator.cxx; FumiliMinimizer.cxx; FumiliStandardChi2FCN.cxx; FumiliStandardMaximumLikelihoodFCN.cxx; HessianGradientCalculator.cxx; InitialGradientCalculator.cxx; LaEigenValues.cxx; LaInnerProduct.cxx; LaInverse.cxx; LaOuterProduct.cxx; LaSumOfElements.cxx; LaVtMVSimilarity.cxx; MPIProcess.cxx; MinimumBuilder.cxx; Minuit2Minimizer.cxx; MnApplication.cxx; MnContours.cxx; MnCovarianceSqueeze.cxx; MnEigen.cxx; MnFcn.cxx; MnFumiliMinimize.cxx; MnFunctionCross.cxx; MnGlobalCorrelationCoeff.cxx; MnHesse.cxx; MnLineSearch.cxx; MnMachinePrecision.cxx; MnMinos.cxx; MnParabolaFactory.cxx; MnParameterScan.cxx; MnPlot.cxx; MnPosDef.cxx; MnPrint.cxx; MnPrintImpl.cxx; MnScan.cxx; MnSeedGenerator.cxx; MnSt,MatchSource.DOCS,math/minuit2/src/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/CMakeLists.txt:2184,Modifiability,Variab,VariableMetricMinimizer,2184,ameter.h; MnApplication.h; MnConfig.h; MnContours.h; MnCovarianceSqueeze.h; MnCross.h; MnEigen.h; MnFcn.h; MnFumiliMinimize.h; MnFunctionCross.h; MnGlobalCorrelationCoeff.h; MnHesse.h; MnLineSearch.h; MnMachinePrecision.h; MnMatrix.h; MnMatrixfwd.h; MnMigrad.h; MnMinimize.h; MnMinos.h; MnParabola.h; MnParabolaFactory.h; MnParabolaPoint.h; MnParameterScan.h; MnPlot.h; MnPosDef.h; MnPrint.h; MnScan.h; MnSeedGenerator.h; MnSimplex.h; MnStrategy.h; MnTiny.h; MnTraceObject.h; MnUserCovariance.h; MnUserFcn.h; MnUserParameterState.h; MnUserParameters.h; MnUserTransformation.h; MnVectorTransform.h; ModularFunctionMinimizer.h; NegativeG2LineSearch.h; Numerical2PGradientCalculator.h; ParametricFunction.h; ScanBuilder.h; ScanMinimizer.h; SimplexBuilder.h; SimplexMinimizer.h; SimplexParameters.h; SimplexSeedGenerator.h; SinParameterTransformation.h; SqrtLowParameterTransformation.h; SqrtUpParameterTransformation.h; StackAllocator.h; VariableMetricBuilder.h; VariableMetricEDMEstimator.h; VariableMetricMinimizer.h; VectorOuterProduct.h; ). set(MINUIT2_SOURCES; AnalyticalGradientCalculator.cxx; BFGSErrorUpdator.cxx; CombinedMinimumBuilder.cxx; DavidonErrorUpdator.cxx; ExternalInternalGradientCalculator.cxx; FumiliBuilder.cxx; FumiliErrorUpdator.cxx; FumiliGradientCalculator.cxx; FumiliMinimizer.cxx; FumiliStandardChi2FCN.cxx; FumiliStandardMaximumLikelihoodFCN.cxx; HessianGradientCalculator.cxx; InitialGradientCalculator.cxx; LaEigenValues.cxx; LaInnerProduct.cxx; LaInverse.cxx; LaOuterProduct.cxx; LaSumOfElements.cxx; LaVtMVSimilarity.cxx; MPIProcess.cxx; MinimumBuilder.cxx; Minuit2Minimizer.cxx; MnApplication.cxx; MnContours.cxx; MnCovarianceSqueeze.cxx; MnEigen.cxx; MnFcn.cxx; MnFumiliMinimize.cxx; MnFunctionCross.cxx; MnGlobalCorrelationCoeff.cxx; MnHesse.cxx; MnLineSearch.cxx; MnMachinePrecision.cxx; MnMinos.cxx; MnParabolaFactory.cxx; MnParameterScan.cxx; MnPlot.cxx; MnPosDef.cxx; MnPrint.cxx; MnPrintImpl.cxx; MnScan.cxx; MnSeedGenerator.cxx; MnStrategy.cxx; MnTiny.cxx; MnTra,MatchSource.DOCS,math/minuit2/src/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/CMakeLists.txt:3602,Modifiability,Variab,VariableMetricBuilder,3602,"entCalculator.cxx; LaEigenValues.cxx; LaInnerProduct.cxx; LaInverse.cxx; LaOuterProduct.cxx; LaSumOfElements.cxx; LaVtMVSimilarity.cxx; MPIProcess.cxx; MinimumBuilder.cxx; Minuit2Minimizer.cxx; MnApplication.cxx; MnContours.cxx; MnCovarianceSqueeze.cxx; MnEigen.cxx; MnFcn.cxx; MnFumiliMinimize.cxx; MnFunctionCross.cxx; MnGlobalCorrelationCoeff.cxx; MnHesse.cxx; MnLineSearch.cxx; MnMachinePrecision.cxx; MnMinos.cxx; MnParabolaFactory.cxx; MnParameterScan.cxx; MnPlot.cxx; MnPosDef.cxx; MnPrint.cxx; MnPrintImpl.cxx; MnScan.cxx; MnSeedGenerator.cxx; MnStrategy.cxx; MnTiny.cxx; MnTraceObject.cxx; MnUserFcn.cxx; MnUserParameterState.cxx; MnUserParameters.cxx; MnUserTransformation.cxx; ModularFunctionMinimizer.cxx; NegativeG2LineSearch.cxx; Numerical2PGradientCalculator.cxx; ParametricFunction.cxx; ScanBuilder.cxx; SimplexBuilder.cxx; SimplexParameters.cxx; SimplexSeedGenerator.cxx; SinParameterTransformation.cxx; SqrtLowParameterTransformation.cxx; SqrtUpParameterTransformation.cxx; VariableMetricBuilder.cxx; VariableMetricEDMEstimator.cxx; mnbins.cxx; mndasum.cxx; mndaxpy.cxx; mnddot.cxx; mndscal.cxx; mndspmv.cxx; mndspr.cxx; mnlsame.cxx; mnteigen.cxx; mntplot.cxx; mnvert.cxx; mnxerbla.cxx; ). prepend_path(MINUIT2_HEADERS ""${Minuit2_SOURCE_DIR}/inc/Minuit2"" ${MINUIT2_HEADERS}); prepend_path(MINUIT2_SOURCES ""${CMAKE_CURRENT_SOURCE_DIR}"" ${MINUIT2_SOURCES}). add_library(Minuit2; ${MINUIT2_SOURCES}; ${MINUIT2_HEADERS}; ). # Add alias for direct inclusion with add_subdirectory; add_library(Minuit2::Minuit2 ALIAS Minuit2). target_include_directories(; Minuit2; PUBLIC; $<BUILD_INTERFACE:${Minuit2_SOURCE_DIR}/inc>; $<INSTALL_INTERFACE:include/Minuit2>; ). target_compile_features(Minuit2 PUBLIC cxx_nullptr cxx_nonstatic_member_init); set_target_properties(Minuit2 PROPERTIES CXX_EXTENSIONS OFF). target_link_libraries(Minuit2 PUBLIC Minuit2Math Minuit2Common). install(TARGETS Minuit2; EXPORT Minuit2Targets; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}; ARCHIVE DESTINATION ${CMAKE_IN",MatchSource.DOCS,math/minuit2/src/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/CMakeLists.txt:3629,Modifiability,Variab,VariableMetricEDMEstimator,3629,"es.cxx; LaInnerProduct.cxx; LaInverse.cxx; LaOuterProduct.cxx; LaSumOfElements.cxx; LaVtMVSimilarity.cxx; MPIProcess.cxx; MinimumBuilder.cxx; Minuit2Minimizer.cxx; MnApplication.cxx; MnContours.cxx; MnCovarianceSqueeze.cxx; MnEigen.cxx; MnFcn.cxx; MnFumiliMinimize.cxx; MnFunctionCross.cxx; MnGlobalCorrelationCoeff.cxx; MnHesse.cxx; MnLineSearch.cxx; MnMachinePrecision.cxx; MnMinos.cxx; MnParabolaFactory.cxx; MnParameterScan.cxx; MnPlot.cxx; MnPosDef.cxx; MnPrint.cxx; MnPrintImpl.cxx; MnScan.cxx; MnSeedGenerator.cxx; MnStrategy.cxx; MnTiny.cxx; MnTraceObject.cxx; MnUserFcn.cxx; MnUserParameterState.cxx; MnUserParameters.cxx; MnUserTransformation.cxx; ModularFunctionMinimizer.cxx; NegativeG2LineSearch.cxx; Numerical2PGradientCalculator.cxx; ParametricFunction.cxx; ScanBuilder.cxx; SimplexBuilder.cxx; SimplexParameters.cxx; SimplexSeedGenerator.cxx; SinParameterTransformation.cxx; SqrtLowParameterTransformation.cxx; SqrtUpParameterTransformation.cxx; VariableMetricBuilder.cxx; VariableMetricEDMEstimator.cxx; mnbins.cxx; mndasum.cxx; mndaxpy.cxx; mnddot.cxx; mndscal.cxx; mndspmv.cxx; mndspr.cxx; mnlsame.cxx; mnteigen.cxx; mntplot.cxx; mnvert.cxx; mnxerbla.cxx; ). prepend_path(MINUIT2_HEADERS ""${Minuit2_SOURCE_DIR}/inc/Minuit2"" ${MINUIT2_HEADERS}); prepend_path(MINUIT2_SOURCES ""${CMAKE_CURRENT_SOURCE_DIR}"" ${MINUIT2_SOURCES}). add_library(Minuit2; ${MINUIT2_SOURCES}; ${MINUIT2_HEADERS}; ). # Add alias for direct inclusion with add_subdirectory; add_library(Minuit2::Minuit2 ALIAS Minuit2). target_include_directories(; Minuit2; PUBLIC; $<BUILD_INTERFACE:${Minuit2_SOURCE_DIR}/inc>; $<INSTALL_INTERFACE:include/Minuit2>; ). target_compile_features(Minuit2 PUBLIC cxx_nullptr cxx_nonstatic_member_init); set_target_properties(Minuit2 PROPERTIES CXX_EXTENSIONS OFF). target_link_libraries(Minuit2 PUBLIC Minuit2Math Minuit2Common). install(TARGETS Minuit2; EXPORT Minuit2Targets; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}; ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}; ). install(FIL",MatchSource.DOCS,math/minuit2/src/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/CMakeLists.txt:1931,Usability,Simpl,SimplexBuilder,1931,LaInverse.h; LaOuterProduct.h; LaProd.h; LaSum.h; MPIProcess.h; MatrixInverse.h; MinimumBuilder.h; MinimumError.h; MinimumErrorUpdator.h; MinimumParameters.h; MinimumSeed.h; MinimumSeedGenerator.h; MinimumState.h; MinosError.h; Minuit2Minimizer.h; MinuitParameter.h; MnApplication.h; MnConfig.h; MnContours.h; MnCovarianceSqueeze.h; MnCross.h; MnEigen.h; MnFcn.h; MnFumiliMinimize.h; MnFunctionCross.h; MnGlobalCorrelationCoeff.h; MnHesse.h; MnLineSearch.h; MnMachinePrecision.h; MnMatrix.h; MnMatrixfwd.h; MnMigrad.h; MnMinimize.h; MnMinos.h; MnParabola.h; MnParabolaFactory.h; MnParabolaPoint.h; MnParameterScan.h; MnPlot.h; MnPosDef.h; MnPrint.h; MnScan.h; MnSeedGenerator.h; MnSimplex.h; MnStrategy.h; MnTiny.h; MnTraceObject.h; MnUserCovariance.h; MnUserFcn.h; MnUserParameterState.h; MnUserParameters.h; MnUserTransformation.h; MnVectorTransform.h; ModularFunctionMinimizer.h; NegativeG2LineSearch.h; Numerical2PGradientCalculator.h; ParametricFunction.h; ScanBuilder.h; ScanMinimizer.h; SimplexBuilder.h; SimplexMinimizer.h; SimplexParameters.h; SimplexSeedGenerator.h; SinParameterTransformation.h; SqrtLowParameterTransformation.h; SqrtUpParameterTransformation.h; StackAllocator.h; VariableMetricBuilder.h; VariableMetricEDMEstimator.h; VariableMetricMinimizer.h; VectorOuterProduct.h; ). set(MINUIT2_SOURCES; AnalyticalGradientCalculator.cxx; BFGSErrorUpdator.cxx; CombinedMinimumBuilder.cxx; DavidonErrorUpdator.cxx; ExternalInternalGradientCalculator.cxx; FumiliBuilder.cxx; FumiliErrorUpdator.cxx; FumiliGradientCalculator.cxx; FumiliMinimizer.cxx; FumiliStandardChi2FCN.cxx; FumiliStandardMaximumLikelihoodFCN.cxx; HessianGradientCalculator.cxx; InitialGradientCalculator.cxx; LaEigenValues.cxx; LaInnerProduct.cxx; LaInverse.cxx; LaOuterProduct.cxx; LaSumOfElements.cxx; LaVtMVSimilarity.cxx; MPIProcess.cxx; MinimumBuilder.cxx; Minuit2Minimizer.cxx; MnApplication.cxx; MnContours.cxx; MnCovarianceSqueeze.cxx; MnEigen.cxx; MnFcn.cxx; MnFumiliMinimize.cxx; MnFunctionCross.cxx; MnGlob,MatchSource.DOCS,math/minuit2/src/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/CMakeLists.txt:1949,Usability,Simpl,SimplexMinimizer,1949,rProduct.h; LaProd.h; LaSum.h; MPIProcess.h; MatrixInverse.h; MinimumBuilder.h; MinimumError.h; MinimumErrorUpdator.h; MinimumParameters.h; MinimumSeed.h; MinimumSeedGenerator.h; MinimumState.h; MinosError.h; Minuit2Minimizer.h; MinuitParameter.h; MnApplication.h; MnConfig.h; MnContours.h; MnCovarianceSqueeze.h; MnCross.h; MnEigen.h; MnFcn.h; MnFumiliMinimize.h; MnFunctionCross.h; MnGlobalCorrelationCoeff.h; MnHesse.h; MnLineSearch.h; MnMachinePrecision.h; MnMatrix.h; MnMatrixfwd.h; MnMigrad.h; MnMinimize.h; MnMinos.h; MnParabola.h; MnParabolaFactory.h; MnParabolaPoint.h; MnParameterScan.h; MnPlot.h; MnPosDef.h; MnPrint.h; MnScan.h; MnSeedGenerator.h; MnSimplex.h; MnStrategy.h; MnTiny.h; MnTraceObject.h; MnUserCovariance.h; MnUserFcn.h; MnUserParameterState.h; MnUserParameters.h; MnUserTransformation.h; MnVectorTransform.h; ModularFunctionMinimizer.h; NegativeG2LineSearch.h; Numerical2PGradientCalculator.h; ParametricFunction.h; ScanBuilder.h; ScanMinimizer.h; SimplexBuilder.h; SimplexMinimizer.h; SimplexParameters.h; SimplexSeedGenerator.h; SinParameterTransformation.h; SqrtLowParameterTransformation.h; SqrtUpParameterTransformation.h; StackAllocator.h; VariableMetricBuilder.h; VariableMetricEDMEstimator.h; VariableMetricMinimizer.h; VectorOuterProduct.h; ). set(MINUIT2_SOURCES; AnalyticalGradientCalculator.cxx; BFGSErrorUpdator.cxx; CombinedMinimumBuilder.cxx; DavidonErrorUpdator.cxx; ExternalInternalGradientCalculator.cxx; FumiliBuilder.cxx; FumiliErrorUpdator.cxx; FumiliGradientCalculator.cxx; FumiliMinimizer.cxx; FumiliStandardChi2FCN.cxx; FumiliStandardMaximumLikelihoodFCN.cxx; HessianGradientCalculator.cxx; InitialGradientCalculator.cxx; LaEigenValues.cxx; LaInnerProduct.cxx; LaInverse.cxx; LaOuterProduct.cxx; LaSumOfElements.cxx; LaVtMVSimilarity.cxx; MPIProcess.cxx; MinimumBuilder.cxx; Minuit2Minimizer.cxx; MnApplication.cxx; MnContours.cxx; MnCovarianceSqueeze.cxx; MnEigen.cxx; MnFcn.cxx; MnFumiliMinimize.cxx; MnFunctionCross.cxx; MnGlobalCorrelationCoeff.,MatchSource.DOCS,math/minuit2/src/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/CMakeLists.txt:1969,Usability,Simpl,SimplexParameters,1969,; LaSum.h; MPIProcess.h; MatrixInverse.h; MinimumBuilder.h; MinimumError.h; MinimumErrorUpdator.h; MinimumParameters.h; MinimumSeed.h; MinimumSeedGenerator.h; MinimumState.h; MinosError.h; Minuit2Minimizer.h; MinuitParameter.h; MnApplication.h; MnConfig.h; MnContours.h; MnCovarianceSqueeze.h; MnCross.h; MnEigen.h; MnFcn.h; MnFumiliMinimize.h; MnFunctionCross.h; MnGlobalCorrelationCoeff.h; MnHesse.h; MnLineSearch.h; MnMachinePrecision.h; MnMatrix.h; MnMatrixfwd.h; MnMigrad.h; MnMinimize.h; MnMinos.h; MnParabola.h; MnParabolaFactory.h; MnParabolaPoint.h; MnParameterScan.h; MnPlot.h; MnPosDef.h; MnPrint.h; MnScan.h; MnSeedGenerator.h; MnSimplex.h; MnStrategy.h; MnTiny.h; MnTraceObject.h; MnUserCovariance.h; MnUserFcn.h; MnUserParameterState.h; MnUserParameters.h; MnUserTransformation.h; MnVectorTransform.h; ModularFunctionMinimizer.h; NegativeG2LineSearch.h; Numerical2PGradientCalculator.h; ParametricFunction.h; ScanBuilder.h; ScanMinimizer.h; SimplexBuilder.h; SimplexMinimizer.h; SimplexParameters.h; SimplexSeedGenerator.h; SinParameterTransformation.h; SqrtLowParameterTransformation.h; SqrtUpParameterTransformation.h; StackAllocator.h; VariableMetricBuilder.h; VariableMetricEDMEstimator.h; VariableMetricMinimizer.h; VectorOuterProduct.h; ). set(MINUIT2_SOURCES; AnalyticalGradientCalculator.cxx; BFGSErrorUpdator.cxx; CombinedMinimumBuilder.cxx; DavidonErrorUpdator.cxx; ExternalInternalGradientCalculator.cxx; FumiliBuilder.cxx; FumiliErrorUpdator.cxx; FumiliGradientCalculator.cxx; FumiliMinimizer.cxx; FumiliStandardChi2FCN.cxx; FumiliStandardMaximumLikelihoodFCN.cxx; HessianGradientCalculator.cxx; InitialGradientCalculator.cxx; LaEigenValues.cxx; LaInnerProduct.cxx; LaInverse.cxx; LaOuterProduct.cxx; LaSumOfElements.cxx; LaVtMVSimilarity.cxx; MPIProcess.cxx; MinimumBuilder.cxx; Minuit2Minimizer.cxx; MnApplication.cxx; MnContours.cxx; MnCovarianceSqueeze.cxx; MnEigen.cxx; MnFcn.cxx; MnFumiliMinimize.cxx; MnFunctionCross.cxx; MnGlobalCorrelationCoeff.cxx; MnHesse.cxx; MnL,MatchSource.DOCS,math/minuit2/src/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/CMakeLists.txt:1990,Usability,Simpl,SimplexSeedGenerator,1990,; MatrixInverse.h; MinimumBuilder.h; MinimumError.h; MinimumErrorUpdator.h; MinimumParameters.h; MinimumSeed.h; MinimumSeedGenerator.h; MinimumState.h; MinosError.h; Minuit2Minimizer.h; MinuitParameter.h; MnApplication.h; MnConfig.h; MnContours.h; MnCovarianceSqueeze.h; MnCross.h; MnEigen.h; MnFcn.h; MnFumiliMinimize.h; MnFunctionCross.h; MnGlobalCorrelationCoeff.h; MnHesse.h; MnLineSearch.h; MnMachinePrecision.h; MnMatrix.h; MnMatrixfwd.h; MnMigrad.h; MnMinimize.h; MnMinos.h; MnParabola.h; MnParabolaFactory.h; MnParabolaPoint.h; MnParameterScan.h; MnPlot.h; MnPosDef.h; MnPrint.h; MnScan.h; MnSeedGenerator.h; MnSimplex.h; MnStrategy.h; MnTiny.h; MnTraceObject.h; MnUserCovariance.h; MnUserFcn.h; MnUserParameterState.h; MnUserParameters.h; MnUserTransformation.h; MnVectorTransform.h; ModularFunctionMinimizer.h; NegativeG2LineSearch.h; Numerical2PGradientCalculator.h; ParametricFunction.h; ScanBuilder.h; ScanMinimizer.h; SimplexBuilder.h; SimplexMinimizer.h; SimplexParameters.h; SimplexSeedGenerator.h; SinParameterTransformation.h; SqrtLowParameterTransformation.h; SqrtUpParameterTransformation.h; StackAllocator.h; VariableMetricBuilder.h; VariableMetricEDMEstimator.h; VariableMetricMinimizer.h; VectorOuterProduct.h; ). set(MINUIT2_SOURCES; AnalyticalGradientCalculator.cxx; BFGSErrorUpdator.cxx; CombinedMinimumBuilder.cxx; DavidonErrorUpdator.cxx; ExternalInternalGradientCalculator.cxx; FumiliBuilder.cxx; FumiliErrorUpdator.cxx; FumiliGradientCalculator.cxx; FumiliMinimizer.cxx; FumiliStandardChi2FCN.cxx; FumiliStandardMaximumLikelihoodFCN.cxx; HessianGradientCalculator.cxx; InitialGradientCalculator.cxx; LaEigenValues.cxx; LaInnerProduct.cxx; LaInverse.cxx; LaOuterProduct.cxx; LaSumOfElements.cxx; LaVtMVSimilarity.cxx; MPIProcess.cxx; MinimumBuilder.cxx; Minuit2Minimizer.cxx; MnApplication.cxx; MnContours.cxx; MnCovarianceSqueeze.cxx; MnEigen.cxx; MnFcn.cxx; MnFumiliMinimize.cxx; MnFunctionCross.cxx; MnGlobalCorrelationCoeff.cxx; MnHesse.cxx; MnLineSearch.cxx; MnMachi,MatchSource.DOCS,math/minuit2/src/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/CMakeLists.txt:3430,Usability,Simpl,SimplexBuilder,3430,"rUpdator.cxx; FumiliGradientCalculator.cxx; FumiliMinimizer.cxx; FumiliStandardChi2FCN.cxx; FumiliStandardMaximumLikelihoodFCN.cxx; HessianGradientCalculator.cxx; InitialGradientCalculator.cxx; LaEigenValues.cxx; LaInnerProduct.cxx; LaInverse.cxx; LaOuterProduct.cxx; LaSumOfElements.cxx; LaVtMVSimilarity.cxx; MPIProcess.cxx; MinimumBuilder.cxx; Minuit2Minimizer.cxx; MnApplication.cxx; MnContours.cxx; MnCovarianceSqueeze.cxx; MnEigen.cxx; MnFcn.cxx; MnFumiliMinimize.cxx; MnFunctionCross.cxx; MnGlobalCorrelationCoeff.cxx; MnHesse.cxx; MnLineSearch.cxx; MnMachinePrecision.cxx; MnMinos.cxx; MnParabolaFactory.cxx; MnParameterScan.cxx; MnPlot.cxx; MnPosDef.cxx; MnPrint.cxx; MnPrintImpl.cxx; MnScan.cxx; MnSeedGenerator.cxx; MnStrategy.cxx; MnTiny.cxx; MnTraceObject.cxx; MnUserFcn.cxx; MnUserParameterState.cxx; MnUserParameters.cxx; MnUserTransformation.cxx; ModularFunctionMinimizer.cxx; NegativeG2LineSearch.cxx; Numerical2PGradientCalculator.cxx; ParametricFunction.cxx; ScanBuilder.cxx; SimplexBuilder.cxx; SimplexParameters.cxx; SimplexSeedGenerator.cxx; SinParameterTransformation.cxx; SqrtLowParameterTransformation.cxx; SqrtUpParameterTransformation.cxx; VariableMetricBuilder.cxx; VariableMetricEDMEstimator.cxx; mnbins.cxx; mndasum.cxx; mndaxpy.cxx; mnddot.cxx; mndscal.cxx; mndspmv.cxx; mndspr.cxx; mnlsame.cxx; mnteigen.cxx; mntplot.cxx; mnvert.cxx; mnxerbla.cxx; ). prepend_path(MINUIT2_HEADERS ""${Minuit2_SOURCE_DIR}/inc/Minuit2"" ${MINUIT2_HEADERS}); prepend_path(MINUIT2_SOURCES ""${CMAKE_CURRENT_SOURCE_DIR}"" ${MINUIT2_SOURCES}). add_library(Minuit2; ${MINUIT2_SOURCES}; ${MINUIT2_HEADERS}; ). # Add alias for direct inclusion with add_subdirectory; add_library(Minuit2::Minuit2 ALIAS Minuit2). target_include_directories(; Minuit2; PUBLIC; $<BUILD_INTERFACE:${Minuit2_SOURCE_DIR}/inc>; $<INSTALL_INTERFACE:include/Minuit2>; ). target_compile_features(Minuit2 PUBLIC cxx_nullptr cxx_nonstatic_member_init); set_target_properties(Minuit2 PROPERTIES CXX_EXTENSIONS OFF). target_link_",MatchSource.DOCS,math/minuit2/src/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/CMakeLists.txt:3450,Usability,Simpl,SimplexParameters,3450,"radientCalculator.cxx; FumiliMinimizer.cxx; FumiliStandardChi2FCN.cxx; FumiliStandardMaximumLikelihoodFCN.cxx; HessianGradientCalculator.cxx; InitialGradientCalculator.cxx; LaEigenValues.cxx; LaInnerProduct.cxx; LaInverse.cxx; LaOuterProduct.cxx; LaSumOfElements.cxx; LaVtMVSimilarity.cxx; MPIProcess.cxx; MinimumBuilder.cxx; Minuit2Minimizer.cxx; MnApplication.cxx; MnContours.cxx; MnCovarianceSqueeze.cxx; MnEigen.cxx; MnFcn.cxx; MnFumiliMinimize.cxx; MnFunctionCross.cxx; MnGlobalCorrelationCoeff.cxx; MnHesse.cxx; MnLineSearch.cxx; MnMachinePrecision.cxx; MnMinos.cxx; MnParabolaFactory.cxx; MnParameterScan.cxx; MnPlot.cxx; MnPosDef.cxx; MnPrint.cxx; MnPrintImpl.cxx; MnScan.cxx; MnSeedGenerator.cxx; MnStrategy.cxx; MnTiny.cxx; MnTraceObject.cxx; MnUserFcn.cxx; MnUserParameterState.cxx; MnUserParameters.cxx; MnUserTransformation.cxx; ModularFunctionMinimizer.cxx; NegativeG2LineSearch.cxx; Numerical2PGradientCalculator.cxx; ParametricFunction.cxx; ScanBuilder.cxx; SimplexBuilder.cxx; SimplexParameters.cxx; SimplexSeedGenerator.cxx; SinParameterTransformation.cxx; SqrtLowParameterTransformation.cxx; SqrtUpParameterTransformation.cxx; VariableMetricBuilder.cxx; VariableMetricEDMEstimator.cxx; mnbins.cxx; mndasum.cxx; mndaxpy.cxx; mnddot.cxx; mndscal.cxx; mndspmv.cxx; mndspr.cxx; mnlsame.cxx; mnteigen.cxx; mntplot.cxx; mnvert.cxx; mnxerbla.cxx; ). prepend_path(MINUIT2_HEADERS ""${Minuit2_SOURCE_DIR}/inc/Minuit2"" ${MINUIT2_HEADERS}); prepend_path(MINUIT2_SOURCES ""${CMAKE_CURRENT_SOURCE_DIR}"" ${MINUIT2_SOURCES}). add_library(Minuit2; ${MINUIT2_SOURCES}; ${MINUIT2_HEADERS}; ). # Add alias for direct inclusion with add_subdirectory; add_library(Minuit2::Minuit2 ALIAS Minuit2). target_include_directories(; Minuit2; PUBLIC; $<BUILD_INTERFACE:${Minuit2_SOURCE_DIR}/inc>; $<INSTALL_INTERFACE:include/Minuit2>; ). target_compile_features(Minuit2 PUBLIC cxx_nullptr cxx_nonstatic_member_init); set_target_properties(Minuit2 PROPERTIES CXX_EXTENSIONS OFF). target_link_libraries(Minuit2 PUBL",MatchSource.DOCS,math/minuit2/src/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/CMakeLists.txt:3473,Usability,Simpl,SimplexSeedGenerator,3473,"miliMinimizer.cxx; FumiliStandardChi2FCN.cxx; FumiliStandardMaximumLikelihoodFCN.cxx; HessianGradientCalculator.cxx; InitialGradientCalculator.cxx; LaEigenValues.cxx; LaInnerProduct.cxx; LaInverse.cxx; LaOuterProduct.cxx; LaSumOfElements.cxx; LaVtMVSimilarity.cxx; MPIProcess.cxx; MinimumBuilder.cxx; Minuit2Minimizer.cxx; MnApplication.cxx; MnContours.cxx; MnCovarianceSqueeze.cxx; MnEigen.cxx; MnFcn.cxx; MnFumiliMinimize.cxx; MnFunctionCross.cxx; MnGlobalCorrelationCoeff.cxx; MnHesse.cxx; MnLineSearch.cxx; MnMachinePrecision.cxx; MnMinos.cxx; MnParabolaFactory.cxx; MnParameterScan.cxx; MnPlot.cxx; MnPosDef.cxx; MnPrint.cxx; MnPrintImpl.cxx; MnScan.cxx; MnSeedGenerator.cxx; MnStrategy.cxx; MnTiny.cxx; MnTraceObject.cxx; MnUserFcn.cxx; MnUserParameterState.cxx; MnUserParameters.cxx; MnUserTransformation.cxx; ModularFunctionMinimizer.cxx; NegativeG2LineSearch.cxx; Numerical2PGradientCalculator.cxx; ParametricFunction.cxx; ScanBuilder.cxx; SimplexBuilder.cxx; SimplexParameters.cxx; SimplexSeedGenerator.cxx; SinParameterTransformation.cxx; SqrtLowParameterTransformation.cxx; SqrtUpParameterTransformation.cxx; VariableMetricBuilder.cxx; VariableMetricEDMEstimator.cxx; mnbins.cxx; mndasum.cxx; mndaxpy.cxx; mnddot.cxx; mndscal.cxx; mndspmv.cxx; mndspr.cxx; mnlsame.cxx; mnteigen.cxx; mntplot.cxx; mnvert.cxx; mnxerbla.cxx; ). prepend_path(MINUIT2_HEADERS ""${Minuit2_SOURCE_DIR}/inc/Minuit2"" ${MINUIT2_HEADERS}); prepend_path(MINUIT2_SOURCES ""${CMAKE_CURRENT_SOURCE_DIR}"" ${MINUIT2_SOURCES}). add_library(Minuit2; ${MINUIT2_SOURCES}; ${MINUIT2_HEADERS}; ). # Add alias for direct inclusion with add_subdirectory; add_library(Minuit2::Minuit2 ALIAS Minuit2). target_include_directories(; Minuit2; PUBLIC; $<BUILD_INTERFACE:${Minuit2_SOURCE_DIR}/inc>; $<INSTALL_INTERFACE:include/Minuit2>; ). target_compile_features(Minuit2 PUBLIC cxx_nullptr cxx_nonstatic_member_init); set_target_properties(Minuit2 PROPERTIES CXX_EXTENSIONS OFF). target_link_libraries(Minuit2 PUBLIC Minuit2Math Minuit2Co",MatchSource.DOCS,math/minuit2/src/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:1784,Modifiability,Plugin,PluginManager,1784,E.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${RootLibraries} Minuit2 ); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(); ,MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:359,Testability,Test,TestSource,359,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABL",MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:370,Testability,test,testMinimizer,370,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABL",MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:413,Testability,Test,TestSource,413,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABL",MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:424,Testability,test,testADMinim,424,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABL",MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:455,Testability,Test,TestSourceMnTutorial,455,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABL",MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:593,Testability,Test,TestSourceMnSim,593,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABL",MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:873,Testability,test,tests,873,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABL",MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:933,Testability,Test,TestSourceMnTutorial,933,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABL",MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:980,Testability,test,testname,980,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABL",MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:1025,Testability,test,testname,1025,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABL",MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:1087,Testability,test,testname,1087,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABL",MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:1107,Testability,test,testname,1107,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABL",MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:1492,Testability,Test,TestSourceMnSim,1492,E.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${RootLibraries} Minuit2 ); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(); ,MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:1534,Testability,test,testname,1534,E.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${RootLibraries} Minuit2 ); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(); ,MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:1579,Testability,test,testname,1579,E.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${RootLibraries} Minuit2 ); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(); ,MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:1667,Testability,test,testname,1667,E.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${RootLibraries} Minuit2 ); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(); ,MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:1687,Testability,test,testname,1687,E.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${RootLibraries} Minuit2 ); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(); ,MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:1729,Testability,test,tests,1729,E.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${RootLibraries} Minuit2 ); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(); ,MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:1923,Testability,Test,TestSource,1923,E.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${RootLibraries} Minuit2 ); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(); ,MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:1960,Testability,test,testname,1960,E.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${RootLibraries} Minuit2 ); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(); ,MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:2005,Testability,test,testname,2005,E.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${RootLibraries} Minuit2 ); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(); ,MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:2085,Testability,test,testname,2085,E.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${RootLibraries} Minuit2 ); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(); ,MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:2105,Testability,test,testname,2105,E.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${RootLibraries} Minuit2 ); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(); ,MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt:858,Usability,simpl,simple,858,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT DEFINED ROOT_SOURCE_DIR); cmake_minimum_required(VERSION 3.10); project(minuit2_tests); find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}); endif(). set(TestSource testMinimizer.cxx); if (clad); list(APPEND TestSource testADMinim.cxx); endif(). set(TestSourceMnTutorial; MnTutorial/Quad1FMain.cxx; MnTutorial/Quad4FMain.cxx; MnTutorial/Quad8FMain.cxx; MnTutorial/Quad12FMain.cxx; ). set(TestSourceMnSim; MnSim/DemoGaussSim.cxx; MnSim/DemoFumili.cxx; MnSim/PaulTest.cxx; MnSim/PaulTest2.cxx; MnSim/PaulTest3.cxx; MnSim/PaulTest4.cxx; MnSim/ReneTest.cxx; MnSim/ParallelTest.cxx; MnSim/demoMinimizer.cxx; ). set(ParallelTest_LABELS longtest). #---For the simple Minuit2 tests build and defined them---------------; foreach(file ${TestSourceMnTutorial}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). ROOT_LINKER_LIBRARY(Minuit2TestMnSim MnSim/GaussDataGen.cxx MnSim/GaussFcn.cxx MnSim/GaussFcn2.cxx LIBRARIES Minuit2). #input text files; configure_file(MnSim/paul.txt paul.txt COPYONLY); configure_file(MnSim/paul2.txt paul2.txt COPYONLY); configure_file(MnSim/paul3.txt paul3.txt COPYONLY); configure_file(MnSim/paul4.txt paul4.txt COPYONLY). foreach(file ${TestSourceMnSim}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES Minuit2 Minuit2TestMnSim MathCore); ROOT_ADD_TEST(minuit2_${testname} COMMAND ${testname}); endforeach(). #for the global tests using ROOT libs (Minuit2 should be taken via the PluginManager). set(RootLibraries Core RIO Net Hist Graf Graf3d Gpad Tree; Rint Postscript Matrix Physics MathCore Thread). foreach(file ${TestSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABL",MatchSource.DOCS,math/minuit2/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/examples/simple/CMakeLists.txt:398,Deployability,install,installed,398,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. cmake_minimum_required(VERSION 3.10); # This is a test of the Minuit2 CMake build system. project(Quad1F LANGUAGES CXX). # CMake should be able to find the Minuit2 package if you have either built it or installed it; find_package(Minuit2 CONFIG REQUIRED). # Reusing the existing test file for simplicity; add_executable(Quad1F; ../../test/MnTutorial/Quad1FMain.cxx; ../../test/MnTutorial/Quad1F.h; ). # Linking with Minuit2::Minuit2 target; target_link_libraries(Quad1F PUBLIC Minuit2::Minuit2). # Run this executable as a test with make test; enable_testing(); add_test(NAME Quad1F COMMAND Quad1F); ",MatchSource.DOCS,math/minuit2/examples/simple/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/examples/simple/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/examples/simple/CMakeLists.txt:433,Modifiability,CONFIG,CONFIG,433,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. cmake_minimum_required(VERSION 3.10); # This is a test of the Minuit2 CMake build system. project(Quad1F LANGUAGES CXX). # CMake should be able to find the Minuit2 package if you have either built it or installed it; find_package(Minuit2 CONFIG REQUIRED). # Reusing the existing test file for simplicity; add_executable(Quad1F; ../../test/MnTutorial/Quad1FMain.cxx; ../../test/MnTutorial/Quad1F.h; ). # Linking with Minuit2::Minuit2 target; target_link_libraries(Quad1F PUBLIC Minuit2::Minuit2). # Run this executable as a test with make test; enable_testing(); add_test(NAME Quad1F COMMAND Quad1F); ",MatchSource.DOCS,math/minuit2/examples/simple/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/examples/simple/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/examples/simple/CMakeLists.txt:245,Testability,test,test,245,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. cmake_minimum_required(VERSION 3.10); # This is a test of the Minuit2 CMake build system. project(Quad1F LANGUAGES CXX). # CMake should be able to find the Minuit2 package if you have either built it or installed it; find_package(Minuit2 CONFIG REQUIRED). # Reusing the existing test file for simplicity; add_executable(Quad1F; ../../test/MnTutorial/Quad1FMain.cxx; ../../test/MnTutorial/Quad1F.h; ). # Linking with Minuit2::Minuit2 target; target_link_libraries(Quad1F PUBLIC Minuit2::Minuit2). # Run this executable as a test with make test; enable_testing(); add_test(NAME Quad1F COMMAND Quad1F); ",MatchSource.DOCS,math/minuit2/examples/simple/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/examples/simple/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/examples/simple/CMakeLists.txt:474,Testability,test,test,474,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. cmake_minimum_required(VERSION 3.10); # This is a test of the Minuit2 CMake build system. project(Quad1F LANGUAGES CXX). # CMake should be able to find the Minuit2 package if you have either built it or installed it; find_package(Minuit2 CONFIG REQUIRED). # Reusing the existing test file for simplicity; add_executable(Quad1F; ../../test/MnTutorial/Quad1FMain.cxx; ../../test/MnTutorial/Quad1F.h; ). # Linking with Minuit2::Minuit2 target; target_link_libraries(Quad1F PUBLIC Minuit2::Minuit2). # Run this executable as a test with make test; enable_testing(); add_test(NAME Quad1F COMMAND Quad1F); ",MatchSource.DOCS,math/minuit2/examples/simple/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/examples/simple/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/examples/simple/CMakeLists.txt:529,Testability,test,test,529,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. cmake_minimum_required(VERSION 3.10); # This is a test of the Minuit2 CMake build system. project(Quad1F LANGUAGES CXX). # CMake should be able to find the Minuit2 package if you have either built it or installed it; find_package(Minuit2 CONFIG REQUIRED). # Reusing the existing test file for simplicity; add_executable(Quad1F; ../../test/MnTutorial/Quad1FMain.cxx; ../../test/MnTutorial/Quad1F.h; ). # Linking with Minuit2::Minuit2 target; target_link_libraries(Quad1F PUBLIC Minuit2::Minuit2). # Run this executable as a test with make test; enable_testing(); add_test(NAME Quad1F COMMAND Quad1F); ",MatchSource.DOCS,math/minuit2/examples/simple/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/examples/simple/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/examples/simple/CMakeLists.txt:567,Testability,test,test,567,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. cmake_minimum_required(VERSION 3.10); # This is a test of the Minuit2 CMake build system. project(Quad1F LANGUAGES CXX). # CMake should be able to find the Minuit2 package if you have either built it or installed it; find_package(Minuit2 CONFIG REQUIRED). # Reusing the existing test file for simplicity; add_executable(Quad1F; ../../test/MnTutorial/Quad1FMain.cxx; ../../test/MnTutorial/Quad1F.h; ). # Linking with Minuit2::Minuit2 target; target_link_libraries(Quad1F PUBLIC Minuit2::Minuit2). # Run this executable as a test with make test; enable_testing(); add_test(NAME Quad1F COMMAND Quad1F); ",MatchSource.DOCS,math/minuit2/examples/simple/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/examples/simple/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/examples/simple/CMakeLists.txt:718,Testability,test,test,718,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. cmake_minimum_required(VERSION 3.10); # This is a test of the Minuit2 CMake build system. project(Quad1F LANGUAGES CXX). # CMake should be able to find the Minuit2 package if you have either built it or installed it; find_package(Minuit2 CONFIG REQUIRED). # Reusing the existing test file for simplicity; add_executable(Quad1F; ../../test/MnTutorial/Quad1FMain.cxx; ../../test/MnTutorial/Quad1F.h; ). # Linking with Minuit2::Minuit2 target; target_link_libraries(Quad1F PUBLIC Minuit2::Minuit2). # Run this executable as a test with make test; enable_testing(); add_test(NAME Quad1F COMMAND Quad1F); ",MatchSource.DOCS,math/minuit2/examples/simple/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/examples/simple/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/examples/simple/CMakeLists.txt:733,Testability,test,test,733,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. cmake_minimum_required(VERSION 3.10); # This is a test of the Minuit2 CMake build system. project(Quad1F LANGUAGES CXX). # CMake should be able to find the Minuit2 package if you have either built it or installed it; find_package(Minuit2 CONFIG REQUIRED). # Reusing the existing test file for simplicity; add_executable(Quad1F; ../../test/MnTutorial/Quad1FMain.cxx; ../../test/MnTutorial/Quad1F.h; ). # Linking with Minuit2::Minuit2 target; target_link_libraries(Quad1F PUBLIC Minuit2::Minuit2). # Run this executable as a test with make test; enable_testing(); add_test(NAME Quad1F COMMAND Quad1F); ",MatchSource.DOCS,math/minuit2/examples/simple/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/examples/simple/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/examples/simple/CMakeLists.txt:488,Usability,simpl,simplicity,488,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. cmake_minimum_required(VERSION 3.10); # This is a test of the Minuit2 CMake build system. project(Quad1F LANGUAGES CXX). # CMake should be able to find the Minuit2 package if you have either built it or installed it; find_package(Minuit2 CONFIG REQUIRED). # Reusing the existing test file for simplicity; add_executable(Quad1F; ../../test/MnTutorial/Quad1FMain.cxx; ../../test/MnTutorial/Quad1F.h; ). # Linking with Minuit2::Minuit2 target; target_link_libraries(Quad1F PUBLIC Minuit2::Minuit2). # Run this executable as a test with make test; enable_testing(); add_test(NAME Quad1F COMMAND Quad1F); ",MatchSource.DOCS,math/minuit2/examples/simple/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/examples/simple/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/math/CMakeLists.txt:254,Availability,Error,Error,254,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. set(FIT_HEADERS; ParameterSettings.h; ). set(MATH_HEADERS; Error.h; FitMethodFunction.h; Functor.h; GenAlgoOptions.h; IFunction.h; IFunctionfwd.h; IOptions.h; Minimizer.h; MinimizerOptions.h; Util.h; WrappedFunction.h; WrappedParamFunction.h; ). set(MATH_SOURCES; GenAlgoOptions.cxx; IOptions.cxx; Minimizer.cxx; MinimizerOptions.cxx; ParameterSettings.cxx; ). copy_standalone(SOURCE ../../../mathcore/inc/Fit DESTINATION ../../inc/Fit; OUTPUT FIT_HEADERS; FILES ${FIT_HEADERS}); copy_standalone(SOURCE ../../../mathcore/inc/Math DESTINATION ../../inc/Math; OUTPUT MATH_HEADERS; FILES ${MATH_HEADERS}); copy_standalone(SOURCE ../../../mathcore/src DESTINATION .; OUTPUT MATH_SOURCES; FILES ${MATH_SOURCES}). # Adding the headers helps IDEs show the correct headers on targets; add_library(Minuit2Math; ${MATH_SOURCES}; ${MATH_HEADERS}; ${FIT_HEADERS}; ). # Add alias for direct inclusion; add_library(Minuit2::Math ALIAS Minuit2Math). # Build and install directories are different, using CMake Generator expression; target_include_directories(; Minuit2Math; PUBLIC; $<BUILD_INTERFACE:${Minuit2_SOURCE_DIR}/inc>; $<INSTALL_INTERFACE:include/Minuit2>; ). # We need to add the ROOT mathcore directories if build inside of ROOT without standalone); if(minuit2_inroot AND NOT minuit2_standalone); target_include_directories(; Minuit2Math; PUBLIC; $<BUILD_INTERFACE:${Minuit2_SOURCE_DIR}/../mathcore/inc>; ); endif(). target_compile_definitions(; Minuit2Math; PRIVATE; MATH_NO_PLUGIN_MANAGER; ). target_compile_definitions(; Minuit2Math; PUBLIC; ROOT_Math_VecTypes; MATHCORE_STANDALONE; ). target_link_libraries(Minuit2Math PUBLIC Minuit2Common). target_compile_features(Minuit2Math PUBLIC cxx_auto_type cxx_static_assert); set_target_properties(Minuit2Math PROPERTIES CXX_EXTENSIONS OFF). install(TARGETS Minuit",MatchSource.DOCS,math/minuit2/src/math/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/math/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/math/CMakeLists.txt:1142,Deployability,install,install,1142,"t(MATH_HEADERS; Error.h; FitMethodFunction.h; Functor.h; GenAlgoOptions.h; IFunction.h; IFunctionfwd.h; IOptions.h; Minimizer.h; MinimizerOptions.h; Util.h; WrappedFunction.h; WrappedParamFunction.h; ). set(MATH_SOURCES; GenAlgoOptions.cxx; IOptions.cxx; Minimizer.cxx; MinimizerOptions.cxx; ParameterSettings.cxx; ). copy_standalone(SOURCE ../../../mathcore/inc/Fit DESTINATION ../../inc/Fit; OUTPUT FIT_HEADERS; FILES ${FIT_HEADERS}); copy_standalone(SOURCE ../../../mathcore/inc/Math DESTINATION ../../inc/Math; OUTPUT MATH_HEADERS; FILES ${MATH_HEADERS}); copy_standalone(SOURCE ../../../mathcore/src DESTINATION .; OUTPUT MATH_SOURCES; FILES ${MATH_SOURCES}). # Adding the headers helps IDEs show the correct headers on targets; add_library(Minuit2Math; ${MATH_SOURCES}; ${MATH_HEADERS}; ${FIT_HEADERS}; ). # Add alias for direct inclusion; add_library(Minuit2::Math ALIAS Minuit2Math). # Build and install directories are different, using CMake Generator expression; target_include_directories(; Minuit2Math; PUBLIC; $<BUILD_INTERFACE:${Minuit2_SOURCE_DIR}/inc>; $<INSTALL_INTERFACE:include/Minuit2>; ). # We need to add the ROOT mathcore directories if build inside of ROOT without standalone); if(minuit2_inroot AND NOT minuit2_standalone); target_include_directories(; Minuit2Math; PUBLIC; $<BUILD_INTERFACE:${Minuit2_SOURCE_DIR}/../mathcore/inc>; ); endif(). target_compile_definitions(; Minuit2Math; PRIVATE; MATH_NO_PLUGIN_MANAGER; ). target_compile_definitions(; Minuit2Math; PUBLIC; ROOT_Math_VecTypes; MATHCORE_STANDALONE; ). target_link_libraries(Minuit2Math PUBLIC Minuit2Common). target_compile_features(Minuit2Math PUBLIC cxx_auto_type cxx_static_assert); set_target_properties(Minuit2Math PROPERTIES CXX_EXTENSIONS OFF). install(TARGETS Minuit2Math; EXPORT Minuit2Targets; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}; ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}; ). install(FILES ${FIT_HEADERS} DESTINATION include/Minuit2/Fit); install(FILES ${MATH_HEADERS} DESTINATION include/M",MatchSource.DOCS,math/minuit2/src/math/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/math/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/math/CMakeLists.txt:1979,Deployability,install,install,1979,"; Error.h; FitMethodFunction.h; Functor.h; GenAlgoOptions.h; IFunction.h; IFunctionfwd.h; IOptions.h; Minimizer.h; MinimizerOptions.h; Util.h; WrappedFunction.h; WrappedParamFunction.h; ). set(MATH_SOURCES; GenAlgoOptions.cxx; IOptions.cxx; Minimizer.cxx; MinimizerOptions.cxx; ParameterSettings.cxx; ). copy_standalone(SOURCE ../../../mathcore/inc/Fit DESTINATION ../../inc/Fit; OUTPUT FIT_HEADERS; FILES ${FIT_HEADERS}); copy_standalone(SOURCE ../../../mathcore/inc/Math DESTINATION ../../inc/Math; OUTPUT MATH_HEADERS; FILES ${MATH_HEADERS}); copy_standalone(SOURCE ../../../mathcore/src DESTINATION .; OUTPUT MATH_SOURCES; FILES ${MATH_SOURCES}). # Adding the headers helps IDEs show the correct headers on targets; add_library(Minuit2Math; ${MATH_SOURCES}; ${MATH_HEADERS}; ${FIT_HEADERS}; ). # Add alias for direct inclusion; add_library(Minuit2::Math ALIAS Minuit2Math). # Build and install directories are different, using CMake Generator expression; target_include_directories(; Minuit2Math; PUBLIC; $<BUILD_INTERFACE:${Minuit2_SOURCE_DIR}/inc>; $<INSTALL_INTERFACE:include/Minuit2>; ). # We need to add the ROOT mathcore directories if build inside of ROOT without standalone); if(minuit2_inroot AND NOT minuit2_standalone); target_include_directories(; Minuit2Math; PUBLIC; $<BUILD_INTERFACE:${Minuit2_SOURCE_DIR}/../mathcore/inc>; ); endif(). target_compile_definitions(; Minuit2Math; PRIVATE; MATH_NO_PLUGIN_MANAGER; ). target_compile_definitions(; Minuit2Math; PUBLIC; ROOT_Math_VecTypes; MATHCORE_STANDALONE; ). target_link_libraries(Minuit2Math PUBLIC Minuit2Common). target_compile_features(Minuit2Math PUBLIC cxx_auto_type cxx_static_assert); set_target_properties(Minuit2Math PROPERTIES CXX_EXTENSIONS OFF). install(TARGETS Minuit2Math; EXPORT Minuit2Targets; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}; ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}; ). install(FILES ${FIT_HEADERS} DESTINATION include/Minuit2/Fit); install(FILES ${MATH_HEADERS} DESTINATION include/Minuit2/Math); ",MatchSource.DOCS,math/minuit2/src/math/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/math/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/math/CMakeLists.txt:2124,Deployability,install,install,2124,"; Error.h; FitMethodFunction.h; Functor.h; GenAlgoOptions.h; IFunction.h; IFunctionfwd.h; IOptions.h; Minimizer.h; MinimizerOptions.h; Util.h; WrappedFunction.h; WrappedParamFunction.h; ). set(MATH_SOURCES; GenAlgoOptions.cxx; IOptions.cxx; Minimizer.cxx; MinimizerOptions.cxx; ParameterSettings.cxx; ). copy_standalone(SOURCE ../../../mathcore/inc/Fit DESTINATION ../../inc/Fit; OUTPUT FIT_HEADERS; FILES ${FIT_HEADERS}); copy_standalone(SOURCE ../../../mathcore/inc/Math DESTINATION ../../inc/Math; OUTPUT MATH_HEADERS; FILES ${MATH_HEADERS}); copy_standalone(SOURCE ../../../mathcore/src DESTINATION .; OUTPUT MATH_SOURCES; FILES ${MATH_SOURCES}). # Adding the headers helps IDEs show the correct headers on targets; add_library(Minuit2Math; ${MATH_SOURCES}; ${MATH_HEADERS}; ${FIT_HEADERS}; ). # Add alias for direct inclusion; add_library(Minuit2::Math ALIAS Minuit2Math). # Build and install directories are different, using CMake Generator expression; target_include_directories(; Minuit2Math; PUBLIC; $<BUILD_INTERFACE:${Minuit2_SOURCE_DIR}/inc>; $<INSTALL_INTERFACE:include/Minuit2>; ). # We need to add the ROOT mathcore directories if build inside of ROOT without standalone); if(minuit2_inroot AND NOT minuit2_standalone); target_include_directories(; Minuit2Math; PUBLIC; $<BUILD_INTERFACE:${Minuit2_SOURCE_DIR}/../mathcore/inc>; ); endif(). target_compile_definitions(; Minuit2Math; PRIVATE; MATH_NO_PLUGIN_MANAGER; ). target_compile_definitions(; Minuit2Math; PUBLIC; ROOT_Math_VecTypes; MATHCORE_STANDALONE; ). target_link_libraries(Minuit2Math PUBLIC Minuit2Common). target_compile_features(Minuit2Math PUBLIC cxx_auto_type cxx_static_assert); set_target_properties(Minuit2Math PROPERTIES CXX_EXTENSIONS OFF). install(TARGETS Minuit2Math; EXPORT Minuit2Targets; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}; ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}; ). install(FILES ${FIT_HEADERS} DESTINATION include/Minuit2/Fit); install(FILES ${MATH_HEADERS} DESTINATION include/Minuit2/Math); ",MatchSource.DOCS,math/minuit2/src/math/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/math/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/math/CMakeLists.txt:2187,Deployability,install,install,2187,"; Error.h; FitMethodFunction.h; Functor.h; GenAlgoOptions.h; IFunction.h; IFunctionfwd.h; IOptions.h; Minimizer.h; MinimizerOptions.h; Util.h; WrappedFunction.h; WrappedParamFunction.h; ). set(MATH_SOURCES; GenAlgoOptions.cxx; IOptions.cxx; Minimizer.cxx; MinimizerOptions.cxx; ParameterSettings.cxx; ). copy_standalone(SOURCE ../../../mathcore/inc/Fit DESTINATION ../../inc/Fit; OUTPUT FIT_HEADERS; FILES ${FIT_HEADERS}); copy_standalone(SOURCE ../../../mathcore/inc/Math DESTINATION ../../inc/Math; OUTPUT MATH_HEADERS; FILES ${MATH_HEADERS}); copy_standalone(SOURCE ../../../mathcore/src DESTINATION .; OUTPUT MATH_SOURCES; FILES ${MATH_SOURCES}). # Adding the headers helps IDEs show the correct headers on targets; add_library(Minuit2Math; ${MATH_SOURCES}; ${MATH_HEADERS}; ${FIT_HEADERS}; ). # Add alias for direct inclusion; add_library(Minuit2::Math ALIAS Minuit2Math). # Build and install directories are different, using CMake Generator expression; target_include_directories(; Minuit2Math; PUBLIC; $<BUILD_INTERFACE:${Minuit2_SOURCE_DIR}/inc>; $<INSTALL_INTERFACE:include/Minuit2>; ). # We need to add the ROOT mathcore directories if build inside of ROOT without standalone); if(minuit2_inroot AND NOT minuit2_standalone); target_include_directories(; Minuit2Math; PUBLIC; $<BUILD_INTERFACE:${Minuit2_SOURCE_DIR}/../mathcore/inc>; ); endif(). target_compile_definitions(; Minuit2Math; PRIVATE; MATH_NO_PLUGIN_MANAGER; ). target_compile_definitions(; Minuit2Math; PUBLIC; ROOT_Math_VecTypes; MATHCORE_STANDALONE; ). target_link_libraries(Minuit2Math PUBLIC Minuit2Common). target_compile_features(Minuit2Math PUBLIC cxx_auto_type cxx_static_assert); set_target_properties(Minuit2Math PROPERTIES CXX_EXTENSIONS OFF). install(TARGETS Minuit2Math; EXPORT Minuit2Targets; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}; ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}; ). install(FILES ${FIT_HEADERS} DESTINATION include/Minuit2/Fit); install(FILES ${MATH_HEADERS} DESTINATION include/Minuit2/Math); ",MatchSource.DOCS,math/minuit2/src/math/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/math/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/math/CMakeLists.txt:395,Integrability,Wrap,WrappedFunction,395,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. set(FIT_HEADERS; ParameterSettings.h; ). set(MATH_HEADERS; Error.h; FitMethodFunction.h; Functor.h; GenAlgoOptions.h; IFunction.h; IFunctionfwd.h; IOptions.h; Minimizer.h; MinimizerOptions.h; Util.h; WrappedFunction.h; WrappedParamFunction.h; ). set(MATH_SOURCES; GenAlgoOptions.cxx; IOptions.cxx; Minimizer.cxx; MinimizerOptions.cxx; ParameterSettings.cxx; ). copy_standalone(SOURCE ../../../mathcore/inc/Fit DESTINATION ../../inc/Fit; OUTPUT FIT_HEADERS; FILES ${FIT_HEADERS}); copy_standalone(SOURCE ../../../mathcore/inc/Math DESTINATION ../../inc/Math; OUTPUT MATH_HEADERS; FILES ${MATH_HEADERS}); copy_standalone(SOURCE ../../../mathcore/src DESTINATION .; OUTPUT MATH_SOURCES; FILES ${MATH_SOURCES}). # Adding the headers helps IDEs show the correct headers on targets; add_library(Minuit2Math; ${MATH_SOURCES}; ${MATH_HEADERS}; ${FIT_HEADERS}; ). # Add alias for direct inclusion; add_library(Minuit2::Math ALIAS Minuit2Math). # Build and install directories are different, using CMake Generator expression; target_include_directories(; Minuit2Math; PUBLIC; $<BUILD_INTERFACE:${Minuit2_SOURCE_DIR}/inc>; $<INSTALL_INTERFACE:include/Minuit2>; ). # We need to add the ROOT mathcore directories if build inside of ROOT without standalone); if(minuit2_inroot AND NOT minuit2_standalone); target_include_directories(; Minuit2Math; PUBLIC; $<BUILD_INTERFACE:${Minuit2_SOURCE_DIR}/../mathcore/inc>; ); endif(). target_compile_definitions(; Minuit2Math; PRIVATE; MATH_NO_PLUGIN_MANAGER; ). target_compile_definitions(; Minuit2Math; PUBLIC; ROOT_Math_VecTypes; MATHCORE_STANDALONE; ). target_link_libraries(Minuit2Math PUBLIC Minuit2Common). target_compile_features(Minuit2Math PUBLIC cxx_auto_type cxx_static_assert); set_target_properties(Minuit2Math PROPERTIES CXX_EXTENSIONS OFF). install(TARGETS Minuit",MatchSource.DOCS,math/minuit2/src/math/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/math/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/math/CMakeLists.txt:414,Integrability,Wrap,WrappedParamFunction,414,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. set(FIT_HEADERS; ParameterSettings.h; ). set(MATH_HEADERS; Error.h; FitMethodFunction.h; Functor.h; GenAlgoOptions.h; IFunction.h; IFunctionfwd.h; IOptions.h; Minimizer.h; MinimizerOptions.h; Util.h; WrappedFunction.h; WrappedParamFunction.h; ). set(MATH_SOURCES; GenAlgoOptions.cxx; IOptions.cxx; Minimizer.cxx; MinimizerOptions.cxx; ParameterSettings.cxx; ). copy_standalone(SOURCE ../../../mathcore/inc/Fit DESTINATION ../../inc/Fit; OUTPUT FIT_HEADERS; FILES ${FIT_HEADERS}); copy_standalone(SOURCE ../../../mathcore/inc/Math DESTINATION ../../inc/Math; OUTPUT MATH_HEADERS; FILES ${MATH_HEADERS}); copy_standalone(SOURCE ../../../mathcore/src DESTINATION .; OUTPUT MATH_SOURCES; FILES ${MATH_SOURCES}). # Adding the headers helps IDEs show the correct headers on targets; add_library(Minuit2Math; ${MATH_SOURCES}; ${MATH_HEADERS}; ${FIT_HEADERS}; ). # Add alias for direct inclusion; add_library(Minuit2::Math ALIAS Minuit2Math). # Build and install directories are different, using CMake Generator expression; target_include_directories(; Minuit2Math; PUBLIC; $<BUILD_INTERFACE:${Minuit2_SOURCE_DIR}/inc>; $<INSTALL_INTERFACE:include/Minuit2>; ). # We need to add the ROOT mathcore directories if build inside of ROOT without standalone); if(minuit2_inroot AND NOT minuit2_standalone); target_include_directories(; Minuit2Math; PUBLIC; $<BUILD_INTERFACE:${Minuit2_SOURCE_DIR}/../mathcore/inc>; ); endif(). target_compile_definitions(; Minuit2Math; PRIVATE; MATH_NO_PLUGIN_MANAGER; ). target_compile_definitions(; Minuit2Math; PUBLIC; ROOT_Math_VecTypes; MATHCORE_STANDALONE; ). target_link_libraries(Minuit2Math PUBLIC Minuit2Common). target_compile_features(Minuit2Math PUBLIC cxx_auto_type cxx_static_assert); set_target_properties(Minuit2Math PROPERTIES CXX_EXTENSIONS OFF). install(TARGETS Minuit",MatchSource.DOCS,math/minuit2/src/math/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/math/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnTutorial/CMakeLists.txt:479,Testability,test,test,479,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. add_minuit2_test(Quad1F Quad1FMain.cxx Quad1F.h). add_minuit2_test(Quad4F Quad4FMain.cxx Quad4F.h). add_minuit2_test(Quad8F Quad8FMain.cxx Quad8F.h). add_minuit2_test(Quad12F Quad12FMain.cxx Quad12F.h). add_test(; NAME ExampleCMakeBuild; COMMAND ""${CMAKE_CTEST_COMMAND}""; --build-and-test; ""${Minuit2_SOURCE_DIR}/examples/simple/""; ""${CMAKE_CURRENT_BINARY_DIR}/simple/""; --build-generator ""${CMAKE_GENERATOR}""; --test-command ""${CMAKE_CTEST_COMMAND}""; ); ",MatchSource.DOCS,math/minuit2/test/MnTutorial/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnTutorial/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnTutorial/CMakeLists.txt:608,Testability,test,test-command,608,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. add_minuit2_test(Quad1F Quad1FMain.cxx Quad1F.h). add_minuit2_test(Quad4F Quad4FMain.cxx Quad4F.h). add_minuit2_test(Quad8F Quad8FMain.cxx Quad8F.h). add_minuit2_test(Quad12F Quad12FMain.cxx Quad12F.h). add_test(; NAME ExampleCMakeBuild; COMMAND ""${CMAKE_CTEST_COMMAND}""; --build-and-test; ""${Minuit2_SOURCE_DIR}/examples/simple/""; ""${CMAKE_CURRENT_BINARY_DIR}/simple/""; --build-generator ""${CMAKE_GENERATOR}""; --test-command ""${CMAKE_CTEST_COMMAND}""; ); ",MatchSource.DOCS,math/minuit2/test/MnTutorial/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnTutorial/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnTutorial/CMakeLists.txt:517,Usability,simpl,simple,517,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. add_minuit2_test(Quad1F Quad1FMain.cxx Quad1F.h). add_minuit2_test(Quad4F Quad4FMain.cxx Quad4F.h). add_minuit2_test(Quad8F Quad8FMain.cxx Quad8F.h). add_minuit2_test(Quad12F Quad12FMain.cxx Quad12F.h). add_test(; NAME ExampleCMakeBuild; COMMAND ""${CMAKE_CTEST_COMMAND}""; --build-and-test; ""${Minuit2_SOURCE_DIR}/examples/simple/""; ""${CMAKE_CURRENT_BINARY_DIR}/simple/""; --build-generator ""${CMAKE_GENERATOR}""; --test-command ""${CMAKE_CTEST_COMMAND}""; ); ",MatchSource.DOCS,math/minuit2/test/MnTutorial/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnTutorial/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnTutorial/CMakeLists.txt:556,Usability,simpl,simple,556,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. add_minuit2_test(Quad1F Quad1FMain.cxx Quad1F.h). add_minuit2_test(Quad4F Quad4FMain.cxx Quad4F.h). add_minuit2_test(Quad8F Quad8FMain.cxx Quad8F.h). add_minuit2_test(Quad12F Quad12FMain.cxx Quad12F.h). add_test(; NAME ExampleCMakeBuild; COMMAND ""${CMAKE_CTEST_COMMAND}""; --build-and-test; ""${Minuit2_SOURCE_DIR}/examples/simple/""; ""${CMAKE_CURRENT_BINARY_DIR}/simple/""; --build-generator ""${CMAKE_GENERATOR}""; --test-command ""${CMAKE_CTEST_COMMAND}""; ); ",MatchSource.DOCS,math/minuit2/test/MnTutorial/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnTutorial/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt:442,Modifiability,Config,Configure,442,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. set(Libraries Core MathCore Minuit Unuran Gpad Hist). if(mathmore); list(APPEND Libraries MathMore); endif(). set(TestUnuranSource; unuranSimple.cxx; unuranHist.cxx; unuranDiscrete.cxx; unuranDistr.cxx; unuranMulti2D.cxx; unuranMultiDim.cxx; ). # Configure some tests as longtest; set(unuranMultiDim_LABELS longtest); set(unuranDiscrete_LABELS longtest). #---Build and add all the defined test in the list---------------; foreach(file ${TestUnuranSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(unuran-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). # google tests; ROOT_ADD_GTEST(testUnuranSampler unuranSampler.cxx LIBRARIES ${Libraries} ); ",MatchSource.DOCS,math/unuran/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt:309,Testability,Test,TestUnuranSource,309,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. set(Libraries Core MathCore Minuit Unuran Gpad Hist). if(mathmore); list(APPEND Libraries MathMore); endif(). set(TestUnuranSource; unuranSimple.cxx; unuranHist.cxx; unuranDiscrete.cxx; unuranDistr.cxx; unuranMulti2D.cxx; unuranMultiDim.cxx; ). # Configure some tests as longtest; set(unuranMultiDim_LABELS longtest); set(unuranDiscrete_LABELS longtest). #---Build and add all the defined test in the list---------------; foreach(file ${TestUnuranSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(unuran-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). # google tests; ROOT_ADD_GTEST(testUnuranSampler unuranSampler.cxx LIBRARIES ${Libraries} ); ",MatchSource.DOCS,math/unuran/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt:457,Testability,test,tests,457,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. set(Libraries Core MathCore Minuit Unuran Gpad Hist). if(mathmore); list(APPEND Libraries MathMore); endif(). set(TestUnuranSource; unuranSimple.cxx; unuranHist.cxx; unuranDiscrete.cxx; unuranDistr.cxx; unuranMulti2D.cxx; unuranMultiDim.cxx; ). # Configure some tests as longtest; set(unuranMultiDim_LABELS longtest); set(unuranDiscrete_LABELS longtest). #---Build and add all the defined test in the list---------------; foreach(file ${TestUnuranSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(unuran-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). # google tests; ROOT_ADD_GTEST(testUnuranSampler unuranSampler.cxx LIBRARIES ${Libraries} ); ",MatchSource.DOCS,math/unuran/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt:584,Testability,test,test,584,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. set(Libraries Core MathCore Minuit Unuran Gpad Hist). if(mathmore); list(APPEND Libraries MathMore); endif(). set(TestUnuranSource; unuranSimple.cxx; unuranHist.cxx; unuranDiscrete.cxx; unuranDistr.cxx; unuranMulti2D.cxx; unuranMultiDim.cxx; ). # Configure some tests as longtest; set(unuranMultiDim_LABELS longtest); set(unuranDiscrete_LABELS longtest). #---Build and add all the defined test in the list---------------; foreach(file ${TestUnuranSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(unuran-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). # google tests; ROOT_ADD_GTEST(testUnuranSampler unuranSampler.cxx LIBRARIES ${Libraries} ); ",MatchSource.DOCS,math/unuran/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt:632,Testability,Test,TestUnuranSource,632,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. set(Libraries Core MathCore Minuit Unuran Gpad Hist). if(mathmore); list(APPEND Libraries MathMore); endif(). set(TestUnuranSource; unuranSimple.cxx; unuranHist.cxx; unuranDiscrete.cxx; unuranDistr.cxx; unuranMulti2D.cxx; unuranMultiDim.cxx; ). # Configure some tests as longtest; set(unuranMultiDim_LABELS longtest); set(unuranDiscrete_LABELS longtest). #---Build and add all the defined test in the list---------------; foreach(file ${TestUnuranSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(unuran-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). # google tests; ROOT_ADD_GTEST(testUnuranSampler unuranSampler.cxx LIBRARIES ${Libraries} ); ",MatchSource.DOCS,math/unuran/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt:675,Testability,test,testname,675,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. set(Libraries Core MathCore Minuit Unuran Gpad Hist). if(mathmore); list(APPEND Libraries MathMore); endif(). set(TestUnuranSource; unuranSimple.cxx; unuranHist.cxx; unuranDiscrete.cxx; unuranDistr.cxx; unuranMulti2D.cxx; unuranMultiDim.cxx; ). # Configure some tests as longtest; set(unuranMultiDim_LABELS longtest); set(unuranDiscrete_LABELS longtest). #---Build and add all the defined test in the list---------------; foreach(file ${TestUnuranSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(unuran-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). # google tests; ROOT_ADD_GTEST(testUnuranSampler unuranSampler.cxx LIBRARIES ${Libraries} ); ",MatchSource.DOCS,math/unuran/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt:720,Testability,test,testname,720,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. set(Libraries Core MathCore Minuit Unuran Gpad Hist). if(mathmore); list(APPEND Libraries MathMore); endif(). set(TestUnuranSource; unuranSimple.cxx; unuranHist.cxx; unuranDiscrete.cxx; unuranDistr.cxx; unuranMulti2D.cxx; unuranMultiDim.cxx; ). # Configure some tests as longtest; set(unuranMultiDim_LABELS longtest); set(unuranDiscrete_LABELS longtest). #---Build and add all the defined test in the list---------------; foreach(file ${TestUnuranSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(unuran-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). # google tests; ROOT_ADD_GTEST(testUnuranSampler unuranSampler.cxx LIBRARIES ${Libraries} ); ",MatchSource.DOCS,math/unuran/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt:786,Testability,test,testname,786,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. set(Libraries Core MathCore Minuit Unuran Gpad Hist). if(mathmore); list(APPEND Libraries MathMore); endif(). set(TestUnuranSource; unuranSimple.cxx; unuranHist.cxx; unuranDiscrete.cxx; unuranDistr.cxx; unuranMulti2D.cxx; unuranMultiDim.cxx; ). # Configure some tests as longtest; set(unuranMultiDim_LABELS longtest); set(unuranDiscrete_LABELS longtest). #---Build and add all the defined test in the list---------------; foreach(file ${TestUnuranSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(unuran-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). # google tests; ROOT_ADD_GTEST(testUnuranSampler unuranSampler.cxx LIBRARIES ${Libraries} ); ",MatchSource.DOCS,math/unuran/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt:806,Testability,test,testname,806,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. set(Libraries Core MathCore Minuit Unuran Gpad Hist). if(mathmore); list(APPEND Libraries MathMore); endif(). set(TestUnuranSource; unuranSimple.cxx; unuranHist.cxx; unuranDiscrete.cxx; unuranDistr.cxx; unuranMulti2D.cxx; unuranMultiDim.cxx; ). # Configure some tests as longtest; set(unuranMultiDim_LABELS longtest); set(unuranDiscrete_LABELS longtest). #---Build and add all the defined test in the list---------------; foreach(file ${TestUnuranSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(unuran-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). # google tests; ROOT_ADD_GTEST(testUnuranSampler unuranSampler.cxx LIBRARIES ${Libraries} ); ",MatchSource.DOCS,math/unuran/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt:827,Testability,test,testname,827,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. set(Libraries Core MathCore Minuit Unuran Gpad Hist). if(mathmore); list(APPEND Libraries MathMore); endif(). set(TestUnuranSource; unuranSimple.cxx; unuranHist.cxx; unuranDiscrete.cxx; unuranDistr.cxx; unuranMulti2D.cxx; unuranMultiDim.cxx; ). # Configure some tests as longtest; set(unuranMultiDim_LABELS longtest); set(unuranDiscrete_LABELS longtest). #---Build and add all the defined test in the list---------------; foreach(file ${TestUnuranSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(unuran-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). # google tests; ROOT_ADD_GTEST(testUnuranSampler unuranSampler.cxx LIBRARIES ${Libraries} ); ",MatchSource.DOCS,math/unuran/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt:870,Testability,test,tests,870,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. set(Libraries Core MathCore Minuit Unuran Gpad Hist). if(mathmore); list(APPEND Libraries MathMore); endif(). set(TestUnuranSource; unuranSimple.cxx; unuranHist.cxx; unuranDiscrete.cxx; unuranDistr.cxx; unuranMulti2D.cxx; unuranMultiDim.cxx; ). # Configure some tests as longtest; set(unuranMultiDim_LABELS longtest); set(unuranDiscrete_LABELS longtest). #---Build and add all the defined test in the list---------------; foreach(file ${TestUnuranSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(unuran-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). # google tests; ROOT_ADD_GTEST(testUnuranSampler unuranSampler.cxx LIBRARIES ${Libraries} ); ",MatchSource.DOCS,math/unuran/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt:892,Testability,test,testUnuranSampler,892,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. set(Libraries Core MathCore Minuit Unuran Gpad Hist). if(mathmore); list(APPEND Libraries MathMore); endif(). set(TestUnuranSource; unuranSimple.cxx; unuranHist.cxx; unuranDiscrete.cxx; unuranDistr.cxx; unuranMulti2D.cxx; unuranMultiDim.cxx; ). # Configure some tests as longtest; set(unuranMultiDim_LABELS longtest); set(unuranDiscrete_LABELS longtest). #---Build and add all the defined test in the list---------------; foreach(file ${TestUnuranSource}); get_filename_component(testname ${file} NAME_WE); ROOT_EXECUTABLE(${testname} ${file} LIBRARIES ${Libraries}); ROOT_ADD_TEST(unuran-${testname} COMMAND ${testname} LABELS ${${testname}_LABELS}); endforeach(). # google tests; ROOT_ADD_GTEST(testUnuranSampler unuranSampler.cxx LIBRARIES ${Libraries} ); ",MatchSource.DOCS,math/unuran/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/misc/gdbPrinters/CMakeLists.txt:1047,Deployability,install,install,1047,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT MSVC AND _BUILD_TYPE_UPPER MATCHES ""DEBUG|RELWITHDEBINFO""); file(GLOB PRETTY_PRINTERS ""*.so-gdb.py""); if(NOT roofit); list(FILTER PRETTY_PRINTERS EXCLUDE REGEX libRooFitCore.so-gdb.py); endif(); set(PRETTY_PRINTER_DESTS); foreach(PRETTY_PRINTER ${PRETTY_PRINTERS}); get_filename_component(PRETTY_PRINTER_DEST ${PRETTY_PRINTER} NAME); if(soversion); string(REPLACE "".so-gdb.py"" "".so.${ROOT_VERSION}-gdb.py""; PRETTY_PRINTER_DEST ${PRETTY_PRINTER_DEST}); endif(soversion); set(PRETTY_PRINTER_DEST ${CMAKE_BINARY_DIR}/lib/${PRETTY_PRINTER_DEST}); add_custom_command(OUTPUT ${PRETTY_PRINTER_DEST}; COMMAND ${CMAKE_COMMAND} -E copy ${PRETTY_PRINTER} ${PRETTY_PRINTER_DEST}; DEPENDS ${PRETTY_PRINTER}); list(APPEND PRETTY_PRINTER_DESTS ${PRETTY_PRINTER_DEST}); endforeach(); add_custom_target(copy_pretty_printers ALL DEPENDS ${PRETTY_PRINTER_DESTS}). install(FILES ${PRETTY_PRINTER_DESTS}; DESTINATION ${CMAKE_INSTALL_LIBDIR}; CONFIGURATIONS Debug RelWithDebInfo); endif(); ",MatchSource.DOCS,misc/gdbPrinters/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/gdbPrinters/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/misc/gdbPrinters/CMakeLists.txt:1123,Deployability,CONFIGURAT,CONFIGURATIONS,1123,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT MSVC AND _BUILD_TYPE_UPPER MATCHES ""DEBUG|RELWITHDEBINFO""); file(GLOB PRETTY_PRINTERS ""*.so-gdb.py""); if(NOT roofit); list(FILTER PRETTY_PRINTERS EXCLUDE REGEX libRooFitCore.so-gdb.py); endif(); set(PRETTY_PRINTER_DESTS); foreach(PRETTY_PRINTER ${PRETTY_PRINTERS}); get_filename_component(PRETTY_PRINTER_DEST ${PRETTY_PRINTER} NAME); if(soversion); string(REPLACE "".so-gdb.py"" "".so.${ROOT_VERSION}-gdb.py""; PRETTY_PRINTER_DEST ${PRETTY_PRINTER_DEST}); endif(soversion); set(PRETTY_PRINTER_DEST ${CMAKE_BINARY_DIR}/lib/${PRETTY_PRINTER_DEST}); add_custom_command(OUTPUT ${PRETTY_PRINTER_DEST}; COMMAND ${CMAKE_COMMAND} -E copy ${PRETTY_PRINTER} ${PRETTY_PRINTER_DEST}; DEPENDS ${PRETTY_PRINTER}); list(APPEND PRETTY_PRINTER_DESTS ${PRETTY_PRINTER_DEST}); endforeach(); add_custom_target(copy_pretty_printers ALL DEPENDS ${PRETTY_PRINTER_DESTS}). install(FILES ${PRETTY_PRINTER_DESTS}; DESTINATION ${CMAKE_INSTALL_LIBDIR}; CONFIGURATIONS Debug RelWithDebInfo); endif(); ",MatchSource.DOCS,misc/gdbPrinters/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/gdbPrinters/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/misc/gdbPrinters/CMakeLists.txt:870,Integrability,DEPEND,DEPENDS,870,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT MSVC AND _BUILD_TYPE_UPPER MATCHES ""DEBUG|RELWITHDEBINFO""); file(GLOB PRETTY_PRINTERS ""*.so-gdb.py""); if(NOT roofit); list(FILTER PRETTY_PRINTERS EXCLUDE REGEX libRooFitCore.so-gdb.py); endif(); set(PRETTY_PRINTER_DESTS); foreach(PRETTY_PRINTER ${PRETTY_PRINTERS}); get_filename_component(PRETTY_PRINTER_DEST ${PRETTY_PRINTER} NAME); if(soversion); string(REPLACE "".so-gdb.py"" "".so.${ROOT_VERSION}-gdb.py""; PRETTY_PRINTER_DEST ${PRETTY_PRINTER_DEST}); endif(soversion); set(PRETTY_PRINTER_DEST ${CMAKE_BINARY_DIR}/lib/${PRETTY_PRINTER_DEST}); add_custom_command(OUTPUT ${PRETTY_PRINTER_DEST}; COMMAND ${CMAKE_COMMAND} -E copy ${PRETTY_PRINTER} ${PRETTY_PRINTER_DEST}; DEPENDS ${PRETTY_PRINTER}); list(APPEND PRETTY_PRINTER_DESTS ${PRETTY_PRINTER_DEST}); endforeach(); add_custom_target(copy_pretty_printers ALL DEPENDS ${PRETTY_PRINTER_DESTS}). install(FILES ${PRETTY_PRINTER_DESTS}; DESTINATION ${CMAKE_INSTALL_LIBDIR}; CONFIGURATIONS Debug RelWithDebInfo); endif(); ",MatchSource.DOCS,misc/gdbPrinters/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/gdbPrinters/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/misc/gdbPrinters/CMakeLists.txt:1013,Integrability,DEPEND,DEPENDS,1013,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT MSVC AND _BUILD_TYPE_UPPER MATCHES ""DEBUG|RELWITHDEBINFO""); file(GLOB PRETTY_PRINTERS ""*.so-gdb.py""); if(NOT roofit); list(FILTER PRETTY_PRINTERS EXCLUDE REGEX libRooFitCore.so-gdb.py); endif(); set(PRETTY_PRINTER_DESTS); foreach(PRETTY_PRINTER ${PRETTY_PRINTERS}); get_filename_component(PRETTY_PRINTER_DEST ${PRETTY_PRINTER} NAME); if(soversion); string(REPLACE "".so-gdb.py"" "".so.${ROOT_VERSION}-gdb.py""; PRETTY_PRINTER_DEST ${PRETTY_PRINTER_DEST}); endif(soversion); set(PRETTY_PRINTER_DEST ${CMAKE_BINARY_DIR}/lib/${PRETTY_PRINTER_DEST}); add_custom_command(OUTPUT ${PRETTY_PRINTER_DEST}; COMMAND ${CMAKE_COMMAND} -E copy ${PRETTY_PRINTER} ${PRETTY_PRINTER_DEST}; DEPENDS ${PRETTY_PRINTER}); list(APPEND PRETTY_PRINTER_DESTS ${PRETTY_PRINTER_DEST}); endforeach(); add_custom_target(copy_pretty_printers ALL DEPENDS ${PRETTY_PRINTER_DESTS}). install(FILES ${PRETTY_PRINTER_DESTS}; DESTINATION ${CMAKE_INSTALL_LIBDIR}; CONFIGURATIONS Debug RelWithDebInfo); endif(); ",MatchSource.DOCS,misc/gdbPrinters/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/gdbPrinters/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/misc/gdbPrinters/CMakeLists.txt:1123,Modifiability,CONFIG,CONFIGURATIONS,1123,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. if(NOT MSVC AND _BUILD_TYPE_UPPER MATCHES ""DEBUG|RELWITHDEBINFO""); file(GLOB PRETTY_PRINTERS ""*.so-gdb.py""); if(NOT roofit); list(FILTER PRETTY_PRINTERS EXCLUDE REGEX libRooFitCore.so-gdb.py); endif(); set(PRETTY_PRINTER_DESTS); foreach(PRETTY_PRINTER ${PRETTY_PRINTERS}); get_filename_component(PRETTY_PRINTER_DEST ${PRETTY_PRINTER} NAME); if(soversion); string(REPLACE "".so-gdb.py"" "".so.${ROOT_VERSION}-gdb.py""; PRETTY_PRINTER_DEST ${PRETTY_PRINTER_DEST}); endif(soversion); set(PRETTY_PRINTER_DEST ${CMAKE_BINARY_DIR}/lib/${PRETTY_PRINTER_DEST}); add_custom_command(OUTPUT ${PRETTY_PRINTER_DEST}; COMMAND ${CMAKE_COMMAND} -E copy ${PRETTY_PRINTER} ${PRETTY_PRINTER_DEST}; DEPENDS ${PRETTY_PRINTER}); list(APPEND PRETTY_PRINTER_DESTS ${PRETTY_PRINTER_DEST}); endforeach(); add_custom_target(copy_pretty_printers ALL DEPENDS ${PRETTY_PRINTER_DESTS}). install(FILES ${PRETTY_PRINTER_DESTS}; DESTINATION ${CMAKE_INSTALL_LIBDIR}; CONFIGURATIONS Debug RelWithDebInfo); endif(); ",MatchSource.DOCS,misc/gdbPrinters/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/gdbPrinters/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/misc/minicern/CMakeLists.txt:618,Performance,optimiz,optimization,618,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT misc/minicern package; ############################################################################. ROOT_LINKER_LIBRARY(minicern *.c *.f TYPE STATIC); set_property(TARGET minicern PROPERTY POSITION_INDEPENDENT_CODE ON); target_link_libraries(minicern ${CMAKE_Fortran_IMPLICIT_LINK_LIBRARIES}). # Disable optimization since it some cases was causing crashes.; # Disable warnings, since what has worked for 40 years...; # (see https://sft.its.cern.ch/jira/browse/ROOT-9179 for the warnings); set_target_properties(minicern PROPERTIES COMPILE_FLAGS ""-O0 -w""); ",MatchSource.DOCS,misc/minicern/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/minicern/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ChangeLog.txt:16,Deployability,release,release,16,1.0:; * Initial release.; ,MatchSource.DOCS,misc/rootql/ChangeLog.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ChangeLog.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:14363,Availability,REPAIR,REPAIR,14363,"other free; programs whose distribution conditions are different, write to the author; to ask for permission. For software which is copyrighted by the Free; Software Foundation, write to the Free Software Foundation; we sometimes; make exceptions for this. Our decision will be guided by the two goals; of preserving the free status of all derivatives of our free software and; of promoting the sharing and reuse of software generally. NO WARRANTY. 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY; FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN; OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES; PROVIDE THE PROGRAM ""AS IS"" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED; OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF; MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS; TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE; PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,; REPAIR OR CORRECTION. 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING; WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR; REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,; INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING; OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED; TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY; YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER; PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE; POSSIBILITY OF SUCH DAMAGES. END OF TERMS AND CONDITIONS. How to Apply These Terms to Your New Programs. If you develop a new program, and you want it to be of the greatest; possible use to the public, the best way to achieve this is to make it; free software which everyone can redistribute and change under these terms. To do so, attach the following",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:14857,Availability,FAILURE,FAILURE,14857,"tware and; of promoting the sharing and reuse of software generally. NO WARRANTY. 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY; FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN; OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES; PROVIDE THE PROGRAM ""AS IS"" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED; OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF; MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS; TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE; PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,; REPAIR OR CORRECTION. 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING; WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR; REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,; INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING; OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED; TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY; YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER; PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE; POSSIBILITY OF SUCH DAMAGES. END OF TERMS AND CONDITIONS. How to Apply These Terms to Your New Programs. If you develop a new program, and you want it to be of the greatest; possible use to the public, the best way to achieve this is to make it; free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest; to attach them to the start of each source file to most effectively; convey the exclusion of warranty; and each file should have at least; the ""copyright"" line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.>; Copyright (C) <year> <name of author>. This pr",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:8261,Deployability,install,installation,8261,"distributed under the terms of Sections; 1 and 2 above on a medium customarily used for software interchange; or,. b) Accompany it with a written offer, valid for at least three; years, to give any third party, for a charge no more than your; cost of physically performing source distribution, a complete; machine-readable copy of the corresponding source code, to be; distributed under the terms of Sections 1 and 2 above on a medium; customarily used for software interchange; or,. c) Accompany it with the information you received as to the offer; to distribute corresponding source code. (This alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (compiler, kernel, and so on) of the; operating system on which the executable runs, unless that component; itself accompanies the executable. If distribution of executable or object code is made by offering; access to copy from a designated place, then offering equivalent; access to copy the source code from the same place counts as; distribution of the source code, even though third parties are not; compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program; except as expressly provided under this License. Any attempt; otherwise to copy, modify, sublicense or distribute the Program is; void, and will automatically terminate your ",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:1062,Energy Efficiency,charge,charge,1062," 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA; Everyone is permitted to copy and distribute verbatim copies; of this license document, but changing it is not allowed. Preamble. The licenses for most software are designed to take away your; freedom to share and change it. By contrast, the GNU General Public; License is intended to guarantee your freedom to share and change free; software--to make sure the software is free for all its users. This; General Public License applies to most of the Free Software; Foundation's software and to any other program whose authors commit to; using it. (Some other Free Software Foundation software is covered by; the GNU Lesser General Public License instead.) You can apply it to; your programs, too. When we speak of free software, we are referring to freedom, not; price. Our General Public Licenses are designed to make sure that you; have the freedom to distribute copies of free software (and charge for; this service if you wish), that you receive source code or can get it; if you want it, that you can change the software or use pieces of it; in new free programs; and that you know you can do these things. To protect your rights, we need to make restrictions that forbid; anyone to deny you these rights or to ask you to surrender the rights.; These restrictions translate to certain responsibilities for you if you; distribute copies of the software, or if you modify it. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must give the recipients all the rights that; you have. You must make sure that they, too, receive or can get the; source code. And you must show them these terms so they know their; rights. We protect your rights with two steps: (1) copyright the software, and; (2) offer you this license which gives you legal permission to copy,; distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain; that everyone understands th",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:4365,Energy Efficiency,charge,charge,4365,"nslation is included without limitation in; the term ""modification"".) Each licensee is addressed as ""you"". Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; running the Program is not restricted, and the output from the Program; is covered only if its contents constitute a work based on the; Program (independent of having been made by running the Program).; Whether that is true depends on what the Program does. 1. You may copy and distribute verbatim copies of the Program's; source code as you receive it, in any medium, provided that you; conspicuously and appropriately publish on each copy an appropriate; copyright notice and disclaimer of warranty; keep intact all the; notices that refer to this License and to the absence of any warranty;; and give any other recipients of the Program a copy of this License; along with the Program. You may charge a fee for the physical act of transferring a copy, and; you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Program or any portion; of it, thus forming a work based on the Program, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) You must cause the modified files to carry prominent notices; stating that you changed the files and the date of any change. b) You must cause any work that you distribute or publish, that in; whole or in part contains or is derived from the Program or any; part thereof, to be licensed as a whole at no charge to all third; parties under the terms of this License. c) If the modified program normally reads commands interactively; when run, you must cause it, when started running for such; interactive use in the most ordinary way, to print or display an; announcement including an appropriate copyright notice and a; notice that there is no warranty (or else, s",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:5068,Energy Efficiency,charge,charge,5068,"ou receive it, in any medium, provided that you; conspicuously and appropriately publish on each copy an appropriate; copyright notice and disclaimer of warranty; keep intact all the; notices that refer to this License and to the absence of any warranty;; and give any other recipients of the Program a copy of this License; along with the Program. You may charge a fee for the physical act of transferring a copy, and; you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Program or any portion; of it, thus forming a work based on the Program, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) You must cause the modified files to carry prominent notices; stating that you changed the files and the date of any change. b) You must cause any work that you distribute or publish, that in; whole or in part contains or is derived from the Program or any; part thereof, to be licensed as a whole at no charge to all third; parties under the terms of this License. c) If the modified program normally reads commands interactively; when run, you must cause it, when started running for such; interactive use in the most ordinary way, to print or display an; announcement including an appropriate copyright notice and a; notice that there is no warranty (or else, saying that you provide; a warranty) and that users may redistribute the program under; these conditions, and telling the user how to view a copy of this; License. (Exception: if the Program itself is interactive but; does not normally print such an announcement, your work based on; the Program is not required to print an announcement.). These requirements apply to the modified work as a whole. If; identifiable sections of that work are not derived from the Program,; and can be reasonably considered independent and separate works in; themselves, then this License, and its ter",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:7393,Energy Efficiency,charge,charge,7393,"rk written entirely by you; rather, the intent is to; exercise the right to control the distribution of derivative or; collective works based on the Program. In addition, mere aggregation of another work not based on the Program; with the Program (or with a work based on the Program) on a volume of; a storage or distribution medium does not bring the other work under; the scope of this License. 3. You may copy and distribute the Program (or a work based on it,; under Section 2) in object code or executable form under the terms of; Sections 1 and 2 above provided that you also do one of the following:. a) Accompany it with the complete corresponding machine-readable; source code, which must be distributed under the terms of Sections; 1 and 2 above on a medium customarily used for software interchange; or,. b) Accompany it with a written offer, valid for at least three; years, to give any third party, for a charge no more than your; cost of physically performing source distribution, a complete; machine-readable copy of the corresponding source code, to be; distributed under the terms of Sections 1 and 2 above on a medium; customarily used for software interchange; or,. c) Accompany it with the information you received as to the offer; to distribute corresponding source code. (This alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (co",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:13823,Energy Efficiency,CHARGE,CHARGE,13823,"tinguishing version number. If the Program; specifies a version number of this License which applies to it and ""any; later version"", you have the option of following the terms and conditions; either of that version or of any later version published by the Free; Software Foundation. If the Program does not specify a version number of; this License, you may choose any version ever published by the Free Software; Foundation. 10. If you wish to incorporate parts of the Program into other free; programs whose distribution conditions are different, write to the author; to ask for permission. For software which is copyrighted by the Free; Software Foundation, write to the Free Software Foundation; we sometimes; make exceptions for this. Our decision will be guided by the two goals; of preserving the free status of all derivatives of our free software and; of promoting the sharing and reuse of software generally. NO WARRANTY. 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY; FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN; OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES; PROVIDE THE PROGRAM ""AS IS"" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED; OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF; MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS; TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE; PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,; REPAIR OR CORRECTION. 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING; WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR; REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,; INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING; OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED; TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY; YOU OR THIRD PAR",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:3893,Integrability,depend,depends,3893,"MODIFICATION. 0. This License applies to any program or other work which contains; a notice placed by the copyright holder saying it may be distributed; under the terms of this General Public License. The ""Program"", below,; refers to any such program or work, and a ""work based on the Program""; means either the Program or any derivative work under copyright law:; that is to say, a work containing the Program or a portion of it,; either verbatim or with modifications and/or translated into another; language. (Hereinafter, translation is included without limitation in; the term ""modification"".) Each licensee is addressed as ""you"". Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; running the Program is not restricted, and the output from the Program; is covered only if its contents constitute a work based on the; Program (independent of having been made by running the Program).; Whether that is true depends on what the Program does. 1. You may copy and distribute verbatim copies of the Program's; source code as you receive it, in any medium, provided that you; conspicuously and appropriately publish on each copy an appropriate; copyright notice and disclaimer of warranty; keep intact all the; notices that refer to this License and to the absence of any warranty;; and give any other recipients of the Program a copy of this License; along with the Program. You may charge a fee for the physical act of transferring a copy, and; you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Program or any portion; of it, thus forming a work based on the Program, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) You must cause the modified files to carry prominent notices; stating that you changed the files and the date of any change. b) You mu",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:8183,Integrability,interface,interface,8183,"distributed under the terms of Sections; 1 and 2 above on a medium customarily used for software interchange; or,. b) Accompany it with a written offer, valid for at least three; years, to give any third party, for a charge no more than your; cost of physically performing source distribution, a complete; machine-readable copy of the corresponding source code, to be; distributed under the terms of Sections 1 and 2 above on a medium; customarily used for software interchange; or,. c) Accompany it with the information you received as to the offer; to distribute corresponding source code. (This alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (compiler, kernel, and so on) of the; operating system on which the executable runs, unless that component; itself accompanies the executable. If distribution of executable or object code is made by offering; access to copy from a designated place, then offering equivalent; access to copy the source code from the same place counts as; distribution of the source code, even though third parties are not; compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program; except as expressly provided under this License. Any attempt; otherwise to copy, modify, sublicense or distribute the Program is; void, and will automatically terminate your ",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:12215,Integrability,interface,interfaces,12215,"the section as a whole is intended to apply in other; circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system, which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 8. If the distribution and/or use of the Program is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Program under this License; may add an explicit geographical distribution limitation excluding; those countries, so that distribution is permitted only in or among; countries not thus excluded. In such case, this License incorporates; the limitation as if written in the body of this License. 9. The Free Software Foundation may publish revised and/or new versions; of the General Public License from time to time. Such new versions will; be similar in spirit to the present version, but may differ in detail to; address new problems or concerns. Each version is given a distinguishing version number. If the Program; specifies a version number of this License which applies to it and ""any; later version"", you have the option of following the terms and conditions; either of that version or of any later version published by the Free; Software Foundation. If the Program does not specify a version number of; this License, you may choose any version ever published by the Free Software; Foundation. 10. If y",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:6297,Modifiability,extend,extend,6297,"d running for such; interactive use in the most ordinary way, to print or display an; announcement including an appropriate copyright notice and a; notice that there is no warranty (or else, saying that you provide; a warranty) and that users may redistribute the program under; these conditions, and telling the user how to view a copy of this; License. (Exception: if the Program itself is interactive but; does not normally print such an announcement, your work based on; the Program is not required to print an announcement.). These requirements apply to the modified work as a whole. If; identifiable sections of that work are not derived from the Program,; and can be reasonably considered independent and separate works in; themselves, then this License, and its terms, do not apply to those; sections when you distribute them as separate works. But when you; distribute the same sections as part of a whole which is a work based; on the Program, the distribution of the whole must be on the terms of; this License, whose permissions for other licensees extend to the; entire whole, and thus to each and every part regardless of who wrote it. Thus, it is not the intent of this section to claim rights or contest; your rights to work written entirely by you; rather, the intent is to; exercise the right to control the distribution of derivative or; collective works based on the Program. In addition, mere aggregation of another work not based on the Program; with the Program (or with a work based on the Program) on a volume of; a storage or distribution medium does not bring the other work under; the scope of this License. 3. You may copy and distribute the Program (or a work based on it,; under Section 2) in object code or executable form under the terms of; Sections 1 and 2 above provided that you also do one of the following:. a) Accompany it with the complete corresponding machine-readable; source code, which must be distributed under the terms of Sections; 1 and 2 above on a m",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:7438,Performance,perform,performing,7438,"rk written entirely by you; rather, the intent is to; exercise the right to control the distribution of derivative or; collective works based on the Program. In addition, mere aggregation of another work not based on the Program; with the Program (or with a work based on the Program) on a volume of; a storage or distribution medium does not bring the other work under; the scope of this License. 3. You may copy and distribute the Program (or a work based on it,; under Section 2) in object code or executable form under the terms of; Sections 1 and 2 above provided that you also do one of the following:. a) Accompany it with the complete corresponding machine-readable; source code, which must be distributed under the terms of Sections; 1 and 2 above on a medium customarily used for software interchange; or,. b) Accompany it with a written offer, valid for at least three; years, to give any third party, for a charge no more than your; cost of physically performing source distribution, a complete; machine-readable copy of the corresponding source code, to be; distributed under the terms of Sections 1 and 2 above on a medium; customarily used for software interchange; or,. c) Accompany it with the information you received as to the offer; to distribute corresponding source code. (This alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (co",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:14237,Performance,PERFORM,PERFORMANCE,14237,"ed by the Free Software; Foundation. 10. If you wish to incorporate parts of the Program into other free; programs whose distribution conditions are different, write to the author; to ask for permission. For software which is copyrighted by the Free; Software Foundation, write to the Free Software Foundation; we sometimes; make exceptions for this. Our decision will be guided by the two goals; of preserving the free status of all derivatives of our free software and; of promoting the sharing and reuse of software generally. NO WARRANTY. 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY; FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN; OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES; PROVIDE THE PROGRAM ""AS IS"" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED; OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF; MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS; TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE; PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,; REPAIR OR CORRECTION. 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING; WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR; REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,; INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING; OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED; TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY; YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER; PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE; POSSIBILITY OF SUCH DAMAGES. END OF TERMS AND CONDITIONS. How to Apply These Terms to Your New Programs. If you develop a new program, and you want it to be of the greatest; possible use to the public, the best way to achieve this is to make it; free software",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:2472,Safety,avoid,avoid,2472,"modify it. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must give the recipients all the rights that; you have. You must make sure that they, too, receive or can get the; source code. And you must show them these terms so they know their; rights. We protect your rights with two steps: (1) copyright the software, and; (2) offer you this license which gives you legal permission to copy,; distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain; that everyone understands that there is no warranty for this free; software. If the software is modified by someone else and passed on, we; want its recipients to know that what they have is not the original, so; that any problems introduced by others will not reflect on the original; authors' reputations. Finally, any free program is threatened constantly by software; patents. We wish to avoid the danger that redistributors of a free; program will individually obtain patent licenses, in effect making the; program proprietary. To prevent this, we have made it clear that any; patent must be licensed for everyone's free use or not licensed at all. The precise terms and conditions for copying, distribution and; modification follow. GNU GENERAL PUBLIC LICENSE; TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION. 0. This License applies to any program or other work which contains; a notice placed by the copyright holder saying it may be distributed; under the terms of this General Public License. The ""Program"", below,; refers to any such program or work, and a ""work based on the Program""; means either the Program or any derivative work under copyright law:; that is to say, a work containing the Program or a portion of it,; either verbatim or with modifications and/or translated into another; language. (Hereinafter, translation is included without limitation in; the term ""modification"".) Each licensee is addressed as ""you"". Ac",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:14209,Safety,RISK,RISK,14209,"ed by the Free Software; Foundation. 10. If you wish to incorporate parts of the Program into other free; programs whose distribution conditions are different, write to the author; to ask for permission. For software which is copyrighted by the Free; Software Foundation, write to the Free Software Foundation; we sometimes; make exceptions for this. Our decision will be guided by the two goals; of preserving the free status of all derivatives of our free software and; of promoting the sharing and reuse of software generally. NO WARRANTY. 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY; FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN; OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES; PROVIDE THE PROGRAM ""AS IS"" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED; OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF; MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS; TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE; PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,; REPAIR OR CORRECTION. 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING; WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR; REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,; INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING; OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED; TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY; YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER; PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE; POSSIBILITY OF SUCH DAMAGES. END OF TERMS AND CONDITIONS. How to Apply These Terms to Your New Programs. If you develop a new program, and you want it to be of the greatest; possible use to the public, the best way to achieve this is to make it; free software",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:15361,Safety,safe,safest,15361,"ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR; REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,; INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING; OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED; TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY; YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER; PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE; POSSIBILITY OF SUCH DAMAGES. END OF TERMS AND CONDITIONS. How to Apply These Terms to Your New Programs. If you develop a new program, and you want it to be of the greatest; possible use to the public, the best way to achieve this is to make it; free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest; to attach them to the start of each source file to most effectively; convey the exclusion of warranty; and each file should have at least; the ""copyright"" line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.>; Copyright (C) <year> <name of author>. This program is free software; you can redistribute it and/or modify; it under the terms of the GNU General Public License as published by; the Free Software Foundation; either version 2 of the License, or; (at your option) any later version. This program is distributed in the hope that it will be useful,; but WITHOUT ANY WARRANTY; without even the implied warranty of; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; GNU General Public License for more details. You should have received a copy of the GNU General Public License along; with this program; if not, write to the Free Software Foundation, Inc.,; 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Also add information on how to contact you by electronic and paper mail. If the program is ",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:2417,Security,threat,threatened,2417," restrictions translate to certain responsibilities for you if you; distribute copies of the software, or if you modify it. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must give the recipients all the rights that; you have. You must make sure that they, too, receive or can get the; source code. And you must show them these terms so they know their; rights. We protect your rights with two steps: (1) copyright the software, and; (2) offer you this license which gives you legal permission to copy,; distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain; that everyone understands that there is no warranty for this free; software. If the software is modified by someone else and passed on, we; want its recipients to know that what they have is not the original, so; that any problems introduced by others will not reflect on the original; authors' reputations. Finally, any free program is threatened constantly by software; patents. We wish to avoid the danger that redistributors of a free; program will individually obtain patent licenses, in effect making the; program proprietary. To prevent this, we have made it clear that any; patent must be licensed for everyone's free use or not licensed at all. The precise terms and conditions for copying, distribution and; modification follow. GNU GENERAL PUBLIC LICENSE; TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION. 0. This License applies to any program or other work which contains; a notice placed by the copyright holder saying it may be distributed; under the terms of this General Public License. The ""Program"", below,; refers to any such program or work, and a ""work based on the Program""; means either the Program or any derivative work under copyright law:; that is to say, a work containing the Program or a portion of it,; either verbatim or with modifications and/or translated into another; language. (Hereinafter, ",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:8681,Security,access,access,8681," alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (compiler, kernel, and so on) of the; operating system on which the executable runs, unless that component; itself accompanies the executable. If distribution of executable or object code is made by offering; access to copy from a designated place, then offering equivalent; access to copy the source code from the same place counts as; distribution of the source code, even though third parties are not; compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program; except as expressly provided under this License. Any attempt; otherwise to copy, modify, sublicense or distribute the Program is; void, and will automatically terminate your rights under this License.; However, parties who have received copies, or rights, from you under; this License will not have their licenses terminated so long as such; parties remain in full compliance. 5. You are not required to accept this License, since you have not; signed it. However, nothing else grants you permission to modify or; distribute the Program or its derivative works. These actions are; prohibited by law if you do not accept this License. Therefore, by; modifying or distributing the Program (or any work based on the; Program), you indicate your acceptance of this License to ",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:8747,Security,access,access,8747," alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (compiler, kernel, and so on) of the; operating system on which the executable runs, unless that component; itself accompanies the executable. If distribution of executable or object code is made by offering; access to copy from a designated place, then offering equivalent; access to copy the source code from the same place counts as; distribution of the source code, even though third parties are not; compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program; except as expressly provided under this License. Any attempt; otherwise to copy, modify, sublicense or distribute the Program is; void, and will automatically terminate your rights under this License.; However, parties who have received copies, or rights, from you under; this License will not have their licenses terminated so long as such; parties remain in full compliance. 5. You are not required to accept this License, since you have not; signed it. However, nothing else grants you permission to modify or; distribute the Program or its derivative works. These actions are; prohibited by law if you do not accept this License. Therefore, by; modifying or distributing the Program (or any work based on the; Program), you indicate your acceptance of this License to ",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:11555,Security,integrity,integrity,11555,"er, agreement or; otherwise) that contradict the conditions of this License, they do not; excuse you from the conditions of this License. If you cannot; distribute so as to satisfy simultaneously your obligations under this; License and any other pertinent obligations, then as a consequence you; may not distribute the Program at all. For example, if a patent; license would not permit royalty-free redistribution of the Program by; all those who receive copies directly or indirectly through you, then; the only way you could satisfy both it and this License would be to; refrain entirely from distribution of the Program. If any portion of this section is held invalid or unenforceable under; any particular circumstance, the balance of the section is intended to; apply and the section as a whole is intended to apply in other; circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system, which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 8. If the distribution and/or use of the Program is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Program under this License; may add an explicit geographical distribution limitation excluding; those countries, so that distribution is permitted only in or among; countries not thus excluded. In such case, this License incorpora",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:2646,Usability,clear,clear,2646,"ights that; you have. You must make sure that they, too, receive or can get the; source code. And you must show them these terms so they know their; rights. We protect your rights with two steps: (1) copyright the software, and; (2) offer you this license which gives you legal permission to copy,; distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain; that everyone understands that there is no warranty for this free; software. If the software is modified by someone else and passed on, we; want its recipients to know that what they have is not the original, so; that any problems introduced by others will not reflect on the original; authors' reputations. Finally, any free program is threatened constantly by software; patents. We wish to avoid the danger that redistributors of a free; program will individually obtain patent licenses, in effect making the; program proprietary. To prevent this, we have made it clear that any; patent must be licensed for everyone's free use or not licensed at all. The precise terms and conditions for copying, distribution and; modification follow. GNU GENERAL PUBLIC LICENSE; TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION. 0. This License applies to any program or other work which contains; a notice placed by the copyright holder saying it may be distributed; under the terms of this General Public License. The ""Program"", below,; refers to any such program or work, and a ""work based on the Program""; means either the Program or any derivative work under copyright law:; that is to say, a work containing the Program or a portion of it,; either verbatim or with modifications and/or translated into another; language. (Hereinafter, translation is included without limitation in; the term ""modification"".) Each licensee is addressed as ""you"". Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; runn",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:12021,Usability,clear,clear,12021,"isfy both it and this License would be to; refrain entirely from distribution of the Program. If any portion of this section is held invalid or unenforceable under; any particular circumstance, the balance of the section is intended to; apply and the section as a whole is intended to apply in other; circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system, which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 8. If the distribution and/or use of the Program is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Program under this License; may add an explicit geographical distribution limitation excluding; those countries, so that distribution is permitted only in or among; countries not thus excluded. In such case, this License incorporates; the limitation as if written in the body of this License. 9. The Free Software Foundation may publish revised and/or new versions; of the General Public License from time to time. Such new versions will; be similar in spirit to the present version, but may differ in detail to; address new problems or concerns. Each version is given a distinguishing version number. If the Program; specifies a version number of this License which applies to it and ""any; later version"", you have the option of following the terms and conditio",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt:13608,Usability,guid,guided,13608,"ime to time. Such new versions will; be similar in spirit to the present version, but may differ in detail to; address new problems or concerns. Each version is given a distinguishing version number. If the Program; specifies a version number of this License which applies to it and ""any; later version"", you have the option of following the terms and conditions; either of that version or of any later version published by the Free; Software Foundation. If the Program does not specify a version number of; this License, you may choose any version ever published by the Free Software; Foundation. 10. If you wish to incorporate parts of the Program into other free; programs whose distribution conditions are different, write to the author; to ask for permission. For software which is copyrighted by the Free; Software Foundation, write to the Free Software Foundation; we sometimes; make exceptions for this. Our decision will be guided by the two goals; of preserving the free status of all derivatives of our free software and; of promoting the sharing and reuse of software generally. NO WARRANTY. 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY; FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN; OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES; PROVIDE THE PROGRAM ""AS IS"" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED; OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF; MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS; TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE; PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,; REPAIR OR CORRECTION. 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING; WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR; REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,; INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARI",MatchSource.DOCS,misc/rootql/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt:118,Availability,avail,available,118,"ROOTQL; ======. This is a Quick Look plugin that allows quick inspection of the content; of ROOT files. Quick Look is available on MacOS X since version 10.5 (Leopard). To use QL; select a file icon in the Finder and hit the space bar. For all file types; supported by QL you will get a window showing the file content, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file and number of keys, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the; ROOTQL.qlgenerator icon to either /Library/QuickLook or to ~/Library/QuickLook.; You may have to create that folder if it does not exist. Once installed; you may have to refresh the QL plugin cache by executing:; /usr/bin/qlmanage -r. To build from source, get it from git using:. git clone http://root.cern/git/root.git root; cd root/misc/rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTQL.xcodeproj"" in the Terminal app.; Move the resulting plugin from the build/Release directory to either; the /Library/QuickLook or ~/Library/QuickLook directory. Cheers, Fons.; ",MatchSource.DOCS,misc/rootql/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt:715,Deployability,install,install,715,"ROOTQL; ======. This is a Quick Look plugin that allows quick inspection of the content; of ROOT files. Quick Look is available on MacOS X since version 10.5 (Leopard). To use QL; select a file icon in the Finder and hit the space bar. For all file types; supported by QL you will get a window showing the file content, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file and number of keys, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the; ROOTQL.qlgenerator icon to either /Library/QuickLook or to ~/Library/QuickLook.; You may have to create that folder if it does not exist. Once installed; you may have to refresh the QL plugin cache by executing:; /usr/bin/qlmanage -r. To build from source, get it from git using:. git clone http://root.cern/git/root.git root; cd root/misc/rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTQL.xcodeproj"" in the Terminal app.; Move the resulting plugin from the build/Release directory to either; the /Library/QuickLook or ~/Library/QuickLook directory. Cheers, Fons.; ",MatchSource.DOCS,misc/rootql/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt:925,Deployability,install,installed,925,"ROOTQL; ======. This is a Quick Look plugin that allows quick inspection of the content; of ROOT files. Quick Look is available on MacOS X since version 10.5 (Leopard). To use QL; select a file icon in the Finder and hit the space bar. For all file types; supported by QL you will get a window showing the file content, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file and number of keys, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the; ROOTQL.qlgenerator icon to either /Library/QuickLook or to ~/Library/QuickLook.; You may have to create that folder if it does not exist. Once installed; you may have to refresh the QL plugin cache by executing:; /usr/bin/qlmanage -r. To build from source, get it from git using:. git clone http://root.cern/git/root.git root; cd root/misc/rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTQL.xcodeproj"" in the Terminal app.; Move the resulting plugin from the build/Release directory to either; the /Library/QuickLook or ~/Library/QuickLook directory. Cheers, Fons.; ",MatchSource.DOCS,misc/rootql/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt:1213,Deployability,Configurat,Configuration,1213,"ROOTQL; ======. This is a Quick Look plugin that allows quick inspection of the content; of ROOT files. Quick Look is available on MacOS X since version 10.5 (Leopard). To use QL; select a file icon in the Finder and hit the space bar. For all file types; supported by QL you will get a window showing the file content, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file and number of keys, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the; ROOTQL.qlgenerator icon to either /Library/QuickLook or to ~/Library/QuickLook.; You may have to create that folder if it does not exist. Once installed; you may have to refresh the QL plugin cache by executing:; /usr/bin/qlmanage -r. To build from source, get it from git using:. git clone http://root.cern/git/root.git root; cd root/misc/rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTQL.xcodeproj"" in the Terminal app.; Move the resulting plugin from the build/Release directory to either; the /Library/QuickLook or ~/Library/QuickLook directory. Cheers, Fons.; ",MatchSource.DOCS,misc/rootql/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt:1238,Deployability,Release,Release,1238,"ROOTQL; ======. This is a Quick Look plugin that allows quick inspection of the content; of ROOT files. Quick Look is available on MacOS X since version 10.5 (Leopard). To use QL; select a file icon in the Finder and hit the space bar. For all file types; supported by QL you will get a window showing the file content, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file and number of keys, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the; ROOTQL.qlgenerator icon to either /Library/QuickLook or to ~/Library/QuickLook.; You may have to create that folder if it does not exist. Once installed; you may have to refresh the QL plugin cache by executing:; /usr/bin/qlmanage -r. To build from source, get it from git using:. git clone http://root.cern/git/root.git root; cd root/misc/rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTQL.xcodeproj"" in the Terminal app.; Move the resulting plugin from the build/Release directory to either; the /Library/QuickLook or ~/Library/QuickLook directory. Cheers, Fons.; ",MatchSource.DOCS,misc/rootql/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt:1399,Deployability,Release,Release,1399,"ROOTQL; ======. This is a Quick Look plugin that allows quick inspection of the content; of ROOT files. Quick Look is available on MacOS X since version 10.5 (Leopard). To use QL; select a file icon in the Finder and hit the space bar. For all file types; supported by QL you will get a window showing the file content, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file and number of keys, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the; ROOTQL.qlgenerator icon to either /Library/QuickLook or to ~/Library/QuickLook.; You may have to create that folder if it does not exist. Once installed; you may have to refresh the QL plugin cache by executing:; /usr/bin/qlmanage -r. To build from source, get it from git using:. git clone http://root.cern/git/root.git root; cd root/misc/rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTQL.xcodeproj"" in the Terminal app.; Move the resulting plugin from the build/Release directory to either; the /Library/QuickLook or ~/Library/QuickLook directory. Cheers, Fons.; ",MatchSource.DOCS,misc/rootql/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt:543,Integrability,depend,depends,543,"ROOTQL; ======. This is a Quick Look plugin that allows quick inspection of the content; of ROOT files. Quick Look is available on MacOS X since version 10.5 (Leopard). To use QL; select a file icon in the Finder and hit the space bar. For all file types; supported by QL you will get a window showing the file content, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file and number of keys, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the; ROOTQL.qlgenerator icon to either /Library/QuickLook or to ~/Library/QuickLook.; You may have to create that folder if it does not exist. Once installed; you may have to refresh the QL plugin cache by executing:; /usr/bin/qlmanage -r. To build from source, get it from git using:. git clone http://root.cern/git/root.git root; cd root/misc/rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTQL.xcodeproj"" in the Terminal app.; Move the resulting plugin from the build/Release directory to either; the /Library/QuickLook or ~/Library/QuickLook directory. Cheers, Fons.; ",MatchSource.DOCS,misc/rootql/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt:37,Modifiability,plugin,plugin,37,"ROOTQL; ======. This is a Quick Look plugin that allows quick inspection of the content; of ROOT files. Quick Look is available on MacOS X since version 10.5 (Leopard). To use QL; select a file icon in the Finder and hit the space bar. For all file types; supported by QL you will get a window showing the file content, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file and number of keys, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the; ROOTQL.qlgenerator icon to either /Library/QuickLook or to ~/Library/QuickLook.; You may have to create that folder if it does not exist. Once installed; you may have to refresh the QL plugin cache by executing:; /usr/bin/qlmanage -r. To build from source, get it from git using:. git clone http://root.cern/git/root.git root; cd root/misc/rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTQL.xcodeproj"" in the Terminal app.; Move the resulting plugin from the build/Release directory to either; the /Library/QuickLook or ~/Library/QuickLook directory. Cheers, Fons.; ",MatchSource.DOCS,misc/rootql/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt:665,Modifiability,plugin,plugin,665,"ROOTQL; ======. This is a Quick Look plugin that allows quick inspection of the content; of ROOT files. Quick Look is available on MacOS X since version 10.5 (Leopard). To use QL; select a file icon in the Finder and hit the space bar. For all file types; supported by QL you will get a window showing the file content, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file and number of keys, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the; ROOTQL.qlgenerator icon to either /Library/QuickLook or to ~/Library/QuickLook.; You may have to create that folder if it does not exist. Once installed; you may have to refresh the QL plugin cache by executing:; /usr/bin/qlmanage -r. To build from source, get it from git using:. git clone http://root.cern/git/root.git root; cd root/misc/rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTQL.xcodeproj"" in the Terminal app.; Move the resulting plugin from the build/Release directory to either; the /Library/QuickLook or ~/Library/QuickLook directory. Cheers, Fons.; ",MatchSource.DOCS,misc/rootql/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt:727,Modifiability,plugin,plugin,727,"ROOTQL; ======. This is a Quick Look plugin that allows quick inspection of the content; of ROOT files. Quick Look is available on MacOS X since version 10.5 (Leopard). To use QL; select a file icon in the Finder and hit the space bar. For all file types; supported by QL you will get a window showing the file content, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file and number of keys, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the; ROOTQL.qlgenerator icon to either /Library/QuickLook or to ~/Library/QuickLook.; You may have to create that folder if it does not exist. Once installed; you may have to refresh the QL plugin cache by executing:; /usr/bin/qlmanage -r. To build from source, get it from git using:. git clone http://root.cern/git/root.git root; cd root/misc/rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTQL.xcodeproj"" in the Terminal app.; Move the resulting plugin from the build/Release directory to either; the /Library/QuickLook or ~/Library/QuickLook directory. Cheers, Fons.; ",MatchSource.DOCS,misc/rootql/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt:967,Modifiability,plugin,plugin,967,"ROOTQL; ======. This is a Quick Look plugin that allows quick inspection of the content; of ROOT files. Quick Look is available on MacOS X since version 10.5 (Leopard). To use QL; select a file icon in the Finder and hit the space bar. For all file types; supported by QL you will get a window showing the file content, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file and number of keys, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the; ROOTQL.qlgenerator icon to either /Library/QuickLook or to ~/Library/QuickLook.; You may have to create that folder if it does not exist. Once installed; you may have to refresh the QL plugin cache by executing:; /usr/bin/qlmanage -r. To build from source, get it from git using:. git clone http://root.cern/git/root.git root; cd root/misc/rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTQL.xcodeproj"" in the Terminal app.; Move the resulting plugin from the build/Release directory to either; the /Library/QuickLook or ~/Library/QuickLook directory. Cheers, Fons.; ",MatchSource.DOCS,misc/rootql/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt:1213,Modifiability,Config,Configuration,1213,"ROOTQL; ======. This is a Quick Look plugin that allows quick inspection of the content; of ROOT files. Quick Look is available on MacOS X since version 10.5 (Leopard). To use QL; select a file icon in the Finder and hit the space bar. For all file types; supported by QL you will get a window showing the file content, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file and number of keys, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the; ROOTQL.qlgenerator icon to either /Library/QuickLook or to ~/Library/QuickLook.; You may have to create that folder if it does not exist. Once installed; you may have to refresh the QL plugin cache by executing:; /usr/bin/qlmanage -r. To build from source, get it from git using:. git clone http://root.cern/git/root.git root; cd root/misc/rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTQL.xcodeproj"" in the Terminal app.; Move the resulting plugin from the build/Release directory to either; the /Library/QuickLook or ~/Library/QuickLook directory. Cheers, Fons.; ",MatchSource.DOCS,misc/rootql/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt:1377,Modifiability,plugin,plugin,1377,"ROOTQL; ======. This is a Quick Look plugin that allows quick inspection of the content; of ROOT files. Quick Look is available on MacOS X since version 10.5 (Leopard). To use QL; select a file icon in the Finder and hit the space bar. For all file types; supported by QL you will get a window showing the file content, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file and number of keys, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the; ROOTQL.qlgenerator icon to either /Library/QuickLook or to ~/Library/QuickLook.; You may have to create that folder if it does not exist. Once installed; you may have to refresh the QL plugin cache by executing:; /usr/bin/qlmanage -r. To build from source, get it from git using:. git clone http://root.cern/git/root.git root; cd root/misc/rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTQL.xcodeproj"" in the Terminal app.; Move the resulting plugin from the build/Release directory to either; the /Library/QuickLook or ~/Library/QuickLook directory. Cheers, Fons.; ",MatchSource.DOCS,misc/rootql/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt:974,Performance,cache,cache,974,"ROOTQL; ======. This is a Quick Look plugin that allows quick inspection of the content; of ROOT files. Quick Look is available on MacOS X since version 10.5 (Leopard). To use QL; select a file icon in the Finder and hit the space bar. For all file types; supported by QL you will get a window showing the file content, for file types; not supported you will get a generic window showing some basic file info. The idea of QL is that file content can be shown without the heavy application; startup process. Generating a QL view of a ROOT file depends on the size of the; file and number of keys, but generally it is a quick operation. Get the binary for the ROOTQL plugin from:. ftp://root.cern/root/ROOTQL.tgz. To install the plugin, after untarring the above file, just drag the; ROOTQL.qlgenerator icon to either /Library/QuickLook or to ~/Library/QuickLook.; You may have to create that folder if it does not exist. Once installed; you may have to refresh the QL plugin cache by executing:; /usr/bin/qlmanage -r. To build from source, get it from git using:. git clone http://root.cern/git/root.git root; cd root/misc/rootql. Open the ROOTQL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTQL.xcodeproj"" in the Terminal app.; Move the resulting plugin from the build/Release directory to either; the /Library/QuickLook or ~/Library/QuickLook directory. Cheers, Fons.; ",MatchSource.DOCS,misc/rootql/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootql/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ChangeLog.txt:16,Deployability,release,release,16,1.0:; * Initial release.; ,MatchSource.DOCS,misc/rootsl/ChangeLog.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ChangeLog.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:14363,Availability,REPAIR,REPAIR,14363,"other free; programs whose distribution conditions are different, write to the author; to ask for permission. For software which is copyrighted by the Free; Software Foundation, write to the Free Software Foundation; we sometimes; make exceptions for this. Our decision will be guided by the two goals; of preserving the free status of all derivatives of our free software and; of promoting the sharing and reuse of software generally. NO WARRANTY. 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY; FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN; OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES; PROVIDE THE PROGRAM ""AS IS"" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED; OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF; MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS; TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE; PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,; REPAIR OR CORRECTION. 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING; WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR; REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,; INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING; OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED; TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY; YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER; PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE; POSSIBILITY OF SUCH DAMAGES. END OF TERMS AND CONDITIONS. How to Apply These Terms to Your New Programs. If you develop a new program, and you want it to be of the greatest; possible use to the public, the best way to achieve this is to make it; free software which everyone can redistribute and change under these terms. To do so, attach the following",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:14857,Availability,FAILURE,FAILURE,14857,"tware and; of promoting the sharing and reuse of software generally. NO WARRANTY. 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY; FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN; OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES; PROVIDE THE PROGRAM ""AS IS"" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED; OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF; MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS; TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE; PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,; REPAIR OR CORRECTION. 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING; WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR; REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,; INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING; OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED; TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY; YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER; PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE; POSSIBILITY OF SUCH DAMAGES. END OF TERMS AND CONDITIONS. How to Apply These Terms to Your New Programs. If you develop a new program, and you want it to be of the greatest; possible use to the public, the best way to achieve this is to make it; free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest; to attach them to the start of each source file to most effectively; convey the exclusion of warranty; and each file should have at least; the ""copyright"" line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.>; Copyright (C) <year> <name of author>. This pr",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:8261,Deployability,install,installation,8261,"distributed under the terms of Sections; 1 and 2 above on a medium customarily used for software interchange; or,. b) Accompany it with a written offer, valid for at least three; years, to give any third party, for a charge no more than your; cost of physically performing source distribution, a complete; machine-readable copy of the corresponding source code, to be; distributed under the terms of Sections 1 and 2 above on a medium; customarily used for software interchange; or,. c) Accompany it with the information you received as to the offer; to distribute corresponding source code. (This alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (compiler, kernel, and so on) of the; operating system on which the executable runs, unless that component; itself accompanies the executable. If distribution of executable or object code is made by offering; access to copy from a designated place, then offering equivalent; access to copy the source code from the same place counts as; distribution of the source code, even though third parties are not; compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program; except as expressly provided under this License. Any attempt; otherwise to copy, modify, sublicense or distribute the Program is; void, and will automatically terminate your ",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:1062,Energy Efficiency,charge,charge,1062," 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA; Everyone is permitted to copy and distribute verbatim copies; of this license document, but changing it is not allowed. Preamble. The licenses for most software are designed to take away your; freedom to share and change it. By contrast, the GNU General Public; License is intended to guarantee your freedom to share and change free; software--to make sure the software is free for all its users. This; General Public License applies to most of the Free Software; Foundation's software and to any other program whose authors commit to; using it. (Some other Free Software Foundation software is covered by; the GNU Lesser General Public License instead.) You can apply it to; your programs, too. When we speak of free software, we are referring to freedom, not; price. Our General Public Licenses are designed to make sure that you; have the freedom to distribute copies of free software (and charge for; this service if you wish), that you receive source code or can get it; if you want it, that you can change the software or use pieces of it; in new free programs; and that you know you can do these things. To protect your rights, we need to make restrictions that forbid; anyone to deny you these rights or to ask you to surrender the rights.; These restrictions translate to certain responsibilities for you if you; distribute copies of the software, or if you modify it. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must give the recipients all the rights that; you have. You must make sure that they, too, receive or can get the; source code. And you must show them these terms so they know their; rights. We protect your rights with two steps: (1) copyright the software, and; (2) offer you this license which gives you legal permission to copy,; distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain; that everyone understands th",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:4365,Energy Efficiency,charge,charge,4365,"nslation is included without limitation in; the term ""modification"".) Each licensee is addressed as ""you"". Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; running the Program is not restricted, and the output from the Program; is covered only if its contents constitute a work based on the; Program (independent of having been made by running the Program).; Whether that is true depends on what the Program does. 1. You may copy and distribute verbatim copies of the Program's; source code as you receive it, in any medium, provided that you; conspicuously and appropriately publish on each copy an appropriate; copyright notice and disclaimer of warranty; keep intact all the; notices that refer to this License and to the absence of any warranty;; and give any other recipients of the Program a copy of this License; along with the Program. You may charge a fee for the physical act of transferring a copy, and; you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Program or any portion; of it, thus forming a work based on the Program, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) You must cause the modified files to carry prominent notices; stating that you changed the files and the date of any change. b) You must cause any work that you distribute or publish, that in; whole or in part contains or is derived from the Program or any; part thereof, to be licensed as a whole at no charge to all third; parties under the terms of this License. c) If the modified program normally reads commands interactively; when run, you must cause it, when started running for such; interactive use in the most ordinary way, to print or display an; announcement including an appropriate copyright notice and a; notice that there is no warranty (or else, s",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:5068,Energy Efficiency,charge,charge,5068,"ou receive it, in any medium, provided that you; conspicuously and appropriately publish on each copy an appropriate; copyright notice and disclaimer of warranty; keep intact all the; notices that refer to this License and to the absence of any warranty;; and give any other recipients of the Program a copy of this License; along with the Program. You may charge a fee for the physical act of transferring a copy, and; you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Program or any portion; of it, thus forming a work based on the Program, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) You must cause the modified files to carry prominent notices; stating that you changed the files and the date of any change. b) You must cause any work that you distribute or publish, that in; whole or in part contains or is derived from the Program or any; part thereof, to be licensed as a whole at no charge to all third; parties under the terms of this License. c) If the modified program normally reads commands interactively; when run, you must cause it, when started running for such; interactive use in the most ordinary way, to print or display an; announcement including an appropriate copyright notice and a; notice that there is no warranty (or else, saying that you provide; a warranty) and that users may redistribute the program under; these conditions, and telling the user how to view a copy of this; License. (Exception: if the Program itself is interactive but; does not normally print such an announcement, your work based on; the Program is not required to print an announcement.). These requirements apply to the modified work as a whole. If; identifiable sections of that work are not derived from the Program,; and can be reasonably considered independent and separate works in; themselves, then this License, and its ter",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:7393,Energy Efficiency,charge,charge,7393,"rk written entirely by you; rather, the intent is to; exercise the right to control the distribution of derivative or; collective works based on the Program. In addition, mere aggregation of another work not based on the Program; with the Program (or with a work based on the Program) on a volume of; a storage or distribution medium does not bring the other work under; the scope of this License. 3. You may copy and distribute the Program (or a work based on it,; under Section 2) in object code or executable form under the terms of; Sections 1 and 2 above provided that you also do one of the following:. a) Accompany it with the complete corresponding machine-readable; source code, which must be distributed under the terms of Sections; 1 and 2 above on a medium customarily used for software interchange; or,. b) Accompany it with a written offer, valid for at least three; years, to give any third party, for a charge no more than your; cost of physically performing source distribution, a complete; machine-readable copy of the corresponding source code, to be; distributed under the terms of Sections 1 and 2 above on a medium; customarily used for software interchange; or,. c) Accompany it with the information you received as to the offer; to distribute corresponding source code. (This alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (co",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:13823,Energy Efficiency,CHARGE,CHARGE,13823,"tinguishing version number. If the Program; specifies a version number of this License which applies to it and ""any; later version"", you have the option of following the terms and conditions; either of that version or of any later version published by the Free; Software Foundation. If the Program does not specify a version number of; this License, you may choose any version ever published by the Free Software; Foundation. 10. If you wish to incorporate parts of the Program into other free; programs whose distribution conditions are different, write to the author; to ask for permission. For software which is copyrighted by the Free; Software Foundation, write to the Free Software Foundation; we sometimes; make exceptions for this. Our decision will be guided by the two goals; of preserving the free status of all derivatives of our free software and; of promoting the sharing and reuse of software generally. NO WARRANTY. 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY; FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN; OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES; PROVIDE THE PROGRAM ""AS IS"" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED; OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF; MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS; TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE; PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,; REPAIR OR CORRECTION. 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING; WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR; REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,; INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING; OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED; TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY; YOU OR THIRD PAR",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:3893,Integrability,depend,depends,3893,"MODIFICATION. 0. This License applies to any program or other work which contains; a notice placed by the copyright holder saying it may be distributed; under the terms of this General Public License. The ""Program"", below,; refers to any such program or work, and a ""work based on the Program""; means either the Program or any derivative work under copyright law:; that is to say, a work containing the Program or a portion of it,; either verbatim or with modifications and/or translated into another; language. (Hereinafter, translation is included without limitation in; the term ""modification"".) Each licensee is addressed as ""you"". Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; running the Program is not restricted, and the output from the Program; is covered only if its contents constitute a work based on the; Program (independent of having been made by running the Program).; Whether that is true depends on what the Program does. 1. You may copy and distribute verbatim copies of the Program's; source code as you receive it, in any medium, provided that you; conspicuously and appropriately publish on each copy an appropriate; copyright notice and disclaimer of warranty; keep intact all the; notices that refer to this License and to the absence of any warranty;; and give any other recipients of the Program a copy of this License; along with the Program. You may charge a fee for the physical act of transferring a copy, and; you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Program or any portion; of it, thus forming a work based on the Program, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) You must cause the modified files to carry prominent notices; stating that you changed the files and the date of any change. b) You mu",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:8183,Integrability,interface,interface,8183,"distributed under the terms of Sections; 1 and 2 above on a medium customarily used for software interchange; or,. b) Accompany it with a written offer, valid for at least three; years, to give any third party, for a charge no more than your; cost of physically performing source distribution, a complete; machine-readable copy of the corresponding source code, to be; distributed under the terms of Sections 1 and 2 above on a medium; customarily used for software interchange; or,. c) Accompany it with the information you received as to the offer; to distribute corresponding source code. (This alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (compiler, kernel, and so on) of the; operating system on which the executable runs, unless that component; itself accompanies the executable. If distribution of executable or object code is made by offering; access to copy from a designated place, then offering equivalent; access to copy the source code from the same place counts as; distribution of the source code, even though third parties are not; compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program; except as expressly provided under this License. Any attempt; otherwise to copy, modify, sublicense or distribute the Program is; void, and will automatically terminate your ",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:12215,Integrability,interface,interfaces,12215,"the section as a whole is intended to apply in other; circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system, which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 8. If the distribution and/or use of the Program is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Program under this License; may add an explicit geographical distribution limitation excluding; those countries, so that distribution is permitted only in or among; countries not thus excluded. In such case, this License incorporates; the limitation as if written in the body of this License. 9. The Free Software Foundation may publish revised and/or new versions; of the General Public License from time to time. Such new versions will; be similar in spirit to the present version, but may differ in detail to; address new problems or concerns. Each version is given a distinguishing version number. If the Program; specifies a version number of this License which applies to it and ""any; later version"", you have the option of following the terms and conditions; either of that version or of any later version published by the Free; Software Foundation. If the Program does not specify a version number of; this License, you may choose any version ever published by the Free Software; Foundation. 10. If y",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:6297,Modifiability,extend,extend,6297,"d running for such; interactive use in the most ordinary way, to print or display an; announcement including an appropriate copyright notice and a; notice that there is no warranty (or else, saying that you provide; a warranty) and that users may redistribute the program under; these conditions, and telling the user how to view a copy of this; License. (Exception: if the Program itself is interactive but; does not normally print such an announcement, your work based on; the Program is not required to print an announcement.). These requirements apply to the modified work as a whole. If; identifiable sections of that work are not derived from the Program,; and can be reasonably considered independent and separate works in; themselves, then this License, and its terms, do not apply to those; sections when you distribute them as separate works. But when you; distribute the same sections as part of a whole which is a work based; on the Program, the distribution of the whole must be on the terms of; this License, whose permissions for other licensees extend to the; entire whole, and thus to each and every part regardless of who wrote it. Thus, it is not the intent of this section to claim rights or contest; your rights to work written entirely by you; rather, the intent is to; exercise the right to control the distribution of derivative or; collective works based on the Program. In addition, mere aggregation of another work not based on the Program; with the Program (or with a work based on the Program) on a volume of; a storage or distribution medium does not bring the other work under; the scope of this License. 3. You may copy and distribute the Program (or a work based on it,; under Section 2) in object code or executable form under the terms of; Sections 1 and 2 above provided that you also do one of the following:. a) Accompany it with the complete corresponding machine-readable; source code, which must be distributed under the terms of Sections; 1 and 2 above on a m",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:7438,Performance,perform,performing,7438,"rk written entirely by you; rather, the intent is to; exercise the right to control the distribution of derivative or; collective works based on the Program. In addition, mere aggregation of another work not based on the Program; with the Program (or with a work based on the Program) on a volume of; a storage or distribution medium does not bring the other work under; the scope of this License. 3. You may copy and distribute the Program (or a work based on it,; under Section 2) in object code or executable form under the terms of; Sections 1 and 2 above provided that you also do one of the following:. a) Accompany it with the complete corresponding machine-readable; source code, which must be distributed under the terms of Sections; 1 and 2 above on a medium customarily used for software interchange; or,. b) Accompany it with a written offer, valid for at least three; years, to give any third party, for a charge no more than your; cost of physically performing source distribution, a complete; machine-readable copy of the corresponding source code, to be; distributed under the terms of Sections 1 and 2 above on a medium; customarily used for software interchange; or,. c) Accompany it with the information you received as to the offer; to distribute corresponding source code. (This alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (co",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:14237,Performance,PERFORM,PERFORMANCE,14237,"ed by the Free Software; Foundation. 10. If you wish to incorporate parts of the Program into other free; programs whose distribution conditions are different, write to the author; to ask for permission. For software which is copyrighted by the Free; Software Foundation, write to the Free Software Foundation; we sometimes; make exceptions for this. Our decision will be guided by the two goals; of preserving the free status of all derivatives of our free software and; of promoting the sharing and reuse of software generally. NO WARRANTY. 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY; FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN; OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES; PROVIDE THE PROGRAM ""AS IS"" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED; OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF; MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS; TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE; PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,; REPAIR OR CORRECTION. 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING; WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR; REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,; INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING; OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED; TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY; YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER; PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE; POSSIBILITY OF SUCH DAMAGES. END OF TERMS AND CONDITIONS. How to Apply These Terms to Your New Programs. If you develop a new program, and you want it to be of the greatest; possible use to the public, the best way to achieve this is to make it; free software",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:2472,Safety,avoid,avoid,2472,"modify it. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must give the recipients all the rights that; you have. You must make sure that they, too, receive or can get the; source code. And you must show them these terms so they know their; rights. We protect your rights with two steps: (1) copyright the software, and; (2) offer you this license which gives you legal permission to copy,; distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain; that everyone understands that there is no warranty for this free; software. If the software is modified by someone else and passed on, we; want its recipients to know that what they have is not the original, so; that any problems introduced by others will not reflect on the original; authors' reputations. Finally, any free program is threatened constantly by software; patents. We wish to avoid the danger that redistributors of a free; program will individually obtain patent licenses, in effect making the; program proprietary. To prevent this, we have made it clear that any; patent must be licensed for everyone's free use or not licensed at all. The precise terms and conditions for copying, distribution and; modification follow. GNU GENERAL PUBLIC LICENSE; TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION. 0. This License applies to any program or other work which contains; a notice placed by the copyright holder saying it may be distributed; under the terms of this General Public License. The ""Program"", below,; refers to any such program or work, and a ""work based on the Program""; means either the Program or any derivative work under copyright law:; that is to say, a work containing the Program or a portion of it,; either verbatim or with modifications and/or translated into another; language. (Hereinafter, translation is included without limitation in; the term ""modification"".) Each licensee is addressed as ""you"". Ac",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:14209,Safety,RISK,RISK,14209,"ed by the Free Software; Foundation. 10. If you wish to incorporate parts of the Program into other free; programs whose distribution conditions are different, write to the author; to ask for permission. For software which is copyrighted by the Free; Software Foundation, write to the Free Software Foundation; we sometimes; make exceptions for this. Our decision will be guided by the two goals; of preserving the free status of all derivatives of our free software and; of promoting the sharing and reuse of software generally. NO WARRANTY. 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY; FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN; OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES; PROVIDE THE PROGRAM ""AS IS"" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED; OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF; MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS; TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE; PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,; REPAIR OR CORRECTION. 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING; WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR; REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,; INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING; OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED; TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY; YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER; PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE; POSSIBILITY OF SUCH DAMAGES. END OF TERMS AND CONDITIONS. How to Apply These Terms to Your New Programs. If you develop a new program, and you want it to be of the greatest; possible use to the public, the best way to achieve this is to make it; free software",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:15361,Safety,safe,safest,15361,"ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR; REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,; INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING; OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED; TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY; YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER; PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE; POSSIBILITY OF SUCH DAMAGES. END OF TERMS AND CONDITIONS. How to Apply These Terms to Your New Programs. If you develop a new program, and you want it to be of the greatest; possible use to the public, the best way to achieve this is to make it; free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest; to attach them to the start of each source file to most effectively; convey the exclusion of warranty; and each file should have at least; the ""copyright"" line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.>; Copyright (C) <year> <name of author>. This program is free software; you can redistribute it and/or modify; it under the terms of the GNU General Public License as published by; the Free Software Foundation; either version 2 of the License, or; (at your option) any later version. This program is distributed in the hope that it will be useful,; but WITHOUT ANY WARRANTY; without even the implied warranty of; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; GNU General Public License for more details. You should have received a copy of the GNU General Public License along; with this program; if not, write to the Free Software Foundation, Inc.,; 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Also add information on how to contact you by electronic and paper mail. If the program is ",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:2417,Security,threat,threatened,2417," restrictions translate to certain responsibilities for you if you; distribute copies of the software, or if you modify it. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must give the recipients all the rights that; you have. You must make sure that they, too, receive or can get the; source code. And you must show them these terms so they know their; rights. We protect your rights with two steps: (1) copyright the software, and; (2) offer you this license which gives you legal permission to copy,; distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain; that everyone understands that there is no warranty for this free; software. If the software is modified by someone else and passed on, we; want its recipients to know that what they have is not the original, so; that any problems introduced by others will not reflect on the original; authors' reputations. Finally, any free program is threatened constantly by software; patents. We wish to avoid the danger that redistributors of a free; program will individually obtain patent licenses, in effect making the; program proprietary. To prevent this, we have made it clear that any; patent must be licensed for everyone's free use or not licensed at all. The precise terms and conditions for copying, distribution and; modification follow. GNU GENERAL PUBLIC LICENSE; TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION. 0. This License applies to any program or other work which contains; a notice placed by the copyright holder saying it may be distributed; under the terms of this General Public License. The ""Program"", below,; refers to any such program or work, and a ""work based on the Program""; means either the Program or any derivative work under copyright law:; that is to say, a work containing the Program or a portion of it,; either verbatim or with modifications and/or translated into another; language. (Hereinafter, ",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:8681,Security,access,access,8681," alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (compiler, kernel, and so on) of the; operating system on which the executable runs, unless that component; itself accompanies the executable. If distribution of executable or object code is made by offering; access to copy from a designated place, then offering equivalent; access to copy the source code from the same place counts as; distribution of the source code, even though third parties are not; compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program; except as expressly provided under this License. Any attempt; otherwise to copy, modify, sublicense or distribute the Program is; void, and will automatically terminate your rights under this License.; However, parties who have received copies, or rights, from you under; this License will not have their licenses terminated so long as such; parties remain in full compliance. 5. You are not required to accept this License, since you have not; signed it. However, nothing else grants you permission to modify or; distribute the Program or its derivative works. These actions are; prohibited by law if you do not accept this License. Therefore, by; modifying or distributing the Program (or any work based on the; Program), you indicate your acceptance of this License to ",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:8747,Security,access,access,8747," alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (compiler, kernel, and so on) of the; operating system on which the executable runs, unless that component; itself accompanies the executable. If distribution of executable or object code is made by offering; access to copy from a designated place, then offering equivalent; access to copy the source code from the same place counts as; distribution of the source code, even though third parties are not; compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program; except as expressly provided under this License. Any attempt; otherwise to copy, modify, sublicense or distribute the Program is; void, and will automatically terminate your rights under this License.; However, parties who have received copies, or rights, from you under; this License will not have their licenses terminated so long as such; parties remain in full compliance. 5. You are not required to accept this License, since you have not; signed it. However, nothing else grants you permission to modify or; distribute the Program or its derivative works. These actions are; prohibited by law if you do not accept this License. Therefore, by; modifying or distributing the Program (or any work based on the; Program), you indicate your acceptance of this License to ",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:11555,Security,integrity,integrity,11555,"er, agreement or; otherwise) that contradict the conditions of this License, they do not; excuse you from the conditions of this License. If you cannot; distribute so as to satisfy simultaneously your obligations under this; License and any other pertinent obligations, then as a consequence you; may not distribute the Program at all. For example, if a patent; license would not permit royalty-free redistribution of the Program by; all those who receive copies directly or indirectly through you, then; the only way you could satisfy both it and this License would be to; refrain entirely from distribution of the Program. If any portion of this section is held invalid or unenforceable under; any particular circumstance, the balance of the section is intended to; apply and the section as a whole is intended to apply in other; circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system, which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 8. If the distribution and/or use of the Program is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Program under this License; may add an explicit geographical distribution limitation excluding; those countries, so that distribution is permitted only in or among; countries not thus excluded. In such case, this License incorpora",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:2646,Usability,clear,clear,2646,"ights that; you have. You must make sure that they, too, receive or can get the; source code. And you must show them these terms so they know their; rights. We protect your rights with two steps: (1) copyright the software, and; (2) offer you this license which gives you legal permission to copy,; distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain; that everyone understands that there is no warranty for this free; software. If the software is modified by someone else and passed on, we; want its recipients to know that what they have is not the original, so; that any problems introduced by others will not reflect on the original; authors' reputations. Finally, any free program is threatened constantly by software; patents. We wish to avoid the danger that redistributors of a free; program will individually obtain patent licenses, in effect making the; program proprietary. To prevent this, we have made it clear that any; patent must be licensed for everyone's free use or not licensed at all. The precise terms and conditions for copying, distribution and; modification follow. GNU GENERAL PUBLIC LICENSE; TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION. 0. This License applies to any program or other work which contains; a notice placed by the copyright holder saying it may be distributed; under the terms of this General Public License. The ""Program"", below,; refers to any such program or work, and a ""work based on the Program""; means either the Program or any derivative work under copyright law:; that is to say, a work containing the Program or a portion of it,; either verbatim or with modifications and/or translated into another; language. (Hereinafter, translation is included without limitation in; the term ""modification"".) Each licensee is addressed as ""you"". Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; runn",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:12021,Usability,clear,clear,12021,"isfy both it and this License would be to; refrain entirely from distribution of the Program. If any portion of this section is held invalid or unenforceable under; any particular circumstance, the balance of the section is intended to; apply and the section as a whole is intended to apply in other; circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system, which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 8. If the distribution and/or use of the Program is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Program under this License; may add an explicit geographical distribution limitation excluding; those countries, so that distribution is permitted only in or among; countries not thus excluded. In such case, this License incorporates; the limitation as if written in the body of this License. 9. The Free Software Foundation may publish revised and/or new versions; of the General Public License from time to time. Such new versions will; be similar in spirit to the present version, but may differ in detail to; address new problems or concerns. Each version is given a distinguishing version number. If the Program; specifies a version number of this License which applies to it and ""any; later version"", you have the option of following the terms and conditio",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt:13608,Usability,guid,guided,13608,"ime to time. Such new versions will; be similar in spirit to the present version, but may differ in detail to; address new problems or concerns. Each version is given a distinguishing version number. If the Program; specifies a version number of this License which applies to it and ""any; later version"", you have the option of following the terms and conditions; either of that version or of any later version published by the Free; Software Foundation. If the Program does not specify a version number of; this License, you may choose any version ever published by the Free Software; Foundation. 10. If you wish to incorporate parts of the Program into other free; programs whose distribution conditions are different, write to the author; to ask for permission. For software which is copyrighted by the Free; Software Foundation, write to the Free Software Foundation; we sometimes; make exceptions for this. Our decision will be guided by the two goals; of preserving the free status of all derivatives of our free software and; of promoting the sharing and reuse of software generally. NO WARRANTY. 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY; FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN; OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES; PROVIDE THE PROGRAM ""AS IS"" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED; OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF; MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS; TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE; PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,; REPAIR OR CORRECTION. 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING; WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR; REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,; INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARI",MatchSource.DOCS,misc/rootsl/LICENSE.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/LICENSE.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt:197,Availability,avail,available,197,"ROOTSL; ======. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search string. Get the binary for the ROOTSL plugin from:. ftp://root.cern/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just double click the; ROOTSL.mdimporter icon. If you have no admin rights you will be asked for; the admin password. The plugin will be installed in /Library/Spotlight.; You can also install the plugin in your private area by dragging the; plugin to ~/Library/Spotlight. You may have to create that folder if; it does not exist. Once installed you have to tell SL to import existing; files by executing:; /usr/bin/mdimport -r [~]/Library/Spotlight/ROOTSL.mdimporter; Spotlight will then, in the background, index all *.root files. To build from source, get it from svn using:. git clone http://root.cern/git/root.git root; cd root/misc/rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTSL.xcodeproj"" in the Terminal app.; Copy the resulting plugin from build/Release to the /Library/Spotlight; directory by double clicking the icon, or by typing in the shell; ""open ROOTSL.mdimporter"". Cheers, Fons.; ",MatchSource.DOCS,misc/rootsl/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt:417,Deployability,install,install,417,"ROOTSL; ======. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search string. Get the binary for the ROOTSL plugin from:. ftp://root.cern/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just double click the; ROOTSL.mdimporter icon. If you have no admin rights you will be asked for; the admin password. The plugin will be installed in /Library/Spotlight.; You can also install the plugin in your private area by dragging the; plugin to ~/Library/Spotlight. You may have to create that folder if; it does not exist. Once installed you have to tell SL to import existing; files by executing:; /usr/bin/mdimport -r [~]/Library/Spotlight/ROOTSL.mdimporter; Spotlight will then, in the background, index all *.root files. To build from source, get it from svn using:. git clone http://root.cern/git/root.git root; cd root/misc/rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTSL.xcodeproj"" in the Terminal app.; Copy the resulting plugin from build/Release to the /Library/Spotlight; directory by double clicking the icon, or by typing in the shell; ""open ROOTSL.mdimporter"". Cheers, Fons.; ",MatchSource.DOCS,misc/rootsl/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt:606,Deployability,install,installed,606,"ROOTSL; ======. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search string. Get the binary for the ROOTSL plugin from:. ftp://root.cern/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just double click the; ROOTSL.mdimporter icon. If you have no admin rights you will be asked for; the admin password. The plugin will be installed in /Library/Spotlight.; You can also install the plugin in your private area by dragging the; plugin to ~/Library/Spotlight. You may have to create that folder if; it does not exist. Once installed you have to tell SL to import existing; files by executing:; /usr/bin/mdimport -r [~]/Library/Spotlight/ROOTSL.mdimporter; Spotlight will then, in the background, index all *.root files. To build from source, get it from svn using:. git clone http://root.cern/git/root.git root; cd root/misc/rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTSL.xcodeproj"" in the Terminal app.; Copy the resulting plugin from build/Release to the /Library/Spotlight; directory by double clicking the icon, or by typing in the shell; ""open ROOTSL.mdimporter"". Cheers, Fons.; ",MatchSource.DOCS,misc/rootsl/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt:653,Deployability,install,install,653,"ROOTSL; ======. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search string. Get the binary for the ROOTSL plugin from:. ftp://root.cern/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just double click the; ROOTSL.mdimporter icon. If you have no admin rights you will be asked for; the admin password. The plugin will be installed in /Library/Spotlight.; You can also install the plugin in your private area by dragging the; plugin to ~/Library/Spotlight. You may have to create that folder if; it does not exist. Once installed you have to tell SL to import existing; files by executing:; /usr/bin/mdimport -r [~]/Library/Spotlight/ROOTSL.mdimporter; Spotlight will then, in the background, index all *.root files. To build from source, get it from svn using:. git clone http://root.cern/git/root.git root; cd root/misc/rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTSL.xcodeproj"" in the Terminal app.; Copy the resulting plugin from build/Release to the /Library/Spotlight; directory by double clicking the icon, or by typing in the shell; ""open ROOTSL.mdimporter"". Cheers, Fons.; ",MatchSource.DOCS,misc/rootsl/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt:804,Deployability,install,installed,804,"ROOTSL; ======. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search string. Get the binary for the ROOTSL plugin from:. ftp://root.cern/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just double click the; ROOTSL.mdimporter icon. If you have no admin rights you will be asked for; the admin password. The plugin will be installed in /Library/Spotlight.; You can also install the plugin in your private area by dragging the; plugin to ~/Library/Spotlight. You may have to create that folder if; it does not exist. Once installed you have to tell SL to import existing; files by executing:; /usr/bin/mdimport -r [~]/Library/Spotlight/ROOTSL.mdimporter; Spotlight will then, in the background, index all *.root files. To build from source, get it from svn using:. git clone http://root.cern/git/root.git root; cd root/misc/rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTSL.xcodeproj"" in the Terminal app.; Copy the resulting plugin from build/Release to the /Library/Spotlight; directory by double clicking the icon, or by typing in the shell; ""open ROOTSL.mdimporter"". Cheers, Fons.; ",MatchSource.DOCS,misc/rootsl/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt:1197,Deployability,Configurat,Configuration,1197,"ROOTSL; ======. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search string. Get the binary for the ROOTSL plugin from:. ftp://root.cern/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just double click the; ROOTSL.mdimporter icon. If you have no admin rights you will be asked for; the admin password. The plugin will be installed in /Library/Spotlight.; You can also install the plugin in your private area by dragging the; plugin to ~/Library/Spotlight. You may have to create that folder if; it does not exist. Once installed you have to tell SL to import existing; files by executing:; /usr/bin/mdimport -r [~]/Library/Spotlight/ROOTSL.mdimporter; Spotlight will then, in the background, index all *.root files. To build from source, get it from svn using:. git clone http://root.cern/git/root.git root; cd root/misc/rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTSL.xcodeproj"" in the Terminal app.; Copy the resulting plugin from build/Release to the /Library/Spotlight; directory by double clicking the icon, or by typing in the shell; ""open ROOTSL.mdimporter"". Cheers, Fons.; ",MatchSource.DOCS,misc/rootsl/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt:1222,Deployability,Release,Release,1222,"ROOTSL; ======. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search string. Get the binary for the ROOTSL plugin from:. ftp://root.cern/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just double click the; ROOTSL.mdimporter icon. If you have no admin rights you will be asked for; the admin password. The plugin will be installed in /Library/Spotlight.; You can also install the plugin in your private area by dragging the; plugin to ~/Library/Spotlight. You may have to create that folder if; it does not exist. Once installed you have to tell SL to import existing; files by executing:; /usr/bin/mdimport -r [~]/Library/Spotlight/ROOTSL.mdimporter; Spotlight will then, in the background, index all *.root files. To build from source, get it from svn using:. git clone http://root.cern/git/root.git root; cd root/misc/rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTSL.xcodeproj"" in the Terminal app.; Copy the resulting plugin from build/Release to the /Library/Spotlight; directory by double clicking the icon, or by typing in the shell; ""open ROOTSL.mdimporter"". Cheers, Fons.; ",MatchSource.DOCS,misc/rootsl/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt:1379,Deployability,Release,Release,1379,"ROOTSL; ======. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search string. Get the binary for the ROOTSL plugin from:. ftp://root.cern/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just double click the; ROOTSL.mdimporter icon. If you have no admin rights you will be asked for; the admin password. The plugin will be installed in /Library/Spotlight.; You can also install the plugin in your private area by dragging the; plugin to ~/Library/Spotlight. You may have to create that folder if; it does not exist. Once installed you have to tell SL to import existing; files by executing:; /usr/bin/mdimport -r [~]/Library/Spotlight/ROOTSL.mdimporter; Spotlight will then, in the background, index all *.root files. To build from source, get it from svn using:. git clone http://root.cern/git/root.git root; cd root/misc/rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTSL.xcodeproj"" in the Terminal app.; Copy the resulting plugin from build/Release to the /Library/Spotlight; directory by double clicking the icon, or by typing in the shell; ""open ROOTSL.mdimporter"". Cheers, Fons.; ",MatchSource.DOCS,misc/rootsl/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt:36,Modifiability,plugin,plugin,36,"ROOTSL; ======. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search string. Get the binary for the ROOTSL plugin from:. ftp://root.cern/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just double click the; ROOTSL.mdimporter icon. If you have no admin rights you will be asked for; the admin password. The plugin will be installed in /Library/Spotlight.; You can also install the plugin in your private area by dragging the; plugin to ~/Library/Spotlight. You may have to create that folder if; it does not exist. Once installed you have to tell SL to import existing; files by executing:; /usr/bin/mdimport -r [~]/Library/Spotlight/ROOTSL.mdimporter; Spotlight will then, in the background, index all *.root files. To build from source, get it from svn using:. git clone http://root.cern/git/root.git root; cd root/misc/rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTSL.xcodeproj"" in the Terminal app.; Copy the resulting plugin from build/Release to the /Library/Spotlight; directory by double clicking the icon, or by typing in the shell; ""open ROOTSL.mdimporter"". Cheers, Fons.; ",MatchSource.DOCS,misc/rootsl/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt:367,Modifiability,plugin,plugin,367,"ROOTSL; ======. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search string. Get the binary for the ROOTSL plugin from:. ftp://root.cern/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just double click the; ROOTSL.mdimporter icon. If you have no admin rights you will be asked for; the admin password. The plugin will be installed in /Library/Spotlight.; You can also install the plugin in your private area by dragging the; plugin to ~/Library/Spotlight. You may have to create that folder if; it does not exist. Once installed you have to tell SL to import existing; files by executing:; /usr/bin/mdimport -r [~]/Library/Spotlight/ROOTSL.mdimporter; Spotlight will then, in the background, index all *.root files. To build from source, get it from svn using:. git clone http://root.cern/git/root.git root; cd root/misc/rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTSL.xcodeproj"" in the Terminal app.; Copy the resulting plugin from build/Release to the /Library/Spotlight; directory by double clicking the icon, or by typing in the shell; ""open ROOTSL.mdimporter"". Cheers, Fons.; ",MatchSource.DOCS,misc/rootsl/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt:429,Modifiability,plugin,plugin,429,"ROOTSL; ======. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search string. Get the binary for the ROOTSL plugin from:. ftp://root.cern/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just double click the; ROOTSL.mdimporter icon. If you have no admin rights you will be asked for; the admin password. The plugin will be installed in /Library/Spotlight.; You can also install the plugin in your private area by dragging the; plugin to ~/Library/Spotlight. You may have to create that folder if; it does not exist. Once installed you have to tell SL to import existing; files by executing:; /usr/bin/mdimport -r [~]/Library/Spotlight/ROOTSL.mdimporter; Spotlight will then, in the background, index all *.root files. To build from source, get it from svn using:. git clone http://root.cern/git/root.git root; cd root/misc/rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTSL.xcodeproj"" in the Terminal app.; Copy the resulting plugin from build/Release to the /Library/Spotlight; directory by double clicking the icon, or by typing in the shell; ""open ROOTSL.mdimporter"". Cheers, Fons.; ",MatchSource.DOCS,misc/rootsl/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt:591,Modifiability,plugin,plugin,591,"ROOTSL; ======. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search string. Get the binary for the ROOTSL plugin from:. ftp://root.cern/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just double click the; ROOTSL.mdimporter icon. If you have no admin rights you will be asked for; the admin password. The plugin will be installed in /Library/Spotlight.; You can also install the plugin in your private area by dragging the; plugin to ~/Library/Spotlight. You may have to create that folder if; it does not exist. Once installed you have to tell SL to import existing; files by executing:; /usr/bin/mdimport -r [~]/Library/Spotlight/ROOTSL.mdimporter; Spotlight will then, in the background, index all *.root files. To build from source, get it from svn using:. git clone http://root.cern/git/root.git root; cd root/misc/rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTSL.xcodeproj"" in the Terminal app.; Copy the resulting plugin from build/Release to the /Library/Spotlight; directory by double clicking the icon, or by typing in the shell; ""open ROOTSL.mdimporter"". Cheers, Fons.; ",MatchSource.DOCS,misc/rootsl/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt:665,Modifiability,plugin,plugin,665,"ROOTSL; ======. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search string. Get the binary for the ROOTSL plugin from:. ftp://root.cern/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just double click the; ROOTSL.mdimporter icon. If you have no admin rights you will be asked for; the admin password. The plugin will be installed in /Library/Spotlight.; You can also install the plugin in your private area by dragging the; plugin to ~/Library/Spotlight. You may have to create that folder if; it does not exist. Once installed you have to tell SL to import existing; files by executing:; /usr/bin/mdimport -r [~]/Library/Spotlight/ROOTSL.mdimporter; Spotlight will then, in the background, index all *.root files. To build from source, get it from svn using:. git clone http://root.cern/git/root.git root; cd root/misc/rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTSL.xcodeproj"" in the Terminal app.; Copy the resulting plugin from build/Release to the /Library/Spotlight; directory by double clicking the icon, or by typing in the shell; ""open ROOTSL.mdimporter"". Cheers, Fons.; ",MatchSource.DOCS,misc/rootsl/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt:710,Modifiability,plugin,plugin,710,"ROOTSL; ======. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search string. Get the binary for the ROOTSL plugin from:. ftp://root.cern/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just double click the; ROOTSL.mdimporter icon. If you have no admin rights you will be asked for; the admin password. The plugin will be installed in /Library/Spotlight.; You can also install the plugin in your private area by dragging the; plugin to ~/Library/Spotlight. You may have to create that folder if; it does not exist. Once installed you have to tell SL to import existing; files by executing:; /usr/bin/mdimport -r [~]/Library/Spotlight/ROOTSL.mdimporter; Spotlight will then, in the background, index all *.root files. To build from source, get it from svn using:. git clone http://root.cern/git/root.git root; cd root/misc/rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTSL.xcodeproj"" in the Terminal app.; Copy the resulting plugin from build/Release to the /Library/Spotlight; directory by double clicking the icon, or by typing in the shell; ""open ROOTSL.mdimporter"". Cheers, Fons.; ",MatchSource.DOCS,misc/rootsl/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt:1197,Modifiability,Config,Configuration,1197,"ROOTSL; ======. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search string. Get the binary for the ROOTSL plugin from:. ftp://root.cern/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just double click the; ROOTSL.mdimporter icon. If you have no admin rights you will be asked for; the admin password. The plugin will be installed in /Library/Spotlight.; You can also install the plugin in your private area by dragging the; plugin to ~/Library/Spotlight. You may have to create that folder if; it does not exist. Once installed you have to tell SL to import existing; files by executing:; /usr/bin/mdimport -r [~]/Library/Spotlight/ROOTSL.mdimporter; Spotlight will then, in the background, index all *.root files. To build from source, get it from svn using:. git clone http://root.cern/git/root.git root; cd root/misc/rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTSL.xcodeproj"" in the Terminal app.; Copy the resulting plugin from build/Release to the /Library/Spotlight; directory by double clicking the icon, or by typing in the shell; ""open ROOTSL.mdimporter"". Cheers, Fons.; ",MatchSource.DOCS,misc/rootsl/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt:1361,Modifiability,plugin,plugin,1361,"ROOTSL; ======. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search string. Get the binary for the ROOTSL plugin from:. ftp://root.cern/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just double click the; ROOTSL.mdimporter icon. If you have no admin rights you will be asked for; the admin password. The plugin will be installed in /Library/Spotlight.; You can also install the plugin in your private area by dragging the; plugin to ~/Library/Spotlight. You may have to create that folder if; it does not exist. Once installed you have to tell SL to import existing; files by executing:; /usr/bin/mdimport -r [~]/Library/Spotlight/ROOTSL.mdimporter; Spotlight will then, in the background, index all *.root files. To build from source, get it from svn using:. git clone http://root.cern/git/root.git root; cd root/misc/rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTSL.xcodeproj"" in the Terminal app.; Copy the resulting plugin from build/Release to the /Library/Spotlight; directory by double clicking the icon, or by typing in the shell; ""open ROOTSL.mdimporter"". Cheers, Fons.; ",MatchSource.DOCS,misc/rootsl/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt:577,Security,password,password,577,"ROOTSL; ======. This is a Spotlight plugin that allows ROOT files to be indexed by SL.; Once indexed SL can find ROOT files based on the names and titles of the; objects in the files. Spotlight is available on MacOS X since version 10.4 (Tiger). To use SL; select the SL icon on the top right of the menubar and type in a search string. Get the binary for the ROOTSL plugin from:. ftp://root.cern/root/ROOTSL.tgz. To install the plugin, after untarring the above file, just double click the; ROOTSL.mdimporter icon. If you have no admin rights you will be asked for; the admin password. The plugin will be installed in /Library/Spotlight.; You can also install the plugin in your private area by dragging the; plugin to ~/Library/Spotlight. You may have to create that folder if; it does not exist. Once installed you have to tell SL to import existing; files by executing:; /usr/bin/mdimport -r [~]/Library/Spotlight/ROOTSL.mdimporter; Spotlight will then, in the background, index all *.root files. To build from source, get it from svn using:. git clone http://root.cern/git/root.git root; cd root/misc/rootsl. Open the ROOTSL project in Xcode and click on ""Build"" (make sure the Active; Build Configuration is set to ""Release""). A command line short cut to open; the Xcode project is to type ""open ROOTSL.xcodeproj"" in the Terminal app.; Copy the resulting plugin from build/Release to the /Library/Spotlight; directory by double clicking the icon, or by typing in the shell; ""open ROOTSL.mdimporter"". Cheers, Fons.; ",MatchSource.DOCS,misc/rootsl/ReadMe.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rootsl/ReadMe.txt
https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/CMakeLists.txt:851,Integrability,DEPEND,DEPENDENCIES,851,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT montecarlo/eg package; # @author Pere Mato, CERN; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(EG; HEADERS; TAttParticle.h; TDatabasePDG.h; TDecayChannel.h; TGenerator.h; TPDGCode.h; TParticleClassPDG.h; TParticle.h; TParticlePDG.h; TPrimary.h; TVirtualMCDecayer.h; SOURCES; src/TAttParticle.cxx; src/TDatabasePDG.cxx; src/TDecayChannel.cxx; src/TGenerator.cxx; src/TParticleClassPDG.cxx; src/TParticle.cxx; src/TParticlePDG.cxx; src/TPrimary.cxx; src/TVirtualMCDecayer.cxx; DEPENDENCIES; Gpad; Graf; Graf3d; MathCore; Physics; ). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,montecarlo/eg/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/CMakeLists.txt:934,Testability,test,test,934,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT montecarlo/eg package; # @author Pere Mato, CERN; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(EG; HEADERS; TAttParticle.h; TDatabasePDG.h; TDecayChannel.h; TGenerator.h; TPDGCode.h; TParticleClassPDG.h; TParticle.h; TParticlePDG.h; TPrimary.h; TVirtualMCDecayer.h; SOURCES; src/TAttParticle.cxx; src/TDatabasePDG.cxx; src/TDecayChannel.cxx; src/TGenerator.cxx; src/TParticleClassPDG.cxx; src/TParticle.cxx; src/TParticlePDG.cxx; src/TPrimary.cxx; src/TVirtualMCDecayer.cxx; DEPENDENCIES; Gpad; Graf; Graf3d; MathCore; Physics; ). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,montecarlo/eg/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/montecarlo/pythia8/CMakeLists.txt:651,Integrability,DEPEND,DEPENDENCIES,651,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT montecarlo/pythia8 package; # @author Pere Mato, CERN; ############################################################################. # required also for cling; include_directories(${PYTHIA8_INCLUDE_DIR}). ROOT_STANDARD_LIBRARY_PACKAGE(EGPythia8; HEADERS; TPythia8.h; TPythia8Decayer.h; SOURCES; src/TPythia8.cxx; src/TPythia8Decayer.cxx; DEPENDENCIES; Core; EG; Graf; Physics; ). ROOT_ADD_CXX_FLAG(_EGPythia8_FLAGS -Wno-delete-non-virtual-dtor); ROOT_ADD_CXX_FLAG(_EGPythia8_FLAGS -Wno-misleading-indentation); ROOT_ADD_CXX_FLAG(_EGPythia8_FLAGS -Wno-overloaded-virtual). separate_arguments(_EGPythia8_FLAGS). target_compile_options(EGPythia8 PRIVATE ${_EGPythia8_FLAGS}); target_link_libraries(EGPythia8 PUBLIC ${PYTHIA8_LIBRARIES}); ",MatchSource.DOCS,montecarlo/pythia8/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/montecarlo/pythia8/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/test/CMakeLists.txt:234,Testability,TEST,TESTS,234,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN. #### C++ TESTS ####; ROOT_ADD_GTEST(pdgdatabase pdg.cxx LIBRARIES EG); ",MatchSource.DOCS,montecarlo/eg/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/net/auth/CMakeLists.txt:857,Integrability,DEPEND,DEPENDENCIES,857,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT net/auth package; # @author Pere Mato, CERN; ############################################################################. add_library(rsa STATIC src/rsaaux.cxx src/rsalib.cxx src/rsafun.cxx); target_include_directories(rsa PUBLIC res); set_property(TARGET rsa PROPERTY POSITION_INDEPENDENT_CODE ON). ROOT_STANDARD_LIBRARY_PACKAGE(RootAuth; HEADERS; AuthConst.h; TAuthenticate.h; THostAuth.h; TRootAuth.h; TRootSecContext.h; SOURCES; src/TAuthenticate.cxx; src/THostAuth.cxx; src/TRootAuth.cxx; src/TRootSecContext.cxx; LINKDEF; LinkDefRoot.h; DEPENDENCIES; Net; RIO; ). target_link_libraries(RootAuth PRIVATE rsa $<$<PLATFORM_ID:Linux>:crypt> $<$<PLATFORM_ID:FreeBSD>:crypt>); ",MatchSource.DOCS,net/auth/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/net/davix/CMakeLists.txt:637,Integrability,DEPEND,DEPENDENCIES,637,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT net/davix package; # @author Pere Mato, CERN; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(RDAVIX; HEADERS; ROOT/RRawFileDavix.hxx; TDavixFile.h; TDavixSystem.h; SOURCES; src/RRawFileDavix.cxx; src/TDavixFile.cxx; src/TDavixSystem.cxx; LIBRARIES; Davix::Davix; DEPENDENCIES; Net; RIO; ). target_compile_options(RDAVIX PRIVATE -Wno-deprecated-declarations). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,net/davix/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/davix/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/net/davix/CMakeLists.txt:760,Testability,test,test,760,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT net/davix package; # @author Pere Mato, CERN; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(RDAVIX; HEADERS; ROOT/RRawFileDavix.hxx; TDavixFile.h; TDavixSystem.h; SOURCES; src/RRawFileDavix.cxx; src/TDavixFile.cxx; src/TDavixSystem.cxx; LIBRARIES; Davix::Davix; DEPENDENCIES; Net; RIO; ). target_compile_options(RDAVIX PRIVATE -Wno-deprecated-declarations). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,net/davix/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/davix/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/CMakeLists.txt:1210,Integrability,DEPEND,DEPENDENCIES,1210,"E/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT net/http package; # @author Pere Mato, CERN; ############################################################################. if(NOT FASTCGI_FOUND); set(FASTCGI_LIBRARY """"); endif(). # look for the realtime extensions library and use it if it exists; find_library(RT_LIBRARY rt); if(RT_LIBRARY); set(RT_LIBRARIES ${RT_LIBRARY}); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(RHTTP; HEADERS; THttpCallArg.h; THttpEngine.h; THttpServer.h; THttpWSHandler.h; TRootSniffer.h; TRootSnifferStore.h; SOURCES; src/TCivetweb.cxx; src/TCivetweb.h; src/TFastCgi.cxx; src/TFastCgi.h; src/THttpCallArg.cxx; src/THttpEngine.cxx; src/THttpLongPollEngine.cxx; src/THttpLongPollEngine.h; src/THttpServer.cxx; src/THttpWSEngine.cxx; src/THttpWSEngine.h; src/THttpWSHandler.cxx; src/TRootSniffer.cxx; src/TRootSnifferStore.cxx; civetweb/civetweb.c; LIBRARIES; ZLIB::ZLIB; ${RT_LIBRARIES}; ${FASTCGI_LIBRARY}; ${CMAKE_DL_LIBS}; DEPENDENCIES; RIO; Thread; ). if(ssl); target_include_directories(RHTTP SYSTEM PRIVATE ${OPENSSL_INCLUDE_DIR}); endif(). if(FASTCGI_FOUND); target_include_directories(RHTTP PRIVATE ${FASTCGI_INCLUDE_DIR}); endif(). target_compile_definitions(RHTTP PRIVATE -DUSE_WEBSOCKET). if(NOT MSVC); target_compile_definitions(RHTTP PRIVATE -DUSE_X_DOM_SOCKET); endif(). if(ssl); if(OPENSSL_VERSION); string(REPLACE ""."" "";"" lst ${OPENSSL_VERSION}); list(GET lst 0 ssl_major); list(GET lst 1 ssl_minor); endif(). if((${ssl_major} EQUAL ""1"") AND (${ssl_minor} EQUAL ""1"")); MESSAGE(STATUS ""Use SSL API VERSION 1.1 for civetweb""); target_compile_definitions(RHTTP PUBLIC -DOPENSSL_API_1_1); set(link_ssl ON); elseif(${ssl_major} EQUAL ""3""); MESSAGE(STATUS ""Use SSL API VERSION 3.${ssl_minor} for civetweb""); target_compile_definitions(RHTTP PUBLIC -DOPENSSL_API_3_0); set(link_ssl ON); elseif((${ssl_major} EQUAL ""1"") AND (${ssl_minor} EQUAL ""0"")); MESSAGE(STATUS ""Use SSL API VERSION 1.0 f",MatchSource.DOCS,net/http/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/CMakeLists.txt:1769,Integrability,MESSAGE,MESSAGE,1769,"rver.h; THttpWSHandler.h; TRootSniffer.h; TRootSnifferStore.h; SOURCES; src/TCivetweb.cxx; src/TCivetweb.h; src/TFastCgi.cxx; src/TFastCgi.h; src/THttpCallArg.cxx; src/THttpEngine.cxx; src/THttpLongPollEngine.cxx; src/THttpLongPollEngine.h; src/THttpServer.cxx; src/THttpWSEngine.cxx; src/THttpWSEngine.h; src/THttpWSHandler.cxx; src/TRootSniffer.cxx; src/TRootSnifferStore.cxx; civetweb/civetweb.c; LIBRARIES; ZLIB::ZLIB; ${RT_LIBRARIES}; ${FASTCGI_LIBRARY}; ${CMAKE_DL_LIBS}; DEPENDENCIES; RIO; Thread; ). if(ssl); target_include_directories(RHTTP SYSTEM PRIVATE ${OPENSSL_INCLUDE_DIR}); endif(). if(FASTCGI_FOUND); target_include_directories(RHTTP PRIVATE ${FASTCGI_INCLUDE_DIR}); endif(). target_compile_definitions(RHTTP PRIVATE -DUSE_WEBSOCKET). if(NOT MSVC); target_compile_definitions(RHTTP PRIVATE -DUSE_X_DOM_SOCKET); endif(). if(ssl); if(OPENSSL_VERSION); string(REPLACE ""."" "";"" lst ${OPENSSL_VERSION}); list(GET lst 0 ssl_major); list(GET lst 1 ssl_minor); endif(). if((${ssl_major} EQUAL ""1"") AND (${ssl_minor} EQUAL ""1"")); MESSAGE(STATUS ""Use SSL API VERSION 1.1 for civetweb""); target_compile_definitions(RHTTP PUBLIC -DOPENSSL_API_1_1); set(link_ssl ON); elseif(${ssl_major} EQUAL ""3""); MESSAGE(STATUS ""Use SSL API VERSION 3.${ssl_minor} for civetweb""); target_compile_definitions(RHTTP PUBLIC -DOPENSSL_API_3_0); set(link_ssl ON); elseif((${ssl_major} EQUAL ""1"") AND (${ssl_minor} EQUAL ""0"")); MESSAGE(STATUS ""Use SSL API VERSION 1.0 for civetweb""); target_compile_definitions(RHTTP PUBLIC -DOPENSSL_API_1_0); set(link_ssl ON); else(); MESSAGE(WARNING ""Not able to recognize SSL version ${OPENSSL_VERSION}, disable SSL""); target_compile_definitions(RHTTP PUBLIC -DNO_SSL); endif(); if(link_ssl); target_compile_definitions(RHTTP PUBLIC -DNO_SSL_DL); target_link_libraries(RHTTP PRIVATE ${OPENSSL_LIBRARIES}); endif(); else(); target_compile_definitions(RHTTP PUBLIC -DNO_SSL); endif(). if(NOT FASTCGI_FOUND); target_compile_definitions(RHTTP PUBLIC -DHTTP_WITHOUT_FASTCGI); endif(); ",MatchSource.DOCS,net/http/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/CMakeLists.txt:1935,Integrability,MESSAGE,MESSAGE,1935,"rver.h; THttpWSHandler.h; TRootSniffer.h; TRootSnifferStore.h; SOURCES; src/TCivetweb.cxx; src/TCivetweb.h; src/TFastCgi.cxx; src/TFastCgi.h; src/THttpCallArg.cxx; src/THttpEngine.cxx; src/THttpLongPollEngine.cxx; src/THttpLongPollEngine.h; src/THttpServer.cxx; src/THttpWSEngine.cxx; src/THttpWSEngine.h; src/THttpWSHandler.cxx; src/TRootSniffer.cxx; src/TRootSnifferStore.cxx; civetweb/civetweb.c; LIBRARIES; ZLIB::ZLIB; ${RT_LIBRARIES}; ${FASTCGI_LIBRARY}; ${CMAKE_DL_LIBS}; DEPENDENCIES; RIO; Thread; ). if(ssl); target_include_directories(RHTTP SYSTEM PRIVATE ${OPENSSL_INCLUDE_DIR}); endif(). if(FASTCGI_FOUND); target_include_directories(RHTTP PRIVATE ${FASTCGI_INCLUDE_DIR}); endif(). target_compile_definitions(RHTTP PRIVATE -DUSE_WEBSOCKET). if(NOT MSVC); target_compile_definitions(RHTTP PRIVATE -DUSE_X_DOM_SOCKET); endif(). if(ssl); if(OPENSSL_VERSION); string(REPLACE ""."" "";"" lst ${OPENSSL_VERSION}); list(GET lst 0 ssl_major); list(GET lst 1 ssl_minor); endif(). if((${ssl_major} EQUAL ""1"") AND (${ssl_minor} EQUAL ""1"")); MESSAGE(STATUS ""Use SSL API VERSION 1.1 for civetweb""); target_compile_definitions(RHTTP PUBLIC -DOPENSSL_API_1_1); set(link_ssl ON); elseif(${ssl_major} EQUAL ""3""); MESSAGE(STATUS ""Use SSL API VERSION 3.${ssl_minor} for civetweb""); target_compile_definitions(RHTTP PUBLIC -DOPENSSL_API_3_0); set(link_ssl ON); elseif((${ssl_major} EQUAL ""1"") AND (${ssl_minor} EQUAL ""0"")); MESSAGE(STATUS ""Use SSL API VERSION 1.0 for civetweb""); target_compile_definitions(RHTTP PUBLIC -DOPENSSL_API_1_0); set(link_ssl ON); else(); MESSAGE(WARNING ""Not able to recognize SSL version ${OPENSSL_VERSION}, disable SSL""); target_compile_definitions(RHTTP PUBLIC -DNO_SSL); endif(); if(link_ssl); target_compile_definitions(RHTTP PUBLIC -DNO_SSL_DL); target_link_libraries(RHTTP PRIVATE ${OPENSSL_LIBRARIES}); endif(); else(); target_compile_definitions(RHTTP PUBLIC -DNO_SSL); endif(). if(NOT FASTCGI_FOUND); target_compile_definitions(RHTTP PUBLIC -DHTTP_WITHOUT_FASTCGI); endif(); ",MatchSource.DOCS,net/http/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/CMakeLists.txt:2143,Integrability,MESSAGE,MESSAGE,2143,"rver.h; THttpWSHandler.h; TRootSniffer.h; TRootSnifferStore.h; SOURCES; src/TCivetweb.cxx; src/TCivetweb.h; src/TFastCgi.cxx; src/TFastCgi.h; src/THttpCallArg.cxx; src/THttpEngine.cxx; src/THttpLongPollEngine.cxx; src/THttpLongPollEngine.h; src/THttpServer.cxx; src/THttpWSEngine.cxx; src/THttpWSEngine.h; src/THttpWSHandler.cxx; src/TRootSniffer.cxx; src/TRootSnifferStore.cxx; civetweb/civetweb.c; LIBRARIES; ZLIB::ZLIB; ${RT_LIBRARIES}; ${FASTCGI_LIBRARY}; ${CMAKE_DL_LIBS}; DEPENDENCIES; RIO; Thread; ). if(ssl); target_include_directories(RHTTP SYSTEM PRIVATE ${OPENSSL_INCLUDE_DIR}); endif(). if(FASTCGI_FOUND); target_include_directories(RHTTP PRIVATE ${FASTCGI_INCLUDE_DIR}); endif(). target_compile_definitions(RHTTP PRIVATE -DUSE_WEBSOCKET). if(NOT MSVC); target_compile_definitions(RHTTP PRIVATE -DUSE_X_DOM_SOCKET); endif(). if(ssl); if(OPENSSL_VERSION); string(REPLACE ""."" "";"" lst ${OPENSSL_VERSION}); list(GET lst 0 ssl_major); list(GET lst 1 ssl_minor); endif(). if((${ssl_major} EQUAL ""1"") AND (${ssl_minor} EQUAL ""1"")); MESSAGE(STATUS ""Use SSL API VERSION 1.1 for civetweb""); target_compile_definitions(RHTTP PUBLIC -DOPENSSL_API_1_1); set(link_ssl ON); elseif(${ssl_major} EQUAL ""3""); MESSAGE(STATUS ""Use SSL API VERSION 3.${ssl_minor} for civetweb""); target_compile_definitions(RHTTP PUBLIC -DOPENSSL_API_3_0); set(link_ssl ON); elseif((${ssl_major} EQUAL ""1"") AND (${ssl_minor} EQUAL ""0"")); MESSAGE(STATUS ""Use SSL API VERSION 1.0 for civetweb""); target_compile_definitions(RHTTP PUBLIC -DOPENSSL_API_1_0); set(link_ssl ON); else(); MESSAGE(WARNING ""Not able to recognize SSL version ${OPENSSL_VERSION}, disable SSL""); target_compile_definitions(RHTTP PUBLIC -DNO_SSL); endif(); if(link_ssl); target_compile_definitions(RHTTP PUBLIC -DNO_SSL_DL); target_link_libraries(RHTTP PRIVATE ${OPENSSL_LIBRARIES}); endif(); else(); target_compile_definitions(RHTTP PUBLIC -DNO_SSL); endif(). if(NOT FASTCGI_FOUND); target_compile_definitions(RHTTP PUBLIC -DHTTP_WITHOUT_FASTCGI); endif(); ",MatchSource.DOCS,net/http/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/CMakeLists.txt:2285,Integrability,MESSAGE,MESSAGE,2285,"rver.h; THttpWSHandler.h; TRootSniffer.h; TRootSnifferStore.h; SOURCES; src/TCivetweb.cxx; src/TCivetweb.h; src/TFastCgi.cxx; src/TFastCgi.h; src/THttpCallArg.cxx; src/THttpEngine.cxx; src/THttpLongPollEngine.cxx; src/THttpLongPollEngine.h; src/THttpServer.cxx; src/THttpWSEngine.cxx; src/THttpWSEngine.h; src/THttpWSHandler.cxx; src/TRootSniffer.cxx; src/TRootSnifferStore.cxx; civetweb/civetweb.c; LIBRARIES; ZLIB::ZLIB; ${RT_LIBRARIES}; ${FASTCGI_LIBRARY}; ${CMAKE_DL_LIBS}; DEPENDENCIES; RIO; Thread; ). if(ssl); target_include_directories(RHTTP SYSTEM PRIVATE ${OPENSSL_INCLUDE_DIR}); endif(). if(FASTCGI_FOUND); target_include_directories(RHTTP PRIVATE ${FASTCGI_INCLUDE_DIR}); endif(). target_compile_definitions(RHTTP PRIVATE -DUSE_WEBSOCKET). if(NOT MSVC); target_compile_definitions(RHTTP PRIVATE -DUSE_X_DOM_SOCKET); endif(). if(ssl); if(OPENSSL_VERSION); string(REPLACE ""."" "";"" lst ${OPENSSL_VERSION}); list(GET lst 0 ssl_major); list(GET lst 1 ssl_minor); endif(). if((${ssl_major} EQUAL ""1"") AND (${ssl_minor} EQUAL ""1"")); MESSAGE(STATUS ""Use SSL API VERSION 1.1 for civetweb""); target_compile_definitions(RHTTP PUBLIC -DOPENSSL_API_1_1); set(link_ssl ON); elseif(${ssl_major} EQUAL ""3""); MESSAGE(STATUS ""Use SSL API VERSION 3.${ssl_minor} for civetweb""); target_compile_definitions(RHTTP PUBLIC -DOPENSSL_API_3_0); set(link_ssl ON); elseif((${ssl_major} EQUAL ""1"") AND (${ssl_minor} EQUAL ""0"")); MESSAGE(STATUS ""Use SSL API VERSION 1.0 for civetweb""); target_compile_definitions(RHTTP PUBLIC -DOPENSSL_API_1_0); set(link_ssl ON); else(); MESSAGE(WARNING ""Not able to recognize SSL version ${OPENSSL_VERSION}, disable SSL""); target_compile_definitions(RHTTP PUBLIC -DNO_SSL); endif(); if(link_ssl); target_compile_definitions(RHTTP PUBLIC -DNO_SSL_DL); target_link_libraries(RHTTP PRIVATE ${OPENSSL_LIBRARIES}); endif(); else(); target_compile_definitions(RHTTP PUBLIC -DNO_SSL); endif(). if(NOT FASTCGI_FOUND); target_compile_definitions(RHTTP PUBLIC -DHTTP_WITHOUT_FASTCGI); endif(); ",MatchSource.DOCS,net/http/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt:1875,Availability,error,error,1875,"be specified in web server configuration.; For instance, lighttpd.conf file could contain path like this:. fastcgi.server = (; ""/remote_scripts/"" =>; (( ""host"" => ""192.168.1.10"",; ""port"" => 9000,; ""check-local"" => ""disable"",; ""docroot"" => ""/""; )); ). In this case one should be able to access root application via address. http://your_lighttpd_host/remote_scripts/root.cgi/. AUTHOR:. Sergey Linev, S.Linev@gsi.de. CHANGES:. January 2015; - Provide exe.json request to execute arbitrary object method and return; result in JSON format. Server should run in non-readonly mode. Fall 2014; - Implement gzip for result of any submitted requests, automatically done ; when .gz extension is provided; - Provide access to arbitrary data member of objects, registered to the server; - Prevent data caching in the browser by setting no-cache header. April 2014; - In TCivetweb class support digest authentication method. User; can specify auth_file and auth_domain parameters to protect; access to the server; - Fix error in FastCgi, now correctly works with Apache; - Avoid direct usage of TASImage. March 2014; - Replace mongoose by civetweb due to more liberal MIT license.; Works out of the box while civetweb version fully corresponds to; previously used version of mongoose.; - Introduce TBufferJSON class to store arbitrary ROOT object; into JSON format. It is not one-to-one storage (like XML), but; rather JS-like structures. For instance, all TCollections converted; into JavaScript Array. Produced JS object is similar to JSRootIO.; - Process get.json request, which returns object in JSON form.; It can be used directly is script without special I/O of Bertrand.; - Use get.json on browser side to simplify logic. No need for extra; requests for streamer infos.; - Process get.xml request, provide full object streaming via TBufferXML.; It is complete object data, but with many custom-streamer data.; - Significant redesign of I/O part of JSRootIO code. Main change -; introduce JSROOTIO.TBuffer c",MatchSource.DOCS,net/http/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt:896,Deployability,configurat,configuration,896,"GOAL:. Provide http interface to arbitrary ROOT application. USAGE:. At any place of the code create http server:. root [0] serv = new THttpServer. By default, civetweb web server with port number 8080 will be started.; It gets access to files, canvases and trees, registered in gROOT.; One additionally could register other objects to the server:. root [1] serv->Register(""abc/fold1"", hpx);; root [2] serv->Register(""abc/fold2"", hpxpy);; root [3] serv->Register(""extra"", c1);. Once server running, just open in any browser page: http://yourhost:8080. Example macro: $ROOTSYS/tutorials/http/httpserver.C. FAST CGI:. Instead of running http server, one could use fast cgi interface; to normal web server like Apache or lighttpd or any other.; When creating server, one could specify:. root [0] serv = new THttpServer(""fastcgi:9000"");. This opens port 9000, which should be specified in web server configuration.; For instance, lighttpd.conf file could contain path like this:. fastcgi.server = (; ""/remote_scripts/"" =>; (( ""host"" => ""192.168.1.10"",; ""port"" => 9000,; ""check-local"" => ""disable"",; ""docroot"" => ""/""; )); ). In this case one should be able to access root application via address. http://your_lighttpd_host/remote_scripts/root.cgi/. AUTHOR:. Sergey Linev, S.Linev@gsi.de. CHANGES:. January 2015; - Provide exe.json request to execute arbitrary object method and return; result in JSON format. Server should run in non-readonly mode. Fall 2014; - Implement gzip for result of any submitted requests, automatically done ; when .gz extension is provided; - Provide access to arbitrary data member of objects, registered to the server; - Prevent data caching in the browser by setting no-cache header. April 2014; - In TCivetweb class support digest authentication method. User; can specify auth_file and auth_domain parameters to protect; access to the server; - Fix error in FastCgi, now correctly works with Apache; - Avoid direct usage of TASImage. March 2014; - Replace mongoose by civetwe",MatchSource.DOCS,net/http/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt:4965,Deployability,Integrat,Integrate,4965,"ootIO avoid objects cloning when object referenced several times; - Treat special cases (collection, arrays) in one place.; This is major advantage, while any new classes should be implemented once.; - Object representation, produced by JSRootIO is similar to; objects, produced by TBufferJSON class. By this one can exchange; I/O engine and use same JavaSctript graphic for display.; - More clear functions to display different elements of the file.; In the future functions should be fully separated from I/O part; and organized in similar way as online part.; - Eliminate usage of gFile pointer in the I/O part.; - Provide TBufferJSON::JsonWriteMember method. It allows to stream any; selected data member of the class. Supported are: basic data types,; arrays of basic data types, TString, TArray classes. Also any object; as data member can be streamed.; - TRootSniffer do not creates sublevels for base classes; - When streaming data member, TBufferJSON produces array with all dimensions; only when fCompact==0. By default, THttpServer uses compact=1 for member; - Support both get.json and root.json requests, they have similar meaning. January 2014; - Make THttpServer::CreateEngine as factory method. One could; create http, fastcgi and dabc engines to access data from server.; Syntax allows to provide arbitrary arguments. Examples:; THttpServer* serv = new THttpServer();; serv->CreateEngine(""http:8080"");; serv->CreateEngine(""fastcgi:9000/none?top=MyApp"");; serv->CreateEngine(""dabc:1237?top=MyApp"");; serv->CreateEngine(""dabc:http:8090?top=MyApp"");; serv->CreateEngine(""dabc:fastcgi:9010?top=MyApp"");; - Many engines can be created at once.; - Provide TDabcEngine (in DABC framework).; - Support additional options for mongoose and fastcgi servers; - Port to ROOT 6 (adjust makefiles), keep Module.mk.ver5. December 2013; - Start of project; - Move ROOT-relevant functionality from DABC plugin; - Introduce THttpServer, THttpEngine and TRootSniffer classes; - Integrate JSRootIO code. ",MatchSource.DOCS,net/http/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt:20,Integrability,interface,interface,20,"GOAL:. Provide http interface to arbitrary ROOT application. USAGE:. At any place of the code create http server:. root [0] serv = new THttpServer. By default, civetweb web server with port number 8080 will be started.; It gets access to files, canvases and trees, registered in gROOT.; One additionally could register other objects to the server:. root [1] serv->Register(""abc/fold1"", hpx);; root [2] serv->Register(""abc/fold2"", hpxpy);; root [3] serv->Register(""extra"", c1);. Once server running, just open in any browser page: http://yourhost:8080. Example macro: $ROOTSYS/tutorials/http/httpserver.C. FAST CGI:. Instead of running http server, one could use fast cgi interface; to normal web server like Apache or lighttpd or any other.; When creating server, one could specify:. root [0] serv = new THttpServer(""fastcgi:9000"");. This opens port 9000, which should be specified in web server configuration.; For instance, lighttpd.conf file could contain path like this:. fastcgi.server = (; ""/remote_scripts/"" =>; (( ""host"" => ""192.168.1.10"",; ""port"" => 9000,; ""check-local"" => ""disable"",; ""docroot"" => ""/""; )); ). In this case one should be able to access root application via address. http://your_lighttpd_host/remote_scripts/root.cgi/. AUTHOR:. Sergey Linev, S.Linev@gsi.de. CHANGES:. January 2015; - Provide exe.json request to execute arbitrary object method and return; result in JSON format. Server should run in non-readonly mode. Fall 2014; - Implement gzip for result of any submitted requests, automatically done ; when .gz extension is provided; - Provide access to arbitrary data member of objects, registered to the server; - Prevent data caching in the browser by setting no-cache header. April 2014; - In TCivetweb class support digest authentication method. User; can specify auth_file and auth_domain parameters to protect; access to the server; - Fix error in FastCgi, now correctly works with Apache; - Avoid direct usage of TASImage. March 2014; - Replace mongoose by civetwe",MatchSource.DOCS,net/http/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt:671,Integrability,interface,interface,671,"GOAL:. Provide http interface to arbitrary ROOT application. USAGE:. At any place of the code create http server:. root [0] serv = new THttpServer. By default, civetweb web server with port number 8080 will be started.; It gets access to files, canvases and trees, registered in gROOT.; One additionally could register other objects to the server:. root [1] serv->Register(""abc/fold1"", hpx);; root [2] serv->Register(""abc/fold2"", hpxpy);; root [3] serv->Register(""extra"", c1);. Once server running, just open in any browser page: http://yourhost:8080. Example macro: $ROOTSYS/tutorials/http/httpserver.C. FAST CGI:. Instead of running http server, one could use fast cgi interface; to normal web server like Apache or lighttpd or any other.; When creating server, one could specify:. root [0] serv = new THttpServer(""fastcgi:9000"");. This opens port 9000, which should be specified in web server configuration.; For instance, lighttpd.conf file could contain path like this:. fastcgi.server = (; ""/remote_scripts/"" =>; (( ""host"" => ""192.168.1.10"",; ""port"" => 9000,; ""check-local"" => ""disable"",; ""docroot"" => ""/""; )); ). In this case one should be able to access root application via address. http://your_lighttpd_host/remote_scripts/root.cgi/. AUTHOR:. Sergey Linev, S.Linev@gsi.de. CHANGES:. January 2015; - Provide exe.json request to execute arbitrary object method and return; result in JSON format. Server should run in non-readonly mode. Fall 2014; - Implement gzip for result of any submitted requests, automatically done ; when .gz extension is provided; - Provide access to arbitrary data member of objects, registered to the server; - Prevent data caching in the browser by setting no-cache header. April 2014; - In TCivetweb class support digest authentication method. User; can specify auth_file and auth_domain parameters to protect; access to the server; - Fix error in FastCgi, now correctly works with Apache; - Avoid direct usage of TASImage. March 2014; - Replace mongoose by civetwe",MatchSource.DOCS,net/http/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt:4965,Integrability,Integrat,Integrate,4965,"ootIO avoid objects cloning when object referenced several times; - Treat special cases (collection, arrays) in one place.; This is major advantage, while any new classes should be implemented once.; - Object representation, produced by JSRootIO is similar to; objects, produced by TBufferJSON class. By this one can exchange; I/O engine and use same JavaSctript graphic for display.; - More clear functions to display different elements of the file.; In the future functions should be fully separated from I/O part; and organized in similar way as online part.; - Eliminate usage of gFile pointer in the I/O part.; - Provide TBufferJSON::JsonWriteMember method. It allows to stream any; selected data member of the class. Supported are: basic data types,; arrays of basic data types, TString, TArray classes. Also any object; as data member can be streamed.; - TRootSniffer do not creates sublevels for base classes; - When streaming data member, TBufferJSON produces array with all dimensions; only when fCompact==0. By default, THttpServer uses compact=1 for member; - Support both get.json and root.json requests, they have similar meaning. January 2014; - Make THttpServer::CreateEngine as factory method. One could; create http, fastcgi and dabc engines to access data from server.; Syntax allows to provide arbitrary arguments. Examples:; THttpServer* serv = new THttpServer();; serv->CreateEngine(""http:8080"");; serv->CreateEngine(""fastcgi:9000/none?top=MyApp"");; serv->CreateEngine(""dabc:1237?top=MyApp"");; serv->CreateEngine(""dabc:http:8090?top=MyApp"");; serv->CreateEngine(""dabc:fastcgi:9010?top=MyApp"");; - Many engines can be created at once.; - Provide TDabcEngine (in DABC framework).; - Support additional options for mongoose and fastcgi servers; - Port to ROOT 6 (adjust makefiles), keep Module.mk.ver5. December 2013; - Start of project; - Move ROOT-relevant functionality from DABC plugin; - Introduce THttpServer, THttpEngine and TRootSniffer classes; - Integrate JSRootIO code. ",MatchSource.DOCS,net/http/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt:896,Modifiability,config,configuration,896,"GOAL:. Provide http interface to arbitrary ROOT application. USAGE:. At any place of the code create http server:. root [0] serv = new THttpServer. By default, civetweb web server with port number 8080 will be started.; It gets access to files, canvases and trees, registered in gROOT.; One additionally could register other objects to the server:. root [1] serv->Register(""abc/fold1"", hpx);; root [2] serv->Register(""abc/fold2"", hpxpy);; root [3] serv->Register(""extra"", c1);. Once server running, just open in any browser page: http://yourhost:8080. Example macro: $ROOTSYS/tutorials/http/httpserver.C. FAST CGI:. Instead of running http server, one could use fast cgi interface; to normal web server like Apache or lighttpd or any other.; When creating server, one could specify:. root [0] serv = new THttpServer(""fastcgi:9000"");. This opens port 9000, which should be specified in web server configuration.; For instance, lighttpd.conf file could contain path like this:. fastcgi.server = (; ""/remote_scripts/"" =>; (( ""host"" => ""192.168.1.10"",; ""port"" => 9000,; ""check-local"" => ""disable"",; ""docroot"" => ""/""; )); ). In this case one should be able to access root application via address. http://your_lighttpd_host/remote_scripts/root.cgi/. AUTHOR:. Sergey Linev, S.Linev@gsi.de. CHANGES:. January 2015; - Provide exe.json request to execute arbitrary object method and return; result in JSON format. Server should run in non-readonly mode. Fall 2014; - Implement gzip for result of any submitted requests, automatically done ; when .gz extension is provided; - Provide access to arbitrary data member of objects, registered to the server; - Prevent data caching in the browser by setting no-cache header. April 2014; - In TCivetweb class support digest authentication method. User; can specify auth_file and auth_domain parameters to protect; access to the server; - Fix error in FastCgi, now correctly works with Apache; - Avoid direct usage of TASImage. March 2014; - Replace mongoose by civetwe",MatchSource.DOCS,net/http/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt:4892,Modifiability,plugin,plugin,4892,"ootIO avoid objects cloning when object referenced several times; - Treat special cases (collection, arrays) in one place.; This is major advantage, while any new classes should be implemented once.; - Object representation, produced by JSRootIO is similar to; objects, produced by TBufferJSON class. By this one can exchange; I/O engine and use same JavaSctript graphic for display.; - More clear functions to display different elements of the file.; In the future functions should be fully separated from I/O part; and organized in similar way as online part.; - Eliminate usage of gFile pointer in the I/O part.; - Provide TBufferJSON::JsonWriteMember method. It allows to stream any; selected data member of the class. Supported are: basic data types,; arrays of basic data types, TString, TArray classes. Also any object; as data member can be streamed.; - TRootSniffer do not creates sublevels for base classes; - When streaming data member, TBufferJSON produces array with all dimensions; only when fCompact==0. By default, THttpServer uses compact=1 for member; - Support both get.json and root.json requests, they have similar meaning. January 2014; - Make THttpServer::CreateEngine as factory method. One could; create http, fastcgi and dabc engines to access data from server.; Syntax allows to provide arbitrary arguments. Examples:; THttpServer* serv = new THttpServer();; serv->CreateEngine(""http:8080"");; serv->CreateEngine(""fastcgi:9000/none?top=MyApp"");; serv->CreateEngine(""dabc:1237?top=MyApp"");; serv->CreateEngine(""dabc:http:8090?top=MyApp"");; serv->CreateEngine(""dabc:fastcgi:9010?top=MyApp"");; - Many engines can be created at once.; - Provide TDabcEngine (in DABC framework).; - Support additional options for mongoose and fastcgi servers; - Port to ROOT 6 (adjust makefiles), keep Module.mk.ver5. December 2013; - Start of project; - Move ROOT-relevant functionality from DABC plugin; - Introduce THttpServer, THttpEngine and TRootSniffer classes; - Integrate JSRootIO code. ",MatchSource.DOCS,net/http/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt:1695,Performance,cache,cache,1695,"d of running http server, one could use fast cgi interface; to normal web server like Apache or lighttpd or any other.; When creating server, one could specify:. root [0] serv = new THttpServer(""fastcgi:9000"");. This opens port 9000, which should be specified in web server configuration.; For instance, lighttpd.conf file could contain path like this:. fastcgi.server = (; ""/remote_scripts/"" =>; (( ""host"" => ""192.168.1.10"",; ""port"" => 9000,; ""check-local"" => ""disable"",; ""docroot"" => ""/""; )); ). In this case one should be able to access root application via address. http://your_lighttpd_host/remote_scripts/root.cgi/. AUTHOR:. Sergey Linev, S.Linev@gsi.de. CHANGES:. January 2015; - Provide exe.json request to execute arbitrary object method and return; result in JSON format. Server should run in non-readonly mode. Fall 2014; - Implement gzip for result of any submitted requests, automatically done ; when .gz extension is provided; - Provide access to arbitrary data member of objects, registered to the server; - Prevent data caching in the browser by setting no-cache header. April 2014; - In TCivetweb class support digest authentication method. User; can specify auth_file and auth_domain parameters to protect; access to the server; - Fix error in FastCgi, now correctly works with Apache; - Avoid direct usage of TASImage. March 2014; - Replace mongoose by civetweb due to more liberal MIT license.; Works out of the box while civetweb version fully corresponds to; previously used version of mongoose.; - Introduce TBufferJSON class to store arbitrary ROOT object; into JSON format. It is not one-to-one storage (like XML), but; rather JS-like structures. For instance, all TCollections converted; into JavaScript Array. Produced JS object is similar to JSRootIO.; - Process get.json request, which returns object in JSON form.; It can be used directly is script without special I/O of Bertrand.; - Use get.json on browser side to simplify logic. No need for extra; requests for stream",MatchSource.DOCS,net/http/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt:1928,Safety,Avoid,Avoid,1928,"be specified in web server configuration.; For instance, lighttpd.conf file could contain path like this:. fastcgi.server = (; ""/remote_scripts/"" =>; (( ""host"" => ""192.168.1.10"",; ""port"" => 9000,; ""check-local"" => ""disable"",; ""docroot"" => ""/""; )); ). In this case one should be able to access root application via address. http://your_lighttpd_host/remote_scripts/root.cgi/. AUTHOR:. Sergey Linev, S.Linev@gsi.de. CHANGES:. January 2015; - Provide exe.json request to execute arbitrary object method and return; result in JSON format. Server should run in non-readonly mode. Fall 2014; - Implement gzip for result of any submitted requests, automatically done ; when .gz extension is provided; - Provide access to arbitrary data member of objects, registered to the server; - Prevent data caching in the browser by setting no-cache header. April 2014; - In TCivetweb class support digest authentication method. User; can specify auth_file and auth_domain parameters to protect; access to the server; - Fix error in FastCgi, now correctly works with Apache; - Avoid direct usage of TASImage. March 2014; - Replace mongoose by civetweb due to more liberal MIT license.; Works out of the box while civetweb version fully corresponds to; previously used version of mongoose.; - Introduce TBufferJSON class to store arbitrary ROOT object; into JSON format. It is not one-to-one storage (like XML), but; rather JS-like structures. For instance, all TCollections converted; into JavaScript Array. Produced JS object is similar to JSRootIO.; - Process get.json request, which returns object in JSON form.; It can be used directly is script without special I/O of Bertrand.; - Use get.json on browser side to simplify logic. No need for extra; requests for streamer infos.; - Process get.xml request, provide full object streaming via TBufferXML.; It is complete object data, but with many custom-streamer data.; - Significant redesign of I/O part of JSRootIO code. Main change -; introduce JSROOTIO.TBuffer c",MatchSource.DOCS,net/http/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt:2996,Safety,avoid,avoid,2996,"IT license.; Works out of the box while civetweb version fully corresponds to; previously used version of mongoose.; - Introduce TBufferJSON class to store arbitrary ROOT object; into JSON format. It is not one-to-one storage (like XML), but; rather JS-like structures. For instance, all TCollections converted; into JavaScript Array. Produced JS object is similar to JSRootIO.; - Process get.json request, which returns object in JSON form.; It can be used directly is script without special I/O of Bertrand.; - Use get.json on browser side to simplify logic. No need for extra; requests for streamer infos.; - Process get.xml request, provide full object streaming via TBufferXML.; It is complete object data, but with many custom-streamer data.; - Significant redesign of I/O part of JSRootIO code. Main change -; introduce JSROOTIO.TBuffer class which has similar functionality as; original TBufferFile class. Eliminate many places with duplicated code; - In JSRootIO avoid objects cloning when object referenced several times; - Treat special cases (collection, arrays) in one place.; This is major advantage, while any new classes should be implemented once.; - Object representation, produced by JSRootIO is similar to; objects, produced by TBufferJSON class. By this one can exchange; I/O engine and use same JavaSctript graphic for display.; - More clear functions to display different elements of the file.; In the future functions should be fully separated from I/O part; and organized in similar way as online part.; - Eliminate usage of gFile pointer in the I/O part.; - Provide TBufferJSON::JsonWriteMember method. It allows to stream any; selected data member of the class. Supported are: basic data types,; arrays of basic data types, TString, TArray classes. Also any object; as data member can be streamed.; - TRootSniffer do not creates sublevels for base classes; - When streaming data member, TBufferJSON produces array with all dimensions; only when fCompact==0. By default, THtt",MatchSource.DOCS,net/http/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt:228,Security,access,access,228,"GOAL:. Provide http interface to arbitrary ROOT application. USAGE:. At any place of the code create http server:. root [0] serv = new THttpServer. By default, civetweb web server with port number 8080 will be started.; It gets access to files, canvases and trees, registered in gROOT.; One additionally could register other objects to the server:. root [1] serv->Register(""abc/fold1"", hpx);; root [2] serv->Register(""abc/fold2"", hpxpy);; root [3] serv->Register(""extra"", c1);. Once server running, just open in any browser page: http://yourhost:8080. Example macro: $ROOTSYS/tutorials/http/httpserver.C. FAST CGI:. Instead of running http server, one could use fast cgi interface; to normal web server like Apache or lighttpd or any other.; When creating server, one could specify:. root [0] serv = new THttpServer(""fastcgi:9000"");. This opens port 9000, which should be specified in web server configuration.; For instance, lighttpd.conf file could contain path like this:. fastcgi.server = (; ""/remote_scripts/"" =>; (( ""host"" => ""192.168.1.10"",; ""port"" => 9000,; ""check-local"" => ""disable"",; ""docroot"" => ""/""; )); ). In this case one should be able to access root application via address. http://your_lighttpd_host/remote_scripts/root.cgi/. AUTHOR:. Sergey Linev, S.Linev@gsi.de. CHANGES:. January 2015; - Provide exe.json request to execute arbitrary object method and return; result in JSON format. Server should run in non-readonly mode. Fall 2014; - Implement gzip for result of any submitted requests, automatically done ; when .gz extension is provided; - Provide access to arbitrary data member of objects, registered to the server; - Prevent data caching in the browser by setting no-cache header. April 2014; - In TCivetweb class support digest authentication method. User; can specify auth_file and auth_domain parameters to protect; access to the server; - Fix error in FastCgi, now correctly works with Apache; - Avoid direct usage of TASImage. March 2014; - Replace mongoose by civetwe",MatchSource.DOCS,net/http/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt:1155,Security,access,access,1155,"ult, civetweb web server with port number 8080 will be started.; It gets access to files, canvases and trees, registered in gROOT.; One additionally could register other objects to the server:. root [1] serv->Register(""abc/fold1"", hpx);; root [2] serv->Register(""abc/fold2"", hpxpy);; root [3] serv->Register(""extra"", c1);. Once server running, just open in any browser page: http://yourhost:8080. Example macro: $ROOTSYS/tutorials/http/httpserver.C. FAST CGI:. Instead of running http server, one could use fast cgi interface; to normal web server like Apache or lighttpd or any other.; When creating server, one could specify:. root [0] serv = new THttpServer(""fastcgi:9000"");. This opens port 9000, which should be specified in web server configuration.; For instance, lighttpd.conf file could contain path like this:. fastcgi.server = (; ""/remote_scripts/"" =>; (( ""host"" => ""192.168.1.10"",; ""port"" => 9000,; ""check-local"" => ""disable"",; ""docroot"" => ""/""; )); ). In this case one should be able to access root application via address. http://your_lighttpd_host/remote_scripts/root.cgi/. AUTHOR:. Sergey Linev, S.Linev@gsi.de. CHANGES:. January 2015; - Provide exe.json request to execute arbitrary object method and return; result in JSON format. Server should run in non-readonly mode. Fall 2014; - Implement gzip for result of any submitted requests, automatically done ; when .gz extension is provided; - Provide access to arbitrary data member of objects, registered to the server; - Prevent data caching in the browser by setting no-cache header. April 2014; - In TCivetweb class support digest authentication method. User; can specify auth_file and auth_domain parameters to protect; access to the server; - Fix error in FastCgi, now correctly works with Apache; - Avoid direct usage of TASImage. March 2014; - Replace mongoose by civetweb due to more liberal MIT license.; Works out of the box while civetweb version fully corresponds to; previously used version of mongoose.; - Introduce TB",MatchSource.DOCS,net/http/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt:1573,Security,access,access,1573,"d of running http server, one could use fast cgi interface; to normal web server like Apache or lighttpd or any other.; When creating server, one could specify:. root [0] serv = new THttpServer(""fastcgi:9000"");. This opens port 9000, which should be specified in web server configuration.; For instance, lighttpd.conf file could contain path like this:. fastcgi.server = (; ""/remote_scripts/"" =>; (( ""host"" => ""192.168.1.10"",; ""port"" => 9000,; ""check-local"" => ""disable"",; ""docroot"" => ""/""; )); ). In this case one should be able to access root application via address. http://your_lighttpd_host/remote_scripts/root.cgi/. AUTHOR:. Sergey Linev, S.Linev@gsi.de. CHANGES:. January 2015; - Provide exe.json request to execute arbitrary object method and return; result in JSON format. Server should run in non-readonly mode. Fall 2014; - Implement gzip for result of any submitted requests, automatically done ; when .gz extension is provided; - Provide access to arbitrary data member of objects, registered to the server; - Prevent data caching in the browser by setting no-cache header. April 2014; - In TCivetweb class support digest authentication method. User; can specify auth_file and auth_domain parameters to protect; access to the server; - Fix error in FastCgi, now correctly works with Apache; - Avoid direct usage of TASImage. March 2014; - Replace mongoose by civetweb due to more liberal MIT license.; Works out of the box while civetweb version fully corresponds to; previously used version of mongoose.; - Introduce TBufferJSON class to store arbitrary ROOT object; into JSON format. It is not one-to-one storage (like XML), but; rather JS-like structures. For instance, all TCollections converted; into JavaScript Array. Produced JS object is similar to JSRootIO.; - Process get.json request, which returns object in JSON form.; It can be used directly is script without special I/O of Bertrand.; - Use get.json on browser side to simplify logic. No need for extra; requests for stream",MatchSource.DOCS,net/http/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt:1757,Security,authenticat,authentication,1757,"hen creating server, one could specify:. root [0] serv = new THttpServer(""fastcgi:9000"");. This opens port 9000, which should be specified in web server configuration.; For instance, lighttpd.conf file could contain path like this:. fastcgi.server = (; ""/remote_scripts/"" =>; (( ""host"" => ""192.168.1.10"",; ""port"" => 9000,; ""check-local"" => ""disable"",; ""docroot"" => ""/""; )); ). In this case one should be able to access root application via address. http://your_lighttpd_host/remote_scripts/root.cgi/. AUTHOR:. Sergey Linev, S.Linev@gsi.de. CHANGES:. January 2015; - Provide exe.json request to execute arbitrary object method and return; result in JSON format. Server should run in non-readonly mode. Fall 2014; - Implement gzip for result of any submitted requests, automatically done ; when .gz extension is provided; - Provide access to arbitrary data member of objects, registered to the server; - Prevent data caching in the browser by setting no-cache header. April 2014; - In TCivetweb class support digest authentication method. User; can specify auth_file and auth_domain parameters to protect; access to the server; - Fix error in FastCgi, now correctly works with Apache; - Avoid direct usage of TASImage. March 2014; - Replace mongoose by civetweb due to more liberal MIT license.; Works out of the box while civetweb version fully corresponds to; previously used version of mongoose.; - Introduce TBufferJSON class to store arbitrary ROOT object; into JSON format. It is not one-to-one storage (like XML), but; rather JS-like structures. For instance, all TCollections converted; into JavaScript Array. Produced JS object is similar to JSRootIO.; - Process get.json request, which returns object in JSON form.; It can be used directly is script without special I/O of Bertrand.; - Use get.json on browser side to simplify logic. No need for extra; requests for streamer infos.; - Process get.xml request, provide full object streaming via TBufferXML.; It is complete object data, but with",MatchSource.DOCS,net/http/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt:1847,Security,access,access,1847,"be specified in web server configuration.; For instance, lighttpd.conf file could contain path like this:. fastcgi.server = (; ""/remote_scripts/"" =>; (( ""host"" => ""192.168.1.10"",; ""port"" => 9000,; ""check-local"" => ""disable"",; ""docroot"" => ""/""; )); ). In this case one should be able to access root application via address. http://your_lighttpd_host/remote_scripts/root.cgi/. AUTHOR:. Sergey Linev, S.Linev@gsi.de. CHANGES:. January 2015; - Provide exe.json request to execute arbitrary object method and return; result in JSON format. Server should run in non-readonly mode. Fall 2014; - Implement gzip for result of any submitted requests, automatically done ; when .gz extension is provided; - Provide access to arbitrary data member of objects, registered to the server; - Prevent data caching in the browser by setting no-cache header. April 2014; - In TCivetweb class support digest authentication method. User; can specify auth_file and auth_domain parameters to protect; access to the server; - Fix error in FastCgi, now correctly works with Apache; - Avoid direct usage of TASImage. March 2014; - Replace mongoose by civetweb due to more liberal MIT license.; Works out of the box while civetweb version fully corresponds to; previously used version of mongoose.; - Introduce TBufferJSON class to store arbitrary ROOT object; into JSON format. It is not one-to-one storage (like XML), but; rather JS-like structures. For instance, all TCollections converted; into JavaScript Array. Produced JS object is similar to JSRootIO.; - Process get.json request, which returns object in JSON form.; It can be used directly is script without special I/O of Bertrand.; - Use get.json on browser side to simplify logic. No need for extra; requests for streamer infos.; - Process get.xml request, provide full object streaming via TBufferXML.; It is complete object data, but with many custom-streamer data.; - Significant redesign of I/O part of JSRootIO code. Main change -; introduce JSROOTIO.TBuffer c",MatchSource.DOCS,net/http/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt:4253,Security,access,access,4253,"ootIO avoid objects cloning when object referenced several times; - Treat special cases (collection, arrays) in one place.; This is major advantage, while any new classes should be implemented once.; - Object representation, produced by JSRootIO is similar to; objects, produced by TBufferJSON class. By this one can exchange; I/O engine and use same JavaSctript graphic for display.; - More clear functions to display different elements of the file.; In the future functions should be fully separated from I/O part; and organized in similar way as online part.; - Eliminate usage of gFile pointer in the I/O part.; - Provide TBufferJSON::JsonWriteMember method. It allows to stream any; selected data member of the class. Supported are: basic data types,; arrays of basic data types, TString, TArray classes. Also any object; as data member can be streamed.; - TRootSniffer do not creates sublevels for base classes; - When streaming data member, TBufferJSON produces array with all dimensions; only when fCompact==0. By default, THttpServer uses compact=1 for member; - Support both get.json and root.json requests, they have similar meaning. January 2014; - Make THttpServer::CreateEngine as factory method. One could; create http, fastcgi and dabc engines to access data from server.; Syntax allows to provide arbitrary arguments. Examples:; THttpServer* serv = new THttpServer();; serv->CreateEngine(""http:8080"");; serv->CreateEngine(""fastcgi:9000/none?top=MyApp"");; serv->CreateEngine(""dabc:1237?top=MyApp"");; serv->CreateEngine(""dabc:http:8090?top=MyApp"");; serv->CreateEngine(""dabc:fastcgi:9010?top=MyApp"");; - Many engines can be created at once.; - Provide TDabcEngine (in DABC framework).; - Support additional options for mongoose and fastcgi servers; - Port to ROOT 6 (adjust makefiles), keep Module.mk.ver5. December 2013; - Start of project; - Move ROOT-relevant functionality from DABC plugin; - Introduce THttpServer, THttpEngine and TRootSniffer classes; - Integrate JSRootIO code. ",MatchSource.DOCS,net/http/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt:2578,Testability,log,logic,2578," Provide access to arbitrary data member of objects, registered to the server; - Prevent data caching in the browser by setting no-cache header. April 2014; - In TCivetweb class support digest authentication method. User; can specify auth_file and auth_domain parameters to protect; access to the server; - Fix error in FastCgi, now correctly works with Apache; - Avoid direct usage of TASImage. March 2014; - Replace mongoose by civetweb due to more liberal MIT license.; Works out of the box while civetweb version fully corresponds to; previously used version of mongoose.; - Introduce TBufferJSON class to store arbitrary ROOT object; into JSON format. It is not one-to-one storage (like XML), but; rather JS-like structures. For instance, all TCollections converted; into JavaScript Array. Produced JS object is similar to JSRootIO.; - Process get.json request, which returns object in JSON form.; It can be used directly is script without special I/O of Bertrand.; - Use get.json on browser side to simplify logic. No need for extra; requests for streamer infos.; - Process get.xml request, provide full object streaming via TBufferXML.; It is complete object data, but with many custom-streamer data.; - Significant redesign of I/O part of JSRootIO code. Main change -; introduce JSROOTIO.TBuffer class which has similar functionality as; original TBufferFile class. Eliminate many places with duplicated code; - In JSRootIO avoid objects cloning when object referenced several times; - Treat special cases (collection, arrays) in one place.; This is major advantage, while any new classes should be implemented once.; - Object representation, produced by JSRootIO is similar to; objects, produced by TBufferJSON class. By this one can exchange; I/O engine and use same JavaSctript graphic for display.; - More clear functions to display different elements of the file.; In the future functions should be fully separated from I/O part; and organized in similar way as online part.; - Eliminate ",MatchSource.DOCS,net/http/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt:2569,Usability,simpl,simplify,2569," Provide access to arbitrary data member of objects, registered to the server; - Prevent data caching in the browser by setting no-cache header. April 2014; - In TCivetweb class support digest authentication method. User; can specify auth_file and auth_domain parameters to protect; access to the server; - Fix error in FastCgi, now correctly works with Apache; - Avoid direct usage of TASImage. March 2014; - Replace mongoose by civetweb due to more liberal MIT license.; Works out of the box while civetweb version fully corresponds to; previously used version of mongoose.; - Introduce TBufferJSON class to store arbitrary ROOT object; into JSON format. It is not one-to-one storage (like XML), but; rather JS-like structures. For instance, all TCollections converted; into JavaScript Array. Produced JS object is similar to JSRootIO.; - Process get.json request, which returns object in JSON form.; It can be used directly is script without special I/O of Bertrand.; - Use get.json on browser side to simplify logic. No need for extra; requests for streamer infos.; - Process get.xml request, provide full object streaming via TBufferXML.; It is complete object data, but with many custom-streamer data.; - Significant redesign of I/O part of JSRootIO code. Main change -; introduce JSROOTIO.TBuffer class which has similar functionality as; original TBufferFile class. Eliminate many places with duplicated code; - In JSRootIO avoid objects cloning when object referenced several times; - Treat special cases (collection, arrays) in one place.; This is major advantage, while any new classes should be implemented once.; - Object representation, produced by JSRootIO is similar to; objects, produced by TBufferJSON class. By this one can exchange; I/O engine and use same JavaSctript graphic for display.; - More clear functions to display different elements of the file.; In the future functions should be fully separated from I/O part; and organized in similar way as online part.; - Eliminate ",MatchSource.DOCS,net/http/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt
https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt:3382,Usability,clear,clear,3382,"rocess get.json request, which returns object in JSON form.; It can be used directly is script without special I/O of Bertrand.; - Use get.json on browser side to simplify logic. No need for extra; requests for streamer infos.; - Process get.xml request, provide full object streaming via TBufferXML.; It is complete object data, but with many custom-streamer data.; - Significant redesign of I/O part of JSRootIO code. Main change -; introduce JSROOTIO.TBuffer class which has similar functionality as; original TBufferFile class. Eliminate many places with duplicated code; - In JSRootIO avoid objects cloning when object referenced several times; - Treat special cases (collection, arrays) in one place.; This is major advantage, while any new classes should be implemented once.; - Object representation, produced by JSRootIO is similar to; objects, produced by TBufferJSON class. By this one can exchange; I/O engine and use same JavaSctript graphic for display.; - More clear functions to display different elements of the file.; In the future functions should be fully separated from I/O part; and organized in similar way as online part.; - Eliminate usage of gFile pointer in the I/O part.; - Provide TBufferJSON::JsonWriteMember method. It allows to stream any; selected data member of the class. Supported are: basic data types,; arrays of basic data types, TString, TArray classes. Also any object; as data member can be streamed.; - TRootSniffer do not creates sublevels for base classes; - When streaming data member, TBufferJSON produces array with all dimensions; only when fCompact==0. By default, THttpServer uses compact=1 for member; - Support both get.json and root.json requests, they have similar meaning. January 2014; - Make THttpServer::CreateEngine as factory method. One could; create http, fastcgi and dabc engines to access data from server.; Syntax allows to provide arbitrary arguments. Examples:; THttpServer* serv = new THttpServer();; serv->CreateEngine(""http:8080"")",MatchSource.DOCS,net/http/README.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/README.txt
https://github.com/root-project/root/tree/v6-32-06/net/httpsniff/CMakeLists.txt:542,Integrability,DEPEND,DEPENDENCIES,542,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT net/http package; # @author Pere Mato, CERN; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(RHTTPSniff; HEADERS; TRootSnifferFull.h; SOURCES; src/TRootSnifferFull.cxx; DEPENDENCIES; Gpad; Graf; Hist; RHTTP; RIO; Thread; Tree; XMLIO; ); ",MatchSource.DOCS,net/httpsniff/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/httpsniff/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/net/net/CMakeLists.txt:1999,Integrability,DEPEND,DEPENDENCIES,1999,S. ############################################################################; # CMakeLists.txt file for building ROOT net/net package; ############################################################################. if(ssl); add_definitions(-DR__SSL). set(NET_SSL_HEADERS; TSSLSocket.h; TS3HTTPRequest.h; TS3WebFile.h; ). set(NET_SSL_SOURCES; src/TSSLSocket.cxx; src/TS3HTTPRequest.cxx; src/TS3WebFile.cxx; ). if(MACOSX_SSL_DEPRECATED); set_source_files_properties(src/TSSLSocket.cxx; COMPILE_FLAGS -Wno-deprecated-declarations); endif(); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(Net; HEADERS; NetErrors.h; RRemoteProtocol.h; TApplicationRemote.h; TApplicationServer.h; TFileStager.h; TFTP.h; TGrid.h; TGridCollection.h; TGridJDL.h; TGridJob.h; TGridJobStatus.h; TGridJobStatusList.h; TGridResult.h; TMessage.h; TMonitor.h; TNetFile.h; TNetFileStager.h; TParallelMergingFile.h; TPServerSocket.h; TPSocket.h; TSecContext.h; TServerSocket.h; TSocket.h; TSQLColumnInfo.h; TSQLMonitoring.h; TSQLResult.h; TSQLRow.h; TSQLServer.h; TSQLStatement.h; TSQLTableInfo.h; TUDPSocket.h; TWebFile.h; ${NET_SSL_HEADERS}; SOURCES; src/NetErrors.cxx; src/TApplicationRemote.cxx; src/TApplicationServer.cxx; src/TFileStager.cxx; src/TFTP.cxx; src/TGrid.cxx; src/TGridJDL.cxx; src/TGridJob.cxx; src/TGridJobStatus.cxx; src/TGridJobStatusList.cxx; src/TGridResult.cxx; src/TMessage.cxx; src/TMonitor.cxx; src/TNetFile.cxx; src/TNetFileStager.cxx; src/TParallelMergingFile.cxx; src/TPServerSocket.cxx; src/TPSocket.cxx; src/TSecContext.cxx; src/TServerSocket.cxx; src/TSocket.cxx; src/TSQLColumnInfo.cxx; src/TSQLMonitoring.cxx; src/TSQLResult.cxx; src/TSQLRow.cxx; src/TSQLServer.cxx; src/TSQLStatement.cxx; src/TSQLTableInfo.cxx; src/TUDPSocket.cxx; src/TWebFile.cxx; ${NET_SSL_SOURCES}; DICTIONARY_OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; RIO; LIBRARIES; ${ROOT_ATOMIC_LIBS}; ). if(ssl); target_include_directories(Net PRIVATE ${OPENSSL_INCLUDE_DIR}); target_link_libraries(Net PRIVATE ${OPENSSL_LIBRARIES}); endif(); ,MatchSource.DOCS,net/net/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/net/netxng/CMakeLists.txt:683,Integrability,DEPEND,DEPENDENCIES,683,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT net/netxng package; # @author Lukasz Janyst <ljanyst@cern.ch>; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(NetxNG; HEADERS; TNetXNGFile.h; TNetXNGFileStager.h; TNetXNGSystem.h; ROOT/RRawFileNetXNG.hxx; SOURCES; src/TNetXNGFile.cxx; src/TNetXNGFileStager.cxx; src/TNetXNGSystem.cxx; src/RRawFileNetXNG.cxx; DEPENDENCIES; Net; RIO; Thread; ). target_link_libraries(NetxNG PRIVATE ROOT::XRootD); target_compile_options(NetxNG PRIVATE -Wno-shadow). # When linking against the XRootD target, XRootD includes become ""-isystem"".; # By linking explicitly here, we suppress a warning during dictionary compilation.; target_link_libraries(G__NetxNG PRIVATE ROOT::XRootD). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,net/netxng/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/netxng/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/net/netxng/CMakeLists.txt:1066,Testability,test,test,1066,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT net/netxng package; # @author Lukasz Janyst <ljanyst@cern.ch>; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(NetxNG; HEADERS; TNetXNGFile.h; TNetXNGFileStager.h; TNetXNGSystem.h; ROOT/RRawFileNetXNG.hxx; SOURCES; src/TNetXNGFile.cxx; src/TNetXNGFileStager.cxx; src/TNetXNGSystem.cxx; src/RRawFileNetXNG.cxx; DEPENDENCIES; Net; RIO; Thread; ). target_link_libraries(NetxNG PRIVATE ROOT::XRootD); target_compile_options(NetxNG PRIVATE -Wno-shadow). # When linking against the XRootD target, XRootD includes become ""-isystem"".; # By linking explicitly here, we suppress a warning during dictionary compilation.; target_link_libraries(G__NetxNG PRIVATE ROOT::XRootD). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,net/netxng/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/netxng/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/CMakeLists.txt:772,Availability,error,error,772,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT net/rpdutils package; # @author Pere Mato, CERN; ############################################################################. include_directories(res ../auth/res). if(MACOSX_SSL_DEPRECATED); set_source_files_properties(src/rpdutils.cxx COMPILE_FLAGS ""-Wno-deprecated-declarations""); endif(). if(shadowpw); add_definitions(-DR__SHADOWPW); endif(). if(ssl); include_directories(${OPENSSL_INCLUDE_DIR}); endif(). add_library(rpdutil STATIC; src/daemon.cxx; src/error.cxx; src/net.cxx; src/netpar.cxx; src/rpdutils.cxx; ). target_include_directories(rpdutil PRIVATE; ${CMAKE_SOURCE_DIR}/core/clib/inc # for snprintf.h; ${CMAKE_SOURCE_DIR}/core/base/inc # for RConfig.hxx; ${CMAKE_SOURCE_DIR}/core/foundation/inc # for TError.hxx; ${CMAKE_SOURCE_DIR}/core/meta/inc # for TGenericClassInfo.h; ${CMAKE_SOURCE_DIR}/net/net/inc # for NetErrors.h; ${CMAKE_SOURCE_DIR}/net/auth/inc # for NetErrors.h; ${CMAKE_BINARY_DIR}/ginclude # for RConfigure.h; ). target_link_libraries(rpdutil INTERFACE $<$<PLATFORM_ID:Linux>:crypt>); set_property(TARGET rpdutil PROPERTY POSITION_INDEPENDENT_CODE ON); add_dependencies(rpdutil move_headers). ROOT_LINKER_LIBRARY(SrvAuth rpdutils.cxx DaemonUtils.h DaemonUtils.cxx; LIBRARIES; ${OPENSSL_LIBRARIES}; rpdutil; rsa; DEPENDENCIES; Net; BUILTINS; OPENSSL; ). target_include_directories(SrvAuth PRIVATE; ${CMAKE_SOURCE_DIR}/net/auth/res; ${CMAKE_SOURCE_DIR}/net/auth/inc; ${CMAKE_SOURCE_DIR}/rpdutils/res; ). if (CMAKE_SYSTEM_NAME MATCHES FreeBSD); target_link_libraries(SrvAuth PRIVATE crypt); endif(). ",MatchSource.DOCS,net/rpdutils/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/CMakeLists.txt:1286,Integrability,INTERFACE,INTERFACE,1286,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT net/rpdutils package; # @author Pere Mato, CERN; ############################################################################. include_directories(res ../auth/res). if(MACOSX_SSL_DEPRECATED); set_source_files_properties(src/rpdutils.cxx COMPILE_FLAGS ""-Wno-deprecated-declarations""); endif(). if(shadowpw); add_definitions(-DR__SHADOWPW); endif(). if(ssl); include_directories(${OPENSSL_INCLUDE_DIR}); endif(). add_library(rpdutil STATIC; src/daemon.cxx; src/error.cxx; src/net.cxx; src/netpar.cxx; src/rpdutils.cxx; ). target_include_directories(rpdutil PRIVATE; ${CMAKE_SOURCE_DIR}/core/clib/inc # for snprintf.h; ${CMAKE_SOURCE_DIR}/core/base/inc # for RConfig.hxx; ${CMAKE_SOURCE_DIR}/core/foundation/inc # for TError.hxx; ${CMAKE_SOURCE_DIR}/core/meta/inc # for TGenericClassInfo.h; ${CMAKE_SOURCE_DIR}/net/net/inc # for NetErrors.h; ${CMAKE_SOURCE_DIR}/net/auth/inc # for NetErrors.h; ${CMAKE_BINARY_DIR}/ginclude # for RConfigure.h; ). target_link_libraries(rpdutil INTERFACE $<$<PLATFORM_ID:Linux>:crypt>); set_property(TARGET rpdutil PROPERTY POSITION_INDEPENDENT_CODE ON); add_dependencies(rpdutil move_headers). ROOT_LINKER_LIBRARY(SrvAuth rpdutils.cxx DaemonUtils.h DaemonUtils.cxx; LIBRARIES; ${OPENSSL_LIBRARIES}; rpdutil; rsa; DEPENDENCIES; Net; BUILTINS; OPENSSL; ). target_include_directories(SrvAuth PRIVATE; ${CMAKE_SOURCE_DIR}/net/auth/res; ${CMAKE_SOURCE_DIR}/net/auth/inc; ${CMAKE_SOURCE_DIR}/rpdutils/res; ). if (CMAKE_SYSTEM_NAME MATCHES FreeBSD); target_link_libraries(SrvAuth PRIVATE crypt); endif(). ",MatchSource.DOCS,net/rpdutils/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/CMakeLists.txt:1555,Integrability,DEPEND,DEPENDENCIES,1555,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT net/rpdutils package; # @author Pere Mato, CERN; ############################################################################. include_directories(res ../auth/res). if(MACOSX_SSL_DEPRECATED); set_source_files_properties(src/rpdutils.cxx COMPILE_FLAGS ""-Wno-deprecated-declarations""); endif(). if(shadowpw); add_definitions(-DR__SHADOWPW); endif(). if(ssl); include_directories(${OPENSSL_INCLUDE_DIR}); endif(). add_library(rpdutil STATIC; src/daemon.cxx; src/error.cxx; src/net.cxx; src/netpar.cxx; src/rpdutils.cxx; ). target_include_directories(rpdutil PRIVATE; ${CMAKE_SOURCE_DIR}/core/clib/inc # for snprintf.h; ${CMAKE_SOURCE_DIR}/core/base/inc # for RConfig.hxx; ${CMAKE_SOURCE_DIR}/core/foundation/inc # for TError.hxx; ${CMAKE_SOURCE_DIR}/core/meta/inc # for TGenericClassInfo.h; ${CMAKE_SOURCE_DIR}/net/net/inc # for NetErrors.h; ${CMAKE_SOURCE_DIR}/net/auth/inc # for NetErrors.h; ${CMAKE_BINARY_DIR}/ginclude # for RConfigure.h; ). target_link_libraries(rpdutil INTERFACE $<$<PLATFORM_ID:Linux>:crypt>); set_property(TARGET rpdutil PROPERTY POSITION_INDEPENDENT_CODE ON); add_dependencies(rpdutil move_headers). ROOT_LINKER_LIBRARY(SrvAuth rpdutils.cxx DaemonUtils.h DaemonUtils.cxx; LIBRARIES; ${OPENSSL_LIBRARIES}; rpdutil; rsa; DEPENDENCIES; Net; BUILTINS; OPENSSL; ). target_include_directories(SrvAuth PRIVATE; ${CMAKE_SOURCE_DIR}/net/auth/res; ${CMAKE_SOURCE_DIR}/net/auth/inc; ${CMAKE_SOURCE_DIR}/rpdutils/res; ). if (CMAKE_SYSTEM_NAME MATCHES FreeBSD); target_link_libraries(SrvAuth PRIVATE crypt); endif(). ",MatchSource.DOCS,net/rpdutils/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/net/auth/doc/index.txt:85,Availability,avail,available,85,"BEGIN_HTML; This directory contains the classes steering the authentication services available in ROOT.; See <a href=""http://root.cern/root/Auth.html"">the authentication page</a> for more details.; END_HTML; ",MatchSource.DOCS,net/auth/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/net/auth/doc/index.txt:61,Security,authenticat,authentication,61,"BEGIN_HTML; This directory contains the classes steering the authentication services available in ROOT.; See <a href=""http://root.cern/root/Auth.html"">the authentication page</a> for more details.; END_HTML; ",MatchSource.DOCS,net/auth/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/net/auth/doc/index.txt:155,Security,authenticat,authentication,155,"BEGIN_HTML; This directory contains the classes steering the authentication services available in ROOT.; See <a href=""http://root.cern/root/Auth.html"">the authentication page</a> for more details.; END_HTML; ",MatchSource.DOCS,net/auth/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/net/net/doc/index.txt:184,Usability,Guid,Guide,184,"This directory contains all the network classes.; BEGIN_HTML; See:; <ul>; <li><a href=""ftp://root.cern/root/doc/22Networking.pdf"">The Chapter about the Networking classes in the Users Guide; </a></li>; </ul>; END_HTML; ",MatchSource.DOCS,net/net/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/proof/proof/CMakeLists.txt:1757,Integrability,DEPEND,DEPENDENCIES,1757,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT proof/proof package; # @author Pere Mato, CERN; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(Proof; HEADERS; TCondor.h; TDataSetManagerFile.h; TDataSetManager.h; TDSet.h; TDSetProxy.h; TLockPath.h; TPackMgr.h; TProofChain.h; TProofCondor.h; TProofDebug.h; TProof.h; TProofLite.h; TProofLog.h; TProofMgr.h; TProofMgrLite.h; TProofNodeInfo.h; TProofOutputFile.h; TProofOutputList.h; TProofProgressStatus.h; TProofQueryResult.h; TProofResources.h; TProofResourcesStatic.h; TProofServ.h; TProofServLite.h; TProofSuperMaster.h; TQueryResultManager.h; TSelVerifyDataSet.h; TSlave.h; TSlaveLite.h; TVirtualProofPlayer.h; TVirtualPacketizer.h; ${PROOF_EXTRA_HEADERS}; SOURCES; src/TCondor.cxx; src/TDataSetManager.cxx; src/TDataSetManagerFile.cxx; src/TDSet.cxx; src/TDSetProxy.cxx; src/TLockPath.cxx; src/TPackMgr.cxx; src/TProofChain.cxx; src/TProofCondor.cxx; src/TProof.cxx; src/TProofDebug.cxx; src/TProofLite.cxx; src/TProofLog.cxx; src/TProofMgr.cxx; src/TProofMgrLite.cxx; src/TProofNodeInfo.cxx; src/TProofOutputFile.cxx; src/TProofOutputList.cxx; src/TProofProgressStatus.cxx; src/TProofQueryResult.cxx; src/TProofResourcesStatic.cxx; src/TProofServ.cxx; src/TProofServLite.cxx; src/TProofSuperMaster.cxx; src/TQueryResultManager.cxx; src/TSelVerifyDataSet.cxx; src/TSlave.cxx; src/TSlaveLite.cxx; src/TVirtualProofPlayer.cxx; src/TVirtualPacketizer.cxx; ${PROOF_EXTRA_SOURCES}; DEPENDENCIES; MathCore; Net; RIO; Thread; Tree; LIBRARIES; ${ROOT_ATOMIC_LIBS}; ); ",MatchSource.DOCS,proof/proof/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/CMakeLists.txt:914,Deployability,install,installation,914,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT proof/proofbench package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(ProofBench; HEADERS; TProofBenchDataSet.h; TProofBench.h; TProofBenchRunCPU.h; TProofBenchRunDataRead.h; TProofBenchRun.h; TProofBenchTypes.h; TProofNodes.h; TProofPerfAnalysis.h; SOURCES; src/TProofBench.cxx; src/TProofBenchDataSet.cxx; src/TProofBenchRunCPU.cxx; src/TProofBenchRun.cxx; src/TProofBenchRunDataRead.cxx; src/TProofNodes.cxx; src/TProofPerfAnalysis.cxx; DEPENDENCIES; Core; Gpad; Hist; ProofPlayer; INSTALL_OPTIONS; FILTER ""TSel""; ). # Generation and installation of the PAR files required by the benchmark; add_custom_target(ProofBenchPARFiles ALL; DEPENDS; ${CMAKE_BINARY_DIR}/etc/proof/proofbench/ProofBenchCPUSel.par; ${CMAKE_BINARY_DIR}/etc/proof/proofbench/ProofBenchDataSel.par; ). add_custom_command(OUTPUT; ${CMAKE_BINARY_DIR}/etc/proof/proofbench/ProofBenchCPUSel.par; ${CMAKE_BINARY_DIR}/etc/proof/proofbench/ProofBenchDataSel.par; DEPENDS; ${CMAKE_SOURCE_DIR}/etc/proof/utils/makepbenchpars.sh; COMMAND; ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/etc/proof/proofbench; COMMAND; ${CMAKE_SOURCE_DIR}/etc/proof/utils/makepbenchpars.sh ProofBenchCPUSel ${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR}; COMMAND; ${CMAKE_SOURCE_DIR}/etc/proof/utils/makepbenchpars.sh ProofBenchDataSel ${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR}; WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}; ). install(DIRECTORY ${CMAKE_BINARY_DIR}/etc/proof/proofbench; DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/proof USE_SOURCE_PERMISSIONS); ",MatchSource.DOCS,proof/proofbench/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/CMakeLists.txt:1741,Deployability,install,install,1741,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT proof/proofbench package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(ProofBench; HEADERS; TProofBenchDataSet.h; TProofBench.h; TProofBenchRunCPU.h; TProofBenchRunDataRead.h; TProofBenchRun.h; TProofBenchTypes.h; TProofNodes.h; TProofPerfAnalysis.h; SOURCES; src/TProofBench.cxx; src/TProofBenchDataSet.cxx; src/TProofBenchRunCPU.cxx; src/TProofBenchRun.cxx; src/TProofBenchRunDataRead.cxx; src/TProofNodes.cxx; src/TProofPerfAnalysis.cxx; DEPENDENCIES; Core; Gpad; Hist; ProofPlayer; INSTALL_OPTIONS; FILTER ""TSel""; ). # Generation and installation of the PAR files required by the benchmark; add_custom_target(ProofBenchPARFiles ALL; DEPENDS; ${CMAKE_BINARY_DIR}/etc/proof/proofbench/ProofBenchCPUSel.par; ${CMAKE_BINARY_DIR}/etc/proof/proofbench/ProofBenchDataSel.par; ). add_custom_command(OUTPUT; ${CMAKE_BINARY_DIR}/etc/proof/proofbench/ProofBenchCPUSel.par; ${CMAKE_BINARY_DIR}/etc/proof/proofbench/ProofBenchDataSel.par; DEPENDS; ${CMAKE_SOURCE_DIR}/etc/proof/utils/makepbenchpars.sh; COMMAND; ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/etc/proof/proofbench; COMMAND; ${CMAKE_SOURCE_DIR}/etc/proof/utils/makepbenchpars.sh ProofBenchCPUSel ${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR}; COMMAND; ${CMAKE_SOURCE_DIR}/etc/proof/utils/makepbenchpars.sh ProofBenchDataSel ${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR}; WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}; ). install(DIRECTORY ${CMAKE_BINARY_DIR}/etc/proof/proofbench; DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/proof USE_SOURCE_PERMISSIONS); ",MatchSource.DOCS,proof/proofbench/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/CMakeLists.txt:817,Integrability,DEPEND,DEPENDENCIES,817,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT proof/proofbench package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(ProofBench; HEADERS; TProofBenchDataSet.h; TProofBench.h; TProofBenchRunCPU.h; TProofBenchRunDataRead.h; TProofBenchRun.h; TProofBenchTypes.h; TProofNodes.h; TProofPerfAnalysis.h; SOURCES; src/TProofBench.cxx; src/TProofBenchDataSet.cxx; src/TProofBenchRunCPU.cxx; src/TProofBenchRun.cxx; src/TProofBenchRunDataRead.cxx; src/TProofNodes.cxx; src/TProofPerfAnalysis.cxx; DEPENDENCIES; Core; Gpad; Hist; ProofPlayer; INSTALL_OPTIONS; FILTER ""TSel""; ). # Generation and installation of the PAR files required by the benchmark; add_custom_target(ProofBenchPARFiles ALL; DEPENDS; ${CMAKE_BINARY_DIR}/etc/proof/proofbench/ProofBenchCPUSel.par; ${CMAKE_BINARY_DIR}/etc/proof/proofbench/ProofBenchDataSel.par; ). add_custom_command(OUTPUT; ${CMAKE_BINARY_DIR}/etc/proof/proofbench/ProofBenchCPUSel.par; ${CMAKE_BINARY_DIR}/etc/proof/proofbench/ProofBenchDataSel.par; DEPENDS; ${CMAKE_SOURCE_DIR}/etc/proof/utils/makepbenchpars.sh; COMMAND; ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/etc/proof/proofbench; COMMAND; ${CMAKE_SOURCE_DIR}/etc/proof/utils/makepbenchpars.sh ProofBenchCPUSel ${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR}; COMMAND; ${CMAKE_SOURCE_DIR}/etc/proof/utils/makepbenchpars.sh ProofBenchDataSel ${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR}; WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}; ). install(DIRECTORY ${CMAKE_BINARY_DIR}/etc/proof/proofbench; DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/proof USE_SOURCE_PERMISSIONS); ",MatchSource.DOCS,proof/proofbench/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/CMakeLists.txt:1013,Integrability,DEPEND,DEPENDS,1013,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT proof/proofbench package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(ProofBench; HEADERS; TProofBenchDataSet.h; TProofBench.h; TProofBenchRunCPU.h; TProofBenchRunDataRead.h; TProofBenchRun.h; TProofBenchTypes.h; TProofNodes.h; TProofPerfAnalysis.h; SOURCES; src/TProofBench.cxx; src/TProofBenchDataSet.cxx; src/TProofBenchRunCPU.cxx; src/TProofBenchRun.cxx; src/TProofBenchRunDataRead.cxx; src/TProofNodes.cxx; src/TProofPerfAnalysis.cxx; DEPENDENCIES; Core; Gpad; Hist; ProofPlayer; INSTALL_OPTIONS; FILTER ""TSel""; ). # Generation and installation of the PAR files required by the benchmark; add_custom_target(ProofBenchPARFiles ALL; DEPENDS; ${CMAKE_BINARY_DIR}/etc/proof/proofbench/ProofBenchCPUSel.par; ${CMAKE_BINARY_DIR}/etc/proof/proofbench/ProofBenchDataSel.par; ). add_custom_command(OUTPUT; ${CMAKE_BINARY_DIR}/etc/proof/proofbench/ProofBenchCPUSel.par; ${CMAKE_BINARY_DIR}/etc/proof/proofbench/ProofBenchDataSel.par; DEPENDS; ${CMAKE_SOURCE_DIR}/etc/proof/utils/makepbenchpars.sh; COMMAND; ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/etc/proof/proofbench; COMMAND; ${CMAKE_SOURCE_DIR}/etc/proof/utils/makepbenchpars.sh ProofBenchCPUSel ${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR}; COMMAND; ${CMAKE_SOURCE_DIR}/etc/proof/utils/makepbenchpars.sh ProofBenchDataSel ${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR}; WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}; ). install(DIRECTORY ${CMAKE_BINARY_DIR}/etc/proof/proofbench; DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/proof USE_SOURCE_PERMISSIONS); ",MatchSource.DOCS,proof/proofbench/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/CMakeLists.txt:1306,Integrability,DEPEND,DEPENDS,1306,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT proof/proofbench package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(ProofBench; HEADERS; TProofBenchDataSet.h; TProofBench.h; TProofBenchRunCPU.h; TProofBenchRunDataRead.h; TProofBenchRun.h; TProofBenchTypes.h; TProofNodes.h; TProofPerfAnalysis.h; SOURCES; src/TProofBench.cxx; src/TProofBenchDataSet.cxx; src/TProofBenchRunCPU.cxx; src/TProofBenchRun.cxx; src/TProofBenchRunDataRead.cxx; src/TProofNodes.cxx; src/TProofPerfAnalysis.cxx; DEPENDENCIES; Core; Gpad; Hist; ProofPlayer; INSTALL_OPTIONS; FILTER ""TSel""; ). # Generation and installation of the PAR files required by the benchmark; add_custom_target(ProofBenchPARFiles ALL; DEPENDS; ${CMAKE_BINARY_DIR}/etc/proof/proofbench/ProofBenchCPUSel.par; ${CMAKE_BINARY_DIR}/etc/proof/proofbench/ProofBenchDataSel.par; ). add_custom_command(OUTPUT; ${CMAKE_BINARY_DIR}/etc/proof/proofbench/ProofBenchCPUSel.par; ${CMAKE_BINARY_DIR}/etc/proof/proofbench/ProofBenchDataSel.par; DEPENDS; ${CMAKE_SOURCE_DIR}/etc/proof/utils/makepbenchpars.sh; COMMAND; ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/etc/proof/proofbench; COMMAND; ${CMAKE_SOURCE_DIR}/etc/proof/utils/makepbenchpars.sh ProofBenchCPUSel ${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR}; COMMAND; ${CMAKE_SOURCE_DIR}/etc/proof/utils/makepbenchpars.sh ProofBenchDataSel ${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR}; WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}; ). install(DIRECTORY ${CMAKE_BINARY_DIR}/etc/proof/proofbench; DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/proof USE_SOURCE_PERMISSIONS); ",MatchSource.DOCS,proof/proofbench/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/CMakeLists.txt:960,Testability,benchmark,benchmark,960,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT proof/proofbench package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(ProofBench; HEADERS; TProofBenchDataSet.h; TProofBench.h; TProofBenchRunCPU.h; TProofBenchRunDataRead.h; TProofBenchRun.h; TProofBenchTypes.h; TProofNodes.h; TProofPerfAnalysis.h; SOURCES; src/TProofBench.cxx; src/TProofBenchDataSet.cxx; src/TProofBenchRunCPU.cxx; src/TProofBenchRun.cxx; src/TProofBenchRunDataRead.cxx; src/TProofNodes.cxx; src/TProofPerfAnalysis.cxx; DEPENDENCIES; Core; Gpad; Hist; ProofPlayer; INSTALL_OPTIONS; FILTER ""TSel""; ). # Generation and installation of the PAR files required by the benchmark; add_custom_target(ProofBenchPARFiles ALL; DEPENDS; ${CMAKE_BINARY_DIR}/etc/proof/proofbench/ProofBenchCPUSel.par; ${CMAKE_BINARY_DIR}/etc/proof/proofbench/ProofBenchDataSel.par; ). add_custom_command(OUTPUT; ${CMAKE_BINARY_DIR}/etc/proof/proofbench/ProofBenchCPUSel.par; ${CMAKE_BINARY_DIR}/etc/proof/proofbench/ProofBenchDataSel.par; DEPENDS; ${CMAKE_SOURCE_DIR}/etc/proof/utils/makepbenchpars.sh; COMMAND; ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/etc/proof/proofbench; COMMAND; ${CMAKE_SOURCE_DIR}/etc/proof/utils/makepbenchpars.sh ProofBenchCPUSel ${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR}; COMMAND; ${CMAKE_SOURCE_DIR}/etc/proof/utils/makepbenchpars.sh ProofBenchDataSel ${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR}; WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}; ). install(DIRECTORY ${CMAKE_BINARY_DIR}/etc/proof/proofbench; DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/proof USE_SOURCE_PERMISSIONS); ",MatchSource.DOCS,proof/proofbench/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/CMakeLists.txt:1156,Integrability,DEPEND,DEPENDENCIES,1156,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT proof/proofplayer package; # @author Pere Mato, CERN; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(ProofPlayer; NO_INSTALL_HEADERS; HEADERS; TDrawFeedback.h; TEventIter.h; TOutputListSelectorDataMap.h; TPacketizerAdaptive.h; TPacketizerFile.h; TPacketizer.h; TPacketizerMulti.h; TPacketizerUnit.h; TPerfStats.h; TProofLimitsFinder.h; TProofMonSender.h; TProofMonSenderSQL.h; TProofPlayer.h; TProofPlayerLite.h; TStatsFeedback.h; TStatus.h; SOURCES; TDrawFeedback.cxx; TEventIter.cxx; TOutputListSelectorDataMap.cxx; TPacketizerAdaptive.cxx; TPacketizer.cxx; TPacketizerFile.cxx; TPacketizerMulti.cxx; TPacketizerUnit.cxx; TPerfStats.cxx; TProofLimitsFinder.cxx; TProofMonSender.cxx; TProofMonSenderSQL.cxx; TProofPlayer.cxx; TProofPlayerLite.cxx; TStatsFeedback.cxx; TStatus.cxx; DEPENDENCIES; Hist; Net; MathCore; Proof; RIO; Thread; Tree; TreePlayer; ). ROOT_STANDARD_LIBRARY_PACKAGE(ProofDraw; NO_INSTALL_HEADERS; HEADERS; TProofDraw.h; SOURCES; TProofDraw.cxx; LINKDEF; LinkDefDraw.h; DEPENDENCIES; ProofPlayer; TreePlayer; ). ROOT_INSTALL_HEADERS(); ",MatchSource.DOCS,proof/proofplayer/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/CMakeLists.txt:1365,Integrability,DEPEND,DEPENDENCIES,1365,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT proof/proofplayer package; # @author Pere Mato, CERN; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(ProofPlayer; NO_INSTALL_HEADERS; HEADERS; TDrawFeedback.h; TEventIter.h; TOutputListSelectorDataMap.h; TPacketizerAdaptive.h; TPacketizerFile.h; TPacketizer.h; TPacketizerMulti.h; TPacketizerUnit.h; TPerfStats.h; TProofLimitsFinder.h; TProofMonSender.h; TProofMonSenderSQL.h; TProofPlayer.h; TProofPlayerLite.h; TStatsFeedback.h; TStatus.h; SOURCES; TDrawFeedback.cxx; TEventIter.cxx; TOutputListSelectorDataMap.cxx; TPacketizerAdaptive.cxx; TPacketizer.cxx; TPacketizerFile.cxx; TPacketizerMulti.cxx; TPacketizerUnit.cxx; TPerfStats.cxx; TProofLimitsFinder.cxx; TProofMonSender.cxx; TProofMonSenderSQL.cxx; TProofPlayer.cxx; TProofPlayerLite.cxx; TStatsFeedback.cxx; TStatus.cxx; DEPENDENCIES; Hist; Net; MathCore; Proof; RIO; Thread; Tree; TreePlayer; ). ROOT_STANDARD_LIBRARY_PACKAGE(ProofDraw; NO_INSTALL_HEADERS; HEADERS; TProofDraw.h; SOURCES; TProofDraw.cxx; LINKDEF; LinkDefDraw.h; DEPENDENCIES; ProofPlayer; TreePlayer; ). ROOT_INSTALL_HEADERS(); ",MatchSource.DOCS,proof/proofplayer/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/proof/proof/doc/index.txt:159,Usability,Guid,Guide,159,"This directory contains the PROOF classes.; BEGIN_HTML; See:; <ul>; <li><a href=""ftp://root.cern.ch/root/doc/24PROOF.pdf"">The Chapter about PROOF in the Users Guide; </a></li>; <li><a href=""http://root.cern.ch/twiki/bin/view/ROOT/PROOF"">The PROOF system; </a></li>; <li><a href=""ftp://root.cern.ch/root/doc/21ExampleAnalysis.pdf"">The Chapter about Selectors in the Users Guide; </a></li>; </ul>; END_HTML; ",MatchSource.DOCS,proof/proof/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/proof/proof/doc/index.txt:371,Usability,Guid,Guide,371,"This directory contains the PROOF classes.; BEGIN_HTML; See:; <ul>; <li><a href=""ftp://root.cern.ch/root/doc/24PROOF.pdf"">The Chapter about PROOF in the Users Guide; </a></li>; <li><a href=""http://root.cern.ch/twiki/bin/view/ROOT/PROOF"">The PROOF system; </a></li>; <li><a href=""ftp://root.cern.ch/root/doc/21ExampleAnalysis.pdf"">The Chapter about Selectors in the Users Guide; </a></li>; </ul>; END_HTML; ",MatchSource.DOCS,proof/proof/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/doc/index.txt:291,Usability,Guid,Guide,291,"This directory contains the internal classes used for PROOF processing.; BEGIN_HTML; See:; <ul>; <li><a href=""http://root.cern.ch/twiki/bin/view/ROOT/PROOF"">The PROOF system; </a></li>; <li><a href=""ftp://root.cern.ch/root/doc/21ExampleAnalysis.pdf"">The Chapter about Selectors in the Users Guide; </a></li>; </ul>; END_HTML; ",MatchSource.DOCS,proof/proofplayer/doc/index.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/doc/index.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/CMakeLists.txt:2003,Deployability,Release,Release,2003,"RARY(RooBatchCompute_GENERIC ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); target_compile_options(RooBatchCompute_GENERIC PRIVATE ${common-flags} -DRF_ARCH=GENERIC). # Windows platform and ICC compiler need special code and testing, thus the feature has not been implemented yet for these.; if (ROOT_PLATFORM MATCHES ""linux|macosx"" AND CMAKE_SYSTEM_PROCESSOR MATCHES x86_64 AND CMAKE_CXX_COMPILER_ID MATCHES ""GNU|Clang""). target_compile_options(RooBatchCompute PRIVATE -DR__RF_ARCHITECTURE_SPECIFIC_LIBS). ROOT_LINKER_LIBRARY(RooBatchCompute_SSE4.1 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX2 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX512 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute). # Flags -fno-signaling-nans, -fno-trapping-math and -O3 are necessary to enable autovectorization (especially for GCC).; set(common-flags $<$<CXX_COMPILER_ID:GNU>:-fno-signaling-nans>); list(APPEND common-flags $<$<OR:$<CONFIG:Release>,$<CONFIG:RelWithDebInfo>>: -fno-trapping-math -O3>). target_compile_options(RooBatchCompute_SSE4.1 PRIVATE ${common-flags} -msse4 -DRF_ARCH=SSE4); target_compile_options(RooBatchCompute_AVX PRIVATE ${common-flags} -mavx -DRF_ARCH=AVX); target_compile_options(RooBatchCompute_AVX2 PRIVATE ${common-flags} -mavx2 -DRF_ARCH=AVX2); target_compile_options(RooBatchCompute_AVX512 PRIVATE ${common-flags} -march=skylake-avx512 -DRF_ARCH=AVX512). endif() # vector versions of library. if (cuda); set(shared_object_sources_cu src/RooBatchCompute.cu src/ComputeFunctions.cu src/CudaInterface.cu); ROOT_LINKER_LIBRARY(RooBatchCompute_CUDA ${shared_object_sources_cu} TYPE SHARED DEPENDENCIES RooBatchCompute); target_compile_options(RooBatchCompute_CUDA PRIVATE -lineinfo --expt-relaxed-constexpr); endif(); ",MatchSource.DOCS,roofit/batchcompute/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/CMakeLists.txt:16,Energy Efficiency,power,powers,16,"# Library which powers fast batch computations in Roofit. ROOT_LINKER_LIBRARY(RooBatchCompute; src/Initialisation.cxx; DEPENDENCIES; Core; MathCore; ). target_include_directories(RooBatchCompute PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/res>). if(vdt OR builtin_vdt); target_link_libraries(RooBatchCompute PUBLIC VDT::VDT); endif(); if(builtin_vdt); add_dependencies(RooBatchCompute VDT); endif(). ############################################################################################################################################; # Instantiations of the shared objects which provide the actual computation functions. set(shared_object_sources src/RooBatchCompute.cxx src/ComputeFunctions.cxx). # Generic implementation for CPUs that don't support vector instruction sets.; ROOT_LINKER_LIBRARY(RooBatchCompute_GENERIC ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); target_compile_options(RooBatchCompute_GENERIC PRIVATE ${common-flags} -DRF_ARCH=GENERIC). # Windows platform and ICC compiler need special code and testing, thus the feature has not been implemented yet for these.; if (ROOT_PLATFORM MATCHES ""linux|macosx"" AND CMAKE_SYSTEM_PROCESSOR MATCHES x86_64 AND CMAKE_CXX_COMPILER_ID MATCHES ""GNU|Clang""). target_compile_options(RooBatchCompute PRIVATE -DR__RF_ARCHITECTURE_SPECIFIC_LIBS). ROOT_LINKER_LIBRARY(RooBatchCompute_SSE4.1 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX2 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX512 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute). # Flags -fno-signaling-nans, -fno-trapping-math and -O3 are necessary to enable autovectorization (especially for GCC).; set(common-flags $<$<CXX_COMPILER_ID:GNU>:-fno-signaling-nans>); list(APPEND common-flags $<$<OR:$<CONFI",MatchSource.DOCS,roofit/batchcompute/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/CMakeLists.txt:119,Integrability,DEPEND,DEPENDENCIES,119,"# Library which powers fast batch computations in Roofit. ROOT_LINKER_LIBRARY(RooBatchCompute; src/Initialisation.cxx; DEPENDENCIES; Core; MathCore; ). target_include_directories(RooBatchCompute PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/res>). if(vdt OR builtin_vdt); target_link_libraries(RooBatchCompute PUBLIC VDT::VDT); endif(); if(builtin_vdt); add_dependencies(RooBatchCompute VDT); endif(). ############################################################################################################################################; # Instantiations of the shared objects which provide the actual computation functions. set(shared_object_sources src/RooBatchCompute.cxx src/ComputeFunctions.cxx). # Generic implementation for CPUs that don't support vector instruction sets.; ROOT_LINKER_LIBRARY(RooBatchCompute_GENERIC ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); target_compile_options(RooBatchCompute_GENERIC PRIVATE ${common-flags} -DRF_ARCH=GENERIC). # Windows platform and ICC compiler need special code and testing, thus the feature has not been implemented yet for these.; if (ROOT_PLATFORM MATCHES ""linux|macosx"" AND CMAKE_SYSTEM_PROCESSOR MATCHES x86_64 AND CMAKE_CXX_COMPILER_ID MATCHES ""GNU|Clang""). target_compile_options(RooBatchCompute PRIVATE -DR__RF_ARCHITECTURE_SPECIFIC_LIBS). ROOT_LINKER_LIBRARY(RooBatchCompute_SSE4.1 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX2 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX512 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute). # Flags -fno-signaling-nans, -fno-trapping-math and -O3 are necessary to enable autovectorization (especially for GCC).; set(common-flags $<$<CXX_COMPILER_ID:GNU>:-fno-signaling-nans>); list(APPEND common-flags $<$<OR:$<CONFI",MatchSource.DOCS,roofit/batchcompute/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/CMakeLists.txt:875,Integrability,DEPEND,DEPENDENCIES,875,"# Library which powers fast batch computations in Roofit. ROOT_LINKER_LIBRARY(RooBatchCompute; src/Initialisation.cxx; DEPENDENCIES; Core; MathCore; ). target_include_directories(RooBatchCompute PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/res>). if(vdt OR builtin_vdt); target_link_libraries(RooBatchCompute PUBLIC VDT::VDT); endif(); if(builtin_vdt); add_dependencies(RooBatchCompute VDT); endif(). ############################################################################################################################################; # Instantiations of the shared objects which provide the actual computation functions. set(shared_object_sources src/RooBatchCompute.cxx src/ComputeFunctions.cxx). # Generic implementation for CPUs that don't support vector instruction sets.; ROOT_LINKER_LIBRARY(RooBatchCompute_GENERIC ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); target_compile_options(RooBatchCompute_GENERIC PRIVATE ${common-flags} -DRF_ARCH=GENERIC). # Windows platform and ICC compiler need special code and testing, thus the feature has not been implemented yet for these.; if (ROOT_PLATFORM MATCHES ""linux|macosx"" AND CMAKE_SYSTEM_PROCESSOR MATCHES x86_64 AND CMAKE_CXX_COMPILER_ID MATCHES ""GNU|Clang""). target_compile_options(RooBatchCompute PRIVATE -DR__RF_ARCHITECTURE_SPECIFIC_LIBS). ROOT_LINKER_LIBRARY(RooBatchCompute_SSE4.1 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX2 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX512 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute). # Flags -fno-signaling-nans, -fno-trapping-math and -O3 are necessary to enable autovectorization (especially for GCC).; set(common-flags $<$<CXX_COMPILER_ID:GNU>:-fno-signaling-nans>); list(APPEND common-flags $<$<OR:$<CONFI",MatchSource.DOCS,roofit/batchcompute/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/CMakeLists.txt:1417,Integrability,DEPEND,DEPENDENCIES,1417,"hared objects which provide the actual computation functions. set(shared_object_sources src/RooBatchCompute.cxx src/ComputeFunctions.cxx). # Generic implementation for CPUs that don't support vector instruction sets.; ROOT_LINKER_LIBRARY(RooBatchCompute_GENERIC ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); target_compile_options(RooBatchCompute_GENERIC PRIVATE ${common-flags} -DRF_ARCH=GENERIC). # Windows platform and ICC compiler need special code and testing, thus the feature has not been implemented yet for these.; if (ROOT_PLATFORM MATCHES ""linux|macosx"" AND CMAKE_SYSTEM_PROCESSOR MATCHES x86_64 AND CMAKE_CXX_COMPILER_ID MATCHES ""GNU|Clang""). target_compile_options(RooBatchCompute PRIVATE -DR__RF_ARCHITECTURE_SPECIFIC_LIBS). ROOT_LINKER_LIBRARY(RooBatchCompute_SSE4.1 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX2 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX512 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute). # Flags -fno-signaling-nans, -fno-trapping-math and -O3 are necessary to enable autovectorization (especially for GCC).; set(common-flags $<$<CXX_COMPILER_ID:GNU>:-fno-signaling-nans>); list(APPEND common-flags $<$<OR:$<CONFIG:Release>,$<CONFIG:RelWithDebInfo>>: -fno-trapping-math -O3>). target_compile_options(RooBatchCompute_SSE4.1 PRIVATE ${common-flags} -msse4 -DRF_ARCH=SSE4); target_compile_options(RooBatchCompute_AVX PRIVATE ${common-flags} -mavx -DRF_ARCH=AVX); target_compile_options(RooBatchCompute_AVX2 PRIVATE ${common-flags} -mavx2 -DRF_ARCH=AVX2); target_compile_options(RooBatchCompute_AVX512 PRIVATE ${common-flags} -march=skylake-avx512 -DRF_ARCH=AVX512). endif() # vector versions of library. if (cuda); set(shared_object_sources_cu src/RooBatchCompute.cu src/ComputeFunctions.cu s",MatchSource.DOCS,roofit/batchcompute/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/CMakeLists.txt:1525,Integrability,DEPEND,DEPENDENCIES,1525,"hared objects which provide the actual computation functions. set(shared_object_sources src/RooBatchCompute.cxx src/ComputeFunctions.cxx). # Generic implementation for CPUs that don't support vector instruction sets.; ROOT_LINKER_LIBRARY(RooBatchCompute_GENERIC ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); target_compile_options(RooBatchCompute_GENERIC PRIVATE ${common-flags} -DRF_ARCH=GENERIC). # Windows platform and ICC compiler need special code and testing, thus the feature has not been implemented yet for these.; if (ROOT_PLATFORM MATCHES ""linux|macosx"" AND CMAKE_SYSTEM_PROCESSOR MATCHES x86_64 AND CMAKE_CXX_COMPILER_ID MATCHES ""GNU|Clang""). target_compile_options(RooBatchCompute PRIVATE -DR__RF_ARCHITECTURE_SPECIFIC_LIBS). ROOT_LINKER_LIBRARY(RooBatchCompute_SSE4.1 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX2 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX512 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute). # Flags -fno-signaling-nans, -fno-trapping-math and -O3 are necessary to enable autovectorization (especially for GCC).; set(common-flags $<$<CXX_COMPILER_ID:GNU>:-fno-signaling-nans>); list(APPEND common-flags $<$<OR:$<CONFIG:Release>,$<CONFIG:RelWithDebInfo>>: -fno-trapping-math -O3>). target_compile_options(RooBatchCompute_SSE4.1 PRIVATE ${common-flags} -msse4 -DRF_ARCH=SSE4); target_compile_options(RooBatchCompute_AVX PRIVATE ${common-flags} -mavx -DRF_ARCH=AVX); target_compile_options(RooBatchCompute_AVX2 PRIVATE ${common-flags} -mavx2 -DRF_ARCH=AVX2); target_compile_options(RooBatchCompute_AVX512 PRIVATE ${common-flags} -march=skylake-avx512 -DRF_ARCH=AVX512). endif() # vector versions of library. if (cuda); set(shared_object_sources_cu src/RooBatchCompute.cu src/ComputeFunctions.cu s",MatchSource.DOCS,roofit/batchcompute/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/CMakeLists.txt:1634,Integrability,DEPEND,DEPENDENCIES,1634,"hared objects which provide the actual computation functions. set(shared_object_sources src/RooBatchCompute.cxx src/ComputeFunctions.cxx). # Generic implementation for CPUs that don't support vector instruction sets.; ROOT_LINKER_LIBRARY(RooBatchCompute_GENERIC ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); target_compile_options(RooBatchCompute_GENERIC PRIVATE ${common-flags} -DRF_ARCH=GENERIC). # Windows platform and ICC compiler need special code and testing, thus the feature has not been implemented yet for these.; if (ROOT_PLATFORM MATCHES ""linux|macosx"" AND CMAKE_SYSTEM_PROCESSOR MATCHES x86_64 AND CMAKE_CXX_COMPILER_ID MATCHES ""GNU|Clang""). target_compile_options(RooBatchCompute PRIVATE -DR__RF_ARCHITECTURE_SPECIFIC_LIBS). ROOT_LINKER_LIBRARY(RooBatchCompute_SSE4.1 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX2 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX512 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute). # Flags -fno-signaling-nans, -fno-trapping-math and -O3 are necessary to enable autovectorization (especially for GCC).; set(common-flags $<$<CXX_COMPILER_ID:GNU>:-fno-signaling-nans>); list(APPEND common-flags $<$<OR:$<CONFIG:Release>,$<CONFIG:RelWithDebInfo>>: -fno-trapping-math -O3>). target_compile_options(RooBatchCompute_SSE4.1 PRIVATE ${common-flags} -msse4 -DRF_ARCH=SSE4); target_compile_options(RooBatchCompute_AVX PRIVATE ${common-flags} -mavx -DRF_ARCH=AVX); target_compile_options(RooBatchCompute_AVX2 PRIVATE ${common-flags} -mavx2 -DRF_ARCH=AVX2); target_compile_options(RooBatchCompute_AVX512 PRIVATE ${common-flags} -march=skylake-avx512 -DRF_ARCH=AVX512). endif() # vector versions of library. if (cuda); set(shared_object_sources_cu src/RooBatchCompute.cu src/ComputeFunctions.cu s",MatchSource.DOCS,roofit/batchcompute/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/CMakeLists.txt:1745,Integrability,DEPEND,DEPENDENCIES,1745,"hared objects which provide the actual computation functions. set(shared_object_sources src/RooBatchCompute.cxx src/ComputeFunctions.cxx). # Generic implementation for CPUs that don't support vector instruction sets.; ROOT_LINKER_LIBRARY(RooBatchCompute_GENERIC ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); target_compile_options(RooBatchCompute_GENERIC PRIVATE ${common-flags} -DRF_ARCH=GENERIC). # Windows platform and ICC compiler need special code and testing, thus the feature has not been implemented yet for these.; if (ROOT_PLATFORM MATCHES ""linux|macosx"" AND CMAKE_SYSTEM_PROCESSOR MATCHES x86_64 AND CMAKE_CXX_COMPILER_ID MATCHES ""GNU|Clang""). target_compile_options(RooBatchCompute PRIVATE -DR__RF_ARCHITECTURE_SPECIFIC_LIBS). ROOT_LINKER_LIBRARY(RooBatchCompute_SSE4.1 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX2 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX512 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute). # Flags -fno-signaling-nans, -fno-trapping-math and -O3 are necessary to enable autovectorization (especially for GCC).; set(common-flags $<$<CXX_COMPILER_ID:GNU>:-fno-signaling-nans>); list(APPEND common-flags $<$<OR:$<CONFIG:Release>,$<CONFIG:RelWithDebInfo>>: -fno-trapping-math -O3>). target_compile_options(RooBatchCompute_SSE4.1 PRIVATE ${common-flags} -msse4 -DRF_ARCH=SSE4); target_compile_options(RooBatchCompute_AVX PRIVATE ${common-flags} -mavx -DRF_ARCH=AVX); target_compile_options(RooBatchCompute_AVX2 PRIVATE ${common-flags} -mavx2 -DRF_ARCH=AVX2); target_compile_options(RooBatchCompute_AVX512 PRIVATE ${common-flags} -march=skylake-avx512 -DRF_ARCH=AVX512). endif() # vector versions of library. if (cuda); set(shared_object_sources_cu src/RooBatchCompute.cu src/ComputeFunctions.cu s",MatchSource.DOCS,roofit/batchcompute/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/CMakeLists.txt:2680,Integrability,DEPEND,DEPENDENCIES,2680,"RARY(RooBatchCompute_GENERIC ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); target_compile_options(RooBatchCompute_GENERIC PRIVATE ${common-flags} -DRF_ARCH=GENERIC). # Windows platform and ICC compiler need special code and testing, thus the feature has not been implemented yet for these.; if (ROOT_PLATFORM MATCHES ""linux|macosx"" AND CMAKE_SYSTEM_PROCESSOR MATCHES x86_64 AND CMAKE_CXX_COMPILER_ID MATCHES ""GNU|Clang""). target_compile_options(RooBatchCompute PRIVATE -DR__RF_ARCHITECTURE_SPECIFIC_LIBS). ROOT_LINKER_LIBRARY(RooBatchCompute_SSE4.1 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX2 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX512 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute). # Flags -fno-signaling-nans, -fno-trapping-math and -O3 are necessary to enable autovectorization (especially for GCC).; set(common-flags $<$<CXX_COMPILER_ID:GNU>:-fno-signaling-nans>); list(APPEND common-flags $<$<OR:$<CONFIG:Release>,$<CONFIG:RelWithDebInfo>>: -fno-trapping-math -O3>). target_compile_options(RooBatchCompute_SSE4.1 PRIVATE ${common-flags} -msse4 -DRF_ARCH=SSE4); target_compile_options(RooBatchCompute_AVX PRIVATE ${common-flags} -mavx -DRF_ARCH=AVX); target_compile_options(RooBatchCompute_AVX2 PRIVATE ${common-flags} -mavx2 -DRF_ARCH=AVX2); target_compile_options(RooBatchCompute_AVX512 PRIVATE ${common-flags} -march=skylake-avx512 -DRF_ARCH=AVX512). endif() # vector versions of library. if (cuda); set(shared_object_sources_cu src/RooBatchCompute.cu src/ComputeFunctions.cu src/CudaInterface.cu); ROOT_LINKER_LIBRARY(RooBatchCompute_CUDA ${shared_object_sources_cu} TYPE SHARED DEPENDENCIES RooBatchCompute); target_compile_options(RooBatchCompute_CUDA PRIVATE -lineinfo --expt-relaxed-constexpr); endif(); ",MatchSource.DOCS,roofit/batchcompute/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/CMakeLists.txt:1996,Modifiability,CONFIG,CONFIG,1996,"RARY(RooBatchCompute_GENERIC ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); target_compile_options(RooBatchCompute_GENERIC PRIVATE ${common-flags} -DRF_ARCH=GENERIC). # Windows platform and ICC compiler need special code and testing, thus the feature has not been implemented yet for these.; if (ROOT_PLATFORM MATCHES ""linux|macosx"" AND CMAKE_SYSTEM_PROCESSOR MATCHES x86_64 AND CMAKE_CXX_COMPILER_ID MATCHES ""GNU|Clang""). target_compile_options(RooBatchCompute PRIVATE -DR__RF_ARCHITECTURE_SPECIFIC_LIBS). ROOT_LINKER_LIBRARY(RooBatchCompute_SSE4.1 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX2 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX512 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute). # Flags -fno-signaling-nans, -fno-trapping-math and -O3 are necessary to enable autovectorization (especially for GCC).; set(common-flags $<$<CXX_COMPILER_ID:GNU>:-fno-signaling-nans>); list(APPEND common-flags $<$<OR:$<CONFIG:Release>,$<CONFIG:RelWithDebInfo>>: -fno-trapping-math -O3>). target_compile_options(RooBatchCompute_SSE4.1 PRIVATE ${common-flags} -msse4 -DRF_ARCH=SSE4); target_compile_options(RooBatchCompute_AVX PRIVATE ${common-flags} -mavx -DRF_ARCH=AVX); target_compile_options(RooBatchCompute_AVX2 PRIVATE ${common-flags} -mavx2 -DRF_ARCH=AVX2); target_compile_options(RooBatchCompute_AVX512 PRIVATE ${common-flags} -march=skylake-avx512 -DRF_ARCH=AVX512). endif() # vector versions of library. if (cuda); set(shared_object_sources_cu src/RooBatchCompute.cu src/ComputeFunctions.cu src/CudaInterface.cu); ROOT_LINKER_LIBRARY(RooBatchCompute_CUDA ${shared_object_sources_cu} TYPE SHARED DEPENDENCIES RooBatchCompute); target_compile_options(RooBatchCompute_CUDA PRIVATE -lineinfo --expt-relaxed-constexpr); endif(); ",MatchSource.DOCS,roofit/batchcompute/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/CMakeLists.txt:2014,Modifiability,CONFIG,CONFIG,2014,"RARY(RooBatchCompute_GENERIC ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); target_compile_options(RooBatchCompute_GENERIC PRIVATE ${common-flags} -DRF_ARCH=GENERIC). # Windows platform and ICC compiler need special code and testing, thus the feature has not been implemented yet for these.; if (ROOT_PLATFORM MATCHES ""linux|macosx"" AND CMAKE_SYSTEM_PROCESSOR MATCHES x86_64 AND CMAKE_CXX_COMPILER_ID MATCHES ""GNU|Clang""). target_compile_options(RooBatchCompute PRIVATE -DR__RF_ARCHITECTURE_SPECIFIC_LIBS). ROOT_LINKER_LIBRARY(RooBatchCompute_SSE4.1 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX2 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX512 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute). # Flags -fno-signaling-nans, -fno-trapping-math and -O3 are necessary to enable autovectorization (especially for GCC).; set(common-flags $<$<CXX_COMPILER_ID:GNU>:-fno-signaling-nans>); list(APPEND common-flags $<$<OR:$<CONFIG:Release>,$<CONFIG:RelWithDebInfo>>: -fno-trapping-math -O3>). target_compile_options(RooBatchCompute_SSE4.1 PRIVATE ${common-flags} -msse4 -DRF_ARCH=SSE4); target_compile_options(RooBatchCompute_AVX PRIVATE ${common-flags} -mavx -DRF_ARCH=AVX); target_compile_options(RooBatchCompute_AVX2 PRIVATE ${common-flags} -mavx2 -DRF_ARCH=AVX2); target_compile_options(RooBatchCompute_AVX512 PRIVATE ${common-flags} -march=skylake-avx512 -DRF_ARCH=AVX512). endif() # vector versions of library. if (cuda); set(shared_object_sources_cu src/RooBatchCompute.cu src/ComputeFunctions.cu src/CudaInterface.cu); ROOT_LINKER_LIBRARY(RooBatchCompute_CUDA ${shared_object_sources_cu} TYPE SHARED DEPENDENCIES RooBatchCompute); target_compile_options(RooBatchCompute_CUDA PRIVATE -lineinfo --expt-relaxed-constexpr); endif(); ",MatchSource.DOCS,roofit/batchcompute/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/CMakeLists.txt:1055,Testability,test,testing,1055,"ROOT_LINKER_LIBRARY(RooBatchCompute; src/Initialisation.cxx; DEPENDENCIES; Core; MathCore; ). target_include_directories(RooBatchCompute PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/res>). if(vdt OR builtin_vdt); target_link_libraries(RooBatchCompute PUBLIC VDT::VDT); endif(); if(builtin_vdt); add_dependencies(RooBatchCompute VDT); endif(). ############################################################################################################################################; # Instantiations of the shared objects which provide the actual computation functions. set(shared_object_sources src/RooBatchCompute.cxx src/ComputeFunctions.cxx). # Generic implementation for CPUs that don't support vector instruction sets.; ROOT_LINKER_LIBRARY(RooBatchCompute_GENERIC ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); target_compile_options(RooBatchCompute_GENERIC PRIVATE ${common-flags} -DRF_ARCH=GENERIC). # Windows platform and ICC compiler need special code and testing, thus the feature has not been implemented yet for these.; if (ROOT_PLATFORM MATCHES ""linux|macosx"" AND CMAKE_SYSTEM_PROCESSOR MATCHES x86_64 AND CMAKE_CXX_COMPILER_ID MATCHES ""GNU|Clang""). target_compile_options(RooBatchCompute PRIVATE -DR__RF_ARCHITECTURE_SPECIFIC_LIBS). ROOT_LINKER_LIBRARY(RooBatchCompute_SSE4.1 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX2 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute); ROOT_LINKER_LIBRARY(RooBatchCompute_AVX512 ${shared_object_sources} TYPE SHARED DEPENDENCIES RooBatchCompute). # Flags -fno-signaling-nans, -fno-trapping-math and -O3 are necessary to enable autovectorization (especially for GCC).; set(common-flags $<$<CXX_COMPILER_ID:GNU>:-fno-signaling-nans>); list(APPEND common-flags $<$<OR:$<CONFIG:Release>,$<CONFIG:RelWithDebInfo>>: -fno-trapping-math ",MatchSource.DOCS,roofit/batchcompute/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/CMakeLists.txt:3541,Deployability,install,install,3541,"src/HistFactoryImpl.cxx; src/HistFactoryModelUtils.cxx; src/HistFactoryNavigation.cxx; src/HistRef.cxx; src/HistoToWorkspaceFactoryFast.cxx; src/JSONTool.cxx; src/LinInterpVar.cxx; src/MakeModelAndMeasurementsFast.cxx; src/Measurement.cxx; src/ParamHistFunc.cxx; src/PiecewiseInterpolation.cxx; src/PreprocessFunction.cxx; src/RooBarlowBeestonLL.cxx; src/Sample.cxx; src/Systematics.cxx; ${HISTFACTORY_XML_SOURCES}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; RooBatchCompute; ${HISTFACTORY_XML_LIBRARIES}; DEPENDENCIES; RooFit; RooFitCore; Tree; RIO; Hist; Matrix; MathCore; Graf; Gpad; RooStats; RooFitJSONInterface; ${EXTRA_DICT_OPTS}; ). # For recent clang, this can facilitate auto-vectorisation.; # In RooFit, the errno side effect is not needed, anyway:; if(""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang""); target_compile_options(HistFactory PUBLIC -fno-math-errno); endif(). # The hist2workspace executable uses the HistFactory::ConfigParser to read the; # XML model specification. The ConfigParser is only built when xml is ON, so we; # can't build hist2workspace without xml.; if(xml); ROOT_EXECUTABLE(hist2workspace hist2workspace.cxx LIBRARIES HistFactory). #---Createhist2workspaceCommandLineOptions------------------------------------------------------------------; generateHeader(hist2workspace; ${CMAKE_CURRENT_SOURCE_DIR}/src/hist2workspace-argparse.py; ${CMAKE_BINARY_DIR}/ginclude/hist2workspaceCommandLineOptionsHelp.h; ). target_compile_definitions(HistFactory PUBLIC HISTFACTORY_XML); endif(). if(MSVC); set(prepareHistFactory_script prepareHistFactory.bat); else(); set(prepareHistFactory_script prepareHistFactory); endif(); file(COPY config/${prepareHistFactory_script} DESTINATION ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}); install(FILES ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${prepareHistFactory_script}; PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ; GROUP_EXECUTE GROUP_READ; WORLD_EXECUTE WORLD_READ; DESTINATION ${CMAKE_INSTALL_BINDIR}). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,roofit/histfactory/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/CMakeLists.txt:2309,Integrability,DEPEND,DEPENDENCIES,2309,"stRef.h; RooStats/HistFactory/LinInterpVar.h; RooStats/HistFactory/MakeModelAndMeasurementsFast.h; RooStats/HistFactory/Measurement.h; RooStats/HistFactory/ParamHistFunc.h; RooStats/HistFactory/PiecewiseInterpolation.h; RooStats/HistFactory/PreprocessFunction.h; RooStats/HistFactory/RooBarlowBeestonLL.h; RooStats/HistFactory/Sample.h; RooStats/HistFactory/Systematics.h; ${HISTFACTORY_XML_HEADERS}; SOURCES; src/Asimov.cxx; src/Channel.cxx; src/Data.cxx; src/FlexibleInterpVar.cxx; src/HistFactoryImpl.cxx; src/HistFactoryModelUtils.cxx; src/HistFactoryNavigation.cxx; src/HistRef.cxx; src/HistoToWorkspaceFactoryFast.cxx; src/JSONTool.cxx; src/LinInterpVar.cxx; src/MakeModelAndMeasurementsFast.cxx; src/Measurement.cxx; src/ParamHistFunc.cxx; src/PiecewiseInterpolation.cxx; src/PreprocessFunction.cxx; src/RooBarlowBeestonLL.cxx; src/Sample.cxx; src/Systematics.cxx; ${HISTFACTORY_XML_SOURCES}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; RooBatchCompute; ${HISTFACTORY_XML_LIBRARIES}; DEPENDENCIES; RooFit; RooFitCore; Tree; RIO; Hist; Matrix; MathCore; Graf; Gpad; RooStats; RooFitJSONInterface; ${EXTRA_DICT_OPTS}; ). # For recent clang, this can facilitate auto-vectorisation.; # In RooFit, the errno side effect is not needed, anyway:; if(""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang""); target_compile_options(HistFactory PUBLIC -fno-math-errno); endif(). # The hist2workspace executable uses the HistFactory::ConfigParser to read the; # XML model specification. The ConfigParser is only built when xml is ON, so we; # can't build hist2workspace without xml.; if(xml); ROOT_EXECUTABLE(hist2workspace hist2workspace.cxx LIBRARIES HistFactory). #---Createhist2workspaceCommandLineOptions------------------------------------------------------------------; generateHeader(hist2workspace; ${CMAKE_CURRENT_SOURCE_DIR}/src/hist2workspace-argparse.py; ${CMAKE_BINARY_DIR}/ginclude/hist2workspaceCommandLineOptionsHelp.h; ). target_compile_definitions(HistFactory PUBLIC HISTFACTORY_XML); endif",MatchSource.DOCS,roofit/histfactory/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/CMakeLists.txt:453,Modifiability,Config,ConfigParser,453,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT rootfit/histfactory package; # @author Pere Mato, CERN; ############################################################################. # The ConfigParser can create HistFactory models from XML files. It uses TXML,; # so we won't build it if the xml build option is OFF.; if (xml); set(HISTFACTORY_XML_HEADERS RooStats/HistFactory/ConfigParser.h); set(HISTFACTORY_XML_SOURCES src/ConfigParser.cxx); set(HISTFACTORY_XML_LIBRARIES XMLParser); endif(). set (EXTRA_DICT_OPTS); if (runtime_cxxmodules AND WIN32); set (EXTRA_DICT_OPTS NO_CXXMODULE); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(HistFactory; HEADERS; RooStats/HistFactory/Asimov.h; RooStats/HistFactory/Channel.h; RooStats/HistFactory/Data.h; RooStats/HistFactory/Detail/HistFactoryImpl.h; RooStats/HistFactory/FlexibleInterpVar.h; RooStats/HistFactory/HistFactoryException.h; RooStats/HistFactory/HistFactoryModelUtils.h; RooStats/HistFactory/HistFactoryNavigation.h; RooStats/HistFactory/HistoToWorkspaceFactoryFast.h; RooStats/HistFactory/HistRef.h; RooStats/HistFactory/LinInterpVar.h; RooStats/HistFactory/MakeModelAndMeasurementsFast.h; RooStats/HistFactory/Measurement.h; RooStats/HistFactory/ParamHistFunc.h; RooStats/HistFactory/PiecewiseInterpolation.h; RooStats/HistFactory/PreprocessFunction.h; RooStats/HistFactory/RooBarlowBeestonLL.h; RooStats/HistFactory/Sample.h; RooStats/HistFactory/Systematics.h; ${HISTFACTORY_XML_HEADERS}; SOURCES; src/Asimov.cxx; src/Channel.cxx; src/Data.cxx; src/FlexibleInterpVar.cxx; src/HistFactoryImpl.cxx; src/HistFactoryModelUtils.cxx; src/HistFactoryNavigation.cxx; src/HistRef.cxx; src/HistoToWorkspaceFactoryFast.cxx; src/JSONTool.cxx; src/LinInterpVar.cxx; src/MakeModelAndMeasurement",MatchSource.DOCS,roofit/histfactory/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/CMakeLists.txt:642,Modifiability,Config,ConfigParser,642,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT rootfit/histfactory package; # @author Pere Mato, CERN; ############################################################################. # The ConfigParser can create HistFactory models from XML files. It uses TXML,; # so we won't build it if the xml build option is OFF.; if (xml); set(HISTFACTORY_XML_HEADERS RooStats/HistFactory/ConfigParser.h); set(HISTFACTORY_XML_SOURCES src/ConfigParser.cxx); set(HISTFACTORY_XML_LIBRARIES XMLParser); endif(). set (EXTRA_DICT_OPTS); if (runtime_cxxmodules AND WIN32); set (EXTRA_DICT_OPTS NO_CXXMODULE); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(HistFactory; HEADERS; RooStats/HistFactory/Asimov.h; RooStats/HistFactory/Channel.h; RooStats/HistFactory/Data.h; RooStats/HistFactory/Detail/HistFactoryImpl.h; RooStats/HistFactory/FlexibleInterpVar.h; RooStats/HistFactory/HistFactoryException.h; RooStats/HistFactory/HistFactoryModelUtils.h; RooStats/HistFactory/HistFactoryNavigation.h; RooStats/HistFactory/HistoToWorkspaceFactoryFast.h; RooStats/HistFactory/HistRef.h; RooStats/HistFactory/LinInterpVar.h; RooStats/HistFactory/MakeModelAndMeasurementsFast.h; RooStats/HistFactory/Measurement.h; RooStats/HistFactory/ParamHistFunc.h; RooStats/HistFactory/PiecewiseInterpolation.h; RooStats/HistFactory/PreprocessFunction.h; RooStats/HistFactory/RooBarlowBeestonLL.h; RooStats/HistFactory/Sample.h; RooStats/HistFactory/Systematics.h; ${HISTFACTORY_XML_HEADERS}; SOURCES; src/Asimov.cxx; src/Channel.cxx; src/Data.cxx; src/FlexibleInterpVar.cxx; src/HistFactoryImpl.cxx; src/HistFactoryModelUtils.cxx; src/HistFactoryNavigation.cxx; src/HistRef.cxx; src/HistoToWorkspaceFactoryFast.cxx; src/JSONTool.cxx; src/LinInterpVar.cxx; src/MakeModelAndMeasurement",MatchSource.DOCS,roofit/histfactory/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/CMakeLists.txt:691,Modifiability,Config,ConfigParser,691,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT rootfit/histfactory package; # @author Pere Mato, CERN; ############################################################################. # The ConfigParser can create HistFactory models from XML files. It uses TXML,; # so we won't build it if the xml build option is OFF.; if (xml); set(HISTFACTORY_XML_HEADERS RooStats/HistFactory/ConfigParser.h); set(HISTFACTORY_XML_SOURCES src/ConfigParser.cxx); set(HISTFACTORY_XML_LIBRARIES XMLParser); endif(). set (EXTRA_DICT_OPTS); if (runtime_cxxmodules AND WIN32); set (EXTRA_DICT_OPTS NO_CXXMODULE); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(HistFactory; HEADERS; RooStats/HistFactory/Asimov.h; RooStats/HistFactory/Channel.h; RooStats/HistFactory/Data.h; RooStats/HistFactory/Detail/HistFactoryImpl.h; RooStats/HistFactory/FlexibleInterpVar.h; RooStats/HistFactory/HistFactoryException.h; RooStats/HistFactory/HistFactoryModelUtils.h; RooStats/HistFactory/HistFactoryNavigation.h; RooStats/HistFactory/HistoToWorkspaceFactoryFast.h; RooStats/HistFactory/HistRef.h; RooStats/HistFactory/LinInterpVar.h; RooStats/HistFactory/MakeModelAndMeasurementsFast.h; RooStats/HistFactory/Measurement.h; RooStats/HistFactory/ParamHistFunc.h; RooStats/HistFactory/PiecewiseInterpolation.h; RooStats/HistFactory/PreprocessFunction.h; RooStats/HistFactory/RooBarlowBeestonLL.h; RooStats/HistFactory/Sample.h; RooStats/HistFactory/Systematics.h; ${HISTFACTORY_XML_HEADERS}; SOURCES; src/Asimov.cxx; src/Channel.cxx; src/Data.cxx; src/FlexibleInterpVar.cxx; src/HistFactoryImpl.cxx; src/HistFactoryModelUtils.cxx; src/HistFactoryNavigation.cxx; src/HistRef.cxx; src/HistoToWorkspaceFactoryFast.cxx; src/JSONTool.cxx; src/LinInterpVar.cxx; src/MakeModelAndMeasurement",MatchSource.DOCS,roofit/histfactory/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/CMakeLists.txt:1076,Modifiability,Flexible,FlexibleInterpVar,1076,"eserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT rootfit/histfactory package; # @author Pere Mato, CERN; ############################################################################. # The ConfigParser can create HistFactory models from XML files. It uses TXML,; # so we won't build it if the xml build option is OFF.; if (xml); set(HISTFACTORY_XML_HEADERS RooStats/HistFactory/ConfigParser.h); set(HISTFACTORY_XML_SOURCES src/ConfigParser.cxx); set(HISTFACTORY_XML_LIBRARIES XMLParser); endif(). set (EXTRA_DICT_OPTS); if (runtime_cxxmodules AND WIN32); set (EXTRA_DICT_OPTS NO_CXXMODULE); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(HistFactory; HEADERS; RooStats/HistFactory/Asimov.h; RooStats/HistFactory/Channel.h; RooStats/HistFactory/Data.h; RooStats/HistFactory/Detail/HistFactoryImpl.h; RooStats/HistFactory/FlexibleInterpVar.h; RooStats/HistFactory/HistFactoryException.h; RooStats/HistFactory/HistFactoryModelUtils.h; RooStats/HistFactory/HistFactoryNavigation.h; RooStats/HistFactory/HistoToWorkspaceFactoryFast.h; RooStats/HistFactory/HistRef.h; RooStats/HistFactory/LinInterpVar.h; RooStats/HistFactory/MakeModelAndMeasurementsFast.h; RooStats/HistFactory/Measurement.h; RooStats/HistFactory/ParamHistFunc.h; RooStats/HistFactory/PiecewiseInterpolation.h; RooStats/HistFactory/PreprocessFunction.h; RooStats/HistFactory/RooBarlowBeestonLL.h; RooStats/HistFactory/Sample.h; RooStats/HistFactory/Systematics.h; ${HISTFACTORY_XML_HEADERS}; SOURCES; src/Asimov.cxx; src/Channel.cxx; src/Data.cxx; src/FlexibleInterpVar.cxx; src/HistFactoryImpl.cxx; src/HistFactoryModelUtils.cxx; src/HistFactoryNavigation.cxx; src/HistRef.cxx; src/HistoToWorkspaceFactoryFast.cxx; src/JSONTool.cxx; src/LinInterpVar.cxx; src/MakeModelAndMeasurementsFast.cxx; src/Measurement.cxx; src/ParamHistFunc.cxx; src/PiecewiseInte",MatchSource.DOCS,roofit/histfactory/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/CMakeLists.txt:1770,Modifiability,Flexible,FlexibleInterpVar,1770,"CT_OPTS); if (runtime_cxxmodules AND WIN32); set (EXTRA_DICT_OPTS NO_CXXMODULE); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(HistFactory; HEADERS; RooStats/HistFactory/Asimov.h; RooStats/HistFactory/Channel.h; RooStats/HistFactory/Data.h; RooStats/HistFactory/Detail/HistFactoryImpl.h; RooStats/HistFactory/FlexibleInterpVar.h; RooStats/HistFactory/HistFactoryException.h; RooStats/HistFactory/HistFactoryModelUtils.h; RooStats/HistFactory/HistFactoryNavigation.h; RooStats/HistFactory/HistoToWorkspaceFactoryFast.h; RooStats/HistFactory/HistRef.h; RooStats/HistFactory/LinInterpVar.h; RooStats/HistFactory/MakeModelAndMeasurementsFast.h; RooStats/HistFactory/Measurement.h; RooStats/HistFactory/ParamHistFunc.h; RooStats/HistFactory/PiecewiseInterpolation.h; RooStats/HistFactory/PreprocessFunction.h; RooStats/HistFactory/RooBarlowBeestonLL.h; RooStats/HistFactory/Sample.h; RooStats/HistFactory/Systematics.h; ${HISTFACTORY_XML_HEADERS}; SOURCES; src/Asimov.cxx; src/Channel.cxx; src/Data.cxx; src/FlexibleInterpVar.cxx; src/HistFactoryImpl.cxx; src/HistFactoryModelUtils.cxx; src/HistFactoryNavigation.cxx; src/HistRef.cxx; src/HistoToWorkspaceFactoryFast.cxx; src/JSONTool.cxx; src/LinInterpVar.cxx; src/MakeModelAndMeasurementsFast.cxx; src/Measurement.cxx; src/ParamHistFunc.cxx; src/PiecewiseInterpolation.cxx; src/PreprocessFunction.cxx; src/RooBarlowBeestonLL.cxx; src/Sample.cxx; src/Systematics.cxx; ${HISTFACTORY_XML_SOURCES}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; RooBatchCompute; ${HISTFACTORY_XML_LIBRARIES}; DEPENDENCIES; RooFit; RooFitCore; Tree; RIO; Hist; Matrix; MathCore; Graf; Gpad; RooStats; RooFitJSONInterface; ${EXTRA_DICT_OPTS}; ). # For recent clang, this can facilitate auto-vectorisation.; # In RooFit, the errno side effect is not needed, anyway:; if(""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang""); target_compile_options(HistFactory PUBLIC -fno-math-errno); endif(). # The hist2workspace executable uses the HistFactory::ConfigParser to read the; # XML model sp",MatchSource.DOCS,roofit/histfactory/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/CMakeLists.txt:2735,Modifiability,Config,ConfigParser,2735,"; src/Channel.cxx; src/Data.cxx; src/FlexibleInterpVar.cxx; src/HistFactoryImpl.cxx; src/HistFactoryModelUtils.cxx; src/HistFactoryNavigation.cxx; src/HistRef.cxx; src/HistoToWorkspaceFactoryFast.cxx; src/JSONTool.cxx; src/LinInterpVar.cxx; src/MakeModelAndMeasurementsFast.cxx; src/Measurement.cxx; src/ParamHistFunc.cxx; src/PiecewiseInterpolation.cxx; src/PreprocessFunction.cxx; src/RooBarlowBeestonLL.cxx; src/Sample.cxx; src/Systematics.cxx; ${HISTFACTORY_XML_SOURCES}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; RooBatchCompute; ${HISTFACTORY_XML_LIBRARIES}; DEPENDENCIES; RooFit; RooFitCore; Tree; RIO; Hist; Matrix; MathCore; Graf; Gpad; RooStats; RooFitJSONInterface; ${EXTRA_DICT_OPTS}; ). # For recent clang, this can facilitate auto-vectorisation.; # In RooFit, the errno side effect is not needed, anyway:; if(""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang""); target_compile_options(HistFactory PUBLIC -fno-math-errno); endif(). # The hist2workspace executable uses the HistFactory::ConfigParser to read the; # XML model specification. The ConfigParser is only built when xml is ON, so we; # can't build hist2workspace without xml.; if(xml); ROOT_EXECUTABLE(hist2workspace hist2workspace.cxx LIBRARIES HistFactory). #---Createhist2workspaceCommandLineOptions------------------------------------------------------------------; generateHeader(hist2workspace; ${CMAKE_CURRENT_SOURCE_DIR}/src/hist2workspace-argparse.py; ${CMAKE_BINARY_DIR}/ginclude/hist2workspaceCommandLineOptionsHelp.h; ). target_compile_definitions(HistFactory PUBLIC HISTFACTORY_XML); endif(). if(MSVC); set(prepareHistFactory_script prepareHistFactory.bat); else(); set(prepareHistFactory_script prepareHistFactory); endif(); file(COPY config/${prepareHistFactory_script} DESTINATION ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}); install(FILES ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${prepareHistFactory_script}; PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ; GROUP_EXECUTE GROUP_READ; WORLD_EXECUTE WORLD_READ; DESTINATION $",MatchSource.DOCS,roofit/histfactory/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/CMakeLists.txt:2792,Modifiability,Config,ConfigParser,2792,"src/HistFactoryImpl.cxx; src/HistFactoryModelUtils.cxx; src/HistFactoryNavigation.cxx; src/HistRef.cxx; src/HistoToWorkspaceFactoryFast.cxx; src/JSONTool.cxx; src/LinInterpVar.cxx; src/MakeModelAndMeasurementsFast.cxx; src/Measurement.cxx; src/ParamHistFunc.cxx; src/PiecewiseInterpolation.cxx; src/PreprocessFunction.cxx; src/RooBarlowBeestonLL.cxx; src/Sample.cxx; src/Systematics.cxx; ${HISTFACTORY_XML_SOURCES}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; RooBatchCompute; ${HISTFACTORY_XML_LIBRARIES}; DEPENDENCIES; RooFit; RooFitCore; Tree; RIO; Hist; Matrix; MathCore; Graf; Gpad; RooStats; RooFitJSONInterface; ${EXTRA_DICT_OPTS}; ). # For recent clang, this can facilitate auto-vectorisation.; # In RooFit, the errno side effect is not needed, anyway:; if(""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang""); target_compile_options(HistFactory PUBLIC -fno-math-errno); endif(). # The hist2workspace executable uses the HistFactory::ConfigParser to read the; # XML model specification. The ConfigParser is only built when xml is ON, so we; # can't build hist2workspace without xml.; if(xml); ROOT_EXECUTABLE(hist2workspace hist2workspace.cxx LIBRARIES HistFactory). #---Createhist2workspaceCommandLineOptions------------------------------------------------------------------; generateHeader(hist2workspace; ${CMAKE_CURRENT_SOURCE_DIR}/src/hist2workspace-argparse.py; ${CMAKE_BINARY_DIR}/ginclude/hist2workspaceCommandLineOptionsHelp.h; ). target_compile_definitions(HistFactory PUBLIC HISTFACTORY_XML); endif(). if(MSVC); set(prepareHistFactory_script prepareHistFactory.bat); else(); set(prepareHistFactory_script prepareHistFactory); endif(); file(COPY config/${prepareHistFactory_script} DESTINATION ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}); install(FILES ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${prepareHistFactory_script}; PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ; GROUP_EXECUTE GROUP_READ; WORLD_EXECUTE WORLD_READ; DESTINATION ${CMAKE_INSTALL_BINDIR}). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,roofit/histfactory/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/CMakeLists.txt:3457,Modifiability,config,config,3457,"src/HistFactoryImpl.cxx; src/HistFactoryModelUtils.cxx; src/HistFactoryNavigation.cxx; src/HistRef.cxx; src/HistoToWorkspaceFactoryFast.cxx; src/JSONTool.cxx; src/LinInterpVar.cxx; src/MakeModelAndMeasurementsFast.cxx; src/Measurement.cxx; src/ParamHistFunc.cxx; src/PiecewiseInterpolation.cxx; src/PreprocessFunction.cxx; src/RooBarlowBeestonLL.cxx; src/Sample.cxx; src/Systematics.cxx; ${HISTFACTORY_XML_SOURCES}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; RooBatchCompute; ${HISTFACTORY_XML_LIBRARIES}; DEPENDENCIES; RooFit; RooFitCore; Tree; RIO; Hist; Matrix; MathCore; Graf; Gpad; RooStats; RooFitJSONInterface; ${EXTRA_DICT_OPTS}; ). # For recent clang, this can facilitate auto-vectorisation.; # In RooFit, the errno side effect is not needed, anyway:; if(""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang""); target_compile_options(HistFactory PUBLIC -fno-math-errno); endif(). # The hist2workspace executable uses the HistFactory::ConfigParser to read the; # XML model specification. The ConfigParser is only built when xml is ON, so we; # can't build hist2workspace without xml.; if(xml); ROOT_EXECUTABLE(hist2workspace hist2workspace.cxx LIBRARIES HistFactory). #---Createhist2workspaceCommandLineOptions------------------------------------------------------------------; generateHeader(hist2workspace; ${CMAKE_CURRENT_SOURCE_DIR}/src/hist2workspace-argparse.py; ${CMAKE_BINARY_DIR}/ginclude/hist2workspaceCommandLineOptionsHelp.h; ). target_compile_definitions(HistFactory PUBLIC HISTFACTORY_XML); endif(). if(MSVC); set(prepareHistFactory_script prepareHistFactory.bat); else(); set(prepareHistFactory_script prepareHistFactory); endif(); file(COPY config/${prepareHistFactory_script} DESTINATION ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}); install(FILES ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${prepareHistFactory_script}; PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ; GROUP_EXECUTE GROUP_READ; WORLD_EXECUTE WORLD_READ; DESTINATION ${CMAKE_INSTALL_BINDIR}). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,roofit/histfactory/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/CMakeLists.txt:3786,Testability,test,test,3786,"src/HistFactoryImpl.cxx; src/HistFactoryModelUtils.cxx; src/HistFactoryNavigation.cxx; src/HistRef.cxx; src/HistoToWorkspaceFactoryFast.cxx; src/JSONTool.cxx; src/LinInterpVar.cxx; src/MakeModelAndMeasurementsFast.cxx; src/Measurement.cxx; src/ParamHistFunc.cxx; src/PiecewiseInterpolation.cxx; src/PreprocessFunction.cxx; src/RooBarlowBeestonLL.cxx; src/Sample.cxx; src/Systematics.cxx; ${HISTFACTORY_XML_SOURCES}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; RooBatchCompute; ${HISTFACTORY_XML_LIBRARIES}; DEPENDENCIES; RooFit; RooFitCore; Tree; RIO; Hist; Matrix; MathCore; Graf; Gpad; RooStats; RooFitJSONInterface; ${EXTRA_DICT_OPTS}; ). # For recent clang, this can facilitate auto-vectorisation.; # In RooFit, the errno side effect is not needed, anyway:; if(""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang""); target_compile_options(HistFactory PUBLIC -fno-math-errno); endif(). # The hist2workspace executable uses the HistFactory::ConfigParser to read the; # XML model specification. The ConfigParser is only built when xml is ON, so we; # can't build hist2workspace without xml.; if(xml); ROOT_EXECUTABLE(hist2workspace hist2workspace.cxx LIBRARIES HistFactory). #---Createhist2workspaceCommandLineOptions------------------------------------------------------------------; generateHeader(hist2workspace; ${CMAKE_CURRENT_SOURCE_DIR}/src/hist2workspace-argparse.py; ${CMAKE_BINARY_DIR}/ginclude/hist2workspaceCommandLineOptionsHelp.h; ). target_compile_definitions(HistFactory PUBLIC HISTFACTORY_XML); endif(). if(MSVC); set(prepareHistFactory_script prepareHistFactory.bat); else(); set(prepareHistFactory_script prepareHistFactory); endif(); file(COPY config/${prepareHistFactory_script} DESTINATION ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}); install(FILES ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${prepareHistFactory_script}; PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ; GROUP_EXECUTE GROUP_READ; WORLD_EXECUTE WORLD_READ; DESTINATION ${CMAKE_INSTALL_BINDIR}). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,roofit/histfactory/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/CMakeLists.txt:761,Integrability,DEPEND,DEPENDENCIES,761,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT rootfit/histfactory package; # @author Carsten Burgard, CERN; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(RooFitHS3; HEADERS; RooFitHS3/JSONIO.h; RooFitHS3/RooJSONFactoryWSTool.h; SOURCES; src/Domains.cxx; src/JSONIO.cxx; src/RooJSONFactoryWSTool.cxx; src/JSONFactories_RooFitCore.cxx; src/JSONFactories_HistFactory.cxx; src/JSONIOUtils.cxx; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; DEPENDENCIES; RooFitCore; RooFitJSONInterface; LIBRARIES; RooFit; HistFactory; ). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,roofit/hs3/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/CMakeLists.txt:870,Testability,test,test,870,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT rootfit/histfactory package; # @author Carsten Burgard, CERN; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(RooFitHS3; HEADERS; RooFitHS3/JSONIO.h; RooFitHS3/RooJSONFactoryWSTool.h; SOURCES; src/Domains.cxx; src/JSONIO.cxx; src/RooJSONFactoryWSTool.cxx; src/JSONFactories_RooFitCore.cxx; src/JSONFactories_HistFactory.cxx; src/JSONIOUtils.cxx; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; DEPENDENCIES; RooFitCore; RooFitJSONInterface; LIBRARIES; RooFit; HistFactory; ). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,roofit/hs3/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/jsoninterface/CMakeLists.txt:725,Integrability,interface,interface,725,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT RooFitJSONInterface package; # @author Jonas Rembser, CERN; ############################################################################. # If RapidYAML can be found on the system, we will also compile the RapidYAML backend besides the; # nlohmann-json backend. Like this we can also convert to yaml. # The RapidYAML backend is always disabled because it doesn't work anymore for; # RooFitHS3. The nlohmann_json interface is always used and works well, hence; # rapidyaml was not tested anymore. The relevant code is still left in the; # CMakeLists.txt in case someone wants to revive the RapilYAML backend. # message(STATUS ""Looking for RapidYAML (used by RooFit)""); # find_package(ryml). if(${RYML_FOUND}); message(STATUS ""RapidYAML found, compiling also RooFit JSON Interface with RapidYAML parser""); set(ParserSources src/JSONParser.cxx src/RYMLParser.cxx); add_compile_definitions(ROOFIT_WITH_RYML); else(); set(ParserSources src/JSONParser.cxx); message(STATUS ""RapidYAML not found, only compiling RooFit with nlohmann-json parser""); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(RooFitJSONInterface; HEADERS; RooFit/Detail/JSONInterface.h; SOURCES; src/JSONInterface.cxx; ${ParserSources}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; Core; ). if(${RYML_FOUND}); target_include_directories(RooFitJSONInterface PRIVATE ${RYML_INCLUDE_DIRS}); target_link_libraries(RooFitJSONInterface PRIVATE -lc4core -lryml); target_link_directories(RooFitJSONInterface PRIVATE ${RYML_LIB_DIR}); endif(). if(builtin_nlohmannjson); target_include_directories(RooFitJSONInterface PRIVATE ${CMAKE_SOURCE_DIR}/builtins); else(); target_link_libraries(RooFitJSONInterface PRIVATE nlohmann_json::nlohman",MatchSource.DOCS,roofit/jsoninterface/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/jsoninterface/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/jsoninterface/CMakeLists.txt:923,Integrability,message,message,923,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT RooFitJSONInterface package; # @author Jonas Rembser, CERN; ############################################################################. # If RapidYAML can be found on the system, we will also compile the RapidYAML backend besides the; # nlohmann-json backend. Like this we can also convert to yaml. # The RapidYAML backend is always disabled because it doesn't work anymore for; # RooFitHS3. The nlohmann_json interface is always used and works well, hence; # rapidyaml was not tested anymore. The relevant code is still left in the; # CMakeLists.txt in case someone wants to revive the RapilYAML backend. # message(STATUS ""Looking for RapidYAML (used by RooFit)""); # find_package(ryml). if(${RYML_FOUND}); message(STATUS ""RapidYAML found, compiling also RooFit JSON Interface with RapidYAML parser""); set(ParserSources src/JSONParser.cxx src/RYMLParser.cxx); add_compile_definitions(ROOFIT_WITH_RYML); else(); set(ParserSources src/JSONParser.cxx); message(STATUS ""RapidYAML not found, only compiling RooFit with nlohmann-json parser""); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(RooFitJSONInterface; HEADERS; RooFit/Detail/JSONInterface.h; SOURCES; src/JSONInterface.cxx; ${ParserSources}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; Core; ). if(${RYML_FOUND}); target_include_directories(RooFitJSONInterface PRIVATE ${RYML_INCLUDE_DIRS}); target_link_libraries(RooFitJSONInterface PRIVATE -lc4core -lryml); target_link_directories(RooFitJSONInterface PRIVATE ${RYML_LIB_DIR}); endif(). if(builtin_nlohmannjson); target_include_directories(RooFitJSONInterface PRIVATE ${CMAKE_SOURCE_DIR}/builtins); else(); target_link_libraries(RooFitJSONInterface PRIVATE nlohmann_json::nlohman",MatchSource.DOCS,roofit/jsoninterface/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/jsoninterface/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/jsoninterface/CMakeLists.txt:1022,Integrability,message,message,1022,"5-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT RooFitJSONInterface package; # @author Jonas Rembser, CERN; ############################################################################. # If RapidYAML can be found on the system, we will also compile the RapidYAML backend besides the; # nlohmann-json backend. Like this we can also convert to yaml. # The RapidYAML backend is always disabled because it doesn't work anymore for; # RooFitHS3. The nlohmann_json interface is always used and works well, hence; # rapidyaml was not tested anymore. The relevant code is still left in the; # CMakeLists.txt in case someone wants to revive the RapilYAML backend. # message(STATUS ""Looking for RapidYAML (used by RooFit)""); # find_package(ryml). if(${RYML_FOUND}); message(STATUS ""RapidYAML found, compiling also RooFit JSON Interface with RapidYAML parser""); set(ParserSources src/JSONParser.cxx src/RYMLParser.cxx); add_compile_definitions(ROOFIT_WITH_RYML); else(); set(ParserSources src/JSONParser.cxx); message(STATUS ""RapidYAML not found, only compiling RooFit with nlohmann-json parser""); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(RooFitJSONInterface; HEADERS; RooFit/Detail/JSONInterface.h; SOURCES; src/JSONInterface.cxx; ${ParserSources}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; Core; ). if(${RYML_FOUND}); target_include_directories(RooFitJSONInterface PRIVATE ${RYML_INCLUDE_DIRS}); target_link_libraries(RooFitJSONInterface PRIVATE -lc4core -lryml); target_link_directories(RooFitJSONInterface PRIVATE ${RYML_LIB_DIR}); endif(). if(builtin_nlohmannjson); target_include_directories(RooFitJSONInterface PRIVATE ${CMAKE_SOURCE_DIR}/builtins); else(); target_link_libraries(RooFitJSONInterface PRIVATE nlohmann_json::nlohmann_json); endif(); ",MatchSource.DOCS,roofit/jsoninterface/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/jsoninterface/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/jsoninterface/CMakeLists.txt:1082,Integrability,Interface,Interface,1082,"5-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT RooFitJSONInterface package; # @author Jonas Rembser, CERN; ############################################################################. # If RapidYAML can be found on the system, we will also compile the RapidYAML backend besides the; # nlohmann-json backend. Like this we can also convert to yaml. # The RapidYAML backend is always disabled because it doesn't work anymore for; # RooFitHS3. The nlohmann_json interface is always used and works well, hence; # rapidyaml was not tested anymore. The relevant code is still left in the; # CMakeLists.txt in case someone wants to revive the RapilYAML backend. # message(STATUS ""Looking for RapidYAML (used by RooFit)""); # find_package(ryml). if(${RYML_FOUND}); message(STATUS ""RapidYAML found, compiling also RooFit JSON Interface with RapidYAML parser""); set(ParserSources src/JSONParser.cxx src/RYMLParser.cxx); add_compile_definitions(ROOFIT_WITH_RYML); else(); set(ParserSources src/JSONParser.cxx); message(STATUS ""RapidYAML not found, only compiling RooFit with nlohmann-json parser""); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(RooFitJSONInterface; HEADERS; RooFit/Detail/JSONInterface.h; SOURCES; src/JSONInterface.cxx; ${ParserSources}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; Core; ). if(${RYML_FOUND}); target_include_directories(RooFitJSONInterface PRIVATE ${RYML_INCLUDE_DIRS}); target_link_libraries(RooFitJSONInterface PRIVATE -lc4core -lryml); target_link_directories(RooFitJSONInterface PRIVATE ${RYML_LIB_DIR}); endif(). if(builtin_nlohmannjson); target_include_directories(RooFitJSONInterface PRIVATE ${CMAKE_SOURCE_DIR}/builtins); else(); target_link_libraries(RooFitJSONInterface PRIVATE nlohmann_json::nlohmann_json); endif(); ",MatchSource.DOCS,roofit/jsoninterface/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/jsoninterface/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/jsoninterface/CMakeLists.txt:1265,Integrability,message,message,1265,"5-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT RooFitJSONInterface package; # @author Jonas Rembser, CERN; ############################################################################. # If RapidYAML can be found on the system, we will also compile the RapidYAML backend besides the; # nlohmann-json backend. Like this we can also convert to yaml. # The RapidYAML backend is always disabled because it doesn't work anymore for; # RooFitHS3. The nlohmann_json interface is always used and works well, hence; # rapidyaml was not tested anymore. The relevant code is still left in the; # CMakeLists.txt in case someone wants to revive the RapilYAML backend. # message(STATUS ""Looking for RapidYAML (used by RooFit)""); # find_package(ryml). if(${RYML_FOUND}); message(STATUS ""RapidYAML found, compiling also RooFit JSON Interface with RapidYAML parser""); set(ParserSources src/JSONParser.cxx src/RYMLParser.cxx); add_compile_definitions(ROOFIT_WITH_RYML); else(); set(ParserSources src/JSONParser.cxx); message(STATUS ""RapidYAML not found, only compiling RooFit with nlohmann-json parser""); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(RooFitJSONInterface; HEADERS; RooFit/Detail/JSONInterface.h; SOURCES; src/JSONInterface.cxx; ${ParserSources}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; Core; ). if(${RYML_FOUND}); target_include_directories(RooFitJSONInterface PRIVATE ${RYML_INCLUDE_DIRS}); target_link_libraries(RooFitJSONInterface PRIVATE -lc4core -lryml); target_link_directories(RooFitJSONInterface PRIVATE ${RYML_LIB_DIR}); endif(). if(builtin_nlohmannjson); target_include_directories(RooFitJSONInterface PRIVATE ${CMAKE_SOURCE_DIR}/builtins); else(); target_link_libraries(RooFitJSONInterface PRIVATE nlohmann_json::nlohmann_json); endif(); ",MatchSource.DOCS,roofit/jsoninterface/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/jsoninterface/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/jsoninterface/CMakeLists.txt:793,Testability,test,tested,793,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT RooFitJSONInterface package; # @author Jonas Rembser, CERN; ############################################################################. # If RapidYAML can be found on the system, we will also compile the RapidYAML backend besides the; # nlohmann-json backend. Like this we can also convert to yaml. # The RapidYAML backend is always disabled because it doesn't work anymore for; # RooFitHS3. The nlohmann_json interface is always used and works well, hence; # rapidyaml was not tested anymore. The relevant code is still left in the; # CMakeLists.txt in case someone wants to revive the RapilYAML backend. # message(STATUS ""Looking for RapidYAML (used by RooFit)""); # find_package(ryml). if(${RYML_FOUND}); message(STATUS ""RapidYAML found, compiling also RooFit JSON Interface with RapidYAML parser""); set(ParserSources src/JSONParser.cxx src/RYMLParser.cxx); add_compile_definitions(ROOFIT_WITH_RYML); else(); set(ParserSources src/JSONParser.cxx); message(STATUS ""RapidYAML not found, only compiling RooFit with nlohmann-json parser""); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(RooFitJSONInterface; HEADERS; RooFit/Detail/JSONInterface.h; SOURCES; src/JSONInterface.cxx; ${ParserSources}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; Core; ). if(${RYML_FOUND}); target_include_directories(RooFitJSONInterface PRIVATE ${RYML_INCLUDE_DIRS}); target_link_libraries(RooFitJSONInterface PRIVATE -lc4core -lryml); target_link_directories(RooFitJSONInterface PRIVATE ${RYML_LIB_DIR}); endif(). if(builtin_nlohmannjson); target_include_directories(RooFitJSONInterface PRIVATE ${CMAKE_SOURCE_DIR}/builtins); else(); target_link_libraries(RooFitJSONInterface PRIVATE nlohmann_json::nlohman",MatchSource.DOCS,roofit/jsoninterface/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/jsoninterface/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/CMakeLists.txt:559,Integrability,DEPEND,DEPENDENCIES,559,"############################################################################; # CMakeLists.txt file for building ROOT RooFitMultiProcess package; # @author Patrick Bos, Netherlands eScience Center; ############################################################################. ROOT_LINKER_LIBRARY(RooFitMultiProcess; src/worker.cxx; src/Messenger.cxx; src/ProcessManager.cxx; src/util.cxx; src/Queue.cxx; src/FIFOQueue.cxx; src/PriorityQueue.cxx; src/JobManager.cxx; src/Job.cxx; src/Config.cxx; src/ProcessTimer.cxx; src/HeatmapAnalyzer.cxx; LIBRARIES; Core; DEPENDENCIES; RooFitZMQ; ). target_link_libraries(RooFitMultiProcess PUBLIC Hist RooFitZMQ); set(RooFitMultiProcess_INCLUDE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/res""); target_include_directories(RooFitMultiProcess; PRIVATE ${RooFitMultiProcess_INCLUDE_DIR}; INTERFACE $<BUILD_INTERFACE:${RooFitMultiProcess_INCLUDE_DIR}>). if(builtin_nlohmannjson); target_include_directories(RooFitMultiProcess PRIVATE ${CMAKE_SOURCE_DIR}/builtins); else(); target_link_libraries(RooFitMultiProcess PRIVATE nlohmann_json::nlohmann_json); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test). ROOT_INSTALL_HEADERS(); ",MatchSource.DOCS,roofit/multiprocess/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/CMakeLists.txt:813,Integrability,INTERFACE,INTERFACE,813,"############################################################################; # CMakeLists.txt file for building ROOT RooFitMultiProcess package; # @author Patrick Bos, Netherlands eScience Center; ############################################################################. ROOT_LINKER_LIBRARY(RooFitMultiProcess; src/worker.cxx; src/Messenger.cxx; src/ProcessManager.cxx; src/util.cxx; src/Queue.cxx; src/FIFOQueue.cxx; src/PriorityQueue.cxx; src/JobManager.cxx; src/Job.cxx; src/Config.cxx; src/ProcessTimer.cxx; src/HeatmapAnalyzer.cxx; LIBRARIES; Core; DEPENDENCIES; RooFitZMQ; ). target_link_libraries(RooFitMultiProcess PUBLIC Hist RooFitZMQ); set(RooFitMultiProcess_INCLUDE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/res""); target_include_directories(RooFitMultiProcess; PRIVATE ${RooFitMultiProcess_INCLUDE_DIR}; INTERFACE $<BUILD_INTERFACE:${RooFitMultiProcess_INCLUDE_DIR}>). if(builtin_nlohmannjson); target_include_directories(RooFitMultiProcess PRIVATE ${CMAKE_SOURCE_DIR}/builtins); else(); target_link_libraries(RooFitMultiProcess PRIVATE nlohmann_json::nlohmann_json); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test). ROOT_INSTALL_HEADERS(); ",MatchSource.DOCS,roofit/multiprocess/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/CMakeLists.txt:483,Modifiability,Config,Config,483,"############################################################################; # CMakeLists.txt file for building ROOT RooFitMultiProcess package; # @author Patrick Bos, Netherlands eScience Center; ############################################################################. ROOT_LINKER_LIBRARY(RooFitMultiProcess; src/worker.cxx; src/Messenger.cxx; src/ProcessManager.cxx; src/util.cxx; src/Queue.cxx; src/FIFOQueue.cxx; src/PriorityQueue.cxx; src/JobManager.cxx; src/Job.cxx; src/Config.cxx; src/ProcessTimer.cxx; src/HeatmapAnalyzer.cxx; LIBRARIES; Core; DEPENDENCIES; RooFitZMQ; ). target_link_libraries(RooFitMultiProcess PUBLIC Hist RooFitZMQ); set(RooFitMultiProcess_INCLUDE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/res""); target_include_directories(RooFitMultiProcess; PRIVATE ${RooFitMultiProcess_INCLUDE_DIR}; INTERFACE $<BUILD_INTERFACE:${RooFitMultiProcess_INCLUDE_DIR}>). if(builtin_nlohmannjson); target_include_directories(RooFitMultiProcess PRIVATE ${CMAKE_SOURCE_DIR}/builtins); else(); target_link_libraries(RooFitMultiProcess PRIVATE nlohmann_json::nlohmann_json); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test). ROOT_INSTALL_HEADERS(); ",MatchSource.DOCS,roofit/multiprocess/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/CMakeLists.txt:393,Performance,Queue,Queue,393,"############################################################################; # CMakeLists.txt file for building ROOT RooFitMultiProcess package; # @author Patrick Bos, Netherlands eScience Center; ############################################################################. ROOT_LINKER_LIBRARY(RooFitMultiProcess; src/worker.cxx; src/Messenger.cxx; src/ProcessManager.cxx; src/util.cxx; src/Queue.cxx; src/FIFOQueue.cxx; src/PriorityQueue.cxx; src/JobManager.cxx; src/Job.cxx; src/Config.cxx; src/ProcessTimer.cxx; src/HeatmapAnalyzer.cxx; LIBRARIES; Core; DEPENDENCIES; RooFitZMQ; ). target_link_libraries(RooFitMultiProcess PUBLIC Hist RooFitZMQ); set(RooFitMultiProcess_INCLUDE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/res""); target_include_directories(RooFitMultiProcess; PRIVATE ${RooFitMultiProcess_INCLUDE_DIR}; INTERFACE $<BUILD_INTERFACE:${RooFitMultiProcess_INCLUDE_DIR}>). if(builtin_nlohmannjson); target_include_directories(RooFitMultiProcess PRIVATE ${CMAKE_SOURCE_DIR}/builtins); else(); target_link_libraries(RooFitMultiProcess PRIVATE nlohmann_json::nlohmann_json); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test). ROOT_INSTALL_HEADERS(); ",MatchSource.DOCS,roofit/multiprocess/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/CMakeLists.txt:1113,Testability,test,test,1113,"############################################################################; # CMakeLists.txt file for building ROOT RooFitMultiProcess package; # @author Patrick Bos, Netherlands eScience Center; ############################################################################. ROOT_LINKER_LIBRARY(RooFitMultiProcess; src/worker.cxx; src/Messenger.cxx; src/ProcessManager.cxx; src/util.cxx; src/Queue.cxx; src/FIFOQueue.cxx; src/PriorityQueue.cxx; src/JobManager.cxx; src/Job.cxx; src/Config.cxx; src/ProcessTimer.cxx; src/HeatmapAnalyzer.cxx; LIBRARIES; Core; DEPENDENCIES; RooFitZMQ; ). target_link_libraries(RooFitMultiProcess PUBLIC Hist RooFitZMQ); set(RooFitMultiProcess_INCLUDE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/res""); target_include_directories(RooFitMultiProcess; PRIVATE ${RooFitMultiProcess_INCLUDE_DIR}; INTERFACE $<BUILD_INTERFACE:${RooFitMultiProcess_INCLUDE_DIR}>). if(builtin_nlohmannjson); target_include_directories(RooFitMultiProcess PRIVATE ${CMAKE_SOURCE_DIR}/builtins); else(); target_link_libraries(RooFitMultiProcess PRIVATE nlohmann_json::nlohmann_json); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test). ROOT_INSTALL_HEADERS(); ",MatchSource.DOCS,roofit/multiprocess/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/CMakeLists.txt:3322,Integrability,DEPEND,DEPENDENCIES,3322,"iform.h; RooUniform.h; RooVoigtian.h; RooJohnson.h; SOURCES; src/Roo2DKeysPdf.cxx; src/RooArgusBG.cxx; src/RooBCPEffDecay.cxx; src/RooBCPGenDecay.cxx; src/RooBDecay.cxx; src/RooBernstein.cxx; src/RooBifurGauss.cxx; src/RooBlindTools.cxx; src/RooBMixDecay.cxx; src/RooBreitWigner.cxx; src/RooBukinPdf.cxx; src/RooCBShape.cxx; src/RooCrystalBall.cxx; src/RooCFunction1Binding.cxx; src/RooCFunction2Binding.cxx; src/RooCFunction3Binding.cxx; src/RooCFunction4Binding.cxx; src/RooChebychev.cxx; src/RooChi2MCSModule.cxx; src/RooChiSquarePdf.cxx; src/RooDecay.cxx; src/RooDstD0BG.cxx; src/RooExponential.cxx; src/RooLegacyExpPoly.cxx; src/RooPowerSum.cxx; src/RooFunctor1DBinding.cxx; src/RooFunctorBinding.cxx; src/RooGamma.cxx; src/RooGaussian.cxx; src/RooGaussModel.cxx; src/RooGExpModel.cxx; src/RooHistConstraint.cxx; src/RooIntegralMorph.cxx; src/RooJeffreysPrior.cxx; src/RooKeysPdf.cxx; src/RooLagrangianMorphFunc.cxx; src/RooLandau.cxx; src/RooLognormal.cxx; src/RooMathCoreReg.cxx; src/RooMomentMorph.cxx; src/RooMomentMorphFunc.cxx; src/RooMomentMorphFuncND.cxx; src/RooMultiBinomial.cxx; src/RooNDKeysPdf.cxx; src/RooNonCPEigenDecay.cxx; src/RooNovosibirsk.cxx; src/RooParametricStepFunction.cxx; src/RooParamHistFunc.cxx; src/RooPoisson.cxx; src/RooPolynomial.cxx; src/RooSpline.cxx; src/RooStepFunction.cxx; src/RooTFnBinding.cxx; src/RooTFnPdfBinding.cxx; src/RooTMathReg.cxx; src/RooUnblindCPAsymVar.cxx; src/RooUnblindOffset.cxx; src/RooUnblindPrecision.cxx; src/RooUnblindUniform.cxx; src/RooUniform.cxx; src/RooVoigtian.cxx; src/RooJohnson.cxx; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LINKDEF; LinkDef1.h; LIBRARIES; RooBatchCompute; DEPENDENCIES; Core; RooFitCore; Tree; RIO; Matrix; MathCore; ${EXTRA_DICT_OPTS}; ). # For recent clang, this can facilitate auto-vectorisation.; # In RooFit, the errno side effect is not needed, anyway:; if(""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang""); target_compile_options(RooFit PUBLIC -fno-math-errno); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,roofit/roofit/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/CMakeLists.txt:3665,Testability,test,test,3665,"iform.h; RooUniform.h; RooVoigtian.h; RooJohnson.h; SOURCES; src/Roo2DKeysPdf.cxx; src/RooArgusBG.cxx; src/RooBCPEffDecay.cxx; src/RooBCPGenDecay.cxx; src/RooBDecay.cxx; src/RooBernstein.cxx; src/RooBifurGauss.cxx; src/RooBlindTools.cxx; src/RooBMixDecay.cxx; src/RooBreitWigner.cxx; src/RooBukinPdf.cxx; src/RooCBShape.cxx; src/RooCrystalBall.cxx; src/RooCFunction1Binding.cxx; src/RooCFunction2Binding.cxx; src/RooCFunction3Binding.cxx; src/RooCFunction4Binding.cxx; src/RooChebychev.cxx; src/RooChi2MCSModule.cxx; src/RooChiSquarePdf.cxx; src/RooDecay.cxx; src/RooDstD0BG.cxx; src/RooExponential.cxx; src/RooLegacyExpPoly.cxx; src/RooPowerSum.cxx; src/RooFunctor1DBinding.cxx; src/RooFunctorBinding.cxx; src/RooGamma.cxx; src/RooGaussian.cxx; src/RooGaussModel.cxx; src/RooGExpModel.cxx; src/RooHistConstraint.cxx; src/RooIntegralMorph.cxx; src/RooJeffreysPrior.cxx; src/RooKeysPdf.cxx; src/RooLagrangianMorphFunc.cxx; src/RooLandau.cxx; src/RooLognormal.cxx; src/RooMathCoreReg.cxx; src/RooMomentMorph.cxx; src/RooMomentMorphFunc.cxx; src/RooMomentMorphFuncND.cxx; src/RooMultiBinomial.cxx; src/RooNDKeysPdf.cxx; src/RooNonCPEigenDecay.cxx; src/RooNovosibirsk.cxx; src/RooParametricStepFunction.cxx; src/RooParamHistFunc.cxx; src/RooPoisson.cxx; src/RooPolynomial.cxx; src/RooSpline.cxx; src/RooStepFunction.cxx; src/RooTFnBinding.cxx; src/RooTFnPdfBinding.cxx; src/RooTMathReg.cxx; src/RooUnblindCPAsymVar.cxx; src/RooUnblindOffset.cxx; src/RooUnblindPrecision.cxx; src/RooUnblindUniform.cxx; src/RooUniform.cxx; src/RooVoigtian.cxx; src/RooJohnson.cxx; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LINKDEF; LinkDef1.h; LIBRARIES; RooBatchCompute; DEPENDENCIES; Core; RooFitCore; Tree; RIO; Matrix; MathCore; ${EXTRA_DICT_OPTS}; ). # For recent clang, this can facilitate auto-vectorisation.; # In RooFit, the errno side effect is not needed, anyway:; if(""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang""); target_compile_options(RooFit PUBLIC -fno-math-errno); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,roofit/roofit/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt:10386,Integrability,DEPEND,DEPENDENCIES,10386,"/RooStreamParser.cxx; src/RooStringVar.cxx; src/RooStudyManager.cxx; src/RooStudyPackage.cxx; src/RooSuperCategory.cxx; src/RooTObjWrap.cxx; src/RooThresholdCategory.cxx; src/RooTrace.cxx; src/RooTreeDataStore.cxx; src/RooTruthModel.cxx; src/RooUniformBinning.cxx; src/RooUnitTest.cxx; src/RooVectorDataStore.cxx; src/RooWorkspace.cxx; src/RooWrapperPdf.cxx; src/TestStatistics/ConstantTermsOptimizer.cxx; src/TestStatistics/LikelihoodGradientWrapper.cxx; src/TestStatistics/LikelihoodSerial.cxx; src/TestStatistics/LikelihoodWrapper.cxx; src/TestStatistics/MinuitFcnGrad.cxx; src/TestStatistics/RooAbsL.cxx; src/TestStatistics/RooBinnedL.cxx; src/TestStatistics/RooRealL.cxx; src/TestStatistics/RooSubsidiaryL.cxx; src/TestStatistics/RooSumL.cxx; src/TestStatistics/RooUnbinnedL.cxx; src/TestStatistics/buildLikelihood.cxx; src/TestStatistics/SharedOffset.cxx; ${LegacyEvalBackendSources}; ${RooFitMPTestStatisticsSources}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; RooBatchCompute; ${EXTRA_LIBRARIES}; DEPENDENCIES; Core; Hist; Graf; Matrix; Tree; Minuit; RIO; MathCore; Foam; Smatrix; ${EXTRA_DEPENDENCIES}; LINKDEF; inc/LinkDef.h; ${EXTRA_DICT_OPTS}; ). # The following definitions are PUBLIC so they can also be used in ROOT-internal tests. if(roofit_legacy_eval_backend); target_compile_definitions(RooFitCore PUBLIC ROOFIT_LEGACY_EVAL_BACKEND); endif(). if(roofit_multiprocess); target_compile_definitions(RooFitCore PUBLIC ROOFIT_MULTIPROCESS); endif(). if(clad); target_compile_definitions(RooFitCore PUBLIC ROOFIT_CLAD); endif(). if(cuda); target_compile_definitions(RooFitCore PUBLIC ROOFIT_CUDA); endif(). if(fftw3); target_compile_definitions(RooFitCore PUBLIC ROOFIT_MATH_FFTW3); endif(). # To avoid deprecation warnings when including old test statistics headers.; # RooFit has to include them to build the documentation.; target_compile_definitions(RooFitCore PUBLIC ROOFIT_BUILDS_ITSELF). target_include_directories(RooFitCore PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOUR",MatchSource.DOCS,roofit/roofitcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt:2561,Modifiability,Config,Config,2561,RooAbsSelfCachedPdf.h; RooAbsSelfCachedReal.h; RooAbsStudy.h; RooAddGenContext.h; RooAddModel.h; RooAddPdf.h; RooAddition.h; RooArgList.h; RooArgProxy.h; RooArgSet.h; RooBinSamplingPdf.h; RooBinWidthFunction.h; RooBinnedGenContext.h; RooBinning.h; RooBinningCategory.h; RooBrentRootFinder.h; RooCacheManager.h; RooCachedPdf.h; RooCachedReal.h; RooCategory.h; RooCategoryProxy.h; RooChangeTracker.h; RooClassFactory.h; RooCmdArg.h; RooCmdConfig.h; RooCollectionProxy.h; RooCompositeDataStore.h; RooConstVar.h; RooConstraintSum.h; RooConvCoefVar.h; RooConvGenContext.h; RooCurve.h; RooCustomizer.h; RooDLLSignificanceMCSModule.h; RooDataHist.h; RooDataHistSliceIter.h; RooDataProjBinding.h; RooDataSet.h; RooDerivative.h; RooDirItem.h; RooDouble.h; RooEffGenContext.h; RooEffProd.h; RooEfficiency.h; RooEllipse.h; RooErrorHandler.h; RooErrorVar.h; RooExpensiveObjectCache.h; RooExtendPdf.h; RooExtendedBinding.h; RooExtendedTerm.h; RooFFTConvPdf.h; RooFactoryWSTool.h; RooFirstMoment.h; RooFit.h; RooFit/Config.h; RooFit/Detail/CodeSquashContext.h; RooFit/Detail/MathFuncs.h; RooFit/Detail/NormalizationHelpers.h; RooFit/EvalContext.h; RooFit/Evaluator.h; RooFit/Floats.h; RooFit/ModelConfig.h; RooFit/TestStatistics/LikelihoodGradientWrapper.h; RooFit/TestStatistics/LikelihoodWrapper.h; RooFit/TestStatistics/RooAbsL.h; RooFit/TestStatistics/RooBinnedL.h; RooFit/TestStatistics/RooRealL.h; RooFit/TestStatistics/RooSubsidiaryL.h; RooFit/TestStatistics/RooSumL.h; RooFit/TestStatistics/RooUnbinnedL.h; RooFit/TestStatistics/buildLikelihood.h; RooFit/TestStatistics/SharedOffset.h; RooFitLegacy/RooCatTypeLegacy.h; RooFitLegacy/RooCategorySharedProperties.h; RooFitLegacy/RooTreeData.h; RooFitResult.h; RooFormulaVar.h; RooFracRemainder.h; RooFuncWrapper.h; RooFunctor.h; RooGenContext.h; RooGenFitStudy.h; RooGenericPdf.h; RooGlobalFunc.h; RooHelpers.h; RooHist.h; RooHistError.h; RooHistFunc.h; RooHistPdf.h; RooInvTransform.h; RooLinTransBinning.h; RooLinearCombination.h; RooLinearVar.h; RooLinkedLi,MatchSource.DOCS,roofit/roofitcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt:11090,Safety,avoid,avoid,11090," src/RooVectorDataStore.cxx; src/RooWorkspace.cxx; src/RooWrapperPdf.cxx; src/TestStatistics/ConstantTermsOptimizer.cxx; src/TestStatistics/LikelihoodGradientWrapper.cxx; src/TestStatistics/LikelihoodSerial.cxx; src/TestStatistics/LikelihoodWrapper.cxx; src/TestStatistics/MinuitFcnGrad.cxx; src/TestStatistics/RooAbsL.cxx; src/TestStatistics/RooBinnedL.cxx; src/TestStatistics/RooRealL.cxx; src/TestStatistics/RooSubsidiaryL.cxx; src/TestStatistics/RooSumL.cxx; src/TestStatistics/RooUnbinnedL.cxx; src/TestStatistics/buildLikelihood.cxx; src/TestStatistics/SharedOffset.cxx; ${LegacyEvalBackendSources}; ${RooFitMPTestStatisticsSources}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; RooBatchCompute; ${EXTRA_LIBRARIES}; DEPENDENCIES; Core; Hist; Graf; Matrix; Tree; Minuit; RIO; MathCore; Foam; Smatrix; ${EXTRA_DEPENDENCIES}; LINKDEF; inc/LinkDef.h; ${EXTRA_DICT_OPTS}; ). # The following definitions are PUBLIC so they can also be used in ROOT-internal tests. if(roofit_legacy_eval_backend); target_compile_definitions(RooFitCore PUBLIC ROOFIT_LEGACY_EVAL_BACKEND); endif(). if(roofit_multiprocess); target_compile_definitions(RooFitCore PUBLIC ROOFIT_MULTIPROCESS); endif(). if(clad); target_compile_definitions(RooFitCore PUBLIC ROOFIT_CLAD); endif(). if(cuda); target_compile_definitions(RooFitCore PUBLIC ROOFIT_CUDA); endif(). if(fftw3); target_compile_definitions(RooFitCore PUBLIC ROOFIT_MATH_FFTW3); endif(). # To avoid deprecation warnings when including old test statistics headers.; # RooFit has to include them to build the documentation.; target_compile_definitions(RooFitCore PUBLIC ROOFIT_BUILDS_ITSELF). target_include_directories(RooFitCore PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/res>). # For recent clang, this can facilitate auto-vectorisation.; # In RooFit, the errno side effect is not needed, anyway:; if(""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang""); target_compile_options(RooFitCore PUBLIC -fno-math-errno); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,roofit/roofitcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt:501,Testability,Test,TestStatistics,501,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT roofitcore package; # @author Pere Mato, CERN; ############################################################################. if(roofit_multiprocess); set(RooFitMPTestStatisticsSources src/TestStatistics/LikelihoodJob.cxx src/TestStatistics/LikelihoodGradientJob.cxx); list(APPEND EXTRA_LIBRARIES RooFitMultiProcess); list(APPEND EXTRA_DEPENDENCIES Minuit2); endif(). if(roofit_legacy_eval_backend); set(LegacyEvalBackendSources; src/BidirMMapPipe.cxx; src/BidirMMapPipe.h; src/RooAbsOptTestStatistic.cxx; src/RooAbsTestStatistic.cxx; src/RooChi2Var.cxx; src/RooNLLVar.cxx; src/RooRealMPFE.cxx; src/RooXYChi2Var.cxx; ); endif(). set (EXTRA_DICT_OPTS); if (runtime_cxxmodules AND WIN32); set (EXTRA_DICT_OPTS NO_CXXMODULE); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(RooFitCore; HEADERS; Roo1DTable.h; RooAICRegistry.h; RooAbsAnaConvPdf.h; RooAbsArg.h; RooAbsBinning.h; RooAbsCache.h; RooAbsCacheElement.h; RooAbsCachedPdf.h; RooAbsCachedReal.h; RooAbsCategory.h; RooAbsCategoryLValue.h; RooAbsCollection.h; RooAbsData.h; RooAbsDataHelper.h; RooAbsDataStore.h; RooAbsFunc.h; RooAbsGenContext.h; RooAbsHiddenReal.h; RooAbsIntegrator.h; RooAbsLValue.h; RooAbsMCStudyModule.h; RooAbsMoment.h; RooAbsPdf.h; RooAbsProxy.h; RooAbsReal.h; RooAbsRealLValue.h; RooAbsSelfCachedPdf.h; RooAbsSelfCachedReal.h; RooAbsStudy.h; RooAddGenContext.h; RooAddModel.h; RooAddPdf.h; RooAddition.h; RooArgList.h; RooArgProxy.h; RooArgSet.h; RooBinSamplingPdf.h; RooBinWidthFunction.h; RooBinnedGenContext.h; RooBinning.h; RooBinningCategory.h; RooBrentRootFinder.h; RooCacheManager.h; RooCachedPdf.h; RooCachedReal.h; RooCategory.h; RooCategoryProxy.h; RooChangeTracker.h; RooClassFactory.h; RooCmdArg.h; RooCmdConfi",MatchSource.DOCS,roofit/roofitcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt:538,Testability,Test,TestStatistics,538,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT roofitcore package; # @author Pere Mato, CERN; ############################################################################. if(roofit_multiprocess); set(RooFitMPTestStatisticsSources src/TestStatistics/LikelihoodJob.cxx src/TestStatistics/LikelihoodGradientJob.cxx); list(APPEND EXTRA_LIBRARIES RooFitMultiProcess); list(APPEND EXTRA_DEPENDENCIES Minuit2); endif(). if(roofit_legacy_eval_backend); set(LegacyEvalBackendSources; src/BidirMMapPipe.cxx; src/BidirMMapPipe.h; src/RooAbsOptTestStatistic.cxx; src/RooAbsTestStatistic.cxx; src/RooChi2Var.cxx; src/RooNLLVar.cxx; src/RooRealMPFE.cxx; src/RooXYChi2Var.cxx; ); endif(). set (EXTRA_DICT_OPTS); if (runtime_cxxmodules AND WIN32); set (EXTRA_DICT_OPTS NO_CXXMODULE); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(RooFitCore; HEADERS; Roo1DTable.h; RooAICRegistry.h; RooAbsAnaConvPdf.h; RooAbsArg.h; RooAbsBinning.h; RooAbsCache.h; RooAbsCacheElement.h; RooAbsCachedPdf.h; RooAbsCachedReal.h; RooAbsCategory.h; RooAbsCategoryLValue.h; RooAbsCollection.h; RooAbsData.h; RooAbsDataHelper.h; RooAbsDataStore.h; RooAbsFunc.h; RooAbsGenContext.h; RooAbsHiddenReal.h; RooAbsIntegrator.h; RooAbsLValue.h; RooAbsMCStudyModule.h; RooAbsMoment.h; RooAbsPdf.h; RooAbsProxy.h; RooAbsReal.h; RooAbsRealLValue.h; RooAbsSelfCachedPdf.h; RooAbsSelfCachedReal.h; RooAbsStudy.h; RooAddGenContext.h; RooAddModel.h; RooAddPdf.h; RooAddition.h; RooArgList.h; RooArgProxy.h; RooArgSet.h; RooBinSamplingPdf.h; RooBinWidthFunction.h; RooBinnedGenContext.h; RooBinning.h; RooBinningCategory.h; RooBrentRootFinder.h; RooCacheManager.h; RooCachedPdf.h; RooCachedReal.h; RooCategory.h; RooCategoryProxy.h; RooChangeTracker.h; RooClassFactory.h; RooCmdArg.h; RooCmdConfi",MatchSource.DOCS,roofit/roofitcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt:2759,Testability,Test,TestStatistics,2759,innedGenContext.h; RooBinning.h; RooBinningCategory.h; RooBrentRootFinder.h; RooCacheManager.h; RooCachedPdf.h; RooCachedReal.h; RooCategory.h; RooCategoryProxy.h; RooChangeTracker.h; RooClassFactory.h; RooCmdArg.h; RooCmdConfig.h; RooCollectionProxy.h; RooCompositeDataStore.h; RooConstVar.h; RooConstraintSum.h; RooConvCoefVar.h; RooConvGenContext.h; RooCurve.h; RooCustomizer.h; RooDLLSignificanceMCSModule.h; RooDataHist.h; RooDataHistSliceIter.h; RooDataProjBinding.h; RooDataSet.h; RooDerivative.h; RooDirItem.h; RooDouble.h; RooEffGenContext.h; RooEffProd.h; RooEfficiency.h; RooEllipse.h; RooErrorHandler.h; RooErrorVar.h; RooExpensiveObjectCache.h; RooExtendPdf.h; RooExtendedBinding.h; RooExtendedTerm.h; RooFFTConvPdf.h; RooFactoryWSTool.h; RooFirstMoment.h; RooFit.h; RooFit/Config.h; RooFit/Detail/CodeSquashContext.h; RooFit/Detail/MathFuncs.h; RooFit/Detail/NormalizationHelpers.h; RooFit/EvalContext.h; RooFit/Evaluator.h; RooFit/Floats.h; RooFit/ModelConfig.h; RooFit/TestStatistics/LikelihoodGradientWrapper.h; RooFit/TestStatistics/LikelihoodWrapper.h; RooFit/TestStatistics/RooAbsL.h; RooFit/TestStatistics/RooBinnedL.h; RooFit/TestStatistics/RooRealL.h; RooFit/TestStatistics/RooSubsidiaryL.h; RooFit/TestStatistics/RooSumL.h; RooFit/TestStatistics/RooUnbinnedL.h; RooFit/TestStatistics/buildLikelihood.h; RooFit/TestStatistics/SharedOffset.h; RooFitLegacy/RooCatTypeLegacy.h; RooFitLegacy/RooCategorySharedProperties.h; RooFitLegacy/RooTreeData.h; RooFitResult.h; RooFormulaVar.h; RooFracRemainder.h; RooFuncWrapper.h; RooFunctor.h; RooGenContext.h; RooGenFitStudy.h; RooGenericPdf.h; RooGlobalFunc.h; RooHelpers.h; RooHist.h; RooHistError.h; RooHistFunc.h; RooHistPdf.h; RooInvTransform.h; RooLinTransBinning.h; RooLinearCombination.h; RooLinearVar.h; RooLinkedList.h; RooLinkedListElem.h; RooLinkedListIter.h; RooListProxy.h; RooMCStudy.h; RooMappedCategory.h; RooMath.h; RooMinimizer.h; RooMoment.h; RooMsgService.h; RooMultiCategory.h; RooMultiVarGaussian.h; RooNameReg.h; Ro,MatchSource.DOCS,roofit/roofitcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt:2810,Testability,Test,TestStatistics,2810,gory.h; RooBrentRootFinder.h; RooCacheManager.h; RooCachedPdf.h; RooCachedReal.h; RooCategory.h; RooCategoryProxy.h; RooChangeTracker.h; RooClassFactory.h; RooCmdArg.h; RooCmdConfig.h; RooCollectionProxy.h; RooCompositeDataStore.h; RooConstVar.h; RooConstraintSum.h; RooConvCoefVar.h; RooConvGenContext.h; RooCurve.h; RooCustomizer.h; RooDLLSignificanceMCSModule.h; RooDataHist.h; RooDataHistSliceIter.h; RooDataProjBinding.h; RooDataSet.h; RooDerivative.h; RooDirItem.h; RooDouble.h; RooEffGenContext.h; RooEffProd.h; RooEfficiency.h; RooEllipse.h; RooErrorHandler.h; RooErrorVar.h; RooExpensiveObjectCache.h; RooExtendPdf.h; RooExtendedBinding.h; RooExtendedTerm.h; RooFFTConvPdf.h; RooFactoryWSTool.h; RooFirstMoment.h; RooFit.h; RooFit/Config.h; RooFit/Detail/CodeSquashContext.h; RooFit/Detail/MathFuncs.h; RooFit/Detail/NormalizationHelpers.h; RooFit/EvalContext.h; RooFit/Evaluator.h; RooFit/Floats.h; RooFit/ModelConfig.h; RooFit/TestStatistics/LikelihoodGradientWrapper.h; RooFit/TestStatistics/LikelihoodWrapper.h; RooFit/TestStatistics/RooAbsL.h; RooFit/TestStatistics/RooBinnedL.h; RooFit/TestStatistics/RooRealL.h; RooFit/TestStatistics/RooSubsidiaryL.h; RooFit/TestStatistics/RooSumL.h; RooFit/TestStatistics/RooUnbinnedL.h; RooFit/TestStatistics/buildLikelihood.h; RooFit/TestStatistics/SharedOffset.h; RooFitLegacy/RooCatTypeLegacy.h; RooFitLegacy/RooCategorySharedProperties.h; RooFitLegacy/RooTreeData.h; RooFitResult.h; RooFormulaVar.h; RooFracRemainder.h; RooFuncWrapper.h; RooFunctor.h; RooGenContext.h; RooGenFitStudy.h; RooGenericPdf.h; RooGlobalFunc.h; RooHelpers.h; RooHist.h; RooHistError.h; RooHistFunc.h; RooHistPdf.h; RooInvTransform.h; RooLinTransBinning.h; RooLinearCombination.h; RooLinearVar.h; RooLinkedList.h; RooLinkedListElem.h; RooLinkedListIter.h; RooListProxy.h; RooMCStudy.h; RooMappedCategory.h; RooMath.h; RooMinimizer.h; RooMoment.h; RooMsgService.h; RooMultiCategory.h; RooMultiVarGaussian.h; RooNameReg.h; RooNormSetCache.h; RooNumCdf.h; RooNumConvPdf.h; ,MatchSource.DOCS,roofit/roofitcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt:2853,Testability,Test,TestStatistics,2853,Manager.h; RooCachedPdf.h; RooCachedReal.h; RooCategory.h; RooCategoryProxy.h; RooChangeTracker.h; RooClassFactory.h; RooCmdArg.h; RooCmdConfig.h; RooCollectionProxy.h; RooCompositeDataStore.h; RooConstVar.h; RooConstraintSum.h; RooConvCoefVar.h; RooConvGenContext.h; RooCurve.h; RooCustomizer.h; RooDLLSignificanceMCSModule.h; RooDataHist.h; RooDataHistSliceIter.h; RooDataProjBinding.h; RooDataSet.h; RooDerivative.h; RooDirItem.h; RooDouble.h; RooEffGenContext.h; RooEffProd.h; RooEfficiency.h; RooEllipse.h; RooErrorHandler.h; RooErrorVar.h; RooExpensiveObjectCache.h; RooExtendPdf.h; RooExtendedBinding.h; RooExtendedTerm.h; RooFFTConvPdf.h; RooFactoryWSTool.h; RooFirstMoment.h; RooFit.h; RooFit/Config.h; RooFit/Detail/CodeSquashContext.h; RooFit/Detail/MathFuncs.h; RooFit/Detail/NormalizationHelpers.h; RooFit/EvalContext.h; RooFit/Evaluator.h; RooFit/Floats.h; RooFit/ModelConfig.h; RooFit/TestStatistics/LikelihoodGradientWrapper.h; RooFit/TestStatistics/LikelihoodWrapper.h; RooFit/TestStatistics/RooAbsL.h; RooFit/TestStatistics/RooBinnedL.h; RooFit/TestStatistics/RooRealL.h; RooFit/TestStatistics/RooSubsidiaryL.h; RooFit/TestStatistics/RooSumL.h; RooFit/TestStatistics/RooUnbinnedL.h; RooFit/TestStatistics/buildLikelihood.h; RooFit/TestStatistics/SharedOffset.h; RooFitLegacy/RooCatTypeLegacy.h; RooFitLegacy/RooCategorySharedProperties.h; RooFitLegacy/RooTreeData.h; RooFitResult.h; RooFormulaVar.h; RooFracRemainder.h; RooFuncWrapper.h; RooFunctor.h; RooGenContext.h; RooGenFitStudy.h; RooGenericPdf.h; RooGlobalFunc.h; RooHelpers.h; RooHist.h; RooHistError.h; RooHistFunc.h; RooHistPdf.h; RooInvTransform.h; RooLinTransBinning.h; RooLinearCombination.h; RooLinearVar.h; RooLinkedList.h; RooLinkedListElem.h; RooLinkedListIter.h; RooListProxy.h; RooMCStudy.h; RooMappedCategory.h; RooMath.h; RooMinimizer.h; RooMoment.h; RooMsgService.h; RooMultiCategory.h; RooMultiVarGaussian.h; RooNameReg.h; RooNormSetCache.h; RooNumCdf.h; RooNumConvPdf.h; RooNumConvolution.h; RooNumGenConfig.h,MatchSource.DOCS,roofit/roofitcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt:2886,Testability,Test,TestStatistics,2886,dReal.h; RooCategory.h; RooCategoryProxy.h; RooChangeTracker.h; RooClassFactory.h; RooCmdArg.h; RooCmdConfig.h; RooCollectionProxy.h; RooCompositeDataStore.h; RooConstVar.h; RooConstraintSum.h; RooConvCoefVar.h; RooConvGenContext.h; RooCurve.h; RooCustomizer.h; RooDLLSignificanceMCSModule.h; RooDataHist.h; RooDataHistSliceIter.h; RooDataProjBinding.h; RooDataSet.h; RooDerivative.h; RooDirItem.h; RooDouble.h; RooEffGenContext.h; RooEffProd.h; RooEfficiency.h; RooEllipse.h; RooErrorHandler.h; RooErrorVar.h; RooExpensiveObjectCache.h; RooExtendPdf.h; RooExtendedBinding.h; RooExtendedTerm.h; RooFFTConvPdf.h; RooFactoryWSTool.h; RooFirstMoment.h; RooFit.h; RooFit/Config.h; RooFit/Detail/CodeSquashContext.h; RooFit/Detail/MathFuncs.h; RooFit/Detail/NormalizationHelpers.h; RooFit/EvalContext.h; RooFit/Evaluator.h; RooFit/Floats.h; RooFit/ModelConfig.h; RooFit/TestStatistics/LikelihoodGradientWrapper.h; RooFit/TestStatistics/LikelihoodWrapper.h; RooFit/TestStatistics/RooAbsL.h; RooFit/TestStatistics/RooBinnedL.h; RooFit/TestStatistics/RooRealL.h; RooFit/TestStatistics/RooSubsidiaryL.h; RooFit/TestStatistics/RooSumL.h; RooFit/TestStatistics/RooUnbinnedL.h; RooFit/TestStatistics/buildLikelihood.h; RooFit/TestStatistics/SharedOffset.h; RooFitLegacy/RooCatTypeLegacy.h; RooFitLegacy/RooCategorySharedProperties.h; RooFitLegacy/RooTreeData.h; RooFitResult.h; RooFormulaVar.h; RooFracRemainder.h; RooFuncWrapper.h; RooFunctor.h; RooGenContext.h; RooGenFitStudy.h; RooGenericPdf.h; RooGlobalFunc.h; RooHelpers.h; RooHist.h; RooHistError.h; RooHistFunc.h; RooHistPdf.h; RooInvTransform.h; RooLinTransBinning.h; RooLinearCombination.h; RooLinearVar.h; RooLinkedList.h; RooLinkedListElem.h; RooLinkedListIter.h; RooListProxy.h; RooMCStudy.h; RooMappedCategory.h; RooMath.h; RooMinimizer.h; RooMoment.h; RooMsgService.h; RooMultiCategory.h; RooMultiVarGaussian.h; RooNameReg.h; RooNormSetCache.h; RooNumCdf.h; RooNumConvPdf.h; RooNumConvolution.h; RooNumGenConfig.h; RooNumIntConfig.h; RooNumIntFact,MatchSource.DOCS,roofit/roofitcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt:2922,Testability,Test,TestStatistics,2922,Proxy.h; RooChangeTracker.h; RooClassFactory.h; RooCmdArg.h; RooCmdConfig.h; RooCollectionProxy.h; RooCompositeDataStore.h; RooConstVar.h; RooConstraintSum.h; RooConvCoefVar.h; RooConvGenContext.h; RooCurve.h; RooCustomizer.h; RooDLLSignificanceMCSModule.h; RooDataHist.h; RooDataHistSliceIter.h; RooDataProjBinding.h; RooDataSet.h; RooDerivative.h; RooDirItem.h; RooDouble.h; RooEffGenContext.h; RooEffProd.h; RooEfficiency.h; RooEllipse.h; RooErrorHandler.h; RooErrorVar.h; RooExpensiveObjectCache.h; RooExtendPdf.h; RooExtendedBinding.h; RooExtendedTerm.h; RooFFTConvPdf.h; RooFactoryWSTool.h; RooFirstMoment.h; RooFit.h; RooFit/Config.h; RooFit/Detail/CodeSquashContext.h; RooFit/Detail/MathFuncs.h; RooFit/Detail/NormalizationHelpers.h; RooFit/EvalContext.h; RooFit/Evaluator.h; RooFit/Floats.h; RooFit/ModelConfig.h; RooFit/TestStatistics/LikelihoodGradientWrapper.h; RooFit/TestStatistics/LikelihoodWrapper.h; RooFit/TestStatistics/RooAbsL.h; RooFit/TestStatistics/RooBinnedL.h; RooFit/TestStatistics/RooRealL.h; RooFit/TestStatistics/RooSubsidiaryL.h; RooFit/TestStatistics/RooSumL.h; RooFit/TestStatistics/RooUnbinnedL.h; RooFit/TestStatistics/buildLikelihood.h; RooFit/TestStatistics/SharedOffset.h; RooFitLegacy/RooCatTypeLegacy.h; RooFitLegacy/RooCategorySharedProperties.h; RooFitLegacy/RooTreeData.h; RooFitResult.h; RooFormulaVar.h; RooFracRemainder.h; RooFuncWrapper.h; RooFunctor.h; RooGenContext.h; RooGenFitStudy.h; RooGenericPdf.h; RooGlobalFunc.h; RooHelpers.h; RooHist.h; RooHistError.h; RooHistFunc.h; RooHistPdf.h; RooInvTransform.h; RooLinTransBinning.h; RooLinearCombination.h; RooLinearVar.h; RooLinkedList.h; RooLinkedListElem.h; RooLinkedListIter.h; RooListProxy.h; RooMCStudy.h; RooMappedCategory.h; RooMath.h; RooMinimizer.h; RooMoment.h; RooMsgService.h; RooMultiCategory.h; RooMultiVarGaussian.h; RooNameReg.h; RooNormSetCache.h; RooNumCdf.h; RooNumConvPdf.h; RooNumConvolution.h; RooNumGenConfig.h; RooNumIntConfig.h; RooNumIntFactory.h; RooNumRunningInt.h; RooNumbe,MatchSource.DOCS,roofit/roofitcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt:2956,Testability,Test,TestStatistics,2956,Factory.h; RooCmdArg.h; RooCmdConfig.h; RooCollectionProxy.h; RooCompositeDataStore.h; RooConstVar.h; RooConstraintSum.h; RooConvCoefVar.h; RooConvGenContext.h; RooCurve.h; RooCustomizer.h; RooDLLSignificanceMCSModule.h; RooDataHist.h; RooDataHistSliceIter.h; RooDataProjBinding.h; RooDataSet.h; RooDerivative.h; RooDirItem.h; RooDouble.h; RooEffGenContext.h; RooEffProd.h; RooEfficiency.h; RooEllipse.h; RooErrorHandler.h; RooErrorVar.h; RooExpensiveObjectCache.h; RooExtendPdf.h; RooExtendedBinding.h; RooExtendedTerm.h; RooFFTConvPdf.h; RooFactoryWSTool.h; RooFirstMoment.h; RooFit.h; RooFit/Config.h; RooFit/Detail/CodeSquashContext.h; RooFit/Detail/MathFuncs.h; RooFit/Detail/NormalizationHelpers.h; RooFit/EvalContext.h; RooFit/Evaluator.h; RooFit/Floats.h; RooFit/ModelConfig.h; RooFit/TestStatistics/LikelihoodGradientWrapper.h; RooFit/TestStatistics/LikelihoodWrapper.h; RooFit/TestStatistics/RooAbsL.h; RooFit/TestStatistics/RooBinnedL.h; RooFit/TestStatistics/RooRealL.h; RooFit/TestStatistics/RooSubsidiaryL.h; RooFit/TestStatistics/RooSumL.h; RooFit/TestStatistics/RooUnbinnedL.h; RooFit/TestStatistics/buildLikelihood.h; RooFit/TestStatistics/SharedOffset.h; RooFitLegacy/RooCatTypeLegacy.h; RooFitLegacy/RooCategorySharedProperties.h; RooFitLegacy/RooTreeData.h; RooFitResult.h; RooFormulaVar.h; RooFracRemainder.h; RooFuncWrapper.h; RooFunctor.h; RooGenContext.h; RooGenFitStudy.h; RooGenericPdf.h; RooGlobalFunc.h; RooHelpers.h; RooHist.h; RooHistError.h; RooHistFunc.h; RooHistPdf.h; RooInvTransform.h; RooLinTransBinning.h; RooLinearCombination.h; RooLinearVar.h; RooLinkedList.h; RooLinkedListElem.h; RooLinkedListIter.h; RooListProxy.h; RooMCStudy.h; RooMappedCategory.h; RooMath.h; RooMinimizer.h; RooMoment.h; RooMsgService.h; RooMultiCategory.h; RooMultiVarGaussian.h; RooNameReg.h; RooNormSetCache.h; RooNumCdf.h; RooNumConvPdf.h; RooNumConvolution.h; RooNumGenConfig.h; RooNumIntConfig.h; RooNumIntFactory.h; RooNumRunningInt.h; RooNumber.h; RooObjCacheManager.h; RooParamBi,MatchSource.DOCS,roofit/roofitcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt:2996,Testability,Test,TestStatistics,2996,.h; RooCollectionProxy.h; RooCompositeDataStore.h; RooConstVar.h; RooConstraintSum.h; RooConvCoefVar.h; RooConvGenContext.h; RooCurve.h; RooCustomizer.h; RooDLLSignificanceMCSModule.h; RooDataHist.h; RooDataHistSliceIter.h; RooDataProjBinding.h; RooDataSet.h; RooDerivative.h; RooDirItem.h; RooDouble.h; RooEffGenContext.h; RooEffProd.h; RooEfficiency.h; RooEllipse.h; RooErrorHandler.h; RooErrorVar.h; RooExpensiveObjectCache.h; RooExtendPdf.h; RooExtendedBinding.h; RooExtendedTerm.h; RooFFTConvPdf.h; RooFactoryWSTool.h; RooFirstMoment.h; RooFit.h; RooFit/Config.h; RooFit/Detail/CodeSquashContext.h; RooFit/Detail/MathFuncs.h; RooFit/Detail/NormalizationHelpers.h; RooFit/EvalContext.h; RooFit/Evaluator.h; RooFit/Floats.h; RooFit/ModelConfig.h; RooFit/TestStatistics/LikelihoodGradientWrapper.h; RooFit/TestStatistics/LikelihoodWrapper.h; RooFit/TestStatistics/RooAbsL.h; RooFit/TestStatistics/RooBinnedL.h; RooFit/TestStatistics/RooRealL.h; RooFit/TestStatistics/RooSubsidiaryL.h; RooFit/TestStatistics/RooSumL.h; RooFit/TestStatistics/RooUnbinnedL.h; RooFit/TestStatistics/buildLikelihood.h; RooFit/TestStatistics/SharedOffset.h; RooFitLegacy/RooCatTypeLegacy.h; RooFitLegacy/RooCategorySharedProperties.h; RooFitLegacy/RooTreeData.h; RooFitResult.h; RooFormulaVar.h; RooFracRemainder.h; RooFuncWrapper.h; RooFunctor.h; RooGenContext.h; RooGenFitStudy.h; RooGenericPdf.h; RooGlobalFunc.h; RooHelpers.h; RooHist.h; RooHistError.h; RooHistFunc.h; RooHistPdf.h; RooInvTransform.h; RooLinTransBinning.h; RooLinearCombination.h; RooLinearVar.h; RooLinkedList.h; RooLinkedListElem.h; RooLinkedListIter.h; RooListProxy.h; RooMCStudy.h; RooMappedCategory.h; RooMath.h; RooMinimizer.h; RooMoment.h; RooMsgService.h; RooMultiCategory.h; RooMultiVarGaussian.h; RooNameReg.h; RooNormSetCache.h; RooNumCdf.h; RooNumConvPdf.h; RooNumConvolution.h; RooNumGenConfig.h; RooNumIntConfig.h; RooNumIntFactory.h; RooNumRunningInt.h; RooNumber.h; RooObjCacheManager.h; RooParamBinning.h; RooPlot.h; RooPlotable.h; Ro,MatchSource.DOCS,roofit/roofitcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt:3029,Testability,Test,TestStatistics,3029,teDataStore.h; RooConstVar.h; RooConstraintSum.h; RooConvCoefVar.h; RooConvGenContext.h; RooCurve.h; RooCustomizer.h; RooDLLSignificanceMCSModule.h; RooDataHist.h; RooDataHistSliceIter.h; RooDataProjBinding.h; RooDataSet.h; RooDerivative.h; RooDirItem.h; RooDouble.h; RooEffGenContext.h; RooEffProd.h; RooEfficiency.h; RooEllipse.h; RooErrorHandler.h; RooErrorVar.h; RooExpensiveObjectCache.h; RooExtendPdf.h; RooExtendedBinding.h; RooExtendedTerm.h; RooFFTConvPdf.h; RooFactoryWSTool.h; RooFirstMoment.h; RooFit.h; RooFit/Config.h; RooFit/Detail/CodeSquashContext.h; RooFit/Detail/MathFuncs.h; RooFit/Detail/NormalizationHelpers.h; RooFit/EvalContext.h; RooFit/Evaluator.h; RooFit/Floats.h; RooFit/ModelConfig.h; RooFit/TestStatistics/LikelihoodGradientWrapper.h; RooFit/TestStatistics/LikelihoodWrapper.h; RooFit/TestStatistics/RooAbsL.h; RooFit/TestStatistics/RooBinnedL.h; RooFit/TestStatistics/RooRealL.h; RooFit/TestStatistics/RooSubsidiaryL.h; RooFit/TestStatistics/RooSumL.h; RooFit/TestStatistics/RooUnbinnedL.h; RooFit/TestStatistics/buildLikelihood.h; RooFit/TestStatistics/SharedOffset.h; RooFitLegacy/RooCatTypeLegacy.h; RooFitLegacy/RooCategorySharedProperties.h; RooFitLegacy/RooTreeData.h; RooFitResult.h; RooFormulaVar.h; RooFracRemainder.h; RooFuncWrapper.h; RooFunctor.h; RooGenContext.h; RooGenFitStudy.h; RooGenericPdf.h; RooGlobalFunc.h; RooHelpers.h; RooHist.h; RooHistError.h; RooHistFunc.h; RooHistPdf.h; RooInvTransform.h; RooLinTransBinning.h; RooLinearCombination.h; RooLinearVar.h; RooLinkedList.h; RooLinkedListElem.h; RooLinkedListIter.h; RooListProxy.h; RooMCStudy.h; RooMappedCategory.h; RooMath.h; RooMinimizer.h; RooMoment.h; RooMsgService.h; RooMultiCategory.h; RooMultiVarGaussian.h; RooNameReg.h; RooNormSetCache.h; RooNumCdf.h; RooNumConvPdf.h; RooNumConvolution.h; RooNumGenConfig.h; RooNumIntConfig.h; RooNumIntFactory.h; RooNumRunningInt.h; RooNumber.h; RooObjCacheManager.h; RooParamBinning.h; RooPlot.h; RooPlotable.h; RooPolyFunc.h; RooPolyVar.h; RooPrint,MatchSource.DOCS,roofit/roofitcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt:3067,Testability,Test,TestStatistics,3067,aintSum.h; RooConvCoefVar.h; RooConvGenContext.h; RooCurve.h; RooCustomizer.h; RooDLLSignificanceMCSModule.h; RooDataHist.h; RooDataHistSliceIter.h; RooDataProjBinding.h; RooDataSet.h; RooDerivative.h; RooDirItem.h; RooDouble.h; RooEffGenContext.h; RooEffProd.h; RooEfficiency.h; RooEllipse.h; RooErrorHandler.h; RooErrorVar.h; RooExpensiveObjectCache.h; RooExtendPdf.h; RooExtendedBinding.h; RooExtendedTerm.h; RooFFTConvPdf.h; RooFactoryWSTool.h; RooFirstMoment.h; RooFit.h; RooFit/Config.h; RooFit/Detail/CodeSquashContext.h; RooFit/Detail/MathFuncs.h; RooFit/Detail/NormalizationHelpers.h; RooFit/EvalContext.h; RooFit/Evaluator.h; RooFit/Floats.h; RooFit/ModelConfig.h; RooFit/TestStatistics/LikelihoodGradientWrapper.h; RooFit/TestStatistics/LikelihoodWrapper.h; RooFit/TestStatistics/RooAbsL.h; RooFit/TestStatistics/RooBinnedL.h; RooFit/TestStatistics/RooRealL.h; RooFit/TestStatistics/RooSubsidiaryL.h; RooFit/TestStatistics/RooSumL.h; RooFit/TestStatistics/RooUnbinnedL.h; RooFit/TestStatistics/buildLikelihood.h; RooFit/TestStatistics/SharedOffset.h; RooFitLegacy/RooCatTypeLegacy.h; RooFitLegacy/RooCategorySharedProperties.h; RooFitLegacy/RooTreeData.h; RooFitResult.h; RooFormulaVar.h; RooFracRemainder.h; RooFuncWrapper.h; RooFunctor.h; RooGenContext.h; RooGenFitStudy.h; RooGenericPdf.h; RooGlobalFunc.h; RooHelpers.h; RooHist.h; RooHistError.h; RooHistFunc.h; RooHistPdf.h; RooInvTransform.h; RooLinTransBinning.h; RooLinearCombination.h; RooLinearVar.h; RooLinkedList.h; RooLinkedListElem.h; RooLinkedListIter.h; RooListProxy.h; RooMCStudy.h; RooMappedCategory.h; RooMath.h; RooMinimizer.h; RooMoment.h; RooMsgService.h; RooMultiCategory.h; RooMultiVarGaussian.h; RooNameReg.h; RooNormSetCache.h; RooNumCdf.h; RooNumConvPdf.h; RooNumConvolution.h; RooNumGenConfig.h; RooNumIntConfig.h; RooNumIntFactory.h; RooNumRunningInt.h; RooNumber.h; RooObjCacheManager.h; RooParamBinning.h; RooPlot.h; RooPlotable.h; RooPolyFunc.h; RooPolyVar.h; RooPrintable.h; RooProdGenContext.h; RooProdPdf.,MatchSource.DOCS,roofit/roofitcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt:3108,Testability,Test,TestStatistics,3108,ontext.h; RooCurve.h; RooCustomizer.h; RooDLLSignificanceMCSModule.h; RooDataHist.h; RooDataHistSliceIter.h; RooDataProjBinding.h; RooDataSet.h; RooDerivative.h; RooDirItem.h; RooDouble.h; RooEffGenContext.h; RooEffProd.h; RooEfficiency.h; RooEllipse.h; RooErrorHandler.h; RooErrorVar.h; RooExpensiveObjectCache.h; RooExtendPdf.h; RooExtendedBinding.h; RooExtendedTerm.h; RooFFTConvPdf.h; RooFactoryWSTool.h; RooFirstMoment.h; RooFit.h; RooFit/Config.h; RooFit/Detail/CodeSquashContext.h; RooFit/Detail/MathFuncs.h; RooFit/Detail/NormalizationHelpers.h; RooFit/EvalContext.h; RooFit/Evaluator.h; RooFit/Floats.h; RooFit/ModelConfig.h; RooFit/TestStatistics/LikelihoodGradientWrapper.h; RooFit/TestStatistics/LikelihoodWrapper.h; RooFit/TestStatistics/RooAbsL.h; RooFit/TestStatistics/RooBinnedL.h; RooFit/TestStatistics/RooRealL.h; RooFit/TestStatistics/RooSubsidiaryL.h; RooFit/TestStatistics/RooSumL.h; RooFit/TestStatistics/RooUnbinnedL.h; RooFit/TestStatistics/buildLikelihood.h; RooFit/TestStatistics/SharedOffset.h; RooFitLegacy/RooCatTypeLegacy.h; RooFitLegacy/RooCategorySharedProperties.h; RooFitLegacy/RooTreeData.h; RooFitResult.h; RooFormulaVar.h; RooFracRemainder.h; RooFuncWrapper.h; RooFunctor.h; RooGenContext.h; RooGenFitStudy.h; RooGenericPdf.h; RooGlobalFunc.h; RooHelpers.h; RooHist.h; RooHistError.h; RooHistFunc.h; RooHistPdf.h; RooInvTransform.h; RooLinTransBinning.h; RooLinearCombination.h; RooLinearVar.h; RooLinkedList.h; RooLinkedListElem.h; RooLinkedListIter.h; RooListProxy.h; RooMCStudy.h; RooMappedCategory.h; RooMath.h; RooMinimizer.h; RooMoment.h; RooMsgService.h; RooMultiCategory.h; RooMultiVarGaussian.h; RooNameReg.h; RooNormSetCache.h; RooNumCdf.h; RooNumConvPdf.h; RooNumConvolution.h; RooNumGenConfig.h; RooNumIntConfig.h; RooNumIntFactory.h; RooNumRunningInt.h; RooNumber.h; RooObjCacheManager.h; RooParamBinning.h; RooPlot.h; RooPlotable.h; RooPolyFunc.h; RooPolyVar.h; RooPrintable.h; RooProdGenContext.h; RooProdPdf.h; RooProduct.h; RooProfileLL.h; RooPro,MatchSource.DOCS,roofit/roofitcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt:9734,Testability,Test,TestStatistics,9734,"or.cxx; src/RooPullVar.cxx; src/RooQuasiRandomGenerator.cxx; src/RooRandom.cxx; src/RooRandomizeParamMCSModule.cxx; src/RooRangeBinning.cxx; src/RooRangeBoolean.cxx; src/RooRatio.cxx; src/RooRealBinding.cxx; src/RooRealConstant.cxx; src/RooRealIntegral.cxx; src/RooRealSumFunc.cxx; src/RooRealSumPdf.cxx; src/RooRealVar.cxx; src/RooRecursiveFraction.cxx; src/RooResolutionModel.cxx; src/RooRombergIntegrator.cxx; src/RooSTLRefCountList.cxx; src/RooSecondMoment.cxx; src/RooSentinel.cxx; src/RooSharedProperties.cxx; src/RooSimGenContext.cxx; src/RooSimSplitGenContext.cxx; src/RooSimWSTool.cxx; src/RooSimultaneous.cxx; src/RooStreamParser.cxx; src/RooStringVar.cxx; src/RooStudyManager.cxx; src/RooStudyPackage.cxx; src/RooSuperCategory.cxx; src/RooTObjWrap.cxx; src/RooThresholdCategory.cxx; src/RooTrace.cxx; src/RooTreeDataStore.cxx; src/RooTruthModel.cxx; src/RooUniformBinning.cxx; src/RooUnitTest.cxx; src/RooVectorDataStore.cxx; src/RooWorkspace.cxx; src/RooWrapperPdf.cxx; src/TestStatistics/ConstantTermsOptimizer.cxx; src/TestStatistics/LikelihoodGradientWrapper.cxx; src/TestStatistics/LikelihoodSerial.cxx; src/TestStatistics/LikelihoodWrapper.cxx; src/TestStatistics/MinuitFcnGrad.cxx; src/TestStatistics/RooAbsL.cxx; src/TestStatistics/RooBinnedL.cxx; src/TestStatistics/RooRealL.cxx; src/TestStatistics/RooSubsidiaryL.cxx; src/TestStatistics/RooSumL.cxx; src/TestStatistics/RooUnbinnedL.cxx; src/TestStatistics/buildLikelihood.cxx; src/TestStatistics/SharedOffset.cxx; ${LegacyEvalBackendSources}; ${RooFitMPTestStatisticsSources}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; RooBatchCompute; ${EXTRA_LIBRARIES}; DEPENDENCIES; Core; Hist; Graf; Matrix; Tree; Minuit; RIO; MathCore; Foam; Smatrix; ${EXTRA_DEPENDENCIES}; LINKDEF; inc/LinkDef.h; ${EXTRA_DICT_OPTS}; ). # The following definitions are PUBLIC so they can also be used in ROOT-internal tests. if(roofit_legacy_eval_backend); target_compile_definitions(RooFitCore PUBLIC ROOFIT_LEGACY_EVAL_BACKEND); endif(). if(roo",MatchSource.DOCS,roofit/roofitcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt:9781,Testability,Test,TestStatistics,9781,"erator.cxx; src/RooRandom.cxx; src/RooRandomizeParamMCSModule.cxx; src/RooRangeBinning.cxx; src/RooRangeBoolean.cxx; src/RooRatio.cxx; src/RooRealBinding.cxx; src/RooRealConstant.cxx; src/RooRealIntegral.cxx; src/RooRealSumFunc.cxx; src/RooRealSumPdf.cxx; src/RooRealVar.cxx; src/RooRecursiveFraction.cxx; src/RooResolutionModel.cxx; src/RooRombergIntegrator.cxx; src/RooSTLRefCountList.cxx; src/RooSecondMoment.cxx; src/RooSentinel.cxx; src/RooSharedProperties.cxx; src/RooSimGenContext.cxx; src/RooSimSplitGenContext.cxx; src/RooSimWSTool.cxx; src/RooSimultaneous.cxx; src/RooStreamParser.cxx; src/RooStringVar.cxx; src/RooStudyManager.cxx; src/RooStudyPackage.cxx; src/RooSuperCategory.cxx; src/RooTObjWrap.cxx; src/RooThresholdCategory.cxx; src/RooTrace.cxx; src/RooTreeDataStore.cxx; src/RooTruthModel.cxx; src/RooUniformBinning.cxx; src/RooUnitTest.cxx; src/RooVectorDataStore.cxx; src/RooWorkspace.cxx; src/RooWrapperPdf.cxx; src/TestStatistics/ConstantTermsOptimizer.cxx; src/TestStatistics/LikelihoodGradientWrapper.cxx; src/TestStatistics/LikelihoodSerial.cxx; src/TestStatistics/LikelihoodWrapper.cxx; src/TestStatistics/MinuitFcnGrad.cxx; src/TestStatistics/RooAbsL.cxx; src/TestStatistics/RooBinnedL.cxx; src/TestStatistics/RooRealL.cxx; src/TestStatistics/RooSubsidiaryL.cxx; src/TestStatistics/RooSumL.cxx; src/TestStatistics/RooUnbinnedL.cxx; src/TestStatistics/buildLikelihood.cxx; src/TestStatistics/SharedOffset.cxx; ${LegacyEvalBackendSources}; ${RooFitMPTestStatisticsSources}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; RooBatchCompute; ${EXTRA_LIBRARIES}; DEPENDENCIES; Core; Hist; Graf; Matrix; Tree; Minuit; RIO; MathCore; Foam; Smatrix; ${EXTRA_DEPENDENCIES}; LINKDEF; inc/LinkDef.h; ${EXTRA_DICT_OPTS}; ). # The following definitions are PUBLIC so they can also be used in ROOT-internal tests. if(roofit_legacy_eval_backend); target_compile_definitions(RooFitCore PUBLIC ROOFIT_LEGACY_EVAL_BACKEND); endif(). if(roofit_multiprocess); target_compile_definitions(Ro",MatchSource.DOCS,roofit/roofitcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt:9831,Testability,Test,TestStatistics,9831,"zeParamMCSModule.cxx; src/RooRangeBinning.cxx; src/RooRangeBoolean.cxx; src/RooRatio.cxx; src/RooRealBinding.cxx; src/RooRealConstant.cxx; src/RooRealIntegral.cxx; src/RooRealSumFunc.cxx; src/RooRealSumPdf.cxx; src/RooRealVar.cxx; src/RooRecursiveFraction.cxx; src/RooResolutionModel.cxx; src/RooRombergIntegrator.cxx; src/RooSTLRefCountList.cxx; src/RooSecondMoment.cxx; src/RooSentinel.cxx; src/RooSharedProperties.cxx; src/RooSimGenContext.cxx; src/RooSimSplitGenContext.cxx; src/RooSimWSTool.cxx; src/RooSimultaneous.cxx; src/RooStreamParser.cxx; src/RooStringVar.cxx; src/RooStudyManager.cxx; src/RooStudyPackage.cxx; src/RooSuperCategory.cxx; src/RooTObjWrap.cxx; src/RooThresholdCategory.cxx; src/RooTrace.cxx; src/RooTreeDataStore.cxx; src/RooTruthModel.cxx; src/RooUniformBinning.cxx; src/RooUnitTest.cxx; src/RooVectorDataStore.cxx; src/RooWorkspace.cxx; src/RooWrapperPdf.cxx; src/TestStatistics/ConstantTermsOptimizer.cxx; src/TestStatistics/LikelihoodGradientWrapper.cxx; src/TestStatistics/LikelihoodSerial.cxx; src/TestStatistics/LikelihoodWrapper.cxx; src/TestStatistics/MinuitFcnGrad.cxx; src/TestStatistics/RooAbsL.cxx; src/TestStatistics/RooBinnedL.cxx; src/TestStatistics/RooRealL.cxx; src/TestStatistics/RooSubsidiaryL.cxx; src/TestStatistics/RooSumL.cxx; src/TestStatistics/RooUnbinnedL.cxx; src/TestStatistics/buildLikelihood.cxx; src/TestStatistics/SharedOffset.cxx; ${LegacyEvalBackendSources}; ${RooFitMPTestStatisticsSources}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; RooBatchCompute; ${EXTRA_LIBRARIES}; DEPENDENCIES; Core; Hist; Graf; Matrix; Tree; Minuit; RIO; MathCore; Foam; Smatrix; ${EXTRA_DEPENDENCIES}; LINKDEF; inc/LinkDef.h; ${EXTRA_DICT_OPTS}; ). # The following definitions are PUBLIC so they can also be used in ROOT-internal tests. if(roofit_legacy_eval_backend); target_compile_definitions(RooFitCore PUBLIC ROOFIT_LEGACY_EVAL_BACKEND); endif(). if(roofit_multiprocess); target_compile_definitions(RooFitCore PUBLIC ROOFIT_MULTIPROCESS); endif().",MatchSource.DOCS,roofit/roofitcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt:9872,Testability,Test,TestStatistics,9872,"cxx; src/RooRangeBoolean.cxx; src/RooRatio.cxx; src/RooRealBinding.cxx; src/RooRealConstant.cxx; src/RooRealIntegral.cxx; src/RooRealSumFunc.cxx; src/RooRealSumPdf.cxx; src/RooRealVar.cxx; src/RooRecursiveFraction.cxx; src/RooResolutionModel.cxx; src/RooRombergIntegrator.cxx; src/RooSTLRefCountList.cxx; src/RooSecondMoment.cxx; src/RooSentinel.cxx; src/RooSharedProperties.cxx; src/RooSimGenContext.cxx; src/RooSimSplitGenContext.cxx; src/RooSimWSTool.cxx; src/RooSimultaneous.cxx; src/RooStreamParser.cxx; src/RooStringVar.cxx; src/RooStudyManager.cxx; src/RooStudyPackage.cxx; src/RooSuperCategory.cxx; src/RooTObjWrap.cxx; src/RooThresholdCategory.cxx; src/RooTrace.cxx; src/RooTreeDataStore.cxx; src/RooTruthModel.cxx; src/RooUniformBinning.cxx; src/RooUnitTest.cxx; src/RooVectorDataStore.cxx; src/RooWorkspace.cxx; src/RooWrapperPdf.cxx; src/TestStatistics/ConstantTermsOptimizer.cxx; src/TestStatistics/LikelihoodGradientWrapper.cxx; src/TestStatistics/LikelihoodSerial.cxx; src/TestStatistics/LikelihoodWrapper.cxx; src/TestStatistics/MinuitFcnGrad.cxx; src/TestStatistics/RooAbsL.cxx; src/TestStatistics/RooBinnedL.cxx; src/TestStatistics/RooRealL.cxx; src/TestStatistics/RooSubsidiaryL.cxx; src/TestStatistics/RooSumL.cxx; src/TestStatistics/RooUnbinnedL.cxx; src/TestStatistics/buildLikelihood.cxx; src/TestStatistics/SharedOffset.cxx; ${LegacyEvalBackendSources}; ${RooFitMPTestStatisticsSources}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; RooBatchCompute; ${EXTRA_LIBRARIES}; DEPENDENCIES; Core; Hist; Graf; Matrix; Tree; Minuit; RIO; MathCore; Foam; Smatrix; ${EXTRA_DEPENDENCIES}; LINKDEF; inc/LinkDef.h; ${EXTRA_DICT_OPTS}; ). # The following definitions are PUBLIC so they can also be used in ROOT-internal tests. if(roofit_legacy_eval_backend); target_compile_definitions(RooFitCore PUBLIC ROOFIT_LEGACY_EVAL_BACKEND); endif(). if(roofit_multiprocess); target_compile_definitions(RooFitCore PUBLIC ROOFIT_MULTIPROCESS); endif(). if(clad); target_compile_definitions(Roo",MatchSource.DOCS,roofit/roofitcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt:9914,Testability,Test,TestStatistics,9914,"io.cxx; src/RooRealBinding.cxx; src/RooRealConstant.cxx; src/RooRealIntegral.cxx; src/RooRealSumFunc.cxx; src/RooRealSumPdf.cxx; src/RooRealVar.cxx; src/RooRecursiveFraction.cxx; src/RooResolutionModel.cxx; src/RooRombergIntegrator.cxx; src/RooSTLRefCountList.cxx; src/RooSecondMoment.cxx; src/RooSentinel.cxx; src/RooSharedProperties.cxx; src/RooSimGenContext.cxx; src/RooSimSplitGenContext.cxx; src/RooSimWSTool.cxx; src/RooSimultaneous.cxx; src/RooStreamParser.cxx; src/RooStringVar.cxx; src/RooStudyManager.cxx; src/RooStudyPackage.cxx; src/RooSuperCategory.cxx; src/RooTObjWrap.cxx; src/RooThresholdCategory.cxx; src/RooTrace.cxx; src/RooTreeDataStore.cxx; src/RooTruthModel.cxx; src/RooUniformBinning.cxx; src/RooUnitTest.cxx; src/RooVectorDataStore.cxx; src/RooWorkspace.cxx; src/RooWrapperPdf.cxx; src/TestStatistics/ConstantTermsOptimizer.cxx; src/TestStatistics/LikelihoodGradientWrapper.cxx; src/TestStatistics/LikelihoodSerial.cxx; src/TestStatistics/LikelihoodWrapper.cxx; src/TestStatistics/MinuitFcnGrad.cxx; src/TestStatistics/RooAbsL.cxx; src/TestStatistics/RooBinnedL.cxx; src/TestStatistics/RooRealL.cxx; src/TestStatistics/RooSubsidiaryL.cxx; src/TestStatistics/RooSumL.cxx; src/TestStatistics/RooUnbinnedL.cxx; src/TestStatistics/buildLikelihood.cxx; src/TestStatistics/SharedOffset.cxx; ${LegacyEvalBackendSources}; ${RooFitMPTestStatisticsSources}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; RooBatchCompute; ${EXTRA_LIBRARIES}; DEPENDENCIES; Core; Hist; Graf; Matrix; Tree; Minuit; RIO; MathCore; Foam; Smatrix; ${EXTRA_DEPENDENCIES}; LINKDEF; inc/LinkDef.h; ${EXTRA_DICT_OPTS}; ). # The following definitions are PUBLIC so they can also be used in ROOT-internal tests. if(roofit_legacy_eval_backend); target_compile_definitions(RooFitCore PUBLIC ROOFIT_LEGACY_EVAL_BACKEND); endif(). if(roofit_multiprocess); target_compile_definitions(RooFitCore PUBLIC ROOFIT_MULTIPROCESS); endif(). if(clad); target_compile_definitions(RooFitCore PUBLIC ROOFIT_CLAD); endif(). if",MatchSource.DOCS,roofit/roofitcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt:9952,Testability,Test,TestStatistics,9952,"/RooRealConstant.cxx; src/RooRealIntegral.cxx; src/RooRealSumFunc.cxx; src/RooRealSumPdf.cxx; src/RooRealVar.cxx; src/RooRecursiveFraction.cxx; src/RooResolutionModel.cxx; src/RooRombergIntegrator.cxx; src/RooSTLRefCountList.cxx; src/RooSecondMoment.cxx; src/RooSentinel.cxx; src/RooSharedProperties.cxx; src/RooSimGenContext.cxx; src/RooSimSplitGenContext.cxx; src/RooSimWSTool.cxx; src/RooSimultaneous.cxx; src/RooStreamParser.cxx; src/RooStringVar.cxx; src/RooStudyManager.cxx; src/RooStudyPackage.cxx; src/RooSuperCategory.cxx; src/RooTObjWrap.cxx; src/RooThresholdCategory.cxx; src/RooTrace.cxx; src/RooTreeDataStore.cxx; src/RooTruthModel.cxx; src/RooUniformBinning.cxx; src/RooUnitTest.cxx; src/RooVectorDataStore.cxx; src/RooWorkspace.cxx; src/RooWrapperPdf.cxx; src/TestStatistics/ConstantTermsOptimizer.cxx; src/TestStatistics/LikelihoodGradientWrapper.cxx; src/TestStatistics/LikelihoodSerial.cxx; src/TestStatistics/LikelihoodWrapper.cxx; src/TestStatistics/MinuitFcnGrad.cxx; src/TestStatistics/RooAbsL.cxx; src/TestStatistics/RooBinnedL.cxx; src/TestStatistics/RooRealL.cxx; src/TestStatistics/RooSubsidiaryL.cxx; src/TestStatistics/RooSumL.cxx; src/TestStatistics/RooUnbinnedL.cxx; src/TestStatistics/buildLikelihood.cxx; src/TestStatistics/SharedOffset.cxx; ${LegacyEvalBackendSources}; ${RooFitMPTestStatisticsSources}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; RooBatchCompute; ${EXTRA_LIBRARIES}; DEPENDENCIES; Core; Hist; Graf; Matrix; Tree; Minuit; RIO; MathCore; Foam; Smatrix; ${EXTRA_DEPENDENCIES}; LINKDEF; inc/LinkDef.h; ${EXTRA_DICT_OPTS}; ). # The following definitions are PUBLIC so they can also be used in ROOT-internal tests. if(roofit_legacy_eval_backend); target_compile_definitions(RooFitCore PUBLIC ROOFIT_LEGACY_EVAL_BACKEND); endif(). if(roofit_multiprocess); target_compile_definitions(RooFitCore PUBLIC ROOFIT_MULTIPROCESS); endif(). if(clad); target_compile_definitions(RooFitCore PUBLIC ROOFIT_CLAD); endif(). if(cuda); target_compile_definitions(",MatchSource.DOCS,roofit/roofitcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt:9984,Testability,Test,TestStatistics,9984,"Integral.cxx; src/RooRealSumFunc.cxx; src/RooRealSumPdf.cxx; src/RooRealVar.cxx; src/RooRecursiveFraction.cxx; src/RooResolutionModel.cxx; src/RooRombergIntegrator.cxx; src/RooSTLRefCountList.cxx; src/RooSecondMoment.cxx; src/RooSentinel.cxx; src/RooSharedProperties.cxx; src/RooSimGenContext.cxx; src/RooSimSplitGenContext.cxx; src/RooSimWSTool.cxx; src/RooSimultaneous.cxx; src/RooStreamParser.cxx; src/RooStringVar.cxx; src/RooStudyManager.cxx; src/RooStudyPackage.cxx; src/RooSuperCategory.cxx; src/RooTObjWrap.cxx; src/RooThresholdCategory.cxx; src/RooTrace.cxx; src/RooTreeDataStore.cxx; src/RooTruthModel.cxx; src/RooUniformBinning.cxx; src/RooUnitTest.cxx; src/RooVectorDataStore.cxx; src/RooWorkspace.cxx; src/RooWrapperPdf.cxx; src/TestStatistics/ConstantTermsOptimizer.cxx; src/TestStatistics/LikelihoodGradientWrapper.cxx; src/TestStatistics/LikelihoodSerial.cxx; src/TestStatistics/LikelihoodWrapper.cxx; src/TestStatistics/MinuitFcnGrad.cxx; src/TestStatistics/RooAbsL.cxx; src/TestStatistics/RooBinnedL.cxx; src/TestStatistics/RooRealL.cxx; src/TestStatistics/RooSubsidiaryL.cxx; src/TestStatistics/RooSumL.cxx; src/TestStatistics/RooUnbinnedL.cxx; src/TestStatistics/buildLikelihood.cxx; src/TestStatistics/SharedOffset.cxx; ${LegacyEvalBackendSources}; ${RooFitMPTestStatisticsSources}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; RooBatchCompute; ${EXTRA_LIBRARIES}; DEPENDENCIES; Core; Hist; Graf; Matrix; Tree; Minuit; RIO; MathCore; Foam; Smatrix; ${EXTRA_DEPENDENCIES}; LINKDEF; inc/LinkDef.h; ${EXTRA_DICT_OPTS}; ). # The following definitions are PUBLIC so they can also be used in ROOT-internal tests. if(roofit_legacy_eval_backend); target_compile_definitions(RooFitCore PUBLIC ROOFIT_LEGACY_EVAL_BACKEND); endif(). if(roofit_multiprocess); target_compile_definitions(RooFitCore PUBLIC ROOFIT_MULTIPROCESS); endif(). if(clad); target_compile_definitions(RooFitCore PUBLIC ROOFIT_CLAD); endif(). if(cuda); target_compile_definitions(RooFitCore PUBLIC ROOFIT_CUDA); en",MatchSource.DOCS,roofit/roofitcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt:10019,Testability,Test,TestStatistics,10019,"xx; src/RooRealSumPdf.cxx; src/RooRealVar.cxx; src/RooRecursiveFraction.cxx; src/RooResolutionModel.cxx; src/RooRombergIntegrator.cxx; src/RooSTLRefCountList.cxx; src/RooSecondMoment.cxx; src/RooSentinel.cxx; src/RooSharedProperties.cxx; src/RooSimGenContext.cxx; src/RooSimSplitGenContext.cxx; src/RooSimWSTool.cxx; src/RooSimultaneous.cxx; src/RooStreamParser.cxx; src/RooStringVar.cxx; src/RooStudyManager.cxx; src/RooStudyPackage.cxx; src/RooSuperCategory.cxx; src/RooTObjWrap.cxx; src/RooThresholdCategory.cxx; src/RooTrace.cxx; src/RooTreeDataStore.cxx; src/RooTruthModel.cxx; src/RooUniformBinning.cxx; src/RooUnitTest.cxx; src/RooVectorDataStore.cxx; src/RooWorkspace.cxx; src/RooWrapperPdf.cxx; src/TestStatistics/ConstantTermsOptimizer.cxx; src/TestStatistics/LikelihoodGradientWrapper.cxx; src/TestStatistics/LikelihoodSerial.cxx; src/TestStatistics/LikelihoodWrapper.cxx; src/TestStatistics/MinuitFcnGrad.cxx; src/TestStatistics/RooAbsL.cxx; src/TestStatistics/RooBinnedL.cxx; src/TestStatistics/RooRealL.cxx; src/TestStatistics/RooSubsidiaryL.cxx; src/TestStatistics/RooSumL.cxx; src/TestStatistics/RooUnbinnedL.cxx; src/TestStatistics/buildLikelihood.cxx; src/TestStatistics/SharedOffset.cxx; ${LegacyEvalBackendSources}; ${RooFitMPTestStatisticsSources}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; RooBatchCompute; ${EXTRA_LIBRARIES}; DEPENDENCIES; Core; Hist; Graf; Matrix; Tree; Minuit; RIO; MathCore; Foam; Smatrix; ${EXTRA_DEPENDENCIES}; LINKDEF; inc/LinkDef.h; ${EXTRA_DICT_OPTS}; ). # The following definitions are PUBLIC so they can also be used in ROOT-internal tests. if(roofit_legacy_eval_backend); target_compile_definitions(RooFitCore PUBLIC ROOFIT_LEGACY_EVAL_BACKEND); endif(). if(roofit_multiprocess); target_compile_definitions(RooFitCore PUBLIC ROOFIT_MULTIPROCESS); endif(). if(clad); target_compile_definitions(RooFitCore PUBLIC ROOFIT_CLAD); endif(). if(cuda); target_compile_definitions(RooFitCore PUBLIC ROOFIT_CUDA); endif(). if(fftw3); target_compile_d",MatchSource.DOCS,roofit/roofitcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt:10052,Testability,Test,TestStatistics,10052,"alVar.cxx; src/RooRecursiveFraction.cxx; src/RooResolutionModel.cxx; src/RooRombergIntegrator.cxx; src/RooSTLRefCountList.cxx; src/RooSecondMoment.cxx; src/RooSentinel.cxx; src/RooSharedProperties.cxx; src/RooSimGenContext.cxx; src/RooSimSplitGenContext.cxx; src/RooSimWSTool.cxx; src/RooSimultaneous.cxx; src/RooStreamParser.cxx; src/RooStringVar.cxx; src/RooStudyManager.cxx; src/RooStudyPackage.cxx; src/RooSuperCategory.cxx; src/RooTObjWrap.cxx; src/RooThresholdCategory.cxx; src/RooTrace.cxx; src/RooTreeDataStore.cxx; src/RooTruthModel.cxx; src/RooUniformBinning.cxx; src/RooUnitTest.cxx; src/RooVectorDataStore.cxx; src/RooWorkspace.cxx; src/RooWrapperPdf.cxx; src/TestStatistics/ConstantTermsOptimizer.cxx; src/TestStatistics/LikelihoodGradientWrapper.cxx; src/TestStatistics/LikelihoodSerial.cxx; src/TestStatistics/LikelihoodWrapper.cxx; src/TestStatistics/MinuitFcnGrad.cxx; src/TestStatistics/RooAbsL.cxx; src/TestStatistics/RooBinnedL.cxx; src/TestStatistics/RooRealL.cxx; src/TestStatistics/RooSubsidiaryL.cxx; src/TestStatistics/RooSumL.cxx; src/TestStatistics/RooUnbinnedL.cxx; src/TestStatistics/buildLikelihood.cxx; src/TestStatistics/SharedOffset.cxx; ${LegacyEvalBackendSources}; ${RooFitMPTestStatisticsSources}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; RooBatchCompute; ${EXTRA_LIBRARIES}; DEPENDENCIES; Core; Hist; Graf; Matrix; Tree; Minuit; RIO; MathCore; Foam; Smatrix; ${EXTRA_DEPENDENCIES}; LINKDEF; inc/LinkDef.h; ${EXTRA_DICT_OPTS}; ). # The following definitions are PUBLIC so they can also be used in ROOT-internal tests. if(roofit_legacy_eval_backend); target_compile_definitions(RooFitCore PUBLIC ROOFIT_LEGACY_EVAL_BACKEND); endif(). if(roofit_multiprocess); target_compile_definitions(RooFitCore PUBLIC ROOFIT_MULTIPROCESS); endif(). if(clad); target_compile_definitions(RooFitCore PUBLIC ROOFIT_CLAD); endif(). if(cuda); target_compile_definitions(RooFitCore PUBLIC ROOFIT_CUDA); endif(). if(fftw3); target_compile_definitions(RooFitCore PUBLIC ROOFIT_",MatchSource.DOCS,roofit/roofitcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt:10091,Testability,Test,TestStatistics,10091,"cxx; src/RooResolutionModel.cxx; src/RooRombergIntegrator.cxx; src/RooSTLRefCountList.cxx; src/RooSecondMoment.cxx; src/RooSentinel.cxx; src/RooSharedProperties.cxx; src/RooSimGenContext.cxx; src/RooSimSplitGenContext.cxx; src/RooSimWSTool.cxx; src/RooSimultaneous.cxx; src/RooStreamParser.cxx; src/RooStringVar.cxx; src/RooStudyManager.cxx; src/RooStudyPackage.cxx; src/RooSuperCategory.cxx; src/RooTObjWrap.cxx; src/RooThresholdCategory.cxx; src/RooTrace.cxx; src/RooTreeDataStore.cxx; src/RooTruthModel.cxx; src/RooUniformBinning.cxx; src/RooUnitTest.cxx; src/RooVectorDataStore.cxx; src/RooWorkspace.cxx; src/RooWrapperPdf.cxx; src/TestStatistics/ConstantTermsOptimizer.cxx; src/TestStatistics/LikelihoodGradientWrapper.cxx; src/TestStatistics/LikelihoodSerial.cxx; src/TestStatistics/LikelihoodWrapper.cxx; src/TestStatistics/MinuitFcnGrad.cxx; src/TestStatistics/RooAbsL.cxx; src/TestStatistics/RooBinnedL.cxx; src/TestStatistics/RooRealL.cxx; src/TestStatistics/RooSubsidiaryL.cxx; src/TestStatistics/RooSumL.cxx; src/TestStatistics/RooUnbinnedL.cxx; src/TestStatistics/buildLikelihood.cxx; src/TestStatistics/SharedOffset.cxx; ${LegacyEvalBackendSources}; ${RooFitMPTestStatisticsSources}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; RooBatchCompute; ${EXTRA_LIBRARIES}; DEPENDENCIES; Core; Hist; Graf; Matrix; Tree; Minuit; RIO; MathCore; Foam; Smatrix; ${EXTRA_DEPENDENCIES}; LINKDEF; inc/LinkDef.h; ${EXTRA_DICT_OPTS}; ). # The following definitions are PUBLIC so they can also be used in ROOT-internal tests. if(roofit_legacy_eval_backend); target_compile_definitions(RooFitCore PUBLIC ROOFIT_LEGACY_EVAL_BACKEND); endif(). if(roofit_multiprocess); target_compile_definitions(RooFitCore PUBLIC ROOFIT_MULTIPROCESS); endif(). if(clad); target_compile_definitions(RooFitCore PUBLIC ROOFIT_CLAD); endif(). if(cuda); target_compile_definitions(RooFitCore PUBLIC ROOFIT_CUDA); endif(). if(fftw3); target_compile_definitions(RooFitCore PUBLIC ROOFIT_MATH_FFTW3); endif(). # To avoid de",MatchSource.DOCS,roofit/roofitcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt:10123,Testability,Test,TestStatistics,10123,"rc/RooRombergIntegrator.cxx; src/RooSTLRefCountList.cxx; src/RooSecondMoment.cxx; src/RooSentinel.cxx; src/RooSharedProperties.cxx; src/RooSimGenContext.cxx; src/RooSimSplitGenContext.cxx; src/RooSimWSTool.cxx; src/RooSimultaneous.cxx; src/RooStreamParser.cxx; src/RooStringVar.cxx; src/RooStudyManager.cxx; src/RooStudyPackage.cxx; src/RooSuperCategory.cxx; src/RooTObjWrap.cxx; src/RooThresholdCategory.cxx; src/RooTrace.cxx; src/RooTreeDataStore.cxx; src/RooTruthModel.cxx; src/RooUniformBinning.cxx; src/RooUnitTest.cxx; src/RooVectorDataStore.cxx; src/RooWorkspace.cxx; src/RooWrapperPdf.cxx; src/TestStatistics/ConstantTermsOptimizer.cxx; src/TestStatistics/LikelihoodGradientWrapper.cxx; src/TestStatistics/LikelihoodSerial.cxx; src/TestStatistics/LikelihoodWrapper.cxx; src/TestStatistics/MinuitFcnGrad.cxx; src/TestStatistics/RooAbsL.cxx; src/TestStatistics/RooBinnedL.cxx; src/TestStatistics/RooRealL.cxx; src/TestStatistics/RooSubsidiaryL.cxx; src/TestStatistics/RooSumL.cxx; src/TestStatistics/RooUnbinnedL.cxx; src/TestStatistics/buildLikelihood.cxx; src/TestStatistics/SharedOffset.cxx; ${LegacyEvalBackendSources}; ${RooFitMPTestStatisticsSources}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; RooBatchCompute; ${EXTRA_LIBRARIES}; DEPENDENCIES; Core; Hist; Graf; Matrix; Tree; Minuit; RIO; MathCore; Foam; Smatrix; ${EXTRA_DEPENDENCIES}; LINKDEF; inc/LinkDef.h; ${EXTRA_DICT_OPTS}; ). # The following definitions are PUBLIC so they can also be used in ROOT-internal tests. if(roofit_legacy_eval_backend); target_compile_definitions(RooFitCore PUBLIC ROOFIT_LEGACY_EVAL_BACKEND); endif(). if(roofit_multiprocess); target_compile_definitions(RooFitCore PUBLIC ROOFIT_MULTIPROCESS); endif(). if(clad); target_compile_definitions(RooFitCore PUBLIC ROOFIT_CLAD); endif(). if(cuda); target_compile_definitions(RooFitCore PUBLIC ROOFIT_CUDA); endif(). if(fftw3); target_compile_definitions(RooFitCore PUBLIC ROOFIT_MATH_FFTW3); endif(). # To avoid deprecation warnings when including o",MatchSource.DOCS,roofit/roofitcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt:10160,Testability,Test,TestStatistics,10160,"RefCountList.cxx; src/RooSecondMoment.cxx; src/RooSentinel.cxx; src/RooSharedProperties.cxx; src/RooSimGenContext.cxx; src/RooSimSplitGenContext.cxx; src/RooSimWSTool.cxx; src/RooSimultaneous.cxx; src/RooStreamParser.cxx; src/RooStringVar.cxx; src/RooStudyManager.cxx; src/RooStudyPackage.cxx; src/RooSuperCategory.cxx; src/RooTObjWrap.cxx; src/RooThresholdCategory.cxx; src/RooTrace.cxx; src/RooTreeDataStore.cxx; src/RooTruthModel.cxx; src/RooUniformBinning.cxx; src/RooUnitTest.cxx; src/RooVectorDataStore.cxx; src/RooWorkspace.cxx; src/RooWrapperPdf.cxx; src/TestStatistics/ConstantTermsOptimizer.cxx; src/TestStatistics/LikelihoodGradientWrapper.cxx; src/TestStatistics/LikelihoodSerial.cxx; src/TestStatistics/LikelihoodWrapper.cxx; src/TestStatistics/MinuitFcnGrad.cxx; src/TestStatistics/RooAbsL.cxx; src/TestStatistics/RooBinnedL.cxx; src/TestStatistics/RooRealL.cxx; src/TestStatistics/RooSubsidiaryL.cxx; src/TestStatistics/RooSumL.cxx; src/TestStatistics/RooUnbinnedL.cxx; src/TestStatistics/buildLikelihood.cxx; src/TestStatistics/SharedOffset.cxx; ${LegacyEvalBackendSources}; ${RooFitMPTestStatisticsSources}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; RooBatchCompute; ${EXTRA_LIBRARIES}; DEPENDENCIES; Core; Hist; Graf; Matrix; Tree; Minuit; RIO; MathCore; Foam; Smatrix; ${EXTRA_DEPENDENCIES}; LINKDEF; inc/LinkDef.h; ${EXTRA_DICT_OPTS}; ). # The following definitions are PUBLIC so they can also be used in ROOT-internal tests. if(roofit_legacy_eval_backend); target_compile_definitions(RooFitCore PUBLIC ROOFIT_LEGACY_EVAL_BACKEND); endif(). if(roofit_multiprocess); target_compile_definitions(RooFitCore PUBLIC ROOFIT_MULTIPROCESS); endif(). if(clad); target_compile_definitions(RooFitCore PUBLIC ROOFIT_CLAD); endif(). if(cuda); target_compile_definitions(RooFitCore PUBLIC ROOFIT_CUDA); endif(). if(fftw3); target_compile_definitions(RooFitCore PUBLIC ROOFIT_MATH_FFTW3); endif(). # To avoid deprecation warnings when including old test statistics headers.; # RooFit ",MatchSource.DOCS,roofit/roofitcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt:10200,Testability,Test,TestStatistics,10200,"cxx; src/RooSentinel.cxx; src/RooSharedProperties.cxx; src/RooSimGenContext.cxx; src/RooSimSplitGenContext.cxx; src/RooSimWSTool.cxx; src/RooSimultaneous.cxx; src/RooStreamParser.cxx; src/RooStringVar.cxx; src/RooStudyManager.cxx; src/RooStudyPackage.cxx; src/RooSuperCategory.cxx; src/RooTObjWrap.cxx; src/RooThresholdCategory.cxx; src/RooTrace.cxx; src/RooTreeDataStore.cxx; src/RooTruthModel.cxx; src/RooUniformBinning.cxx; src/RooUnitTest.cxx; src/RooVectorDataStore.cxx; src/RooWorkspace.cxx; src/RooWrapperPdf.cxx; src/TestStatistics/ConstantTermsOptimizer.cxx; src/TestStatistics/LikelihoodGradientWrapper.cxx; src/TestStatistics/LikelihoodSerial.cxx; src/TestStatistics/LikelihoodWrapper.cxx; src/TestStatistics/MinuitFcnGrad.cxx; src/TestStatistics/RooAbsL.cxx; src/TestStatistics/RooBinnedL.cxx; src/TestStatistics/RooRealL.cxx; src/TestStatistics/RooSubsidiaryL.cxx; src/TestStatistics/RooSumL.cxx; src/TestStatistics/RooUnbinnedL.cxx; src/TestStatistics/buildLikelihood.cxx; src/TestStatistics/SharedOffset.cxx; ${LegacyEvalBackendSources}; ${RooFitMPTestStatisticsSources}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; RooBatchCompute; ${EXTRA_LIBRARIES}; DEPENDENCIES; Core; Hist; Graf; Matrix; Tree; Minuit; RIO; MathCore; Foam; Smatrix; ${EXTRA_DEPENDENCIES}; LINKDEF; inc/LinkDef.h; ${EXTRA_DICT_OPTS}; ). # The following definitions are PUBLIC so they can also be used in ROOT-internal tests. if(roofit_legacy_eval_backend); target_compile_definitions(RooFitCore PUBLIC ROOFIT_LEGACY_EVAL_BACKEND); endif(). if(roofit_multiprocess); target_compile_definitions(RooFitCore PUBLIC ROOFIT_MULTIPROCESS); endif(). if(clad); target_compile_definitions(RooFitCore PUBLIC ROOFIT_CLAD); endif(). if(cuda); target_compile_definitions(RooFitCore PUBLIC ROOFIT_CUDA); endif(). if(fftw3); target_compile_definitions(RooFitCore PUBLIC ROOFIT_MATH_FFTW3); endif(). # To avoid deprecation warnings when including old test statistics headers.; # RooFit has to include them to build the docume",MatchSource.DOCS,roofit/roofitcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt:10621,Testability,test,tests,10621,"x; src/RooTruthModel.cxx; src/RooUniformBinning.cxx; src/RooUnitTest.cxx; src/RooVectorDataStore.cxx; src/RooWorkspace.cxx; src/RooWrapperPdf.cxx; src/TestStatistics/ConstantTermsOptimizer.cxx; src/TestStatistics/LikelihoodGradientWrapper.cxx; src/TestStatistics/LikelihoodSerial.cxx; src/TestStatistics/LikelihoodWrapper.cxx; src/TestStatistics/MinuitFcnGrad.cxx; src/TestStatistics/RooAbsL.cxx; src/TestStatistics/RooBinnedL.cxx; src/TestStatistics/RooRealL.cxx; src/TestStatistics/RooSubsidiaryL.cxx; src/TestStatistics/RooSumL.cxx; src/TestStatistics/RooUnbinnedL.cxx; src/TestStatistics/buildLikelihood.cxx; src/TestStatistics/SharedOffset.cxx; ${LegacyEvalBackendSources}; ${RooFitMPTestStatisticsSources}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; RooBatchCompute; ${EXTRA_LIBRARIES}; DEPENDENCIES; Core; Hist; Graf; Matrix; Tree; Minuit; RIO; MathCore; Foam; Smatrix; ${EXTRA_DEPENDENCIES}; LINKDEF; inc/LinkDef.h; ${EXTRA_DICT_OPTS}; ). # The following definitions are PUBLIC so they can also be used in ROOT-internal tests. if(roofit_legacy_eval_backend); target_compile_definitions(RooFitCore PUBLIC ROOFIT_LEGACY_EVAL_BACKEND); endif(). if(roofit_multiprocess); target_compile_definitions(RooFitCore PUBLIC ROOFIT_MULTIPROCESS); endif(). if(clad); target_compile_definitions(RooFitCore PUBLIC ROOFIT_CLAD); endif(). if(cuda); target_compile_definitions(RooFitCore PUBLIC ROOFIT_CUDA); endif(). if(fftw3); target_compile_definitions(RooFitCore PUBLIC ROOFIT_MATH_FFTW3); endif(). # To avoid deprecation warnings when including old test statistics headers.; # RooFit has to include them to build the documentation.; target_compile_definitions(RooFitCore PUBLIC ROOFIT_BUILDS_ITSELF). target_include_directories(RooFitCore PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/res>). # For recent clang, this can facilitate auto-vectorisation.; # In RooFit, the errno side effect is not needed, anyway:; if(""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang""); target_compile_options(RooFit",MatchSource.DOCS,roofit/roofitcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt:11136,Testability,test,test,11136," src/RooVectorDataStore.cxx; src/RooWorkspace.cxx; src/RooWrapperPdf.cxx; src/TestStatistics/ConstantTermsOptimizer.cxx; src/TestStatistics/LikelihoodGradientWrapper.cxx; src/TestStatistics/LikelihoodSerial.cxx; src/TestStatistics/LikelihoodWrapper.cxx; src/TestStatistics/MinuitFcnGrad.cxx; src/TestStatistics/RooAbsL.cxx; src/TestStatistics/RooBinnedL.cxx; src/TestStatistics/RooRealL.cxx; src/TestStatistics/RooSubsidiaryL.cxx; src/TestStatistics/RooSumL.cxx; src/TestStatistics/RooUnbinnedL.cxx; src/TestStatistics/buildLikelihood.cxx; src/TestStatistics/SharedOffset.cxx; ${LegacyEvalBackendSources}; ${RooFitMPTestStatisticsSources}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; RooBatchCompute; ${EXTRA_LIBRARIES}; DEPENDENCIES; Core; Hist; Graf; Matrix; Tree; Minuit; RIO; MathCore; Foam; Smatrix; ${EXTRA_DEPENDENCIES}; LINKDEF; inc/LinkDef.h; ${EXTRA_DICT_OPTS}; ). # The following definitions are PUBLIC so they can also be used in ROOT-internal tests. if(roofit_legacy_eval_backend); target_compile_definitions(RooFitCore PUBLIC ROOFIT_LEGACY_EVAL_BACKEND); endif(). if(roofit_multiprocess); target_compile_definitions(RooFitCore PUBLIC ROOFIT_MULTIPROCESS); endif(). if(clad); target_compile_definitions(RooFitCore PUBLIC ROOFIT_CLAD); endif(). if(cuda); target_compile_definitions(RooFitCore PUBLIC ROOFIT_CUDA); endif(). if(fftw3); target_compile_definitions(RooFitCore PUBLIC ROOFIT_MATH_FFTW3); endif(). # To avoid deprecation warnings when including old test statistics headers.; # RooFit has to include them to build the documentation.; target_compile_definitions(RooFitCore PUBLIC ROOFIT_BUILDS_ITSELF). target_include_directories(RooFitCore PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/res>). # For recent clang, this can facilitate auto-vectorisation.; # In RooFit, the errno side effect is not needed, anyway:; if(""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang""); target_compile_options(RooFitCore PUBLIC -fno-math-errno); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,roofit/roofitcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt:11649,Testability,test,test,11649," src/RooVectorDataStore.cxx; src/RooWorkspace.cxx; src/RooWrapperPdf.cxx; src/TestStatistics/ConstantTermsOptimizer.cxx; src/TestStatistics/LikelihoodGradientWrapper.cxx; src/TestStatistics/LikelihoodSerial.cxx; src/TestStatistics/LikelihoodWrapper.cxx; src/TestStatistics/MinuitFcnGrad.cxx; src/TestStatistics/RooAbsL.cxx; src/TestStatistics/RooBinnedL.cxx; src/TestStatistics/RooRealL.cxx; src/TestStatistics/RooSubsidiaryL.cxx; src/TestStatistics/RooSumL.cxx; src/TestStatistics/RooUnbinnedL.cxx; src/TestStatistics/buildLikelihood.cxx; src/TestStatistics/SharedOffset.cxx; ${LegacyEvalBackendSources}; ${RooFitMPTestStatisticsSources}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; RooBatchCompute; ${EXTRA_LIBRARIES}; DEPENDENCIES; Core; Hist; Graf; Matrix; Tree; Minuit; RIO; MathCore; Foam; Smatrix; ${EXTRA_DEPENDENCIES}; LINKDEF; inc/LinkDef.h; ${EXTRA_DICT_OPTS}; ). # The following definitions are PUBLIC so they can also be used in ROOT-internal tests. if(roofit_legacy_eval_backend); target_compile_definitions(RooFitCore PUBLIC ROOFIT_LEGACY_EVAL_BACKEND); endif(). if(roofit_multiprocess); target_compile_definitions(RooFitCore PUBLIC ROOFIT_MULTIPROCESS); endif(). if(clad); target_compile_definitions(RooFitCore PUBLIC ROOFIT_CLAD); endif(). if(cuda); target_compile_definitions(RooFitCore PUBLIC ROOFIT_CUDA); endif(). if(fftw3); target_compile_definitions(RooFitCore PUBLIC ROOFIT_MATH_FFTW3); endif(). # To avoid deprecation warnings when including old test statistics headers.; # RooFit has to include them to build the documentation.; target_compile_definitions(RooFitCore PUBLIC ROOFIT_BUILDS_ITSELF). target_include_directories(RooFitCore PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/res>). # For recent clang, this can facilitate auto-vectorisation.; # In RooFit, the errno side effect is not needed, anyway:; if(""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang""); target_compile_options(RooFitCore PUBLIC -fno-math-errno); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,roofit/roofitcore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/CMakeLists.txt:1090,Integrability,DEPEND,DEPENDENCIES,1090,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT roofitmore package; # @author Lorenzo Moneta, CERN; ############################################################################. if(mathmore); set(ROOT_MATHMORE_LIBRARY MathMore); endif(). set (EXTRA_DICT_OPTS); if (runtime_cxxmodules AND WIN32); set (EXTRA_DICT_OPTS NO_CXXMODULE); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(RooFitMore; HEADERS; RooFitMoreLib.h; RooLegendre.h; RooMathMoreReg.h; RooSpHarmonic.h; RooNonCentralChiSquare.h; RooHypatia2.h; SOURCES; src/RooFitMoreLib.cxx; src/RooAdaptiveGaussKronrodIntegrator1D.cxx; src/RooGaussKronrodIntegrator1D.cxx; src/RooLegendre.cxx; src/RooMathMoreReg.cxx; src/RooSpHarmonic.cxx; src/RooNonCentralChiSquare.cxx; src/RooHypatia2.cxx; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LINKDEF; LinkDef.h; LIBRARIES; RooBatchCompute; DEPENDENCIES; ${ROOT_MATHMORE_LIBRARY}; Core; RooFitCore; RooFit; Hist; Matrix; Tree; Minuit; RIO; MathCore; Foam; BUILTINS; GSL; ${EXTRA_DICT_OPTS}; ). target_include_directories(RooFitMore SYSTEM PRIVATE ${GSL_INCLUDE_DIR}); target_link_libraries(RooFitMore PRIVATE ${GSL_LIBRARIES}). # For recent clang, this can facilitate auto-vectorisation.; # In RooFit, the errno side effect is not needed, anyway:; if(""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang""); target_compile_options(RooFitMore PUBLIC -fno-math-errno); endif(). #ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,roofit/roofitmore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/CMakeLists.txt:1641,Testability,test,test,1641,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT roofitmore package; # @author Lorenzo Moneta, CERN; ############################################################################. if(mathmore); set(ROOT_MATHMORE_LIBRARY MathMore); endif(). set (EXTRA_DICT_OPTS); if (runtime_cxxmodules AND WIN32); set (EXTRA_DICT_OPTS NO_CXXMODULE); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(RooFitMore; HEADERS; RooFitMoreLib.h; RooLegendre.h; RooMathMoreReg.h; RooSpHarmonic.h; RooNonCentralChiSquare.h; RooHypatia2.h; SOURCES; src/RooFitMoreLib.cxx; src/RooAdaptiveGaussKronrodIntegrator1D.cxx; src/RooGaussKronrodIntegrator1D.cxx; src/RooLegendre.cxx; src/RooMathMoreReg.cxx; src/RooSpHarmonic.cxx; src/RooNonCentralChiSquare.cxx; src/RooHypatia2.cxx; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LINKDEF; LinkDef.h; LIBRARIES; RooBatchCompute; DEPENDENCIES; ${ROOT_MATHMORE_LIBRARY}; Core; RooFitCore; RooFit; Hist; Matrix; Tree; Minuit; RIO; MathCore; Foam; BUILTINS; GSL; ${EXTRA_DICT_OPTS}; ). target_include_directories(RooFitMore SYSTEM PRIVATE ${GSL_INCLUDE_DIR}); target_link_libraries(RooFitMore PRIVATE ${GSL_LIBRARIES}). # For recent clang, this can facilitate auto-vectorisation.; # In RooFit, the errno side effect is not needed, anyway:; if(""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang""); target_compile_options(RooFitMore PUBLIC -fno-math-errno); endif(). #ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,roofit/roofitmore/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/CMakeLists.txt:568,Integrability,INTERFACE,INTERFACE,568,"############################################################################; # CMakeLists.txt file for building ROOT roofitcore/ZMQ package; # @author Patrick Bos, Netherlands eScience Center; ############################################################################. ROOT_LINKER_LIBRARY(RooFitZMQ; src/ZeroMQSvc.cpp; src/ZeroMQPoller.cpp; src/functions.cpp; src/ppoll.cpp; ). target_link_libraries(RooFitZMQ PUBLIC libzmq cppzmq); set(RooFitZMQ_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/res); target_include_directories(RooFitZMQ; PRIVATE ${RooFitZMQ_INCLUDE_DIR}; INTERFACE $<BUILD_INTERFACE:${RooFitZMQ_INCLUDE_DIR}>). # zmq_ppoll is still in the draft API, and RooFitZMQ relies on it; target_compile_definitions(RooFitZMQ PUBLIC ZMQ_BUILD_DRAFT_API); # to avoid leaking symbols; target_compile_definitions(RooFitZMQ PUBLIC ZMQ_NO_EXPORT). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,roofit/roofitZMQ/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/CMakeLists.txt:762,Safety,avoid,avoid,762,"############################################################################; # CMakeLists.txt file for building ROOT roofitcore/ZMQ package; # @author Patrick Bos, Netherlands eScience Center; ############################################################################. ROOT_LINKER_LIBRARY(RooFitZMQ; src/ZeroMQSvc.cpp; src/ZeroMQPoller.cpp; src/functions.cpp; src/ppoll.cpp; ). target_link_libraries(RooFitZMQ PUBLIC libzmq cppzmq); set(RooFitZMQ_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/res); target_include_directories(RooFitZMQ; PRIVATE ${RooFitZMQ_INCLUDE_DIR}; INTERFACE $<BUILD_INTERFACE:${RooFitZMQ_INCLUDE_DIR}>). # zmq_ppoll is still in the draft API, and RooFitZMQ relies on it; target_compile_definitions(RooFitZMQ PUBLIC ZMQ_BUILD_DRAFT_API); # to avoid leaking symbols; target_compile_definitions(RooFitZMQ PUBLIC ZMQ_NO_EXPORT). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,roofit/roofitZMQ/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/CMakeLists.txt:872,Testability,test,test,872,"############################################################################; # CMakeLists.txt file for building ROOT roofitcore/ZMQ package; # @author Patrick Bos, Netherlands eScience Center; ############################################################################. ROOT_LINKER_LIBRARY(RooFitZMQ; src/ZeroMQSvc.cpp; src/ZeroMQPoller.cpp; src/functions.cpp; src/ppoll.cpp; ). target_link_libraries(RooFitZMQ PUBLIC libzmq cppzmq); set(RooFitZMQ_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/res); target_include_directories(RooFitZMQ; PRIVATE ${RooFitZMQ_INCLUDE_DIR}; INTERFACE $<BUILD_INTERFACE:${RooFitZMQ_INCLUDE_DIR}>). # zmq_ppoll is still in the draft API, and RooFitZMQ relies on it; target_compile_definitions(RooFitZMQ PUBLIC ZMQ_BUILD_DRAFT_API); # to avoid leaking symbols; target_compile_definitions(RooFitZMQ PUBLIC ZMQ_NO_EXPORT). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,roofit/roofitZMQ/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/CMakeLists.txt:3733,Integrability,DEPEND,DEPENDENCIES,3733,"ofConfig.h; RooStats/ProposalFunction.h; RooStats/ProposalHelper.h; RooStats/RatioOfProfiledLikelihoodsTestStat.h; RooStats/RooStatsUtils.h; RooStats/SamplingDistPlot.h; RooStats/SamplingDistribution.h; RooStats/SequentialProposal.h; RooStats/SimpleInterval.h; RooStats/SimpleLikelihoodRatioTestStat.h; RooStats/SPlot.h; RooStats/TestStatistic.h; RooStats/TestStatSampler.h; RooStats/ToyMCImportanceSampler.h; RooStats/ToyMCSampler.h; RooStats/ToyMCStudy.h; RooStats/UniformProposal.h; RooStats/UpperLimitMCSModule.h; SOURCES; src/AsymptoticCalculator.cxx; src/BayesianCalculator.cxx; src/BernsteinCorrection.cxx; src/ConfidenceBelt.cxx; src/DetailedOutputAggregator.cxx; src/FeldmanCousins.cxx; src/FrequentistCalculator.cxx; src/Heaviside.cxx; src/HLFactory.cxx; src/HybridCalculator.cxx; src/HybridPlot.cxx; src/HybridResult.cxx; src/HypoTestCalculatorGeneric.cxx; src/HypoTestInverter.cxx; src/HypoTestInverterPlot.cxx; src/HypoTestInverterResult.cxx; src/HypoTestPlot.cxx; src/HypoTestResult.cxx; src/LikelihoodInterval.cxx; src/LikelihoodIntervalPlot.cxx; src/MarkovChain.cxx; src/MCMCCalculator.cxx; src/MCMCInterval.cxx; src/MCMCIntervalPlot.cxx; src/MetropolisHastings.cxx; src/NeymanConstruction.cxx; src/NumberCountingPdfFactory.cxx; src/NumberCountingUtils.cxx; src/PdfProposal.cxx; src/PointSetInterval.cxx; src/ProfileInspector.cxx; src/ProfileLikelihoodCalculator.cxx; src/ProfileLikelihoodTestStat.cxx; src/ProposalHelper.cxx; src/RatioOfProfiledLikelihoodsTestStat.cxx; src/RooStatsUtils.cxx; src/SamplingDistPlot.cxx; src/SamplingDistribution.cxx; src/SequentialProposal.cxx; src/SimpleInterval.cxx; src/SimpleLikelihoodRatioTestStat.cxx; src/SPlot.cxx; src/ToyMCImportanceSampler.cxx; src/ToyMCSampler.cxx; src/ToyMCStudy.cxx; src/UniformProposal.cxx; src/UpperLimitMCSModule.cxx; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; DEPENDENCIES; Core; RooFit; RooFitCore; Tree; RIO; Hist; Matrix; MathCore; Minuit; Foam; Graf; Gpad; ${EXTRA_DICT_OPTS}; ). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,roofit/roostats/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/CMakeLists.txt:2221,Testability,Test,TestStatistic,2221,poTestPlot.h; RooStats/HypoTestResult.h; RooStats/IntervalCalculator.h; RooStats/LikelihoodInterval.h; RooStats/LikelihoodIntervalPlot.h; RooStats/MarkovChain.h; RooStats/MaxLikelihoodEstimateTestStat.h; RooStats/MCMCCalculator.h; RooStats/MCMCInterval.h; RooStats/MCMCIntervalPlot.h; RooStats/MetropolisHastings.h; RooStats/MinNLLTestStat.h; RooStats/ModelConfig.h; RooStats/NeymanConstruction.h; RooStats/NumberCountingPdfFactory.h; RooStats/NumberCountingUtils.h; RooStats/NumEventsTestStat.h; RooStats/PdfProposal.h; RooStats/PointSetInterval.h; RooStats/ProfileInspector.h; RooStats/ProfileLikelihoodCalculator.h; RooStats/ProfileLikelihoodTestStat.h; RooStats/ProofConfig.h; RooStats/ProposalFunction.h; RooStats/ProposalHelper.h; RooStats/RatioOfProfiledLikelihoodsTestStat.h; RooStats/RooStatsUtils.h; RooStats/SamplingDistPlot.h; RooStats/SamplingDistribution.h; RooStats/SequentialProposal.h; RooStats/SimpleInterval.h; RooStats/SimpleLikelihoodRatioTestStat.h; RooStats/SPlot.h; RooStats/TestStatistic.h; RooStats/TestStatSampler.h; RooStats/ToyMCImportanceSampler.h; RooStats/ToyMCSampler.h; RooStats/ToyMCStudy.h; RooStats/UniformProposal.h; RooStats/UpperLimitMCSModule.h; SOURCES; src/AsymptoticCalculator.cxx; src/BayesianCalculator.cxx; src/BernsteinCorrection.cxx; src/ConfidenceBelt.cxx; src/DetailedOutputAggregator.cxx; src/FeldmanCousins.cxx; src/FrequentistCalculator.cxx; src/Heaviside.cxx; src/HLFactory.cxx; src/HybridCalculator.cxx; src/HybridPlot.cxx; src/HybridResult.cxx; src/HypoTestCalculatorGeneric.cxx; src/HypoTestInverter.cxx; src/HypoTestInverterPlot.cxx; src/HypoTestInverterResult.cxx; src/HypoTestPlot.cxx; src/HypoTestResult.cxx; src/LikelihoodInterval.cxx; src/LikelihoodIntervalPlot.cxx; src/MarkovChain.cxx; src/MCMCCalculator.cxx; src/MCMCInterval.cxx; src/MCMCIntervalPlot.cxx; src/MetropolisHastings.cxx; src/NeymanConstruction.cxx; src/NumberCountingPdfFactory.cxx; src/NumberCountingUtils.cxx; src/PdfProposal.cxx; src/PointSetInterval.cxx; src/Profil,MatchSource.DOCS,roofit/roostats/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/CMakeLists.txt:2247,Testability,Test,TestStatSampler,2247,TestResult.h; RooStats/IntervalCalculator.h; RooStats/LikelihoodInterval.h; RooStats/LikelihoodIntervalPlot.h; RooStats/MarkovChain.h; RooStats/MaxLikelihoodEstimateTestStat.h; RooStats/MCMCCalculator.h; RooStats/MCMCInterval.h; RooStats/MCMCIntervalPlot.h; RooStats/MetropolisHastings.h; RooStats/MinNLLTestStat.h; RooStats/ModelConfig.h; RooStats/NeymanConstruction.h; RooStats/NumberCountingPdfFactory.h; RooStats/NumberCountingUtils.h; RooStats/NumEventsTestStat.h; RooStats/PdfProposal.h; RooStats/PointSetInterval.h; RooStats/ProfileInspector.h; RooStats/ProfileLikelihoodCalculator.h; RooStats/ProfileLikelihoodTestStat.h; RooStats/ProofConfig.h; RooStats/ProposalFunction.h; RooStats/ProposalHelper.h; RooStats/RatioOfProfiledLikelihoodsTestStat.h; RooStats/RooStatsUtils.h; RooStats/SamplingDistPlot.h; RooStats/SamplingDistribution.h; RooStats/SequentialProposal.h; RooStats/SimpleInterval.h; RooStats/SimpleLikelihoodRatioTestStat.h; RooStats/SPlot.h; RooStats/TestStatistic.h; RooStats/TestStatSampler.h; RooStats/ToyMCImportanceSampler.h; RooStats/ToyMCSampler.h; RooStats/ToyMCStudy.h; RooStats/UniformProposal.h; RooStats/UpperLimitMCSModule.h; SOURCES; src/AsymptoticCalculator.cxx; src/BayesianCalculator.cxx; src/BernsteinCorrection.cxx; src/ConfidenceBelt.cxx; src/DetailedOutputAggregator.cxx; src/FeldmanCousins.cxx; src/FrequentistCalculator.cxx; src/Heaviside.cxx; src/HLFactory.cxx; src/HybridCalculator.cxx; src/HybridPlot.cxx; src/HybridResult.cxx; src/HypoTestCalculatorGeneric.cxx; src/HypoTestInverter.cxx; src/HypoTestInverterPlot.cxx; src/HypoTestInverterResult.cxx; src/HypoTestPlot.cxx; src/HypoTestResult.cxx; src/LikelihoodInterval.cxx; src/LikelihoodIntervalPlot.cxx; src/MarkovChain.cxx; src/MCMCCalculator.cxx; src/MCMCInterval.cxx; src/MCMCIntervalPlot.cxx; src/MetropolisHastings.cxx; src/NeymanConstruction.cxx; src/NumberCountingPdfFactory.cxx; src/NumberCountingUtils.cxx; src/PdfProposal.cxx; src/PointSetInterval.cxx; src/ProfileInspector.cxx; src/Profile,MatchSource.DOCS,roofit/roostats/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/CMakeLists.txt:3884,Testability,test,test,3884,"ofConfig.h; RooStats/ProposalFunction.h; RooStats/ProposalHelper.h; RooStats/RatioOfProfiledLikelihoodsTestStat.h; RooStats/RooStatsUtils.h; RooStats/SamplingDistPlot.h; RooStats/SamplingDistribution.h; RooStats/SequentialProposal.h; RooStats/SimpleInterval.h; RooStats/SimpleLikelihoodRatioTestStat.h; RooStats/SPlot.h; RooStats/TestStatistic.h; RooStats/TestStatSampler.h; RooStats/ToyMCImportanceSampler.h; RooStats/ToyMCSampler.h; RooStats/ToyMCStudy.h; RooStats/UniformProposal.h; RooStats/UpperLimitMCSModule.h; SOURCES; src/AsymptoticCalculator.cxx; src/BayesianCalculator.cxx; src/BernsteinCorrection.cxx; src/ConfidenceBelt.cxx; src/DetailedOutputAggregator.cxx; src/FeldmanCousins.cxx; src/FrequentistCalculator.cxx; src/Heaviside.cxx; src/HLFactory.cxx; src/HybridCalculator.cxx; src/HybridPlot.cxx; src/HybridResult.cxx; src/HypoTestCalculatorGeneric.cxx; src/HypoTestInverter.cxx; src/HypoTestInverterPlot.cxx; src/HypoTestInverterResult.cxx; src/HypoTestPlot.cxx; src/HypoTestResult.cxx; src/LikelihoodInterval.cxx; src/LikelihoodIntervalPlot.cxx; src/MarkovChain.cxx; src/MCMCCalculator.cxx; src/MCMCInterval.cxx; src/MCMCIntervalPlot.cxx; src/MetropolisHastings.cxx; src/NeymanConstruction.cxx; src/NumberCountingPdfFactory.cxx; src/NumberCountingUtils.cxx; src/PdfProposal.cxx; src/PointSetInterval.cxx; src/ProfileInspector.cxx; src/ProfileLikelihoodCalculator.cxx; src/ProfileLikelihoodTestStat.cxx; src/ProposalHelper.cxx; src/RatioOfProfiledLikelihoodsTestStat.cxx; src/RooStatsUtils.cxx; src/SamplingDistPlot.cxx; src/SamplingDistribution.cxx; src/SequentialProposal.cxx; src/SimpleInterval.cxx; src/SimpleLikelihoodRatioTestStat.cxx; src/SPlot.cxx; src/ToyMCImportanceSampler.cxx; src/ToyMCSampler.cxx; src/ToyMCStudy.cxx; src/UniformProposal.cxx; src/UpperLimitMCSModule.cxx; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; DEPENDENCIES; Core; RooFit; RooFitCore; Tree; RIO; Hist; Matrix; MathCore; Minuit; Foam; Graf; Gpad; ${EXTRA_DICT_OPTS}; ). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,roofit/roostats/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/CMakeLists.txt:2134,Usability,Simpl,SimpleInterval,2134,rter.h; RooStats/HypoTestInverterPlot.h; RooStats/HypoTestInverterResult.h; RooStats/HypoTestPlot.h; RooStats/HypoTestResult.h; RooStats/IntervalCalculator.h; RooStats/LikelihoodInterval.h; RooStats/LikelihoodIntervalPlot.h; RooStats/MarkovChain.h; RooStats/MaxLikelihoodEstimateTestStat.h; RooStats/MCMCCalculator.h; RooStats/MCMCInterval.h; RooStats/MCMCIntervalPlot.h; RooStats/MetropolisHastings.h; RooStats/MinNLLTestStat.h; RooStats/ModelConfig.h; RooStats/NeymanConstruction.h; RooStats/NumberCountingPdfFactory.h; RooStats/NumberCountingUtils.h; RooStats/NumEventsTestStat.h; RooStats/PdfProposal.h; RooStats/PointSetInterval.h; RooStats/ProfileInspector.h; RooStats/ProfileLikelihoodCalculator.h; RooStats/ProfileLikelihoodTestStat.h; RooStats/ProofConfig.h; RooStats/ProposalFunction.h; RooStats/ProposalHelper.h; RooStats/RatioOfProfiledLikelihoodsTestStat.h; RooStats/RooStatsUtils.h; RooStats/SamplingDistPlot.h; RooStats/SamplingDistribution.h; RooStats/SequentialProposal.h; RooStats/SimpleInterval.h; RooStats/SimpleLikelihoodRatioTestStat.h; RooStats/SPlot.h; RooStats/TestStatistic.h; RooStats/TestStatSampler.h; RooStats/ToyMCImportanceSampler.h; RooStats/ToyMCSampler.h; RooStats/ToyMCStudy.h; RooStats/UniformProposal.h; RooStats/UpperLimitMCSModule.h; SOURCES; src/AsymptoticCalculator.cxx; src/BayesianCalculator.cxx; src/BernsteinCorrection.cxx; src/ConfidenceBelt.cxx; src/DetailedOutputAggregator.cxx; src/FeldmanCousins.cxx; src/FrequentistCalculator.cxx; src/Heaviside.cxx; src/HLFactory.cxx; src/HybridCalculator.cxx; src/HybridPlot.cxx; src/HybridResult.cxx; src/HypoTestCalculatorGeneric.cxx; src/HypoTestInverter.cxx; src/HypoTestInverterPlot.cxx; src/HypoTestInverterResult.cxx; src/HypoTestPlot.cxx; src/HypoTestResult.cxx; src/LikelihoodInterval.cxx; src/LikelihoodIntervalPlot.cxx; src/MarkovChain.cxx; src/MCMCCalculator.cxx; src/MCMCInterval.cxx; src/MCMCIntervalPlot.cxx; src/MetropolisHastings.cxx; src/NeymanConstruction.cxx; src/NumberCountingPdfFactory.cxx; ,MatchSource.DOCS,roofit/roostats/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/CMakeLists.txt:2161,Usability,Simpl,SimpleLikelihoodRatioTestStat,2161,ot.h; RooStats/HypoTestInverterResult.h; RooStats/HypoTestPlot.h; RooStats/HypoTestResult.h; RooStats/IntervalCalculator.h; RooStats/LikelihoodInterval.h; RooStats/LikelihoodIntervalPlot.h; RooStats/MarkovChain.h; RooStats/MaxLikelihoodEstimateTestStat.h; RooStats/MCMCCalculator.h; RooStats/MCMCInterval.h; RooStats/MCMCIntervalPlot.h; RooStats/MetropolisHastings.h; RooStats/MinNLLTestStat.h; RooStats/ModelConfig.h; RooStats/NeymanConstruction.h; RooStats/NumberCountingPdfFactory.h; RooStats/NumberCountingUtils.h; RooStats/NumEventsTestStat.h; RooStats/PdfProposal.h; RooStats/PointSetInterval.h; RooStats/ProfileInspector.h; RooStats/ProfileLikelihoodCalculator.h; RooStats/ProfileLikelihoodTestStat.h; RooStats/ProofConfig.h; RooStats/ProposalFunction.h; RooStats/ProposalHelper.h; RooStats/RatioOfProfiledLikelihoodsTestStat.h; RooStats/RooStatsUtils.h; RooStats/SamplingDistPlot.h; RooStats/SamplingDistribution.h; RooStats/SequentialProposal.h; RooStats/SimpleInterval.h; RooStats/SimpleLikelihoodRatioTestStat.h; RooStats/SPlot.h; RooStats/TestStatistic.h; RooStats/TestStatSampler.h; RooStats/ToyMCImportanceSampler.h; RooStats/ToyMCSampler.h; RooStats/ToyMCStudy.h; RooStats/UniformProposal.h; RooStats/UpperLimitMCSModule.h; SOURCES; src/AsymptoticCalculator.cxx; src/BayesianCalculator.cxx; src/BernsteinCorrection.cxx; src/ConfidenceBelt.cxx; src/DetailedOutputAggregator.cxx; src/FeldmanCousins.cxx; src/FrequentistCalculator.cxx; src/Heaviside.cxx; src/HLFactory.cxx; src/HybridCalculator.cxx; src/HybridPlot.cxx; src/HybridResult.cxx; src/HypoTestCalculatorGeneric.cxx; src/HypoTestInverter.cxx; src/HypoTestInverterPlot.cxx; src/HypoTestInverterResult.cxx; src/HypoTestPlot.cxx; src/HypoTestResult.cxx; src/LikelihoodInterval.cxx; src/LikelihoodIntervalPlot.cxx; src/MarkovChain.cxx; src/MCMCCalculator.cxx; src/MCMCInterval.cxx; src/MCMCIntervalPlot.cxx; src/MetropolisHastings.cxx; src/NeymanConstruction.cxx; src/NumberCountingPdfFactory.cxx; src/NumberCountingUtils.cxx; src/P,MatchSource.DOCS,roofit/roostats/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/CMakeLists.txt:3489,Usability,Simpl,SimpleInterval,3489,"ofConfig.h; RooStats/ProposalFunction.h; RooStats/ProposalHelper.h; RooStats/RatioOfProfiledLikelihoodsTestStat.h; RooStats/RooStatsUtils.h; RooStats/SamplingDistPlot.h; RooStats/SamplingDistribution.h; RooStats/SequentialProposal.h; RooStats/SimpleInterval.h; RooStats/SimpleLikelihoodRatioTestStat.h; RooStats/SPlot.h; RooStats/TestStatistic.h; RooStats/TestStatSampler.h; RooStats/ToyMCImportanceSampler.h; RooStats/ToyMCSampler.h; RooStats/ToyMCStudy.h; RooStats/UniformProposal.h; RooStats/UpperLimitMCSModule.h; SOURCES; src/AsymptoticCalculator.cxx; src/BayesianCalculator.cxx; src/BernsteinCorrection.cxx; src/ConfidenceBelt.cxx; src/DetailedOutputAggregator.cxx; src/FeldmanCousins.cxx; src/FrequentistCalculator.cxx; src/Heaviside.cxx; src/HLFactory.cxx; src/HybridCalculator.cxx; src/HybridPlot.cxx; src/HybridResult.cxx; src/HypoTestCalculatorGeneric.cxx; src/HypoTestInverter.cxx; src/HypoTestInverterPlot.cxx; src/HypoTestInverterResult.cxx; src/HypoTestPlot.cxx; src/HypoTestResult.cxx; src/LikelihoodInterval.cxx; src/LikelihoodIntervalPlot.cxx; src/MarkovChain.cxx; src/MCMCCalculator.cxx; src/MCMCInterval.cxx; src/MCMCIntervalPlot.cxx; src/MetropolisHastings.cxx; src/NeymanConstruction.cxx; src/NumberCountingPdfFactory.cxx; src/NumberCountingUtils.cxx; src/PdfProposal.cxx; src/PointSetInterval.cxx; src/ProfileInspector.cxx; src/ProfileLikelihoodCalculator.cxx; src/ProfileLikelihoodTestStat.cxx; src/ProposalHelper.cxx; src/RatioOfProfiledLikelihoodsTestStat.cxx; src/RooStatsUtils.cxx; src/SamplingDistPlot.cxx; src/SamplingDistribution.cxx; src/SequentialProposal.cxx; src/SimpleInterval.cxx; src/SimpleLikelihoodRatioTestStat.cxx; src/SPlot.cxx; src/ToyMCImportanceSampler.cxx; src/ToyMCSampler.cxx; src/ToyMCStudy.cxx; src/UniformProposal.cxx; src/UpperLimitMCSModule.cxx; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; DEPENDENCIES; Core; RooFit; RooFitCore; Tree; RIO; Hist; Matrix; MathCore; Minuit; Foam; Graf; Gpad; ${EXTRA_DICT_OPTS}; ). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,roofit/roostats/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/CMakeLists.txt:3513,Usability,Simpl,SimpleLikelihoodRatioTestStat,3513,"ofConfig.h; RooStats/ProposalFunction.h; RooStats/ProposalHelper.h; RooStats/RatioOfProfiledLikelihoodsTestStat.h; RooStats/RooStatsUtils.h; RooStats/SamplingDistPlot.h; RooStats/SamplingDistribution.h; RooStats/SequentialProposal.h; RooStats/SimpleInterval.h; RooStats/SimpleLikelihoodRatioTestStat.h; RooStats/SPlot.h; RooStats/TestStatistic.h; RooStats/TestStatSampler.h; RooStats/ToyMCImportanceSampler.h; RooStats/ToyMCSampler.h; RooStats/ToyMCStudy.h; RooStats/UniformProposal.h; RooStats/UpperLimitMCSModule.h; SOURCES; src/AsymptoticCalculator.cxx; src/BayesianCalculator.cxx; src/BernsteinCorrection.cxx; src/ConfidenceBelt.cxx; src/DetailedOutputAggregator.cxx; src/FeldmanCousins.cxx; src/FrequentistCalculator.cxx; src/Heaviside.cxx; src/HLFactory.cxx; src/HybridCalculator.cxx; src/HybridPlot.cxx; src/HybridResult.cxx; src/HypoTestCalculatorGeneric.cxx; src/HypoTestInverter.cxx; src/HypoTestInverterPlot.cxx; src/HypoTestInverterResult.cxx; src/HypoTestPlot.cxx; src/HypoTestResult.cxx; src/LikelihoodInterval.cxx; src/LikelihoodIntervalPlot.cxx; src/MarkovChain.cxx; src/MCMCCalculator.cxx; src/MCMCInterval.cxx; src/MCMCIntervalPlot.cxx; src/MetropolisHastings.cxx; src/NeymanConstruction.cxx; src/NumberCountingPdfFactory.cxx; src/NumberCountingUtils.cxx; src/PdfProposal.cxx; src/PointSetInterval.cxx; src/ProfileInspector.cxx; src/ProfileLikelihoodCalculator.cxx; src/ProfileLikelihoodTestStat.cxx; src/ProposalHelper.cxx; src/RatioOfProfiledLikelihoodsTestStat.cxx; src/RooStatsUtils.cxx; src/SamplingDistPlot.cxx; src/SamplingDistribution.cxx; src/SequentialProposal.cxx; src/SimpleInterval.cxx; src/SimpleLikelihoodRatioTestStat.cxx; src/SPlot.cxx; src/ToyMCImportanceSampler.cxx; src/ToyMCSampler.cxx; src/ToyMCStudy.cxx; src/UniformProposal.cxx; src/UpperLimitMCSModule.cxx; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; DEPENDENCIES; Core; RooFit; RooFitCore; Tree; RIO; Hist; Matrix; MathCore; Minuit; Foam; Graf; Gpad; ${EXTRA_DICT_OPTS}; ). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,roofit/roostats/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/CMakeLists.txt:487,Integrability,DEPEND,DEPENDENCIES,487,"ROOT_STANDARD_LIBRARY_PACKAGE(RooFitXRooFit; HEADERS; RooBrowser.h; XRooFit.h; RooFit/xRooFit/xRooFit.h; RooFit/xRooFit/xRooNode.h; RooFit/xRooFit/xRooNLLVar.h; RooFit/xRooFit/xRooHypoSpace.h; RooFit/xRooFit/xRooBrowser.h; SOURCES; src/Asymptotics.cxx; src/xRooBrowser.cxx; src/xRooFit.cxx; src/xRooHypoSpace.cxx; src/xRooNLLVar.cxx; src/xRooNode.cxx; src/xRooNode_interactive.cxx; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; HistFactory; RooFit; RooFitHS3; RooStats; FitPanel; DEPENDENCIES; Gui; Ged; RooFitCore; FitPanel; LINKDEF; inc/LinkDef.h; ). target_include_directories(RooFitXRooFit PRIVATE inc/RooFit); ",MatchSource.DOCS,roofit/xroofit/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/CMakeLists.txt:514,Testability,test,testHistFactory,514,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck CERN, 2019. if(NOT MSVC OR win_broken_tests); ROOT_ADD_GTEST(stressHistFactory stressHistFactory.cxx; LIBRARIES RooFitCore RooFit RooStats HistFactory; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/HistFactoryTest.tar ${CMAKE_CURRENT_SOURCE_DIR}/HistFactoryTest.tar); endif(). ROOT_ADD_GTEST(testHistFactory testHistFactory.cxx; LIBRARIES RooFitCore RooFit RooStats HistFactory RooFitHS3; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/ref_6.16_example_UsingC_channel1_meas_model.root ${CMAKE_CURRENT_SOURCE_DIR}/ref_6.16_example_UsingC_combined_meas_model.root). if(clad); target_compile_definitions(testHistFactory PUBLIC TEST_CODEGEN_AD); endif(clad). ROOT_ADD_GTEST(testParamHistFunc testParamHistFunc.cxx LIBRARIES RooFitCore HistFactory); ROOT_ADD_GTEST(testHistFactoryPlotting testHistFactoryPlotting.cxx LIBRARIES RooFitCore HistFactory); ",MatchSource.DOCS,roofit/histfactory/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/CMakeLists.txt:530,Testability,test,testHistFactory,530,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck CERN, 2019. if(NOT MSVC OR win_broken_tests); ROOT_ADD_GTEST(stressHistFactory stressHistFactory.cxx; LIBRARIES RooFitCore RooFit RooStats HistFactory; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/HistFactoryTest.tar ${CMAKE_CURRENT_SOURCE_DIR}/HistFactoryTest.tar); endif(). ROOT_ADD_GTEST(testHistFactory testHistFactory.cxx; LIBRARIES RooFitCore RooFit RooStats HistFactory RooFitHS3; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/ref_6.16_example_UsingC_channel1_meas_model.root ${CMAKE_CURRENT_SOURCE_DIR}/ref_6.16_example_UsingC_combined_meas_model.root). if(clad); target_compile_definitions(testHistFactory PUBLIC TEST_CODEGEN_AD); endif(clad). ROOT_ADD_GTEST(testParamHistFunc testParamHistFunc.cxx LIBRARIES RooFitCore HistFactory); ROOT_ADD_GTEST(testHistFactoryPlotting testHistFactoryPlotting.cxx LIBRARIES RooFitCore HistFactory); ",MatchSource.DOCS,roofit/histfactory/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/CMakeLists.txt:821,Testability,test,testHistFactory,821,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck CERN, 2019. if(NOT MSVC OR win_broken_tests); ROOT_ADD_GTEST(stressHistFactory stressHistFactory.cxx; LIBRARIES RooFitCore RooFit RooStats HistFactory; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/HistFactoryTest.tar ${CMAKE_CURRENT_SOURCE_DIR}/HistFactoryTest.tar); endif(). ROOT_ADD_GTEST(testHistFactory testHistFactory.cxx; LIBRARIES RooFitCore RooFit RooStats HistFactory RooFitHS3; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/ref_6.16_example_UsingC_channel1_meas_model.root ${CMAKE_CURRENT_SOURCE_DIR}/ref_6.16_example_UsingC_combined_meas_model.root). if(clad); target_compile_definitions(testHistFactory PUBLIC TEST_CODEGEN_AD); endif(clad). ROOT_ADD_GTEST(testParamHistFunc testParamHistFunc.cxx LIBRARIES RooFitCore HistFactory); ROOT_ADD_GTEST(testHistFactoryPlotting testHistFactoryPlotting.cxx LIBRARIES RooFitCore HistFactory); ",MatchSource.DOCS,roofit/histfactory/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/CMakeLists.txt:890,Testability,test,testParamHistFunc,890,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck CERN, 2019. if(NOT MSVC OR win_broken_tests); ROOT_ADD_GTEST(stressHistFactory stressHistFactory.cxx; LIBRARIES RooFitCore RooFit RooStats HistFactory; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/HistFactoryTest.tar ${CMAKE_CURRENT_SOURCE_DIR}/HistFactoryTest.tar); endif(). ROOT_ADD_GTEST(testHistFactory testHistFactory.cxx; LIBRARIES RooFitCore RooFit RooStats HistFactory RooFitHS3; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/ref_6.16_example_UsingC_channel1_meas_model.root ${CMAKE_CURRENT_SOURCE_DIR}/ref_6.16_example_UsingC_combined_meas_model.root). if(clad); target_compile_definitions(testHistFactory PUBLIC TEST_CODEGEN_AD); endif(clad). ROOT_ADD_GTEST(testParamHistFunc testParamHistFunc.cxx LIBRARIES RooFitCore HistFactory); ROOT_ADD_GTEST(testHistFactoryPlotting testHistFactoryPlotting.cxx LIBRARIES RooFitCore HistFactory); ",MatchSource.DOCS,roofit/histfactory/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/CMakeLists.txt:908,Testability,test,testParamHistFunc,908,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck CERN, 2019. if(NOT MSVC OR win_broken_tests); ROOT_ADD_GTEST(stressHistFactory stressHistFactory.cxx; LIBRARIES RooFitCore RooFit RooStats HistFactory; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/HistFactoryTest.tar ${CMAKE_CURRENT_SOURCE_DIR}/HistFactoryTest.tar); endif(). ROOT_ADD_GTEST(testHistFactory testHistFactory.cxx; LIBRARIES RooFitCore RooFit RooStats HistFactory RooFitHS3; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/ref_6.16_example_UsingC_channel1_meas_model.root ${CMAKE_CURRENT_SOURCE_DIR}/ref_6.16_example_UsingC_combined_meas_model.root). if(clad); target_compile_definitions(testHistFactory PUBLIC TEST_CODEGEN_AD); endif(clad). ROOT_ADD_GTEST(testParamHistFunc testParamHistFunc.cxx LIBRARIES RooFitCore HistFactory); ROOT_ADD_GTEST(testHistFactoryPlotting testHistFactoryPlotting.cxx LIBRARIES RooFitCore HistFactory); ",MatchSource.DOCS,roofit/histfactory/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/CMakeLists.txt:980,Testability,test,testHistFactoryPlotting,980,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck CERN, 2019. if(NOT MSVC OR win_broken_tests); ROOT_ADD_GTEST(stressHistFactory stressHistFactory.cxx; LIBRARIES RooFitCore RooFit RooStats HistFactory; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/HistFactoryTest.tar ${CMAKE_CURRENT_SOURCE_DIR}/HistFactoryTest.tar); endif(). ROOT_ADD_GTEST(testHistFactory testHistFactory.cxx; LIBRARIES RooFitCore RooFit RooStats HistFactory RooFitHS3; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/ref_6.16_example_UsingC_channel1_meas_model.root ${CMAKE_CURRENT_SOURCE_DIR}/ref_6.16_example_UsingC_combined_meas_model.root). if(clad); target_compile_definitions(testHistFactory PUBLIC TEST_CODEGEN_AD); endif(clad). ROOT_ADD_GTEST(testParamHistFunc testParamHistFunc.cxx LIBRARIES RooFitCore HistFactory); ROOT_ADD_GTEST(testHistFactoryPlotting testHistFactoryPlotting.cxx LIBRARIES RooFitCore HistFactory); ",MatchSource.DOCS,roofit/histfactory/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/CMakeLists.txt:1004,Testability,test,testHistFactoryPlotting,1004,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck CERN, 2019. if(NOT MSVC OR win_broken_tests); ROOT_ADD_GTEST(stressHistFactory stressHistFactory.cxx; LIBRARIES RooFitCore RooFit RooStats HistFactory; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/HistFactoryTest.tar ${CMAKE_CURRENT_SOURCE_DIR}/HistFactoryTest.tar); endif(). ROOT_ADD_GTEST(testHistFactory testHistFactory.cxx; LIBRARIES RooFitCore RooFit RooStats HistFactory RooFitHS3; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/ref_6.16_example_UsingC_channel1_meas_model.root ${CMAKE_CURRENT_SOURCE_DIR}/ref_6.16_example_UsingC_combined_meas_model.root). if(clad); target_compile_definitions(testHistFactory PUBLIC TEST_CODEGEN_AD); endif(clad). ROOT_ADD_GTEST(testParamHistFunc testParamHistFunc.cxx LIBRARIES RooFitCore HistFactory); ROOT_ADD_GTEST(testHistFactoryPlotting testHistFactoryPlotting.cxx LIBRARIES RooFitCore HistFactory); ",MatchSource.DOCS,roofit/histfactory/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/test/CMakeLists.txt:100,Integrability,INTERFACE,INTERFACE,100,"# @author Patrick Bos, NL eScience Center, 2019-2022. add_library(RooFit_multiprocess_testing_utils INTERFACE); target_link_libraries(RooFit_multiprocess_testing_utils INTERFACE RooFitCore RooBatchCompute); target_include_directories(RooFit_multiprocess_testing_utils INTERFACE ${RooFitMultiProcess_INCLUDE_DIR}). ROOT_ADD_GTEST(test_RooFit_MultiProcess_Job test_Job.cxx LIBRARIES RooFitMultiProcess Core); # link to the INTERFACE library separately, ROOT_EXECUTABLE cannot handle INTERFACE library properties:; target_link_libraries(test_RooFit_MultiProcess_Job RooFit_multiprocess_testing_utils). ROOT_ADD_GTEST(test_RooFit_MultiProcess_ProcessManager test_ProcessManager.cxx LIBRARIES RooFitMultiProcess); ROOT_ADD_GTEST(test_RooFit_MultiProcess_Messenger test_Messenger.cxx LIBRARIES RooFitMultiProcess). ROOT_ADD_GTEST(test_RooFit_MultiProcess_Queue test_Queue.cxx LIBRARIES RooFitMultiProcess); ROOT_ADD_GTEST(test_RooFit_MultiProcess_ProcessTimer test_ProcessTimer.cxx LIBRARIES RooFitMultiProcess); ROOT_ADD_GTEST(test_RooFit_MultiProcess_HeatmapAnalyzer test_HeatmapAnalyzer.cxx LIBRARIES RooFitMultiProcess; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/test_logs/p_0.json; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/test_logs/p_1.json; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/test_logs/p_999.json); ",MatchSource.DOCS,roofit/multiprocess/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/test/CMakeLists.txt:168,Integrability,INTERFACE,INTERFACE,168,"# @author Patrick Bos, NL eScience Center, 2019-2022. add_library(RooFit_multiprocess_testing_utils INTERFACE); target_link_libraries(RooFit_multiprocess_testing_utils INTERFACE RooFitCore RooBatchCompute); target_include_directories(RooFit_multiprocess_testing_utils INTERFACE ${RooFitMultiProcess_INCLUDE_DIR}). ROOT_ADD_GTEST(test_RooFit_MultiProcess_Job test_Job.cxx LIBRARIES RooFitMultiProcess Core); # link to the INTERFACE library separately, ROOT_EXECUTABLE cannot handle INTERFACE library properties:; target_link_libraries(test_RooFit_MultiProcess_Job RooFit_multiprocess_testing_utils). ROOT_ADD_GTEST(test_RooFit_MultiProcess_ProcessManager test_ProcessManager.cxx LIBRARIES RooFitMultiProcess); ROOT_ADD_GTEST(test_RooFit_MultiProcess_Messenger test_Messenger.cxx LIBRARIES RooFitMultiProcess). ROOT_ADD_GTEST(test_RooFit_MultiProcess_Queue test_Queue.cxx LIBRARIES RooFitMultiProcess); ROOT_ADD_GTEST(test_RooFit_MultiProcess_ProcessTimer test_ProcessTimer.cxx LIBRARIES RooFitMultiProcess); ROOT_ADD_GTEST(test_RooFit_MultiProcess_HeatmapAnalyzer test_HeatmapAnalyzer.cxx LIBRARIES RooFitMultiProcess; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/test_logs/p_0.json; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/test_logs/p_1.json; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/test_logs/p_999.json); ",MatchSource.DOCS,roofit/multiprocess/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/test/CMakeLists.txt:268,Integrability,INTERFACE,INTERFACE,268,"# @author Patrick Bos, NL eScience Center, 2019-2022. add_library(RooFit_multiprocess_testing_utils INTERFACE); target_link_libraries(RooFit_multiprocess_testing_utils INTERFACE RooFitCore RooBatchCompute); target_include_directories(RooFit_multiprocess_testing_utils INTERFACE ${RooFitMultiProcess_INCLUDE_DIR}). ROOT_ADD_GTEST(test_RooFit_MultiProcess_Job test_Job.cxx LIBRARIES RooFitMultiProcess Core); # link to the INTERFACE library separately, ROOT_EXECUTABLE cannot handle INTERFACE library properties:; target_link_libraries(test_RooFit_MultiProcess_Job RooFit_multiprocess_testing_utils). ROOT_ADD_GTEST(test_RooFit_MultiProcess_ProcessManager test_ProcessManager.cxx LIBRARIES RooFitMultiProcess); ROOT_ADD_GTEST(test_RooFit_MultiProcess_Messenger test_Messenger.cxx LIBRARIES RooFitMultiProcess). ROOT_ADD_GTEST(test_RooFit_MultiProcess_Queue test_Queue.cxx LIBRARIES RooFitMultiProcess); ROOT_ADD_GTEST(test_RooFit_MultiProcess_ProcessTimer test_ProcessTimer.cxx LIBRARIES RooFitMultiProcess); ROOT_ADD_GTEST(test_RooFit_MultiProcess_HeatmapAnalyzer test_HeatmapAnalyzer.cxx LIBRARIES RooFitMultiProcess; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/test_logs/p_0.json; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/test_logs/p_1.json; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/test_logs/p_999.json); ",MatchSource.DOCS,roofit/multiprocess/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/test/CMakeLists.txt:421,Integrability,INTERFACE,INTERFACE,421,"# @author Patrick Bos, NL eScience Center, 2019-2022. add_library(RooFit_multiprocess_testing_utils INTERFACE); target_link_libraries(RooFit_multiprocess_testing_utils INTERFACE RooFitCore RooBatchCompute); target_include_directories(RooFit_multiprocess_testing_utils INTERFACE ${RooFitMultiProcess_INCLUDE_DIR}). ROOT_ADD_GTEST(test_RooFit_MultiProcess_Job test_Job.cxx LIBRARIES RooFitMultiProcess Core); # link to the INTERFACE library separately, ROOT_EXECUTABLE cannot handle INTERFACE library properties:; target_link_libraries(test_RooFit_MultiProcess_Job RooFit_multiprocess_testing_utils). ROOT_ADD_GTEST(test_RooFit_MultiProcess_ProcessManager test_ProcessManager.cxx LIBRARIES RooFitMultiProcess); ROOT_ADD_GTEST(test_RooFit_MultiProcess_Messenger test_Messenger.cxx LIBRARIES RooFitMultiProcess). ROOT_ADD_GTEST(test_RooFit_MultiProcess_Queue test_Queue.cxx LIBRARIES RooFitMultiProcess); ROOT_ADD_GTEST(test_RooFit_MultiProcess_ProcessTimer test_ProcessTimer.cxx LIBRARIES RooFitMultiProcess); ROOT_ADD_GTEST(test_RooFit_MultiProcess_HeatmapAnalyzer test_HeatmapAnalyzer.cxx LIBRARIES RooFitMultiProcess; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/test_logs/p_0.json; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/test_logs/p_1.json; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/test_logs/p_999.json); ",MatchSource.DOCS,roofit/multiprocess/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/test/CMakeLists.txt:481,Integrability,INTERFACE,INTERFACE,481,"# @author Patrick Bos, NL eScience Center, 2019-2022. add_library(RooFit_multiprocess_testing_utils INTERFACE); target_link_libraries(RooFit_multiprocess_testing_utils INTERFACE RooFitCore RooBatchCompute); target_include_directories(RooFit_multiprocess_testing_utils INTERFACE ${RooFitMultiProcess_INCLUDE_DIR}). ROOT_ADD_GTEST(test_RooFit_MultiProcess_Job test_Job.cxx LIBRARIES RooFitMultiProcess Core); # link to the INTERFACE library separately, ROOT_EXECUTABLE cannot handle INTERFACE library properties:; target_link_libraries(test_RooFit_MultiProcess_Job RooFit_multiprocess_testing_utils). ROOT_ADD_GTEST(test_RooFit_MultiProcess_ProcessManager test_ProcessManager.cxx LIBRARIES RooFitMultiProcess); ROOT_ADD_GTEST(test_RooFit_MultiProcess_Messenger test_Messenger.cxx LIBRARIES RooFitMultiProcess). ROOT_ADD_GTEST(test_RooFit_MultiProcess_Queue test_Queue.cxx LIBRARIES RooFitMultiProcess); ROOT_ADD_GTEST(test_RooFit_MultiProcess_ProcessTimer test_ProcessTimer.cxx LIBRARIES RooFitMultiProcess); ROOT_ADD_GTEST(test_RooFit_MultiProcess_HeatmapAnalyzer test_HeatmapAnalyzer.cxx LIBRARIES RooFitMultiProcess; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/test_logs/p_0.json; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/test_logs/p_1.json; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/test_logs/p_999.json); ",MatchSource.DOCS,roofit/multiprocess/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:319,Testability,test,testRooBernstein,319,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:336,Testability,test,testRooBernstein,336,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:391,Testability,test,testRooBifurGauss,391,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:409,Testability,test,testRooBifurGauss,409,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:465,Testability,test,testRooCrystalBall,465,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:484,Testability,test,testRooCrystalBall,484,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:546,Testability,test,testRooExponential,546,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:565,Testability,test,testRooExponential,565,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:694,Testability,test,testRooGaussian,694,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:710,Testability,test,testRooGaussian,710,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:764,Testability,test,testRooJohnson,764,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:779,Testability,test,testRooJohnson,779,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:837,Testability,test,testRooKeysPdf,837,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:852,Testability,test,testRooKeysPdf,852,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:910,Testability,test,testRooLandau,910,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:924,Testability,test,testRooLandau,924,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:976,Testability,test,testRooParamHistFunc,976,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:997,Testability,test,testRooParamHistFunc,997,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:1061,Testability,test,testRooPoisson,1061,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:1076,Testability,test,testRooPoisson,1076,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:1144,Testability,test,testRooFit,1144,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:1155,Testability,test,testRooFit,1155,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:1212,Testability,test,test-fit-testRooFit,1212,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:1240,Testability,test,testRooFit,1240,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:1269,Testability,test,testFitPerf,1269,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:1281,Testability,test,testFitPerf,1281,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:1339,Testability,test,test-fit-testFitPerf,1339,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:1368,Testability,test,testFitPerf,1368,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:1406,Testability,test,testRooFit,1406,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:1417,Testability,test,testRooFit,1417,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:1465,Testability,test,test-fit-testRooFit,1465,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt:1493,Testability,test,testRooFit,1493,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Stephan Hageboeck, CERN, 2019. ROOT_ADD_GTEST(stabilityTests stabilityTests.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBernstein testRooBernstein.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooBifurGauss testRooBifurGauss.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooCrystalBall testRooCrystalBall.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooExponential testRooExponential.cxx; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/exponentialPdf.root; LIBRARIES Core RooFit); ROOT_ADD_GTEST(testRooGaussian testRooGaussian.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooJohnson testRooJohnson.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooKeysPdf testRooKeysPdf.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooLandau testRooLandau.cxx LIBRARIES RooFit); ROOT_ADD_GTEST(testRooParamHistFunc testRooParamHistFunc.cxx LIBRARIES Gpad RooFit); ROOT_ADD_GTEST(testRooPoisson testRooPoisson.cxx LIBRARIES RooFit). if(mathmore); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); ROOT_EXECUTABLE(testFitPerf testFitPerf.cxx LIBRARIES RooFit MathMore); ROOT_ADD_TEST(test-fit-testFitPerf COMMAND testFitPerf); else(); ROOT_EXECUTABLE(testRooFit testRooFit.cxx LIBRARIES RooFit); ROOT_ADD_TEST(test-fit-testRooFit COMMAND testRooFit); endif(). add_subdirectory(vectorisedPDFs); ",MatchSource.DOCS,roofit/roofit/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:296,Availability,avail,available,296,"if(CMAKE_CXX_COMPILER_ID STREQUAL Intel); if(DEFINED ENV{VTUNE_AMPLIFIER_2019_DIR}); set(VTUNE_DIR ENV{VTUNE_AMPLIFIER_2019_DIR}); elseif(DEFINED ENV{VTUNE_PROFILER_2020_DIR}); set(VTUNE_DIR ENV{VTUNE_PROFILER_2020_DIR}); endif(); # To be able to start/stop the vtune profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx;",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:428,Integrability,INTERFACE,INTERFACE,428,"if(CMAKE_CXX_COMPILER_ID STREQUAL Intel); if(DEFINED ENV{VTUNE_AMPLIFIER_2019_DIR}); set(VTUNE_DIR ENV{VTUNE_AMPLIFIER_2019_DIR}); elseif(DEFINED ENV{VTUNE_PROFILER_2020_DIR}); set(VTUNE_DIR ENV{VTUNE_PROFILER_2020_DIR}); endif(); # To be able to start/stop the vtune profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx;",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:660,Testability,test,testCompatMode,660,"if(CMAKE_CXX_COMPILER_ID STREQUAL Intel); if(DEFINED ENV{VTUNE_AMPLIFIER_2019_DIR}); set(VTUNE_DIR ENV{VTUNE_AMPLIFIER_2019_DIR}); elseif(DEFINED ENV{VTUNE_PROFILER_2020_DIR}); set(VTUNE_DIR ENV{VTUNE_PROFILER_2020_DIR}); endif(); # To be able to start/stop the vtune profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx;",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:675,Testability,test,testCompatMode,675,"if(CMAKE_CXX_COMPILER_ID STREQUAL Intel); if(DEFINED ENV{VTUNE_AMPLIFIER_2019_DIR}); set(VTUNE_DIR ENV{VTUNE_AMPLIFIER_2019_DIR}); elseif(DEFINED ENV{VTUNE_PROFILER_2020_DIR}); set(VTUNE_DIR ENV{VTUNE_PROFILER_2020_DIR}); endif(); # To be able to start/stop the vtune profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx;",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:741,Testability,test,testGauss,741,"if(CMAKE_CXX_COMPILER_ID STREQUAL Intel); if(DEFINED ENV{VTUNE_AMPLIFIER_2019_DIR}); set(VTUNE_DIR ENV{VTUNE_AMPLIFIER_2019_DIR}); elseif(DEFINED ENV{VTUNE_PROFILER_2020_DIR}); set(VTUNE_DIR ENV{VTUNE_PROFILER_2020_DIR}); endif(); # To be able to start/stop the vtune profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx;",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:751,Testability,test,testGauss,751,"if(CMAKE_CXX_COMPILER_ID STREQUAL Intel); if(DEFINED ENV{VTUNE_AMPLIFIER_2019_DIR}); set(VTUNE_DIR ENV{VTUNE_AMPLIFIER_2019_DIR}); elseif(DEFINED ENV{VTUNE_PROFILER_2020_DIR}); set(VTUNE_DIR ENV{VTUNE_PROFILER_2020_DIR}); endif(); # To be able to start/stop the vtune profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx;",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:812,Testability,test,testPoisson,812,"if(CMAKE_CXX_COMPILER_ID STREQUAL Intel); if(DEFINED ENV{VTUNE_AMPLIFIER_2019_DIR}); set(VTUNE_DIR ENV{VTUNE_AMPLIFIER_2019_DIR}); elseif(DEFINED ENV{VTUNE_PROFILER_2020_DIR}); set(VTUNE_DIR ENV{VTUNE_PROFILER_2020_DIR}); endif(); # To be able to start/stop the vtune profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx;",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:824,Testability,test,testPoisson,824,"if(CMAKE_CXX_COMPILER_ID STREQUAL Intel); if(DEFINED ENV{VTUNE_AMPLIFIER_2019_DIR}); set(VTUNE_DIR ENV{VTUNE_AMPLIFIER_2019_DIR}); elseif(DEFINED ENV{VTUNE_PROFILER_2020_DIR}); set(VTUNE_DIR ENV{VTUNE_PROFILER_2020_DIR}); endif(); # To be able to start/stop the vtune profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx;",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:887,Testability,test,testAddPdf,887,"if(CMAKE_CXX_COMPILER_ID STREQUAL Intel); if(DEFINED ENV{VTUNE_AMPLIFIER_2019_DIR}); set(VTUNE_DIR ENV{VTUNE_AMPLIFIER_2019_DIR}); elseif(DEFINED ENV{VTUNE_PROFILER_2020_DIR}); set(VTUNE_DIR ENV{VTUNE_PROFILER_2020_DIR}); endif(); # To be able to start/stop the vtune profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx;",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:898,Testability,test,testAddPdf,898,"if(CMAKE_CXX_COMPILER_ID STREQUAL Intel); if(DEFINED ENV{VTUNE_AMPLIFIER_2019_DIR}); set(VTUNE_DIR ENV{VTUNE_AMPLIFIER_2019_DIR}); elseif(DEFINED ENV{VTUNE_PROFILER_2020_DIR}); set(VTUNE_DIR ENV{VTUNE_PROFILER_2020_DIR}); endif(); # To be able to start/stop the vtune profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx;",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:960,Testability,test,testExponential,960,"if(CMAKE_CXX_COMPILER_ID STREQUAL Intel); if(DEFINED ENV{VTUNE_AMPLIFIER_2019_DIR}); set(VTUNE_DIR ENV{VTUNE_AMPLIFIER_2019_DIR}); elseif(DEFINED ENV{VTUNE_PROFILER_2020_DIR}); set(VTUNE_DIR ENV{VTUNE_PROFILER_2020_DIR}); endif(); # To be able to start/stop the vtune profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx;",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:976,Testability,test,testExponential,976,"if(CMAKE_CXX_COMPILER_ID STREQUAL Intel); if(DEFINED ENV{VTUNE_AMPLIFIER_2019_DIR}); set(VTUNE_DIR ENV{VTUNE_AMPLIFIER_2019_DIR}); elseif(DEFINED ENV{VTUNE_PROFILER_2020_DIR}); set(VTUNE_DIR ENV{VTUNE_PROFILER_2020_DIR}); endif(); # To be able to start/stop the vtune profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx;",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1043,Testability,test,testNestedPDFs,1043,"L Intel); if(DEFINED ENV{VTUNE_AMPLIFIER_2019_DIR}); set(VTUNE_DIR ENV{VTUNE_AMPLIFIER_2019_DIR}); elseif(DEFINED ENV{VTUNE_PROFILER_2020_DIR}); set(VTUNE_DIR ENV{VTUNE_PROFILER_2020_DIR}); endif(); # To be able to start/stop the vtune profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); ",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1058,Testability,test,testNestedPDFs,1058,"L Intel); if(DEFINED ENV{VTUNE_AMPLIFIER_2019_DIR}); set(VTUNE_DIR ENV{VTUNE_AMPLIFIER_2019_DIR}); elseif(DEFINED ENV{VTUNE_PROFILER_2020_DIR}); set(VTUNE_DIR ENV{VTUNE_PROFILER_2020_DIR}); endif(); # To be able to start/stop the vtune profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); ",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1124,Testability,test,testProductPdf,1124,"IFIER_2019_DIR}); elseif(DEFINED ENV{VTUNE_PROFILER_2020_DIR}); set(VTUNE_DIR ENV{VTUNE_PROFILER_2020_DIR}); endif(); # To be able to start/stop the vtune profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES ",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1139,Testability,test,testProductPdf,1139,"IFIER_2019_DIR}); elseif(DEFINED ENV{VTUNE_PROFILER_2020_DIR}); set(VTUNE_DIR ENV{VTUNE_PROFILER_2020_DIR}); endif(); # To be able to start/stop the vtune profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES ",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1205,Testability,test,testJohnson,1205,"ENV{VTUNE_PROFILER_2020_DIR}); endif(); # To be able to start/stop the vtune profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1217,Testability,test,testJohnson,1217,"ENV{VTUNE_PROFILER_2020_DIR}); endif(); # To be able to start/stop the vtune profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1280,Testability,test,testLandau,1280,"ne profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testD",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1291,Testability,test,testLandau,1291,"ne profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testD",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1353,Testability,test,testBukin,1353,"ctorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(te",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1363,Testability,test,testBukin,1363,"ctorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(te",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1424,Testability,test,testChebychev,1424,"torisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTES",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1438,Testability,test,testChebychev,1438,"torisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTES",MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1503,Testability,test,testPolynomial,1503,rary(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_G,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1518,Testability,test,testPolynomial,1518,rary(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_G,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1584,Testability,test,testBernstein,1584,ctorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTES,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1598,Testability,test,testBernstein,1598,ctorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTES,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1663,Testability,test,testArgusBG,1663,_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1675,Testability,test,testArgusBG,1675,_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1738,Testability,test,testBifurGauss,1738,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1753,Testability,test,testBifurGauss,1753,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1819,Testability,test,testBreitWigner,1819,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1835,Testability,test,testBreitWigner,1835,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1902,Testability,test,testCBShape,1902,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1914,Testability,test,testCBShape,1914,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1977,Testability,test,testGamma,1977,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1987,Testability,test,testGamma,1987,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:2073,Testability,test,testLegendre,2073,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:2086,Testability,test,testLegendre,2086,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:2176,Testability,test,testChiSquarePdf,2176,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:2193,Testability,test,testChiSquarePdf,2193,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:2336,Testability,test,testLognormal,2336,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:2350,Testability,test,testLognormal,2350,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:2415,Testability,test,testNovosibirsk,2415,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:2431,Testability,test,testNovosibirsk,2431,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:2498,Testability,test,testVoigtian,2498,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:2511,Testability,test,testVoigtian,2511,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:2575,Testability,test,testGaussBinned,2575,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:2591,Testability,test,testGaussBinned,2591,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:2571,Availability,error,error,2571,"estRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistic",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:2595,Availability,error,error,2595,"estRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistic",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:2985,Availability,error,error,2985,"llectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc test",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:6009,Availability,Error,Error,6009,"ST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRooFit.cxx LIBRARIES RooFit Gpad ${ROOFITMORE_LIBRARIES}); if(mathmore); target_compile_definitions(stressRooFit PRIVATE ROOFITMORE); endif(). configure_file(stressRooFit_ref.root stressRooFit_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroofit-legacy COMMAND stressRooFit -b legacy FAILREGEX ""FAILED|Error in""); endif(); ROOT_ADD_TEST(test-stressroofit-cpu COMMAND stressRooFit -b cpu FAILREGEX ""FAILED|Error in""); if(cuda); ROOT_ADD_TEST(test-stressroofit-cuda COMMAND stressRooFit -b cuda FAILREGEX ""FAILED|Error in""); endif(); if(dataframe); ROOT_ADD_GTEST(testActionHelpers testActionHelpers.cxx LIBRARIES ROOTDataFrame RooFitCore); endif(); ",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:6112,Availability,Error,Error,6112,"ST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRooFit.cxx LIBRARIES RooFit Gpad ${ROOFITMORE_LIBRARIES}); if(mathmore); target_compile_definitions(stressRooFit PRIVATE ROOFITMORE); endif(). configure_file(stressRooFit_ref.root stressRooFit_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroofit-legacy COMMAND stressRooFit -b legacy FAILREGEX ""FAILED|Error in""); endif(); ROOT_ADD_TEST(test-stressroofit-cpu COMMAND stressRooFit -b cpu FAILREGEX ""FAILED|Error in""); if(cuda); ROOT_ADD_TEST(test-stressroofit-cuda COMMAND stressRooFit -b cuda FAILREGEX ""FAILED|Error in""); endif(); if(dataframe); ROOT_ADD_GTEST(testActionHelpers testActionHelpers.cxx LIBRARIES ROOTDataFrame RooFitCore); endif(); ",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:6218,Availability,Error,Error,6218,"ST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRooFit.cxx LIBRARIES RooFit Gpad ${ROOFITMORE_LIBRARIES}); if(mathmore); target_compile_definitions(stressRooFit PRIVATE ROOFITMORE); endif(). configure_file(stressRooFit_ref.root stressRooFit_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroofit-legacy COMMAND stressRooFit -b legacy FAILREGEX ""FAILED|Error in""); endif(); ROOT_ADD_TEST(test-stressroofit-cpu COMMAND stressRooFit -b cpu FAILREGEX ""FAILED|Error in""); if(cuda); ROOT_ADD_TEST(test-stressroofit-cuda COMMAND stressRooFit -b cuda FAILREGEX ""FAILED|Error in""); endif(); if(dataframe); ROOT_ADD_GTEST(testActionHelpers testActionHelpers.cxx LIBRARIES ROOTDataFrame RooFitCore); endif(); ",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:295,Testability,test,testSimple,295,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRo",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:306,Testability,test,testSimple,306,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRo",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:359,Testability,test,testRooAddPdf,359,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRo",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:373,Testability,test,testRooAddPdf,373,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRo",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:438,Testability,test,testRooCacheManager,438,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRo",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:458,Testability,test,testRooCacheManager,458,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRo",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:520,Testability,test,testRooCategory,520,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRo",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:536,Testability,test,testRooCategory,536,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRo",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:594,Testability,test,testWorkspace,594,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRo",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:608,Testability,test,testWorkspace,608,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRo",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:673,Testability,test,testRooDataHist,673,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRo",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:689,Testability,test,testRooDataHist,689,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRo",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:911,Testability,test,testRooBinSamplingPdf,911,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRo",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:933,Testability,test,testRooBinSamplingPdf,933,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRo",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:997,Testability,test,testRooWrapperPdf,997,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRo",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:1015,Testability,test,testRooWrapperPdf,1015,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRo",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:1080,Testability,test,testGenericPdf,1080," reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:1095,Testability,test,testGenericPdf,1095," reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:1152,Testability,test,testRooAbsPdf,1152,"list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:1166,Testability,test,testRooAbsPdf,1166,"list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:1222,Testability,test,testRooAbsCollection,1222,"N, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COP",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:1243,Testability,test,testRooAbsCollection,1243,"N, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COP",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:1306,Testability,test,testRooDataSet,1306,imple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:1321,Testability,test,testRooDataSet,1321,imple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:1462,Testability,test,testRooFormula,1462,acheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRoo,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:1477,Testability,test,testRooFormula,1477,acheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRoo,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:1523,Testability,Test,TestSupport,1523,estRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Window,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:1552,Testability,test,testRooProdPdf,1552,estRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Window,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:1567,Testability,test,testRooProdPdf,1567,estRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Window,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:1624,Testability,test,testProxiesAndCategories,1624,BRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0x,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:1649,Testability,test,testProxiesAndCategories,1649,BRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0x,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:1995,Testability,test,testRooCollectionProxy,1995,"pperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion fa",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:2018,Testability,test,testRooCollectionProxy,2018,"pperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion fa",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:2163,Testability,test,testRooRealVar,2163,"estRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\inter",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:2178,Testability,test,testRooRealVar,2178,"estRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\inter",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:2307,Testability,test,testRooAbsReal,2307,"ataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooF",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:2322,Testability,test,testRooAbsReal,2322,"ataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooF",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:2651,Testability,test,test,2651,"estRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistic",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:2764,Testability,test,testRooRealIntegral,2764,"T_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL T",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:2784,Testability,test,testRooRealIntegral,2784,"T_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL T",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:2995,Testability,Assert,Assertion,2995,"llectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc test",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3247,Testability,test,testRooFuncWrapper,3247,"NT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitC",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3266,Testability,test,testRooFuncWrapper,3266,"NT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitC",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3364,Testability,test,testGlobalObservables,3364,"ARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3386,Testability,test,testGlobalObservables,3386,"ARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3450,Testability,test,testInterface,3450,"RCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTrut",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3464,Testability,Test,TestStatistics,3464,"RCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTrut",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3479,Testability,test,testInterface,3479,"RCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTrut",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3535,Testability,test,testLikelihoodSerial,3535,"ause it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error tes",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3556,Testability,Test,TestStatistics,3556,"ause it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error tes",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3571,Testability,test,testLikelihoodSerial,3571,"ause it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error tes",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3634,Testability,test,testNaNPacker,3634,"xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTe",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3648,Testability,test,testNaNPacker,3648,"xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTe",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3720,Testability,test,testRooAbsL,3720,"h gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinim",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3732,Testability,Test,TestStatistics,3732,"h gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinim",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3747,Testability,test,testRooAbsL,3747,"h gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinim",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3801,Testability,test,testRooCurve,3801,"alIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(te",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3814,Testability,test,testRooCurve,3814,"alIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(te",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3869,Testability,test,testRooHist,3869,"C OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMu",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3881,Testability,test,testRooHist,3881,"C OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMu",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3935,Testability,test,testRooHistPdf,3935,"ual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3950,Testability,test,testRooHistPdf,3950,"ual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4007,Testability,test,testRooPolyFunc,4007,"on failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelih",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4023,Testability,test,testRooPolyFunc,4023,"on failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelih",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4086,Testability,test,testRooRealL,4086,"ontext here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMulti",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4099,Testability,Test,TestStatistics,4099,"ontext here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMulti",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4114,Testability,test,testRooRealL,4114,"ontext here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMulti",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4169,Testability,test,testRooRombergIntegrator,4169,"\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradient",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4194,Testability,test,testRooRombergIntegrator,4194,"\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradient",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4270,Testability,test,testRooSTLRefCountList,4270,estRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikeliho,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4293,Testability,test,testRooSTLRefCountList,4293,estRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikeliho,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4358,Testability,test,testRooSimultaneous,4358,_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); ta,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4378,Testability,test,testRooSimultaneous,4378,_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); ta,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4440,Testability,test,testRooTruthModel,4440,OT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_Tes,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4458,Testability,test,testRooTruthModel,4458,OT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_Tes,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4602,Testability,test,testTestStatistics,4602,IBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit-----------------------------------------,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4621,Testability,test,testTestStatistics,4621,IBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit-----------------------------------------,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4682,Testability,test,testRooMinimizer,4682,oFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRo,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4699,Testability,test,testRooMinimizer,4699,oFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRo,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4791,Testability,test,testTestStatisticsPlot,4791,itCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRooFit.cxx LIBRARIES RooFit Gpad ${ROOFITMORE_LIBRARIES}); if(mathmore); target_compile_definitions(s,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4814,Testability,Test,TestStatistics,4814,itCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRooFit.cxx LIBRARIES RooFit Gpad ${ROOFITMORE_LIBRARIES}); if(mathmore); target_compile_definitions(s,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4829,Testability,test,testPlot,4829,itCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRooFit.cxx LIBRARIES RooFit Gpad ${ROOFITMORE_LIBRARIES}); if(mathmore); target_compile_definitions(s,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4935,Testability,Test,TestStatistics,4935,IES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRooFit.cxx LIBRARIES RooFit Gpad ${ROOFITMORE_LIBRARIES}); if(mathmore); target_compile_definitions(stressRooFit PRIVATE ROOFITMORE); endif(). configure_file(stressRooFit_ref.root stressRooFit_ref.root COPYONLY); if(roofit_legac,MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4991,Testability,test,testLikelihoodGradientJob,4991,"oPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRooFit.cxx LIBRARIES RooFit Gpad ${ROOFITMORE_LIBRARIES}); if(mathmore); target_compile_definitions(stressRooFit PRIVATE ROOFITMORE); endif(). configure_file(stressRooFit_ref.root stressRooFit_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroofit-legacy COMMAND stressRooFit -b legacy FAILREGEX ""FAILED|Error",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:5017,Testability,Test,TestStatistics,5017,"oPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRooFit.cxx LIBRARIES RooFit Gpad ${ROOFITMORE_LIBRARIES}); if(mathmore); target_compile_definitions(stressRooFit PRIVATE ROOFITMORE); endif(). configure_file(stressRooFit_ref.root stressRooFit_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroofit-legacy COMMAND stressRooFit -b legacy FAILREGEX ""FAILED|Error",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:5032,Testability,test,testLikelihoodGradientJob,5032,"oPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRooFit.cxx LIBRARIES RooFit Gpad ${ROOFITMORE_LIBRARIES}); if(mathmore); target_compile_definitions(stressRooFit PRIVATE ROOFITMORE); endif(). configure_file(stressRooFit_ref.root stressRooFit_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroofit-legacy COMMAND stressRooFit -b legacy FAILREGEX ""FAILED|Error",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:5110,Testability,Test,TestSupport,5110,"gIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRooFit.cxx LIBRARIES RooFit Gpad ${ROOFITMORE_LIBRARIES}); if(mathmore); target_compile_definitions(stressRooFit PRIVATE ROOFITMORE); endif(). configure_file(stressRooFit_ref.root stressRooFit_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroofit-legacy COMMAND stressRooFit -b legacy FAILREGEX ""FAILED|Error in""); endif(); ROOT_ADD_TEST(test-stressroofit-cpu COMMAND stressRooFit -b cpu FAILREGEX ""FAILED|Error in""); if(cuda); ROOT_ADD_TEST(test-stressroofit-cuda COMMAND stre",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:5151,Testability,test,testLikelihoodGradientJob,5151,"gIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRooFit.cxx LIBRARIES RooFit Gpad ${ROOFITMORE_LIBRARIES}); if(mathmore); target_compile_definitions(stressRooFit PRIVATE ROOFITMORE); endif(). configure_file(stressRooFit_ref.root stressRooFit_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroofit-legacy COMMAND stressRooFit -b legacy FAILREGEX ""FAILED|Error in""); endif(); ROOT_ADD_TEST(test-stressroofit-cpu COMMAND stressRooFit -b cpu FAILREGEX ""FAILED|Error in""); if(cuda); ROOT_ADD_TEST(test-stressroofit-cuda COMMAND stre",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:5256,Testability,test,testLikelihoodJob,5256,"gIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRooFit.cxx LIBRARIES RooFit Gpad ${ROOFITMORE_LIBRARIES}); if(mathmore); target_compile_definitions(stressRooFit PRIVATE ROOFITMORE); endif(). configure_file(stressRooFit_ref.root stressRooFit_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroofit-legacy COMMAND stressRooFit -b legacy FAILREGEX ""FAILED|Error in""); endif(); ROOT_ADD_TEST(test-stressroofit-cpu COMMAND stressRooFit -b cpu FAILREGEX ""FAILED|Error in""); if(cuda); ROOT_ADD_TEST(test-stressroofit-cuda COMMAND stre",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:5274,Testability,Test,TestStatistics,5274,"gIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRooFit.cxx LIBRARIES RooFit Gpad ${ROOFITMORE_LIBRARIES}); if(mathmore); target_compile_definitions(stressRooFit PRIVATE ROOFITMORE); endif(). configure_file(stressRooFit_ref.root stressRooFit_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroofit-legacy COMMAND stressRooFit -b legacy FAILREGEX ""FAILED|Error in""); endif(); ROOT_ADD_TEST(test-stressroofit-cpu COMMAND stressRooFit -b cpu FAILREGEX ""FAILED|Error in""); if(cuda); ROOT_ADD_TEST(test-stressroofit-cuda COMMAND stre",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:5289,Testability,test,testLikelihoodJob,5289,"gIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRooFit.cxx LIBRARIES RooFit Gpad ${ROOFITMORE_LIBRARIES}); if(mathmore); target_compile_definitions(stressRooFit PRIVATE ROOFITMORE); endif(). configure_file(stressRooFit_ref.root stressRooFit_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroofit-legacy COMMAND stressRooFit -b legacy FAILREGEX ""FAILED|Error in""); endif(); ROOT_ADD_TEST(test-stressroofit-cpu COMMAND stressRooFit -b cpu FAILREGEX ""FAILED|Error in""); if(cuda); ROOT_ADD_TEST(test-stressroofit-cuda COMMAND stre",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:5382,Testability,test,testLikelihoodJob,5382,"ST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRooFit.cxx LIBRARIES RooFit Gpad ${ROOFITMORE_LIBRARIES}); if(mathmore); target_compile_definitions(stressRooFit PRIVATE ROOFITMORE); endif(). configure_file(stressRooFit_ref.root stressRooFit_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroofit-legacy COMMAND stressRooFit -b legacy FAILREGEX ""FAILED|Error in""); endif(); ROOT_ADD_TEST(test-stressroofit-cpu COMMAND stressRooFit -b cpu FAILREGEX ""FAILED|Error in""); if(cuda); ROOT_ADD_TEST(test-stressroofit-cuda COMMAND stressRooFit -b cuda FAILREGEX ""FAILED|Error in""); endif(); if(dataframe); ROOT_ADD_GTEST(testActionHelpers testActionHelpers.cxx LIBRARIES ROOTDataFrame RooFitCore); endif(); ",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:5935,Testability,test,test-stressroofit-legacy,5935,"ST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRooFit.cxx LIBRARIES RooFit Gpad ${ROOFITMORE_LIBRARIES}); if(mathmore); target_compile_definitions(stressRooFit PRIVATE ROOFITMORE); endif(). configure_file(stressRooFit_ref.root stressRooFit_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroofit-legacy COMMAND stressRooFit -b legacy FAILREGEX ""FAILED|Error in""); endif(); ROOT_ADD_TEST(test-stressroofit-cpu COMMAND stressRooFit -b cpu FAILREGEX ""FAILED|Error in""); if(cuda); ROOT_ADD_TEST(test-stressroofit-cuda COMMAND stressRooFit -b cuda FAILREGEX ""FAILED|Error in""); endif(); if(dataframe); ROOT_ADD_GTEST(testActionHelpers testActionHelpers.cxx LIBRARIES ROOTDataFrame RooFitCore); endif(); ",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:6044,Testability,test,test-stressroofit-cpu,6044,"ST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRooFit.cxx LIBRARIES RooFit Gpad ${ROOFITMORE_LIBRARIES}); if(mathmore); target_compile_definitions(stressRooFit PRIVATE ROOFITMORE); endif(). configure_file(stressRooFit_ref.root stressRooFit_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroofit-legacy COMMAND stressRooFit -b legacy FAILREGEX ""FAILED|Error in""); endif(); ROOT_ADD_TEST(test-stressroofit-cpu COMMAND stressRooFit -b cpu FAILREGEX ""FAILED|Error in""); if(cuda); ROOT_ADD_TEST(test-stressroofit-cuda COMMAND stressRooFit -b cuda FAILREGEX ""FAILED|Error in""); endif(); if(dataframe); ROOT_ADD_GTEST(testActionHelpers testActionHelpers.cxx LIBRARIES ROOTDataFrame RooFitCore); endif(); ",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:6148,Testability,test,test-stressroofit-cuda,6148,"ST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRooFit.cxx LIBRARIES RooFit Gpad ${ROOFITMORE_LIBRARIES}); if(mathmore); target_compile_definitions(stressRooFit PRIVATE ROOFITMORE); endif(). configure_file(stressRooFit_ref.root stressRooFit_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroofit-legacy COMMAND stressRooFit -b legacy FAILREGEX ""FAILED|Error in""); endif(); ROOT_ADD_TEST(test-stressroofit-cpu COMMAND stressRooFit -b cpu FAILREGEX ""FAILED|Error in""); if(cuda); ROOT_ADD_TEST(test-stressroofit-cuda COMMAND stressRooFit -b cuda FAILREGEX ""FAILED|Error in""); endif(); if(dataframe); ROOT_ADD_GTEST(testActionHelpers testActionHelpers.cxx LIBRARIES ROOTDataFrame RooFitCore); endif(); ",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:6269,Testability,test,testActionHelpers,6269,"ST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRooFit.cxx LIBRARIES RooFit Gpad ${ROOFITMORE_LIBRARIES}); if(mathmore); target_compile_definitions(stressRooFit PRIVATE ROOFITMORE); endif(). configure_file(stressRooFit_ref.root stressRooFit_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroofit-legacy COMMAND stressRooFit -b legacy FAILREGEX ""FAILED|Error in""); endif(); ROOT_ADD_TEST(test-stressroofit-cpu COMMAND stressRooFit -b cpu FAILREGEX ""FAILED|Error in""); if(cuda); ROOT_ADD_TEST(test-stressroofit-cuda COMMAND stressRooFit -b cuda FAILREGEX ""FAILED|Error in""); endif(); if(dataframe); ROOT_ADD_GTEST(testActionHelpers testActionHelpers.cxx LIBRARIES ROOTDataFrame RooFitCore); endif(); ",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:6287,Testability,test,testActionHelpers,6287,"ST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRooFit.cxx LIBRARIES RooFit Gpad ${ROOFITMORE_LIBRARIES}); if(mathmore); target_compile_definitions(stressRooFit PRIVATE ROOFITMORE); endif(). configure_file(stressRooFit_ref.root stressRooFit_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroofit-legacy COMMAND stressRooFit -b legacy FAILREGEX ""FAILED|Error in""); endif(); ROOT_ADD_TEST(test-stressroofit-cpu COMMAND stressRooFit -b cpu FAILREGEX ""FAILED|Error in""); if(cuda); ROOT_ADD_TEST(test-stressroofit-cuda COMMAND stressRooFit -b cuda FAILREGEX ""FAILED|Error in""); endif(); if(dataframe); ROOT_ADD_GTEST(testActionHelpers testActionHelpers.cxx LIBRARIES ROOTDataFrame RooFitCore); endif(); ",MatchSource.DOCS,roofit/roofitcore/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt:685,Availability,Error,Error,685,"ROOT_ADD_GTEST(testHypoTestInvResult testHypoTestInvResult.cxx; LIBRARIES RooStats; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testHypoTestInvResult_1.root); ROOT_ADD_GTEST(testSPlot testSPlot.cxx LIBRARIES RooStats). #--stressRooStats----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooStats stressRooStats.cxx LIBRARIES RooStats Gpad Net); if(mathmore); target_compile_definitions(stressRooStats PRIVATE ROOFITMORE); endif(). configure_file(stressRooStats_ref.root stressRooStats_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy COMMAND stressRooStats -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu COMMAND stressRooStats -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); if(cuda); ROOT_ADD_TEST(test-stressroostats-cuda COMMAND stressRooStats -b cuda FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy-minuit2 COMMAND stressRooStats -minim Minuit2 -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu-minuit2 COMMAND stressRooStats -minim Minuit2 -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); ",MatchSource.DOCS,roofit/roostats/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt:808,Availability,Error,Error,808,"ROOT_ADD_GTEST(testHypoTestInvResult testHypoTestInvResult.cxx; LIBRARIES RooStats; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testHypoTestInvResult_1.root); ROOT_ADD_GTEST(testSPlot testSPlot.cxx LIBRARIES RooStats). #--stressRooStats----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooStats stressRooStats.cxx LIBRARIES RooStats Gpad Net); if(mathmore); target_compile_definitions(stressRooStats PRIVATE ROOFITMORE); endif(). configure_file(stressRooStats_ref.root stressRooStats_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy COMMAND stressRooStats -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu COMMAND stressRooStats -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); if(cuda); ROOT_ADD_TEST(test-stressroostats-cuda COMMAND stressRooStats -b cuda FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy-minuit2 COMMAND stressRooStats -minim Minuit2 -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu-minuit2 COMMAND stressRooStats -minim Minuit2 -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); ",MatchSource.DOCS,roofit/roostats/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt:934,Availability,Error,Error,934,"ROOT_ADD_GTEST(testHypoTestInvResult testHypoTestInvResult.cxx; LIBRARIES RooStats; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testHypoTestInvResult_1.root); ROOT_ADD_GTEST(testSPlot testSPlot.cxx LIBRARIES RooStats). #--stressRooStats----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooStats stressRooStats.cxx LIBRARIES RooStats Gpad Net); if(mathmore); target_compile_definitions(stressRooStats PRIVATE ROOFITMORE); endif(). configure_file(stressRooStats_ref.root stressRooStats_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy COMMAND stressRooStats -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu COMMAND stressRooStats -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); if(cuda); ROOT_ADD_TEST(test-stressroostats-cuda COMMAND stressRooStats -b cuda FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy-minuit2 COMMAND stressRooStats -minim Minuit2 -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu-minuit2 COMMAND stressRooStats -minim Minuit2 -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); ",MatchSource.DOCS,roofit/roostats/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt:1118,Availability,Error,Error,1118,"ROOT_ADD_GTEST(testHypoTestInvResult testHypoTestInvResult.cxx; LIBRARIES RooStats; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testHypoTestInvResult_1.root); ROOT_ADD_GTEST(testSPlot testSPlot.cxx LIBRARIES RooStats). #--stressRooStats----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooStats stressRooStats.cxx LIBRARIES RooStats Gpad Net); if(mathmore); target_compile_definitions(stressRooStats PRIVATE ROOFITMORE); endif(). configure_file(stressRooStats_ref.root stressRooStats_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy COMMAND stressRooStats -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu COMMAND stressRooStats -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); if(cuda); ROOT_ADD_TEST(test-stressroostats-cuda COMMAND stressRooStats -b cuda FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy-minuit2 COMMAND stressRooStats -minim Minuit2 -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu-minuit2 COMMAND stressRooStats -minim Minuit2 -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); ",MatchSource.DOCS,roofit/roostats/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt:1264,Availability,Error,Error,1264,"ROOT_ADD_GTEST(testHypoTestInvResult testHypoTestInvResult.cxx; LIBRARIES RooStats; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testHypoTestInvResult_1.root); ROOT_ADD_GTEST(testSPlot testSPlot.cxx LIBRARIES RooStats). #--stressRooStats----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooStats stressRooStats.cxx LIBRARIES RooStats Gpad Net); if(mathmore); target_compile_definitions(stressRooStats PRIVATE ROOFITMORE); endif(). configure_file(stressRooStats_ref.root stressRooStats_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy COMMAND stressRooStats -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu COMMAND stressRooStats -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); if(cuda); ROOT_ADD_TEST(test-stressroostats-cuda COMMAND stressRooStats -b cuda FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy-minuit2 COMMAND stressRooStats -minim Minuit2 -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu-minuit2 COMMAND stressRooStats -minim Minuit2 -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); ",MatchSource.DOCS,roofit/roostats/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt:15,Testability,test,testHypoTestInvResult,15,"ROOT_ADD_GTEST(testHypoTestInvResult testHypoTestInvResult.cxx; LIBRARIES RooStats; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testHypoTestInvResult_1.root); ROOT_ADD_GTEST(testSPlot testSPlot.cxx LIBRARIES RooStats). #--stressRooStats----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooStats stressRooStats.cxx LIBRARIES RooStats Gpad Net); if(mathmore); target_compile_definitions(stressRooStats PRIVATE ROOFITMORE); endif(). configure_file(stressRooStats_ref.root stressRooStats_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy COMMAND stressRooStats -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu COMMAND stressRooStats -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); if(cuda); ROOT_ADD_TEST(test-stressroostats-cuda COMMAND stressRooStats -b cuda FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy-minuit2 COMMAND stressRooStats -minim Minuit2 -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu-minuit2 COMMAND stressRooStats -minim Minuit2 -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); ",MatchSource.DOCS,roofit/roostats/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt:37,Testability,test,testHypoTestInvResult,37,"ROOT_ADD_GTEST(testHypoTestInvResult testHypoTestInvResult.cxx; LIBRARIES RooStats; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testHypoTestInvResult_1.root); ROOT_ADD_GTEST(testSPlot testSPlot.cxx LIBRARIES RooStats). #--stressRooStats----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooStats stressRooStats.cxx LIBRARIES RooStats Gpad Net); if(mathmore); target_compile_definitions(stressRooStats PRIVATE ROOFITMORE); endif(). configure_file(stressRooStats_ref.root stressRooStats_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy COMMAND stressRooStats -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu COMMAND stressRooStats -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); if(cuda); ROOT_ADD_TEST(test-stressroostats-cuda COMMAND stressRooStats -b cuda FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy-minuit2 COMMAND stressRooStats -minim Minuit2 -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu-minuit2 COMMAND stressRooStats -minim Minuit2 -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); ",MatchSource.DOCS,roofit/roostats/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt:175,Testability,test,testSPlot,175,"ROOT_ADD_GTEST(testHypoTestInvResult testHypoTestInvResult.cxx; LIBRARIES RooStats; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testHypoTestInvResult_1.root); ROOT_ADD_GTEST(testSPlot testSPlot.cxx LIBRARIES RooStats). #--stressRooStats----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooStats stressRooStats.cxx LIBRARIES RooStats Gpad Net); if(mathmore); target_compile_definitions(stressRooStats PRIVATE ROOFITMORE); endif(). configure_file(stressRooStats_ref.root stressRooStats_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy COMMAND stressRooStats -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu COMMAND stressRooStats -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); if(cuda); ROOT_ADD_TEST(test-stressroostats-cuda COMMAND stressRooStats -b cuda FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy-minuit2 COMMAND stressRooStats -minim Minuit2 -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu-minuit2 COMMAND stressRooStats -minim Minuit2 -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); ",MatchSource.DOCS,roofit/roostats/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt:185,Testability,test,testSPlot,185,"ROOT_ADD_GTEST(testHypoTestInvResult testHypoTestInvResult.cxx; LIBRARIES RooStats; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testHypoTestInvResult_1.root); ROOT_ADD_GTEST(testSPlot testSPlot.cxx LIBRARIES RooStats). #--stressRooStats----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooStats stressRooStats.cxx LIBRARIES RooStats Gpad Net); if(mathmore); target_compile_definitions(stressRooStats PRIVATE ROOFITMORE); endif(). configure_file(stressRooStats_ref.root stressRooStats_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy COMMAND stressRooStats -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu COMMAND stressRooStats -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); if(cuda); ROOT_ADD_TEST(test-stressroostats-cuda COMMAND stressRooStats -b cuda FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy-minuit2 COMMAND stressRooStats -minim Minuit2 -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu-minuit2 COMMAND stressRooStats -minim Minuit2 -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); ",MatchSource.DOCS,roofit/roostats/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt:607,Testability,test,test-stressroostats-legacy,607,"ROOT_ADD_GTEST(testHypoTestInvResult testHypoTestInvResult.cxx; LIBRARIES RooStats; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testHypoTestInvResult_1.root); ROOT_ADD_GTEST(testSPlot testSPlot.cxx LIBRARIES RooStats). #--stressRooStats----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooStats stressRooStats.cxx LIBRARIES RooStats Gpad Net); if(mathmore); target_compile_definitions(stressRooStats PRIVATE ROOFITMORE); endif(). configure_file(stressRooStats_ref.root stressRooStats_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy COMMAND stressRooStats -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu COMMAND stressRooStats -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); if(cuda); ROOT_ADD_TEST(test-stressroostats-cuda COMMAND stressRooStats -b cuda FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy-minuit2 COMMAND stressRooStats -minim Minuit2 -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu-minuit2 COMMAND stressRooStats -minim Minuit2 -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); ",MatchSource.DOCS,roofit/roostats/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt:736,Testability,test,test-stressroostats-cpu,736,"ROOT_ADD_GTEST(testHypoTestInvResult testHypoTestInvResult.cxx; LIBRARIES RooStats; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testHypoTestInvResult_1.root); ROOT_ADD_GTEST(testSPlot testSPlot.cxx LIBRARIES RooStats). #--stressRooStats----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooStats stressRooStats.cxx LIBRARIES RooStats Gpad Net); if(mathmore); target_compile_definitions(stressRooStats PRIVATE ROOFITMORE); endif(). configure_file(stressRooStats_ref.root stressRooStats_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy COMMAND stressRooStats -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu COMMAND stressRooStats -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); if(cuda); ROOT_ADD_TEST(test-stressroostats-cuda COMMAND stressRooStats -b cuda FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy-minuit2 COMMAND stressRooStats -minim Minuit2 -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu-minuit2 COMMAND stressRooStats -minim Minuit2 -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); ",MatchSource.DOCS,roofit/roostats/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt:860,Testability,test,test-stressroostats-cuda,860,"ROOT_ADD_GTEST(testHypoTestInvResult testHypoTestInvResult.cxx; LIBRARIES RooStats; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testHypoTestInvResult_1.root); ROOT_ADD_GTEST(testSPlot testSPlot.cxx LIBRARIES RooStats). #--stressRooStats----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooStats stressRooStats.cxx LIBRARIES RooStats Gpad Net); if(mathmore); target_compile_definitions(stressRooStats PRIVATE ROOFITMORE); endif(). configure_file(stressRooStats_ref.root stressRooStats_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy COMMAND stressRooStats -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu COMMAND stressRooStats -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); if(cuda); ROOT_ADD_TEST(test-stressroostats-cuda COMMAND stressRooStats -b cuda FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy-minuit2 COMMAND stressRooStats -minim Minuit2 -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu-minuit2 COMMAND stressRooStats -minim Minuit2 -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); ",MatchSource.DOCS,roofit/roostats/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt:1017,Testability,test,test-stressroostats-legacy-,1017,"ROOT_ADD_GTEST(testHypoTestInvResult testHypoTestInvResult.cxx; LIBRARIES RooStats; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testHypoTestInvResult_1.root); ROOT_ADD_GTEST(testSPlot testSPlot.cxx LIBRARIES RooStats). #--stressRooStats----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooStats stressRooStats.cxx LIBRARIES RooStats Gpad Net); if(mathmore); target_compile_definitions(stressRooStats PRIVATE ROOFITMORE); endif(). configure_file(stressRooStats_ref.root stressRooStats_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy COMMAND stressRooStats -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu COMMAND stressRooStats -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); if(cuda); ROOT_ADD_TEST(test-stressroostats-cuda COMMAND stressRooStats -b cuda FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy-minuit2 COMMAND stressRooStats -minim Minuit2 -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu-minuit2 COMMAND stressRooStats -minim Minuit2 -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); ",MatchSource.DOCS,roofit/roostats/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt:1169,Testability,test,test-stressroostats-cpu-,1169,"ROOT_ADD_GTEST(testHypoTestInvResult testHypoTestInvResult.cxx; LIBRARIES RooStats; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testHypoTestInvResult_1.root); ROOT_ADD_GTEST(testSPlot testSPlot.cxx LIBRARIES RooStats). #--stressRooStats----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooStats stressRooStats.cxx LIBRARIES RooStats Gpad Net); if(mathmore); target_compile_definitions(stressRooStats PRIVATE ROOFITMORE); endif(). configure_file(stressRooStats_ref.root stressRooStats_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy COMMAND stressRooStats -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu COMMAND stressRooStats -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); if(cuda); ROOT_ADD_TEST(test-stressroostats-cuda COMMAND stressRooStats -b cuda FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroostats-legacy-minuit2 COMMAND stressRooStats -minim Minuit2 -b legacy FAILREGEX ""FAILED|Error in"" LABELS longtest); endif(); ROOT_ADD_TEST(test-stressroostats-cpu-minuit2 COMMAND stressRooStats -minim Minuit2 -b cpu FAILREGEX ""FAILED|Error in"" LABELS longtest); ",MatchSource.DOCS,roofit/roostats/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/sql/mysql/CMakeLists.txt:618,Integrability,DEPEND,DEPENDENCIES,618,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT sql/mysql package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(RMySQL; HEADERS; TMySQLResult.h; TMySQLRow.h; TMySQLServer.h; TMySQLStatement.h; SOURCES; src/TMySQLResult.cxx; src/TMySQLRow.cxx; src/TMySQLServer.cxx; src/TMySQLStatement.cxx; DEPENDENCIES; Core; Net; RIO; ). target_include_directories(RMySQL PUBLIC ${MYSQL_INCLUDE_DIR}); target_link_libraries(RMySQL PUBLIC ${MYSQL_LIBRARIES}); ",MatchSource.DOCS,sql/mysql/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/sql/odbc/CMakeLists.txt:608,Integrability,DEPEND,DEPENDENCIES,608,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT sql/odbc package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(RODBC; HEADERS; TODBCResult.h; TODBCRow.h; TODBCServer.h; TODBCStatement.h; SOURCES; src/TODBCResult.cxx; src/TODBCRow.cxx; src/TODBCServer.cxx; src/TODBCStatement.cxx; DEPENDENCIES; Net; RIO; ). if(NOT MSVC); target_compile_options(RODBC PUBLIC -Wno-deprecated-declarations); endif(); target_include_directories(RODBC PUBLIC ${ODBC_INCLUDE_DIR}); target_link_libraries(RODBC PUBLIC ${ODBC_LIBRARIES}); ",MatchSource.DOCS,sql/odbc/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/odbc/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/sql/pgsql/CMakeLists.txt:601,Integrability,DEPEND,DEPENDENCIES,601,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT sql/pgsql package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(PgSQL; HEADERS; TPgSQLResult.h; TPgSQLRow.h; TPgSQLServer.h; TPgSQLStatement.h; SOURCES; TPgSQLResult.cxx; TPgSQLRow.cxx; TPgSQLServer.cxx; TPgSQLStatement.cxx; DEPENDENCIES; Core; Net; RIO; MathCore; ). target_include_directories(PgSQL PRIVATE ${PostgreSQL_INCLUDE_DIRS}); target_link_libraries(PgSQL PRIVATE ${PostgreSQL_LIBRARIES}); ",MatchSource.DOCS,sql/pgsql/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/pgsql/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/sql/sqlite/CMakeLists.txt:628,Integrability,DEPEND,DEPENDENCIES,628,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT sql/sqlite package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(RSQLite; HEADERS; TSQLiteResult.h; TSQLiteRow.h; TSQLiteServer.h; TSQLiteStatement.h; SOURCES; src/TSQLiteResult.cxx; src/TSQLiteRow.cxx; src/TSQLiteServer.cxx; src/TSQLiteStatement.cxx; DEPENDENCIES; Core; Net; RIO; ). target_include_directories(RSQLite SYSTEM PUBLIC ${SQLITE_INCLUDE_DIR}); target_link_libraries(RSQLite PUBLIC ${SQLITE_LIBRARIES}); ",MatchSource.DOCS,sql/sqlite/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/sqlite/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/periodic/CMakeLists.txt:390,Security,XSs,XSsources,390,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. cmake_minimum_required(VERSION 3.10 FATAL_ERROR). project(periodic). find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}). file(GLOB DBsources RELATIVE ${CMAKE_SOURCE_DIR} Ndb*.cxx); file(GLOB XSsources RELATIVE ${CMAKE_SOURCE_DIR} XS*.cxx); file(GLOB headers RELATIVE ${CMAKE_SOURCE_DIR} *.h); list(REMOVE_ITEM headers NdbLinkDef.h). ROOT_GENERATE_DICTIONARY(G__NdbDict ${headers} LINKDEF NdbLinkDef.h). #---Create a shared library with geneated dictionary. add_library(NdbDict SHARED ${DBsources} G__NdbDict.cxx). target_include_directories(NdbDict PRIVATE ${CMAKE_SOURCE_DIR}). # Do not add -Dname_EXPORTS to the command-line when building files in this; # target. Doing so is actively harmful for the modules build because it; # creates extra module variants, and not useful because we don't use these; # macros.; set_target_properties(${NdbDict} PROPERTIES DEFINE_SYMBOL """"). if(MSVC); set_target_properties(NdbDict PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS TRUE); endif(); target_link_libraries(NdbDict ROOT::Core). #---Create a main program using the library; add_executable(XSGui ${XSsources}); target_link_libraries(XSGui NdbDict ROOT::Gui); ",MatchSource.DOCS,test/periodic/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/periodic/CMakeLists.txt:1283,Security,XSs,XSsources,1283,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. cmake_minimum_required(VERSION 3.10 FATAL_ERROR). project(periodic). find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}). file(GLOB DBsources RELATIVE ${CMAKE_SOURCE_DIR} Ndb*.cxx); file(GLOB XSsources RELATIVE ${CMAKE_SOURCE_DIR} XS*.cxx); file(GLOB headers RELATIVE ${CMAKE_SOURCE_DIR} *.h); list(REMOVE_ITEM headers NdbLinkDef.h). ROOT_GENERATE_DICTIONARY(G__NdbDict ${headers} LINKDEF NdbLinkDef.h). #---Create a shared library with geneated dictionary. add_library(NdbDict SHARED ${DBsources} G__NdbDict.cxx). target_include_directories(NdbDict PRIVATE ${CMAKE_SOURCE_DIR}). # Do not add -Dname_EXPORTS to the command-line when building files in this; # target. Doing so is actively harmful for the modules build because it; # creates extra module variants, and not useful because we don't use these; # macros.; set_target_properties(${NdbDict} PROPERTIES DEFINE_SYMBOL """"). if(MSVC); set_target_properties(NdbDict PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS TRUE); endif(); target_link_libraries(NdbDict ROOT::Core). #---Create a main program using the library; add_executable(XSGui ${XSsources}); target_link_libraries(XSGui NdbDict ROOT::Gui); ",MatchSource.DOCS,test/periodic/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/periodic/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/CMakeLists.txt:1582,Deployability,install,install,1582,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. cmake_minimum_required(VERSION 3.10 FATAL_ERROR). project(RootShower). find_package(ROOT REQUIRED). set(CMAKE_CXX_FLAGS ${ROOT_CXX_FLAGS}). include_directories(${ROOT_INCLUDE_DIRS} ${CMAKE_CURRENT_SOURCE_DIR}). set(SOURCES; GButtonFrame.cxx; GTitleFrame.cxx; MyDetector.cxx; MyEvent.cxx; MyParticle.cxx; RootShower.cxx; RSAbout.cxx; RSHelpText.cxx; RSMsgBox.cxx; SettingsDlg.cxx; ). set(HEADERS MyParticle.h MyDetector.h MyEvent.h). if(MSVC); set(RCFILE RootShower.rc); endif(). ROOT_GENERATE_DICTIONARY(RootShowerDict ${HEADERS} LINKDEF RSLinkDef.h); file(COPY ${HEADERS} DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY "".rootshowerrc"" DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_executable(RootShower ${SOURCES} RootShowerDict.cxx ${RCFILE}); target_link_libraries(RootShower ROOT::Core ROOT::Rint ROOT::Gui ROOT::RIO ROOT::Hist ROOT::Gpad; ROOT::Graf ROOT::EG ROOT::Html ROOT::Geom ROOT::Tree; ); set_target_properties(RootShower PROPERTIES ENABLE_EXPORTS 1); if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET RootShower POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/RootShower.exe; ${CMAKE_CURRENT_BINARY_DIR}; ); set_target_properties(RootShower PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS TRUE); endif(). file(COPY anim DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY icons DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). install(TARGETS RootShower RUNTIME DESTINATION ${PROJECT_NAME} COMPONENT applications); install(DIRECTORY anim DESTINATION ${PROJECT_NAME}/anim COMPONENT anim); install(DIRECTORY icons DESTINATION ${PROJECT_NAME}/icons COMPONENT icons); install(FILES ${HEADERS} DESTINATION ${PROJECT_NAME} COMPONENT headers); install(FILES "".rootshowerrc"" DESTINATION ${PROJECT_NAME} COMPONENT settings); ",MatchSource.DOCS,test/RootShower/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/CMakeLists.txt:1670,Deployability,install,install,1670,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. cmake_minimum_required(VERSION 3.10 FATAL_ERROR). project(RootShower). find_package(ROOT REQUIRED). set(CMAKE_CXX_FLAGS ${ROOT_CXX_FLAGS}). include_directories(${ROOT_INCLUDE_DIRS} ${CMAKE_CURRENT_SOURCE_DIR}). set(SOURCES; GButtonFrame.cxx; GTitleFrame.cxx; MyDetector.cxx; MyEvent.cxx; MyParticle.cxx; RootShower.cxx; RSAbout.cxx; RSHelpText.cxx; RSMsgBox.cxx; SettingsDlg.cxx; ). set(HEADERS MyParticle.h MyDetector.h MyEvent.h). if(MSVC); set(RCFILE RootShower.rc); endif(). ROOT_GENERATE_DICTIONARY(RootShowerDict ${HEADERS} LINKDEF RSLinkDef.h); file(COPY ${HEADERS} DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY "".rootshowerrc"" DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_executable(RootShower ${SOURCES} RootShowerDict.cxx ${RCFILE}); target_link_libraries(RootShower ROOT::Core ROOT::Rint ROOT::Gui ROOT::RIO ROOT::Hist ROOT::Gpad; ROOT::Graf ROOT::EG ROOT::Html ROOT::Geom ROOT::Tree; ); set_target_properties(RootShower PROPERTIES ENABLE_EXPORTS 1); if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET RootShower POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/RootShower.exe; ${CMAKE_CURRENT_BINARY_DIR}; ); set_target_properties(RootShower PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS TRUE); endif(). file(COPY anim DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY icons DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). install(TARGETS RootShower RUNTIME DESTINATION ${PROJECT_NAME} COMPONENT applications); install(DIRECTORY anim DESTINATION ${PROJECT_NAME}/anim COMPONENT anim); install(DIRECTORY icons DESTINATION ${PROJECT_NAME}/icons COMPONENT icons); install(FILES ${HEADERS} DESTINATION ${PROJECT_NAME} COMPONENT headers); install(FILES "".rootshowerrc"" DESTINATION ${PROJECT_NAME} COMPONENT settings); ",MatchSource.DOCS,test/RootShower/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/CMakeLists.txt:1743,Deployability,install,install,1743,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. cmake_minimum_required(VERSION 3.10 FATAL_ERROR). project(RootShower). find_package(ROOT REQUIRED). set(CMAKE_CXX_FLAGS ${ROOT_CXX_FLAGS}). include_directories(${ROOT_INCLUDE_DIRS} ${CMAKE_CURRENT_SOURCE_DIR}). set(SOURCES; GButtonFrame.cxx; GTitleFrame.cxx; MyDetector.cxx; MyEvent.cxx; MyParticle.cxx; RootShower.cxx; RSAbout.cxx; RSHelpText.cxx; RSMsgBox.cxx; SettingsDlg.cxx; ). set(HEADERS MyParticle.h MyDetector.h MyEvent.h). if(MSVC); set(RCFILE RootShower.rc); endif(). ROOT_GENERATE_DICTIONARY(RootShowerDict ${HEADERS} LINKDEF RSLinkDef.h); file(COPY ${HEADERS} DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY "".rootshowerrc"" DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_executable(RootShower ${SOURCES} RootShowerDict.cxx ${RCFILE}); target_link_libraries(RootShower ROOT::Core ROOT::Rint ROOT::Gui ROOT::RIO ROOT::Hist ROOT::Gpad; ROOT::Graf ROOT::EG ROOT::Html ROOT::Geom ROOT::Tree; ); set_target_properties(RootShower PROPERTIES ENABLE_EXPORTS 1); if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET RootShower POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/RootShower.exe; ${CMAKE_CURRENT_BINARY_DIR}; ); set_target_properties(RootShower PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS TRUE); endif(). file(COPY anim DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY icons DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). install(TARGETS RootShower RUNTIME DESTINATION ${PROJECT_NAME} COMPONENT applications); install(DIRECTORY anim DESTINATION ${PROJECT_NAME}/anim COMPONENT anim); install(DIRECTORY icons DESTINATION ${PROJECT_NAME}/icons COMPONENT icons); install(FILES ${HEADERS} DESTINATION ${PROJECT_NAME} COMPONENT headers); install(FILES "".rootshowerrc"" DESTINATION ${PROJECT_NAME} COMPONENT settings); ",MatchSource.DOCS,test/RootShower/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/CMakeLists.txt:1819,Deployability,install,install,1819,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. cmake_minimum_required(VERSION 3.10 FATAL_ERROR). project(RootShower). find_package(ROOT REQUIRED). set(CMAKE_CXX_FLAGS ${ROOT_CXX_FLAGS}). include_directories(${ROOT_INCLUDE_DIRS} ${CMAKE_CURRENT_SOURCE_DIR}). set(SOURCES; GButtonFrame.cxx; GTitleFrame.cxx; MyDetector.cxx; MyEvent.cxx; MyParticle.cxx; RootShower.cxx; RSAbout.cxx; RSHelpText.cxx; RSMsgBox.cxx; SettingsDlg.cxx; ). set(HEADERS MyParticle.h MyDetector.h MyEvent.h). if(MSVC); set(RCFILE RootShower.rc); endif(). ROOT_GENERATE_DICTIONARY(RootShowerDict ${HEADERS} LINKDEF RSLinkDef.h); file(COPY ${HEADERS} DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY "".rootshowerrc"" DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_executable(RootShower ${SOURCES} RootShowerDict.cxx ${RCFILE}); target_link_libraries(RootShower ROOT::Core ROOT::Rint ROOT::Gui ROOT::RIO ROOT::Hist ROOT::Gpad; ROOT::Graf ROOT::EG ROOT::Html ROOT::Geom ROOT::Tree; ); set_target_properties(RootShower PROPERTIES ENABLE_EXPORTS 1); if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET RootShower POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/RootShower.exe; ${CMAKE_CURRENT_BINARY_DIR}; ); set_target_properties(RootShower PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS TRUE); endif(). file(COPY anim DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY icons DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). install(TARGETS RootShower RUNTIME DESTINATION ${PROJECT_NAME} COMPONENT applications); install(DIRECTORY anim DESTINATION ${PROJECT_NAME}/anim COMPONENT anim); install(DIRECTORY icons DESTINATION ${PROJECT_NAME}/icons COMPONENT icons); install(FILES ${HEADERS} DESTINATION ${PROJECT_NAME} COMPONENT headers); install(FILES "".rootshowerrc"" DESTINATION ${PROJECT_NAME} COMPONENT settings); ",MatchSource.DOCS,test/RootShower/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/CMakeLists.txt:1892,Deployability,install,install,1892,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. cmake_minimum_required(VERSION 3.10 FATAL_ERROR). project(RootShower). find_package(ROOT REQUIRED). set(CMAKE_CXX_FLAGS ${ROOT_CXX_FLAGS}). include_directories(${ROOT_INCLUDE_DIRS} ${CMAKE_CURRENT_SOURCE_DIR}). set(SOURCES; GButtonFrame.cxx; GTitleFrame.cxx; MyDetector.cxx; MyEvent.cxx; MyParticle.cxx; RootShower.cxx; RSAbout.cxx; RSHelpText.cxx; RSMsgBox.cxx; SettingsDlg.cxx; ). set(HEADERS MyParticle.h MyDetector.h MyEvent.h). if(MSVC); set(RCFILE RootShower.rc); endif(). ROOT_GENERATE_DICTIONARY(RootShowerDict ${HEADERS} LINKDEF RSLinkDef.h); file(COPY ${HEADERS} DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY "".rootshowerrc"" DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_executable(RootShower ${SOURCES} RootShowerDict.cxx ${RCFILE}); target_link_libraries(RootShower ROOT::Core ROOT::Rint ROOT::Gui ROOT::RIO ROOT::Hist ROOT::Gpad; ROOT::Graf ROOT::EG ROOT::Html ROOT::Geom ROOT::Tree; ); set_target_properties(RootShower PROPERTIES ENABLE_EXPORTS 1); if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET RootShower POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/RootShower.exe; ${CMAKE_CURRENT_BINARY_DIR}; ); set_target_properties(RootShower PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS TRUE); endif(). file(COPY anim DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY icons DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). install(TARGETS RootShower RUNTIME DESTINATION ${PROJECT_NAME} COMPONENT applications); install(DIRECTORY anim DESTINATION ${PROJECT_NAME}/anim COMPONENT anim); install(DIRECTORY icons DESTINATION ${PROJECT_NAME}/icons COMPONENT icons); install(FILES ${HEADERS} DESTINATION ${PROJECT_NAME} COMPONENT headers); install(FILES "".rootshowerrc"" DESTINATION ${PROJECT_NAME} COMPONENT settings); ",MatchSource.DOCS,test/RootShower/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/test/RootShower/CMakeLists.txt:1324,Modifiability,CONFIG,CONFIG,1324,"# Copyright (C) 1995-2023, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. cmake_minimum_required(VERSION 3.10 FATAL_ERROR). project(RootShower). find_package(ROOT REQUIRED). set(CMAKE_CXX_FLAGS ${ROOT_CXX_FLAGS}). include_directories(${ROOT_INCLUDE_DIRS} ${CMAKE_CURRENT_SOURCE_DIR}). set(SOURCES; GButtonFrame.cxx; GTitleFrame.cxx; MyDetector.cxx; MyEvent.cxx; MyParticle.cxx; RootShower.cxx; RSAbout.cxx; RSHelpText.cxx; RSMsgBox.cxx; SettingsDlg.cxx; ). set(HEADERS MyParticle.h MyDetector.h MyEvent.h). if(MSVC); set(RCFILE RootShower.rc); endif(). ROOT_GENERATE_DICTIONARY(RootShowerDict ${HEADERS} LINKDEF RSLinkDef.h); file(COPY ${HEADERS} DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY "".rootshowerrc"" DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_executable(RootShower ${SOURCES} RootShowerDict.cxx ${RCFILE}); target_link_libraries(RootShower ROOT::Core ROOT::Rint ROOT::Gui ROOT::RIO ROOT::Hist ROOT::Gpad; ROOT::Graf ROOT::EG ROOT::Html ROOT::Geom ROOT::Tree; ); set_target_properties(RootShower PROPERTIES ENABLE_EXPORTS 1); if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET RootShower POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/RootShower.exe; ${CMAKE_CURRENT_BINARY_DIR}; ); set_target_properties(RootShower PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS TRUE); endif(). file(COPY anim DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY icons DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). install(TARGETS RootShower RUNTIME DESTINATION ${PROJECT_NAME} COMPONENT applications); install(DIRECTORY anim DESTINATION ${PROJECT_NAME}/anim COMPONENT anim); install(DIRECTORY icons DESTINATION ${PROJECT_NAME}/icons COMPONENT icons); install(FILES ${HEADERS} DESTINATION ${PROJECT_NAME} COMPONENT headers); install(FILES "".rootshowerrc"" DESTINATION ${PROJECT_NAME} COMPONENT settings); ",MatchSource.DOCS,test/RootShower/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/CMakeLists.txt:984,Integrability,DEPEND,DEPENDENCIES,984,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for PyMVA package; ############################################################################; #Author: Omar Zapata, Lorenzo Moneta, Sergei Glayzer 22/08/2015; #website:http://oproject.org. ROOT_STANDARD_LIBRARY_PACKAGE(PyMVA; HEADERS; TMVA/MethodPyAdaBoost.h; TMVA/MethodPyGTB.h; TMVA/MethodPyKeras.h; TMVA/MethodPyRandomForest.h; TMVA/MethodPyTorch.h; TMVA/RModelParser_Keras.h; TMVA/RModelParser_PyTorch.h; TMVA/PyMethodBase.h; SOURCES; src/MethodPyAdaBoost.cxx; src/MethodPyGTB.cxx; src/MethodPyKeras.cxx; src/MethodPyRandomForest.cxx; src/MethodPyTorch.cxx; src/RModelParser_Keras.cxx; src/RModelParser_PyTorch.cxx; src/PyMethodBase.cxx; LIBRARIES; Python3::NumPy; Python3::Python; DEPENDENCIES; Core; Matrix; Thread; RIO; TMVA; ROOTTMVASofie; ). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,tmva/pymva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/CMakeLists.txt:1076,Testability,test,test,1076,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for PyMVA package; ############################################################################; #Author: Omar Zapata, Lorenzo Moneta, Sergei Glayzer 22/08/2015; #website:http://oproject.org. ROOT_STANDARD_LIBRARY_PACKAGE(PyMVA; HEADERS; TMVA/MethodPyAdaBoost.h; TMVA/MethodPyGTB.h; TMVA/MethodPyKeras.h; TMVA/MethodPyRandomForest.h; TMVA/MethodPyTorch.h; TMVA/RModelParser_Keras.h; TMVA/RModelParser_PyTorch.h; TMVA/PyMethodBase.h; SOURCES; src/MethodPyAdaBoost.cxx; src/MethodPyGTB.cxx; src/MethodPyKeras.cxx; src/MethodPyRandomForest.cxx; src/MethodPyTorch.cxx; src/RModelParser_Keras.cxx; src/RModelParser_PyTorch.cxx; src/PyMethodBase.cxx; LIBRARIES; Python3::NumPy; Python3::Python; DEPENDENCIES; Core; Matrix; Thread; RIO; TMVA; ROOTTMVASofie; ). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,tmva/pymva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/CMakeLists.txt:653,Integrability,DEPEND,DEPENDENCIES,653,"# Copyright (C) 1995-2021, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT R package; ############################################################################. ROOT_STANDARD_LIBRARY_PACKAGE(RMVA; HEADERS; TMVA/MethodC50.h; TMVA/MethodRSNNS.h; TMVA/MethodRSVM.h; TMVA/MethodRXGB.h; TMVA/RMethodBase.h; SOURCES; src/MethodC50.cxx; src/MethodRSNNS.cxx; src/MethodRSVM.cxx; src/MethodRXGB.cxx; src/RMethodBase.cxx; DEPENDENCIES; Core; Matrix; RInterface; RIO; Thread; TMVA; NO_CXXMODULE; ); ",MatchSource.DOCS,tmva/rmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/CMakeLists.txt:2037,Integrability,DEPEND,DEPENDENCIES,2037,"; ############################################################################; #Author: Sitong An, Lorenzo Moneta 10/03/2021. #sofie is built only if protobuf is found. ROOT_STANDARD_LIBRARY_PACKAGE(ROOTTMVASofie; HEADERS; TMVA/OperatorList.hxx; TMVA/RModel_Base.hxx; TMVA/RModel.hxx; TMVA/ROperator.hxx; TMVA/ROperator_BasicUnary.hxx; TMVA/ROperator_BasicBinary.hxx; TMVA/ROperator_BasicNary.hxx; TMVA/ROperator_BatchNormalization.hxx; TMVA/ROperator_Conv.hxx; TMVA/ROperator_ConvTranspose.hxx; TMVA/ROperator_Gemm.hxx; TMVA/ROperator_Relu.hxx; TMVA/ROperator_Tanh.hxx; TMVA/ROperator_LeakyRelu.hxx; TMVA/ROperator_Reshape.hxx; TMVA/ROperator_Selu.hxx; TMVA/ROperator_Sigmoid.hxx; TMVA/ROperator_Slice.hxx; TMVA/ROperator_Transpose.hxx; TMVA/ROperator_Pool.hxx; TMVA/ROperator_Concat.hxx; TMVA/ROperator_Identity.hxx; TMVA/ROperator_Constant.hxx; TMVA/ROperator_Softmax.hxx; TMVA/ROperator_Reduce.hxx; TMVA/ROperator_Shape.hxx; TMVA/ROperator_Cast.hxx; TMVA/ROperator_Custom.hxx; TMVA/ROperator_LayerNormalization.hxx; TMVA/ROperator_Expand.hxx; TMVA/ROperator_Erf.hxx; TMVA/ROperator_Swish.hxx; TMVA/ROperator_Elu.hxx; TMVA/ROperator_Comparision.hxx; TMVA/ROperator_EyeLike.hxx; TMVA/ROperator_Range.hxx; TMVA/ROperator_TopK.hxx; TMVA/ROperator_Tile.hxx; TMVA/ROperator_Split.hxx; TMVA/SOFIE_common.hxx; TMVA/SOFIEHelpers.hxx. TMVA/FunctionList.hxx; TMVA/RModel_GNN.hxx; TMVA/RModel_GraphIndependent.hxx; TMVA/RFunction.hxx; TMVA/RFunction_MLP.hxx; TMVA/RFunction_Sum.hxx; TMVA/RFunction_Mean.hxx; SOURCES; src/RModel_Base.cxx; src/RModel.cxx; src/RModel_GNN.cxx; src/RModel_GraphIndependent.cxx; src/RFunction.cxx; src/RFunction_MLP.cxx; src/RFunction_Mean.cxx; src/RFunction_Sum.cxx; src/SOFIE_common.cxx; DEPENDENCIES; TMVA; ). target_include_directories(ROOTTMVASofie PUBLIC; $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>); set_target_properties(ROOTTMVASofie PROPERTIES; POSITION_INDEPENDENT_CODE TRUE). # tests requires protobuf; if (tmva-sofie); ROOT_ADD_TEST_SUBDIRECTORY(test); endif(); ",MatchSource.DOCS,tmva/sofie/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/CMakeLists.txt:2241,Testability,test,tests,2241,"; ############################################################################; #Author: Sitong An, Lorenzo Moneta 10/03/2021. #sofie is built only if protobuf is found. ROOT_STANDARD_LIBRARY_PACKAGE(ROOTTMVASofie; HEADERS; TMVA/OperatorList.hxx; TMVA/RModel_Base.hxx; TMVA/RModel.hxx; TMVA/ROperator.hxx; TMVA/ROperator_BasicUnary.hxx; TMVA/ROperator_BasicBinary.hxx; TMVA/ROperator_BasicNary.hxx; TMVA/ROperator_BatchNormalization.hxx; TMVA/ROperator_Conv.hxx; TMVA/ROperator_ConvTranspose.hxx; TMVA/ROperator_Gemm.hxx; TMVA/ROperator_Relu.hxx; TMVA/ROperator_Tanh.hxx; TMVA/ROperator_LeakyRelu.hxx; TMVA/ROperator_Reshape.hxx; TMVA/ROperator_Selu.hxx; TMVA/ROperator_Sigmoid.hxx; TMVA/ROperator_Slice.hxx; TMVA/ROperator_Transpose.hxx; TMVA/ROperator_Pool.hxx; TMVA/ROperator_Concat.hxx; TMVA/ROperator_Identity.hxx; TMVA/ROperator_Constant.hxx; TMVA/ROperator_Softmax.hxx; TMVA/ROperator_Reduce.hxx; TMVA/ROperator_Shape.hxx; TMVA/ROperator_Cast.hxx; TMVA/ROperator_Custom.hxx; TMVA/ROperator_LayerNormalization.hxx; TMVA/ROperator_Expand.hxx; TMVA/ROperator_Erf.hxx; TMVA/ROperator_Swish.hxx; TMVA/ROperator_Elu.hxx; TMVA/ROperator_Comparision.hxx; TMVA/ROperator_EyeLike.hxx; TMVA/ROperator_Range.hxx; TMVA/ROperator_TopK.hxx; TMVA/ROperator_Tile.hxx; TMVA/ROperator_Split.hxx; TMVA/SOFIE_common.hxx; TMVA/SOFIEHelpers.hxx. TMVA/FunctionList.hxx; TMVA/RModel_GNN.hxx; TMVA/RModel_GraphIndependent.hxx; TMVA/RFunction.hxx; TMVA/RFunction_MLP.hxx; TMVA/RFunction_Sum.hxx; TMVA/RFunction_Mean.hxx; SOURCES; src/RModel_Base.cxx; src/RModel.cxx; src/RModel_GNN.cxx; src/RModel_GraphIndependent.cxx; src/RFunction.cxx; src/RFunction_MLP.cxx; src/RFunction_Mean.cxx; src/RFunction_Sum.cxx; src/SOFIE_common.cxx; DEPENDENCIES; TMVA; ). target_include_directories(ROOTTMVASofie PUBLIC; $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>); set_target_properties(ROOTTMVASofie PROPERTIES; POSITION_INDEPENDENT_CODE TRUE). # tests requires protobuf; if (tmva-sofie); ROOT_ADD_TEST_SUBDIRECTORY(test); endif(); ",MatchSource.DOCS,tmva/sofie/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/CMakeLists.txt:2310,Testability,test,test,2310,"; ############################################################################; #Author: Sitong An, Lorenzo Moneta 10/03/2021. #sofie is built only if protobuf is found. ROOT_STANDARD_LIBRARY_PACKAGE(ROOTTMVASofie; HEADERS; TMVA/OperatorList.hxx; TMVA/RModel_Base.hxx; TMVA/RModel.hxx; TMVA/ROperator.hxx; TMVA/ROperator_BasicUnary.hxx; TMVA/ROperator_BasicBinary.hxx; TMVA/ROperator_BasicNary.hxx; TMVA/ROperator_BatchNormalization.hxx; TMVA/ROperator_Conv.hxx; TMVA/ROperator_ConvTranspose.hxx; TMVA/ROperator_Gemm.hxx; TMVA/ROperator_Relu.hxx; TMVA/ROperator_Tanh.hxx; TMVA/ROperator_LeakyRelu.hxx; TMVA/ROperator_Reshape.hxx; TMVA/ROperator_Selu.hxx; TMVA/ROperator_Sigmoid.hxx; TMVA/ROperator_Slice.hxx; TMVA/ROperator_Transpose.hxx; TMVA/ROperator_Pool.hxx; TMVA/ROperator_Concat.hxx; TMVA/ROperator_Identity.hxx; TMVA/ROperator_Constant.hxx; TMVA/ROperator_Softmax.hxx; TMVA/ROperator_Reduce.hxx; TMVA/ROperator_Shape.hxx; TMVA/ROperator_Cast.hxx; TMVA/ROperator_Custom.hxx; TMVA/ROperator_LayerNormalization.hxx; TMVA/ROperator_Expand.hxx; TMVA/ROperator_Erf.hxx; TMVA/ROperator_Swish.hxx; TMVA/ROperator_Elu.hxx; TMVA/ROperator_Comparision.hxx; TMVA/ROperator_EyeLike.hxx; TMVA/ROperator_Range.hxx; TMVA/ROperator_TopK.hxx; TMVA/ROperator_Tile.hxx; TMVA/ROperator_Split.hxx; TMVA/SOFIE_common.hxx; TMVA/SOFIEHelpers.hxx. TMVA/FunctionList.hxx; TMVA/RModel_GNN.hxx; TMVA/RModel_GraphIndependent.hxx; TMVA/RFunction.hxx; TMVA/RFunction_MLP.hxx; TMVA/RFunction_Sum.hxx; TMVA/RFunction_Mean.hxx; SOURCES; src/RModel_Base.cxx; src/RModel.cxx; src/RModel_GNN.cxx; src/RModel_GraphIndependent.cxx; src/RFunction.cxx; src/RFunction_MLP.cxx; src/RFunction_Mean.cxx; src/RFunction_Sum.cxx; src/SOFIE_common.cxx; DEPENDENCIES; TMVA; ). target_include_directories(ROOTTMVASofie PUBLIC; $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>); set_target_properties(ROOTTMVASofie PROPERTIES; POSITION_INDEPENDENT_CODE TRUE). # tests requires protobuf; if (tmva-sofie); ROOT_ADD_TEST_SUBDIRECTORY(test); endif(); ",MatchSource.DOCS,tmva/sofie/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie_parsers/CMakeLists.txt:2097,Integrability,DEPEND,DEPENDENCIES,2097,": Sitong An, Lorenzo Moneta 10/03/2021. #sofie is built only if protobuf is found. protobuf_generate_cpp(PROTO_SRCS PROTO_HDRS ""onnx_proto3""); set_source_files_properties(${PROTO_SRCS} ${PROTO_HDRS} PROPERTIES GENERATED TRUE); ## silence protobuf warnings for version 3.6. Not needed from protobuf version 3.17; set_source_files_properties(${PROTO_SRCS} PROPERTIES COMPILE_FLAGS -Wno-array-bounds); ## silence protobuf warnings for version 3.0. Not needed from protobuf version 3.6; set_source_files_properties(${PROTO_SRCS} PROPERTIES COMPILE_FLAGS -Wno-unused-parameter). ROOT_STANDARD_LIBRARY_PACKAGE(ROOTTMVASofieParser; HEADERS; TMVA/RModelParser_ONNX.hxx; SOURCES; src/RModelParser_ONNX.cxx; src/ParseBasicUnary.cxx; src/ParseBasicBinary.cxx; src/ParseBatchNormalization.cxx; src/ParseCast.cxx; src/ParseConcat.cxx; src/ParseConv.cxx; src/ParseConvTranspose.cxx; src/ParseGemm.cxx; src/ParseGRU.cxx; src/ParseIdentity.cxx; src/ParseLeakyRelu.cxx; src/ParseLSTM.cxx; src/ParseBasicNary.cxx; src/ParsePool.cxx; src/ParseReduce.cxx; src/ParseRelu.cxx; src/ParseReshape.cxx; src/ParseRNN.cxx; src/ParseSelu.cxx; src/ParseShape.cxx; src/ParseSigmoid.cxx; src/ParseSlice.cxx; src/ParseSoftmax.cxx; src/ParseTanh.cxx; src/ParseTranspose.cxx; src/ParseErf.cxx; src/ParseRange.cxx; src/ParseLayerNormalization.cxx; src/ParseExpand.cxx; src/ParseGather.cxx; src/ParseElu.cxx; src/ParseFuseConvAdd.cxx; src/ParseFuseConvTransposeAdd.cxx; src/ParseFuseMatMulAdd.cxx; src/ParseMatMul.cxx; src/ParseComparision.cxx; src/ParseEyeLike.cxx; src/ParseConstant.cxx; src/ParseTopK.cxx; src/ParseTile.cxx; src/ParseSplit.cxx; src/ParseIf.cxx; ${PROTO_SRCS}; LIBRARIES PUBLIC; protobuf::libprotobuf; DEPENDENCIES; TMVA; ROOTTMVASofie; ). target_include_directories(ROOTTMVASofieParser PUBLIC; $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>); target_include_directories(ROOTTMVASofieParser BEFORE PUBLIC; ${Protobuf_INCLUDE_DIRS}); set_target_properties(ROOTTMVASofieParser PROPERTIES; POSITION_INDEPENDENT_CODE TRUE)",MatchSource.DOCS,tmva/sofie_parsers/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie_parsers/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:454,Deployability,install,installoptions,454,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT tmva package; # @author Pere Mato, CERN; ############################################################################. if(NOT tmva-gpu); set(installoptions ${installoptions} FILTER ""Cuda""); endif(). if (imt); list(APPEND TMVA_EXTRA_DEPENDENCIES Imt); endif(imt). set (EXTRA_DICT_OPTS); if (runtime_cxxmodules AND WIN32); set (EXTRA_DICT_OPTS NO_CXXMODULE); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(TMVA; HEADERS; TMVA/BDTEventWrapper.h; TMVA/BinarySearchTree.h; TMVA/BinarySearchTreeNode.h; TMVA/BinaryTree.h; TMVA/CCPruner.h; TMVA/CCTreeWrapper.h; TMVA/Classification.h; TMVA/ClassifierFactory.h; TMVA/ClassInfo.h; TMVA/Config.h; TMVA/Configurable.h; TMVA/ConvergenceTest.h; TMVA/CostComplexityPruneTool.h; TMVA/CrossEntropy.h; TMVA/CrossValidation.h; TMVA/CvSplit.h; TMVA/DataInputHandler.h; TMVA/DataLoader.h; TMVA/DataSetFactory.h; TMVA/DataSet.h; TMVA/DataSetInfo.h; TMVA/DataSetManager.h; TMVA/DecisionTree.h; TMVA/DecisionTreeNode.h; TMVA/Envelope.h; TMVA/Event.h; TMVA/ExpectedErrorPruneTool.h; TMVA/Executor.h; TMVA/Factory.h; TMVA/FitterBase.h; TMVA/GeneticAlgorithm.h; TMVA/GeneticFitter.h; TMVA/GeneticGenes.h; TMVA/GeneticPopulation.h; TMVA/GeneticRange.h; TMVA/GiniIndex.h; TMVA/GiniIndexWithLaplace.h; TMVA/HyperParameterOptimisation.h; TMVA/IFitterTarget.h; TMVA/IMethod.h; TMVA/Interval.h; TMVA/IPruneTool.h; TMVA/KDEKernel.h; TMVA/LDA.h; TMVA/LogInterval.h; TMVA/LossFunction.h; TMVA/MCFitter.h; TMVA/MethodANNBase.h; TMVA/MethodBase.h; TMVA/MethodBayesClassifier.h; TMVA/MethodBDT.h; TMVA/MethodBoost.h; TMVA/MethodCategory.h; TMVA/MethodCFMlpANN_def.h; TMVA/MethodCFMlpANN.h; TMVA/MethodCFMlpANN_Utils.h; TMVA/MethodCompositeBase.h; TMVA/MethodCrossValidation.h; TMVA/Me",MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:471,Deployability,install,installoptions,471,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT tmva package; # @author Pere Mato, CERN; ############################################################################. if(NOT tmva-gpu); set(installoptions ${installoptions} FILTER ""Cuda""); endif(). if (imt); list(APPEND TMVA_EXTRA_DEPENDENCIES Imt); endif(imt). set (EXTRA_DICT_OPTS); if (runtime_cxxmodules AND WIN32); set (EXTRA_DICT_OPTS NO_CXXMODULE); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(TMVA; HEADERS; TMVA/BDTEventWrapper.h; TMVA/BinarySearchTree.h; TMVA/BinarySearchTreeNode.h; TMVA/BinaryTree.h; TMVA/CCPruner.h; TMVA/CCTreeWrapper.h; TMVA/Classification.h; TMVA/ClassifierFactory.h; TMVA/ClassInfo.h; TMVA/Config.h; TMVA/Configurable.h; TMVA/ConvergenceTest.h; TMVA/CostComplexityPruneTool.h; TMVA/CrossEntropy.h; TMVA/CrossValidation.h; TMVA/CvSplit.h; TMVA/DataInputHandler.h; TMVA/DataLoader.h; TMVA/DataSetFactory.h; TMVA/DataSet.h; TMVA/DataSetInfo.h; TMVA/DataSetManager.h; TMVA/DecisionTree.h; TMVA/DecisionTreeNode.h; TMVA/Envelope.h; TMVA/Event.h; TMVA/ExpectedErrorPruneTool.h; TMVA/Executor.h; TMVA/Factory.h; TMVA/FitterBase.h; TMVA/GeneticAlgorithm.h; TMVA/GeneticFitter.h; TMVA/GeneticGenes.h; TMVA/GeneticPopulation.h; TMVA/GeneticRange.h; TMVA/GiniIndex.h; TMVA/GiniIndexWithLaplace.h; TMVA/HyperParameterOptimisation.h; TMVA/IFitterTarget.h; TMVA/IMethod.h; TMVA/Interval.h; TMVA/IPruneTool.h; TMVA/KDEKernel.h; TMVA/LDA.h; TMVA/LogInterval.h; TMVA/LossFunction.h; TMVA/MCFitter.h; TMVA/MethodANNBase.h; TMVA/MethodBase.h; TMVA/MethodBayesClassifier.h; TMVA/MethodBDT.h; TMVA/MethodBoost.h; TMVA/MethodCategory.h; TMVA/MethodCFMlpANN_def.h; TMVA/MethodCFMlpANN.h; TMVA/MethodCFMlpANN_Utils.h; TMVA/MethodCompositeBase.h; TMVA/MethodCrossValidation.h; TMVA/Me",MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:9325,Deployability,install,installoptions,9325,"uron.cxx; src/TNeuronInputAbs.cxx; src/TNeuronInputChooser.cxx; src/TNeuronInput.cxx; src/TNeuronInputSqSum.cxx; src/TNeuronInputSum.cxx; src/Tools.cxx; src/TrainingHistory.cxx; src/TransformationHandler.cxx; src/TSpline1.cxx; src/TSpline2.cxx; src/TSynapse.cxx; src/Types.cxx; src/VariableDecorrTransform.cxx; src/VariableGaussTransform.cxx; src/VariableIdentityTransform.cxx; src/VariableImportance.cxx; src/VariableInfo.cxx; src/VariableNormalizeTransform.cxx; src/VariablePCATransform.cxx; src/VariableRearrangeTransform.cxx; src/VariableTransformBase.cxx; src/VariableTransform.cxx; src/VarTransformHandler.cxx; src/Volume.cxx; src/DNN/Architectures/Reference.cxx; src/DNN/Architectures/Reference/DataLoader.cxx; src/DNN/Architectures/Reference/TensorDataLoader.cxx; src/DNN/Architectures/Cpu.cxx; src/DNN/Architectures/Cpu/CpuBuffer.cxx; src/DNN/Architectures/Cpu/CpuMatrix.cxx; ${TMVA_EXTRA_SOURCES}; DEPENDENCIES; TreePlayer; Tree; Hist; Matrix; Minuit; MLP; MathCore; Core; RIO; XMLIO; ${TMVA_EXTRA_DEPENDENCIES}; DICTIONARY_OPTIONS; -writeEmptyRootPCM; INSTALL_OPTIONS; ${installoptions}; ${EXTRA_DICT_OPTS}; ). if(MSVC); target_compile_definitions(TMVA PRIVATE _USE_MATH_DEFINES); endif(). if(vdt OR builtin_vdt); target_link_libraries(TMVA PRIVATE VDT::VDT); endif(); if(builtin_vdt); add_dependencies(TMVA VDT); endif(). if(tmva-cpu); target_include_directories(TMVA PRIVATE ${TBB_INCLUDE_DIRS}); target_link_libraries(TMVA PRIVATE ${TBB_LIBRARIES}); set_target_properties(TMVA PROPERTIES COMPILE_FLAGS ""${TBB_CXXFLAGS}""). if(BLAS_FOUND); target_link_libraries(TMVA PRIVATE ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}); elseif(GSL_FOUND); target_compile_definitions(TMVA PRIVATE -DDNN_USE_CBLAS); target_include_directories(TMVA SYSTEM PRIVATE ${GSL_INCLUDE_DIR}); target_link_libraries(TMVA PRIVATE ${GSL_CBLAS_LIBRARY}); if(builtin_gsl); add_dependencies(TMVA GSL); endif(); else(); message(FATAL_ERROR ""tmva-cpu enabled but neither BLAS nor GSL BLAS were found""); endif(); endif(). if(tmva-",MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:2405,Energy Efficiency,Monitor,Monitoring,2405,ter.h; TMVA/GeneticGenes.h; TMVA/GeneticPopulation.h; TMVA/GeneticRange.h; TMVA/GiniIndex.h; TMVA/GiniIndexWithLaplace.h; TMVA/HyperParameterOptimisation.h; TMVA/IFitterTarget.h; TMVA/IMethod.h; TMVA/Interval.h; TMVA/IPruneTool.h; TMVA/KDEKernel.h; TMVA/LDA.h; TMVA/LogInterval.h; TMVA/LossFunction.h; TMVA/MCFitter.h; TMVA/MethodANNBase.h; TMVA/MethodBase.h; TMVA/MethodBayesClassifier.h; TMVA/MethodBDT.h; TMVA/MethodBoost.h; TMVA/MethodCategory.h; TMVA/MethodCFMlpANN_def.h; TMVA/MethodCFMlpANN.h; TMVA/MethodCFMlpANN_Utils.h; TMVA/MethodCompositeBase.h; TMVA/MethodCrossValidation.h; TMVA/MethodCuts.h; TMVA/MethodDL.h; TMVA/MethodDNN.h; TMVA/MethodDT.h; TMVA/MethodFDA.h; TMVA/MethodFisher.h; TMVA/MethodHMatrix.h; TMVA/MethodKNN.h; TMVA/MethodLD.h; TMVA/MethodLikelihood.h; TMVA/MethodMLP.h; TMVA/MethodPDEFoam.h; TMVA/MethodPDERS.h; TMVA/MethodRuleFit.h; TMVA/MethodSVM.h; TMVA/MethodTMlpANN.h; TMVA/MinuitFitter.h; TMVA/MinuitWrapper.h; TMVA/MisClassificationError.h; TMVA/ModulekNN.h; TMVA/Monitoring.h; TMVA/MsgLogger.h; TMVA/NeuralNet.h; TMVA/Node.h; TMVA/NodekNN.h; TMVA/OptimizeConfigParameters.h; TMVA/Option.h; TMVA/OptionMap.h; TMVA/Pattern.h; TMVA/PDEFoamCell.h; TMVA/PDEFoamDecisionTreeDensity.h; TMVA/PDEFoamDecisionTree.h; TMVA/PDEFoamDensityBase.h; TMVA/PDEFoamDiscriminantDensity.h; TMVA/PDEFoamDiscriminant.h; TMVA/PDEFoamEventDensity.h; TMVA/PDEFoamEvent.h; TMVA/PDEFoam.h; TMVA/PDEFoamKernelBase.h; TMVA/PDEFoamKernelGauss.h; TMVA/PDEFoamKernelLinN.h; TMVA/PDEFoamKernelTrivial.h; TMVA/PDEFoamMultiTarget.h; TMVA/PDEFoamTargetDensity.h; TMVA/PDEFoamTarget.h; TMVA/PDEFoamVect.h; TMVA/PDF.h; TMVA/QuickMVAProbEstimator.h; TMVA/Ranking.h; TMVA/Reader.h; TMVA/RegressionVariance.h; TMVA/ResultsClassification.h; TMVA/Results.h; TMVA/ResultsMulticlass.h; TMVA/ResultsRegression.h; TMVA/ROCCalc.h; TMVA/ROCCurve.h; TMVA/RootFinder.h; TMVA/RuleCut.h; TMVA/RuleEnsemble.h; TMVA/RuleFitAPI.h; TMVA/RuleFit.h; TMVA/RuleFitParams.h; TMVA/Rule.h; TMVA/SdivSqrtSplusB.h; TMVA/SeparationBa,MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:9151,Integrability,DEPEND,DEPENDENCIES,9151,"uron.cxx; src/TNeuronInputAbs.cxx; src/TNeuronInputChooser.cxx; src/TNeuronInput.cxx; src/TNeuronInputSqSum.cxx; src/TNeuronInputSum.cxx; src/Tools.cxx; src/TrainingHistory.cxx; src/TransformationHandler.cxx; src/TSpline1.cxx; src/TSpline2.cxx; src/TSynapse.cxx; src/Types.cxx; src/VariableDecorrTransform.cxx; src/VariableGaussTransform.cxx; src/VariableIdentityTransform.cxx; src/VariableImportance.cxx; src/VariableInfo.cxx; src/VariableNormalizeTransform.cxx; src/VariablePCATransform.cxx; src/VariableRearrangeTransform.cxx; src/VariableTransformBase.cxx; src/VariableTransform.cxx; src/VarTransformHandler.cxx; src/Volume.cxx; src/DNN/Architectures/Reference.cxx; src/DNN/Architectures/Reference/DataLoader.cxx; src/DNN/Architectures/Reference/TensorDataLoader.cxx; src/DNN/Architectures/Cpu.cxx; src/DNN/Architectures/Cpu/CpuBuffer.cxx; src/DNN/Architectures/Cpu/CpuMatrix.cxx; ${TMVA_EXTRA_SOURCES}; DEPENDENCIES; TreePlayer; Tree; Hist; Matrix; Minuit; MLP; MathCore; Core; RIO; XMLIO; ${TMVA_EXTRA_DEPENDENCIES}; DICTIONARY_OPTIONS; -writeEmptyRootPCM; INSTALL_OPTIONS; ${installoptions}; ${EXTRA_DICT_OPTS}; ). if(MSVC); target_compile_definitions(TMVA PRIVATE _USE_MATH_DEFINES); endif(). if(vdt OR builtin_vdt); target_link_libraries(TMVA PRIVATE VDT::VDT); endif(); if(builtin_vdt); add_dependencies(TMVA VDT); endif(). if(tmva-cpu); target_include_directories(TMVA PRIVATE ${TBB_INCLUDE_DIRS}); target_link_libraries(TMVA PRIVATE ${TBB_LIBRARIES}); set_target_properties(TMVA PROPERTIES COMPILE_FLAGS ""${TBB_CXXFLAGS}""). if(BLAS_FOUND); target_link_libraries(TMVA PRIVATE ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}); elseif(GSL_FOUND); target_compile_definitions(TMVA PRIVATE -DDNN_USE_CBLAS); target_include_directories(TMVA SYSTEM PRIVATE ${GSL_INCLUDE_DIR}); target_link_libraries(TMVA PRIVATE ${GSL_CBLAS_LIBRARY}); if(builtin_gsl); add_dependencies(TMVA GSL); endif(); else(); message(FATAL_ERROR ""tmva-cpu enabled but neither BLAS nor GSL BLAS were found""); endif(); endif(). if(tmva-",MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:10136,Integrability,message,message,10136,"der.cxx; src/DNN/Architectures/Cpu.cxx; src/DNN/Architectures/Cpu/CpuBuffer.cxx; src/DNN/Architectures/Cpu/CpuMatrix.cxx; ${TMVA_EXTRA_SOURCES}; DEPENDENCIES; TreePlayer; Tree; Hist; Matrix; Minuit; MLP; MathCore; Core; RIO; XMLIO; ${TMVA_EXTRA_DEPENDENCIES}; DICTIONARY_OPTIONS; -writeEmptyRootPCM; INSTALL_OPTIONS; ${installoptions}; ${EXTRA_DICT_OPTS}; ). if(MSVC); target_compile_definitions(TMVA PRIVATE _USE_MATH_DEFINES); endif(). if(vdt OR builtin_vdt); target_link_libraries(TMVA PRIVATE VDT::VDT); endif(); if(builtin_vdt); add_dependencies(TMVA VDT); endif(). if(tmva-cpu); target_include_directories(TMVA PRIVATE ${TBB_INCLUDE_DIRS}); target_link_libraries(TMVA PRIVATE ${TBB_LIBRARIES}); set_target_properties(TMVA PROPERTIES COMPILE_FLAGS ""${TBB_CXXFLAGS}""). if(BLAS_FOUND); target_link_libraries(TMVA PRIVATE ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}); elseif(GSL_FOUND); target_compile_definitions(TMVA PRIVATE -DDNN_USE_CBLAS); target_include_directories(TMVA SYSTEM PRIVATE ${GSL_INCLUDE_DIR}); target_link_libraries(TMVA PRIVATE ${GSL_CBLAS_LIBRARY}); if(builtin_gsl); add_dependencies(TMVA GSL); endif(); else(); message(FATAL_ERROR ""tmva-cpu enabled but neither BLAS nor GSL BLAS were found""); endif(); endif(). if(tmva-gpu); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cuda.cu; src/DNN/Architectures/Cuda/CudaBuffers.cxx; src/DNN/Architectures/Cuda/CudaMatrix.cu; src/DNN/Architectures/Cuda/CudaTensor.cu ); target_link_libraries(TMVA PRIVATE CUDA::cuda_driver CUDA::cublas); if(tmva-cudnn); message(STATUS ""Using Cuda+cuDNN for TMVA Deep Learning on GPU""); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cudnn/TensorDataLoader.cxx; src/DNN/Architectures/Cudnn.cu); target_link_libraries(TMVA PRIVATE ROOT::cuDNN); else(); message(STATUS ""cuDNN not found or disabled - use only Cuda+Cublas for TMVA Deep Learning on GPU""); endif(); endif(tmva-gpu). if(dataframe); ROOT_STANDARD_LIBRARY_PACKAGE(TMVAUtils; NO_INSTALL_HEADERS; HEADERS; TMVA/RTensorUtils.hxx; TMVA/RStandard",MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:10524,Integrability,message,message,10524,"dencies(TMVA VDT); endif(). if(tmva-cpu); target_include_directories(TMVA PRIVATE ${TBB_INCLUDE_DIRS}); target_link_libraries(TMVA PRIVATE ${TBB_LIBRARIES}); set_target_properties(TMVA PROPERTIES COMPILE_FLAGS ""${TBB_CXXFLAGS}""). if(BLAS_FOUND); target_link_libraries(TMVA PRIVATE ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}); elseif(GSL_FOUND); target_compile_definitions(TMVA PRIVATE -DDNN_USE_CBLAS); target_include_directories(TMVA SYSTEM PRIVATE ${GSL_INCLUDE_DIR}); target_link_libraries(TMVA PRIVATE ${GSL_CBLAS_LIBRARY}); if(builtin_gsl); add_dependencies(TMVA GSL); endif(); else(); message(FATAL_ERROR ""tmva-cpu enabled but neither BLAS nor GSL BLAS were found""); endif(); endif(). if(tmva-gpu); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cuda.cu; src/DNN/Architectures/Cuda/CudaBuffers.cxx; src/DNN/Architectures/Cuda/CudaMatrix.cu; src/DNN/Architectures/Cuda/CudaTensor.cu ); target_link_libraries(TMVA PRIVATE CUDA::cuda_driver CUDA::cublas); if(tmva-cudnn); message(STATUS ""Using Cuda+cuDNN for TMVA Deep Learning on GPU""); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cudnn/TensorDataLoader.cxx; src/DNN/Architectures/Cudnn.cu); target_link_libraries(TMVA PRIVATE ROOT::cuDNN); else(); message(STATUS ""cuDNN not found or disabled - use only Cuda+Cublas for TMVA Deep Learning on GPU""); endif(); endif(tmva-gpu). if(dataframe); ROOT_STANDARD_LIBRARY_PACKAGE(TMVAUtils; NO_INSTALL_HEADERS; HEADERS; TMVA/RTensorUtils.hxx; TMVA/RStandardScaler.hxx; TMVA/RReader.hxx; TMVA/RInferenceUtils.hxx; TMVA/RBDT.hxx; TMVA/RSofieReader.hxx; TMVA/RBatchGenerator.hxx; TMVA/RBatchLoader.hxx; TMVA/RChunkLoader.hxx. SOURCES. src/RBDT.cxx. DEPENDENCIES; TMVA ROOTDataFrame ROOTVecOps; ${TMVA_EXTRA_DEPENDENCIES}. LINKDEF LinkDefUtils.h; DICTIONARY_OPTIONS; -writeEmptyRootPCM. ${EXTRA_DICT_OPTS}; ); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ROOT_ADD_TEST_SUBDIRECTORY(test/crossvalidation); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN); ROOT_ADD_TEST_SUBDIRECTORY(test/Method); ROOT_ADD_TEST_SUBDIRE",MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:10759,Integrability,message,message,10759," if(BLAS_FOUND); target_link_libraries(TMVA PRIVATE ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}); elseif(GSL_FOUND); target_compile_definitions(TMVA PRIVATE -DDNN_USE_CBLAS); target_include_directories(TMVA SYSTEM PRIVATE ${GSL_INCLUDE_DIR}); target_link_libraries(TMVA PRIVATE ${GSL_CBLAS_LIBRARY}); if(builtin_gsl); add_dependencies(TMVA GSL); endif(); else(); message(FATAL_ERROR ""tmva-cpu enabled but neither BLAS nor GSL BLAS were found""); endif(); endif(). if(tmva-gpu); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cuda.cu; src/DNN/Architectures/Cuda/CudaBuffers.cxx; src/DNN/Architectures/Cuda/CudaMatrix.cu; src/DNN/Architectures/Cuda/CudaTensor.cu ); target_link_libraries(TMVA PRIVATE CUDA::cuda_driver CUDA::cublas); if(tmva-cudnn); message(STATUS ""Using Cuda+cuDNN for TMVA Deep Learning on GPU""); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cudnn/TensorDataLoader.cxx; src/DNN/Architectures/Cudnn.cu); target_link_libraries(TMVA PRIVATE ROOT::cuDNN); else(); message(STATUS ""cuDNN not found or disabled - use only Cuda+Cublas for TMVA Deep Learning on GPU""); endif(); endif(tmva-gpu). if(dataframe); ROOT_STANDARD_LIBRARY_PACKAGE(TMVAUtils; NO_INSTALL_HEADERS; HEADERS; TMVA/RTensorUtils.hxx; TMVA/RStandardScaler.hxx; TMVA/RReader.hxx; TMVA/RInferenceUtils.hxx; TMVA/RBDT.hxx; TMVA/RSofieReader.hxx; TMVA/RBatchGenerator.hxx; TMVA/RBatchLoader.hxx; TMVA/RChunkLoader.hxx. SOURCES. src/RBDT.cxx. DEPENDENCIES; TMVA ROOTDataFrame ROOTVecOps; ${TMVA_EXTRA_DEPENDENCIES}. LINKDEF LinkDefUtils.h; DICTIONARY_OPTIONS; -writeEmptyRootPCM. ${EXTRA_DICT_OPTS}; ); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ROOT_ADD_TEST_SUBDIRECTORY(test/crossvalidation); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN); ROOT_ADD_TEST_SUBDIRECTORY(test/Method); ROOT_ADD_TEST_SUBDIRECTORY(test/ROC); ROOT_ADD_TEST_SUBDIRECTORY(test/envelope); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/CNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/RNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/LSTM); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/GRU); ",MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:11196,Integrability,DEPEND,DEPENDENCIES,11196," if(BLAS_FOUND); target_link_libraries(TMVA PRIVATE ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}); elseif(GSL_FOUND); target_compile_definitions(TMVA PRIVATE -DDNN_USE_CBLAS); target_include_directories(TMVA SYSTEM PRIVATE ${GSL_INCLUDE_DIR}); target_link_libraries(TMVA PRIVATE ${GSL_CBLAS_LIBRARY}); if(builtin_gsl); add_dependencies(TMVA GSL); endif(); else(); message(FATAL_ERROR ""tmva-cpu enabled but neither BLAS nor GSL BLAS were found""); endif(); endif(). if(tmva-gpu); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cuda.cu; src/DNN/Architectures/Cuda/CudaBuffers.cxx; src/DNN/Architectures/Cuda/CudaMatrix.cu; src/DNN/Architectures/Cuda/CudaTensor.cu ); target_link_libraries(TMVA PRIVATE CUDA::cuda_driver CUDA::cublas); if(tmva-cudnn); message(STATUS ""Using Cuda+cuDNN for TMVA Deep Learning on GPU""); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cudnn/TensorDataLoader.cxx; src/DNN/Architectures/Cudnn.cu); target_link_libraries(TMVA PRIVATE ROOT::cuDNN); else(); message(STATUS ""cuDNN not found or disabled - use only Cuda+Cublas for TMVA Deep Learning on GPU""); endif(); endif(tmva-gpu). if(dataframe); ROOT_STANDARD_LIBRARY_PACKAGE(TMVAUtils; NO_INSTALL_HEADERS; HEADERS; TMVA/RTensorUtils.hxx; TMVA/RStandardScaler.hxx; TMVA/RReader.hxx; TMVA/RInferenceUtils.hxx; TMVA/RBDT.hxx; TMVA/RSofieReader.hxx; TMVA/RBatchGenerator.hxx; TMVA/RBatchLoader.hxx; TMVA/RChunkLoader.hxx. SOURCES. src/RBDT.cxx. DEPENDENCIES; TMVA ROOTDataFrame ROOTVecOps; ${TMVA_EXTRA_DEPENDENCIES}. LINKDEF LinkDefUtils.h; DICTIONARY_OPTIONS; -writeEmptyRootPCM. ${EXTRA_DICT_OPTS}; ); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ROOT_ADD_TEST_SUBDIRECTORY(test/crossvalidation); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN); ROOT_ADD_TEST_SUBDIRECTORY(test/Method); ROOT_ADD_TEST_SUBDIRECTORY(test/ROC); ROOT_ADD_TEST_SUBDIRECTORY(test/envelope); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/CNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/RNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/LSTM); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/GRU); ",MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:932,Modifiability,Config,Config,932,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT tmva package; # @author Pere Mato, CERN; ############################################################################. if(NOT tmva-gpu); set(installoptions ${installoptions} FILTER ""Cuda""); endif(). if (imt); list(APPEND TMVA_EXTRA_DEPENDENCIES Imt); endif(imt). set (EXTRA_DICT_OPTS); if (runtime_cxxmodules AND WIN32); set (EXTRA_DICT_OPTS NO_CXXMODULE); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(TMVA; HEADERS; TMVA/BDTEventWrapper.h; TMVA/BinarySearchTree.h; TMVA/BinarySearchTreeNode.h; TMVA/BinaryTree.h; TMVA/CCPruner.h; TMVA/CCTreeWrapper.h; TMVA/Classification.h; TMVA/ClassifierFactory.h; TMVA/ClassInfo.h; TMVA/Config.h; TMVA/Configurable.h; TMVA/ConvergenceTest.h; TMVA/CostComplexityPruneTool.h; TMVA/CrossEntropy.h; TMVA/CrossValidation.h; TMVA/CvSplit.h; TMVA/DataInputHandler.h; TMVA/DataLoader.h; TMVA/DataSetFactory.h; TMVA/DataSet.h; TMVA/DataSetInfo.h; TMVA/DataSetManager.h; TMVA/DecisionTree.h; TMVA/DecisionTreeNode.h; TMVA/Envelope.h; TMVA/Event.h; TMVA/ExpectedErrorPruneTool.h; TMVA/Executor.h; TMVA/Factory.h; TMVA/FitterBase.h; TMVA/GeneticAlgorithm.h; TMVA/GeneticFitter.h; TMVA/GeneticGenes.h; TMVA/GeneticPopulation.h; TMVA/GeneticRange.h; TMVA/GiniIndex.h; TMVA/GiniIndexWithLaplace.h; TMVA/HyperParameterOptimisation.h; TMVA/IFitterTarget.h; TMVA/IMethod.h; TMVA/Interval.h; TMVA/IPruneTool.h; TMVA/KDEKernel.h; TMVA/LDA.h; TMVA/LogInterval.h; TMVA/LossFunction.h; TMVA/MCFitter.h; TMVA/MethodANNBase.h; TMVA/MethodBase.h; TMVA/MethodBayesClassifier.h; TMVA/MethodBDT.h; TMVA/MethodBoost.h; TMVA/MethodCategory.h; TMVA/MethodCFMlpANN_def.h; TMVA/MethodCFMlpANN.h; TMVA/MethodCFMlpANN_Utils.h; TMVA/MethodCompositeBase.h; TMVA/MethodCrossValidation.h; TMVA/Me",MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:947,Modifiability,Config,Configurable,947,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT tmva package; # @author Pere Mato, CERN; ############################################################################. if(NOT tmva-gpu); set(installoptions ${installoptions} FILTER ""Cuda""); endif(). if (imt); list(APPEND TMVA_EXTRA_DEPENDENCIES Imt); endif(imt). set (EXTRA_DICT_OPTS); if (runtime_cxxmodules AND WIN32); set (EXTRA_DICT_OPTS NO_CXXMODULE); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(TMVA; HEADERS; TMVA/BDTEventWrapper.h; TMVA/BinarySearchTree.h; TMVA/BinarySearchTreeNode.h; TMVA/BinaryTree.h; TMVA/CCPruner.h; TMVA/CCTreeWrapper.h; TMVA/Classification.h; TMVA/ClassifierFactory.h; TMVA/ClassInfo.h; TMVA/Config.h; TMVA/Configurable.h; TMVA/ConvergenceTest.h; TMVA/CostComplexityPruneTool.h; TMVA/CrossEntropy.h; TMVA/CrossValidation.h; TMVA/CvSplit.h; TMVA/DataInputHandler.h; TMVA/DataLoader.h; TMVA/DataSetFactory.h; TMVA/DataSet.h; TMVA/DataSetInfo.h; TMVA/DataSetManager.h; TMVA/DecisionTree.h; TMVA/DecisionTreeNode.h; TMVA/Envelope.h; TMVA/Event.h; TMVA/ExpectedErrorPruneTool.h; TMVA/Executor.h; TMVA/Factory.h; TMVA/FitterBase.h; TMVA/GeneticAlgorithm.h; TMVA/GeneticFitter.h; TMVA/GeneticGenes.h; TMVA/GeneticPopulation.h; TMVA/GeneticRange.h; TMVA/GiniIndex.h; TMVA/GiniIndexWithLaplace.h; TMVA/HyperParameterOptimisation.h; TMVA/IFitterTarget.h; TMVA/IMethod.h; TMVA/Interval.h; TMVA/IPruneTool.h; TMVA/KDEKernel.h; TMVA/LDA.h; TMVA/LogInterval.h; TMVA/LossFunction.h; TMVA/MCFitter.h; TMVA/MethodANNBase.h; TMVA/MethodBase.h; TMVA/MethodBayesClassifier.h; TMVA/MethodBDT.h; TMVA/MethodBoost.h; TMVA/MethodCategory.h; TMVA/MethodCFMlpANN_def.h; TMVA/MethodCFMlpANN.h; TMVA/MethodCFMlpANN_Utils.h; TMVA/MethodCompositeBase.h; TMVA/MethodCrossValidation.h; TMVA/Me",MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:4025,Modifiability,Variab,VariableDecorrTransform,4025,VAProbEstimator.h; TMVA/Ranking.h; TMVA/Reader.h; TMVA/RegressionVariance.h; TMVA/ResultsClassification.h; TMVA/Results.h; TMVA/ResultsMulticlass.h; TMVA/ResultsRegression.h; TMVA/ROCCalc.h; TMVA/ROCCurve.h; TMVA/RootFinder.h; TMVA/RuleCut.h; TMVA/RuleEnsemble.h; TMVA/RuleFitAPI.h; TMVA/RuleFit.h; TMVA/RuleFitParams.h; TMVA/Rule.h; TMVA/SdivSqrtSplusB.h; TMVA/SeparationBase.h; TMVA/SimulatedAnnealingFitter.h; TMVA/SimulatedAnnealing.h; TMVA/SVEvent.h; TMVA/SVKernelFunction.h; TMVA/SVKernelMatrix.h; TMVA/SVWorkingSet.h; TMVA/TActivationChooser.h; TMVA/TActivation.h; TMVA/TActivationIdentity.h; TMVA/TActivationRadial.h; TMVA/TActivationReLU.h; TMVA/TActivationSigmoid.h; TMVA/TActivationTanh.h; TMVA/Timer.h; TMVA/TNeuron.h; TMVA/TNeuronInputAbs.h; TMVA/TNeuronInputChooser.h; TMVA/TNeuronInput.h; TMVA/TNeuronInputSqSum.h; TMVA/TNeuronInputSum.h; TMVA/Tools.h; TMVA/TrainingHistory.h; TMVA/TransformationHandler.h; TMVA/TSpline1.h; TMVA/TSpline2.h; TMVA/TSynapse.h; TMVA/Types.h; TMVA/VariableDecorrTransform.h; TMVA/VariableGaussTransform.h; TMVA/VariableIdentityTransform.h; TMVA/VariableImportance.h; TMVA/VariableInfo.h; TMVA/VariableNormalizeTransform.h; TMVA/VariablePCATransform.h; TMVA/VariableRearrangeTransform.h; TMVA/VariableTransformBase.h; TMVA/VariableTransform.h; TMVA/VarTransformHandler.h; TMVA/Version.h; TMVA/Volume.h; # TMVA/DNN/Adadelta.h; # TMVA/DNN/Adagrad.h; # TMVA/DNN/Adam.h; # TMVA/DNN/BatchNormLayer.h; # TMVA/DNN/DataLoader.h; # TMVA/DNN/DeepNet.h; # TMVA/DNN/DenseLayer.h; # TMVA/DNN/DLMinimizers.h; # TMVA/DNN/Functions.h; # TMVA/DNN/GeneralLayer.h; # TMVA/DNN/ReshapeLayer.h; # TMVA/DNN/RMSProp.h; # TMVA/DNN/SGD.h; # TMVA/DNN/TensorDataLoader.h; # TMVA/DNN/CNN/ContextHandles.h; # TMVA/DNN/CNN/ConvLayer.h; # TMVA/DNN/CNN/MaxPoolLayer.h; # TMVA/DNN/RNN/RNNLayer.h; # TMVA/DNN/Architectures/Reference.h; # TMVA/DNN/Architectures/Reference/DataLoader.h; # TMVA/DNN/Architectures/Reference/TensorDataLoader.h; # TMVA/DNN/Architectures/Cpu.h; # TMVA/DNN/Architect,MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:4057,Modifiability,Variab,VariableGaussTransform,4057,.h; TMVA/Reader.h; TMVA/RegressionVariance.h; TMVA/ResultsClassification.h; TMVA/Results.h; TMVA/ResultsMulticlass.h; TMVA/ResultsRegression.h; TMVA/ROCCalc.h; TMVA/ROCCurve.h; TMVA/RootFinder.h; TMVA/RuleCut.h; TMVA/RuleEnsemble.h; TMVA/RuleFitAPI.h; TMVA/RuleFit.h; TMVA/RuleFitParams.h; TMVA/Rule.h; TMVA/SdivSqrtSplusB.h; TMVA/SeparationBase.h; TMVA/SimulatedAnnealingFitter.h; TMVA/SimulatedAnnealing.h; TMVA/SVEvent.h; TMVA/SVKernelFunction.h; TMVA/SVKernelMatrix.h; TMVA/SVWorkingSet.h; TMVA/TActivationChooser.h; TMVA/TActivation.h; TMVA/TActivationIdentity.h; TMVA/TActivationRadial.h; TMVA/TActivationReLU.h; TMVA/TActivationSigmoid.h; TMVA/TActivationTanh.h; TMVA/Timer.h; TMVA/TNeuron.h; TMVA/TNeuronInputAbs.h; TMVA/TNeuronInputChooser.h; TMVA/TNeuronInput.h; TMVA/TNeuronInputSqSum.h; TMVA/TNeuronInputSum.h; TMVA/Tools.h; TMVA/TrainingHistory.h; TMVA/TransformationHandler.h; TMVA/TSpline1.h; TMVA/TSpline2.h; TMVA/TSynapse.h; TMVA/Types.h; TMVA/VariableDecorrTransform.h; TMVA/VariableGaussTransform.h; TMVA/VariableIdentityTransform.h; TMVA/VariableImportance.h; TMVA/VariableInfo.h; TMVA/VariableNormalizeTransform.h; TMVA/VariablePCATransform.h; TMVA/VariableRearrangeTransform.h; TMVA/VariableTransformBase.h; TMVA/VariableTransform.h; TMVA/VarTransformHandler.h; TMVA/Version.h; TMVA/Volume.h; # TMVA/DNN/Adadelta.h; # TMVA/DNN/Adagrad.h; # TMVA/DNN/Adam.h; # TMVA/DNN/BatchNormLayer.h; # TMVA/DNN/DataLoader.h; # TMVA/DNN/DeepNet.h; # TMVA/DNN/DenseLayer.h; # TMVA/DNN/DLMinimizers.h; # TMVA/DNN/Functions.h; # TMVA/DNN/GeneralLayer.h; # TMVA/DNN/ReshapeLayer.h; # TMVA/DNN/RMSProp.h; # TMVA/DNN/SGD.h; # TMVA/DNN/TensorDataLoader.h; # TMVA/DNN/CNN/ContextHandles.h; # TMVA/DNN/CNN/ConvLayer.h; # TMVA/DNN/CNN/MaxPoolLayer.h; # TMVA/DNN/RNN/RNNLayer.h; # TMVA/DNN/Architectures/Reference.h; # TMVA/DNN/Architectures/Reference/DataLoader.h; # TMVA/DNN/Architectures/Reference/TensorDataLoader.h; # TMVA/DNN/Architectures/Cpu.h; # TMVA/DNN/Architectures/Cpu/CpuBuffer.h; # TMVA/DNN,MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:4088,Modifiability,Variab,VariableIdentityTransform,4088,nVariance.h; TMVA/ResultsClassification.h; TMVA/Results.h; TMVA/ResultsMulticlass.h; TMVA/ResultsRegression.h; TMVA/ROCCalc.h; TMVA/ROCCurve.h; TMVA/RootFinder.h; TMVA/RuleCut.h; TMVA/RuleEnsemble.h; TMVA/RuleFitAPI.h; TMVA/RuleFit.h; TMVA/RuleFitParams.h; TMVA/Rule.h; TMVA/SdivSqrtSplusB.h; TMVA/SeparationBase.h; TMVA/SimulatedAnnealingFitter.h; TMVA/SimulatedAnnealing.h; TMVA/SVEvent.h; TMVA/SVKernelFunction.h; TMVA/SVKernelMatrix.h; TMVA/SVWorkingSet.h; TMVA/TActivationChooser.h; TMVA/TActivation.h; TMVA/TActivationIdentity.h; TMVA/TActivationRadial.h; TMVA/TActivationReLU.h; TMVA/TActivationSigmoid.h; TMVA/TActivationTanh.h; TMVA/Timer.h; TMVA/TNeuron.h; TMVA/TNeuronInputAbs.h; TMVA/TNeuronInputChooser.h; TMVA/TNeuronInput.h; TMVA/TNeuronInputSqSum.h; TMVA/TNeuronInputSum.h; TMVA/Tools.h; TMVA/TrainingHistory.h; TMVA/TransformationHandler.h; TMVA/TSpline1.h; TMVA/TSpline2.h; TMVA/TSynapse.h; TMVA/Types.h; TMVA/VariableDecorrTransform.h; TMVA/VariableGaussTransform.h; TMVA/VariableIdentityTransform.h; TMVA/VariableImportance.h; TMVA/VariableInfo.h; TMVA/VariableNormalizeTransform.h; TMVA/VariablePCATransform.h; TMVA/VariableRearrangeTransform.h; TMVA/VariableTransformBase.h; TMVA/VariableTransform.h; TMVA/VarTransformHandler.h; TMVA/Version.h; TMVA/Volume.h; # TMVA/DNN/Adadelta.h; # TMVA/DNN/Adagrad.h; # TMVA/DNN/Adam.h; # TMVA/DNN/BatchNormLayer.h; # TMVA/DNN/DataLoader.h; # TMVA/DNN/DeepNet.h; # TMVA/DNN/DenseLayer.h; # TMVA/DNN/DLMinimizers.h; # TMVA/DNN/Functions.h; # TMVA/DNN/GeneralLayer.h; # TMVA/DNN/ReshapeLayer.h; # TMVA/DNN/RMSProp.h; # TMVA/DNN/SGD.h; # TMVA/DNN/TensorDataLoader.h; # TMVA/DNN/CNN/ContextHandles.h; # TMVA/DNN/CNN/ConvLayer.h; # TMVA/DNN/CNN/MaxPoolLayer.h; # TMVA/DNN/RNN/RNNLayer.h; # TMVA/DNN/Architectures/Reference.h; # TMVA/DNN/Architectures/Reference/DataLoader.h; # TMVA/DNN/Architectures/Reference/TensorDataLoader.h; # TMVA/DNN/Architectures/Cpu.h; # TMVA/DNN/Architectures/Cpu/CpuBuffer.h; # TMVA/DNN/Architectures/Cpu/CpuMatrix.h; ,MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:4122,Modifiability,Variab,VariableImportance,4122,ification.h; TMVA/Results.h; TMVA/ResultsMulticlass.h; TMVA/ResultsRegression.h; TMVA/ROCCalc.h; TMVA/ROCCurve.h; TMVA/RootFinder.h; TMVA/RuleCut.h; TMVA/RuleEnsemble.h; TMVA/RuleFitAPI.h; TMVA/RuleFit.h; TMVA/RuleFitParams.h; TMVA/Rule.h; TMVA/SdivSqrtSplusB.h; TMVA/SeparationBase.h; TMVA/SimulatedAnnealingFitter.h; TMVA/SimulatedAnnealing.h; TMVA/SVEvent.h; TMVA/SVKernelFunction.h; TMVA/SVKernelMatrix.h; TMVA/SVWorkingSet.h; TMVA/TActivationChooser.h; TMVA/TActivation.h; TMVA/TActivationIdentity.h; TMVA/TActivationRadial.h; TMVA/TActivationReLU.h; TMVA/TActivationSigmoid.h; TMVA/TActivationTanh.h; TMVA/Timer.h; TMVA/TNeuron.h; TMVA/TNeuronInputAbs.h; TMVA/TNeuronInputChooser.h; TMVA/TNeuronInput.h; TMVA/TNeuronInputSqSum.h; TMVA/TNeuronInputSum.h; TMVA/Tools.h; TMVA/TrainingHistory.h; TMVA/TransformationHandler.h; TMVA/TSpline1.h; TMVA/TSpline2.h; TMVA/TSynapse.h; TMVA/Types.h; TMVA/VariableDecorrTransform.h; TMVA/VariableGaussTransform.h; TMVA/VariableIdentityTransform.h; TMVA/VariableImportance.h; TMVA/VariableInfo.h; TMVA/VariableNormalizeTransform.h; TMVA/VariablePCATransform.h; TMVA/VariableRearrangeTransform.h; TMVA/VariableTransformBase.h; TMVA/VariableTransform.h; TMVA/VarTransformHandler.h; TMVA/Version.h; TMVA/Volume.h; # TMVA/DNN/Adadelta.h; # TMVA/DNN/Adagrad.h; # TMVA/DNN/Adam.h; # TMVA/DNN/BatchNormLayer.h; # TMVA/DNN/DataLoader.h; # TMVA/DNN/DeepNet.h; # TMVA/DNN/DenseLayer.h; # TMVA/DNN/DLMinimizers.h; # TMVA/DNN/Functions.h; # TMVA/DNN/GeneralLayer.h; # TMVA/DNN/ReshapeLayer.h; # TMVA/DNN/RMSProp.h; # TMVA/DNN/SGD.h; # TMVA/DNN/TensorDataLoader.h; # TMVA/DNN/CNN/ContextHandles.h; # TMVA/DNN/CNN/ConvLayer.h; # TMVA/DNN/CNN/MaxPoolLayer.h; # TMVA/DNN/RNN/RNNLayer.h; # TMVA/DNN/Architectures/Reference.h; # TMVA/DNN/Architectures/Reference/DataLoader.h; # TMVA/DNN/Architectures/Reference/TensorDataLoader.h; # TMVA/DNN/Architectures/Cpu.h; # TMVA/DNN/Architectures/Cpu/CpuBuffer.h; # TMVA/DNN/Architectures/Cpu/CpuMatrix.h; # TMVA/DNN/Architectures/Cpu/Cp,MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:4149,Modifiability,Variab,VariableInfo,4149,s.h; TMVA/ResultsMulticlass.h; TMVA/ResultsRegression.h; TMVA/ROCCalc.h; TMVA/ROCCurve.h; TMVA/RootFinder.h; TMVA/RuleCut.h; TMVA/RuleEnsemble.h; TMVA/RuleFitAPI.h; TMVA/RuleFit.h; TMVA/RuleFitParams.h; TMVA/Rule.h; TMVA/SdivSqrtSplusB.h; TMVA/SeparationBase.h; TMVA/SimulatedAnnealingFitter.h; TMVA/SimulatedAnnealing.h; TMVA/SVEvent.h; TMVA/SVKernelFunction.h; TMVA/SVKernelMatrix.h; TMVA/SVWorkingSet.h; TMVA/TActivationChooser.h; TMVA/TActivation.h; TMVA/TActivationIdentity.h; TMVA/TActivationRadial.h; TMVA/TActivationReLU.h; TMVA/TActivationSigmoid.h; TMVA/TActivationTanh.h; TMVA/Timer.h; TMVA/TNeuron.h; TMVA/TNeuronInputAbs.h; TMVA/TNeuronInputChooser.h; TMVA/TNeuronInput.h; TMVA/TNeuronInputSqSum.h; TMVA/TNeuronInputSum.h; TMVA/Tools.h; TMVA/TrainingHistory.h; TMVA/TransformationHandler.h; TMVA/TSpline1.h; TMVA/TSpline2.h; TMVA/TSynapse.h; TMVA/Types.h; TMVA/VariableDecorrTransform.h; TMVA/VariableGaussTransform.h; TMVA/VariableIdentityTransform.h; TMVA/VariableImportance.h; TMVA/VariableInfo.h; TMVA/VariableNormalizeTransform.h; TMVA/VariablePCATransform.h; TMVA/VariableRearrangeTransform.h; TMVA/VariableTransformBase.h; TMVA/VariableTransform.h; TMVA/VarTransformHandler.h; TMVA/Version.h; TMVA/Volume.h; # TMVA/DNN/Adadelta.h; # TMVA/DNN/Adagrad.h; # TMVA/DNN/Adam.h; # TMVA/DNN/BatchNormLayer.h; # TMVA/DNN/DataLoader.h; # TMVA/DNN/DeepNet.h; # TMVA/DNN/DenseLayer.h; # TMVA/DNN/DLMinimizers.h; # TMVA/DNN/Functions.h; # TMVA/DNN/GeneralLayer.h; # TMVA/DNN/ReshapeLayer.h; # TMVA/DNN/RMSProp.h; # TMVA/DNN/SGD.h; # TMVA/DNN/TensorDataLoader.h; # TMVA/DNN/CNN/ContextHandles.h; # TMVA/DNN/CNN/ConvLayer.h; # TMVA/DNN/CNN/MaxPoolLayer.h; # TMVA/DNN/RNN/RNNLayer.h; # TMVA/DNN/Architectures/Reference.h; # TMVA/DNN/Architectures/Reference/DataLoader.h; # TMVA/DNN/Architectures/Reference/TensorDataLoader.h; # TMVA/DNN/Architectures/Cpu.h; # TMVA/DNN/Architectures/Cpu/CpuBuffer.h; # TMVA/DNN/Architectures/Cpu/CpuMatrix.h; # TMVA/DNN/Architectures/Cpu/CpuTensor.h; ${TMVA_EXTRA_,MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:4170,Modifiability,Variab,VariableNormalizeTransform,4170,h; TMVA/ResultsRegression.h; TMVA/ROCCalc.h; TMVA/ROCCurve.h; TMVA/RootFinder.h; TMVA/RuleCut.h; TMVA/RuleEnsemble.h; TMVA/RuleFitAPI.h; TMVA/RuleFit.h; TMVA/RuleFitParams.h; TMVA/Rule.h; TMVA/SdivSqrtSplusB.h; TMVA/SeparationBase.h; TMVA/SimulatedAnnealingFitter.h; TMVA/SimulatedAnnealing.h; TMVA/SVEvent.h; TMVA/SVKernelFunction.h; TMVA/SVKernelMatrix.h; TMVA/SVWorkingSet.h; TMVA/TActivationChooser.h; TMVA/TActivation.h; TMVA/TActivationIdentity.h; TMVA/TActivationRadial.h; TMVA/TActivationReLU.h; TMVA/TActivationSigmoid.h; TMVA/TActivationTanh.h; TMVA/Timer.h; TMVA/TNeuron.h; TMVA/TNeuronInputAbs.h; TMVA/TNeuronInputChooser.h; TMVA/TNeuronInput.h; TMVA/TNeuronInputSqSum.h; TMVA/TNeuronInputSum.h; TMVA/Tools.h; TMVA/TrainingHistory.h; TMVA/TransformationHandler.h; TMVA/TSpline1.h; TMVA/TSpline2.h; TMVA/TSynapse.h; TMVA/Types.h; TMVA/VariableDecorrTransform.h; TMVA/VariableGaussTransform.h; TMVA/VariableIdentityTransform.h; TMVA/VariableImportance.h; TMVA/VariableInfo.h; TMVA/VariableNormalizeTransform.h; TMVA/VariablePCATransform.h; TMVA/VariableRearrangeTransform.h; TMVA/VariableTransformBase.h; TMVA/VariableTransform.h; TMVA/VarTransformHandler.h; TMVA/Version.h; TMVA/Volume.h; # TMVA/DNN/Adadelta.h; # TMVA/DNN/Adagrad.h; # TMVA/DNN/Adam.h; # TMVA/DNN/BatchNormLayer.h; # TMVA/DNN/DataLoader.h; # TMVA/DNN/DeepNet.h; # TMVA/DNN/DenseLayer.h; # TMVA/DNN/DLMinimizers.h; # TMVA/DNN/Functions.h; # TMVA/DNN/GeneralLayer.h; # TMVA/DNN/ReshapeLayer.h; # TMVA/DNN/RMSProp.h; # TMVA/DNN/SGD.h; # TMVA/DNN/TensorDataLoader.h; # TMVA/DNN/CNN/ContextHandles.h; # TMVA/DNN/CNN/ConvLayer.h; # TMVA/DNN/CNN/MaxPoolLayer.h; # TMVA/DNN/RNN/RNNLayer.h; # TMVA/DNN/Architectures/Reference.h; # TMVA/DNN/Architectures/Reference/DataLoader.h; # TMVA/DNN/Architectures/Reference/TensorDataLoader.h; # TMVA/DNN/Architectures/Cpu.h; # TMVA/DNN/Architectures/Cpu/CpuBuffer.h; # TMVA/DNN/Architectures/Cpu/CpuMatrix.h; # TMVA/DNN/Architectures/Cpu/CpuTensor.h; ${TMVA_EXTRA_HEADERS}; SOURCES; src/BDTEv,MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:4205,Modifiability,Variab,VariablePCATransform,4205,A/ROCCalc.h; TMVA/ROCCurve.h; TMVA/RootFinder.h; TMVA/RuleCut.h; TMVA/RuleEnsemble.h; TMVA/RuleFitAPI.h; TMVA/RuleFit.h; TMVA/RuleFitParams.h; TMVA/Rule.h; TMVA/SdivSqrtSplusB.h; TMVA/SeparationBase.h; TMVA/SimulatedAnnealingFitter.h; TMVA/SimulatedAnnealing.h; TMVA/SVEvent.h; TMVA/SVKernelFunction.h; TMVA/SVKernelMatrix.h; TMVA/SVWorkingSet.h; TMVA/TActivationChooser.h; TMVA/TActivation.h; TMVA/TActivationIdentity.h; TMVA/TActivationRadial.h; TMVA/TActivationReLU.h; TMVA/TActivationSigmoid.h; TMVA/TActivationTanh.h; TMVA/Timer.h; TMVA/TNeuron.h; TMVA/TNeuronInputAbs.h; TMVA/TNeuronInputChooser.h; TMVA/TNeuronInput.h; TMVA/TNeuronInputSqSum.h; TMVA/TNeuronInputSum.h; TMVA/Tools.h; TMVA/TrainingHistory.h; TMVA/TransformationHandler.h; TMVA/TSpline1.h; TMVA/TSpline2.h; TMVA/TSynapse.h; TMVA/Types.h; TMVA/VariableDecorrTransform.h; TMVA/VariableGaussTransform.h; TMVA/VariableIdentityTransform.h; TMVA/VariableImportance.h; TMVA/VariableInfo.h; TMVA/VariableNormalizeTransform.h; TMVA/VariablePCATransform.h; TMVA/VariableRearrangeTransform.h; TMVA/VariableTransformBase.h; TMVA/VariableTransform.h; TMVA/VarTransformHandler.h; TMVA/Version.h; TMVA/Volume.h; # TMVA/DNN/Adadelta.h; # TMVA/DNN/Adagrad.h; # TMVA/DNN/Adam.h; # TMVA/DNN/BatchNormLayer.h; # TMVA/DNN/DataLoader.h; # TMVA/DNN/DeepNet.h; # TMVA/DNN/DenseLayer.h; # TMVA/DNN/DLMinimizers.h; # TMVA/DNN/Functions.h; # TMVA/DNN/GeneralLayer.h; # TMVA/DNN/ReshapeLayer.h; # TMVA/DNN/RMSProp.h; # TMVA/DNN/SGD.h; # TMVA/DNN/TensorDataLoader.h; # TMVA/DNN/CNN/ContextHandles.h; # TMVA/DNN/CNN/ConvLayer.h; # TMVA/DNN/CNN/MaxPoolLayer.h; # TMVA/DNN/RNN/RNNLayer.h; # TMVA/DNN/Architectures/Reference.h; # TMVA/DNN/Architectures/Reference/DataLoader.h; # TMVA/DNN/Architectures/Reference/TensorDataLoader.h; # TMVA/DNN/Architectures/Cpu.h; # TMVA/DNN/Architectures/Cpu/CpuBuffer.h; # TMVA/DNN/Architectures/Cpu/CpuMatrix.h; # TMVA/DNN/Architectures/Cpu/CpuTensor.h; ${TMVA_EXTRA_HEADERS}; SOURCES; src/BDTEventWrapper.cxx; src/BinarySearch,MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:4234,Modifiability,Variab,VariableRearrangeTransform,4234,VA/RootFinder.h; TMVA/RuleCut.h; TMVA/RuleEnsemble.h; TMVA/RuleFitAPI.h; TMVA/RuleFit.h; TMVA/RuleFitParams.h; TMVA/Rule.h; TMVA/SdivSqrtSplusB.h; TMVA/SeparationBase.h; TMVA/SimulatedAnnealingFitter.h; TMVA/SimulatedAnnealing.h; TMVA/SVEvent.h; TMVA/SVKernelFunction.h; TMVA/SVKernelMatrix.h; TMVA/SVWorkingSet.h; TMVA/TActivationChooser.h; TMVA/TActivation.h; TMVA/TActivationIdentity.h; TMVA/TActivationRadial.h; TMVA/TActivationReLU.h; TMVA/TActivationSigmoid.h; TMVA/TActivationTanh.h; TMVA/Timer.h; TMVA/TNeuron.h; TMVA/TNeuronInputAbs.h; TMVA/TNeuronInputChooser.h; TMVA/TNeuronInput.h; TMVA/TNeuronInputSqSum.h; TMVA/TNeuronInputSum.h; TMVA/Tools.h; TMVA/TrainingHistory.h; TMVA/TransformationHandler.h; TMVA/TSpline1.h; TMVA/TSpline2.h; TMVA/TSynapse.h; TMVA/Types.h; TMVA/VariableDecorrTransform.h; TMVA/VariableGaussTransform.h; TMVA/VariableIdentityTransform.h; TMVA/VariableImportance.h; TMVA/VariableInfo.h; TMVA/VariableNormalizeTransform.h; TMVA/VariablePCATransform.h; TMVA/VariableRearrangeTransform.h; TMVA/VariableTransformBase.h; TMVA/VariableTransform.h; TMVA/VarTransformHandler.h; TMVA/Version.h; TMVA/Volume.h; # TMVA/DNN/Adadelta.h; # TMVA/DNN/Adagrad.h; # TMVA/DNN/Adam.h; # TMVA/DNN/BatchNormLayer.h; # TMVA/DNN/DataLoader.h; # TMVA/DNN/DeepNet.h; # TMVA/DNN/DenseLayer.h; # TMVA/DNN/DLMinimizers.h; # TMVA/DNN/Functions.h; # TMVA/DNN/GeneralLayer.h; # TMVA/DNN/ReshapeLayer.h; # TMVA/DNN/RMSProp.h; # TMVA/DNN/SGD.h; # TMVA/DNN/TensorDataLoader.h; # TMVA/DNN/CNN/ContextHandles.h; # TMVA/DNN/CNN/ConvLayer.h; # TMVA/DNN/CNN/MaxPoolLayer.h; # TMVA/DNN/RNN/RNNLayer.h; # TMVA/DNN/Architectures/Reference.h; # TMVA/DNN/Architectures/Reference/DataLoader.h; # TMVA/DNN/Architectures/Reference/TensorDataLoader.h; # TMVA/DNN/Architectures/Cpu.h; # TMVA/DNN/Architectures/Cpu/CpuBuffer.h; # TMVA/DNN/Architectures/Cpu/CpuMatrix.h; # TMVA/DNN/Architectures/Cpu/CpuTensor.h; ${TMVA_EXTRA_HEADERS}; SOURCES; src/BDTEventWrapper.cxx; src/BinarySearchTree.cxx; src/BinarySearchTreeNo,MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:4269,Modifiability,Variab,VariableTransformBase,4269,TMVA/RuleEnsemble.h; TMVA/RuleFitAPI.h; TMVA/RuleFit.h; TMVA/RuleFitParams.h; TMVA/Rule.h; TMVA/SdivSqrtSplusB.h; TMVA/SeparationBase.h; TMVA/SimulatedAnnealingFitter.h; TMVA/SimulatedAnnealing.h; TMVA/SVEvent.h; TMVA/SVKernelFunction.h; TMVA/SVKernelMatrix.h; TMVA/SVWorkingSet.h; TMVA/TActivationChooser.h; TMVA/TActivation.h; TMVA/TActivationIdentity.h; TMVA/TActivationRadial.h; TMVA/TActivationReLU.h; TMVA/TActivationSigmoid.h; TMVA/TActivationTanh.h; TMVA/Timer.h; TMVA/TNeuron.h; TMVA/TNeuronInputAbs.h; TMVA/TNeuronInputChooser.h; TMVA/TNeuronInput.h; TMVA/TNeuronInputSqSum.h; TMVA/TNeuronInputSum.h; TMVA/Tools.h; TMVA/TrainingHistory.h; TMVA/TransformationHandler.h; TMVA/TSpline1.h; TMVA/TSpline2.h; TMVA/TSynapse.h; TMVA/Types.h; TMVA/VariableDecorrTransform.h; TMVA/VariableGaussTransform.h; TMVA/VariableIdentityTransform.h; TMVA/VariableImportance.h; TMVA/VariableInfo.h; TMVA/VariableNormalizeTransform.h; TMVA/VariablePCATransform.h; TMVA/VariableRearrangeTransform.h; TMVA/VariableTransformBase.h; TMVA/VariableTransform.h; TMVA/VarTransformHandler.h; TMVA/Version.h; TMVA/Volume.h; # TMVA/DNN/Adadelta.h; # TMVA/DNN/Adagrad.h; # TMVA/DNN/Adam.h; # TMVA/DNN/BatchNormLayer.h; # TMVA/DNN/DataLoader.h; # TMVA/DNN/DeepNet.h; # TMVA/DNN/DenseLayer.h; # TMVA/DNN/DLMinimizers.h; # TMVA/DNN/Functions.h; # TMVA/DNN/GeneralLayer.h; # TMVA/DNN/ReshapeLayer.h; # TMVA/DNN/RMSProp.h; # TMVA/DNN/SGD.h; # TMVA/DNN/TensorDataLoader.h; # TMVA/DNN/CNN/ContextHandles.h; # TMVA/DNN/CNN/ConvLayer.h; # TMVA/DNN/CNN/MaxPoolLayer.h; # TMVA/DNN/RNN/RNNLayer.h; # TMVA/DNN/Architectures/Reference.h; # TMVA/DNN/Architectures/Reference/DataLoader.h; # TMVA/DNN/Architectures/Reference/TensorDataLoader.h; # TMVA/DNN/Architectures/Cpu.h; # TMVA/DNN/Architectures/Cpu/CpuBuffer.h; # TMVA/DNN/Architectures/Cpu/CpuMatrix.h; # TMVA/DNN/Architectures/Cpu/CpuTensor.h; ${TMVA_EXTRA_HEADERS}; SOURCES; src/BDTEventWrapper.cxx; src/BinarySearchTree.cxx; src/BinarySearchTreeNode.cxx; src/BinaryTree.cxx; src/,MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:4299,Modifiability,Variab,VariableTransform,4299,leFitAPI.h; TMVA/RuleFit.h; TMVA/RuleFitParams.h; TMVA/Rule.h; TMVA/SdivSqrtSplusB.h; TMVA/SeparationBase.h; TMVA/SimulatedAnnealingFitter.h; TMVA/SimulatedAnnealing.h; TMVA/SVEvent.h; TMVA/SVKernelFunction.h; TMVA/SVKernelMatrix.h; TMVA/SVWorkingSet.h; TMVA/TActivationChooser.h; TMVA/TActivation.h; TMVA/TActivationIdentity.h; TMVA/TActivationRadial.h; TMVA/TActivationReLU.h; TMVA/TActivationSigmoid.h; TMVA/TActivationTanh.h; TMVA/Timer.h; TMVA/TNeuron.h; TMVA/TNeuronInputAbs.h; TMVA/TNeuronInputChooser.h; TMVA/TNeuronInput.h; TMVA/TNeuronInputSqSum.h; TMVA/TNeuronInputSum.h; TMVA/Tools.h; TMVA/TrainingHistory.h; TMVA/TransformationHandler.h; TMVA/TSpline1.h; TMVA/TSpline2.h; TMVA/TSynapse.h; TMVA/Types.h; TMVA/VariableDecorrTransform.h; TMVA/VariableGaussTransform.h; TMVA/VariableIdentityTransform.h; TMVA/VariableImportance.h; TMVA/VariableInfo.h; TMVA/VariableNormalizeTransform.h; TMVA/VariablePCATransform.h; TMVA/VariableRearrangeTransform.h; TMVA/VariableTransformBase.h; TMVA/VariableTransform.h; TMVA/VarTransformHandler.h; TMVA/Version.h; TMVA/Volume.h; # TMVA/DNN/Adadelta.h; # TMVA/DNN/Adagrad.h; # TMVA/DNN/Adam.h; # TMVA/DNN/BatchNormLayer.h; # TMVA/DNN/DataLoader.h; # TMVA/DNN/DeepNet.h; # TMVA/DNN/DenseLayer.h; # TMVA/DNN/DLMinimizers.h; # TMVA/DNN/Functions.h; # TMVA/DNN/GeneralLayer.h; # TMVA/DNN/ReshapeLayer.h; # TMVA/DNN/RMSProp.h; # TMVA/DNN/SGD.h; # TMVA/DNN/TensorDataLoader.h; # TMVA/DNN/CNN/ContextHandles.h; # TMVA/DNN/CNN/ConvLayer.h; # TMVA/DNN/CNN/MaxPoolLayer.h; # TMVA/DNN/RNN/RNNLayer.h; # TMVA/DNN/Architectures/Reference.h; # TMVA/DNN/Architectures/Reference/DataLoader.h; # TMVA/DNN/Architectures/Reference/TensorDataLoader.h; # TMVA/DNN/Architectures/Cpu.h; # TMVA/DNN/Architectures/Cpu/CpuBuffer.h; # TMVA/DNN/Architectures/Cpu/CpuMatrix.h; # TMVA/DNN/Architectures/Cpu/CpuTensor.h; ${TMVA_EXTRA_HEADERS}; SOURCES; src/BDTEventWrapper.cxx; src/BinarySearchTree.cxx; src/BinarySearchTreeNode.cxx; src/BinaryTree.cxx; src/CCPruner.cxx; src/CCTreeWrap,MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:5387,Modifiability,Config,Config,5387,DNN/Adadelta.h; # TMVA/DNN/Adagrad.h; # TMVA/DNN/Adam.h; # TMVA/DNN/BatchNormLayer.h; # TMVA/DNN/DataLoader.h; # TMVA/DNN/DeepNet.h; # TMVA/DNN/DenseLayer.h; # TMVA/DNN/DLMinimizers.h; # TMVA/DNN/Functions.h; # TMVA/DNN/GeneralLayer.h; # TMVA/DNN/ReshapeLayer.h; # TMVA/DNN/RMSProp.h; # TMVA/DNN/SGD.h; # TMVA/DNN/TensorDataLoader.h; # TMVA/DNN/CNN/ContextHandles.h; # TMVA/DNN/CNN/ConvLayer.h; # TMVA/DNN/CNN/MaxPoolLayer.h; # TMVA/DNN/RNN/RNNLayer.h; # TMVA/DNN/Architectures/Reference.h; # TMVA/DNN/Architectures/Reference/DataLoader.h; # TMVA/DNN/Architectures/Reference/TensorDataLoader.h; # TMVA/DNN/Architectures/Cpu.h; # TMVA/DNN/Architectures/Cpu/CpuBuffer.h; # TMVA/DNN/Architectures/Cpu/CpuMatrix.h; # TMVA/DNN/Architectures/Cpu/CpuTensor.h; ${TMVA_EXTRA_HEADERS}; SOURCES; src/BDTEventWrapper.cxx; src/BinarySearchTree.cxx; src/BinarySearchTreeNode.cxx; src/BinaryTree.cxx; src/CCPruner.cxx; src/CCTreeWrapper.cxx; src/Classification.cxx; src/ClassifierFactory.cxx; src/ClassInfo.cxx; src/Config.cxx; src/Configurable.cxx; src/ConvergenceTest.cxx; src/CostComplexityPruneTool.cxx; src/CrossEntropy.cxx; src/CrossValidation.cxx; src/CvSplit.cxx; src/DataInputHandler.cxx; src/DataLoader.cxx; src/DataSet.cxx; src/DataSetFactory.cxx; src/DataSetInfo.cxx; src/DataSetManager.cxx; src/DecisionTree.cxx; src/DecisionTreeNode.cxx; src/Envelope.cxx; src/Event.cxx; src/ExpectedErrorPruneTool.cxx; src/Factory.cxx; src/FitterBase.cxx; src/GeneticAlgorithm.cxx; src/GeneticFitter.cxx; src/GeneticGenes.cxx; src/GeneticPopulation.cxx; src/GeneticRange.cxx; src/GiniIndex.cxx; src/GiniIndexWithLaplace.cxx; src/HyperParameterOptimisation.cxx; src/IFitterTarget.cxx; src/IMethod.cxx; src/Interval.cxx; src/KDEKernel.cxx; src/LDA.cxx; src/LogInterval.cxx; src/LossFunction.cxx; src/MCFitter.cxx; src/MethodANNBase.cxx; src/MethodBase.cxx; src/MethodBayesClassifier.cxx; src/MethodBDT.cxx; src/MethodBoost.cxx; src/MethodCategory.cxx; src/MethodCFMlpANN.cxx; src/MethodCFMlpANN_Utils.cxx; src/MethodCom,MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:5403,Modifiability,Config,Configurable,5403,MVA/DNN/Adagrad.h; # TMVA/DNN/Adam.h; # TMVA/DNN/BatchNormLayer.h; # TMVA/DNN/DataLoader.h; # TMVA/DNN/DeepNet.h; # TMVA/DNN/DenseLayer.h; # TMVA/DNN/DLMinimizers.h; # TMVA/DNN/Functions.h; # TMVA/DNN/GeneralLayer.h; # TMVA/DNN/ReshapeLayer.h; # TMVA/DNN/RMSProp.h; # TMVA/DNN/SGD.h; # TMVA/DNN/TensorDataLoader.h; # TMVA/DNN/CNN/ContextHandles.h; # TMVA/DNN/CNN/ConvLayer.h; # TMVA/DNN/CNN/MaxPoolLayer.h; # TMVA/DNN/RNN/RNNLayer.h; # TMVA/DNN/Architectures/Reference.h; # TMVA/DNN/Architectures/Reference/DataLoader.h; # TMVA/DNN/Architectures/Reference/TensorDataLoader.h; # TMVA/DNN/Architectures/Cpu.h; # TMVA/DNN/Architectures/Cpu/CpuBuffer.h; # TMVA/DNN/Architectures/Cpu/CpuMatrix.h; # TMVA/DNN/Architectures/Cpu/CpuTensor.h; ${TMVA_EXTRA_HEADERS}; SOURCES; src/BDTEventWrapper.cxx; src/BinarySearchTree.cxx; src/BinarySearchTreeNode.cxx; src/BinaryTree.cxx; src/CCPruner.cxx; src/CCTreeWrapper.cxx; src/Classification.cxx; src/ClassifierFactory.cxx; src/ClassInfo.cxx; src/Config.cxx; src/Configurable.cxx; src/ConvergenceTest.cxx; src/CostComplexityPruneTool.cxx; src/CrossEntropy.cxx; src/CrossValidation.cxx; src/CvSplit.cxx; src/DataInputHandler.cxx; src/DataLoader.cxx; src/DataSet.cxx; src/DataSetFactory.cxx; src/DataSetInfo.cxx; src/DataSetManager.cxx; src/DecisionTree.cxx; src/DecisionTreeNode.cxx; src/Envelope.cxx; src/Event.cxx; src/ExpectedErrorPruneTool.cxx; src/Factory.cxx; src/FitterBase.cxx; src/GeneticAlgorithm.cxx; src/GeneticFitter.cxx; src/GeneticGenes.cxx; src/GeneticPopulation.cxx; src/GeneticRange.cxx; src/GiniIndex.cxx; src/GiniIndexWithLaplace.cxx; src/HyperParameterOptimisation.cxx; src/IFitterTarget.cxx; src/IMethod.cxx; src/Interval.cxx; src/KDEKernel.cxx; src/LDA.cxx; src/LogInterval.cxx; src/LossFunction.cxx; src/MCFitter.cxx; src/MethodANNBase.cxx; src/MethodBase.cxx; src/MethodBayesClassifier.cxx; src/MethodBDT.cxx; src/MethodBoost.cxx; src/MethodCategory.cxx; src/MethodCFMlpANN.cxx; src/MethodCFMlpANN_Utils.cxx; src/MethodCompositeBase.cxx; src,MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:8525,Modifiability,Variab,VariableDecorrTransform,8525,der.cxx; src/RegressionVariance.cxx; src/ResultsClassification.cxx; src/Results.cxx; src/ResultsMulticlass.cxx; src/ResultsRegression.cxx; src/ROCCalc.cxx; src/ROCCurve.cxx; src/RootFinder.cxx; src/RuleCut.cxx; src/Rule.cxx; src/RuleEnsemble.cxx; src/RuleFitAPI.cxx; src/RuleFit.cxx; src/RuleFitParams.cxx; src/SdivSqrtSplusB.cxx; src/SeparationBase.cxx; src/SimulatedAnnealing.cxx; src/SimulatedAnnealingFitter.cxx; src/SVEvent.cxx; src/SVKernelFunction.cxx; src/SVKernelMatrix.cxx; src/SVWorkingSet.cxx; src/TActivationChooser.cxx; src/TActivation.cxx; src/TActivationIdentity.cxx; src/TActivationRadial.cxx; src/TActivationReLU.cxx; src/TActivationSigmoid.cxx; src/TActivationTanh.cxx; src/Timer.cxx; src/TNeuron.cxx; src/TNeuronInputAbs.cxx; src/TNeuronInputChooser.cxx; src/TNeuronInput.cxx; src/TNeuronInputSqSum.cxx; src/TNeuronInputSum.cxx; src/Tools.cxx; src/TrainingHistory.cxx; src/TransformationHandler.cxx; src/TSpline1.cxx; src/TSpline2.cxx; src/TSynapse.cxx; src/Types.cxx; src/VariableDecorrTransform.cxx; src/VariableGaussTransform.cxx; src/VariableIdentityTransform.cxx; src/VariableImportance.cxx; src/VariableInfo.cxx; src/VariableNormalizeTransform.cxx; src/VariablePCATransform.cxx; src/VariableRearrangeTransform.cxx; src/VariableTransformBase.cxx; src/VariableTransform.cxx; src/VarTransformHandler.cxx; src/Volume.cxx; src/DNN/Architectures/Reference.cxx; src/DNN/Architectures/Reference/DataLoader.cxx; src/DNN/Architectures/Reference/TensorDataLoader.cxx; src/DNN/Architectures/Cpu.cxx; src/DNN/Architectures/Cpu/CpuBuffer.cxx; src/DNN/Architectures/Cpu/CpuMatrix.cxx; ${TMVA_EXTRA_SOURCES}; DEPENDENCIES; TreePlayer; Tree; Hist; Matrix; Minuit; MLP; MathCore; Core; RIO; XMLIO; ${TMVA_EXTRA_DEPENDENCIES}; DICTIONARY_OPTIONS; -writeEmptyRootPCM; INSTALL_OPTIONS; ${installoptions}; ${EXTRA_DICT_OPTS}; ). if(MSVC); target_compile_definitions(TMVA PRIVATE _USE_MATH_DEFINES); endif(). if(vdt OR builtin_vdt); target_link_libraries(TMVA PRIVATE VDT::VDT); endif(); if(builtin,MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:8558,Modifiability,Variab,VariableGaussTransform,8558,xx; src/ResultsClassification.cxx; src/Results.cxx; src/ResultsMulticlass.cxx; src/ResultsRegression.cxx; src/ROCCalc.cxx; src/ROCCurve.cxx; src/RootFinder.cxx; src/RuleCut.cxx; src/Rule.cxx; src/RuleEnsemble.cxx; src/RuleFitAPI.cxx; src/RuleFit.cxx; src/RuleFitParams.cxx; src/SdivSqrtSplusB.cxx; src/SeparationBase.cxx; src/SimulatedAnnealing.cxx; src/SimulatedAnnealingFitter.cxx; src/SVEvent.cxx; src/SVKernelFunction.cxx; src/SVKernelMatrix.cxx; src/SVWorkingSet.cxx; src/TActivationChooser.cxx; src/TActivation.cxx; src/TActivationIdentity.cxx; src/TActivationRadial.cxx; src/TActivationReLU.cxx; src/TActivationSigmoid.cxx; src/TActivationTanh.cxx; src/Timer.cxx; src/TNeuron.cxx; src/TNeuronInputAbs.cxx; src/TNeuronInputChooser.cxx; src/TNeuronInput.cxx; src/TNeuronInputSqSum.cxx; src/TNeuronInputSum.cxx; src/Tools.cxx; src/TrainingHistory.cxx; src/TransformationHandler.cxx; src/TSpline1.cxx; src/TSpline2.cxx; src/TSynapse.cxx; src/Types.cxx; src/VariableDecorrTransform.cxx; src/VariableGaussTransform.cxx; src/VariableIdentityTransform.cxx; src/VariableImportance.cxx; src/VariableInfo.cxx; src/VariableNormalizeTransform.cxx; src/VariablePCATransform.cxx; src/VariableRearrangeTransform.cxx; src/VariableTransformBase.cxx; src/VariableTransform.cxx; src/VarTransformHandler.cxx; src/Volume.cxx; src/DNN/Architectures/Reference.cxx; src/DNN/Architectures/Reference/DataLoader.cxx; src/DNN/Architectures/Reference/TensorDataLoader.cxx; src/DNN/Architectures/Cpu.cxx; src/DNN/Architectures/Cpu/CpuBuffer.cxx; src/DNN/Architectures/Cpu/CpuMatrix.cxx; ${TMVA_EXTRA_SOURCES}; DEPENDENCIES; TreePlayer; Tree; Hist; Matrix; Minuit; MLP; MathCore; Core; RIO; XMLIO; ${TMVA_EXTRA_DEPENDENCIES}; DICTIONARY_OPTIONS; -writeEmptyRootPCM; INSTALL_OPTIONS; ${installoptions}; ${EXTRA_DICT_OPTS}; ). if(MSVC); target_compile_definitions(TMVA PRIVATE _USE_MATH_DEFINES); endif(). if(vdt OR builtin_vdt); target_link_libraries(TMVA PRIVATE VDT::VDT); endif(); if(builtin_vdt); add_dependencies(TMVA VDT,MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:8590,Modifiability,Variab,VariableIdentityTransform,8590,; src/Results.cxx; src/ResultsMulticlass.cxx; src/ResultsRegression.cxx; src/ROCCalc.cxx; src/ROCCurve.cxx; src/RootFinder.cxx; src/RuleCut.cxx; src/Rule.cxx; src/RuleEnsemble.cxx; src/RuleFitAPI.cxx; src/RuleFit.cxx; src/RuleFitParams.cxx; src/SdivSqrtSplusB.cxx; src/SeparationBase.cxx; src/SimulatedAnnealing.cxx; src/SimulatedAnnealingFitter.cxx; src/SVEvent.cxx; src/SVKernelFunction.cxx; src/SVKernelMatrix.cxx; src/SVWorkingSet.cxx; src/TActivationChooser.cxx; src/TActivation.cxx; src/TActivationIdentity.cxx; src/TActivationRadial.cxx; src/TActivationReLU.cxx; src/TActivationSigmoid.cxx; src/TActivationTanh.cxx; src/Timer.cxx; src/TNeuron.cxx; src/TNeuronInputAbs.cxx; src/TNeuronInputChooser.cxx; src/TNeuronInput.cxx; src/TNeuronInputSqSum.cxx; src/TNeuronInputSum.cxx; src/Tools.cxx; src/TrainingHistory.cxx; src/TransformationHandler.cxx; src/TSpline1.cxx; src/TSpline2.cxx; src/TSynapse.cxx; src/Types.cxx; src/VariableDecorrTransform.cxx; src/VariableGaussTransform.cxx; src/VariableIdentityTransform.cxx; src/VariableImportance.cxx; src/VariableInfo.cxx; src/VariableNormalizeTransform.cxx; src/VariablePCATransform.cxx; src/VariableRearrangeTransform.cxx; src/VariableTransformBase.cxx; src/VariableTransform.cxx; src/VarTransformHandler.cxx; src/Volume.cxx; src/DNN/Architectures/Reference.cxx; src/DNN/Architectures/Reference/DataLoader.cxx; src/DNN/Architectures/Reference/TensorDataLoader.cxx; src/DNN/Architectures/Cpu.cxx; src/DNN/Architectures/Cpu/CpuBuffer.cxx; src/DNN/Architectures/Cpu/CpuMatrix.cxx; ${TMVA_EXTRA_SOURCES}; DEPENDENCIES; TreePlayer; Tree; Hist; Matrix; Minuit; MLP; MathCore; Core; RIO; XMLIO; ${TMVA_EXTRA_DEPENDENCIES}; DICTIONARY_OPTIONS; -writeEmptyRootPCM; INSTALL_OPTIONS; ${installoptions}; ${EXTRA_DICT_OPTS}; ). if(MSVC); target_compile_definitions(TMVA PRIVATE _USE_MATH_DEFINES); endif(). if(vdt OR builtin_vdt); target_link_libraries(TMVA PRIVATE VDT::VDT); endif(); if(builtin_vdt); add_dependencies(TMVA VDT); endif(). if(tmva-cpu); target_i,MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:8625,Modifiability,Variab,VariableImportance,8625,lticlass.cxx; src/ResultsRegression.cxx; src/ROCCalc.cxx; src/ROCCurve.cxx; src/RootFinder.cxx; src/RuleCut.cxx; src/Rule.cxx; src/RuleEnsemble.cxx; src/RuleFitAPI.cxx; src/RuleFit.cxx; src/RuleFitParams.cxx; src/SdivSqrtSplusB.cxx; src/SeparationBase.cxx; src/SimulatedAnnealing.cxx; src/SimulatedAnnealingFitter.cxx; src/SVEvent.cxx; src/SVKernelFunction.cxx; src/SVKernelMatrix.cxx; src/SVWorkingSet.cxx; src/TActivationChooser.cxx; src/TActivation.cxx; src/TActivationIdentity.cxx; src/TActivationRadial.cxx; src/TActivationReLU.cxx; src/TActivationSigmoid.cxx; src/TActivationTanh.cxx; src/Timer.cxx; src/TNeuron.cxx; src/TNeuronInputAbs.cxx; src/TNeuronInputChooser.cxx; src/TNeuronInput.cxx; src/TNeuronInputSqSum.cxx; src/TNeuronInputSum.cxx; src/Tools.cxx; src/TrainingHistory.cxx; src/TransformationHandler.cxx; src/TSpline1.cxx; src/TSpline2.cxx; src/TSynapse.cxx; src/Types.cxx; src/VariableDecorrTransform.cxx; src/VariableGaussTransform.cxx; src/VariableIdentityTransform.cxx; src/VariableImportance.cxx; src/VariableInfo.cxx; src/VariableNormalizeTransform.cxx; src/VariablePCATransform.cxx; src/VariableRearrangeTransform.cxx; src/VariableTransformBase.cxx; src/VariableTransform.cxx; src/VarTransformHandler.cxx; src/Volume.cxx; src/DNN/Architectures/Reference.cxx; src/DNN/Architectures/Reference/DataLoader.cxx; src/DNN/Architectures/Reference/TensorDataLoader.cxx; src/DNN/Architectures/Cpu.cxx; src/DNN/Architectures/Cpu/CpuBuffer.cxx; src/DNN/Architectures/Cpu/CpuMatrix.cxx; ${TMVA_EXTRA_SOURCES}; DEPENDENCIES; TreePlayer; Tree; Hist; Matrix; Minuit; MLP; MathCore; Core; RIO; XMLIO; ${TMVA_EXTRA_DEPENDENCIES}; DICTIONARY_OPTIONS; -writeEmptyRootPCM; INSTALL_OPTIONS; ${installoptions}; ${EXTRA_DICT_OPTS}; ). if(MSVC); target_compile_definitions(TMVA PRIVATE _USE_MATH_DEFINES); endif(). if(vdt OR builtin_vdt); target_link_libraries(TMVA PRIVATE VDT::VDT); endif(); if(builtin_vdt); add_dependencies(TMVA VDT); endif(). if(tmva-cpu); target_include_directories(TMVA PRIVATE,MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:8653,Modifiability,Variab,VariableInfo,8653,Regression.cxx; src/ROCCalc.cxx; src/ROCCurve.cxx; src/RootFinder.cxx; src/RuleCut.cxx; src/Rule.cxx; src/RuleEnsemble.cxx; src/RuleFitAPI.cxx; src/RuleFit.cxx; src/RuleFitParams.cxx; src/SdivSqrtSplusB.cxx; src/SeparationBase.cxx; src/SimulatedAnnealing.cxx; src/SimulatedAnnealingFitter.cxx; src/SVEvent.cxx; src/SVKernelFunction.cxx; src/SVKernelMatrix.cxx; src/SVWorkingSet.cxx; src/TActivationChooser.cxx; src/TActivation.cxx; src/TActivationIdentity.cxx; src/TActivationRadial.cxx; src/TActivationReLU.cxx; src/TActivationSigmoid.cxx; src/TActivationTanh.cxx; src/Timer.cxx; src/TNeuron.cxx; src/TNeuronInputAbs.cxx; src/TNeuronInputChooser.cxx; src/TNeuronInput.cxx; src/TNeuronInputSqSum.cxx; src/TNeuronInputSum.cxx; src/Tools.cxx; src/TrainingHistory.cxx; src/TransformationHandler.cxx; src/TSpline1.cxx; src/TSpline2.cxx; src/TSynapse.cxx; src/Types.cxx; src/VariableDecorrTransform.cxx; src/VariableGaussTransform.cxx; src/VariableIdentityTransform.cxx; src/VariableImportance.cxx; src/VariableInfo.cxx; src/VariableNormalizeTransform.cxx; src/VariablePCATransform.cxx; src/VariableRearrangeTransform.cxx; src/VariableTransformBase.cxx; src/VariableTransform.cxx; src/VarTransformHandler.cxx; src/Volume.cxx; src/DNN/Architectures/Reference.cxx; src/DNN/Architectures/Reference/DataLoader.cxx; src/DNN/Architectures/Reference/TensorDataLoader.cxx; src/DNN/Architectures/Cpu.cxx; src/DNN/Architectures/Cpu/CpuBuffer.cxx; src/DNN/Architectures/Cpu/CpuMatrix.cxx; ${TMVA_EXTRA_SOURCES}; DEPENDENCIES; TreePlayer; Tree; Hist; Matrix; Minuit; MLP; MathCore; Core; RIO; XMLIO; ${TMVA_EXTRA_DEPENDENCIES}; DICTIONARY_OPTIONS; -writeEmptyRootPCM; INSTALL_OPTIONS; ${installoptions}; ${EXTRA_DICT_OPTS}; ). if(MSVC); target_compile_definitions(TMVA PRIVATE _USE_MATH_DEFINES); endif(). if(vdt OR builtin_vdt); target_link_libraries(TMVA PRIVATE VDT::VDT); endif(); if(builtin_vdt); add_dependencies(TMVA VDT); endif(). if(tmva-cpu); target_include_directories(TMVA PRIVATE ${TBB_INCLUDE_DIRS}); ta,MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:8675,Modifiability,Variab,VariableNormalizeTransform,8675,xx; src/ROCCurve.cxx; src/RootFinder.cxx; src/RuleCut.cxx; src/Rule.cxx; src/RuleEnsemble.cxx; src/RuleFitAPI.cxx; src/RuleFit.cxx; src/RuleFitParams.cxx; src/SdivSqrtSplusB.cxx; src/SeparationBase.cxx; src/SimulatedAnnealing.cxx; src/SimulatedAnnealingFitter.cxx; src/SVEvent.cxx; src/SVKernelFunction.cxx; src/SVKernelMatrix.cxx; src/SVWorkingSet.cxx; src/TActivationChooser.cxx; src/TActivation.cxx; src/TActivationIdentity.cxx; src/TActivationRadial.cxx; src/TActivationReLU.cxx; src/TActivationSigmoid.cxx; src/TActivationTanh.cxx; src/Timer.cxx; src/TNeuron.cxx; src/TNeuronInputAbs.cxx; src/TNeuronInputChooser.cxx; src/TNeuronInput.cxx; src/TNeuronInputSqSum.cxx; src/TNeuronInputSum.cxx; src/Tools.cxx; src/TrainingHistory.cxx; src/TransformationHandler.cxx; src/TSpline1.cxx; src/TSpline2.cxx; src/TSynapse.cxx; src/Types.cxx; src/VariableDecorrTransform.cxx; src/VariableGaussTransform.cxx; src/VariableIdentityTransform.cxx; src/VariableImportance.cxx; src/VariableInfo.cxx; src/VariableNormalizeTransform.cxx; src/VariablePCATransform.cxx; src/VariableRearrangeTransform.cxx; src/VariableTransformBase.cxx; src/VariableTransform.cxx; src/VarTransformHandler.cxx; src/Volume.cxx; src/DNN/Architectures/Reference.cxx; src/DNN/Architectures/Reference/DataLoader.cxx; src/DNN/Architectures/Reference/TensorDataLoader.cxx; src/DNN/Architectures/Cpu.cxx; src/DNN/Architectures/Cpu/CpuBuffer.cxx; src/DNN/Architectures/Cpu/CpuMatrix.cxx; ${TMVA_EXTRA_SOURCES}; DEPENDENCIES; TreePlayer; Tree; Hist; Matrix; Minuit; MLP; MathCore; Core; RIO; XMLIO; ${TMVA_EXTRA_DEPENDENCIES}; DICTIONARY_OPTIONS; -writeEmptyRootPCM; INSTALL_OPTIONS; ${installoptions}; ${EXTRA_DICT_OPTS}; ). if(MSVC); target_compile_definitions(TMVA PRIVATE _USE_MATH_DEFINES); endif(). if(vdt OR builtin_vdt); target_link_libraries(TMVA PRIVATE VDT::VDT); endif(); if(builtin_vdt); add_dependencies(TMVA VDT); endif(). if(tmva-cpu); target_include_directories(TMVA PRIVATE ${TBB_INCLUDE_DIRS}); target_link_libraries(TMVA PRIV,MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:8711,Modifiability,Variab,VariablePCATransform,8711,der.cxx; src/RuleCut.cxx; src/Rule.cxx; src/RuleEnsemble.cxx; src/RuleFitAPI.cxx; src/RuleFit.cxx; src/RuleFitParams.cxx; src/SdivSqrtSplusB.cxx; src/SeparationBase.cxx; src/SimulatedAnnealing.cxx; src/SimulatedAnnealingFitter.cxx; src/SVEvent.cxx; src/SVKernelFunction.cxx; src/SVKernelMatrix.cxx; src/SVWorkingSet.cxx; src/TActivationChooser.cxx; src/TActivation.cxx; src/TActivationIdentity.cxx; src/TActivationRadial.cxx; src/TActivationReLU.cxx; src/TActivationSigmoid.cxx; src/TActivationTanh.cxx; src/Timer.cxx; src/TNeuron.cxx; src/TNeuronInputAbs.cxx; src/TNeuronInputChooser.cxx; src/TNeuronInput.cxx; src/TNeuronInputSqSum.cxx; src/TNeuronInputSum.cxx; src/Tools.cxx; src/TrainingHistory.cxx; src/TransformationHandler.cxx; src/TSpline1.cxx; src/TSpline2.cxx; src/TSynapse.cxx; src/Types.cxx; src/VariableDecorrTransform.cxx; src/VariableGaussTransform.cxx; src/VariableIdentityTransform.cxx; src/VariableImportance.cxx; src/VariableInfo.cxx; src/VariableNormalizeTransform.cxx; src/VariablePCATransform.cxx; src/VariableRearrangeTransform.cxx; src/VariableTransformBase.cxx; src/VariableTransform.cxx; src/VarTransformHandler.cxx; src/Volume.cxx; src/DNN/Architectures/Reference.cxx; src/DNN/Architectures/Reference/DataLoader.cxx; src/DNN/Architectures/Reference/TensorDataLoader.cxx; src/DNN/Architectures/Cpu.cxx; src/DNN/Architectures/Cpu/CpuBuffer.cxx; src/DNN/Architectures/Cpu/CpuMatrix.cxx; ${TMVA_EXTRA_SOURCES}; DEPENDENCIES; TreePlayer; Tree; Hist; Matrix; Minuit; MLP; MathCore; Core; RIO; XMLIO; ${TMVA_EXTRA_DEPENDENCIES}; DICTIONARY_OPTIONS; -writeEmptyRootPCM; INSTALL_OPTIONS; ${installoptions}; ${EXTRA_DICT_OPTS}; ). if(MSVC); target_compile_definitions(TMVA PRIVATE _USE_MATH_DEFINES); endif(). if(vdt OR builtin_vdt); target_link_libraries(TMVA PRIVATE VDT::VDT); endif(); if(builtin_vdt); add_dependencies(TMVA VDT); endif(). if(tmva-cpu); target_include_directories(TMVA PRIVATE ${TBB_INCLUDE_DIRS}); target_link_libraries(TMVA PRIVATE ${TBB_LIBRARIES}); set_target,MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:8741,Modifiability,Variab,VariableRearrangeTransform,8741,e.cxx; src/RuleEnsemble.cxx; src/RuleFitAPI.cxx; src/RuleFit.cxx; src/RuleFitParams.cxx; src/SdivSqrtSplusB.cxx; src/SeparationBase.cxx; src/SimulatedAnnealing.cxx; src/SimulatedAnnealingFitter.cxx; src/SVEvent.cxx; src/SVKernelFunction.cxx; src/SVKernelMatrix.cxx; src/SVWorkingSet.cxx; src/TActivationChooser.cxx; src/TActivation.cxx; src/TActivationIdentity.cxx; src/TActivationRadial.cxx; src/TActivationReLU.cxx; src/TActivationSigmoid.cxx; src/TActivationTanh.cxx; src/Timer.cxx; src/TNeuron.cxx; src/TNeuronInputAbs.cxx; src/TNeuronInputChooser.cxx; src/TNeuronInput.cxx; src/TNeuronInputSqSum.cxx; src/TNeuronInputSum.cxx; src/Tools.cxx; src/TrainingHistory.cxx; src/TransformationHandler.cxx; src/TSpline1.cxx; src/TSpline2.cxx; src/TSynapse.cxx; src/Types.cxx; src/VariableDecorrTransform.cxx; src/VariableGaussTransform.cxx; src/VariableIdentityTransform.cxx; src/VariableImportance.cxx; src/VariableInfo.cxx; src/VariableNormalizeTransform.cxx; src/VariablePCATransform.cxx; src/VariableRearrangeTransform.cxx; src/VariableTransformBase.cxx; src/VariableTransform.cxx; src/VarTransformHandler.cxx; src/Volume.cxx; src/DNN/Architectures/Reference.cxx; src/DNN/Architectures/Reference/DataLoader.cxx; src/DNN/Architectures/Reference/TensorDataLoader.cxx; src/DNN/Architectures/Cpu.cxx; src/DNN/Architectures/Cpu/CpuBuffer.cxx; src/DNN/Architectures/Cpu/CpuMatrix.cxx; ${TMVA_EXTRA_SOURCES}; DEPENDENCIES; TreePlayer; Tree; Hist; Matrix; Minuit; MLP; MathCore; Core; RIO; XMLIO; ${TMVA_EXTRA_DEPENDENCIES}; DICTIONARY_OPTIONS; -writeEmptyRootPCM; INSTALL_OPTIONS; ${installoptions}; ${EXTRA_DICT_OPTS}; ). if(MSVC); target_compile_definitions(TMVA PRIVATE _USE_MATH_DEFINES); endif(). if(vdt OR builtin_vdt); target_link_libraries(TMVA PRIVATE VDT::VDT); endif(); if(builtin_vdt); add_dependencies(TMVA VDT); endif(). if(tmva-cpu); target_include_directories(TMVA PRIVATE ${TBB_INCLUDE_DIRS}); target_link_libraries(TMVA PRIVATE ${TBB_LIBRARIES}); set_target_properties(TMVA PROPERTIES COMPI,MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:8777,Modifiability,Variab,VariableTransformBase,8777,"RuleFitAPI.cxx; src/RuleFit.cxx; src/RuleFitParams.cxx; src/SdivSqrtSplusB.cxx; src/SeparationBase.cxx; src/SimulatedAnnealing.cxx; src/SimulatedAnnealingFitter.cxx; src/SVEvent.cxx; src/SVKernelFunction.cxx; src/SVKernelMatrix.cxx; src/SVWorkingSet.cxx; src/TActivationChooser.cxx; src/TActivation.cxx; src/TActivationIdentity.cxx; src/TActivationRadial.cxx; src/TActivationReLU.cxx; src/TActivationSigmoid.cxx; src/TActivationTanh.cxx; src/Timer.cxx; src/TNeuron.cxx; src/TNeuronInputAbs.cxx; src/TNeuronInputChooser.cxx; src/TNeuronInput.cxx; src/TNeuronInputSqSum.cxx; src/TNeuronInputSum.cxx; src/Tools.cxx; src/TrainingHistory.cxx; src/TransformationHandler.cxx; src/TSpline1.cxx; src/TSpline2.cxx; src/TSynapse.cxx; src/Types.cxx; src/VariableDecorrTransform.cxx; src/VariableGaussTransform.cxx; src/VariableIdentityTransform.cxx; src/VariableImportance.cxx; src/VariableInfo.cxx; src/VariableNormalizeTransform.cxx; src/VariablePCATransform.cxx; src/VariableRearrangeTransform.cxx; src/VariableTransformBase.cxx; src/VariableTransform.cxx; src/VarTransformHandler.cxx; src/Volume.cxx; src/DNN/Architectures/Reference.cxx; src/DNN/Architectures/Reference/DataLoader.cxx; src/DNN/Architectures/Reference/TensorDataLoader.cxx; src/DNN/Architectures/Cpu.cxx; src/DNN/Architectures/Cpu/CpuBuffer.cxx; src/DNN/Architectures/Cpu/CpuMatrix.cxx; ${TMVA_EXTRA_SOURCES}; DEPENDENCIES; TreePlayer; Tree; Hist; Matrix; Minuit; MLP; MathCore; Core; RIO; XMLIO; ${TMVA_EXTRA_DEPENDENCIES}; DICTIONARY_OPTIONS; -writeEmptyRootPCM; INSTALL_OPTIONS; ${installoptions}; ${EXTRA_DICT_OPTS}; ). if(MSVC); target_compile_definitions(TMVA PRIVATE _USE_MATH_DEFINES); endif(). if(vdt OR builtin_vdt); target_link_libraries(TMVA PRIVATE VDT::VDT); endif(); if(builtin_vdt); add_dependencies(TMVA VDT); endif(). if(tmva-cpu); target_include_directories(TMVA PRIVATE ${TBB_INCLUDE_DIRS}); target_link_libraries(TMVA PRIVATE ${TBB_LIBRARIES}); set_target_properties(TMVA PROPERTIES COMPILE_FLAGS ""${TBB_CXXFLAGS}""). if(BL",MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:8808,Modifiability,Variab,VariableTransform,8808,"xx; src/RuleFitParams.cxx; src/SdivSqrtSplusB.cxx; src/SeparationBase.cxx; src/SimulatedAnnealing.cxx; src/SimulatedAnnealingFitter.cxx; src/SVEvent.cxx; src/SVKernelFunction.cxx; src/SVKernelMatrix.cxx; src/SVWorkingSet.cxx; src/TActivationChooser.cxx; src/TActivation.cxx; src/TActivationIdentity.cxx; src/TActivationRadial.cxx; src/TActivationReLU.cxx; src/TActivationSigmoid.cxx; src/TActivationTanh.cxx; src/Timer.cxx; src/TNeuron.cxx; src/TNeuronInputAbs.cxx; src/TNeuronInputChooser.cxx; src/TNeuronInput.cxx; src/TNeuronInputSqSum.cxx; src/TNeuronInputSum.cxx; src/Tools.cxx; src/TrainingHistory.cxx; src/TransformationHandler.cxx; src/TSpline1.cxx; src/TSpline2.cxx; src/TSynapse.cxx; src/Types.cxx; src/VariableDecorrTransform.cxx; src/VariableGaussTransform.cxx; src/VariableIdentityTransform.cxx; src/VariableImportance.cxx; src/VariableInfo.cxx; src/VariableNormalizeTransform.cxx; src/VariablePCATransform.cxx; src/VariableRearrangeTransform.cxx; src/VariableTransformBase.cxx; src/VariableTransform.cxx; src/VarTransformHandler.cxx; src/Volume.cxx; src/DNN/Architectures/Reference.cxx; src/DNN/Architectures/Reference/DataLoader.cxx; src/DNN/Architectures/Reference/TensorDataLoader.cxx; src/DNN/Architectures/Cpu.cxx; src/DNN/Architectures/Cpu/CpuBuffer.cxx; src/DNN/Architectures/Cpu/CpuMatrix.cxx; ${TMVA_EXTRA_SOURCES}; DEPENDENCIES; TreePlayer; Tree; Hist; Matrix; Minuit; MLP; MathCore; Core; RIO; XMLIO; ${TMVA_EXTRA_DEPENDENCIES}; DICTIONARY_OPTIONS; -writeEmptyRootPCM; INSTALL_OPTIONS; ${installoptions}; ${EXTRA_DICT_OPTS}; ). if(MSVC); target_compile_definitions(TMVA PRIVATE _USE_MATH_DEFINES); endif(). if(vdt OR builtin_vdt); target_link_libraries(TMVA PRIVATE VDT::VDT); endif(); if(builtin_vdt); add_dependencies(TMVA VDT); endif(). if(tmva-cpu); target_include_directories(TMVA PRIVATE ${TBB_INCLUDE_DIRS}); target_link_libraries(TMVA PRIVATE ${TBB_LIBRARIES}); set_target_properties(TMVA PROPERTIES COMPILE_FLAGS ""${TBB_CXXFLAGS}""). if(BLAS_FOUND); target_link_librar",MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:2489,Performance,Optimiz,OptimizeConfigParameters,2489,; TMVA/GiniIndexWithLaplace.h; TMVA/HyperParameterOptimisation.h; TMVA/IFitterTarget.h; TMVA/IMethod.h; TMVA/Interval.h; TMVA/IPruneTool.h; TMVA/KDEKernel.h; TMVA/LDA.h; TMVA/LogInterval.h; TMVA/LossFunction.h; TMVA/MCFitter.h; TMVA/MethodANNBase.h; TMVA/MethodBase.h; TMVA/MethodBayesClassifier.h; TMVA/MethodBDT.h; TMVA/MethodBoost.h; TMVA/MethodCategory.h; TMVA/MethodCFMlpANN_def.h; TMVA/MethodCFMlpANN.h; TMVA/MethodCFMlpANN_Utils.h; TMVA/MethodCompositeBase.h; TMVA/MethodCrossValidation.h; TMVA/MethodCuts.h; TMVA/MethodDL.h; TMVA/MethodDNN.h; TMVA/MethodDT.h; TMVA/MethodFDA.h; TMVA/MethodFisher.h; TMVA/MethodHMatrix.h; TMVA/MethodKNN.h; TMVA/MethodLD.h; TMVA/MethodLikelihood.h; TMVA/MethodMLP.h; TMVA/MethodPDEFoam.h; TMVA/MethodPDERS.h; TMVA/MethodRuleFit.h; TMVA/MethodSVM.h; TMVA/MethodTMlpANN.h; TMVA/MinuitFitter.h; TMVA/MinuitWrapper.h; TMVA/MisClassificationError.h; TMVA/ModulekNN.h; TMVA/Monitoring.h; TMVA/MsgLogger.h; TMVA/NeuralNet.h; TMVA/Node.h; TMVA/NodekNN.h; TMVA/OptimizeConfigParameters.h; TMVA/Option.h; TMVA/OptionMap.h; TMVA/Pattern.h; TMVA/PDEFoamCell.h; TMVA/PDEFoamDecisionTreeDensity.h; TMVA/PDEFoamDecisionTree.h; TMVA/PDEFoamDensityBase.h; TMVA/PDEFoamDiscriminantDensity.h; TMVA/PDEFoamDiscriminant.h; TMVA/PDEFoamEventDensity.h; TMVA/PDEFoamEvent.h; TMVA/PDEFoam.h; TMVA/PDEFoamKernelBase.h; TMVA/PDEFoamKernelGauss.h; TMVA/PDEFoamKernelLinN.h; TMVA/PDEFoamKernelTrivial.h; TMVA/PDEFoamMultiTarget.h; TMVA/PDEFoamTargetDensity.h; TMVA/PDEFoamTarget.h; TMVA/PDEFoamVect.h; TMVA/PDF.h; TMVA/QuickMVAProbEstimator.h; TMVA/Ranking.h; TMVA/Reader.h; TMVA/RegressionVariance.h; TMVA/ResultsClassification.h; TMVA/Results.h; TMVA/ResultsMulticlass.h; TMVA/ResultsRegression.h; TMVA/ROCCalc.h; TMVA/ROCCurve.h; TMVA/RootFinder.h; TMVA/RuleCut.h; TMVA/RuleEnsemble.h; TMVA/RuleFitAPI.h; TMVA/RuleFit.h; TMVA/RuleFitParams.h; TMVA/Rule.h; TMVA/SdivSqrtSplusB.h; TMVA/SeparationBase.h; TMVA/SimulatedAnnealingFitter.h; TMVA/SimulatedAnnealing.h; TMVA/SVEvent.h; TMVA/SVKe,MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:6938,Performance,Optimiz,OptimizeConfigParameters,6938,rc/GiniIndex.cxx; src/GiniIndexWithLaplace.cxx; src/HyperParameterOptimisation.cxx; src/IFitterTarget.cxx; src/IMethod.cxx; src/Interval.cxx; src/KDEKernel.cxx; src/LDA.cxx; src/LogInterval.cxx; src/LossFunction.cxx; src/MCFitter.cxx; src/MethodANNBase.cxx; src/MethodBase.cxx; src/MethodBayesClassifier.cxx; src/MethodBDT.cxx; src/MethodBoost.cxx; src/MethodCategory.cxx; src/MethodCFMlpANN.cxx; src/MethodCFMlpANN_Utils.cxx; src/MethodCompositeBase.cxx; src/MethodCrossValidation.cxx; src/MethodCuts.cxx; src/MethodDL.cxx; src/MethodDNN.cxx; src/MethodDT.cxx; src/MethodFDA.cxx; src/MethodFisher.cxx; src/MethodHMatrix.cxx; src/MethodKNN.cxx; src/MethodLD.cxx; src/MethodLikelihood.cxx; src/MethodMLP.cxx; src/MethodPDEFoam.cxx; src/MethodPDERS.cxx; src/MethodPlugins.cxx; src/MethodRuleFit.cxx; src/MethodSVM.cxx; src/MethodTMlpANN.cxx; src/MinuitFitter.cxx; src/MinuitWrapper.cxx; src/MisClassificationError.cxx; src/ModulekNN.cxx; src/MsgLogger.cxx; src/NeuralNet.cxx; src/Node.cxx; src/OptimizeConfigParameters.cxx; src/Option.cxx; src/OptionMap.cxx; src/PDEFoamCell.cxx; src/PDEFoam.cxx; src/PDEFoamDecisionTree.cxx; src/PDEFoamDecisionTreeDensity.cxx; src/PDEFoamDensityBase.cxx; src/PDEFoamDiscriminant.cxx; src/PDEFoamDiscriminantDensity.cxx; src/PDEFoamEvent.cxx; src/PDEFoamEventDensity.cxx; src/PDEFoamKernelBase.cxx; src/PDEFoamKernelGauss.cxx; src/PDEFoamKernelLinN.cxx; src/PDEFoamKernelTrivial.cxx; src/PDEFoamMultiTarget.cxx; src/PDEFoamTarget.cxx; src/PDEFoamTargetDensity.cxx; src/PDEFoamVect.cxx; src/PDF.cxx; src/QuickMVAProbEstimator.cxx; src/Ranking.cxx; src/Reader.cxx; src/RegressionVariance.cxx; src/ResultsClassification.cxx; src/Results.cxx; src/ResultsMulticlass.cxx; src/ResultsRegression.cxx; src/ROCCalc.cxx; src/ROCCurve.cxx; src/RootFinder.cxx; src/RuleCut.cxx; src/Rule.cxx; src/RuleEnsemble.cxx; src/RuleFitAPI.cxx; src/RuleFit.cxx; src/RuleFitParams.cxx; src/SdivSqrtSplusB.cxx; src/SeparationBase.cxx; src/SimulatedAnnealing.cxx; src/SimulatedAnnealingFitter.cx,MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:1672,Testability,Log,LogInterval,1672,f(). ROOT_STANDARD_LIBRARY_PACKAGE(TMVA; HEADERS; TMVA/BDTEventWrapper.h; TMVA/BinarySearchTree.h; TMVA/BinarySearchTreeNode.h; TMVA/BinaryTree.h; TMVA/CCPruner.h; TMVA/CCTreeWrapper.h; TMVA/Classification.h; TMVA/ClassifierFactory.h; TMVA/ClassInfo.h; TMVA/Config.h; TMVA/Configurable.h; TMVA/ConvergenceTest.h; TMVA/CostComplexityPruneTool.h; TMVA/CrossEntropy.h; TMVA/CrossValidation.h; TMVA/CvSplit.h; TMVA/DataInputHandler.h; TMVA/DataLoader.h; TMVA/DataSetFactory.h; TMVA/DataSet.h; TMVA/DataSetInfo.h; TMVA/DataSetManager.h; TMVA/DecisionTree.h; TMVA/DecisionTreeNode.h; TMVA/Envelope.h; TMVA/Event.h; TMVA/ExpectedErrorPruneTool.h; TMVA/Executor.h; TMVA/Factory.h; TMVA/FitterBase.h; TMVA/GeneticAlgorithm.h; TMVA/GeneticFitter.h; TMVA/GeneticGenes.h; TMVA/GeneticPopulation.h; TMVA/GeneticRange.h; TMVA/GiniIndex.h; TMVA/GiniIndexWithLaplace.h; TMVA/HyperParameterOptimisation.h; TMVA/IFitterTarget.h; TMVA/IMethod.h; TMVA/Interval.h; TMVA/IPruneTool.h; TMVA/KDEKernel.h; TMVA/LDA.h; TMVA/LogInterval.h; TMVA/LossFunction.h; TMVA/MCFitter.h; TMVA/MethodANNBase.h; TMVA/MethodBase.h; TMVA/MethodBayesClassifier.h; TMVA/MethodBDT.h; TMVA/MethodBoost.h; TMVA/MethodCategory.h; TMVA/MethodCFMlpANN_def.h; TMVA/MethodCFMlpANN.h; TMVA/MethodCFMlpANN_Utils.h; TMVA/MethodCompositeBase.h; TMVA/MethodCrossValidation.h; TMVA/MethodCuts.h; TMVA/MethodDL.h; TMVA/MethodDNN.h; TMVA/MethodDT.h; TMVA/MethodFDA.h; TMVA/MethodFisher.h; TMVA/MethodHMatrix.h; TMVA/MethodKNN.h; TMVA/MethodLD.h; TMVA/MethodLikelihood.h; TMVA/MethodMLP.h; TMVA/MethodPDEFoam.h; TMVA/MethodPDERS.h; TMVA/MethodRuleFit.h; TMVA/MethodSVM.h; TMVA/MethodTMlpANN.h; TMVA/MinuitFitter.h; TMVA/MinuitWrapper.h; TMVA/MisClassificationError.h; TMVA/ModulekNN.h; TMVA/Monitoring.h; TMVA/MsgLogger.h; TMVA/NeuralNet.h; TMVA/Node.h; TMVA/NodekNN.h; TMVA/OptimizeConfigParameters.h; TMVA/Option.h; TMVA/OptionMap.h; TMVA/Pattern.h; TMVA/PDEFoamCell.h; TMVA/PDEFoamDecisionTreeDensity.h; TMVA/PDEFoamDecisionTree.h; TMVA/PDEFoamDensityBase.h,MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:6124,Testability,Log,LogInterval,6124,/CpuTensor.h; ${TMVA_EXTRA_HEADERS}; SOURCES; src/BDTEventWrapper.cxx; src/BinarySearchTree.cxx; src/BinarySearchTreeNode.cxx; src/BinaryTree.cxx; src/CCPruner.cxx; src/CCTreeWrapper.cxx; src/Classification.cxx; src/ClassifierFactory.cxx; src/ClassInfo.cxx; src/Config.cxx; src/Configurable.cxx; src/ConvergenceTest.cxx; src/CostComplexityPruneTool.cxx; src/CrossEntropy.cxx; src/CrossValidation.cxx; src/CvSplit.cxx; src/DataInputHandler.cxx; src/DataLoader.cxx; src/DataSet.cxx; src/DataSetFactory.cxx; src/DataSetInfo.cxx; src/DataSetManager.cxx; src/DecisionTree.cxx; src/DecisionTreeNode.cxx; src/Envelope.cxx; src/Event.cxx; src/ExpectedErrorPruneTool.cxx; src/Factory.cxx; src/FitterBase.cxx; src/GeneticAlgorithm.cxx; src/GeneticFitter.cxx; src/GeneticGenes.cxx; src/GeneticPopulation.cxx; src/GeneticRange.cxx; src/GiniIndex.cxx; src/GiniIndexWithLaplace.cxx; src/HyperParameterOptimisation.cxx; src/IFitterTarget.cxx; src/IMethod.cxx; src/Interval.cxx; src/KDEKernel.cxx; src/LDA.cxx; src/LogInterval.cxx; src/LossFunction.cxx; src/MCFitter.cxx; src/MethodANNBase.cxx; src/MethodBase.cxx; src/MethodBayesClassifier.cxx; src/MethodBDT.cxx; src/MethodBoost.cxx; src/MethodCategory.cxx; src/MethodCFMlpANN.cxx; src/MethodCFMlpANN_Utils.cxx; src/MethodCompositeBase.cxx; src/MethodCrossValidation.cxx; src/MethodCuts.cxx; src/MethodDL.cxx; src/MethodDNN.cxx; src/MethodDT.cxx; src/MethodFDA.cxx; src/MethodFisher.cxx; src/MethodHMatrix.cxx; src/MethodKNN.cxx; src/MethodLD.cxx; src/MethodLikelihood.cxx; src/MethodMLP.cxx; src/MethodPDEFoam.cxx; src/MethodPDERS.cxx; src/MethodPlugins.cxx; src/MethodRuleFit.cxx; src/MethodSVM.cxx; src/MethodTMlpANN.cxx; src/MinuitFitter.cxx; src/MinuitWrapper.cxx; src/MisClassificationError.cxx; src/ModulekNN.cxx; src/MsgLogger.cxx; src/NeuralNet.cxx; src/Node.cxx; src/OptimizeConfigParameters.cxx; src/Option.cxx; src/OptionMap.cxx; src/PDEFoamCell.cxx; src/PDEFoam.cxx; src/PDEFoamDecisionTree.cxx; src/PDEFoamDecisionTreeDensity.cxx; src/PDEFoamDensityBa,MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:11392,Testability,test,test,11392," if(BLAS_FOUND); target_link_libraries(TMVA PRIVATE ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}); elseif(GSL_FOUND); target_compile_definitions(TMVA PRIVATE -DDNN_USE_CBLAS); target_include_directories(TMVA SYSTEM PRIVATE ${GSL_INCLUDE_DIR}); target_link_libraries(TMVA PRIVATE ${GSL_CBLAS_LIBRARY}); if(builtin_gsl); add_dependencies(TMVA GSL); endif(); else(); message(FATAL_ERROR ""tmva-cpu enabled but neither BLAS nor GSL BLAS were found""); endif(); endif(). if(tmva-gpu); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cuda.cu; src/DNN/Architectures/Cuda/CudaBuffers.cxx; src/DNN/Architectures/Cuda/CudaMatrix.cu; src/DNN/Architectures/Cuda/CudaTensor.cu ); target_link_libraries(TMVA PRIVATE CUDA::cuda_driver CUDA::cublas); if(tmva-cudnn); message(STATUS ""Using Cuda+cuDNN for TMVA Deep Learning on GPU""); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cudnn/TensorDataLoader.cxx; src/DNN/Architectures/Cudnn.cu); target_link_libraries(TMVA PRIVATE ROOT::cuDNN); else(); message(STATUS ""cuDNN not found or disabled - use only Cuda+Cublas for TMVA Deep Learning on GPU""); endif(); endif(tmva-gpu). if(dataframe); ROOT_STANDARD_LIBRARY_PACKAGE(TMVAUtils; NO_INSTALL_HEADERS; HEADERS; TMVA/RTensorUtils.hxx; TMVA/RStandardScaler.hxx; TMVA/RReader.hxx; TMVA/RInferenceUtils.hxx; TMVA/RBDT.hxx; TMVA/RSofieReader.hxx; TMVA/RBatchGenerator.hxx; TMVA/RBatchLoader.hxx; TMVA/RChunkLoader.hxx. SOURCES. src/RBDT.cxx. DEPENDENCIES; TMVA ROOTDataFrame ROOTVecOps; ${TMVA_EXTRA_DEPENDENCIES}. LINKDEF LinkDefUtils.h; DICTIONARY_OPTIONS; -writeEmptyRootPCM. ${EXTRA_DICT_OPTS}; ); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ROOT_ADD_TEST_SUBDIRECTORY(test/crossvalidation); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN); ROOT_ADD_TEST_SUBDIRECTORY(test/Method); ROOT_ADD_TEST_SUBDIRECTORY(test/ROC); ROOT_ADD_TEST_SUBDIRECTORY(test/envelope); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/CNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/RNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/LSTM); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/GRU); ",MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:11426,Testability,test,test,11426," if(BLAS_FOUND); target_link_libraries(TMVA PRIVATE ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}); elseif(GSL_FOUND); target_compile_definitions(TMVA PRIVATE -DDNN_USE_CBLAS); target_include_directories(TMVA SYSTEM PRIVATE ${GSL_INCLUDE_DIR}); target_link_libraries(TMVA PRIVATE ${GSL_CBLAS_LIBRARY}); if(builtin_gsl); add_dependencies(TMVA GSL); endif(); else(); message(FATAL_ERROR ""tmva-cpu enabled but neither BLAS nor GSL BLAS were found""); endif(); endif(). if(tmva-gpu); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cuda.cu; src/DNN/Architectures/Cuda/CudaBuffers.cxx; src/DNN/Architectures/Cuda/CudaMatrix.cu; src/DNN/Architectures/Cuda/CudaTensor.cu ); target_link_libraries(TMVA PRIVATE CUDA::cuda_driver CUDA::cublas); if(tmva-cudnn); message(STATUS ""Using Cuda+cuDNN for TMVA Deep Learning on GPU""); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cudnn/TensorDataLoader.cxx; src/DNN/Architectures/Cudnn.cu); target_link_libraries(TMVA PRIVATE ROOT::cuDNN); else(); message(STATUS ""cuDNN not found or disabled - use only Cuda+Cublas for TMVA Deep Learning on GPU""); endif(); endif(tmva-gpu). if(dataframe); ROOT_STANDARD_LIBRARY_PACKAGE(TMVAUtils; NO_INSTALL_HEADERS; HEADERS; TMVA/RTensorUtils.hxx; TMVA/RStandardScaler.hxx; TMVA/RReader.hxx; TMVA/RInferenceUtils.hxx; TMVA/RBDT.hxx; TMVA/RSofieReader.hxx; TMVA/RBatchGenerator.hxx; TMVA/RBatchLoader.hxx; TMVA/RChunkLoader.hxx. SOURCES. src/RBDT.cxx. DEPENDENCIES; TMVA ROOTDataFrame ROOTVecOps; ${TMVA_EXTRA_DEPENDENCIES}. LINKDEF LinkDefUtils.h; DICTIONARY_OPTIONS; -writeEmptyRootPCM. ${EXTRA_DICT_OPTS}; ); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ROOT_ADD_TEST_SUBDIRECTORY(test/crossvalidation); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN); ROOT_ADD_TEST_SUBDIRECTORY(test/Method); ROOT_ADD_TEST_SUBDIRECTORY(test/ROC); ROOT_ADD_TEST_SUBDIRECTORY(test/envelope); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/CNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/RNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/LSTM); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/GRU); ",MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:11476,Testability,test,test,11476," if(BLAS_FOUND); target_link_libraries(TMVA PRIVATE ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}); elseif(GSL_FOUND); target_compile_definitions(TMVA PRIVATE -DDNN_USE_CBLAS); target_include_directories(TMVA SYSTEM PRIVATE ${GSL_INCLUDE_DIR}); target_link_libraries(TMVA PRIVATE ${GSL_CBLAS_LIBRARY}); if(builtin_gsl); add_dependencies(TMVA GSL); endif(); else(); message(FATAL_ERROR ""tmva-cpu enabled but neither BLAS nor GSL BLAS were found""); endif(); endif(). if(tmva-gpu); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cuda.cu; src/DNN/Architectures/Cuda/CudaBuffers.cxx; src/DNN/Architectures/Cuda/CudaMatrix.cu; src/DNN/Architectures/Cuda/CudaTensor.cu ); target_link_libraries(TMVA PRIVATE CUDA::cuda_driver CUDA::cublas); if(tmva-cudnn); message(STATUS ""Using Cuda+cuDNN for TMVA Deep Learning on GPU""); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cudnn/TensorDataLoader.cxx; src/DNN/Architectures/Cudnn.cu); target_link_libraries(TMVA PRIVATE ROOT::cuDNN); else(); message(STATUS ""cuDNN not found or disabled - use only Cuda+Cublas for TMVA Deep Learning on GPU""); endif(); endif(tmva-gpu). if(dataframe); ROOT_STANDARD_LIBRARY_PACKAGE(TMVAUtils; NO_INSTALL_HEADERS; HEADERS; TMVA/RTensorUtils.hxx; TMVA/RStandardScaler.hxx; TMVA/RReader.hxx; TMVA/RInferenceUtils.hxx; TMVA/RBDT.hxx; TMVA/RSofieReader.hxx; TMVA/RBatchGenerator.hxx; TMVA/RBatchLoader.hxx; TMVA/RChunkLoader.hxx. SOURCES. src/RBDT.cxx. DEPENDENCIES; TMVA ROOTDataFrame ROOTVecOps; ${TMVA_EXTRA_DEPENDENCIES}. LINKDEF LinkDefUtils.h; DICTIONARY_OPTIONS; -writeEmptyRootPCM. ${EXTRA_DICT_OPTS}; ); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ROOT_ADD_TEST_SUBDIRECTORY(test/crossvalidation); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN); ROOT_ADD_TEST_SUBDIRECTORY(test/Method); ROOT_ADD_TEST_SUBDIRECTORY(test/ROC); ROOT_ADD_TEST_SUBDIRECTORY(test/envelope); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/CNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/RNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/LSTM); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/GRU); ",MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:11514,Testability,test,test,11514," if(BLAS_FOUND); target_link_libraries(TMVA PRIVATE ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}); elseif(GSL_FOUND); target_compile_definitions(TMVA PRIVATE -DDNN_USE_CBLAS); target_include_directories(TMVA SYSTEM PRIVATE ${GSL_INCLUDE_DIR}); target_link_libraries(TMVA PRIVATE ${GSL_CBLAS_LIBRARY}); if(builtin_gsl); add_dependencies(TMVA GSL); endif(); else(); message(FATAL_ERROR ""tmva-cpu enabled but neither BLAS nor GSL BLAS were found""); endif(); endif(). if(tmva-gpu); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cuda.cu; src/DNN/Architectures/Cuda/CudaBuffers.cxx; src/DNN/Architectures/Cuda/CudaMatrix.cu; src/DNN/Architectures/Cuda/CudaTensor.cu ); target_link_libraries(TMVA PRIVATE CUDA::cuda_driver CUDA::cublas); if(tmva-cudnn); message(STATUS ""Using Cuda+cuDNN for TMVA Deep Learning on GPU""); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cudnn/TensorDataLoader.cxx; src/DNN/Architectures/Cudnn.cu); target_link_libraries(TMVA PRIVATE ROOT::cuDNN); else(); message(STATUS ""cuDNN not found or disabled - use only Cuda+Cublas for TMVA Deep Learning on GPU""); endif(); endif(tmva-gpu). if(dataframe); ROOT_STANDARD_LIBRARY_PACKAGE(TMVAUtils; NO_INSTALL_HEADERS; HEADERS; TMVA/RTensorUtils.hxx; TMVA/RStandardScaler.hxx; TMVA/RReader.hxx; TMVA/RInferenceUtils.hxx; TMVA/RBDT.hxx; TMVA/RSofieReader.hxx; TMVA/RBatchGenerator.hxx; TMVA/RBatchLoader.hxx; TMVA/RChunkLoader.hxx. SOURCES. src/RBDT.cxx. DEPENDENCIES; TMVA ROOTDataFrame ROOTVecOps; ${TMVA_EXTRA_DEPENDENCIES}. LINKDEF LinkDefUtils.h; DICTIONARY_OPTIONS; -writeEmptyRootPCM. ${EXTRA_DICT_OPTS}; ); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ROOT_ADD_TEST_SUBDIRECTORY(test/crossvalidation); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN); ROOT_ADD_TEST_SUBDIRECTORY(test/Method); ROOT_ADD_TEST_SUBDIRECTORY(test/ROC); ROOT_ADD_TEST_SUBDIRECTORY(test/envelope); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/CNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/RNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/LSTM); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/GRU); ",MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:11555,Testability,test,test,11555," if(BLAS_FOUND); target_link_libraries(TMVA PRIVATE ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}); elseif(GSL_FOUND); target_compile_definitions(TMVA PRIVATE -DDNN_USE_CBLAS); target_include_directories(TMVA SYSTEM PRIVATE ${GSL_INCLUDE_DIR}); target_link_libraries(TMVA PRIVATE ${GSL_CBLAS_LIBRARY}); if(builtin_gsl); add_dependencies(TMVA GSL); endif(); else(); message(FATAL_ERROR ""tmva-cpu enabled but neither BLAS nor GSL BLAS were found""); endif(); endif(). if(tmva-gpu); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cuda.cu; src/DNN/Architectures/Cuda/CudaBuffers.cxx; src/DNN/Architectures/Cuda/CudaMatrix.cu; src/DNN/Architectures/Cuda/CudaTensor.cu ); target_link_libraries(TMVA PRIVATE CUDA::cuda_driver CUDA::cublas); if(tmva-cudnn); message(STATUS ""Using Cuda+cuDNN for TMVA Deep Learning on GPU""); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cudnn/TensorDataLoader.cxx; src/DNN/Architectures/Cudnn.cu); target_link_libraries(TMVA PRIVATE ROOT::cuDNN); else(); message(STATUS ""cuDNN not found or disabled - use only Cuda+Cublas for TMVA Deep Learning on GPU""); endif(); endif(tmva-gpu). if(dataframe); ROOT_STANDARD_LIBRARY_PACKAGE(TMVAUtils; NO_INSTALL_HEADERS; HEADERS; TMVA/RTensorUtils.hxx; TMVA/RStandardScaler.hxx; TMVA/RReader.hxx; TMVA/RInferenceUtils.hxx; TMVA/RBDT.hxx; TMVA/RSofieReader.hxx; TMVA/RBatchGenerator.hxx; TMVA/RBatchLoader.hxx; TMVA/RChunkLoader.hxx. SOURCES. src/RBDT.cxx. DEPENDENCIES; TMVA ROOTDataFrame ROOTVecOps; ${TMVA_EXTRA_DEPENDENCIES}. LINKDEF LinkDefUtils.h; DICTIONARY_OPTIONS; -writeEmptyRootPCM. ${EXTRA_DICT_OPTS}; ); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ROOT_ADD_TEST_SUBDIRECTORY(test/crossvalidation); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN); ROOT_ADD_TEST_SUBDIRECTORY(test/Method); ROOT_ADD_TEST_SUBDIRECTORY(test/ROC); ROOT_ADD_TEST_SUBDIRECTORY(test/envelope); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/CNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/RNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/LSTM); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/GRU); ",MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:11593,Testability,test,test,11593," if(BLAS_FOUND); target_link_libraries(TMVA PRIVATE ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}); elseif(GSL_FOUND); target_compile_definitions(TMVA PRIVATE -DDNN_USE_CBLAS); target_include_directories(TMVA SYSTEM PRIVATE ${GSL_INCLUDE_DIR}); target_link_libraries(TMVA PRIVATE ${GSL_CBLAS_LIBRARY}); if(builtin_gsl); add_dependencies(TMVA GSL); endif(); else(); message(FATAL_ERROR ""tmva-cpu enabled but neither BLAS nor GSL BLAS were found""); endif(); endif(). if(tmva-gpu); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cuda.cu; src/DNN/Architectures/Cuda/CudaBuffers.cxx; src/DNN/Architectures/Cuda/CudaMatrix.cu; src/DNN/Architectures/Cuda/CudaTensor.cu ); target_link_libraries(TMVA PRIVATE CUDA::cuda_driver CUDA::cublas); if(tmva-cudnn); message(STATUS ""Using Cuda+cuDNN for TMVA Deep Learning on GPU""); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cudnn/TensorDataLoader.cxx; src/DNN/Architectures/Cudnn.cu); target_link_libraries(TMVA PRIVATE ROOT::cuDNN); else(); message(STATUS ""cuDNN not found or disabled - use only Cuda+Cublas for TMVA Deep Learning on GPU""); endif(); endif(tmva-gpu). if(dataframe); ROOT_STANDARD_LIBRARY_PACKAGE(TMVAUtils; NO_INSTALL_HEADERS; HEADERS; TMVA/RTensorUtils.hxx; TMVA/RStandardScaler.hxx; TMVA/RReader.hxx; TMVA/RInferenceUtils.hxx; TMVA/RBDT.hxx; TMVA/RSofieReader.hxx; TMVA/RBatchGenerator.hxx; TMVA/RBatchLoader.hxx; TMVA/RChunkLoader.hxx. SOURCES. src/RBDT.cxx. DEPENDENCIES; TMVA ROOTDataFrame ROOTVecOps; ${TMVA_EXTRA_DEPENDENCIES}. LINKDEF LinkDefUtils.h; DICTIONARY_OPTIONS; -writeEmptyRootPCM. ${EXTRA_DICT_OPTS}; ); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ROOT_ADD_TEST_SUBDIRECTORY(test/crossvalidation); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN); ROOT_ADD_TEST_SUBDIRECTORY(test/Method); ROOT_ADD_TEST_SUBDIRECTORY(test/ROC); ROOT_ADD_TEST_SUBDIRECTORY(test/envelope); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/CNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/RNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/LSTM); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/GRU); ",MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:11636,Testability,test,test,11636," if(BLAS_FOUND); target_link_libraries(TMVA PRIVATE ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}); elseif(GSL_FOUND); target_compile_definitions(TMVA PRIVATE -DDNN_USE_CBLAS); target_include_directories(TMVA SYSTEM PRIVATE ${GSL_INCLUDE_DIR}); target_link_libraries(TMVA PRIVATE ${GSL_CBLAS_LIBRARY}); if(builtin_gsl); add_dependencies(TMVA GSL); endif(); else(); message(FATAL_ERROR ""tmva-cpu enabled but neither BLAS nor GSL BLAS were found""); endif(); endif(). if(tmva-gpu); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cuda.cu; src/DNN/Architectures/Cuda/CudaBuffers.cxx; src/DNN/Architectures/Cuda/CudaMatrix.cu; src/DNN/Architectures/Cuda/CudaTensor.cu ); target_link_libraries(TMVA PRIVATE CUDA::cuda_driver CUDA::cublas); if(tmva-cudnn); message(STATUS ""Using Cuda+cuDNN for TMVA Deep Learning on GPU""); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cudnn/TensorDataLoader.cxx; src/DNN/Architectures/Cudnn.cu); target_link_libraries(TMVA PRIVATE ROOT::cuDNN); else(); message(STATUS ""cuDNN not found or disabled - use only Cuda+Cublas for TMVA Deep Learning on GPU""); endif(); endif(tmva-gpu). if(dataframe); ROOT_STANDARD_LIBRARY_PACKAGE(TMVAUtils; NO_INSTALL_HEADERS; HEADERS; TMVA/RTensorUtils.hxx; TMVA/RStandardScaler.hxx; TMVA/RReader.hxx; TMVA/RInferenceUtils.hxx; TMVA/RBDT.hxx; TMVA/RSofieReader.hxx; TMVA/RBatchGenerator.hxx; TMVA/RBatchLoader.hxx; TMVA/RChunkLoader.hxx. SOURCES. src/RBDT.cxx. DEPENDENCIES; TMVA ROOTDataFrame ROOTVecOps; ${TMVA_EXTRA_DEPENDENCIES}. LINKDEF LinkDefUtils.h; DICTIONARY_OPTIONS; -writeEmptyRootPCM. ${EXTRA_DICT_OPTS}; ); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ROOT_ADD_TEST_SUBDIRECTORY(test/crossvalidation); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN); ROOT_ADD_TEST_SUBDIRECTORY(test/Method); ROOT_ADD_TEST_SUBDIRECTORY(test/ROC); ROOT_ADD_TEST_SUBDIRECTORY(test/envelope); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/CNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/RNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/LSTM); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/GRU); ",MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:11678,Testability,test,test,11678," if(BLAS_FOUND); target_link_libraries(TMVA PRIVATE ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}); elseif(GSL_FOUND); target_compile_definitions(TMVA PRIVATE -DDNN_USE_CBLAS); target_include_directories(TMVA SYSTEM PRIVATE ${GSL_INCLUDE_DIR}); target_link_libraries(TMVA PRIVATE ${GSL_CBLAS_LIBRARY}); if(builtin_gsl); add_dependencies(TMVA GSL); endif(); else(); message(FATAL_ERROR ""tmva-cpu enabled but neither BLAS nor GSL BLAS were found""); endif(); endif(). if(tmva-gpu); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cuda.cu; src/DNN/Architectures/Cuda/CudaBuffers.cxx; src/DNN/Architectures/Cuda/CudaMatrix.cu; src/DNN/Architectures/Cuda/CudaTensor.cu ); target_link_libraries(TMVA PRIVATE CUDA::cuda_driver CUDA::cublas); if(tmva-cudnn); message(STATUS ""Using Cuda+cuDNN for TMVA Deep Learning on GPU""); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cudnn/TensorDataLoader.cxx; src/DNN/Architectures/Cudnn.cu); target_link_libraries(TMVA PRIVATE ROOT::cuDNN); else(); message(STATUS ""cuDNN not found or disabled - use only Cuda+Cublas for TMVA Deep Learning on GPU""); endif(); endif(tmva-gpu). if(dataframe); ROOT_STANDARD_LIBRARY_PACKAGE(TMVAUtils; NO_INSTALL_HEADERS; HEADERS; TMVA/RTensorUtils.hxx; TMVA/RStandardScaler.hxx; TMVA/RReader.hxx; TMVA/RInferenceUtils.hxx; TMVA/RBDT.hxx; TMVA/RSofieReader.hxx; TMVA/RBatchGenerator.hxx; TMVA/RBatchLoader.hxx; TMVA/RChunkLoader.hxx. SOURCES. src/RBDT.cxx. DEPENDENCIES; TMVA ROOTDataFrame ROOTVecOps; ${TMVA_EXTRA_DEPENDENCIES}. LINKDEF LinkDefUtils.h; DICTIONARY_OPTIONS; -writeEmptyRootPCM. ${EXTRA_DICT_OPTS}; ); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ROOT_ADD_TEST_SUBDIRECTORY(test/crossvalidation); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN); ROOT_ADD_TEST_SUBDIRECTORY(test/Method); ROOT_ADD_TEST_SUBDIRECTORY(test/ROC); ROOT_ADD_TEST_SUBDIRECTORY(test/envelope); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/CNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/RNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/LSTM); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/GRU); ",MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:11720,Testability,test,test,11720," if(BLAS_FOUND); target_link_libraries(TMVA PRIVATE ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}); elseif(GSL_FOUND); target_compile_definitions(TMVA PRIVATE -DDNN_USE_CBLAS); target_include_directories(TMVA SYSTEM PRIVATE ${GSL_INCLUDE_DIR}); target_link_libraries(TMVA PRIVATE ${GSL_CBLAS_LIBRARY}); if(builtin_gsl); add_dependencies(TMVA GSL); endif(); else(); message(FATAL_ERROR ""tmva-cpu enabled but neither BLAS nor GSL BLAS were found""); endif(); endif(). if(tmva-gpu); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cuda.cu; src/DNN/Architectures/Cuda/CudaBuffers.cxx; src/DNN/Architectures/Cuda/CudaMatrix.cu; src/DNN/Architectures/Cuda/CudaTensor.cu ); target_link_libraries(TMVA PRIVATE CUDA::cuda_driver CUDA::cublas); if(tmva-cudnn); message(STATUS ""Using Cuda+cuDNN for TMVA Deep Learning on GPU""); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cudnn/TensorDataLoader.cxx; src/DNN/Architectures/Cudnn.cu); target_link_libraries(TMVA PRIVATE ROOT::cuDNN); else(); message(STATUS ""cuDNN not found or disabled - use only Cuda+Cublas for TMVA Deep Learning on GPU""); endif(); endif(tmva-gpu). if(dataframe); ROOT_STANDARD_LIBRARY_PACKAGE(TMVAUtils; NO_INSTALL_HEADERS; HEADERS; TMVA/RTensorUtils.hxx; TMVA/RStandardScaler.hxx; TMVA/RReader.hxx; TMVA/RInferenceUtils.hxx; TMVA/RBDT.hxx; TMVA/RSofieReader.hxx; TMVA/RBatchGenerator.hxx; TMVA/RBatchLoader.hxx; TMVA/RChunkLoader.hxx. SOURCES. src/RBDT.cxx. DEPENDENCIES; TMVA ROOTDataFrame ROOTVecOps; ${TMVA_EXTRA_DEPENDENCIES}. LINKDEF LinkDefUtils.h; DICTIONARY_OPTIONS; -writeEmptyRootPCM. ${EXTRA_DICT_OPTS}; ); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ROOT_ADD_TEST_SUBDIRECTORY(test/crossvalidation); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN); ROOT_ADD_TEST_SUBDIRECTORY(test/Method); ROOT_ADD_TEST_SUBDIRECTORY(test/ROC); ROOT_ADD_TEST_SUBDIRECTORY(test/envelope); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/CNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/RNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/LSTM); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/GRU); ",MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:11763,Testability,test,test,11763," if(BLAS_FOUND); target_link_libraries(TMVA PRIVATE ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}); elseif(GSL_FOUND); target_compile_definitions(TMVA PRIVATE -DDNN_USE_CBLAS); target_include_directories(TMVA SYSTEM PRIVATE ${GSL_INCLUDE_DIR}); target_link_libraries(TMVA PRIVATE ${GSL_CBLAS_LIBRARY}); if(builtin_gsl); add_dependencies(TMVA GSL); endif(); else(); message(FATAL_ERROR ""tmva-cpu enabled but neither BLAS nor GSL BLAS were found""); endif(); endif(). if(tmva-gpu); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cuda.cu; src/DNN/Architectures/Cuda/CudaBuffers.cxx; src/DNN/Architectures/Cuda/CudaMatrix.cu; src/DNN/Architectures/Cuda/CudaTensor.cu ); target_link_libraries(TMVA PRIVATE CUDA::cuda_driver CUDA::cublas); if(tmva-cudnn); message(STATUS ""Using Cuda+cuDNN for TMVA Deep Learning on GPU""); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cudnn/TensorDataLoader.cxx; src/DNN/Architectures/Cudnn.cu); target_link_libraries(TMVA PRIVATE ROOT::cuDNN); else(); message(STATUS ""cuDNN not found or disabled - use only Cuda+Cublas for TMVA Deep Learning on GPU""); endif(); endif(tmva-gpu). if(dataframe); ROOT_STANDARD_LIBRARY_PACKAGE(TMVAUtils; NO_INSTALL_HEADERS; HEADERS; TMVA/RTensorUtils.hxx; TMVA/RStandardScaler.hxx; TMVA/RReader.hxx; TMVA/RInferenceUtils.hxx; TMVA/RBDT.hxx; TMVA/RSofieReader.hxx; TMVA/RBatchGenerator.hxx; TMVA/RBatchLoader.hxx; TMVA/RChunkLoader.hxx. SOURCES. src/RBDT.cxx. DEPENDENCIES; TMVA ROOTDataFrame ROOTVecOps; ${TMVA_EXTRA_DEPENDENCIES}. LINKDEF LinkDefUtils.h; DICTIONARY_OPTIONS; -writeEmptyRootPCM. ${EXTRA_DICT_OPTS}; ); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ROOT_ADD_TEST_SUBDIRECTORY(test/crossvalidation); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN); ROOT_ADD_TEST_SUBDIRECTORY(test/Method); ROOT_ADD_TEST_SUBDIRECTORY(test/ROC); ROOT_ADD_TEST_SUBDIRECTORY(test/envelope); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/CNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/RNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/LSTM); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/GRU); ",MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:10571,Usability,Learn,Learning,10571,"dencies(TMVA VDT); endif(). if(tmva-cpu); target_include_directories(TMVA PRIVATE ${TBB_INCLUDE_DIRS}); target_link_libraries(TMVA PRIVATE ${TBB_LIBRARIES}); set_target_properties(TMVA PROPERTIES COMPILE_FLAGS ""${TBB_CXXFLAGS}""). if(BLAS_FOUND); target_link_libraries(TMVA PRIVATE ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}); elseif(GSL_FOUND); target_compile_definitions(TMVA PRIVATE -DDNN_USE_CBLAS); target_include_directories(TMVA SYSTEM PRIVATE ${GSL_INCLUDE_DIR}); target_link_libraries(TMVA PRIVATE ${GSL_CBLAS_LIBRARY}); if(builtin_gsl); add_dependencies(TMVA GSL); endif(); else(); message(FATAL_ERROR ""tmva-cpu enabled but neither BLAS nor GSL BLAS were found""); endif(); endif(). if(tmva-gpu); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cuda.cu; src/DNN/Architectures/Cuda/CudaBuffers.cxx; src/DNN/Architectures/Cuda/CudaMatrix.cu; src/DNN/Architectures/Cuda/CudaTensor.cu ); target_link_libraries(TMVA PRIVATE CUDA::cuda_driver CUDA::cublas); if(tmva-cudnn); message(STATUS ""Using Cuda+cuDNN for TMVA Deep Learning on GPU""); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cudnn/TensorDataLoader.cxx; src/DNN/Architectures/Cudnn.cu); target_link_libraries(TMVA PRIVATE ROOT::cuDNN); else(); message(STATUS ""cuDNN not found or disabled - use only Cuda+Cublas for TMVA Deep Learning on GPU""); endif(); endif(tmva-gpu). if(dataframe); ROOT_STANDARD_LIBRARY_PACKAGE(TMVAUtils; NO_INSTALL_HEADERS; HEADERS; TMVA/RTensorUtils.hxx; TMVA/RStandardScaler.hxx; TMVA/RReader.hxx; TMVA/RInferenceUtils.hxx; TMVA/RBDT.hxx; TMVA/RSofieReader.hxx; TMVA/RBatchGenerator.hxx; TMVA/RBatchLoader.hxx; TMVA/RChunkLoader.hxx. SOURCES. src/RBDT.cxx. DEPENDENCIES; TMVA ROOTDataFrame ROOTVecOps; ${TMVA_EXTRA_DEPENDENCIES}. LINKDEF LinkDefUtils.h; DICTIONARY_OPTIONS; -writeEmptyRootPCM. ${EXTRA_DICT_OPTS}; ); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ROOT_ADD_TEST_SUBDIRECTORY(test/crossvalidation); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN); ROOT_ADD_TEST_SUBDIRECTORY(test/Method); ROOT_ADD_TEST_SUBDIRE",MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt:10840,Usability,Learn,Learning,10840," if(BLAS_FOUND); target_link_libraries(TMVA PRIVATE ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}); elseif(GSL_FOUND); target_compile_definitions(TMVA PRIVATE -DDNN_USE_CBLAS); target_include_directories(TMVA SYSTEM PRIVATE ${GSL_INCLUDE_DIR}); target_link_libraries(TMVA PRIVATE ${GSL_CBLAS_LIBRARY}); if(builtin_gsl); add_dependencies(TMVA GSL); endif(); else(); message(FATAL_ERROR ""tmva-cpu enabled but neither BLAS nor GSL BLAS were found""); endif(); endif(). if(tmva-gpu); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cuda.cu; src/DNN/Architectures/Cuda/CudaBuffers.cxx; src/DNN/Architectures/Cuda/CudaMatrix.cu; src/DNN/Architectures/Cuda/CudaTensor.cu ); target_link_libraries(TMVA PRIVATE CUDA::cuda_driver CUDA::cublas); if(tmva-cudnn); message(STATUS ""Using Cuda+cuDNN for TMVA Deep Learning on GPU""); target_sources(TMVA PRIVATE; src/DNN/Architectures/Cudnn/TensorDataLoader.cxx; src/DNN/Architectures/Cudnn.cu); target_link_libraries(TMVA PRIVATE ROOT::cuDNN); else(); message(STATUS ""cuDNN not found or disabled - use only Cuda+Cublas for TMVA Deep Learning on GPU""); endif(); endif(tmva-gpu). if(dataframe); ROOT_STANDARD_LIBRARY_PACKAGE(TMVAUtils; NO_INSTALL_HEADERS; HEADERS; TMVA/RTensorUtils.hxx; TMVA/RStandardScaler.hxx; TMVA/RReader.hxx; TMVA/RInferenceUtils.hxx; TMVA/RBDT.hxx; TMVA/RSofieReader.hxx; TMVA/RBatchGenerator.hxx; TMVA/RBatchLoader.hxx; TMVA/RChunkLoader.hxx. SOURCES. src/RBDT.cxx. DEPENDENCIES; TMVA ROOTDataFrame ROOTVecOps; ${TMVA_EXTRA_DEPENDENCIES}. LINKDEF LinkDefUtils.h; DICTIONARY_OPTIONS; -writeEmptyRootPCM. ${EXTRA_DICT_OPTS}; ); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ROOT_ADD_TEST_SUBDIRECTORY(test/crossvalidation); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN); ROOT_ADD_TEST_SUBDIRECTORY(test/Method); ROOT_ADD_TEST_SUBDIRECTORY(test/ROC); ROOT_ADD_TEST_SUBDIRECTORY(test/envelope); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/CNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/RNN); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/LSTM); ROOT_ADD_TEST_SUBDIRECTORY(test/DNN/GRU); ",MatchSource.DOCS,tmva/tmva/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/CMakeLists.txt:2214,Integrability,DEPEND,DEPENDENCIES,2214,"author Pere Mato, CERN; ############################################################################. set (EXTRA_DICT_OPTS); if (runtime_cxxmodules AND WIN32); set (EXTRA_DICT_OPTS NO_CXXMODULE); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(TMVAGui; HEADERS; TMVA/BDT.h; TMVA/BDTControlPlots.h; TMVA/BDT_Reg.h; TMVA/BoostControlPlots.h; TMVA/CorrGui.h; TMVA/CorrGuiMultiClass.h; TMVA/MovieMaker.h; TMVA/PlotFoams.h; TMVA/TMVAGui.h; TMVA/TMVAMultiClassGui.h; TMVA/TMVARegGui.h; TMVA/annconvergencetest.h; TMVA/compareanapp.h; TMVA/correlations.h; TMVA/correlationsMultiClass.h; TMVA/correlationscatters.h; TMVA/correlationscattersMultiClass.h; TMVA/deviations.h; TMVA/efficiencies.h; TMVA/efficienciesMulticlass.h; TMVA/likelihoodrefs.h; TMVA/mvaeffs.h; TMVA/mvas.h; TMVA/mvasMulticlass.h; TMVA/mvaweights.h; TMVA/network.h; TMVA/paracoor.h; TMVA/probas.h; TMVA/regression_averagedevs.h; TMVA/rulevis.h; TMVA/rulevisCorr.h; TMVA/rulevisHists.h; TMVA/tmvaglob.h; TMVA/training_history.h; TMVA/variables.h; TMVA/variablesMultiClass.h; SOURCES; src/BDTControlPlots.cxx; src/BoostControlPlots.cxx; src/CorrGui.cxx; src/CorrGuiMultiClass.cxx; src/MovieMaker.cxx; src/PlotFoams.cxx; src/TMVAGui.cxx; src/TMVAMultiClassGui.cxx; src/TMVARegGui.cxx; src/annconvergencetest.cxx; src/compareanapp.cxx; src/correlations.cxx; src/correlationsMultiClass.cxx; src/correlationscatters.cxx; src/correlationscattersMultiClass.cxx; src/deviations.cxx; src/efficiencies.cxx; src/efficienciesMulticlass.cxx; src/likelihoodrefs.cxx; src/mvas.cxx; src/mvasMulticlass.cxx; src/mvaweights.cxx; src/network.cxx; src/paracoor.cxx; src/regression_averagedevs.cxx; src/rulevis.cxx; src/rulevisCorr.cxx; src/rulevisHists.cxx; src/tmvaglob.cxx; src/training_history.cxx; src/variables.cxx; src/variablesMultiClass.cxx; src/BDT.cxx; src/BDT_Reg.cxx; src/probas.cxx; src/mvaeffs.cxx; DICTIONARY_OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; RIO; Hist; Tree; TreeViewer; MLP; Minuit; XMLIO; TMVA; Gui; HistPainter; Core; ${EXTRA_DICT_OPTS}; ); ",MatchSource.DOCS,tmva/tmvagui/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/CMakeLists.txt:1315,Modifiability,variab,variables,1315,"a package; # @author Pere Mato, CERN; ############################################################################. set (EXTRA_DICT_OPTS); if (runtime_cxxmodules AND WIN32); set (EXTRA_DICT_OPTS NO_CXXMODULE); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(TMVAGui; HEADERS; TMVA/BDT.h; TMVA/BDTControlPlots.h; TMVA/BDT_Reg.h; TMVA/BoostControlPlots.h; TMVA/CorrGui.h; TMVA/CorrGuiMultiClass.h; TMVA/MovieMaker.h; TMVA/PlotFoams.h; TMVA/TMVAGui.h; TMVA/TMVAMultiClassGui.h; TMVA/TMVARegGui.h; TMVA/annconvergencetest.h; TMVA/compareanapp.h; TMVA/correlations.h; TMVA/correlationsMultiClass.h; TMVA/correlationscatters.h; TMVA/correlationscattersMultiClass.h; TMVA/deviations.h; TMVA/efficiencies.h; TMVA/efficienciesMulticlass.h; TMVA/likelihoodrefs.h; TMVA/mvaeffs.h; TMVA/mvas.h; TMVA/mvasMulticlass.h; TMVA/mvaweights.h; TMVA/network.h; TMVA/paracoor.h; TMVA/probas.h; TMVA/regression_averagedevs.h; TMVA/rulevis.h; TMVA/rulevisCorr.h; TMVA/rulevisHists.h; TMVA/tmvaglob.h; TMVA/training_history.h; TMVA/variables.h; TMVA/variablesMultiClass.h; SOURCES; src/BDTControlPlots.cxx; src/BoostControlPlots.cxx; src/CorrGui.cxx; src/CorrGuiMultiClass.cxx; src/MovieMaker.cxx; src/PlotFoams.cxx; src/TMVAGui.cxx; src/TMVAMultiClassGui.cxx; src/TMVARegGui.cxx; src/annconvergencetest.cxx; src/compareanapp.cxx; src/correlations.cxx; src/correlationsMultiClass.cxx; src/correlationscatters.cxx; src/correlationscattersMultiClass.cxx; src/deviations.cxx; src/efficiencies.cxx; src/efficienciesMulticlass.cxx; src/likelihoodrefs.cxx; src/mvas.cxx; src/mvasMulticlass.cxx; src/mvaweights.cxx; src/network.cxx; src/paracoor.cxx; src/regression_averagedevs.cxx; src/rulevis.cxx; src/rulevisCorr.cxx; src/rulevisHists.cxx; src/tmvaglob.cxx; src/training_history.cxx; src/variables.cxx; src/variablesMultiClass.cxx; src/BDT.cxx; src/BDT_Reg.cxx; src/probas.cxx; src/mvaeffs.cxx; DICTIONARY_OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; RIO; Hist; Tree; TreeViewer; MLP; Minuit; XMLIO; TMVA; Gui; HistPainter; Core; ${EXTRA_D",MatchSource.DOCS,tmva/tmvagui/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/CMakeLists.txt:1333,Modifiability,variab,variablesMultiClass,1333,"author Pere Mato, CERN; ############################################################################. set (EXTRA_DICT_OPTS); if (runtime_cxxmodules AND WIN32); set (EXTRA_DICT_OPTS NO_CXXMODULE); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(TMVAGui; HEADERS; TMVA/BDT.h; TMVA/BDTControlPlots.h; TMVA/BDT_Reg.h; TMVA/BoostControlPlots.h; TMVA/CorrGui.h; TMVA/CorrGuiMultiClass.h; TMVA/MovieMaker.h; TMVA/PlotFoams.h; TMVA/TMVAGui.h; TMVA/TMVAMultiClassGui.h; TMVA/TMVARegGui.h; TMVA/annconvergencetest.h; TMVA/compareanapp.h; TMVA/correlations.h; TMVA/correlationsMultiClass.h; TMVA/correlationscatters.h; TMVA/correlationscattersMultiClass.h; TMVA/deviations.h; TMVA/efficiencies.h; TMVA/efficienciesMulticlass.h; TMVA/likelihoodrefs.h; TMVA/mvaeffs.h; TMVA/mvas.h; TMVA/mvasMulticlass.h; TMVA/mvaweights.h; TMVA/network.h; TMVA/paracoor.h; TMVA/probas.h; TMVA/regression_averagedevs.h; TMVA/rulevis.h; TMVA/rulevisCorr.h; TMVA/rulevisHists.h; TMVA/tmvaglob.h; TMVA/training_history.h; TMVA/variables.h; TMVA/variablesMultiClass.h; SOURCES; src/BDTControlPlots.cxx; src/BoostControlPlots.cxx; src/CorrGui.cxx; src/CorrGuiMultiClass.cxx; src/MovieMaker.cxx; src/PlotFoams.cxx; src/TMVAGui.cxx; src/TMVAMultiClassGui.cxx; src/TMVARegGui.cxx; src/annconvergencetest.cxx; src/compareanapp.cxx; src/correlations.cxx; src/correlationsMultiClass.cxx; src/correlationscatters.cxx; src/correlationscattersMultiClass.cxx; src/deviations.cxx; src/efficiencies.cxx; src/efficienciesMulticlass.cxx; src/likelihoodrefs.cxx; src/mvas.cxx; src/mvasMulticlass.cxx; src/mvaweights.cxx; src/network.cxx; src/paracoor.cxx; src/regression_averagedevs.cxx; src/rulevis.cxx; src/rulevisCorr.cxx; src/rulevisHists.cxx; src/tmvaglob.cxx; src/training_history.cxx; src/variables.cxx; src/variablesMultiClass.cxx; src/BDT.cxx; src/BDT_Reg.cxx; src/probas.cxx; src/mvaeffs.cxx; DICTIONARY_OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; RIO; Hist; Tree; TreeViewer; MLP; Minuit; XMLIO; TMVA; Gui; HistPainter; Core; ${EXTRA_DICT_OPTS}; ); ",MatchSource.DOCS,tmva/tmvagui/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/CMakeLists.txt:2067,Modifiability,variab,variables,2067,"author Pere Mato, CERN; ############################################################################. set (EXTRA_DICT_OPTS); if (runtime_cxxmodules AND WIN32); set (EXTRA_DICT_OPTS NO_CXXMODULE); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(TMVAGui; HEADERS; TMVA/BDT.h; TMVA/BDTControlPlots.h; TMVA/BDT_Reg.h; TMVA/BoostControlPlots.h; TMVA/CorrGui.h; TMVA/CorrGuiMultiClass.h; TMVA/MovieMaker.h; TMVA/PlotFoams.h; TMVA/TMVAGui.h; TMVA/TMVAMultiClassGui.h; TMVA/TMVARegGui.h; TMVA/annconvergencetest.h; TMVA/compareanapp.h; TMVA/correlations.h; TMVA/correlationsMultiClass.h; TMVA/correlationscatters.h; TMVA/correlationscattersMultiClass.h; TMVA/deviations.h; TMVA/efficiencies.h; TMVA/efficienciesMulticlass.h; TMVA/likelihoodrefs.h; TMVA/mvaeffs.h; TMVA/mvas.h; TMVA/mvasMulticlass.h; TMVA/mvaweights.h; TMVA/network.h; TMVA/paracoor.h; TMVA/probas.h; TMVA/regression_averagedevs.h; TMVA/rulevis.h; TMVA/rulevisCorr.h; TMVA/rulevisHists.h; TMVA/tmvaglob.h; TMVA/training_history.h; TMVA/variables.h; TMVA/variablesMultiClass.h; SOURCES; src/BDTControlPlots.cxx; src/BoostControlPlots.cxx; src/CorrGui.cxx; src/CorrGuiMultiClass.cxx; src/MovieMaker.cxx; src/PlotFoams.cxx; src/TMVAGui.cxx; src/TMVAMultiClassGui.cxx; src/TMVARegGui.cxx; src/annconvergencetest.cxx; src/compareanapp.cxx; src/correlations.cxx; src/correlationsMultiClass.cxx; src/correlationscatters.cxx; src/correlationscattersMultiClass.cxx; src/deviations.cxx; src/efficiencies.cxx; src/efficienciesMulticlass.cxx; src/likelihoodrefs.cxx; src/mvas.cxx; src/mvasMulticlass.cxx; src/mvaweights.cxx; src/network.cxx; src/paracoor.cxx; src/regression_averagedevs.cxx; src/rulevis.cxx; src/rulevisCorr.cxx; src/rulevisHists.cxx; src/tmvaglob.cxx; src/training_history.cxx; src/variables.cxx; src/variablesMultiClass.cxx; src/BDT.cxx; src/BDT_Reg.cxx; src/probas.cxx; src/mvaeffs.cxx; DICTIONARY_OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; RIO; Hist; Tree; TreeViewer; MLP; Minuit; XMLIO; TMVA; Gui; HistPainter; Core; ${EXTRA_DICT_OPTS}; ); ",MatchSource.DOCS,tmva/tmvagui/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/CMakeLists.txt:2086,Modifiability,variab,variablesMultiClass,2086,"author Pere Mato, CERN; ############################################################################. set (EXTRA_DICT_OPTS); if (runtime_cxxmodules AND WIN32); set (EXTRA_DICT_OPTS NO_CXXMODULE); endif(). ROOT_STANDARD_LIBRARY_PACKAGE(TMVAGui; HEADERS; TMVA/BDT.h; TMVA/BDTControlPlots.h; TMVA/BDT_Reg.h; TMVA/BoostControlPlots.h; TMVA/CorrGui.h; TMVA/CorrGuiMultiClass.h; TMVA/MovieMaker.h; TMVA/PlotFoams.h; TMVA/TMVAGui.h; TMVA/TMVAMultiClassGui.h; TMVA/TMVARegGui.h; TMVA/annconvergencetest.h; TMVA/compareanapp.h; TMVA/correlations.h; TMVA/correlationsMultiClass.h; TMVA/correlationscatters.h; TMVA/correlationscattersMultiClass.h; TMVA/deviations.h; TMVA/efficiencies.h; TMVA/efficienciesMulticlass.h; TMVA/likelihoodrefs.h; TMVA/mvaeffs.h; TMVA/mvas.h; TMVA/mvasMulticlass.h; TMVA/mvaweights.h; TMVA/network.h; TMVA/paracoor.h; TMVA/probas.h; TMVA/regression_averagedevs.h; TMVA/rulevis.h; TMVA/rulevisCorr.h; TMVA/rulevisHists.h; TMVA/tmvaglob.h; TMVA/training_history.h; TMVA/variables.h; TMVA/variablesMultiClass.h; SOURCES; src/BDTControlPlots.cxx; src/BoostControlPlots.cxx; src/CorrGui.cxx; src/CorrGuiMultiClass.cxx; src/MovieMaker.cxx; src/PlotFoams.cxx; src/TMVAGui.cxx; src/TMVAMultiClassGui.cxx; src/TMVARegGui.cxx; src/annconvergencetest.cxx; src/compareanapp.cxx; src/correlations.cxx; src/correlationsMultiClass.cxx; src/correlationscatters.cxx; src/correlationscattersMultiClass.cxx; src/deviations.cxx; src/efficiencies.cxx; src/efficienciesMulticlass.cxx; src/likelihoodrefs.cxx; src/mvas.cxx; src/mvasMulticlass.cxx; src/mvaweights.cxx; src/network.cxx; src/paracoor.cxx; src/regression_averagedevs.cxx; src/rulevis.cxx; src/rulevisCorr.cxx; src/rulevisHists.cxx; src/tmvaglob.cxx; src/training_history.cxx; src/variables.cxx; src/variablesMultiClass.cxx; src/BDT.cxx; src/BDT_Reg.cxx; src/probas.cxx; src/mvaeffs.cxx; DICTIONARY_OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; RIO; Hist; Tree; TreeViewer; MLP; Minuit; XMLIO; TMVA; Gui; HistPainter; Core; ${EXTRA_DICT_OPTS}; ); ",MatchSource.DOCS,tmva/tmvagui/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:2219,Availability,avail,available,2219,stPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch:,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:1399,Integrability,DEPEND,DEPENDS,1399,###################################################. project(pymva-tests). set(Libraries Core MathCore TMVA PyMVA ROOTTMVASofie). # Look for needed python modules; find_python_module(torch QUIET); find_python_module(keras QUIET); find_python_module(theano QUIET); find_python_module(tensorflow QUIET); find_python_module(sklearn QUIET). if(PY_SKLEARN_FOUND); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); conf,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:1632,Integrability,DEPEND,DEPENDS,1632,python_module(theano QUIET); find_python_module(tensorflow QUIET); find_python_module(sklearn QUIET). if(PY_SKLEARN_FOUND); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyT,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:1890,Integrability,DEPEND,DEPENDS,1890,; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(t,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:2139,Integrability,DEPEND,DEPENDS,2139,RIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testP,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:2724,Integrability,depend,depends,2724,testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LI,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:2791,Integrability,depend,depends,2791,testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LI,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:3007,Integrability,DEPEND,DEPENDS,3007,ECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:3044,Integrability,depend,depends,3044,ECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:3439,Integrability,DEPEND,DEPENDS,3439,py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classif,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:3472,Integrability,depend,depends,3472,py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classif,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:4079,Integrability,depend,depends,4079,ression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(testPyKerasRegression testPyKerasRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Regression COMMAND testPyKerasRegression DEPENDS ${PyMVA-Keras-Regression-depends}); endif(). # Test PyKeras: Multi-class classification; ROOT_EXECUTABLE(testPyKerasMulticlass testPyKerasMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Multiclass COMMAND testPyKerasMulticlass DEPENDS ${PyMVA-Keras-Multiclass-depends}). ROOT_ADD_GTEST(TestRMod,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:4143,Integrability,depend,depends,4143,ression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(testPyKerasRegression testPyKerasRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Regression COMMAND testPyKerasRegression DEPENDS ${PyMVA-Keras-Regression-depends}); endif(). # Test PyKeras: Multi-class classification; ROOT_EXECUTABLE(testPyKerasMulticlass testPyKerasMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Multiclass COMMAND testPyKerasMulticlass DEPENDS ${PyMVA-Keras-Multiclass-depends}). ROOT_ADD_GTEST(TestRMod,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:4203,Integrability,depend,depends,4203,ression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(testPyKerasRegression testPyKerasRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Regression COMMAND testPyKerasRegression DEPENDS ${PyMVA-Keras-Regression-depends}); endif(). # Test PyKeras: Multi-class classification; ROOT_EXECUTABLE(testPyKerasMulticlass testPyKerasMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Multiclass COMMAND testPyKerasMulticlass DEPENDS ${PyMVA-Keras-Multiclass-depends}). ROOT_ADD_GTEST(TestRMod,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:4455,Integrability,DEPEND,DEPENDS,4455,hMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(testPyKerasRegression testPyKerasRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Regression COMMAND testPyKerasRegression DEPENDS ${PyMVA-Keras-Regression-depends}); endif(). # Test PyKeras: Multi-class classification; ROOT_EXECUTABLE(testPyKerasMulticlass testPyKerasMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Multiclass COMMAND testPyKerasMulticlass DEPENDS ${PyMVA-Keras-Multiclass-depends}). ROOT_ADD_GTEST(TestRModelParserKeras TestRModelParserKeras.C; LIBRARIES; ROOTTMVASofie; PyMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserKeras ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (P,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:4492,Integrability,depend,depends,4492,hMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(testPyKerasRegression testPyKerasRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Regression COMMAND testPyKerasRegression DEPENDS ${PyMVA-Keras-Regression-depends}); endif(). # Test PyKeras: Multi-class classification; ROOT_EXECUTABLE(testPyKerasMulticlass testPyKerasMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Multiclass COMMAND testPyKerasMulticlass DEPENDS ${PyMVA-Keras-Multiclass-depends}). ROOT_ADD_GTEST(TestRModelParserKeras TestRModelParserKeras.C; LIBRARIES; ROOTTMVASofie; PyMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserKeras ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (P,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:4816,Integrability,DEPEND,DEPENDS,4816,ass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(testPyKerasRegression testPyKerasRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Regression COMMAND testPyKerasRegression DEPENDS ${PyMVA-Keras-Regression-depends}); endif(). # Test PyKeras: Multi-class classification; ROOT_EXECUTABLE(testPyKerasMulticlass testPyKerasMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Multiclass COMMAND testPyKerasMulticlass DEPENDS ${PyMVA-Keras-Multiclass-depends}). ROOT_ADD_GTEST(TestRModelParserKeras TestRModelParserKeras.C; LIBRARIES; ROOTTMVASofie; PyMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserKeras ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); ,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:4849,Integrability,depend,depends,4849,ass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(testPyKerasRegression testPyKerasRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Regression COMMAND testPyKerasRegression DEPENDS ${PyMVA-Keras-Regression-depends}); endif(). # Test PyKeras: Multi-class classification; ROOT_EXECUTABLE(testPyKerasMulticlass testPyKerasMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Multiclass COMMAND testPyKerasMulticlass DEPENDS ${PyMVA-Keras-Multiclass-depends}). ROOT_ADD_GTEST(TestRModelParserKeras TestRModelParserKeras.C; LIBRARIES; ROOTTMVASofie; PyMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserKeras ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); ,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:5068,Integrability,DEPEND,DEPENDS,5068,ass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(testPyKerasRegression testPyKerasRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Regression COMMAND testPyKerasRegression DEPENDS ${PyMVA-Keras-Regression-depends}); endif(). # Test PyKeras: Multi-class classification; ROOT_EXECUTABLE(testPyKerasMulticlass testPyKerasMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Multiclass COMMAND testPyKerasMulticlass DEPENDS ${PyMVA-Keras-Multiclass-depends}). ROOT_ADD_GTEST(TestRModelParserKeras TestRModelParserKeras.C; LIBRARIES; ROOTTMVASofie; PyMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserKeras ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); ,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:5101,Integrability,depend,depends,5101,ass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(testPyKerasRegression testPyKerasRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Regression COMMAND testPyKerasRegression DEPENDS ${PyMVA-Keras-Regression-depends}); endif(). # Test PyKeras: Multi-class classification; ROOT_EXECUTABLE(testPyKerasMulticlass testPyKerasMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Multiclass COMMAND testPyKerasMulticlass DEPENDS ${PyMVA-Keras-Multiclass-depends}). ROOT_ADD_GTEST(TestRModelParserKeras TestRModelParserKeras.C; LIBRARIES; ROOTTMVASofie; PyMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserKeras ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); ,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:314,Testability,test,tests,314,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building PyMVA tests; # @author Stefan Wunsch; ############################################################################. project(pymva-tests). set(Libraries Core MathCore TMVA PyMVA ROOTTMVASofie). # Look for needed python modules; find_python_module(torch QUIET); find_python_module(keras QUIET); find_python_module(theano QUIET); find_python_module(tensorflow QUIET); find_python_module(sklearn QUIET). if(PY_SKLEARN_FOUND); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoos",MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:438,Testability,test,tests,438,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building PyMVA tests; # @author Stefan Wunsch; ############################################################################. project(pymva-tests). set(Libraries Core MathCore TMVA PyMVA ROOTTMVASofie). # Look for needed python modules; find_python_module(torch QUIET); find_python_module(keras QUIET); find_python_module(theano QUIET); find_python_module(tensorflow QUIET); find_python_module(sklearn QUIET). if(PY_SKLEARN_FOUND); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoos",MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:732,Testability,Test,Test,732,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building PyMVA tests; # @author Stefan Wunsch; ############################################################################. project(pymva-tests). set(Libraries Core MathCore TMVA PyMVA ROOTTMVASofie). # Look for needed python modules; find_python_module(torch QUIET); find_python_module(keras QUIET); find_python_module(theano QUIET); find_python_module(tensorflow QUIET); find_python_module(sklearn QUIET). if(PY_SKLEARN_FOUND); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoos",MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:785,Testability,test,testPyRandomForestClassification,785,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building PyMVA tests; # @author Stefan Wunsch; ############################################################################. project(pymva-tests). set(Libraries Core MathCore TMVA PyMVA ROOTTMVASofie). # Look for needed python modules; find_python_module(torch QUIET); find_python_module(keras QUIET); find_python_module(theano QUIET); find_python_module(tensorflow QUIET); find_python_module(sklearn QUIET). if(PY_SKLEARN_FOUND); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoos",MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:818,Testability,test,testPyRandomForestClassification,818,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building PyMVA tests; # @author Stefan Wunsch; ############################################################################. project(pymva-tests). set(Libraries Core MathCore TMVA PyMVA ROOTTMVASofie). # Look for needed python modules; find_python_module(torch QUIET); find_python_module(keras QUIET); find_python_module(theano QUIET); find_python_module(tensorflow QUIET); find_python_module(sklearn QUIET). if(PY_SKLEARN_FOUND); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoos",MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:935,Testability,test,testPyRandomForestClassification,935,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building PyMVA tests; # @author Stefan Wunsch; ############################################################################. project(pymva-tests). set(Libraries Core MathCore TMVA PyMVA ROOTTMVASofie). # Look for needed python modules; find_python_module(torch QUIET); find_python_module(keras QUIET); find_python_module(theano QUIET); find_python_module(tensorflow QUIET); find_python_module(sklearn QUIET). if(PY_SKLEARN_FOUND); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoos",MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:972,Testability,Test,Test,972,Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building PyMVA tests; # @author Stefan Wunsch; ############################################################################. project(pymva-tests). set(Libraries Core MathCore TMVA PyMVA ROOTTMVASofie). # Look for needed python modules; find_python_module(torch QUIET); find_python_module(keras QUIET); find_python_module(theano QUIET); find_python_module(tensorflow QUIET); find_python_module(sklearn QUIET). if(PY_SKLEARN_FOUND); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulti,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:1037,Testability,test,testPyRandomForestMulticlass,1037,Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building PyMVA tests; # @author Stefan Wunsch; ############################################################################. project(pymva-tests). set(Libraries Core MathCore TMVA PyMVA ROOTTMVASofie). # Look for needed python modules; find_python_module(torch QUIET); find_python_module(keras QUIET); find_python_module(theano QUIET); find_python_module(tensorflow QUIET); find_python_module(sklearn QUIET). if(PY_SKLEARN_FOUND); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulti,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:1066,Testability,test,testPyRandomForestMulticlass,1066,Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building PyMVA tests; # @author Stefan Wunsch; ############################################################################. project(pymva-tests). set(Libraries Core MathCore TMVA PyMVA ROOTTMVASofie). # Look for needed python modules; find_python_module(torch QUIET); find_python_module(keras QUIET); find_python_module(theano QUIET); find_python_module(tensorflow QUIET); find_python_module(sklearn QUIET). if(PY_SKLEARN_FOUND); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulti,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:1175,Testability,test,testPyRandomForestMulticlass,1175,of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building PyMVA tests; # @author Stefan Wunsch; ############################################################################. project(pymva-tests). set(Libraries Core MathCore TMVA PyMVA ROOTTMVASofie). # Look for needed python modules; find_python_module(torch QUIET); find_python_module(keras QUIET); find_python_module(theano QUIET); find_python_module(tensorflow QUIET); find_python_module(sklearn QUIET). if(PY_SKLEARN_FOUND); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyM,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:1208,Testability,Test,Test,1208,###################; # CMakeLists.txt file for building PyMVA tests; # @author Stefan Wunsch; ############################################################################. project(pymva-tests). set(Libraries Core MathCore TMVA PyMVA ROOTTMVASofie). # Look for needed python modules; find_python_module(torch QUIET); find_python_module(keras QUIET); find_python_module(theano QUIET); find_python_module(tensorflow QUIET); find_python_module(sklearn QUIET). if(PY_SKLEARN_FOUND); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TO,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:1252,Testability,test,testPyGTBClassification,1252,###################; # CMakeLists.txt file for building PyMVA tests; # @author Stefan Wunsch; ############################################################################. project(pymva-tests). set(Libraries Core MathCore TMVA PyMVA ROOTTMVASofie). # Look for needed python modules; find_python_module(torch QUIET); find_python_module(keras QUIET); find_python_module(theano QUIET); find_python_module(tensorflow QUIET); find_python_module(sklearn QUIET). if(PY_SKLEARN_FOUND); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TO,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:1276,Testability,test,testPyGTBClassification,1276,###################; # CMakeLists.txt file for building PyMVA tests; # @author Stefan Wunsch; ############################################################################. project(pymva-tests). set(Libraries Core MathCore TMVA PyMVA ROOTTMVASofie). # Look for needed python modules; find_python_module(torch QUIET); find_python_module(keras QUIET); find_python_module(theano QUIET); find_python_module(tensorflow QUIET); find_python_module(sklearn QUIET). if(PY_SKLEARN_FOUND); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TO,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:1375,Testability,test,testPyGTBClassification,1375,###################################################. project(pymva-tests). set(Libraries Core MathCore TMVA PyMVA ROOTTMVASofie). # Look for needed python modules; find_python_module(torch QUIET); find_python_module(keras QUIET); find_python_module(theano QUIET); find_python_module(tensorflow QUIET); find_python_module(sklearn QUIET). if(PY_SKLEARN_FOUND); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); conf,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:1445,Testability,Test,Test,1445,VASofie). # Look for needed python modules; find_python_module(torch QUIET); find_python_module(keras QUIET); find_python_module(theano QUIET); find_python_module(tensorflow QUIET); find_python_module(sklearn QUIET). if(PY_SKLEARN_FOUND); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchM,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:1501,Testability,test,testPyGTBMulticlass,1501,VASofie). # Look for needed python modules; find_python_module(torch QUIET); find_python_module(keras QUIET); find_python_module(theano QUIET); find_python_module(tensorflow QUIET); find_python_module(sklearn QUIET). if(PY_SKLEARN_FOUND); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchM,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:1521,Testability,test,testPyGTBMulticlass,1521,VASofie). # Look for needed python modules; find_python_module(torch QUIET); find_python_module(keras QUIET); find_python_module(theano QUIET); find_python_module(tensorflow QUIET); find_python_module(sklearn QUIET). if(PY_SKLEARN_FOUND); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchM,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:1612,Testability,test,testPyGTBMulticlass,1612,python_module(theano QUIET); find_python_module(tensorflow QUIET); find_python_module(sklearn QUIET). if(PY_SKLEARN_FOUND); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyT,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:1674,Testability,Test,Test,1674,D); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-de,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:1723,Testability,test,testPyAdaBoostClassification,1723,D); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-de,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:1752,Testability,test,testPyAdaBoostClassification,1752,D); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-de,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:1861,Testability,test,testPyAdaBoostClassification,1861,; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(t,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:1927,Testability,Test,Test,1927,ndomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND ,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:1988,Testability,test,testPyAdaBoostMulticlass,1988,ndomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND ,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:2013,Testability,test,testPyAdaBoostMulticlass,2013,ndomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND ,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:2114,Testability,test,testPyAdaBoostMulticlass,2114,RIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testP,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:2204,Testability,test,tests,2204,stPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch:,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:2633,Testability,Test,Test,2633,VA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; ,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:2852,Testability,test,testPyTorchClassification,2852,aBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND ,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:2878,Testability,test,testPyTorchClassification,2878,aBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND ,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:2981,Testability,test,testPyTorchClassification,2981,ECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:3057,Testability,Test,Test,3057,ticlass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:3099,Testability,test,testPyTorchRegression,3099,ticlass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:3121,Testability,test,testPyTorchRegression,3121,ticlass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:3216,Testability,test,testPyTorchRegression,3216,D). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:3242,Testability,Test,Test,3242,orchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXE,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:3300,Testability,test,testPyTorchMulticlass,3300,orchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXE,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:3322,Testability,test,testPyTorchMulticlass,3322,orchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXE,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:3417,Testability,test,testPyTorchMulticlass,3417,py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classif,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:3485,Testability,Test,Test,3485,Regression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depen,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:3527,Testability,Test,TestRModelParserPyTorch,3527, COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:3551,Testability,Test,TestRModelParserPyTorch,3551, COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:3719,Testability,Test,TestRModelParserPyTorch,3719,LEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(te,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:4247,Testability,Test,Test,4247,E(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(testPyKerasRegression testPyKerasRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Regression COMMAND testPyKerasRegression DEPENDS ${PyMVA-Keras-Regression-depends}); endif(). # Test PyKeras: Multi-class classification; ROOT_EXECUTABLE(testPyKerasMulticlass testPyKerasMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Multiclass COMMAND testPyKerasMulticlass DEPENDS ${PyMVA-Keras-Multiclass-depends}). ROOT_ADD_GTEST(TestRModelParserKeras TestRModelParserKeras.C; LIBRARIES; ROOTTMVASofie; PyMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); targ,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:4300,Testability,test,testPyKerasClassification,4300,E(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(testPyKerasRegression testPyKerasRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Regression COMMAND testPyKerasRegression DEPENDS ${PyMVA-Keras-Regression-depends}); endif(). # Test PyKeras: Multi-class classification; ROOT_EXECUTABLE(testPyKerasMulticlass testPyKerasMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Multiclass COMMAND testPyKerasMulticlass DEPENDS ${PyMVA-Keras-Multiclass-depends}). ROOT_ADD_GTEST(TestRModelParserKeras TestRModelParserKeras.C; LIBRARIES; ROOTTMVASofie; PyMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); targ,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:4326,Testability,test,testPyKerasClassification,4326,E(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(testPyKerasRegression testPyKerasRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Regression COMMAND testPyKerasRegression DEPENDS ${PyMVA-Keras-Regression-depends}); endif(). # Test PyKeras: Multi-class classification; ROOT_EXECUTABLE(testPyKerasMulticlass testPyKerasMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Multiclass COMMAND testPyKerasMulticlass DEPENDS ${PyMVA-Keras-Multiclass-depends}). ROOT_ADD_GTEST(TestRModelParserKeras TestRModelParserKeras.C; LIBRARIES; ROOTTMVASofie; PyMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); targ,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:4429,Testability,test,testPyKerasClassification,4429,hMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(testPyKerasRegression testPyKerasRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Regression COMMAND testPyKerasRegression DEPENDS ${PyMVA-Keras-Regression-depends}); endif(). # Test PyKeras: Multi-class classification; ROOT_EXECUTABLE(testPyKerasMulticlass testPyKerasMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Multiclass COMMAND testPyKerasMulticlass DEPENDS ${PyMVA-Keras-Multiclass-depends}). ROOT_ADD_GTEST(TestRModelParserKeras TestRModelParserKeras.C; LIBRARIES; ROOTTMVASofie; PyMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserKeras ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (P,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:4505,Testability,Test,Test,4505,ass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(testPyKerasRegression testPyKerasRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Regression COMMAND testPyKerasRegression DEPENDS ${PyMVA-Keras-Regression-depends}); endif(). # Test PyKeras: Multi-class classification; ROOT_EXECUTABLE(testPyKerasMulticlass testPyKerasMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Multiclass COMMAND testPyKerasMulticlass DEPENDS ${PyMVA-Keras-Multiclass-depends}). ROOT_ADD_GTEST(TestRModelParserKeras TestRModelParserKeras.C; LIBRARIES; ROOTTMVASofie; PyMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserKeras ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); ,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:4677,Testability,test,testPyKerasRegression,4677,ass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(testPyKerasRegression testPyKerasRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Regression COMMAND testPyKerasRegression DEPENDS ${PyMVA-Keras-Regression-depends}); endif(). # Test PyKeras: Multi-class classification; ROOT_EXECUTABLE(testPyKerasMulticlass testPyKerasMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Multiclass COMMAND testPyKerasMulticlass DEPENDS ${PyMVA-Keras-Multiclass-depends}). ROOT_ADD_GTEST(TestRModelParserKeras TestRModelParserKeras.C; LIBRARIES; ROOTTMVASofie; PyMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserKeras ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); ,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:4699,Testability,test,testPyKerasRegression,4699,ass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(testPyKerasRegression testPyKerasRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Regression COMMAND testPyKerasRegression DEPENDS ${PyMVA-Keras-Regression-depends}); endif(). # Test PyKeras: Multi-class classification; ROOT_EXECUTABLE(testPyKerasMulticlass testPyKerasMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Multiclass COMMAND testPyKerasMulticlass DEPENDS ${PyMVA-Keras-Multiclass-depends}). ROOT_ADD_GTEST(TestRModelParserKeras TestRModelParserKeras.C; LIBRARIES; ROOTTMVASofie; PyMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserKeras ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); ,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:4794,Testability,test,testPyKerasRegression,4794,ass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(testPyKerasRegression testPyKerasRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Regression COMMAND testPyKerasRegression DEPENDS ${PyMVA-Keras-Regression-depends}); endif(). # Test PyKeras: Multi-class classification; ROOT_EXECUTABLE(testPyKerasMulticlass testPyKerasMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Multiclass COMMAND testPyKerasMulticlass DEPENDS ${PyMVA-Keras-Multiclass-depends}). ROOT_ADD_GTEST(TestRModelParserKeras TestRModelParserKeras.C; LIBRARIES; ROOTTMVASofie; PyMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserKeras ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); ,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:4871,Testability,Test,Test,4871,ass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(testPyKerasRegression testPyKerasRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Regression COMMAND testPyKerasRegression DEPENDS ${PyMVA-Keras-Regression-depends}); endif(). # Test PyKeras: Multi-class classification; ROOT_EXECUTABLE(testPyKerasMulticlass testPyKerasMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Multiclass COMMAND testPyKerasMulticlass DEPENDS ${PyMVA-Keras-Multiclass-depends}). ROOT_ADD_GTEST(TestRModelParserKeras TestRModelParserKeras.C; LIBRARIES; ROOTTMVASofie; PyMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserKeras ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); ,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:4929,Testability,test,testPyKerasMulticlass,4929,ass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(testPyKerasRegression testPyKerasRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Regression COMMAND testPyKerasRegression DEPENDS ${PyMVA-Keras-Regression-depends}); endif(). # Test PyKeras: Multi-class classification; ROOT_EXECUTABLE(testPyKerasMulticlass testPyKerasMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Multiclass COMMAND testPyKerasMulticlass DEPENDS ${PyMVA-Keras-Multiclass-depends}). ROOT_ADD_GTEST(TestRModelParserKeras TestRModelParserKeras.C; LIBRARIES; ROOTTMVASofie; PyMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserKeras ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); ,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:4951,Testability,test,testPyKerasMulticlass,4951,ass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(testPyKerasRegression testPyKerasRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Regression COMMAND testPyKerasRegression DEPENDS ${PyMVA-Keras-Regression-depends}); endif(). # Test PyKeras: Multi-class classification; ROOT_EXECUTABLE(testPyKerasMulticlass testPyKerasMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Multiclass COMMAND testPyKerasMulticlass DEPENDS ${PyMVA-Keras-Multiclass-depends}). ROOT_ADD_GTEST(TestRModelParserKeras TestRModelParserKeras.C; LIBRARIES; ROOTTMVASofie; PyMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserKeras ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); ,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:5046,Testability,test,testPyKerasMulticlass,5046,ass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(testPyKerasRegression testPyKerasRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Regression COMMAND testPyKerasRegression DEPENDS ${PyMVA-Keras-Regression-depends}); endif(). # Test PyKeras: Multi-class classification; ROOT_EXECUTABLE(testPyKerasMulticlass testPyKerasMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Multiclass COMMAND testPyKerasMulticlass DEPENDS ${PyMVA-Keras-Multiclass-depends}). ROOT_ADD_GTEST(TestRModelParserKeras TestRModelParserKeras.C; LIBRARIES; ROOTTMVASofie; PyMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserKeras ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); ,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:5127,Testability,Test,TestRModelParserKeras,5127,ass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(testPyKerasRegression testPyKerasRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Regression COMMAND testPyKerasRegression DEPENDS ${PyMVA-Keras-Regression-depends}); endif(). # Test PyKeras: Multi-class classification; ROOT_EXECUTABLE(testPyKerasMulticlass testPyKerasMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Multiclass COMMAND testPyKerasMulticlass DEPENDS ${PyMVA-Keras-Multiclass-depends}). ROOT_ADD_GTEST(TestRModelParserKeras TestRModelParserKeras.C; LIBRARIES; ROOTTMVASofie; PyMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserKeras ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); ,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:5149,Testability,Test,TestRModelParserKeras,5149,ass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(testPyKerasRegression testPyKerasRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Regression COMMAND testPyKerasRegression DEPENDS ${PyMVA-Keras-Regression-depends}); endif(). # Test PyKeras: Multi-class classification; ROOT_EXECUTABLE(testPyKerasMulticlass testPyKerasMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Multiclass COMMAND testPyKerasMulticlass DEPENDS ${PyMVA-Keras-Multiclass-depends}). ROOT_ADD_GTEST(TestRModelParserKeras TestRModelParserKeras.C; LIBRARIES; ROOTTMVASofie; PyMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserKeras ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); ,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:5316,Testability,Test,TestRModelParserKeras,5316,ass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(testPyKerasRegression testPyKerasRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Regression COMMAND testPyKerasRegression DEPENDS ${PyMVA-Keras-Regression-depends}); endif(). # Test PyKeras: Multi-class classification; ROOT_EXECUTABLE(testPyKerasMulticlass testPyKerasMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Multiclass COMMAND testPyKerasMulticlass DEPENDS ${PyMVA-Keras-Multiclass-depends}). ROOT_ADD_GTEST(TestRModelParserKeras TestRModelParserKeras.C; LIBRARIES; ROOTTMVASofie; PyMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserKeras ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); ,MatchSource.DOCS,tmva/pymva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/CMakeLists.txt:3530,Integrability,depend,dependency,3530,LIBRARIES; ROOTTMVASofie; ${BLAS_LINKER_FLAGS}; ${BLAS_LIBRARIES}; INCLUDE_DIRS; ${CMAKE_CURRENT_BINARY_DIR}; ). add_dependencies(TestCustomModelsFromONNX SofieCompileModels_ONNX); endif(). #For testing serialisation of RModel object. add_executable(emitFromROOT; EmitFromRoot_all.cxx; ); target_include_directories(emitFromROOT PRIVATE; ${CMAKE_SOURCE_DIR}/tmva/sofie/inc; ${SOFIE_PARSERS_DIR}/inc; ${CMAKE_SOURCE_DIR}/tmva/inc; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(emitFromROOT protobuf::libprotobuf ROOTTMVASofie ROOTTMVASofieParser); set_target_properties(emitFromROOT PROPERTIES POSITION_INDEPENDENT_CODE TRUE); ## silence protobuf warnings seen in version 3.0 and 3.6. Not needed from protobuf version 3.17; target_compile_options(emitFromROOT PRIVATE -Wno-unused-parameter -Wno-array-bounds). # Automatic compilation of headers from root files; add_custom_target(SofieCompileModels_ROOT); # onepcm or modules dependency is needed for using ROOT I/O when converting a model in a ROOT file; if (runtime_cxxmodules); add_dependencies(SofieCompileModels_ROOT emitFromROOT modules_idx); else(); add_dependencies(SofieCompileModels_ROOT emitFromROOT onepcm); endif(). add_custom_command(TARGET SofieCompileModels_ROOT POST_BUILD; COMMAND ${CMAKE_COMMAND} -E env ROOTIGNOREPREFIX=1 ./emitFromROOT; 		USES_TERMINAL ). # Creating a Google Test for Serialisation of RModel; if (tmva-cpu); ROOT_ADD_GTEST(TestCustomModelsFromROOT TestCustomModelsFromROOT.cxx; LIBRARIES; ROOTTMVASofie; ${BLAS_LINKER_FLAGS}; ${BLAS_LIBRARIES}; INCLUDE_DIRS; ${CMAKE_CURRENT_BINARY_DIR}; ); add_dependencies(TestCustomModelsFromROOT SofieCompileModels_ROOT); endif(). # gtest; # Look for needed python modules; find_python_module(torch QUIET); if(PY_TORCH_FOUND); configure_file(Conv1dModelGenerator.py Conv1dModelGenerator.py COPYONLY); configure_file(Conv2dModelGenerator.py Conv2dModelGenerator.py COPYONLY); configure_file(Conv3dModelGenerator.py Conv3dModelGenerator.py COPYONLY); configure_file(ConvT,MatchSource.DOCS,tmva/sofie/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/CMakeLists.txt:752,Safety,avoid,avoid,752,"# Copyright (C) 1995-2021, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA SOFIE tests.; # @author Federico Sossai, Sanjiban Sengupta; ############################################################################. set(SOFIE_PARSERS_DIR ${CMAKE_SOURCE_DIR}/tmva/sofie_parsers). if (NOT ONNX_MODELS_DIR); set(ONNX_MODELS_DIR input_models); endif(). #Finding .onnx files to be parsed and creating the appropriate code to; # parse all file. It is much faster to combine all parsing in a single executable; # which will avoid initialization time (especially when using ROOT); set(CAPTURE_STR ""EmitModel( \""@1\"", \""@2\"");""); set(ALL_CAPTURES """"); # Finding .onnx files to be parsed and creating the appropriate command; file(GLOB ONNX_FILES ""${ONNX_MODELS_DIR}/*.onnx""); foreach(onnx_file ${ONNX_FILES}); 	get_filename_component(fname ${onnx_file} NAME_WE); 	get_filename_component(fdir ${onnx_file} DIRECTORY); string(REPLACE ""@1"" ${onnx_file} cap ${CAPTURE_STR}); string(REPLACE ""@2"" ${fname} cap ${cap}); list(APPEND ALL_CAPTURES ${cap}); endforeach(); string(REPLACE "";"" "";\n"" EMIT_CAPTURES ""${ALL_CAPTURES}""); configure_file(EmitFromONNX.cxx.in EmitFromONNX_all.cxx @ONLY); configure_file(EmitFromRoot.cxx.in EmitFromRoot_all.cxx @ONLY). add_executable(emitFromONNX; EmitFromONNX_all.cxx; ); target_include_directories(emitFromONNX PRIVATE; ${CMAKE_SOURCE_DIR}/tmva/sofie/inc; ${SOFIE_PARSERS_DIR}/inc; ${CMAKE_SOURCE_DIR}/tmva/inc; ${CMAKE_CURRENT_BINARY_DIR} # this is for the protobuf headerfile; ). target_link_libraries(emitFromONNX protobuf::libprotobuf ROOTTMVASofie ROOTTMVASofieParser); set_target_properties(emitFromONNX PROPERTIES POSITION_INDEPENDENT_CODE TRUE); ## silence protobuf warnings seen in version 3.0 and 3.6. Not needed from protobuf version",MatchSource.DOCS,tmva/sofie/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/CMakeLists.txt:319,Testability,test,tests,319,"# Copyright (C) 1995-2021, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA SOFIE tests.; # @author Federico Sossai, Sanjiban Sengupta; ############################################################################. set(SOFIE_PARSERS_DIR ${CMAKE_SOURCE_DIR}/tmva/sofie_parsers). if (NOT ONNX_MODELS_DIR); set(ONNX_MODELS_DIR input_models); endif(). #Finding .onnx files to be parsed and creating the appropriate code to; # parse all file. It is much faster to combine all parsing in a single executable; # which will avoid initialization time (especially when using ROOT); set(CAPTURE_STR ""EmitModel( \""@1\"", \""@2\"");""); set(ALL_CAPTURES """"); # Finding .onnx files to be parsed and creating the appropriate command; file(GLOB ONNX_FILES ""${ONNX_MODELS_DIR}/*.onnx""); foreach(onnx_file ${ONNX_FILES}); 	get_filename_component(fname ${onnx_file} NAME_WE); 	get_filename_component(fdir ${onnx_file} DIRECTORY); string(REPLACE ""@1"" ${onnx_file} cap ${CAPTURE_STR}); string(REPLACE ""@2"" ${fname} cap ${cap}); list(APPEND ALL_CAPTURES ${cap}); endforeach(); string(REPLACE "";"" "";\n"" EMIT_CAPTURES ""${ALL_CAPTURES}""); configure_file(EmitFromONNX.cxx.in EmitFromONNX_all.cxx @ONLY); configure_file(EmitFromRoot.cxx.in EmitFromRoot_all.cxx @ONLY). add_executable(emitFromONNX; EmitFromONNX_all.cxx; ); target_include_directories(emitFromONNX PRIVATE; ${CMAKE_SOURCE_DIR}/tmva/sofie/inc; ${SOFIE_PARSERS_DIR}/inc; ${CMAKE_SOURCE_DIR}/tmva/inc; ${CMAKE_CURRENT_BINARY_DIR} # this is for the protobuf headerfile; ). target_link_libraries(emitFromONNX protobuf::libprotobuf ROOTTMVASofie ROOTTMVASofieParser); set_target_properties(emitFromONNX PROPERTIES POSITION_INDEPENDENT_CODE TRUE); ## silence protobuf warnings seen in version 3.0 and 3.6. Not needed from protobuf version",MatchSource.DOCS,tmva/sofie/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/CMakeLists.txt:2466,Testability,Test,Test,2466,l.cxx; ); target_include_directories(emitFromONNX PRIVATE; ${CMAKE_SOURCE_DIR}/tmva/sofie/inc; ${SOFIE_PARSERS_DIR}/inc; ${CMAKE_SOURCE_DIR}/tmva/inc; ${CMAKE_CURRENT_BINARY_DIR} # this is for the protobuf headerfile; ). target_link_libraries(emitFromONNX protobuf::libprotobuf ROOTTMVASofie ROOTTMVASofieParser); set_target_properties(emitFromONNX PROPERTIES POSITION_INDEPENDENT_CODE TRUE); ## silence protobuf warnings seen in version 3.0 and 3.6. Not needed from protobuf version 3.17; target_compile_options(emitFromONNX PRIVATE -Wno-unused-parameter -Wno-array-bounds). # Automatic compilation of headers from onnx files; add_custom_target(SofieCompileModels_ONNX); add_dependencies(SofieCompileModels_ONNX emitFromONNX). add_custom_command(TARGET SofieCompileModels_ONNX POST_BUILD; 		COMMAND ${CMAKE_COMMAND} -E env ROOTIGNOREPREFIX=1 ./emitFromONNX ${onnx_file} ${CMAKE_CURRENT_BINARY_DIR}/${fname}; 		USES_TERMINAL ). # Creating a Google Test; if (tmva-cpu) # we need BLAS for compiling the models; ROOT_ADD_GTEST(TestCustomModelsFromONNX TestCustomModelsFromONNX.cxx; LIBRARIES; ROOTTMVASofie; ${BLAS_LINKER_FLAGS}; ${BLAS_LIBRARIES}; INCLUDE_DIRS; ${CMAKE_CURRENT_BINARY_DIR}; ). add_dependencies(TestCustomModelsFromONNX SofieCompileModels_ONNX); endif(). #For testing serialisation of RModel object. add_executable(emitFromROOT; EmitFromRoot_all.cxx; ); target_include_directories(emitFromROOT PRIVATE; ${CMAKE_SOURCE_DIR}/tmva/sofie/inc; ${SOFIE_PARSERS_DIR}/inc; ${CMAKE_SOURCE_DIR}/tmva/inc; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(emitFromROOT protobuf::libprotobuf ROOTTMVASofie ROOTTMVASofieParser); set_target_properties(emitFromROOT PROPERTIES POSITION_INDEPENDENT_CODE TRUE); ## silence protobuf warnings seen in version 3.0 and 3.6. Not needed from protobuf version 3.17; target_compile_options(emitFromROOT PRIVATE -Wno-unused-parameter -Wno-array-bounds). # Automatic compilation of headers from root files; add_custom_target(SofieCompileModels_ROOT); # onepcm ,MatchSource.DOCS,tmva/sofie/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/CMakeLists.txt:2542,Testability,Test,TestCustomModelsFromONNX,2542,l.cxx; ); target_include_directories(emitFromONNX PRIVATE; ${CMAKE_SOURCE_DIR}/tmva/sofie/inc; ${SOFIE_PARSERS_DIR}/inc; ${CMAKE_SOURCE_DIR}/tmva/inc; ${CMAKE_CURRENT_BINARY_DIR} # this is for the protobuf headerfile; ). target_link_libraries(emitFromONNX protobuf::libprotobuf ROOTTMVASofie ROOTTMVASofieParser); set_target_properties(emitFromONNX PROPERTIES POSITION_INDEPENDENT_CODE TRUE); ## silence protobuf warnings seen in version 3.0 and 3.6. Not needed from protobuf version 3.17; target_compile_options(emitFromONNX PRIVATE -Wno-unused-parameter -Wno-array-bounds). # Automatic compilation of headers from onnx files; add_custom_target(SofieCompileModels_ONNX); add_dependencies(SofieCompileModels_ONNX emitFromONNX). add_custom_command(TARGET SofieCompileModels_ONNX POST_BUILD; 		COMMAND ${CMAKE_COMMAND} -E env ROOTIGNOREPREFIX=1 ./emitFromONNX ${onnx_file} ${CMAKE_CURRENT_BINARY_DIR}/${fname}; 		USES_TERMINAL ). # Creating a Google Test; if (tmva-cpu) # we need BLAS for compiling the models; ROOT_ADD_GTEST(TestCustomModelsFromONNX TestCustomModelsFromONNX.cxx; LIBRARIES; ROOTTMVASofie; ${BLAS_LINKER_FLAGS}; ${BLAS_LIBRARIES}; INCLUDE_DIRS; ${CMAKE_CURRENT_BINARY_DIR}; ). add_dependencies(TestCustomModelsFromONNX SofieCompileModels_ONNX); endif(). #For testing serialisation of RModel object. add_executable(emitFromROOT; EmitFromRoot_all.cxx; ); target_include_directories(emitFromROOT PRIVATE; ${CMAKE_SOURCE_DIR}/tmva/sofie/inc; ${SOFIE_PARSERS_DIR}/inc; ${CMAKE_SOURCE_DIR}/tmva/inc; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(emitFromROOT protobuf::libprotobuf ROOTTMVASofie ROOTTMVASofieParser); set_target_properties(emitFromROOT PROPERTIES POSITION_INDEPENDENT_CODE TRUE); ## silence protobuf warnings seen in version 3.0 and 3.6. Not needed from protobuf version 3.17; target_compile_options(emitFromROOT PRIVATE -Wno-unused-parameter -Wno-array-bounds). # Automatic compilation of headers from root files; add_custom_target(SofieCompileModels_ROOT); # onepcm ,MatchSource.DOCS,tmva/sofie/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/CMakeLists.txt:2567,Testability,Test,TestCustomModelsFromONNX,2567,l.cxx; ); target_include_directories(emitFromONNX PRIVATE; ${CMAKE_SOURCE_DIR}/tmva/sofie/inc; ${SOFIE_PARSERS_DIR}/inc; ${CMAKE_SOURCE_DIR}/tmva/inc; ${CMAKE_CURRENT_BINARY_DIR} # this is for the protobuf headerfile; ). target_link_libraries(emitFromONNX protobuf::libprotobuf ROOTTMVASofie ROOTTMVASofieParser); set_target_properties(emitFromONNX PROPERTIES POSITION_INDEPENDENT_CODE TRUE); ## silence protobuf warnings seen in version 3.0 and 3.6. Not needed from protobuf version 3.17; target_compile_options(emitFromONNX PRIVATE -Wno-unused-parameter -Wno-array-bounds). # Automatic compilation of headers from onnx files; add_custom_target(SofieCompileModels_ONNX); add_dependencies(SofieCompileModels_ONNX emitFromONNX). add_custom_command(TARGET SofieCompileModels_ONNX POST_BUILD; 		COMMAND ${CMAKE_COMMAND} -E env ROOTIGNOREPREFIX=1 ./emitFromONNX ${onnx_file} ${CMAKE_CURRENT_BINARY_DIR}/${fname}; 		USES_TERMINAL ). # Creating a Google Test; if (tmva-cpu) # we need BLAS for compiling the models; ROOT_ADD_GTEST(TestCustomModelsFromONNX TestCustomModelsFromONNX.cxx; LIBRARIES; ROOTTMVASofie; ${BLAS_LINKER_FLAGS}; ${BLAS_LIBRARIES}; INCLUDE_DIRS; ${CMAKE_CURRENT_BINARY_DIR}; ). add_dependencies(TestCustomModelsFromONNX SofieCompileModels_ONNX); endif(). #For testing serialisation of RModel object. add_executable(emitFromROOT; EmitFromRoot_all.cxx; ); target_include_directories(emitFromROOT PRIVATE; ${CMAKE_SOURCE_DIR}/tmva/sofie/inc; ${SOFIE_PARSERS_DIR}/inc; ${CMAKE_SOURCE_DIR}/tmva/inc; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(emitFromROOT protobuf::libprotobuf ROOTTMVASofie ROOTTMVASofieParser); set_target_properties(emitFromROOT PROPERTIES POSITION_INDEPENDENT_CODE TRUE); ## silence protobuf warnings seen in version 3.0 and 3.6. Not needed from protobuf version 3.17; target_compile_options(emitFromROOT PRIVATE -Wno-unused-parameter -Wno-array-bounds). # Automatic compilation of headers from root files; add_custom_target(SofieCompileModels_ROOT); # onepcm ,MatchSource.DOCS,tmva/sofie/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/CMakeLists.txt:2727,Testability,Test,TestCustomModelsFromONNX,2727,ink_libraries(emitFromONNX protobuf::libprotobuf ROOTTMVASofie ROOTTMVASofieParser); set_target_properties(emitFromONNX PROPERTIES POSITION_INDEPENDENT_CODE TRUE); ## silence protobuf warnings seen in version 3.0 and 3.6. Not needed from protobuf version 3.17; target_compile_options(emitFromONNX PRIVATE -Wno-unused-parameter -Wno-array-bounds). # Automatic compilation of headers from onnx files; add_custom_target(SofieCompileModels_ONNX); add_dependencies(SofieCompileModels_ONNX emitFromONNX). add_custom_command(TARGET SofieCompileModels_ONNX POST_BUILD; 		COMMAND ${CMAKE_COMMAND} -E env ROOTIGNOREPREFIX=1 ./emitFromONNX ${onnx_file} ${CMAKE_CURRENT_BINARY_DIR}/${fname}; 		USES_TERMINAL ). # Creating a Google Test; if (tmva-cpu) # we need BLAS for compiling the models; ROOT_ADD_GTEST(TestCustomModelsFromONNX TestCustomModelsFromONNX.cxx; LIBRARIES; ROOTTMVASofie; ${BLAS_LINKER_FLAGS}; ${BLAS_LIBRARIES}; INCLUDE_DIRS; ${CMAKE_CURRENT_BINARY_DIR}; ). add_dependencies(TestCustomModelsFromONNX SofieCompileModels_ONNX); endif(). #For testing serialisation of RModel object. add_executable(emitFromROOT; EmitFromRoot_all.cxx; ); target_include_directories(emitFromROOT PRIVATE; ${CMAKE_SOURCE_DIR}/tmva/sofie/inc; ${SOFIE_PARSERS_DIR}/inc; ${CMAKE_SOURCE_DIR}/tmva/inc; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(emitFromROOT protobuf::libprotobuf ROOTTMVASofie ROOTTMVASofieParser); set_target_properties(emitFromROOT PROPERTIES POSITION_INDEPENDENT_CODE TRUE); ## silence protobuf warnings seen in version 3.0 and 3.6. Not needed from protobuf version 3.17; target_compile_options(emitFromROOT PRIVATE -Wno-unused-parameter -Wno-array-bounds). # Automatic compilation of headers from root files; add_custom_target(SofieCompileModels_ROOT); # onepcm or modules dependency is needed for using ROOT I/O when converting a model in a ROOT file; if (runtime_cxxmodules); add_dependencies(SofieCompileModels_ROOT emitFromROOT modules_idx); else(); add_dependencies(SofieCompileModels_R,MatchSource.DOCS,tmva/sofie/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/CMakeLists.txt:2792,Testability,test,testing,2792,e ROOTTMVASofieParser); set_target_properties(emitFromONNX PROPERTIES POSITION_INDEPENDENT_CODE TRUE); ## silence protobuf warnings seen in version 3.0 and 3.6. Not needed from protobuf version 3.17; target_compile_options(emitFromONNX PRIVATE -Wno-unused-parameter -Wno-array-bounds). # Automatic compilation of headers from onnx files; add_custom_target(SofieCompileModels_ONNX); add_dependencies(SofieCompileModels_ONNX emitFromONNX). add_custom_command(TARGET SofieCompileModels_ONNX POST_BUILD; 		COMMAND ${CMAKE_COMMAND} -E env ROOTIGNOREPREFIX=1 ./emitFromONNX ${onnx_file} ${CMAKE_CURRENT_BINARY_DIR}/${fname}; 		USES_TERMINAL ). # Creating a Google Test; if (tmva-cpu) # we need BLAS for compiling the models; ROOT_ADD_GTEST(TestCustomModelsFromONNX TestCustomModelsFromONNX.cxx; LIBRARIES; ROOTTMVASofie; ${BLAS_LINKER_FLAGS}; ${BLAS_LIBRARIES}; INCLUDE_DIRS; ${CMAKE_CURRENT_BINARY_DIR}; ). add_dependencies(TestCustomModelsFromONNX SofieCompileModels_ONNX); endif(). #For testing serialisation of RModel object. add_executable(emitFromROOT; EmitFromRoot_all.cxx; ); target_include_directories(emitFromROOT PRIVATE; ${CMAKE_SOURCE_DIR}/tmva/sofie/inc; ${SOFIE_PARSERS_DIR}/inc; ${CMAKE_SOURCE_DIR}/tmva/inc; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(emitFromROOT protobuf::libprotobuf ROOTTMVASofie ROOTTMVASofieParser); set_target_properties(emitFromROOT PROPERTIES POSITION_INDEPENDENT_CODE TRUE); ## silence protobuf warnings seen in version 3.0 and 3.6. Not needed from protobuf version 3.17; target_compile_options(emitFromROOT PRIVATE -Wno-unused-parameter -Wno-array-bounds). # Automatic compilation of headers from root files; add_custom_target(SofieCompileModels_ROOT); # onepcm or modules dependency is needed for using ROOT I/O when converting a model in a ROOT file; if (runtime_cxxmodules); add_dependencies(SofieCompileModels_ROOT emitFromROOT modules_idx); else(); add_dependencies(SofieCompileModels_ROOT emitFromROOT onepcm); endif(). add_custom_command(TARGET ,MatchSource.DOCS,tmva/sofie/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/CMakeLists.txt:3951,Testability,Test,Test,3951,${CMAKE_SOURCE_DIR}/tmva/inc; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(emitFromROOT protobuf::libprotobuf ROOTTMVASofie ROOTTMVASofieParser); set_target_properties(emitFromROOT PROPERTIES POSITION_INDEPENDENT_CODE TRUE); ## silence protobuf warnings seen in version 3.0 and 3.6. Not needed from protobuf version 3.17; target_compile_options(emitFromROOT PRIVATE -Wno-unused-parameter -Wno-array-bounds). # Automatic compilation of headers from root files; add_custom_target(SofieCompileModels_ROOT); # onepcm or modules dependency is needed for using ROOT I/O when converting a model in a ROOT file; if (runtime_cxxmodules); add_dependencies(SofieCompileModels_ROOT emitFromROOT modules_idx); else(); add_dependencies(SofieCompileModels_ROOT emitFromROOT onepcm); endif(). add_custom_command(TARGET SofieCompileModels_ROOT POST_BUILD; COMMAND ${CMAKE_COMMAND} -E env ROOTIGNOREPREFIX=1 ./emitFromROOT; 		USES_TERMINAL ). # Creating a Google Test for Serialisation of RModel; if (tmva-cpu); ROOT_ADD_GTEST(TestCustomModelsFromROOT TestCustomModelsFromROOT.cxx; LIBRARIES; ROOTTMVASofie; ${BLAS_LINKER_FLAGS}; ${BLAS_LIBRARIES}; INCLUDE_DIRS; ${CMAKE_CURRENT_BINARY_DIR}; ); add_dependencies(TestCustomModelsFromROOT SofieCompileModels_ROOT); endif(). # gtest; # Look for needed python modules; find_python_module(torch QUIET); if(PY_TORCH_FOUND); configure_file(Conv1dModelGenerator.py Conv1dModelGenerator.py COPYONLY); configure_file(Conv2dModelGenerator.py Conv2dModelGenerator.py COPYONLY); configure_file(Conv3dModelGenerator.py Conv3dModelGenerator.py COPYONLY); configure_file(ConvTrans2dModelGenerator.py ConvTrans2dModelGenerator.py COPYONLY); configure_file(LinearModelGenerator.py LinearModelGenerator.py COPYONLY); configure_file(RecurrentModelGenerator.py RecurrentModelGenerator.py COPYONLY). if (tmva-cpu); ROOT_ADD_GTEST(TestSofieModels TestSofieModels.cxx; LIBRARIES; ROOTTMVASofie; ROOTTMVASofieParser; ${BLAS_LINKER_FLAGS}; ${BLAS_LIBRARIES}; INCLUDE_DIRS; ${CMAKE_CURRE,MatchSource.DOCS,tmva/sofie/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/CMakeLists.txt:4015,Testability,Test,TestCustomModelsFromROOT,4015,${CMAKE_SOURCE_DIR}/tmva/inc; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(emitFromROOT protobuf::libprotobuf ROOTTMVASofie ROOTTMVASofieParser); set_target_properties(emitFromROOT PROPERTIES POSITION_INDEPENDENT_CODE TRUE); ## silence protobuf warnings seen in version 3.0 and 3.6. Not needed from protobuf version 3.17; target_compile_options(emitFromROOT PRIVATE -Wno-unused-parameter -Wno-array-bounds). # Automatic compilation of headers from root files; add_custom_target(SofieCompileModels_ROOT); # onepcm or modules dependency is needed for using ROOT I/O when converting a model in a ROOT file; if (runtime_cxxmodules); add_dependencies(SofieCompileModels_ROOT emitFromROOT modules_idx); else(); add_dependencies(SofieCompileModels_ROOT emitFromROOT onepcm); endif(). add_custom_command(TARGET SofieCompileModels_ROOT POST_BUILD; COMMAND ${CMAKE_COMMAND} -E env ROOTIGNOREPREFIX=1 ./emitFromROOT; 		USES_TERMINAL ). # Creating a Google Test for Serialisation of RModel; if (tmva-cpu); ROOT_ADD_GTEST(TestCustomModelsFromROOT TestCustomModelsFromROOT.cxx; LIBRARIES; ROOTTMVASofie; ${BLAS_LINKER_FLAGS}; ${BLAS_LIBRARIES}; INCLUDE_DIRS; ${CMAKE_CURRENT_BINARY_DIR}; ); add_dependencies(TestCustomModelsFromROOT SofieCompileModels_ROOT); endif(). # gtest; # Look for needed python modules; find_python_module(torch QUIET); if(PY_TORCH_FOUND); configure_file(Conv1dModelGenerator.py Conv1dModelGenerator.py COPYONLY); configure_file(Conv2dModelGenerator.py Conv2dModelGenerator.py COPYONLY); configure_file(Conv3dModelGenerator.py Conv3dModelGenerator.py COPYONLY); configure_file(ConvTrans2dModelGenerator.py ConvTrans2dModelGenerator.py COPYONLY); configure_file(LinearModelGenerator.py LinearModelGenerator.py COPYONLY); configure_file(RecurrentModelGenerator.py RecurrentModelGenerator.py COPYONLY). if (tmva-cpu); ROOT_ADD_GTEST(TestSofieModels TestSofieModels.cxx; LIBRARIES; ROOTTMVASofie; ROOTTMVASofieParser; ${BLAS_LINKER_FLAGS}; ${BLAS_LIBRARIES}; INCLUDE_DIRS; ${CMAKE_CURRE,MatchSource.DOCS,tmva/sofie/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/CMakeLists.txt:4040,Testability,Test,TestCustomModelsFromROOT,4040,${CMAKE_SOURCE_DIR}/tmva/inc; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(emitFromROOT protobuf::libprotobuf ROOTTMVASofie ROOTTMVASofieParser); set_target_properties(emitFromROOT PROPERTIES POSITION_INDEPENDENT_CODE TRUE); ## silence protobuf warnings seen in version 3.0 and 3.6. Not needed from protobuf version 3.17; target_compile_options(emitFromROOT PRIVATE -Wno-unused-parameter -Wno-array-bounds). # Automatic compilation of headers from root files; add_custom_target(SofieCompileModels_ROOT); # onepcm or modules dependency is needed for using ROOT I/O when converting a model in a ROOT file; if (runtime_cxxmodules); add_dependencies(SofieCompileModels_ROOT emitFromROOT modules_idx); else(); add_dependencies(SofieCompileModels_ROOT emitFromROOT onepcm); endif(). add_custom_command(TARGET SofieCompileModels_ROOT POST_BUILD; COMMAND ${CMAKE_COMMAND} -E env ROOTIGNOREPREFIX=1 ./emitFromROOT; 		USES_TERMINAL ). # Creating a Google Test for Serialisation of RModel; if (tmva-cpu); ROOT_ADD_GTEST(TestCustomModelsFromROOT TestCustomModelsFromROOT.cxx; LIBRARIES; ROOTTMVASofie; ${BLAS_LINKER_FLAGS}; ${BLAS_LIBRARIES}; INCLUDE_DIRS; ${CMAKE_CURRENT_BINARY_DIR}; ); add_dependencies(TestCustomModelsFromROOT SofieCompileModels_ROOT); endif(). # gtest; # Look for needed python modules; find_python_module(torch QUIET); if(PY_TORCH_FOUND); configure_file(Conv1dModelGenerator.py Conv1dModelGenerator.py COPYONLY); configure_file(Conv2dModelGenerator.py Conv2dModelGenerator.py COPYONLY); configure_file(Conv3dModelGenerator.py Conv3dModelGenerator.py COPYONLY); configure_file(ConvTrans2dModelGenerator.py ConvTrans2dModelGenerator.py COPYONLY); configure_file(LinearModelGenerator.py LinearModelGenerator.py COPYONLY); configure_file(RecurrentModelGenerator.py RecurrentModelGenerator.py COPYONLY). if (tmva-cpu); ROOT_ADD_GTEST(TestSofieModels TestSofieModels.cxx; LIBRARIES; ROOTTMVASofie; ROOTTMVASofieParser; ${BLAS_LINKER_FLAGS}; ${BLAS_LIBRARIES}; INCLUDE_DIRS; ${CMAKE_CURRE,MatchSource.DOCS,tmva/sofie/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/CMakeLists.txt:4200,Testability,Test,TestCustomModelsFromROOT,4200,_properties(emitFromROOT PROPERTIES POSITION_INDEPENDENT_CODE TRUE); ## silence protobuf warnings seen in version 3.0 and 3.6. Not needed from protobuf version 3.17; target_compile_options(emitFromROOT PRIVATE -Wno-unused-parameter -Wno-array-bounds). # Automatic compilation of headers from root files; add_custom_target(SofieCompileModels_ROOT); # onepcm or modules dependency is needed for using ROOT I/O when converting a model in a ROOT file; if (runtime_cxxmodules); add_dependencies(SofieCompileModels_ROOT emitFromROOT modules_idx); else(); add_dependencies(SofieCompileModels_ROOT emitFromROOT onepcm); endif(). add_custom_command(TARGET SofieCompileModels_ROOT POST_BUILD; COMMAND ${CMAKE_COMMAND} -E env ROOTIGNOREPREFIX=1 ./emitFromROOT; 		USES_TERMINAL ). # Creating a Google Test for Serialisation of RModel; if (tmva-cpu); ROOT_ADD_GTEST(TestCustomModelsFromROOT TestCustomModelsFromROOT.cxx; LIBRARIES; ROOTTMVASofie; ${BLAS_LINKER_FLAGS}; ${BLAS_LIBRARIES}; INCLUDE_DIRS; ${CMAKE_CURRENT_BINARY_DIR}; ); add_dependencies(TestCustomModelsFromROOT SofieCompileModels_ROOT); endif(). # gtest; # Look for needed python modules; find_python_module(torch QUIET); if(PY_TORCH_FOUND); configure_file(Conv1dModelGenerator.py Conv1dModelGenerator.py COPYONLY); configure_file(Conv2dModelGenerator.py Conv2dModelGenerator.py COPYONLY); configure_file(Conv3dModelGenerator.py Conv3dModelGenerator.py COPYONLY); configure_file(ConvTrans2dModelGenerator.py ConvTrans2dModelGenerator.py COPYONLY); configure_file(LinearModelGenerator.py LinearModelGenerator.py COPYONLY); configure_file(RecurrentModelGenerator.py RecurrentModelGenerator.py COPYONLY). if (tmva-cpu); ROOT_ADD_GTEST(TestSofieModels TestSofieModels.cxx; LIBRARIES; ROOTTMVASofie; ROOTTMVASofieParser; ${BLAS_LINKER_FLAGS}; ${BLAS_LIBRARIES}; INCLUDE_DIRS; ${CMAKE_CURRENT_BINARY_DIR}; ); endif(); endif(). add_executable(emitGNN; GNN/EmitGNN.cxx; ${CMAKE_SOURCE_DIR}/tmva/sofie/src/RModel_GNN.cxx; ${CMAKE_SOURCE_DIR}/tmva/sofie/src/,MatchSource.DOCS,tmva/sofie/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/CMakeLists.txt:4846,Testability,Test,TestSofieModels,4846,OMMAND ${CMAKE_COMMAND} -E env ROOTIGNOREPREFIX=1 ./emitFromROOT; 		USES_TERMINAL ). # Creating a Google Test for Serialisation of RModel; if (tmva-cpu); ROOT_ADD_GTEST(TestCustomModelsFromROOT TestCustomModelsFromROOT.cxx; LIBRARIES; ROOTTMVASofie; ${BLAS_LINKER_FLAGS}; ${BLAS_LIBRARIES}; INCLUDE_DIRS; ${CMAKE_CURRENT_BINARY_DIR}; ); add_dependencies(TestCustomModelsFromROOT SofieCompileModels_ROOT); endif(). # gtest; # Look for needed python modules; find_python_module(torch QUIET); if(PY_TORCH_FOUND); configure_file(Conv1dModelGenerator.py Conv1dModelGenerator.py COPYONLY); configure_file(Conv2dModelGenerator.py Conv2dModelGenerator.py COPYONLY); configure_file(Conv3dModelGenerator.py Conv3dModelGenerator.py COPYONLY); configure_file(ConvTrans2dModelGenerator.py ConvTrans2dModelGenerator.py COPYONLY); configure_file(LinearModelGenerator.py LinearModelGenerator.py COPYONLY); configure_file(RecurrentModelGenerator.py RecurrentModelGenerator.py COPYONLY). if (tmva-cpu); ROOT_ADD_GTEST(TestSofieModels TestSofieModels.cxx; LIBRARIES; ROOTTMVASofie; ROOTTMVASofieParser; ${BLAS_LINKER_FLAGS}; ${BLAS_LIBRARIES}; INCLUDE_DIRS; ${CMAKE_CURRENT_BINARY_DIR}; ); endif(); endif(). add_executable(emitGNN; GNN/EmitGNN.cxx; ${CMAKE_SOURCE_DIR}/tmva/sofie/src/RModel_GNN.cxx; ${CMAKE_SOURCE_DIR}/tmva/sofie/src/SOFIE_common.cxx; ); target_include_directories(emitGNN PRIVATE; ${CMAKE_SOURCE_DIR}/tmva/sofie/inc; ${CMAKE_SOURCE_DIR}/tmva/inc; ${CMAKE_SOURCE_DIR}/core/foundation/inc; ${CMAKE_BINARY_DIR}/ginclude # this is for RConfigure.h; ); target_link_libraries(emitGNN ROOTTMVASofie); set_target_properties(emitGNN PROPERTIES POSITION_INDEPENDENT_CODE TRUE); ## silence protobuf warnings seen in version 3.0 and 3.6. Not needed from protobuf version 3.17; target_compile_options(emitGNN PRIVATE -Wno-unused-parameter -Wno-array-bounds). add_executable(emitGraphIndependent; GNN/EmitGraphIndependent.cxx; ${CMAKE_SOURCE_DIR}/tmva/sofie/src/RModel_GraphIndependent.cxx; ${CMAKE_SOURCE_DIR}/tmva,MatchSource.DOCS,tmva/sofie/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/CMakeLists.txt:4862,Testability,Test,TestSofieModels,4862,OMMAND ${CMAKE_COMMAND} -E env ROOTIGNOREPREFIX=1 ./emitFromROOT; 		USES_TERMINAL ). # Creating a Google Test for Serialisation of RModel; if (tmva-cpu); ROOT_ADD_GTEST(TestCustomModelsFromROOT TestCustomModelsFromROOT.cxx; LIBRARIES; ROOTTMVASofie; ${BLAS_LINKER_FLAGS}; ${BLAS_LIBRARIES}; INCLUDE_DIRS; ${CMAKE_CURRENT_BINARY_DIR}; ); add_dependencies(TestCustomModelsFromROOT SofieCompileModels_ROOT); endif(). # gtest; # Look for needed python modules; find_python_module(torch QUIET); if(PY_TORCH_FOUND); configure_file(Conv1dModelGenerator.py Conv1dModelGenerator.py COPYONLY); configure_file(Conv2dModelGenerator.py Conv2dModelGenerator.py COPYONLY); configure_file(Conv3dModelGenerator.py Conv3dModelGenerator.py COPYONLY); configure_file(ConvTrans2dModelGenerator.py ConvTrans2dModelGenerator.py COPYONLY); configure_file(LinearModelGenerator.py LinearModelGenerator.py COPYONLY); configure_file(RecurrentModelGenerator.py RecurrentModelGenerator.py COPYONLY). if (tmva-cpu); ROOT_ADD_GTEST(TestSofieModels TestSofieModels.cxx; LIBRARIES; ROOTTMVASofie; ROOTTMVASofieParser; ${BLAS_LINKER_FLAGS}; ${BLAS_LIBRARIES}; INCLUDE_DIRS; ${CMAKE_CURRENT_BINARY_DIR}; ); endif(); endif(). add_executable(emitGNN; GNN/EmitGNN.cxx; ${CMAKE_SOURCE_DIR}/tmva/sofie/src/RModel_GNN.cxx; ${CMAKE_SOURCE_DIR}/tmva/sofie/src/SOFIE_common.cxx; ); target_include_directories(emitGNN PRIVATE; ${CMAKE_SOURCE_DIR}/tmva/sofie/inc; ${CMAKE_SOURCE_DIR}/tmva/inc; ${CMAKE_SOURCE_DIR}/core/foundation/inc; ${CMAKE_BINARY_DIR}/ginclude # this is for RConfigure.h; ); target_link_libraries(emitGNN ROOTTMVASofie); set_target_properties(emitGNN PROPERTIES POSITION_INDEPENDENT_CODE TRUE); ## silence protobuf warnings seen in version 3.0 and 3.6. Not needed from protobuf version 3.17; target_compile_options(emitGNN PRIVATE -Wno-unused-parameter -Wno-array-bounds). add_executable(emitGraphIndependent; GNN/EmitGraphIndependent.cxx; ${CMAKE_SOURCE_DIR}/tmva/sofie/src/RModel_GraphIndependent.cxx; ${CMAKE_SOURCE_DIR}/tmva,MatchSource.DOCS,tmva/sofie/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/CMakeLists.txt:1123,Integrability,interface,interface,1123,"served.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT TMVA tests.; # @author Kim Albertsson; ############################################################################. # Tests using google test; ROOT_ADD_GTEST(TestRandomGenerator; TestRandomGenerator.cxx; LIBRARIES TMVA); ROOT_ADD_GTEST(TestOptimizeConfigParameters; TestOptimizeConfigParameters.cxx; LIBRARIES TMVA). if(dataframe); # RTensor; ROOT_ADD_GTEST(rtensor rtensor.cxx LIBRARIES ROOTVecOps TMVA); ROOT_ADD_GTEST(rtensor-iterator rtensor_iterator.cxx LIBRARIES ROOTVecOps TMVA); ROOT_ADD_GTEST(rtensor-utils rtensor_utils.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # RStandardScaler; ROOT_ADD_GTEST(rstandardscaler rstandardscaler.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # RReader; ROOT_ADD_GTEST(rreader rreader.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # Tree inference system and user interface; # Commented out right now because RBDT doesn't provide low-level interfaces; # since the sync with FastForest. Only the construction from XGBoost models; # is supported. If this feature becomes necessary to implement, one can; # resurrect these tests.; # ROOT_ADD_GTEST(branchlessForest branchlessForest.cxx LIBRARIES TMVA); # ROOT_ADD_GTEST(rbdt rbdt.cxx LIBRARIES ROOTVecOps TMVAUtils); endif(). if(dataframe); find_python_module(xgboost QUIET); if (PY_XGBOOST_FOUND); ROOT_ADD_PYUNITTEST(rbdt_xgboost rbdt_xgboost.py); endif(); endif(). #--stressTMVA--------------------------------------------------------------------------------------. ROOT_EXECUTABLE(stressTMVA stressTMVA.cxx LIBRARIES TMVA). if(tmva-gpu); target_compile_definitions(stressTMVA PRIVATE DNNCUDA); endif(). if(tmva-cpu); target_compile_definitions(stressTMVA PRIVATE DNNCPU); endif(). ROOT_ADD_TEST(test-stresstmva COMMAND stressTMVA -b LABELS longtest TIMEOUT 1800); ",MatchSource.DOCS,tmva/tmva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/CMakeLists.txt:1199,Integrability,interface,interfaces,1199,"served.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT TMVA tests.; # @author Kim Albertsson; ############################################################################. # Tests using google test; ROOT_ADD_GTEST(TestRandomGenerator; TestRandomGenerator.cxx; LIBRARIES TMVA); ROOT_ADD_GTEST(TestOptimizeConfigParameters; TestOptimizeConfigParameters.cxx; LIBRARIES TMVA). if(dataframe); # RTensor; ROOT_ADD_GTEST(rtensor rtensor.cxx LIBRARIES ROOTVecOps TMVA); ROOT_ADD_GTEST(rtensor-iterator rtensor_iterator.cxx LIBRARIES ROOTVecOps TMVA); ROOT_ADD_GTEST(rtensor-utils rtensor_utils.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # RStandardScaler; ROOT_ADD_GTEST(rstandardscaler rstandardscaler.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # RReader; ROOT_ADD_GTEST(rreader rreader.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # Tree inference system and user interface; # Commented out right now because RBDT doesn't provide low-level interfaces; # since the sync with FastForest. Only the construction from XGBoost models; # is supported. If this feature becomes necessary to implement, one can; # resurrect these tests.; # ROOT_ADD_GTEST(branchlessForest branchlessForest.cxx LIBRARIES TMVA); # ROOT_ADD_GTEST(rbdt rbdt.cxx LIBRARIES ROOTVecOps TMVAUtils); endif(). if(dataframe); find_python_module(xgboost QUIET); if (PY_XGBOOST_FOUND); ROOT_ADD_PYUNITTEST(rbdt_xgboost rbdt_xgboost.py); endif(); endif(). #--stressTMVA--------------------------------------------------------------------------------------. ROOT_EXECUTABLE(stressTMVA stressTMVA.cxx LIBRARIES TMVA). if(tmva-gpu); target_compile_definitions(stressTMVA PRIVATE DNNCUDA); endif(). if(tmva-cpu); target_compile_definitions(stressTMVA PRIVATE DNNCPU); endif(). ROOT_ADD_TEST(test-stresstmva COMMAND stressTMVA -b LABELS longtest TIMEOUT 1800); ",MatchSource.DOCS,tmva/tmva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/CMakeLists.txt:2059,Safety,TIMEOUT,TIMEOUT,2059,"served.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT TMVA tests.; # @author Kim Albertsson; ############################################################################. # Tests using google test; ROOT_ADD_GTEST(TestRandomGenerator; TestRandomGenerator.cxx; LIBRARIES TMVA); ROOT_ADD_GTEST(TestOptimizeConfigParameters; TestOptimizeConfigParameters.cxx; LIBRARIES TMVA). if(dataframe); # RTensor; ROOT_ADD_GTEST(rtensor rtensor.cxx LIBRARIES ROOTVecOps TMVA); ROOT_ADD_GTEST(rtensor-iterator rtensor_iterator.cxx LIBRARIES ROOTVecOps TMVA); ROOT_ADD_GTEST(rtensor-utils rtensor_utils.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # RStandardScaler; ROOT_ADD_GTEST(rstandardscaler rstandardscaler.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # RReader; ROOT_ADD_GTEST(rreader rreader.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # Tree inference system and user interface; # Commented out right now because RBDT doesn't provide low-level interfaces; # since the sync with FastForest. Only the construction from XGBoost models; # is supported. If this feature becomes necessary to implement, one can; # resurrect these tests.; # ROOT_ADD_GTEST(branchlessForest branchlessForest.cxx LIBRARIES TMVA); # ROOT_ADD_GTEST(rbdt rbdt.cxx LIBRARIES ROOTVecOps TMVAUtils); endif(). if(dataframe); find_python_module(xgboost QUIET); if (PY_XGBOOST_FOUND); ROOT_ADD_PYUNITTEST(rbdt_xgboost rbdt_xgboost.py); endif(); endif(). #--stressTMVA--------------------------------------------------------------------------------------. ROOT_EXECUTABLE(stressTMVA stressTMVA.cxx LIBRARIES TMVA). if(tmva-gpu); target_compile_definitions(stressTMVA PRIVATE DNNCUDA); endif(). if(tmva-cpu); target_compile_definitions(stressTMVA PRIVATE DNNCPU); endif(). ROOT_ADD_TEST(test-stresstmva COMMAND stressTMVA -b LABELS longtest TIMEOUT 1800); ",MatchSource.DOCS,tmva/tmva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/CMakeLists.txt:318,Testability,test,tests,318,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT TMVA tests.; # @author Kim Albertsson; ############################################################################. # Tests using google test; ROOT_ADD_GTEST(TestRandomGenerator; TestRandomGenerator.cxx; LIBRARIES TMVA); ROOT_ADD_GTEST(TestOptimizeConfigParameters; TestOptimizeConfigParameters.cxx; LIBRARIES TMVA). if(dataframe); # RTensor; ROOT_ADD_GTEST(rtensor rtensor.cxx LIBRARIES ROOTVecOps TMVA); ROOT_ADD_GTEST(rtensor-iterator rtensor_iterator.cxx LIBRARIES ROOTVecOps TMVA); ROOT_ADD_GTEST(rtensor-utils rtensor_utils.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # RStandardScaler; ROOT_ADD_GTEST(rstandardscaler rstandardscaler.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # RReader; ROOT_ADD_GTEST(rreader rreader.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # Tree inference system and user interface; # Commented out right now because RBDT doesn't provide low-level interfaces; # since the sync with FastForest. Only the construction from XGBoost models; # is supported. If this feature becomes necessary to implement, one can; # resurrect these tests.; # ROOT_ADD_GTEST(branchlessForest branchlessForest.cxx LIBRARIES TMVA); # ROOT_ADD_GTEST(rbdt rbdt.cxx LIBRARIES ROOTVecOps TMVAUtils); endif(). if(dataframe); find_python_module(xgboost QUIET); if (PY_XGBOOST_FOUND); ROOT_ADD_PYUNITTEST(rbdt_xgboost rbdt_xgboost.py); endif(); endif(). #--stressTMVA--------------------------------------------------------------------------------------. ROOT_EXECUTABLE(stressTMVA stressTMVA.cxx LIBRARIES TMVA). if(tmva-gpu); target_compile_definitions(stressTMVA PRIVATE DNNCUDA); endif(). if(tmva-cpu); target_compile_definitions(stressTMVA PRIVATE DNNCPU); endif(). ROOT_ADD_T",MatchSource.DOCS,tmva/tmva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/CMakeLists.txt:432,Testability,Test,Tests,432,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT TMVA tests.; # @author Kim Albertsson; ############################################################################. # Tests using google test; ROOT_ADD_GTEST(TestRandomGenerator; TestRandomGenerator.cxx; LIBRARIES TMVA); ROOT_ADD_GTEST(TestOptimizeConfigParameters; TestOptimizeConfigParameters.cxx; LIBRARIES TMVA). if(dataframe); # RTensor; ROOT_ADD_GTEST(rtensor rtensor.cxx LIBRARIES ROOTVecOps TMVA); ROOT_ADD_GTEST(rtensor-iterator rtensor_iterator.cxx LIBRARIES ROOTVecOps TMVA); ROOT_ADD_GTEST(rtensor-utils rtensor_utils.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # RStandardScaler; ROOT_ADD_GTEST(rstandardscaler rstandardscaler.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # RReader; ROOT_ADD_GTEST(rreader rreader.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # Tree inference system and user interface; # Commented out right now because RBDT doesn't provide low-level interfaces; # since the sync with FastForest. Only the construction from XGBoost models; # is supported. If this feature becomes necessary to implement, one can; # resurrect these tests.; # ROOT_ADD_GTEST(branchlessForest branchlessForest.cxx LIBRARIES TMVA); # ROOT_ADD_GTEST(rbdt rbdt.cxx LIBRARIES ROOTVecOps TMVAUtils); endif(). if(dataframe); find_python_module(xgboost QUIET); if (PY_XGBOOST_FOUND); ROOT_ADD_PYUNITTEST(rbdt_xgboost rbdt_xgboost.py); endif(); endif(). #--stressTMVA--------------------------------------------------------------------------------------. ROOT_EXECUTABLE(stressTMVA stressTMVA.cxx LIBRARIES TMVA). if(tmva-gpu); target_compile_definitions(stressTMVA PRIVATE DNNCUDA); endif(). if(tmva-cpu); target_compile_definitions(stressTMVA PRIVATE DNNCPU); endif(). ROOT_ADD_T",MatchSource.DOCS,tmva/tmva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/CMakeLists.txt:451,Testability,test,test,451,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT TMVA tests.; # @author Kim Albertsson; ############################################################################. # Tests using google test; ROOT_ADD_GTEST(TestRandomGenerator; TestRandomGenerator.cxx; LIBRARIES TMVA); ROOT_ADD_GTEST(TestOptimizeConfigParameters; TestOptimizeConfigParameters.cxx; LIBRARIES TMVA). if(dataframe); # RTensor; ROOT_ADD_GTEST(rtensor rtensor.cxx LIBRARIES ROOTVecOps TMVA); ROOT_ADD_GTEST(rtensor-iterator rtensor_iterator.cxx LIBRARIES ROOTVecOps TMVA); ROOT_ADD_GTEST(rtensor-utils rtensor_utils.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # RStandardScaler; ROOT_ADD_GTEST(rstandardscaler rstandardscaler.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # RReader; ROOT_ADD_GTEST(rreader rreader.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # Tree inference system and user interface; # Commented out right now because RBDT doesn't provide low-level interfaces; # since the sync with FastForest. Only the construction from XGBoost models; # is supported. If this feature becomes necessary to implement, one can; # resurrect these tests.; # ROOT_ADD_GTEST(branchlessForest branchlessForest.cxx LIBRARIES TMVA); # ROOT_ADD_GTEST(rbdt rbdt.cxx LIBRARIES ROOTVecOps TMVAUtils); endif(). if(dataframe); find_python_module(xgboost QUIET); if (PY_XGBOOST_FOUND); ROOT_ADD_PYUNITTEST(rbdt_xgboost rbdt_xgboost.py); endif(); endif(). #--stressTMVA--------------------------------------------------------------------------------------. ROOT_EXECUTABLE(stressTMVA stressTMVA.cxx LIBRARIES TMVA). if(tmva-gpu); target_compile_definitions(stressTMVA PRIVATE DNNCUDA); endif(). if(tmva-cpu); target_compile_definitions(stressTMVA PRIVATE DNNCPU); endif(). ROOT_ADD_T",MatchSource.DOCS,tmva/tmva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/CMakeLists.txt:472,Testability,Test,TestRandomGenerator,472,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT TMVA tests.; # @author Kim Albertsson; ############################################################################. # Tests using google test; ROOT_ADD_GTEST(TestRandomGenerator; TestRandomGenerator.cxx; LIBRARIES TMVA); ROOT_ADD_GTEST(TestOptimizeConfigParameters; TestOptimizeConfigParameters.cxx; LIBRARIES TMVA). if(dataframe); # RTensor; ROOT_ADD_GTEST(rtensor rtensor.cxx LIBRARIES ROOTVecOps TMVA); ROOT_ADD_GTEST(rtensor-iterator rtensor_iterator.cxx LIBRARIES ROOTVecOps TMVA); ROOT_ADD_GTEST(rtensor-utils rtensor_utils.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # RStandardScaler; ROOT_ADD_GTEST(rstandardscaler rstandardscaler.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # RReader; ROOT_ADD_GTEST(rreader rreader.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # Tree inference system and user interface; # Commented out right now because RBDT doesn't provide low-level interfaces; # since the sync with FastForest. Only the construction from XGBoost models; # is supported. If this feature becomes necessary to implement, one can; # resurrect these tests.; # ROOT_ADD_GTEST(branchlessForest branchlessForest.cxx LIBRARIES TMVA); # ROOT_ADD_GTEST(rbdt rbdt.cxx LIBRARIES ROOTVecOps TMVAUtils); endif(). if(dataframe); find_python_module(xgboost QUIET); if (PY_XGBOOST_FOUND); ROOT_ADD_PYUNITTEST(rbdt_xgboost rbdt_xgboost.py); endif(); endif(). #--stressTMVA--------------------------------------------------------------------------------------. ROOT_EXECUTABLE(stressTMVA stressTMVA.cxx LIBRARIES TMVA). if(tmva-gpu); target_compile_definitions(stressTMVA PRIVATE DNNCUDA); endif(). if(tmva-cpu); target_compile_definitions(stressTMVA PRIVATE DNNCPU); endif(). ROOT_ADD_T",MatchSource.DOCS,tmva/tmva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/CMakeLists.txt:493,Testability,Test,TestRandomGenerator,493,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT TMVA tests.; # @author Kim Albertsson; ############################################################################. # Tests using google test; ROOT_ADD_GTEST(TestRandomGenerator; TestRandomGenerator.cxx; LIBRARIES TMVA); ROOT_ADD_GTEST(TestOptimizeConfigParameters; TestOptimizeConfigParameters.cxx; LIBRARIES TMVA). if(dataframe); # RTensor; ROOT_ADD_GTEST(rtensor rtensor.cxx LIBRARIES ROOTVecOps TMVA); ROOT_ADD_GTEST(rtensor-iterator rtensor_iterator.cxx LIBRARIES ROOTVecOps TMVA); ROOT_ADD_GTEST(rtensor-utils rtensor_utils.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # RStandardScaler; ROOT_ADD_GTEST(rstandardscaler rstandardscaler.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # RReader; ROOT_ADD_GTEST(rreader rreader.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # Tree inference system and user interface; # Commented out right now because RBDT doesn't provide low-level interfaces; # since the sync with FastForest. Only the construction from XGBoost models; # is supported. If this feature becomes necessary to implement, one can; # resurrect these tests.; # ROOT_ADD_GTEST(branchlessForest branchlessForest.cxx LIBRARIES TMVA); # ROOT_ADD_GTEST(rbdt rbdt.cxx LIBRARIES ROOTVecOps TMVAUtils); endif(). if(dataframe); find_python_module(xgboost QUIET); if (PY_XGBOOST_FOUND); ROOT_ADD_PYUNITTEST(rbdt_xgboost rbdt_xgboost.py); endif(); endif(). #--stressTMVA--------------------------------------------------------------------------------------. ROOT_EXECUTABLE(stressTMVA stressTMVA.cxx LIBRARIES TMVA). if(tmva-gpu); target_compile_definitions(stressTMVA PRIVATE DNNCUDA); endif(). if(tmva-cpu); target_compile_definitions(stressTMVA PRIVATE DNNCPU); endif(). ROOT_ADD_T",MatchSource.DOCS,tmva/tmva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/CMakeLists.txt:550,Testability,Test,TestOptimizeConfigParameters,550,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT TMVA tests.; # @author Kim Albertsson; ############################################################################. # Tests using google test; ROOT_ADD_GTEST(TestRandomGenerator; TestRandomGenerator.cxx; LIBRARIES TMVA); ROOT_ADD_GTEST(TestOptimizeConfigParameters; TestOptimizeConfigParameters.cxx; LIBRARIES TMVA). if(dataframe); # RTensor; ROOT_ADD_GTEST(rtensor rtensor.cxx LIBRARIES ROOTVecOps TMVA); ROOT_ADD_GTEST(rtensor-iterator rtensor_iterator.cxx LIBRARIES ROOTVecOps TMVA); ROOT_ADD_GTEST(rtensor-utils rtensor_utils.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # RStandardScaler; ROOT_ADD_GTEST(rstandardscaler rstandardscaler.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # RReader; ROOT_ADD_GTEST(rreader rreader.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # Tree inference system and user interface; # Commented out right now because RBDT doesn't provide low-level interfaces; # since the sync with FastForest. Only the construction from XGBoost models; # is supported. If this feature becomes necessary to implement, one can; # resurrect these tests.; # ROOT_ADD_GTEST(branchlessForest branchlessForest.cxx LIBRARIES TMVA); # ROOT_ADD_GTEST(rbdt rbdt.cxx LIBRARIES ROOTVecOps TMVAUtils); endif(). if(dataframe); find_python_module(xgboost QUIET); if (PY_XGBOOST_FOUND); ROOT_ADD_PYUNITTEST(rbdt_xgboost rbdt_xgboost.py); endif(); endif(). #--stressTMVA--------------------------------------------------------------------------------------. ROOT_EXECUTABLE(stressTMVA stressTMVA.cxx LIBRARIES TMVA). if(tmva-gpu); target_compile_definitions(stressTMVA PRIVATE DNNCUDA); endif(). if(tmva-cpu); target_compile_definitions(stressTMVA PRIVATE DNNCPU); endif(). ROOT_ADD_T",MatchSource.DOCS,tmva/tmva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/CMakeLists.txt:580,Testability,Test,TestOptimizeConfigParameters,580,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT TMVA tests.; # @author Kim Albertsson; ############################################################################. # Tests using google test; ROOT_ADD_GTEST(TestRandomGenerator; TestRandomGenerator.cxx; LIBRARIES TMVA); ROOT_ADD_GTEST(TestOptimizeConfigParameters; TestOptimizeConfigParameters.cxx; LIBRARIES TMVA). if(dataframe); # RTensor; ROOT_ADD_GTEST(rtensor rtensor.cxx LIBRARIES ROOTVecOps TMVA); ROOT_ADD_GTEST(rtensor-iterator rtensor_iterator.cxx LIBRARIES ROOTVecOps TMVA); ROOT_ADD_GTEST(rtensor-utils rtensor_utils.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # RStandardScaler; ROOT_ADD_GTEST(rstandardscaler rstandardscaler.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # RReader; ROOT_ADD_GTEST(rreader rreader.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # Tree inference system and user interface; # Commented out right now because RBDT doesn't provide low-level interfaces; # since the sync with FastForest. Only the construction from XGBoost models; # is supported. If this feature becomes necessary to implement, one can; # resurrect these tests.; # ROOT_ADD_GTEST(branchlessForest branchlessForest.cxx LIBRARIES TMVA); # ROOT_ADD_GTEST(rbdt rbdt.cxx LIBRARIES ROOTVecOps TMVAUtils); endif(). if(dataframe); find_python_module(xgboost QUIET); if (PY_XGBOOST_FOUND); ROOT_ADD_PYUNITTEST(rbdt_xgboost rbdt_xgboost.py); endif(); endif(). #--stressTMVA--------------------------------------------------------------------------------------. ROOT_EXECUTABLE(stressTMVA stressTMVA.cxx LIBRARIES TMVA). if(tmva-gpu); target_compile_definitions(stressTMVA PRIVATE DNNCUDA); endif(). if(tmva-cpu); target_compile_definitions(stressTMVA PRIVATE DNNCPU); endif(). ROOT_ADD_T",MatchSource.DOCS,tmva/tmva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/CMakeLists.txt:1379,Testability,test,tests,1379,"served.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT TMVA tests.; # @author Kim Albertsson; ############################################################################. # Tests using google test; ROOT_ADD_GTEST(TestRandomGenerator; TestRandomGenerator.cxx; LIBRARIES TMVA); ROOT_ADD_GTEST(TestOptimizeConfigParameters; TestOptimizeConfigParameters.cxx; LIBRARIES TMVA). if(dataframe); # RTensor; ROOT_ADD_GTEST(rtensor rtensor.cxx LIBRARIES ROOTVecOps TMVA); ROOT_ADD_GTEST(rtensor-iterator rtensor_iterator.cxx LIBRARIES ROOTVecOps TMVA); ROOT_ADD_GTEST(rtensor-utils rtensor_utils.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # RStandardScaler; ROOT_ADD_GTEST(rstandardscaler rstandardscaler.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # RReader; ROOT_ADD_GTEST(rreader rreader.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # Tree inference system and user interface; # Commented out right now because RBDT doesn't provide low-level interfaces; # since the sync with FastForest. Only the construction from XGBoost models; # is supported. If this feature becomes necessary to implement, one can; # resurrect these tests.; # ROOT_ADD_GTEST(branchlessForest branchlessForest.cxx LIBRARIES TMVA); # ROOT_ADD_GTEST(rbdt rbdt.cxx LIBRARIES ROOTVecOps TMVAUtils); endif(). if(dataframe); find_python_module(xgboost QUIET); if (PY_XGBOOST_FOUND); ROOT_ADD_PYUNITTEST(rbdt_xgboost rbdt_xgboost.py); endif(); endif(). #--stressTMVA--------------------------------------------------------------------------------------. ROOT_EXECUTABLE(stressTMVA stressTMVA.cxx LIBRARIES TMVA). if(tmva-gpu); target_compile_definitions(stressTMVA PRIVATE DNNCUDA); endif(). if(tmva-cpu); target_compile_definitions(stressTMVA PRIVATE DNNCPU); endif(). ROOT_ADD_TEST(test-stresstmva COMMAND stressTMVA -b LABELS longtest TIMEOUT 1800); ",MatchSource.DOCS,tmva/tmva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/CMakeLists.txt:2005,Testability,test,test-stresstmva,2005,"served.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT TMVA tests.; # @author Kim Albertsson; ############################################################################. # Tests using google test; ROOT_ADD_GTEST(TestRandomGenerator; TestRandomGenerator.cxx; LIBRARIES TMVA); ROOT_ADD_GTEST(TestOptimizeConfigParameters; TestOptimizeConfigParameters.cxx; LIBRARIES TMVA). if(dataframe); # RTensor; ROOT_ADD_GTEST(rtensor rtensor.cxx LIBRARIES ROOTVecOps TMVA); ROOT_ADD_GTEST(rtensor-iterator rtensor_iterator.cxx LIBRARIES ROOTVecOps TMVA); ROOT_ADD_GTEST(rtensor-utils rtensor_utils.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # RStandardScaler; ROOT_ADD_GTEST(rstandardscaler rstandardscaler.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # RReader; ROOT_ADD_GTEST(rreader rreader.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # Tree inference system and user interface; # Commented out right now because RBDT doesn't provide low-level interfaces; # since the sync with FastForest. Only the construction from XGBoost models; # is supported. If this feature becomes necessary to implement, one can; # resurrect these tests.; # ROOT_ADD_GTEST(branchlessForest branchlessForest.cxx LIBRARIES TMVA); # ROOT_ADD_GTEST(rbdt rbdt.cxx LIBRARIES ROOTVecOps TMVAUtils); endif(). if(dataframe); find_python_module(xgboost QUIET); if (PY_XGBOOST_FOUND); ROOT_ADD_PYUNITTEST(rbdt_xgboost rbdt_xgboost.py); endif(); endif(). #--stressTMVA--------------------------------------------------------------------------------------. ROOT_EXECUTABLE(stressTMVA stressTMVA.cxx LIBRARIES TMVA). if(tmva-gpu); target_compile_definitions(stressTMVA PRIVATE DNNCUDA); endif(). if(tmva-cpu); target_compile_definitions(stressTMVA PRIVATE DNNCPU); endif(). ROOT_ADD_TEST(test-stresstmva COMMAND stressTMVA -b LABELS longtest TIMEOUT 1800); ",MatchSource.DOCS,tmva/tmva/test/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/CMakeLists.txt:318,Testability,test,tests,318,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT TMVA tests.; # @author Kim Albertsson; ############################################################################. set(Libraries TMVA). # Tests utilising google test; ROOT_ADD_GTEST(testCrossValidationSplitting; TestCrossValidationSplitting.cxx; LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testCrossValidationIntVar; TestCrossValidationIntVar.cxx; LIBRARIES ${Libraries}). if(NOT MSVC); #---Multiproc is not supported on Windows; ROOT_ADD_GTEST(testCrossValidationMultiProc; TestCrossValidationMultiProc.cxx; LIBRARIES ${Libraries}); endif(). # Tests; ROOT_EXECUTABLE(testCrossValidationSerialise; TestCrossValidationSerialise.cxx; LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-CrossValidation-Serialise; COMMAND testCrossValidationSerialise); ",MatchSource.DOCS,tmva/tmva/test/crossvalidation/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/CMakeLists.txt:453,Testability,Test,Tests,453,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT TMVA tests.; # @author Kim Albertsson; ############################################################################. set(Libraries TMVA). # Tests utilising google test; ROOT_ADD_GTEST(testCrossValidationSplitting; TestCrossValidationSplitting.cxx; LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testCrossValidationIntVar; TestCrossValidationIntVar.cxx; LIBRARIES ${Libraries}). if(NOT MSVC); #---Multiproc is not supported on Windows; ROOT_ADD_GTEST(testCrossValidationMultiProc; TestCrossValidationMultiProc.cxx; LIBRARIES ${Libraries}); endif(). # Tests; ROOT_EXECUTABLE(testCrossValidationSerialise; TestCrossValidationSerialise.cxx; LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-CrossValidation-Serialise; COMMAND testCrossValidationSerialise); ",MatchSource.DOCS,tmva/tmva/test/crossvalidation/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/CMakeLists.txt:476,Testability,test,test,476,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT TMVA tests.; # @author Kim Albertsson; ############################################################################. set(Libraries TMVA). # Tests utilising google test; ROOT_ADD_GTEST(testCrossValidationSplitting; TestCrossValidationSplitting.cxx; LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testCrossValidationIntVar; TestCrossValidationIntVar.cxx; LIBRARIES ${Libraries}). if(NOT MSVC); #---Multiproc is not supported on Windows; ROOT_ADD_GTEST(testCrossValidationMultiProc; TestCrossValidationMultiProc.cxx; LIBRARIES ${Libraries}); endif(). # Tests; ROOT_EXECUTABLE(testCrossValidationSerialise; TestCrossValidationSerialise.cxx; LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-CrossValidation-Serialise; COMMAND testCrossValidationSerialise); ",MatchSource.DOCS,tmva/tmva/test/crossvalidation/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/CMakeLists.txt:497,Testability,test,testCrossValidationSplitting,497,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT TMVA tests.; # @author Kim Albertsson; ############################################################################. set(Libraries TMVA). # Tests utilising google test; ROOT_ADD_GTEST(testCrossValidationSplitting; TestCrossValidationSplitting.cxx; LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testCrossValidationIntVar; TestCrossValidationIntVar.cxx; LIBRARIES ${Libraries}). if(NOT MSVC); #---Multiproc is not supported on Windows; ROOT_ADD_GTEST(testCrossValidationMultiProc; TestCrossValidationMultiProc.cxx; LIBRARIES ${Libraries}); endif(). # Tests; ROOT_EXECUTABLE(testCrossValidationSerialise; TestCrossValidationSerialise.cxx; LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-CrossValidation-Serialise; COMMAND testCrossValidationSerialise); ",MatchSource.DOCS,tmva/tmva/test/crossvalidation/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/CMakeLists.txt:527,Testability,Test,TestCrossValidationSplitting,527,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT TMVA tests.; # @author Kim Albertsson; ############################################################################. set(Libraries TMVA). # Tests utilising google test; ROOT_ADD_GTEST(testCrossValidationSplitting; TestCrossValidationSplitting.cxx; LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testCrossValidationIntVar; TestCrossValidationIntVar.cxx; LIBRARIES ${Libraries}). if(NOT MSVC); #---Multiproc is not supported on Windows; ROOT_ADD_GTEST(testCrossValidationMultiProc; TestCrossValidationMultiProc.cxx; LIBRARIES ${Libraries}); endif(). # Tests; ROOT_EXECUTABLE(testCrossValidationSerialise; TestCrossValidationSerialise.cxx; LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-CrossValidation-Serialise; COMMAND testCrossValidationSerialise); ",MatchSource.DOCS,tmva/tmva/test/crossvalidation/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/CMakeLists.txt:601,Testability,test,testCrossValidationIntVar,601,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT TMVA tests.; # @author Kim Albertsson; ############################################################################. set(Libraries TMVA). # Tests utilising google test; ROOT_ADD_GTEST(testCrossValidationSplitting; TestCrossValidationSplitting.cxx; LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testCrossValidationIntVar; TestCrossValidationIntVar.cxx; LIBRARIES ${Libraries}). if(NOT MSVC); #---Multiproc is not supported on Windows; ROOT_ADD_GTEST(testCrossValidationMultiProc; TestCrossValidationMultiProc.cxx; LIBRARIES ${Libraries}); endif(). # Tests; ROOT_EXECUTABLE(testCrossValidationSerialise; TestCrossValidationSerialise.cxx; LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-CrossValidation-Serialise; COMMAND testCrossValidationSerialise); ",MatchSource.DOCS,tmva/tmva/test/crossvalidation/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/CMakeLists.txt:628,Testability,Test,TestCrossValidationIntVar,628,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT TMVA tests.; # @author Kim Albertsson; ############################################################################. set(Libraries TMVA). # Tests utilising google test; ROOT_ADD_GTEST(testCrossValidationSplitting; TestCrossValidationSplitting.cxx; LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testCrossValidationIntVar; TestCrossValidationIntVar.cxx; LIBRARIES ${Libraries}). if(NOT MSVC); #---Multiproc is not supported on Windows; ROOT_ADD_GTEST(testCrossValidationMultiProc; TestCrossValidationMultiProc.cxx; LIBRARIES ${Libraries}); endif(). # Tests; ROOT_EXECUTABLE(testCrossValidationSerialise; TestCrossValidationSerialise.cxx; LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-CrossValidation-Serialise; COMMAND testCrossValidationSerialise); ",MatchSource.DOCS,tmva/tmva/test/crossvalidation/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/CMakeLists.txt:756,Testability,test,testCrossValidationMultiProc,756,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT TMVA tests.; # @author Kim Albertsson; ############################################################################. set(Libraries TMVA). # Tests utilising google test; ROOT_ADD_GTEST(testCrossValidationSplitting; TestCrossValidationSplitting.cxx; LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testCrossValidationIntVar; TestCrossValidationIntVar.cxx; LIBRARIES ${Libraries}). if(NOT MSVC); #---Multiproc is not supported on Windows; ROOT_ADD_GTEST(testCrossValidationMultiProc; TestCrossValidationMultiProc.cxx; LIBRARIES ${Libraries}); endif(). # Tests; ROOT_EXECUTABLE(testCrossValidationSerialise; TestCrossValidationSerialise.cxx; LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-CrossValidation-Serialise; COMMAND testCrossValidationSerialise); ",MatchSource.DOCS,tmva/tmva/test/crossvalidation/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/CMakeLists.txt:786,Testability,Test,TestCrossValidationMultiProc,786,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT TMVA tests.; # @author Kim Albertsson; ############################################################################. set(Libraries TMVA). # Tests utilising google test; ROOT_ADD_GTEST(testCrossValidationSplitting; TestCrossValidationSplitting.cxx; LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testCrossValidationIntVar; TestCrossValidationIntVar.cxx; LIBRARIES ${Libraries}). if(NOT MSVC); #---Multiproc is not supported on Windows; ROOT_ADD_GTEST(testCrossValidationMultiProc; TestCrossValidationMultiProc.cxx; LIBRARIES ${Libraries}); endif(). # Tests; ROOT_EXECUTABLE(testCrossValidationSerialise; TestCrossValidationSerialise.cxx; LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-CrossValidation-Serialise; COMMAND testCrossValidationSerialise); ",MatchSource.DOCS,tmva/tmva/test/crossvalidation/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/CMakeLists.txt:856,Testability,Test,Tests,856,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT TMVA tests.; # @author Kim Albertsson; ############################################################################. set(Libraries TMVA). # Tests utilising google test; ROOT_ADD_GTEST(testCrossValidationSplitting; TestCrossValidationSplitting.cxx; LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testCrossValidationIntVar; TestCrossValidationIntVar.cxx; LIBRARIES ${Libraries}). if(NOT MSVC); #---Multiproc is not supported on Windows; ROOT_ADD_GTEST(testCrossValidationMultiProc; TestCrossValidationMultiProc.cxx; LIBRARIES ${Libraries}); endif(). # Tests; ROOT_EXECUTABLE(testCrossValidationSerialise; TestCrossValidationSerialise.cxx; LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-CrossValidation-Serialise; COMMAND testCrossValidationSerialise); ",MatchSource.DOCS,tmva/tmva/test/crossvalidation/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/CMakeLists.txt:879,Testability,test,testCrossValidationSerialise,879,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT TMVA tests.; # @author Kim Albertsson; ############################################################################. set(Libraries TMVA). # Tests utilising google test; ROOT_ADD_GTEST(testCrossValidationSplitting; TestCrossValidationSplitting.cxx; LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testCrossValidationIntVar; TestCrossValidationIntVar.cxx; LIBRARIES ${Libraries}). if(NOT MSVC); #---Multiproc is not supported on Windows; ROOT_ADD_GTEST(testCrossValidationMultiProc; TestCrossValidationMultiProc.cxx; LIBRARIES ${Libraries}); endif(). # Tests; ROOT_EXECUTABLE(testCrossValidationSerialise; TestCrossValidationSerialise.cxx; LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-CrossValidation-Serialise; COMMAND testCrossValidationSerialise); ",MatchSource.DOCS,tmva/tmva/test/crossvalidation/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/CMakeLists.txt:909,Testability,Test,TestCrossValidationSerialise,909,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT TMVA tests.; # @author Kim Albertsson; ############################################################################. set(Libraries TMVA). # Tests utilising google test; ROOT_ADD_GTEST(testCrossValidationSplitting; TestCrossValidationSplitting.cxx; LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testCrossValidationIntVar; TestCrossValidationIntVar.cxx; LIBRARIES ${Libraries}). if(NOT MSVC); #---Multiproc is not supported on Windows; ROOT_ADD_GTEST(testCrossValidationMultiProc; TestCrossValidationMultiProc.cxx; LIBRARIES ${Libraries}); endif(). # Tests; ROOT_EXECUTABLE(testCrossValidationSerialise; TestCrossValidationSerialise.cxx; LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-CrossValidation-Serialise; COMMAND testCrossValidationSerialise); ",MatchSource.DOCS,tmva/tmva/test/crossvalidation/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/CMakeLists.txt:1022,Testability,test,testCrossValidationSerialise,1022,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT TMVA tests.; # @author Kim Albertsson; ############################################################################. set(Libraries TMVA). # Tests utilising google test; ROOT_ADD_GTEST(testCrossValidationSplitting; TestCrossValidationSplitting.cxx; LIBRARIES ${Libraries}). ROOT_ADD_GTEST(testCrossValidationIntVar; TestCrossValidationIntVar.cxx; LIBRARIES ${Libraries}). if(NOT MSVC); #---Multiproc is not supported on Windows; ROOT_ADD_GTEST(testCrossValidationMultiProc; TestCrossValidationMultiProc.cxx; LIBRARIES ${Libraries}); endif(). # Tests; ROOT_EXECUTABLE(testCrossValidationSerialise; TestCrossValidationSerialise.cxx; LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-CrossValidation-Serialise; COMMAND testCrossValidationSerialise); ",MatchSource.DOCS,tmva/tmva/test/crossvalidation/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:2787,Performance,Optimiz,Optimization,2787,es} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorD,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:2950,Performance,Optimiz,Optimization-Cuda,2950,estBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Bla,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:3311,Performance,Optimiz,Optimization,3311,ionCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TES,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:3483,Performance,Optimiz,Optimization-Cudnn,3483,RARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLos,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:5375,Performance,Optimiz,Optimization,5375,nctions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMeth,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:5501,Performance,Optimiz,Optimization-Cpu,5501,aries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RM,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:5569,Performance,Optimiz,Optimization,5569,OOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization C,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:5730,Performance,Optimiz,Optimization-Cpu,5730, COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries});,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:5810,Performance,Optimiz,Optimization,5810,cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regressio,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:5974,Performance,Optimiz,Optimization-Cpu,5974,L CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cp,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:6071,Performance,Optimiz,Optimization,6071,gation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBR,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:6244,Performance,Optimiz,Optimization-Cpu,6244,ormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:6331,Performance,Optimiz,Optimization,6331,NN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizat,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:6504,Performance,Optimiz,Optimization-Cpu,6504,-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivatio,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:6592,Performance,Optimiz,Optimization,6592,pu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFu,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:6768,Performance,Optimiz,Optimization-Cpu,6768,dDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMV,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:7159,Performance,Load,Loader-Cpu,7159,dDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation).,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:8660,Performance,Load,Loader,8660,"PU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testDataLoader). # DNN - Minimization; # ROOT_EXECUTABLE(testMinimization TestMinimization.cxx LIBRARIES ${Libraries}); # # this test takes more than 20 minutes on arm in non-optimised mode; # if (NOT (CMAKE_SYSTEM_PROCESSOR STREQUAL ""aarch64"" AND CMAKE_BUILD_TYPE STREQUAL ""Debug"") ); # ROOT_ADD_TEST(TMVA-DNN-Minimization COMMAND testMinimization); # endif(); endif(); ",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:6031,Safety,TIMEOUT,TIMEOUT,6031,L CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cp,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:317,Testability,test,tests,317,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN tests.; # @author Simon Pfreundschuh; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). include_directories(${CUDA_INCLUDE_DIRS}). SET(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). list(APPEND Libraries ${DNN_CUDA_LIBRARIES} CUDA::cuda_driver CUDA::cudart). # DNN - Activation Functions Cuda; add_executable(testActivationFunctionsCuda TestActivationFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testActivationFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ActivationFunctionsCuda COMMAND testActivationFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:464,Testability,test,tests,464,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN tests.; # @author Simon Pfreundschuh; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). include_directories(${CUDA_INCLUDE_DIRS}). SET(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). list(APPEND Libraries ${DNN_CUDA_LIBRARIES} CUDA::cuda_driver CUDA::cudart). # DNN - Activation Functions Cuda; add_executable(testActivationFunctionsCuda TestActivationFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testActivationFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ActivationFunctionsCuda COMMAND testActivationFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:736,Testability,test,testActivationFunctionsCuda,736,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN tests.; # @author Simon Pfreundschuh; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). include_directories(${CUDA_INCLUDE_DIRS}). SET(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). list(APPEND Libraries ${DNN_CUDA_LIBRARIES} CUDA::cuda_driver CUDA::cudart). # DNN - Activation Functions Cuda; add_executable(testActivationFunctionsCuda TestActivationFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testActivationFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ActivationFunctionsCuda COMMAND testActivationFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:764,Testability,Test,TestActivationFunctionsCuda,764,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN tests.; # @author Simon Pfreundschuh; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). include_directories(${CUDA_INCLUDE_DIRS}). SET(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). list(APPEND Libraries ${DNN_CUDA_LIBRARIES} CUDA::cuda_driver CUDA::cudart). # DNN - Activation Functions Cuda; add_executable(testActivationFunctionsCuda TestActivationFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testActivationFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ActivationFunctionsCuda COMMAND testActivationFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:820,Testability,test,testActivationFunctionsCuda,820,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN tests.; # @author Simon Pfreundschuh; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). include_directories(${CUDA_INCLUDE_DIRS}). SET(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). list(APPEND Libraries ${DNN_CUDA_LIBRARIES} CUDA::cuda_driver CUDA::cudart). # DNN - Activation Functions Cuda; add_executable(testActivationFunctionsCuda TestActivationFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testActivationFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ActivationFunctionsCuda COMMAND testActivationFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:919,Testability,test,testActivationFunctionsCuda,919,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN tests.; # @author Simon Pfreundschuh; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). include_directories(${CUDA_INCLUDE_DIRS}). SET(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). list(APPEND Libraries ${DNN_CUDA_LIBRARIES} CUDA::cuda_driver CUDA::cudart). # DNN - Activation Functions Cuda; add_executable(testActivationFunctionsCuda TestActivationFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testActivationFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ActivationFunctionsCuda COMMAND testActivationFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:993,Testability,test,testLossFunctionsCuda,993,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN tests.; # @author Simon Pfreundschuh; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). include_directories(${CUDA_INCLUDE_DIRS}). SET(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). list(APPEND Libraries ${DNN_CUDA_LIBRARIES} CUDA::cuda_driver CUDA::cudart). # DNN - Activation Functions Cuda; add_executable(testActivationFunctionsCuda TestActivationFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testActivationFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ActivationFunctionsCuda COMMAND testActivationFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:1015,Testability,Test,TestLossFunctionsCuda,1015,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN tests.; # @author Simon Pfreundschuh; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). include_directories(${CUDA_INCLUDE_DIRS}). SET(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). list(APPEND Libraries ${DNN_CUDA_LIBRARIES} CUDA::cuda_driver CUDA::cudart). # DNN - Activation Functions Cuda; add_executable(testActivationFunctionsCuda TestActivationFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testActivationFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ActivationFunctionsCuda COMMAND testActivationFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:1065,Testability,test,testLossFunctionsCuda,1065,terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN tests.; # @author Simon Pfreundschuh; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). include_directories(${CUDA_INCLUDE_DIRS}). SET(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). list(APPEND Libraries ${DNN_CUDA_LIBRARIES} CUDA::cuda_driver CUDA::cudart). # DNN - Activation Functions Cuda; add_executable(testActivationFunctionsCuda TestActivationFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testActivationFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ActivationFunctionsCuda COMMAND testActivationFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMA,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:1152,Testability,test,testLossFunctionsCuda,1152,terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN tests.; # @author Simon Pfreundschuh; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). include_directories(${CUDA_INCLUDE_DIRS}). SET(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). list(APPEND Libraries ${DNN_CUDA_LIBRARIES} CUDA::cuda_driver CUDA::cudart). # DNN - Activation Functions Cuda; add_executable(testActivationFunctionsCuda TestActivationFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testActivationFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ActivationFunctionsCuda COMMAND testActivationFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMA,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:1217,Testability,test,testDerivativesCuda,1217,#######################################################; # CMakeLists.txt file for building TMVA/DNN tests.; # @author Simon Pfreundschuh; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). include_directories(${CUDA_INCLUDE_DIRS}). SET(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). list(APPEND Libraries ${DNN_CUDA_LIBRARIES} CUDA::cuda_driver CUDA::cudart). # DNN - Activation Functions Cuda; add_executable(testActivationFunctionsCuda TestActivationFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testActivationFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ActivationFunctionsCuda COMMAND testActivationFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizatio,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:1237,Testability,Test,TestDerivativesCuda,1237,#######################################################; # CMakeLists.txt file for building TMVA/DNN tests.; # @author Simon Pfreundschuh; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). include_directories(${CUDA_INCLUDE_DIRS}). SET(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). list(APPEND Libraries ${DNN_CUDA_LIBRARIES} CUDA::cuda_driver CUDA::cudart). # DNN - Activation Functions Cuda; add_executable(testActivationFunctionsCuda TestActivationFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testActivationFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ActivationFunctionsCuda COMMAND testActivationFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizatio,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:1285,Testability,test,testDerivativesCuda,1285,; # @author Simon Pfreundschuh; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). include_directories(${CUDA_INCLUDE_DIRS}). SET(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). list(APPEND Libraries ${DNN_CUDA_LIBRARIES} CUDA::cuda_driver CUDA::cudart). # DNN - Activation Functions Cuda; add_executable(testActivationFunctionsCuda TestActivationFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testActivationFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ActivationFunctionsCuda COMMAND testActivationFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationC,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:1368,Testability,test,testDerivativesCuda,1368,; # @author Simon Pfreundschuh; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). include_directories(${CUDA_INCLUDE_DIRS}). SET(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). list(APPEND Libraries ${DNN_CUDA_LIBRARIES} CUDA::cuda_driver CUDA::cudart). # DNN - Activation Functions Cuda; add_executable(testActivationFunctionsCuda TestActivationFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testActivationFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ActivationFunctionsCuda COMMAND testActivationFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationC,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:1435,Testability,test,testBackpropagationCuda,1435,(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). include_directories(${CUDA_INCLUDE_DIRS}). SET(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). list(APPEND Libraries ${DNN_CUDA_LIBRARIES} CUDA::cuda_driver CUDA::cudart). # DNN - Activation Functions Cuda; add_executable(testActivationFunctionsCuda TestActivationFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testActivationFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ActivationFunctionsCuda COMMAND testActivationFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeti,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:1459,Testability,Test,TestBackpropagationCuda,1459,(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). include_directories(${CUDA_INCLUDE_DIRS}). SET(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). list(APPEND Libraries ${DNN_CUDA_LIBRARIES} CUDA::cuda_driver CUDA::cudart). # DNN - Activation Functions Cuda; add_executable(testActivationFunctionsCuda TestActivationFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testActivationFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ActivationFunctionsCuda COMMAND testActivationFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeti,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:1511,Testability,test,testBackpropagationCuda,1511,}). SET(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). list(APPEND Libraries ${DNN_CUDA_LIBRARIES} CUDA::cuda_driver CUDA::cudart). # DNN - Activation Functions Cuda; add_executable(testActivationFunctionsCuda TestActivationFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testActivationFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ActivationFunctionsCuda COMMAND testActivationFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND test,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:1601,Testability,test,testBackpropagationCuda,1601,}). SET(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). list(APPEND Libraries ${DNN_CUDA_LIBRARIES} CUDA::cuda_driver CUDA::cudart). # DNN - Activation Functions Cuda; add_executable(testActivationFunctionsCuda TestActivationFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testActivationFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ActivationFunctionsCuda COMMAND testActivationFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND test,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:1675,Testability,test,testBackpropagationDLCuda,1675,:cudart). # DNN - Activation Functions Cuda; add_executable(testActivationFunctionsCuda TestActivationFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testActivationFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ActivationFunctionsCuda COMMAND testActivationFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:1701,Testability,Test,TestBackpropagationDLCuda,1701,:cudart). # DNN - Activation Functions Cuda; add_executable(testActivationFunctionsCuda TestActivationFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testActivationFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ActivationFunctionsCuda COMMAND testActivationFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:1756,Testability,test,testBackpropagationDLCuda,1756,T_LINK_LIBRARIES(testActivationFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ActivationFunctionsCuda COMMAND testActivationFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:1852,Testability,test,testBackpropagationDLCuda,1852,T_LINK_LIBRARIES(testActivationFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ActivationFunctionsCuda COMMAND testActivationFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:1929,Testability,test,testBatchNormalizationCuda,1929,onFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:1956,Testability,Test,TestBatchNormalizationCuda,1956,onFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:2012,Testability,test,testBatchNormalizationCuda,2012,RIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch norma,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:2109,Testability,test,testBatchNormalizationCuda,2109,RIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch norma,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:2180,Testability,test,testMinimizationCuda,2180,NN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(test,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:2201,Testability,Test,TestMinimizationCuda,2201,NN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(test,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:2250,Testability,test,testMinimizationCuda,2250,DerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormal,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:2335,Testability,test,testMinimizationCuda,2335,DerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormal,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:2398,Testability,test,testArithmeticCuda,2398,ackpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); ,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:2417,Testability,Test,TestMatrixArithmeticCuda,2417,ackpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); ,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:2470,Testability,test,testArithmeticCuda,2470,RIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMA,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:2551,Testability,test,testArithmeticCuda,2551,RIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMA,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:2612,Testability,test,testDataLoaderCuda,2612,ropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn Tes,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:2631,Testability,Test,TestDataLoaderCuda,2631,ropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn Tes,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:2678,Testability,test,testDataLoaderCuda,2678,gationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_L,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:2758,Testability,test,testDataLoaderCuda,2758,gationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_L,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:2820,Testability,test,testOptimizationCuda,2820,ion-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- C,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:2841,Testability,Test,TestOptimizationCuda,2841,ion-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- C,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:2890,Testability,test,testOptimizationCuda,2890,estBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Bla,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:2976,Testability,test,testOptimizationCuda,2976,estBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Bla,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:3005,Testability,test,tests,3005,chNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:3091,Testability,test,testBatchNormalizationCudnn,3091,on-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES $,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:3119,Testability,Test,TestBatchNormalizationCudnn,3119,on-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES $,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:3176,Testability,test,testBatchNormalizationCudnn,3176,); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(te,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:3275,Testability,test,testBatchNormalizationCudnn,3275,); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(te,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:3350,Testability,test,testOptimizationCudnn,3350,- Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND t,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:3372,Testability,Test,TestOptimizationCudnn,3372,- Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND t,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:3422,Testability,test,testOptimizationCudnn,3422,RARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLos,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:3510,Testability,test,testOptimizationCudnn,3510,RARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLos,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:3582,Testability,test,testTensorDataLoaderCudnn,3582,aLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DN,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:3608,Testability,Test,TestTensorDataLoaderCudnn,3608,aLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DN,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:3663,Testability,test,testTensorDataLoaderCudnn,3663,_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivative,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:3780,Testability,test,testTensorDataLoaderCudnn,3780,_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivative,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:3836,Testability,test,tests,3836,onCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpr,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:3897,Testability,test,tests,3897,ET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries},MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:4037,Testability,test,testArithmeticCpu,4037,-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackp,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:4055,Testability,Test,TestMatrixArithmeticCpu,4055,-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackp,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:4154,Testability,test,testArithmeticCpu,4154,chNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu CO,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:4224,Testability,test,testActivationFunctionsCpu,4224,DD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:4251,Testability,Test,TestActivationFunctionsCpu,4251,DD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:4363,Testability,test,testActivationFunctionsCpu,4363, add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMM,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:4436,Testability,test,testLossFunctionsCpu,4436,tionCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOp,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:4457,Testability,Test,TestLossFunctionsCpu,4457,tionCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOp,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:4557,Testability,test,testLossFunctionsCpu,4557,dnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND tes,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:4621,Testability,test,testDerivativesCpu,4621,ataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDO,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:4640,Testability,Test,TestDerivativesCpu,4640,ataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDO,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:4735,Testability,test,testDerivativesCpu,4735,_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:4801,Testability,test,testBackpropagationCpu,4801,udnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - Metho,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:4824,Testability,Test,TestBackpropagationCpu,4824,udnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - Metho,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:4927,Testability,test,testBackpropagationCpu,4927,sts. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimiz,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:4999,Testability,test,testBackpropagationDLCpu,4999,metic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND t,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:5024,Testability,Test,TestBackpropagationDLCpu,5024,metic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND t,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:5132,Testability,test,testBackpropagationDLCpu,5132,s}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:5204,Testability,test,testBatchNormalizationCpu,5204, ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROO,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:5230,Testability,Test,TestBatchNormalizationCpu,5230, ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROO,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:5339,Testability,test,testBatchNormalizationCpu,5339,_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:5409,Testability,test,testOptimizationCpu,5409,nctions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMeth,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:5429,Testability,Test,TestOptimizationCpu,5429,nctions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMeth,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:5526,Testability,test,testOptimizationCpu,5526,aries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RM,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:5603,Testability,test,testMethodDLSGDOptimizationCpu,5603,OOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization C,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:5634,Testability,Test,TestMethodDLSGDOptimizationCpu,5634,OOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization C,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:5755,Testability,test,testMethodDLSGDOptimizationCpu,5755, COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries});,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:5844,Testability,test,testMethodDLAdamOptimizationCpu,5844,cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regressio,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:5876,Testability,Test,TestMethodDLAdamOptimizationCpu,5876,cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regressio,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:5999,Testability,test,testMethodDLAdamOptimizationCpu,5999,L CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cp,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:6105,Testability,test,testMethodDLAdagradOptimizationCpu,6105,gation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBR,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:6140,Testability,Test,TestMethodDLAdagradOptimizationCpu,6140,gation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBR,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:6269,Testability,test,testMethodDLAdagradOptimizationCpu,6269,ormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:6365,Testability,test,testMethodDLRMSPropOptimizationCpu,6365,NN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizat,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:6400,Testability,Test,TestMethodDLRMSPropOptimizationCpu,6400,NN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizat,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:6529,Testability,test,testMethodDLRMSPropOptimizationCpu,6529,-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivatio,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:6626,Testability,test,testMethodDLAdadeltaOptimizationCpu,6626,pu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFu,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:6662,Testability,Test,TestMethodDLAdadeltaOptimizationCpu,6662,pu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFu,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:6793,Testability,test,testMethodDLAdadeltaOptimizationCpu,6793,dDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMV,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:6871,Testability,test,testRegressionCpu,6871,nCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestD,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:6889,Testability,Test,TestRegressionMethodDL,6889,nCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestD,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:6987,Testability,test,testRegressionCpu,6987,-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testD,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:7018,Testability,test,test,7018,MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.c,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:7066,Testability,test,testDataLoaderCpu,7066,MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.c,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:7084,Testability,Test,TestDataLoaderCpu,7084,MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.c,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:7178,Testability,test,testDataLoaderCpu,7178,dDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation).,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:7240,Testability,test,testMinimizationCpu,7240,agrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:7260,Testability,Test,TestMinimizationCpu,7260,agrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:7357,Testability,test,testMinimizationCpu,7357,p Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpro,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:7381,Testability,test,tests,7381,dDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:7433,Testability,test,tests,7433,dDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:7487,Testability,test,testActivationFunctions,7487,MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Bat,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:7511,Testability,Test,TestActivationFunctions,7511,MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Bat,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:7616,Testability,test,testActivationFunctions,7616,lta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader ,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:7682,Testability,test,testLossFunctions,7682,ltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testD,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:7700,Testability,Test,TestLossFunctions,7700,ltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testD,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:7793,Testability,test,testLossFunctions,7793,ta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testDataLoader). # DNN - Minimization; # ROOT_EXECUTABLE(testMinimization TestMinimization,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:7850,Testability,test,testDerivatives,7850,on CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testDataLoader). # DNN - Minimization; # ROOT_EXECUTABLE(testMinimization TestMinimization.cxx LIBRARIES ${Libraries}); # # this test takes more than 20 minutes on arm in n,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:7866,Testability,Test,TestDerivatives,7866,on CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testDataLoader). # DNN - Minimization; # ROOT_EXECUTABLE(testMinimization TestMinimization.cxx LIBRARIES ${Libraries}); # # this test takes more than 20 minutes on arm in n,MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:7954,Testability,test,testDerivatives,7954,"${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testDataLoader). # DNN - Minimization; # ROOT_EXECUTABLE(testMinimization TestMinimization.cxx LIBRARIES ${Libraries}); # # this test takes more than 20 minutes on arm in non-optimised mode; # if (NOT (CMAKE_SYSTEM_PROCESSOR STREQUAL ""aarch64"" AND CMAK",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:8013,Testability,test,testBackpropagation,8013,"d-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testDataLoader). # DNN - Minimization; # ROOT_EXECUTABLE(testMinimization TestMinimization.cxx LIBRARIES ${Libraries}); # # this test takes more than 20 minutes on arm in non-optimised mode; # if (NOT (CMAKE_SYSTEM_PROCESSOR STREQUAL ""aarch64"" AND CMAKE_BUILD_TYPE STREQUAL ""Debug"") ); # ROOT_ADD_TEST(TMVA-DNN-Minimization COMMAND testM",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:8033,Testability,Test,TestBackpropagation,8033,"d-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testDataLoader). # DNN - Minimization; # ROOT_EXECUTABLE(testMinimization TestMinimization.cxx LIBRARIES ${Libraries}); # # this test takes more than 20 minutes on arm in non-optimised mode; # if (NOT (CMAKE_SYSTEM_PROCESSOR STREQUAL ""aarch64"" AND CMAKE_BUILD_TYPE STREQUAL ""Debug"") ); # ROOT_ADD_TEST(TMVA-DNN-Minimization COMMAND testM",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:8129,Testability,test,testBackpropagation,8129,"PU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testDataLoader). # DNN - Minimization; # ROOT_EXECUTABLE(testMinimization TestMinimization.cxx LIBRARIES ${Libraries}); # # this test takes more than 20 minutes on arm in non-optimised mode; # if (NOT (CMAKE_SYSTEM_PROCESSOR STREQUAL ""aarch64"" AND CMAKE_BUILD_TYPE STREQUAL ""Debug"") ); # ROOT_ADD_TEST(TMVA-DNN-Minimization COMMAND testMinimization); # endif(); endif(); ",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:8195,Testability,test,testBackpropagationDL,8195,"PU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testDataLoader). # DNN - Minimization; # ROOT_EXECUTABLE(testMinimization TestMinimization.cxx LIBRARIES ${Libraries}); # # this test takes more than 20 minutes on arm in non-optimised mode; # if (NOT (CMAKE_SYSTEM_PROCESSOR STREQUAL ""aarch64"" AND CMAKE_BUILD_TYPE STREQUAL ""Debug"") ); # ROOT_ADD_TEST(TMVA-DNN-Minimization COMMAND testMinimization); # endif(); endif(); ",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:8217,Testability,Test,TestBackpropagationDL,8217,"PU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testDataLoader). # DNN - Minimization; # ROOT_EXECUTABLE(testMinimization TestMinimization.cxx LIBRARIES ${Libraries}); # # this test takes more than 20 minutes on arm in non-optimised mode; # if (NOT (CMAKE_SYSTEM_PROCESSOR STREQUAL ""aarch64"" AND CMAKE_BUILD_TYPE STREQUAL ""Debug"") ); # ROOT_ADD_TEST(TMVA-DNN-Minimization COMMAND testMinimization); # endif(); endif(); ",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:8318,Testability,test,testBackpropagationDL,8318,"PU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testDataLoader). # DNN - Minimization; # ROOT_EXECUTABLE(testMinimization TestMinimization.cxx LIBRARIES ${Libraries}); # # this test takes more than 20 minutes on arm in non-optimised mode; # if (NOT (CMAKE_SYSTEM_PROCESSOR STREQUAL ""aarch64"" AND CMAKE_BUILD_TYPE STREQUAL ""Debug"") ); # ROOT_ADD_TEST(TMVA-DNN-Minimization COMMAND testMinimization); # endif(); endif(); ",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:8387,Testability,test,testBatchNormalization,8387,"PU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testDataLoader). # DNN - Minimization; # ROOT_EXECUTABLE(testMinimization TestMinimization.cxx LIBRARIES ${Libraries}); # # this test takes more than 20 minutes on arm in non-optimised mode; # if (NOT (CMAKE_SYSTEM_PROCESSOR STREQUAL ""aarch64"" AND CMAKE_BUILD_TYPE STREQUAL ""Debug"") ); # ROOT_ADD_TEST(TMVA-DNN-Minimization COMMAND testMinimization); # endif(); endif(); ",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:8410,Testability,Test,TestBatchNormalization,8410,"PU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testDataLoader). # DNN - Minimization; # ROOT_EXECUTABLE(testMinimization TestMinimization.cxx LIBRARIES ${Libraries}); # # this test takes more than 20 minutes on arm in non-optimised mode; # if (NOT (CMAKE_SYSTEM_PROCESSOR STREQUAL ""aarch64"" AND CMAKE_BUILD_TYPE STREQUAL ""Debug"") ); # ROOT_ADD_TEST(TMVA-DNN-Minimization COMMAND testMinimization); # endif(); endif(); ",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:8512,Testability,test,testBatchNormalization,8512,"PU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testDataLoader). # DNN - Minimization; # ROOT_EXECUTABLE(testMinimization TestMinimization.cxx LIBRARIES ${Libraries}); # # this test takes more than 20 minutes on arm in non-optimised mode; # if (NOT (CMAKE_SYSTEM_PROCESSOR STREQUAL ""aarch64"" AND CMAKE_BUILD_TYPE STREQUAL ""Debug"") ); # ROOT_ADD_TEST(TMVA-DNN-Minimization COMMAND testMinimization); # endif(); endif(); ",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:8573,Testability,test,testDataLoader,8573,"PU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testDataLoader). # DNN - Minimization; # ROOT_EXECUTABLE(testMinimization TestMinimization.cxx LIBRARIES ${Libraries}); # # this test takes more than 20 minutes on arm in non-optimised mode; # if (NOT (CMAKE_SYSTEM_PROCESSOR STREQUAL ""aarch64"" AND CMAKE_BUILD_TYPE STREQUAL ""Debug"") ); # ROOT_ADD_TEST(TMVA-DNN-Minimization COMMAND testMinimization); # endif(); endif(); ",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:8588,Testability,Test,TestDataLoader,8588,"PU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testDataLoader). # DNN - Minimization; # ROOT_EXECUTABLE(testMinimization TestMinimization.cxx LIBRARIES ${Libraries}); # # this test takes more than 20 minutes on arm in non-optimised mode; # if (NOT (CMAKE_SYSTEM_PROCESSOR STREQUAL ""aarch64"" AND CMAKE_BUILD_TYPE STREQUAL ""Debug"") ); # ROOT_ADD_TEST(TMVA-DNN-Minimization COMMAND testMinimization); # endif(); endif(); ",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:8675,Testability,test,testDataLoader,8675,"PU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testDataLoader). # DNN - Minimization; # ROOT_EXECUTABLE(testMinimization TestMinimization.cxx LIBRARIES ${Libraries}); # # this test takes more than 20 minutes on arm in non-optimised mode; # if (NOT (CMAKE_SYSTEM_PROCESSOR STREQUAL ""aarch64"" AND CMAKE_BUILD_TYPE STREQUAL ""Debug"") ); # ROOT_ADD_TEST(TMVA-DNN-Minimization COMMAND testMinimization); # endif(); endif(); ",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:8732,Testability,test,testMinimization,8732,"PU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testDataLoader). # DNN - Minimization; # ROOT_EXECUTABLE(testMinimization TestMinimization.cxx LIBRARIES ${Libraries}); # # this test takes more than 20 minutes on arm in non-optimised mode; # if (NOT (CMAKE_SYSTEM_PROCESSOR STREQUAL ""aarch64"" AND CMAKE_BUILD_TYPE STREQUAL ""Debug"") ); # ROOT_ADD_TEST(TMVA-DNN-Minimization COMMAND testMinimization); # endif(); endif(); ",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:8749,Testability,Test,TestMinimization,8749,"PU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testDataLoader). # DNN - Minimization; # ROOT_EXECUTABLE(testMinimization TestMinimization.cxx LIBRARIES ${Libraries}); # # this test takes more than 20 minutes on arm in non-optimised mode; # if (NOT (CMAKE_SYSTEM_PROCESSOR STREQUAL ""aarch64"" AND CMAKE_BUILD_TYPE STREQUAL ""Debug"") ); # ROOT_ADD_TEST(TMVA-DNN-Minimization COMMAND testMinimization); # endif(); endif(); ",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:8804,Testability,test,test,8804,"PU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testDataLoader). # DNN - Minimization; # ROOT_EXECUTABLE(testMinimization TestMinimization.cxx LIBRARIES ${Libraries}); # # this test takes more than 20 minutes on arm in non-optimised mode; # if (NOT (CMAKE_SYSTEM_PROCESSOR STREQUAL ""aarch64"" AND CMAKE_BUILD_TYPE STREQUAL ""Debug"") ); # ROOT_ADD_TEST(TMVA-DNN-Minimization COMMAND testMinimization); # endif(); endif(); ",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:9007,Testability,test,testMinimization,9007,"PU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testDataLoader). # DNN - Minimization; # ROOT_EXECUTABLE(testMinimization TestMinimization.cxx LIBRARIES ${Libraries}); # # this test takes more than 20 minutes on arm in non-optimised mode; # if (NOT (CMAKE_SYSTEM_PROCESSOR STREQUAL ""aarch64"" AND CMAKE_BUILD_TYPE STREQUAL ""Debug"") ); # ROOT_ADD_TEST(TMVA-DNN-Minimization COMMAND testMinimization); # endif(); endif(); ",MatchSource.DOCS,tmva/tmva/test/DNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/envelope/CMakeLists.txt:317,Testability,test,tests,317,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building Envelope tests.; # @author Omar Zapata; ############################################################################; ROOT_ADD_GTEST(TMVA-Envelope testEnvelope.cxx LIBRARIES Core TMVA RIO); ROOT_ADD_GTEST(TMVA-Classification testClassification.cxx LIBRARIES Core TMVA RIO); ",MatchSource.DOCS,tmva/tmva/test/envelope/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/envelope/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/envelope/CMakeLists.txt:455,Testability,test,testEnvelope,455,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building Envelope tests.; # @author Omar Zapata; ############################################################################; ROOT_ADD_GTEST(TMVA-Envelope testEnvelope.cxx LIBRARIES Core TMVA RIO); ROOT_ADD_GTEST(TMVA-Classification testClassification.cxx LIBRARIES Core TMVA RIO); ",MatchSource.DOCS,tmva/tmva/test/envelope/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/envelope/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/envelope/CMakeLists.txt:533,Testability,test,testClassification,533,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building Envelope tests.; # @author Omar Zapata; ############################################################################; ROOT_ADD_GTEST(TMVA-Envelope testEnvelope.cxx LIBRARIES Core TMVA RIO); ROOT_ADD_GTEST(TMVA-Classification testClassification.cxx LIBRARIES Core TMVA RIO); ",MatchSource.DOCS,tmva/tmva/test/envelope/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/envelope/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/Method/CMakeLists.txt:320,Testability,test,tests,320,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/Method tests.; # @author Kim Albertsson; ############################################################################. # As the reference implementation is deprecated and; # can't be instantiated, we can only run this test; # if there if we can run CPU or CUDA versions.; #if (defined DNNCPU || defined DNNCUDA); if(tmva-cpu OR tmva-gpu); ROOT_ADD_GTEST(TestMethodDNNValidationSize; TestMethodDNNValidationSize.cxx; LIBRARIES TMVA); endif(); ",MatchSource.DOCS,tmva/tmva/test/Method/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/Method/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/Method/CMakeLists.txt:531,Testability,test,test,531,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/Method tests.; # @author Kim Albertsson; ############################################################################. # As the reference implementation is deprecated and; # can't be instantiated, we can only run this test; # if there if we can run CPU or CUDA versions.; #if (defined DNNCPU || defined DNNCUDA); if(tmva-cpu OR tmva-gpu); ROOT_ADD_GTEST(TestMethodDNNValidationSize; TestMethodDNNValidationSize.cxx; LIBRARIES TMVA); endif(); ",MatchSource.DOCS,tmva/tmva/test/Method/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/Method/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/Method/CMakeLists.txt:667,Testability,Test,TestMethodDNNValidationSize,667,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/Method tests.; # @author Kim Albertsson; ############################################################################. # As the reference implementation is deprecated and; # can't be instantiated, we can only run this test; # if there if we can run CPU or CUDA versions.; #if (defined DNNCPU || defined DNNCUDA); if(tmva-cpu OR tmva-gpu); ROOT_ADD_GTEST(TestMethodDNNValidationSize; TestMethodDNNValidationSize.cxx; LIBRARIES TMVA); endif(); ",MatchSource.DOCS,tmva/tmva/test/Method/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/Method/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/Method/CMakeLists.txt:696,Testability,Test,TestMethodDNNValidationSize,696,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/Method tests.; # @author Kim Albertsson; ############################################################################. # As the reference implementation is deprecated and; # can't be instantiated, we can only run this test; # if there if we can run CPU or CUDA versions.; #if (defined DNNCPU || defined DNNCUDA); if(tmva-cpu OR tmva-gpu); ROOT_ADD_GTEST(TestMethodDNNValidationSize; TestMethodDNNValidationSize.cxx; LIBRARIES TMVA); endif(); ",MatchSource.DOCS,tmva/tmva/test/Method/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/Method/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/ROC/CMakeLists.txt:317,Testability,test,tests,317,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/ROC tests.; # @author Kim Albertsson; ############################################################################. ROOT_ADD_GTEST(testRocWeights; testRocWeights.cxx; LIBRARIES TMVA); ",MatchSource.DOCS,tmva/tmva/test/ROC/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/ROC/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/ROC/CMakeLists.txt:444,Testability,test,testRocWeights,444,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/ROC tests.; # @author Kim Albertsson; ############################################################################. ROOT_ADD_GTEST(testRocWeights; testRocWeights.cxx; LIBRARIES TMVA); ",MatchSource.DOCS,tmva/tmva/test/ROC/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/ROC/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/ROC/CMakeLists.txt:460,Testability,test,testRocWeights,460,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/ROC tests.; # @author Kim Albertsson; ############################################################################. ROOT_ADD_GTEST(testRocWeights; testRocWeights.cxx; LIBRARIES TMVA); ",MatchSource.DOCS,tmva/tmva/test/ROC/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/ROC/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:4696,Performance,Load,Loader,4696, ROOT_EXECUTABLE(testReshape TestReshape.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape COMMAND testReshape). ROOT_EXECUTABLE(testRotWeights TestRotateWeights.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights COMMAND testRotWeights). #-- features not implemeted in ref architectures; #ROOT_EXECUTABLE(testForwardPass TestForwardPass.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Forward COMMAND testForwardPass). #ROOT_EXECUTABLE(testConvNetLoss TestConvNetLoss.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Loss COMMAND testConvNetLoss). #ROOT_EXECUTABLE(testConvNetPred TestConvNetPrediction.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Pred COMMAND testConvNetPred). #ROOT_EXECUTABLE(testDLMinimization TestMinimization.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization COMMAND testDLMinimization). #ROOT_EXECUTABLE(testTensorDataLoader TestTensorDataLoader.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader COMMAND testTensorDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayerCpu TestConvLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayer-CPU COMMAND testConvLayerCpu). ROOT_EXECUTABLE(testRotWeightsCpu TestRotateWeightsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights-CPU COMMAND testRotWeightsCpu). ROOT_EXECUTABLE(testForwardPassCpu TestForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Forward-CPU COMMAND testForwardPassCpu). ROOT_EXECUTABLE(testConvNetLossCpu TestConvNetLossCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TES,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:6180,Performance,Load,Loader-CPU,6180,orDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayerCpu TestConvLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayer-CPU COMMAND testConvLayerCpu). ROOT_EXECUTABLE(testRotWeightsCpu TestRotateWeightsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights-CPU COMMAND testRotWeightsCpu). ROOT_EXECUTABLE(testForwardPassCpu TestForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Forward-CPU COMMAND testForwardPassCpu). ROOT_EXECUTABLE(testConvNetLossCpu TestConvNetLossCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Loss-CPU COMMAND testConvNetLossCpu). ROOT_EXECUTABLE(testConvNetPredCpu TestConvNetPredictionCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Pred-CPU COMMAND testConvNetPredCpu). ROOT_EXECUTABLE(testReshapeCpu TestReshapeCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape-CPU COMMAND testReshapeCpu). #-- need to be fixed; #ROOT_EXECUTABLE(testTensorDataLoaderCpu TestTensorDataLoaderCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader-CPU COMMAND testTensorDataLoaderCpu). #ROOT_EXECUTABLE(testDLMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization-CPU COMMAND testDLMinimizationCpu). ROOT_EXECUTABLE(testConvBackpropagationCpu TestConvBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Backpropagation-CPU COMMAND testConvBackpropagationCpu). ROOT_EXECUTABLE(testMethodDLCNN TestMethodDLCNN.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-MethodDL COMMAND testMethodDLCNN). endif (); ,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:321,Testability,test,tests,321,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN/CNN tests.; # @author Vladimir Ilievski; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testIm2ColCuda TestIm2ColCuda.cxx); target_link_libraries(testIm2ColCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${D",MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:467,Testability,test,tests,467,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN/CNN tests.; # @author Vladimir Ilievski; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testIm2ColCuda TestIm2ColCuda.cxx); target_link_libraries(testIm2ColCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${D",MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:827,Testability,test,testPoolingLayerCuda,827,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN/CNN tests.; # @author Vladimir Ilievski; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testIm2ColCuda TestIm2ColCuda.cxx); target_link_libraries(testIm2ColCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${D",MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:848,Testability,Test,TestPoolingLayerCuda,848,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN/CNN tests.; # @author Vladimir Ilievski; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testIm2ColCuda TestIm2ColCuda.cxx); target_link_libraries(testIm2ColCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${D",MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:897,Testability,test,testPoolingLayerCuda,897,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN/CNN tests.; # @author Vladimir Ilievski; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testIm2ColCuda TestIm2ColCuda.cxx); target_link_libraries(testIm2ColCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${D",MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:1007,Testability,test,testPoolingLayerCuda,1007,"# Copyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN/CNN tests.; # @author Vladimir Ilievski; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testIm2ColCuda TestIm2ColCuda.cxx); target_link_libraries(testIm2ColCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${D",MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:1045,Testability,test,testReshapeCuda,1045,ers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN/CNN tests.; # @author Vladimir Ilievski; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testIm2ColCuda TestIm2ColCuda.cxx); target_link_libraries(testIm2ColCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Conv,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:1061,Testability,Test,TestReshapeCuda,1061,ers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN/CNN tests.; # @author Vladimir Ilievski; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testIm2ColCuda TestIm2ColCuda.cxx); target_link_libraries(testIm2ColCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Conv,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:1105,Testability,test,testReshapeCuda,1105, of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN/CNN tests.; # @author Vladimir Ilievski; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testIm2ColCuda TestIm2ColCuda.cxx); target_link_libraries(testIm2ColCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testFor,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:1205,Testability,test,testReshapeCuda,1205, of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN/CNN tests.; # @author Vladimir Ilievski; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testIm2ColCuda TestIm2ColCuda.cxx); target_link_libraries(testIm2ColCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testFor,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:1238,Testability,test,testConvLayerCuda,1238,#######################; # CMakeLists.txt file for building TMVA/DNN/CNN tests.; # @author Vladimir Ilievski; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testIm2ColCuda TestIm2ColCuda.cxx); target_link_libraries(testIm2ColCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} $,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:1256,Testability,Test,TestConvLayerCuda,1256,#######################; # CMakeLists.txt file for building TMVA/DNN/CNN tests.; # @author Vladimir Ilievski; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testIm2ColCuda TestIm2ColCuda.cxx); target_link_libraries(testIm2ColCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} $,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:1302,Testability,test,testConvLayerCuda,1302,lievski; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testIm2ColCuda TestIm2ColCuda.cxx); target_link_libraries(testIm2ColCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_exec,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:1406,Testability,test,testConvLayerCuda,1406,lievski; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testIm2ColCuda TestIm2ColCuda.cxx); target_link_libraries(testIm2ColCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_exec,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:1441,Testability,test,testForwardPassCuda,1441,A). #--- CUDA tests. ---------------------------; if (tmva-gpu). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testIm2ColCuda TestIm2ColCuda.cxx); target_link_libraries(testIm2ColCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBa,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:1461,Testability,Test,TestForwardPassCuda,1461,A). #--- CUDA tests. ---------------------------; if (tmva-gpu). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testIm2ColCuda TestIm2ColCuda.cxx); target_link_libraries(testIm2ColCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBa,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:1509,Testability,test,testForwardPassCuda,1509, CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testIm2ColCuda TestIm2ColCuda.cxx); target_link_libraries(testIm2ColCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCud,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:1613,Testability,test,testForwardPassCuda,1613, CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testIm2ColCuda TestIm2ColCuda.cxx); target_link_libraries(testIm2ColCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCud,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:1650,Testability,test,testRotateWeightsCuda,1650,Cuda.cxx); target_link_libraries(testIm2ColCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); targe,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:1672,Testability,Test,TestRotateWeightsCuda,1672,Cuda.cxx); target_link_libraries(testIm2ColCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); targe,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:1722,Testability,test,testRotateWeightsCuda,1722,-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCud,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:1834,Testability,test,testRotateWeightsCuda,1834,-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCud,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:1873,Testability,test,testConvBackpropagationCuda,1873,ies(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_librarie,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:1901,Testability,Test,TestConvBackpropagationCuda,1901,ies(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_librarie,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:1957,Testability,test,testConvBackpropagationCuda,1957,ayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLa,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:2081,Testability,test,testConvBackpropagationCuda,2081,ayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLa,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:2143,Testability,test,testForwardPassCudnn,2143,; ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:2164,Testability,Test,TestForwardPassCudnn,2164,; ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:2213,Testability,test,testForwardPassCudnn,2213,vLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures ,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:2319,Testability,test,testForwardPassCudnn,2319,vLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures ,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:2357,Testability,test,testConvBackpropagationCudnn,2357,N-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of referenc,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:2386,Testability,Test,TestConvBackpropagationCudnn,2386,N-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of referenc,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:2443,Testability,test,testConvBackpropagationCudnn,2443,s(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CN,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:2569,Testability,test,testConvBackpropagationCudnn,2569,s(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CN,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:2615,Testability,test,testConvLayerCudnn,2615,ssCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_T,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:2634,Testability,Test,TestConvLayerCudnn,2634,ssCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_T,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:2681,Testability,test,testConvLayerCudnn,2681,teWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer COMMAND testPoolingLayer). ROOT_EXECUTABLE(testReshape TestReshape.cxx LIB,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:2787,Testability,test,testConvLayerCudnn,2787,teWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer COMMAND testPoolingLayer). ROOT_EXECUTABLE(testReshape TestReshape.cxx LIB,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:2823,Testability,test,testPoolingLayerCudnn,2823,tRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer COMMAND testPoolingLayer). ROOT_EXECUTABLE(testReshape TestReshape.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape COMMAND testReshape). ROOT_EXECUTABLE(testRotWeigh,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:2845,Testability,Test,TestPoolingLayerCudnn,2845,tRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer COMMAND testPoolingLayer). ROOT_EXECUTABLE(testReshape TestReshape.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape COMMAND testReshape). ROOT_EXECUTABLE(testRotWeigh,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:2895,Testability,test,testPoolingLayerCudnn,2895,ibraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer COMMAND testPoolingLayer). ROOT_EXECUTABLE(testReshape TestReshape.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape COMMAND testReshape). ROOT_EXECUTABLE(testRotWeights TestRotateWeights.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights COMMAND testRotWeights).,MatchSource.DOCS,tmva/tmva/test/DNN/CNN/CMakeLists.txt,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt
