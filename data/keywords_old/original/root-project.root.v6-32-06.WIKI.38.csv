id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://root.cern/doc/master/classRooTruthModel.html:13523,Energy Efficiency,efficient,efficient,13523,"normRange () const;  ; virtual RooPlot * paramOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Add a box with parameter values (and errors) to the specified frame. ;  ; RooPlot * plotOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const override;  Helper calling plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const override;  Plot (project) PDF on specified frame. ;  ; GenSpec * prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages fo",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:15840,Energy Efficiency,adapt,adaptor,15840,"r Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual std::list< double > * binBoundaries (RooAbsRealLValue &obs, double xlo, double xhi) const;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; RooFit::OwningPtr< RooAbsFunc > bindVars (const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) const;  Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ;  ; virtual std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const;  This function defines the analytical integral translation for the class. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a \( \chi^2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={},",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:6419,Integrability,integrat,integrated,6419," iset. ;  ; RooFit::OwningPtr< RooAbsReal > createCdf (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; virtual std::unique_ptr< RooAbsReal > createExpectedEventsFunc (const RooArgSet *nset) const;  Returns an object that represents the expected number of events for a given normalization set, similar to how createIntegral() returns an object that returns the integral. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooAbsReal > createNLL (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Construct representation of -log(L) of PDF with given dataset. ;  ; virtual RooAbsPdf * createProjection (const RooArgSet &iset);  Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; virtual double expectedEvents (const RooArgSet *nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expec",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:10651,Integrability,interface,interface,10651,"={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}) const;  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; virtual RooFit::OwningPtr< RooDataHist > generateBinned (const RooArgSet &whatVars, double nEvents, bool expectedData=false, bool extended=false) const;  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; virtual RooFit::OwningPtr< RooDataHist > generateBinned (const RooArgSet &whatVars, double nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}) const;  As RooAbsPdf::generateBinned(const RooArgSet&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&) const. ;  ; virtual RooFit::OwningPtr< RooDataSet > generateSimGlobal (const RooArgSet &whatVars, Int_t nEvents);  Special generator interface for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true) const;  This helper function finds and collects all constraints terms of all component p.d.f.s and returns a RooArgSet with all those terms. ;  ; virtual RooArgSet * getConstraints (const RooArgSet &, RooArgSet const &, RooArgSet &) const;  ; const RooNumGenConfig * getGeneratorConfig () const;  Return the numeric MC generator configuration used for this object. ;  ; void getLogProbabilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by ge",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:11440,Integrability,message,message,11440,"{}) const;  As RooAbsPdf::generateBinned(const RooArgSet&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&) const. ;  ; virtual RooFit::OwningPtr< RooDataSet > generateSimGlobal (const RooArgSet &whatVars, Int_t nEvents);  Special generator interface for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true) const;  This helper function finds and collects all constraints terms of all component p.d.f.s and returns a RooArgSet with all those terms. ;  ; virtual RooArgSet * getConstraints (const RooArgSet &, RooArgSet const &, RooArgSet &) const;  ; const RooNumGenConfig * getGeneratorConfig () const;  Return the numeric MC generator configuration used for this object. ;  ; void getLogProbabilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; virtual void initGenerator (Int_t code);  Interface for one-time initialization to setup the generator for the specified code. ;  ; virtual bool isDirectGenSafe (const RooAbsArg &arg) const;  Check if given observable can be safely generated using the pdfs internal generator mechanism (if that existsP). ;  ; bool mustBeExtended () con",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:13869,Integrability,message,messages,13869,"oCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const override;  Helper calling plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const override;  Plot (project) PDF on specified frame. ;  ; GenSpec * prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherit",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:14418,Integrability,message,messages,14418,"atVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; TF1 * asTF (const Ro",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:14533,Integrability,integrat,integrator,14533,"ject for efficient generation of multiple datasets from identical specification. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and paramete",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:14673,Integrability,integrat,integrator,14673,"e;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual std::list< double > * binBoundaries (RooAbsRealLValue &obs, double xlo, double xhi) const;  Retrieve bin boundaries ",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:15830,Integrability,interface,interface,15830,"r Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual std::list< double > * binBoundaries (RooAbsRealLValue &obs, double xlo, double xhi) const;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; RooFit::OwningPtr< RooAbsFunc > bindVars (const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) const;  Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ;  ; virtual std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const;  This function defines the analytical integral translation for the class. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a \( \chi^2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={},",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:20041,Integrability,integrat,integration,20041,"f this function. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, RooLinkedList &argList) const;  Internal method implementing createHistogram. ;  ; TH1 * createHistogram (RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const char *rangeName) const;  Create integral over observables in iset in range named rangeName. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullpt",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:21002,Integrability,integrat,integration,21002,"ntegral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &dependentVars, const RooArgSet *projectedVars, RooArgSet *&cloneSet, const char *rangeName=nullptr, const RooArgSet *condObs=nullptr) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest);  Create a RooProfileLL object that eliminates all nuisance parameters in the",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:21223,Integrability,depend,dependentVars,21223,"nction over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &dependentVars, const RooArgSet *projectedVars, RooArgSet *&cloneSet, const char *rangeName=nullptr, const RooArgSet *condObs=nullptr) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest);  Create a RooProfileLL object that eliminates all nuisance parameters in the present function. ;  ; RooFit::OwningPtr< RooAbsReal > createRunningIntegral (const RooArgSet &iset, const RooArgSet &nset={});  Calls createRunningIntegral(const RooArgSet&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) ;  ; RooFit::OwningPtr< RooAbsReal > createRunningIntegral (const RooArgSet &iset, const RooCmdArg &",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:25259,Integrability,integrat,integration,25259,"ed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual bool forceAnalyticalInt (const RooAbsArg &) const;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:25386,Integrability,integrat,integration,25386,"ix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual bool forceAnalyticalInt (const RooAbsArg &) const;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; virtual bool isBinnedDistribution (const RooArgSet &) const;  Tests if the distr",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:26724,Integrability,message,message,26724,"the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; virtual bool isBinnedDistribution (const RooArgSet &) const;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; virtual double maxVal (Int_t code) const;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; virtual Int_t minTrialSamples (const RooArgSet &) const;  ; RooAbsMoment * moment (RooRealVar &obs, const RooArgSet &normObs, Int_t order, bool central, bool takeRoot, bool intNormObs);  Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ;  ; RooAbsMoment * moment (RooRealVar &obs, Int_t order, bool central, bool takeRoot);  Return function representing moment of function of given order. ;  ; virtual double offset () const;  ; bool operator== (const RooAbsArg &other) const override;  Equality operator when comparing to ano",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:26801,Integrability,message,message,26801,"the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; virtual bool isBinnedDistribution (const RooArgSet &) const;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; virtual double maxVal (Int_t code) const;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; virtual Int_t minTrialSamples (const RooArgSet &) const;  ; RooAbsMoment * moment (RooRealVar &obs, const RooArgSet &normObs, Int_t order, bool central, bool takeRoot, bool intNormObs);  Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ;  ; RooAbsMoment * moment (RooRealVar &obs, Int_t order, bool central, bool takeRoot);  Return function representing moment of function of given order. ;  ; virtual double offset () const;  ; bool operator== (const RooAbsArg &other) const override;  Equality operator when comparing to ano",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:28718,Integrability,integrat,integration,28718,"st;  Equality operator comparing to a double. ;  ; virtual std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for ",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:28851,Integrability,integrat,integrator,28851,"returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:28895,Integrability,integrat,integration,28895,"returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:29317,Integrability,integrat,integrator,29317,"Set. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedC",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:29458,Integrability,integrat,integrator,29458,"mmy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:30861,Integrability,depend,dependent,30861," ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool checkObservables (const RooArgSet *nset) const;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:31068,Integrability,depend,dependent,31068," transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool checkObservables (const RooArgSet *nset) const;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool d",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:31989,Integrability,depend,dependsOn,31989,"dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool checkObservables (const RooArgSet *nset) const;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:32107,Integrability,depend,depend,32107,"dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool checkObservables (const RooArgSet *nset) const;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:32169,Integrability,depend,dependsOn,32169,"s can implement consistency checks of the variables. ;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depLis",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:32298,Integrability,depend,depend,32298,"s can implement consistency checks of the variables. ;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depLis",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:32378,Integrability,depend,dependsOn,32378,"* cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; ",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:32494,Integrability,depend,depend,32494,"* cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; ",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:32566,Integrability,depend,dependsOnValue,32566,"t to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgS",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:32677,Integrability,depend,depends,32677,"t to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgS",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:32746,Integrability,depend,dependsOnValue,32746,"ing results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of ",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:32868,Integrability,depend,depends,32868,"ing results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of ",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:33855,Integrability,depend,dependents,33855," bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet &set, bool valueOnly=true) const;  Given a set of possible observables, return the observables that this PDF depends on. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet *depList, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData &data, bool stripDisconnected=true) const;  Return the parameters of this p.d.f when used in conjunction with dataset 'data'. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData *data, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names of the variable lis",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:34045,Integrability,depend,depends,34045,"me) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet &set, bool valueOnly=true) const;  Given a set of possible observables, return the observables that this PDF depends on. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet *depList, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData &data, bool stripDisconnected=true) const;  Return the parameters of this p.d.f when used in conjunction with dataset 'data'. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData *data, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet &observables, bool stripDisconnected=true) const;  Return the parameters of the p.d.f given the provided set o",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:34772,Integrability,depend,dependents,34772,"oArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet &set, bool valueOnly=true) const;  Given a set of possible observables, return the observables that this PDF depends on. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet *depList, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData &data, bool stripDisconnected=true) const;  Return the parameters of this p.d.f when used in conjunction with dataset 'data'. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData *data, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet &observables, bool stripDisconnected=true) const;  Return the parameters of the p.d.f given the provided set of observables. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet *observables, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; virtual bool getParameters (const RooArgSet *observables, RooArgSet &outputSet, bool stripDisconnected=true) const;  Fills a list with leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; RooAbsProxy * getProxy (Int_t index) const;  Return the nth proxy from the proxy list. ;  ; const Text_t * getStringAttribute (",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:36795,Integrability,depend,depend,36795,"connected=true) const;  Return RooArgSet with all variables (tree leaf nodes of expression tree) ;  ; void graphVizTree (const char *fileName, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Create a GraphViz .dot file visualizing the expression tree headed by this RooAbsArg object. ;  ; void graphVizTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; v",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:37201,Integrability,depend,dependents,37201,"izTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:37407,Integrability,depend,dependents,37407,"am. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::o",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:38645,Integrability,interface,interface,38645,"y of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::ostream &os, const char *indent="""", const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on given ostream. ;  ; virtual void printCompactTreeHook (std::ostream &os, const char *ind="""");  Hook function interface for object to insert additional information when printed in the context of a tree structure. ;  ; void printComponentTree (const char *indent="""", const char *namePat=nullptr, Int_t nLevel=999);  Print tree structure of expression tree on given ostream, only branch nodes are printed. ;  ; void printDirty (bool depth=true) const;  Print information about current value dirty state information. ;  ; virtual void printMetaArgs (std::ostream &) const;  ; void printName (std::ostream &os) const override;  Print object name. ;  ; void printTitle (std::ostream &os) const override;  Print object title. ;  ; void printTree (std::ostream &os, TString indent="""") const override;  Print object tree structure. ;  ; bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (co",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:43113,Integrability,integrat,integrated,43113," *list, const RooAbsArg *arg=nullptr, bool recurseNonDerived=false) const;  Fill supplied list with all leaf nodes of the arg tree, starting with ourself as top node. ;  ; void branchNodeServerList (RooAbsCollection *list, const RooAbsArg *arg=nullptr, bool recurseNonDerived=false) const;  Fill supplied list with all branch nodes of the arg tree starting with ourself as top node. ;  ; void treeNodeServerList (RooAbsCollection *list, const RooAbsArg *arg=nullptr, bool doBranch=true, bool doLeaf=true, bool valueOnly=false, bool recurseNonDerived=false) const;  Fill supplied list with nodes of the arg tree, following all server links, starting with ourself as top node. ;  ; virtual bool isFundamental () const;  Is this object a fundamental type that can be added to a dataset? Fundamental-type subclasses override this method to return true. ;  ; virtual bool isLValue () const;  Is this argument an l-value, i.e., can it appear on the left-hand side of an assignment expression? LValues are also special since they can potentially be analytically integrated and generated. ;  ; bool redirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool isRecursionStep=false);  Replace all direct servers of this object with the new servers in newServerList. ;  ; bool redirectServers (std::unordered_map< RooAbsArg *, RooAbsArg * > const &replacements);  Replace some servers of this object. ;  ; bool recursiveRedirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool recurseInNewSet=true);  Recursively replace all servers with the new servers in newSet. ;  ; virtual void serverNameChangeHook (const RooAbsArg *, const RooAbsArg *);  ; void addServer (RooAbsArg &server, bool valueProp=true, bool shapeProp=false, std::size_t refCount=1);  Register another RooAbsArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:43970,Integrability,depend,depend,43970,"tal-type subclasses override this method to return true. ;  ; virtual bool isLValue () const;  Is this argument an l-value, i.e., can it appear on the left-hand side of an assignment expression? LValues are also special since they can potentially be analytically integrated and generated. ;  ; bool redirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool isRecursionStep=false);  Replace all direct servers of this object with the new servers in newServerList. ;  ; bool redirectServers (std::unordered_map< RooAbsArg *, RooAbsArg * > const &replacements);  Replace some servers of this object. ;  ; bool recursiveRedirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool recurseInNewSet=true);  Recursively replace all servers with the new servers in newSet. ;  ; virtual void serverNameChangeHook (const RooAbsArg *, const RooAbsArg *);  ; void addServer (RooAbsArg &server, bool valueProp=true, bool shapeProp=false, std::size_t refCount=1);  Register another RooAbsArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old s",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:44667,Integrability,depend,depend,44667,"Change=false, bool recurseInNewSet=true);  Recursively replace all servers with the new servers in newSet. ;  ; virtual void serverNameChangeHook (const RooAbsArg *, const RooAbsArg *);  ; void addServer (RooAbsArg &server, bool valueProp=true, bool shapeProp=false, std::size_t refCount=1);  Register another RooAbsArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of ",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:47332,Integrability,depend,dependentOverlaps,47332,"es. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooAbsData *dset;  ;  R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooArgSet *depList;  ;  R__DEPRECATED (6, 36, ""Use checkObservables()."") inline bool checkDependents(const RooArgSet *nset) const;  ;  R__DEPRECATED (6, 36, ""Use recursiveCheckObservables()."") inline bool recursiveCheckDependents(const RooArgSet *nset) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void F",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:47441,Integrability,depend,dependentOverlaps,47441,"operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooAbsData *dset;  ;  R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooArgSet *depList;  ;  R__DEPRECATED (6, 36, ""Use checkObservables()."") inline bool checkDependents(const RooArgSet *nset) const;  ;  R__DEPRECATED (6, 36, ""Use recursiveCheckObservables()."") inline bool recursiveCheckDependents(const RooArgSet *nset) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  R",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:50762,Integrability,message,message,50762,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:51303,Integrability,message,message,51303,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:52293,Integrability,message,message,52293,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:55387,Integrability,message,message,55387,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption s",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:55760,Integrability,message,message,55760," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char *",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:57939,Integrability,message,messages,57939," static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooResolutionModel; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooFormulaVar * identity ();  Return identity formula pointer. ;  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (s",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:58076,Integrability,integrat,integration,58076,");  ; static const char * DeclFileName ();  ; static RooFormulaVar * identity ();  Return identity formula pointer. ;  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging ",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:58478,Integrability,message,message,58478,"ls. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:58569,Integrability,message,messages,58569,"ls. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:61497,Integrability,rout,routine,61497,"tic void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; void changeBasis (RooFormulaVar *basis) override;  Changes associated bases function to 'inBasis'. ;  ; double evaluate () const override;  Evaluate the truth model: a delta function when used as PDF, the basis function itself, when convoluted with a basis function. ;  ;  Protected Member Functions inherited from RooResolutionModel; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursive) override;  Forward redirectServers call to our basis function, which is not connected to either resolution model or the physics model. ;  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events. ;  ; virtual bool syncNormalization (const RooArgSet *dset, bool adjustProxies=true) const;  Verify that the normalization integral cached with this PDF is valid for given set of normalization o",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:61663,Integrability,rout,routine,61663,"ected Member Functions; void changeBasis (RooFormulaVar *basis) override;  Changes associated bases function to 'inBasis'. ;  ; double evaluate () const override;  Evaluate the truth model: a delta function when used as PDF, the basis function itself, when convoluted with a basis function. ;  ;  Protected Member Functions inherited from RooResolutionModel; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursive) override;  Forward redirectServers call to our basis function, which is not connected to either resolution model or the physics model. ;  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events. ;  ; virtual bool syncNormalization (const RooArgSet *dset, bool adjustProxies=true) const;  Verify that the normalization integral cached with this PDF is valid for given set of normalization observables. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of gi",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:63685,Integrability,integrat,integrated,63685,"ttachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check if current value is valid. ;  ; virtual bool isValidReal (double, bool printError=false) const;  Interface function to check if given value is a valid value for this object. Returns true unless overridden. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matc",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:63743,Integrability,integrat,integration,63743,"ttachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check if current value is valid. ;  ; virtual bool isValidReal (double, bool printError=false) const;  Interface function to check if given value is a valid value for this object. Returns true unless overridden. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matc",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:66620,Integrability,wrap,wrapper,66620,"onst;  Helper function for plotting of composite p.d.fs. ;  ; RooPlot * plotOnWithErrorBand (RooPlot *frame, const RooFitResult &fr, double Z, const RooArgSet *params, const RooLinkedList &argList, bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; virtual void selectNormalizationRange (const char *rangeName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:72735,Integrability,integrat,integration,72735,s function convolved with this resolution model. ;  ; Int_t _basisCode;  Identifier code for selected basis function. ;  ; bool _ownBasis;  Flag indicating ownership of _basis. ;  ; RooTemplateProxy< RooAbsRealLValue > x;  Dependent/convolution variable. ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::,MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:2443,Modifiability,inherit,inherited,2443," generateEvent (Int_t code) override;  Implement internal generator for observable x, x=0 for all events following definition of delta function. ;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Advertise analytical integrals for compiled basis functions and when used as p.d.f without basis function. ;  ; Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const override;  Advertise internal generator for observable x. ;  ; TClass * IsA () const override;  ; RooAbsGenContext * modelGenContext (const RooAbsAnaConvPdf &convPdf, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooResolutionModel;  RooResolutionModel ()=default;  ;  RooResolutionModel (const char *name, const char *title, RooAbsRealLValue &x);  Constructor with convolution variable 'x'. ;  ;  RooResolutionModel (const RooResolutionModel &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooResolutionModel () override;  Destructor. ;  ; const RooFormulaVar & basis () const;  ; const RooRealVar & basisConvVar () const;  Return the convolution variable of the selection basis function. ;  ; virtual RooResolutionModel * convolution (RooFormulaVar *basis, RooAbsArg *owner) const;  Instantiate a clone of this resolution model representing a convolution with given basis function. ;  ; RooAbsRealLValue & convVar () const;  Return the convolution variable of the resolution model. ;  ; double getNorm (const RooArgSet *nset=nullptr) const override;  Return the integral of this PDF over all elements of 'nset'. ;  ; double getValV (const RooArgSet *nset=nullptr) const override;  Modified version of RooAbsPdf::getValF(). ;  ; bool",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:2623,Modifiability,variab,variable,2623," generateEvent (Int_t code) override;  Implement internal generator for observable x, x=0 for all events following definition of delta function. ;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Advertise analytical integrals for compiled basis functions and when used as p.d.f without basis function. ;  ; Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const override;  Advertise internal generator for observable x. ;  ; TClass * IsA () const override;  ; RooAbsGenContext * modelGenContext (const RooAbsAnaConvPdf &convPdf, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooResolutionModel;  RooResolutionModel ()=default;  ;  RooResolutionModel (const char *name, const char *title, RooAbsRealLValue &x);  Constructor with convolution variable 'x'. ;  ;  RooResolutionModel (const RooResolutionModel &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooResolutionModel () override;  Destructor. ;  ; const RooFormulaVar & basis () const;  ; const RooRealVar & basisConvVar () const;  Return the convolution variable of the selection basis function. ;  ; virtual RooResolutionModel * convolution (RooFormulaVar *basis, RooAbsArg *owner) const;  Instantiate a clone of this resolution model representing a convolution with given basis function. ;  ; RooAbsRealLValue & convVar () const;  Return the convolution variable of the resolution model. ;  ; double getNorm (const RooArgSet *nset=nullptr) const override;  Return the integral of this PDF over all elements of 'nset'. ;  ; double getValV (const RooArgSet *nset=nullptr) const override;  Modified version of RooAbsPdf::getValF(). ;  ; bool",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:2906,Modifiability,variab,variable,2906," Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const override;  Advertise internal generator for observable x. ;  ; TClass * IsA () const override;  ; RooAbsGenContext * modelGenContext (const RooAbsAnaConvPdf &convPdf, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooResolutionModel;  RooResolutionModel ()=default;  ;  RooResolutionModel (const char *name, const char *title, RooAbsRealLValue &x);  Constructor with convolution variable 'x'. ;  ;  RooResolutionModel (const RooResolutionModel &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooResolutionModel () override;  Destructor. ;  ; const RooFormulaVar & basis () const;  ; const RooRealVar & basisConvVar () const;  Return the convolution variable of the selection basis function. ;  ; virtual RooResolutionModel * convolution (RooFormulaVar *basis, RooAbsArg *owner) const;  Instantiate a clone of this resolution model representing a convolution with given basis function. ;  ; RooAbsRealLValue & convVar () const;  Return the convolution variable of the resolution model. ;  ; double getNorm (const RooArgSet *nset=nullptr) const override;  Return the integral of this PDF over all elements of 'nset'. ;  ; double getValV (const RooArgSet *nset=nullptr) const override;  Modified version of RooAbsPdf::getValF(). ;  ; bool isBasisSupported (const char *name) const;  ; bool isConvolved () const;  ; virtual void normLeafServerList (RooArgSet &list) const;  Floating point error checking and tracing for given float value. ;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose=false, TString indent="""") const override;  Print info about this object to the specified stream. ;  ; bool",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:3208,Modifiability,variab,variable,3208,"e=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooResolutionModel;  RooResolutionModel ()=default;  ;  RooResolutionModel (const char *name, const char *title, RooAbsRealLValue &x);  Constructor with convolution variable 'x'. ;  ;  RooResolutionModel (const RooResolutionModel &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooResolutionModel () override;  Destructor. ;  ; const RooFormulaVar & basis () const;  ; const RooRealVar & basisConvVar () const;  Return the convolution variable of the selection basis function. ;  ; virtual RooResolutionModel * convolution (RooFormulaVar *basis, RooAbsArg *owner) const;  Instantiate a clone of this resolution model representing a convolution with given basis function. ;  ; RooAbsRealLValue & convVar () const;  Return the convolution variable of the resolution model. ;  ; double getNorm (const RooArgSet *nset=nullptr) const override;  Return the integral of this PDF over all elements of 'nset'. ;  ; double getValV (const RooArgSet *nset=nullptr) const override;  Modified version of RooAbsPdf::getValF(). ;  ; bool isBasisSupported (const char *name) const;  ; bool isConvolved () const;  ; virtual void normLeafServerList (RooArgSet &list) const;  Floating point error checking and tracing for given float value. ;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose=false, TString indent="""") const override;  Print info about this object to the specified stream. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:4101,Modifiability,inherit,inherited,4101,"del representing a convolution with given basis function. ;  ; RooAbsRealLValue & convVar () const;  Return the convolution variable of the resolution model. ;  ; double getNorm (const RooArgSet *nset=nullptr) const override;  Return the integral of this PDF over all elements of 'nset'. ;  ; double getValV (const RooArgSet *nset=nullptr) const override;  Modified version of RooAbsPdf::getValF(). ;  ; bool isBasisSupported (const char *name) const;  ; bool isConvolved () const;  ; virtual void normLeafServerList (RooArgSet &list) const;  Floating point error checking and tracing for given float value. ;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose=false, TString indent="""") const override;  Print info about this object to the specified stream. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; virtual RooAbsGenContext * binnedGenContext (const RooArgSet &vars, bool verbose=false) const;  Return a binned generator context. ;  ; bool canBeExtended () const;  If true, PDF can provide extend",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:5078,Modifiability,extend,extended,5078,"NVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; virtual RooAbsGenContext * binnedGenContext (const RooArgSet &vars, bool verbose=false) const;  Return a binned generator context. ;  ; bool canBeExtended () const;  If true, PDF can provide extended likelihood term. ;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; RooFit::OwningPtr< RooAbsReal > createCdf (const RooArgSet &iset, const RooArgSet &nset=RooArgSet());  Create a cumulative distribution function of this p.d.f in terms of the observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createCdf (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; virtual std::unique_ptr< RooAbsReal > createExpectedEventsFunc (const RooArgSet *nset) const;  Returns an object that represents the expected number of events for a given normalization set, similar to how createIntegral() return",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:6707,Modifiability,extend,extended,6707,"nst RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; virtual std::unique_ptr< RooAbsReal > createExpectedEventsFunc (const RooArgSet *nset) const;  Returns an object that represents the expected number of events for a given normalization set, similar to how createIntegral() returns an object that returns the integral. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooAbsReal > createNLL (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Construct representation of -log(L) of PDF with given dataset. ;  ; virtual RooAbsPdf * createProjection (const RooArgSet &iset);  Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; virtual double expectedEvents (const RooArgSet *nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; virtual ExtendMode extendMode () const;",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:6857,Modifiability,extend,extended,6857,"ervables listed in iset. ;  ; virtual std::unique_ptr< RooAbsReal > createExpectedEventsFunc (const RooArgSet *nset) const;  Returns an object that represents the expected number of events for a given normalization set, similar to how createIntegral() returns an object that returns the integral. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooAbsReal > createNLL (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Construct representation of -log(L) of PDF with given dataset. ;  ; virtual RooAbsPdf * createProjection (const RooArgSet &iset);  Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; virtual double expectedEvents (const RooArgSet *nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; virtual ExtendMode extendMode () const;  Returns ability of PDF to provide extended likelihood terms. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given da",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:6890,Modifiability,extend,extendedTerm,6890,"const;  Returns an object that represents the expected number of events for a given normalization set, similar to how createIntegral() returns an object that returns the integral. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooAbsReal > createNLL (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Construct representation of -log(L) of PDF with given dataset. ;  ; virtual RooAbsPdf * createProjection (const RooArgSet &iset);  Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; virtual double expectedEvents (const RooArgSet *nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; virtual ExtendMode extendMode () const;  Returns ability of PDF to provide extended likelihood terms. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; virtual RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const R",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:7003,Modifiability,extend,extendedTerm,7003," similar to how createIntegral() returns an object that returns the integral. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooAbsReal > createNLL (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Construct representation of -log(L) of PDF with given dataset. ;  ; virtual RooAbsPdf * createProjection (const RooArgSet &iset);  Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; virtual double expectedEvents (const RooArgSet *nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; virtual ExtendMode extendMode () const;  Returns ability of PDF to provide extended likelihood terms. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; virtual RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const;  Interface function to create a generator conte",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:7124,Modifiability,extend,extended,7124,"(RooAbsData &data, CmdArgs_t const &... cmdArgs);  Construct representation of -log(L) of PDF with given dataset. ;  ; virtual RooAbsPdf * createProjection (const RooArgSet &iset);  Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; virtual double expectedEvents (const RooArgSet *nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; virtual ExtendMode extendMode () const;  Returns ability of PDF to provide extended likelihood terms. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; virtual RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const;  Interface function to create a generator context from a p.d.f. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:7292,Modifiability,extend,extendedTerm,7292," p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; virtual double expectedEvents (const RooArgSet *nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; virtual ExtendMode extendMode () const;  Returns ability of PDF to provide extended likelihood terms. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; virtual RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const;  Interface function to create a generator context from a p.d.f. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > gen",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:7390,Modifiability,extend,extended,7390," p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; virtual double expectedEvents (const RooArgSet *nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; virtual ExtendMode extendMode () const;  Returns ability of PDF to provide extended likelihood terms. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; virtual RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const;  Interface function to create a generator context from a p.d.f. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > gen",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:7570,Modifiability,extend,extendMode,7570,"expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; virtual double expectedEvents (const RooArgSet *nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; virtual ExtendMode extendMode () const;  Returns ability of PDF to provide extended likelihood terms. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; virtual RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const;  Interface function to create a generator context from a p.d.f. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooDataSet &prototype, Int_t nEvents=0, bool verbose=false, bool randProtoOrder=false, bool resampleProto=false) const;  Generate a new dataset usi",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:7626,Modifiability,extend,extended,7626,"expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; virtual double expectedEvents (const RooArgSet *nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; virtual ExtendMode extendMode () const;  Returns ability of PDF to provide extended likelihood terms. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; virtual RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const;  Interface function to create a generator context from a p.d.f. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooDataSet &prototype, Int_t nEvents=0, bool verbose=false, bool randProtoOrder=false, bool resampleProto=false) const;  Generate a new dataset usi",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:8319,Modifiability,variab,variables,8319,"(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; virtual ExtendMode extendMode () const;  Returns ability of PDF to provide extended likelihood terms. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; virtual RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const;  Interface function to create a generator context from a p.d.f. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooDataSet &prototype, Int_t nEvents=0, bool verbose=false, bool randProtoOrder=false, bool resampleProto=false) const;  Generate a new dataset using a prototype dataset as a model, with values of the variables in whatVars sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, double nEvents=0, bool verbose=false, bool autoBinned=true, const char *binnedTag="""", bool expectedData=false, bool extended=false) const;  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, Int_t nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:8653,Modifiability,variab,variables,8653,"events. ;  ; virtual ExtendMode extendMode () const;  Returns ability of PDF to provide extended likelihood terms. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; virtual RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const;  Interface function to create a generator context from a p.d.f. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooDataSet &prototype, Int_t nEvents=0, bool verbose=false, bool randProtoOrder=false, bool resampleProto=false) const;  Generate a new dataset using a prototype dataset as a model, with values of the variables in whatVars sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, double nEvents=0, bool verbose=false, bool autoBinned=true, const char *binnedTag="""", bool expectedData=false, bool extended=false) const;  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, Int_t nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={});  See RooAbsPdf::generate(const RooArgSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&) ;  ; RooFit::OwningPtr< RooDataSet > generate (GenSpec &) const;  Generate according to GenSpec obtained from prepareMultiGen(). ;  ; virtual RooFit::Ownin",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:8896,Modifiability,extend,extended,8896,"ArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const;  Interface function to create a generator context from a p.d.f. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooDataSet &prototype, Int_t nEvents=0, bool verbose=false, bool randProtoOrder=false, bool resampleProto=false) const;  Generate a new dataset using a prototype dataset as a model, with values of the variables in whatVars sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, double nEvents=0, bool verbose=false, bool autoBinned=true, const char *binnedTag="""", bool expectedData=false, bool extended=false) const;  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, Int_t nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={});  See RooAbsPdf::generate(const RooArgSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&) ;  ; RooFit::OwningPtr< RooDataSet > generate (GenSpec &) const;  Generate according to GenSpec obtained from prepareMultiGen(). ;  ; virtual RooFit::OwningPtr< RooDataHist > generateBinned (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}) const;  Generate a new dataset containing the specified variables with events sampled from our distributio",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:8968,Modifiability,variab,variables,8968,"ArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const;  Interface function to create a generator context from a p.d.f. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooDataSet &prototype, Int_t nEvents=0, bool verbose=false, bool randProtoOrder=false, bool resampleProto=false) const;  Generate a new dataset using a prototype dataset as a model, with values of the variables in whatVars sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, double nEvents=0, bool verbose=false, bool autoBinned=true, const char *binnedTag="""", bool expectedData=false, bool extended=false) const;  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, Int_t nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={});  See RooAbsPdf::generate(const RooArgSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&) ;  ; RooFit::OwningPtr< RooDataSet > generate (GenSpec &) const;  Generate according to GenSpec obtained from prepareMultiGen(). ;  ; virtual RooFit::OwningPtr< RooDataHist > generateBinned (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}) const;  Generate a new dataset containing the specified variables with events sampled from our distributio",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:9813,Modifiability,variab,variables,9813,"our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, double nEvents=0, bool verbose=false, bool autoBinned=true, const char *binnedTag="""", bool expectedData=false, bool extended=false) const;  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, Int_t nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={});  See RooAbsPdf::generate(const RooArgSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&) ;  ; RooFit::OwningPtr< RooDataSet > generate (GenSpec &) const;  Generate according to GenSpec obtained from prepareMultiGen(). ;  ; virtual RooFit::OwningPtr< RooDataHist > generateBinned (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}) const;  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; virtual RooFit::OwningPtr< RooDataHist > generateBinned (const RooArgSet &whatVars, double nEvents, bool expectedData=false, bool extended=false) const;  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; virtual RooFit::OwningPtr< RooDataHist > generateBinned (const RooArgSet &whatVars, double nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}) const;  As RooAbsPdf::generateBinned(const RooArgSet&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&) const. ;  ; virtual RooFit::OwningPtr< RooDataSet > generateSimGlobal (const RooArgSet &whatVars, Int_t nEvents);  Special generator interface for generation of 'global o",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:10001,Modifiability,extend,extended,10001,"ed from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, Int_t nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={});  See RooAbsPdf::generate(const RooArgSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&) ;  ; RooFit::OwningPtr< RooDataSet > generate (GenSpec &) const;  Generate according to GenSpec obtained from prepareMultiGen(). ;  ; virtual RooFit::OwningPtr< RooDataHist > generateBinned (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}) const;  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; virtual RooFit::OwningPtr< RooDataHist > generateBinned (const RooArgSet &whatVars, double nEvents, bool expectedData=false, bool extended=false) const;  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; virtual RooFit::OwningPtr< RooDataHist > generateBinned (const RooArgSet &whatVars, double nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}) const;  As RooAbsPdf::generateBinned(const RooArgSet&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&) const. ;  ; virtual RooFit::OwningPtr< RooDataSet > generateSimGlobal (const RooArgSet &whatVars, Int_t nEvents);  Special generator interface for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true) const;  This helper function finds and collects all constraints terms of all component p.d.f.s and returns a RooArgSet with all those terms. ;  ; vi",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:10073,Modifiability,variab,variables,10073,"ed from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, Int_t nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={});  See RooAbsPdf::generate(const RooArgSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&) ;  ; RooFit::OwningPtr< RooDataSet > generate (GenSpec &) const;  Generate according to GenSpec obtained from prepareMultiGen(). ;  ; virtual RooFit::OwningPtr< RooDataHist > generateBinned (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}) const;  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; virtual RooFit::OwningPtr< RooDataHist > generateBinned (const RooArgSet &whatVars, double nEvents, bool expectedData=false, bool extended=false) const;  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; virtual RooFit::OwningPtr< RooDataHist > generateBinned (const RooArgSet &whatVars, double nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}) const;  As RooAbsPdf::generateBinned(const RooArgSet&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&) const. ;  ; virtual RooFit::OwningPtr< RooDataSet > generateSimGlobal (const RooArgSet &whatVars, Int_t nEvents);  Special generator interface for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true) const;  This helper function finds and collects all constraints terms of all component p.d.f.s and returns a RooArgSet with all those terms. ;  ; vi",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:11176,Modifiability,config,configuration,11176,"led from our distribution. ;  ; virtual RooFit::OwningPtr< RooDataHist > generateBinned (const RooArgSet &whatVars, double nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}) const;  As RooAbsPdf::generateBinned(const RooArgSet&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&) const. ;  ; virtual RooFit::OwningPtr< RooDataSet > generateSimGlobal (const RooArgSet &whatVars, Int_t nEvents);  Special generator interface for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true) const;  This helper function finds and collects all constraints terms of all component p.d.f.s and returns a RooArgSet with all those terms. ;  ; virtual RooArgSet * getConstraints (const RooArgSet &, RooArgSet const &, RooArgSet &) const;  ; const RooNumGenConfig * getGeneratorConfig () const;  Return the numeric MC generator configuration used for this object. ;  ; void getLogProbabilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; virtual void initGenerator (Int_t code);  Interface for one-time initialization ",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:12385,Modifiability,extend,extended,12385,"t;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; virtual void initGenerator (Int_t code);  Interface for one-time initialization to setup the generator for the specified code. ;  ; virtual bool isDirectGenSafe (const RooAbsArg &arg) const;  Check if given observable can be safely generated using the pdfs internal generator mechanism (if that existsP). ;  ; bool mustBeExtended () const;  If true PDF must provide extended likelihood term. ;  ; const char * normRange () const;  ; virtual RooPlot * paramOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Add a box with parameter values (and errors) to the specified frame. ;  ; RooPlot * plotOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const override;  Helper calling plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const override;  Plot (project) PDF on specified frame. ;  ; GenSpec * prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:13498,Modifiability,config,configuration,13498,"normRange () const;  ; virtual RooPlot * paramOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Add a box with parameter values (and errors) to the specified frame. ;  ; RooPlot * plotOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const override;  Helper calling plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const override;  Plot (project) PDF on specified frame. ;  ; GenSpec * prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages fo",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:13986,Modifiability,config,configuration,13986,", const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const override;  Helper calling plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const override;  Plot (project) PDF on specified frame. ;  ; GenSpec * prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *u",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:14082,Modifiability,config,config,14082," plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const override;  Plot (project) PDF on specified frame. ;  ; GenSpec * prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *u",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:14106,Modifiability,config,configuration,14106," plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const override;  Plot (project) PDF on specified frame. ;  ; GenSpec * prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *u",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:14152,Modifiability,config,configuration,14152," plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const override;  Plot (project) PDF on specified frame. ;  ; GenSpec * prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *u",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:14544,Modifiability,config,configuration,14544,"ject for efficient generation of multiple datasets from identical specification. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and paramete",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:14684,Modifiability,config,configuration,14684,"e;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual std::list< double > * binBoundaries (RooAbsRealLValue &obs, double xlo, double xhi) const;  Retrieve bin boundaries ",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:14814,Modifiability,inherit,inherited,14814," error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual std::list< double > * binBoundaries (RooAbsRealLValue &obs, double xlo, double xhi) const;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; RooFit::OwningPtr< RooAbsFunc > bindVars (const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) const;  Create an interface adaptor f(vars) that b",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:15840,Modifiability,adapt,adaptor,15840,"r Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual std::list< double > * binBoundaries (RooAbsRealLValue &obs, double xlo, double xhi) const;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; RooFit::OwningPtr< RooAbsFunc > bindVars (const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) const;  Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ;  ; virtual std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const;  This function defines the analytical integral translation for the class. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a \( \chi^2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={},",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:15887,Modifiability,variab,variables,15887,"r Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual std::list< double > * binBoundaries (RooAbsRealLValue &obs, double xlo, double xhi) const;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; RooFit::OwningPtr< RooAbsFunc > bindVars (const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) const;  Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ;  ; virtual std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const;  This function defines the analytical integral translation for the class. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a \( \chi^2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={},",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:17567,Modifiability,variab,variable,17567,"2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a 2-D \( \chi^2 \) fit using a series of x and y values stored in the dataset xydata. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooLinkedList &cmdList);  Perform a 2-D \( \chi^2 \) fit using a series of x and y values stored in the dataset xydata. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createChi2 (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Create a \( \chi^2 \) variable from a histogram and this function. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createChi2 (RooDataHist &data, const RooLinkedList &cmdList);  ; virtual RooFit::OwningPtr< RooAbsReal > createChi2 (RooDataSet &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Create a \( \chi^2 \) from a series of x and y values stored in a dataset. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createChi2 (RooDataSet &data, const RooLinkedList &cmdList);  See RooAbsReal::createChi2(RooDataSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&) ;  ; RooFit::OwningPtr< RooAbsArg > createFundamental (const char *newname=",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:19248,Modifiability,variab,variables,19248,"inkedList &cmdList);  See RooAbsReal::createChi2(RooDataSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&) ;  ; RooFit::OwningPtr< RooAbsArg > createFundamental (const char *newname=nullptr) const override;  Create a RooRealVar fundamental object with our properties. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, RooLinkedList &argList) const;  Internal method implementing createHistogram. ;  ; TH1 * createHistogram (RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const char *rangeName) const;  Create integral over observables in iset in range named rangeName. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nu",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:20011,Modifiability,config,configuration,20011,"f this function. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, RooLinkedList &argList) const;  Internal method implementing createHistogram. ;  ; TH1 * createHistogram (RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const char *rangeName) const;  Create integral over observables in iset in range named rangeName. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullpt",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:20972,Modifiability,config,configuration,20972,"ntegral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &dependentVars, const RooArgSet *projectedVars, RooArgSet *&cloneSet, const char *rangeName=nullptr, const RooArgSet *condObs=nullptr) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest);  Create a RooProfileLL object that eliminates all nuisance parameters in the",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:25271,Modifiability,config,configuration,25271,"ed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual bool forceAnalyticalInt (const RooAbsArg &) const;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:25398,Modifiability,config,configuration,25398,"ix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual bool forceAnalyticalInt (const RooAbsArg &) const;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; virtual bool isBinnedDistribution (const RooArgSet &) const;  Tests if the distr",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:25661,Modifiability,variab,variable,25661," RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; virtual bool isBinnedDistribution (const RooArgSet &) const;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, t",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:25910,Modifiability,variab,variable,25910,"alIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; virtual bool isBinnedDistribution (const RooArgSet &) const;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; virtual double maxVal (Int_t code) const;  Return maximum value for set of",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:28730,Modifiability,config,configuration,28730,"st;  Equality operator comparing to a double. ;  ; virtual std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for ",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:28827,Modifiability,config,config,28827,"returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:28862,Modifiability,config,configuration,28862,"returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:28907,Modifiability,config,configuration,28907,"returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:29080,Modifiability,variab,variable,29080,"onst RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean a",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:29328,Modifiability,config,configuration,29328,"Set. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedC",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:29469,Modifiability,config,configuration,29469,"mmy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:29721,Modifiability,inherit,inherited,29721,"ool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollectio",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:30790,Modifiability,variab,variable,30790," ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool checkObservables (const RooArgSet *nset) const;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:30825,Modifiability,variab,variables,30825," ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool checkObservables (const RooArgSet *nset) const;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:30997,Modifiability,variab,variable,30997," transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool checkObservables (const RooArgSet *nset) const;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool d",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:31032,Modifiability,variab,variables,31032," transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool checkObservables (const RooArgSet *nset) const;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool d",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:31304,Modifiability,variab,variables,31304,"s'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool checkObservables (const RooArgSet *nset) const;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:33811,Modifiability,variab,variable,33811," bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet &set, bool valueOnly=true) const;  Given a set of possible observables, return the observables that this PDF depends on. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet *depList, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData &data, bool stripDisconnected=true) const;  Return the parameters of this p.d.f when used in conjunction with dataset 'data'. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData *data, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names of the variable lis",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:34728,Modifiability,variab,variable,34728,"oArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet &set, bool valueOnly=true) const;  Given a set of possible observables, return the observables that this PDF depends on. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet *depList, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData &data, bool stripDisconnected=true) const;  Return the parameters of this p.d.f when used in conjunction with dataset 'data'. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData *data, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet &observables, bool stripDisconnected=true) const;  Return the parameters of the p.d.f given the provided set of observables. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet *observables, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; virtual bool getParameters (const RooArgSet *observables, RooArgSet &outputSet, bool stripDisconnected=true) const;  Fills a list with leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; RooAbsProxy * getProxy (Int_t index) const;  Return the nth proxy from the proxy list. ;  ; const Text_t * getStringAttribute (",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:35921,Modifiability,variab,variables,35921," set of observables. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet *observables, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; virtual bool getParameters (const RooArgSet *observables, RooArgSet &outputSet, bool stripDisconnected=true) const;  Fills a list with leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; RooAbsProxy * getProxy (Int_t index) const;  Return the nth proxy from the proxy list. ;  ; const Text_t * getStringAttribute (const Text_t *key) const;  Get string attribute mapped under key 'key'. ;  ; bool getTransientAttribute (const Text_t *name) const;  Check if a named attribute is set. ;  ; RooFit::OwningPtr< RooArgSet > getVariables (bool stripDisconnected=true) const;  Return RooArgSet with all variables (tree leaf nodes of expression tree) ;  ; void graphVizTree (const char *fileName, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Create a GraphViz .dot file visualizing the expression tree headed by this RooAbsArg object. ;  ; void graphVizTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * ",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:47753,Modifiability,inherit,inherited,47753," ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooAbsData *dset;  ;  R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooArgSet *depList;  ;  R__DEPRECATED (6, 36, ""Use checkObservables()."") inline bool checkDependents(const RooArgSet *nset) const;  ;  R__DEPRECATED (6, 36, ""Use recursiveCheckObservables()."") inline bool recursiveCheckDependents(const RooArgSet *nset) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:49299,Modifiability,inherit,inherited,49299,"ects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:50392,Modifiability,inherit,inheritance,50392,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:52391,Modifiability,inherit,inherits,52391,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:52508,Modifiability,inherit,inherits,52508,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:56067,Modifiability,inherit,inherited,56067,"id SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooResolutionModel; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooFormulaVar * identity ();  Return identity formula pointer. ;  ;  Static Pub",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:56891,Modifiability,inherit,inherited,56891,"al Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooResolutionModel; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooFormulaVar * identity ();  Return identity formula pointer. ;  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear th",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:57188,Modifiability,inherit,inherited,57188,"tream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooResolutionModel; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooFormulaVar * identity ();  Return identity formula pointer. ;  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current ev",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:57463,Modifiability,config,configuration,57463,"tream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooResolutionModel; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooFormulaVar * identity ();  Return identity formula pointer. ;  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current ev",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:57726,Modifiability,inherit,inherited,57726," static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooResolutionModel; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooFormulaVar * identity ();  Return identity formula pointer. ;  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (s",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:58088,Modifiability,config,configuration,58088,");  ; static const char * DeclFileName ();  ; static RooFormulaVar * identity ();  Return identity formula pointer. ;  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging ",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:59120,Modifiability,inherit,inherited,59120,"tic std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static T",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:59366,Modifiability,inherit,inherited,59366,"sages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given am",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:59576,Modifiability,inherit,inherited,59576,"sages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given am",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:60094,Modifiability,inherit,inherited,60094,"void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; void changeBasis (RooFormulaVar *basis) override;  Changes associated bases function to 'inBasis'. ;  ; double evaluate () const override;  Evaluate the truth model: a delta function when used as PDF, the basis function itself, when convoluted with a basis function. ;  ;  Protected Member Functions inherited from RooResolutionModel; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursive) override;  Forward redirectServers call to our basis function, which is not connected to either resolution model or the physics model. ;  ;  Protected Member Functions ",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:60912,Modifiability,inherit,inherited,60912,"he TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; void changeBasis (RooFormulaVar *basis) override;  Changes associated bases function to 'inBasis'. ;  ; double evaluate () const override;  Evaluate the truth model: a delta function when used as PDF, the basis function itself, when convoluted with a basis function. ;  ;  Protected Member Functions inherited from RooResolutionModel; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursive) override;  Forward redirectServers call to our basis function, which is not connected to either resolution model or the physics model. ;  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const overri",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:61236,Modifiability,inherit,inherited,61236,");  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; void changeBasis (RooFormulaVar *basis) override;  Changes associated bases function to 'inBasis'. ;  ; double evaluate () const override;  Evaluate the truth model: a delta function when used as PDF, the basis function itself, when convoluted with a basis function. ;  ;  Protected Member Functions inherited from RooResolutionModel; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursive) override;  Forward redirectServers call to our basis function, which is not connected to either resolution model or the physics model. ;  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events. ;  ; virtual bool syncNormalization (const ",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:62469,Modifiability,inherit,inherited,62469,"al std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events. ;  ; virtual bool syncNormalization (const RooArgSet *dset, bool adjustProxies=true) const;  Verify that the normalization integral cached with this PDF is valid for given set of normalization observables. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:63434,Modifiability,parameteriz,parameterized,63434,"  Verify that the normalization integral cached with this PDF is valid for given set of normalization observables. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check if current value is valid. ;  ; virtual bool isValidReal (double, bool printError=false) const;  Interface function to check if given value is a valid value for this object. Returns true unless overridden. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, ",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:66662,Modifiability,inherit,inherited,66662,"ction or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; virtual void selectNormalizationRange (const char *rangeName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtua",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:68805,Modifiability,inherit,inherited,68805," attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Additional Inherited Members;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted =",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:69032,Modifiability,inherit,inherited,69032,"rce element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Additional Inherited Members;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOpt",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:69150,Modifiability,inherit,inherited,69150,"rce element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Additional Inherited Members;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOpt",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:69380,Modifiability,inherit,inherited,69380,"rce element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Additional Inherited Members;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOpt",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:69790,Modifiability,inherit,inherited,69790,"rce element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Additional Inherited Members;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOpt",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:70428,Modifiability,inherit,inherited,70428,"ctivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container t",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:70752,Modifiability,inherit,inherited,70752," ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Protected Attributes inherited from RooResolutionModel; RooFormulaVar * _basis = nullptr;  Basis function convolved with this resolution model. ;  ; Int_t _basisCode;  Iden",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:71112,Modifiability,inherit,inherited,71112,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Protected Attributes inherited from RooResolutionModel; RooFormulaVar * _basis = nullptr;  Basis function convolved with this resolution model. ;  ; Int_t _basisCode;  Identifier code for selected basis function. ;  ; bool _ownBasis;  Flag indicating ownership of _basis. ;  ; RooTemplateProxy< RooAbsRealLValue > x;  Dependent/convolution variable. ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print.",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:71218,Modifiability,inherit,inherited,71218,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Protected Attributes inherited from RooResolutionModel; RooFormulaVar * _basis = nullptr;  Basis function convolved with this resolution model. ;  ; Int_t _basisCode;  Identifier code for selected basis function. ;  ; bool _ownBasis;  Flag indicating ownership of _basis. ;  ; RooTemplateProxy< RooAbsRealLValue > x;  Dependent/convolution variable. ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print.",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:71404,Modifiability,inherit,inherited,71404," ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Protected Attributes inherited from RooResolutionModel; RooFormulaVar * _basis = nullptr;  Basis function convolved with this resolution model. ;  ; Int_t _basisCode;  Identifier code for selected basis function. ;  ; bool _ownBasis;  Flag indicating ownership of _basis. ;  ; RooTemplateProxy< RooAbsRealLValue > x;  Dependent/convolution variable. ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< Roo",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:71623,Modifiability,inherit,inherited,71623," , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Protected Attributes inherited from RooResolutionModel; RooFormulaVar * _basis = nullptr;  Basis function convolved with this resolution model. ;  ; Int_t _basisCode;  Identifier code for selected basis function. ;  ; bool _ownBasis;  Flag indicating ownership of _basis. ;  ; RooTemplateProxy< RooAbsRealLValue > x;  Dependent/convolution variable. ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inheri",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:71942,Modifiability,variab,variable,71942,"tObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Protected Attributes inherited from RooResolutionModel; RooFormulaVar * _basis = nullptr;  Basis function convolved with this resolution model. ;  ; Int_t _basisCode;  Identifier code for selected basis function. ;  ; bool _ownBasis;  Flag indicating ownership of _basis. ;  ; RooTemplateProxy< RooAbsRealLValue > x;  Dependent/convolution variable. ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  ",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:71979,Modifiability,inherit,inherited,71979,");  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Protected Attributes inherited from RooResolutionModel; RooFormulaVar * _basis = nullptr;  Basis function convolved with this resolution model. ;  ; Int_t _basisCode;  Identifier code for selected basis function. ;  ; bool _ownBasis;  Flag indicating ownership of _basis. ;  ; RooTemplateProxy< RooAbsRealLValue > x;  Dependent/convolution variable. ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot ",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:72532,Modifiability,config,configuration,72532,that cannot be handled in a single ioStreamer pass. ;  ;  Protected Attributes inherited from RooResolutionModel; RooFormulaVar * _basis = nullptr;  Basis function convolved with this resolution model. ;  ; Int_t _basisCode;  Identifier code for selected basis function. ;  ; bool _ownBasis;  Flag indicating ownership of _basis. ;  ; RooTemplateProxy< RooAbsRealLValue > x;  Dependent/convolution variable. ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ;,MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:72664,Modifiability,inherit,inherited,72664,s function convolved with this resolution model. ;  ; Int_t _basisCode;  Identifier code for selected basis function. ;  ; bool _ownBasis;  Flag indicating ownership of _basis. ;  ; RooTemplateProxy< RooAbsRealLValue > x;  Dependent/convolution variable. ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::,MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:73431,Modifiability,inherit,inherited,73431,"Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _dataToken = std::numeric_limits<std::size_t>::max();  In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:74707,Modifiability,inherit,inherited,74707," In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooTruthModel.h>. Inheritance diagram for RooTruthModel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooTruthModel() [1/3]. RooTruthModel::RooTruthModel ; (; ). default . ◆ RooTruthModel() [2/3]. RooTruthModel::RooTruthModel ; (; const char * ; name, . const char * ; title, . RooAbsRealLValue & ; x . ). Constructor of a truth resolution model, i.e",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:74796,Modifiability,inherit,inherited,74796," In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooTruthModel.h>. Inheritance diagram for RooTruthModel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooTruthModel() [1/3]. RooTruthModel::RooTruthModel ; (; ). default . ◆ RooTruthModel() [2/3]. RooTruthModel::RooTruthModel ; (; const char * ; name, . const char * ; title, . RooAbsRealLValue & ; x . ). Constructor of a truth resolution model, i.e",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:74923,Modifiability,inherit,inherited,74923," In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooTruthModel.h>. Inheritance diagram for RooTruthModel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooTruthModel() [1/3]. RooTruthModel::RooTruthModel ; (; ). default . ◆ RooTruthModel() [2/3]. RooTruthModel::RooTruthModel ; (; const char * ; name, . const char * ; title, . RooAbsRealLValue & ; x . ). Constructor of a truth resolution model, i.e",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:75079,Modifiability,inherit,inherited,75079,"nt status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooTruthModel.h>. Inheritance diagram for RooTruthModel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooTruthModel() [1/3]. RooTruthModel::RooTruthModel ; (; ). default . ◆ RooTruthModel() [2/3]. RooTruthModel::RooTruthModel ; (; const char * ; name, . const char * ; title, . RooAbsRealLValue & ; x . ). Constructor of a truth resolution model, i.e. a delta function in observable 'xIn'. ; Definition at line 89 of file RooTruthModel.cxx. ◆ RooTruthModel() [3/3]. RooTruthModel::RooTruthModel ; (; const RooTruthModel & ; other, . const char * ; name = nullptr . ). inline . Definition at line 26 of file RooTruthModel.h. Member Function Documentation. ◆ analyticalIntegral(). double RooTruthModel::analyti",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:75248,Modifiability,inherit,inherited,75248,"o global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooTruthModel.h>. Inheritance diagram for RooTruthModel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooTruthModel() [1/3]. RooTruthModel::RooTruthModel ; (; ). default . ◆ RooTruthModel() [2/3]. RooTruthModel::RooTruthModel ; (; const char * ; name, . const char * ; title, . RooAbsRealLValue & ; x . ). Constructor of a truth resolution model, i.e. a delta function in observable 'xIn'. ; Definition at line 89 of file RooTruthModel.cxx. ◆ RooTruthModel() [3/3]. RooTruthModel::RooTruthModel ; (; const RooTruthModel & ; other, . const char * ; name = nullptr . ). inline . Definition at line 26 of file RooTruthModel.h. Member Function Documentation. ◆ analyticalIntegral(). double RooTruthModel::analyticalIntegral ; (; Int_t ; code, . const char * ; rangeName = nullptr . ); const. overridevirtual . Implement analytical integrals when used as",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:28594,Performance,cache,cache,28594,"nting moment of function of given order. ;  ; virtual double offset () const;  ; bool operator== (const RooAbsArg &other) const override;  Equality operator when comparing to another RooAbsArg. ;  ; bool operator== (double value) const;  Equality operator comparing to a double. ;  ; virtual std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the special",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:44875,Performance,optimiz,optimizeCacheMode,44875,"sArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void se",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:44935,Performance,cache,cache,44935,"sArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void se",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:44946,Performance,optimiz,optimization,44946,"sArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void se",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:45015,Performance,optimiz,optimizeCacheMode,45015," a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAnd",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:45127,Performance,cache,cache,45127," a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAnd",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:45138,Performance,optimiz,optimization,45138," a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAnd",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:45259,Performance,cache,cacheList,45259,"th 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructo",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:45366,Performance,cache,cached,45366,"th 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructo",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:45491,Performance,cache,cacheList,45491,"ooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void set",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:45629,Performance,cache,cached,45629,"ooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void set",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:45823,Performance,perform,perform,45823,"eChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirt",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:45845,Performance,optimiz,optimization,45845,"eChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirt",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:46144,Performance,cache,cache,46144,"acheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache ()",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:46232,Performance,cache,cache,46232,"rgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:46367,Performance,cache,caches,46367,"list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependen",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:46443,Performance,cache,cache,46443,". ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooAbsData *dset;  ;  R__DEPRECATED (6, 36, ""Use observableOverl",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:46919,Performance,cache,cacheUniqueSuffix,46919,"ool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooAbsData *dset;  ;  R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooArgSet *depList;  ;  R__DEPRECATED (6, 36, ""Use checkObservables()."") inline bool checkDependents(const RooArgSet *nset) const;  ;  R__DEPRECATED (6, 36, ""Use recursiveCheckObservables()."") inline bool recursiveCheckDependents(const RooArgSet *nset) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ;",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:47099,Performance,cache,cache,47099,"ool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooAbsData *dset;  ;  R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooArgSet *depList;  ;  R__DEPRECATED (6, 36, ""Use checkObservables()."") inline bool checkDependents(const RooArgSet *nset) const;  ;  R__DEPRECATED (6, 36, ""Use recursiveCheckObservables()."") inline bool recursiveCheckDependents(const RooArgSet *nset) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ;",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:62362,Performance,cache,cached,62362,"onstructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events. ;  ; virtual bool syncNormalization (const RooArgSet *dset, bool adjustProxies=true) const;  Verify that the normalization integral cached with this PDF is valid for given set of normalization observables. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createInt",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:62772,Performance,cache,cached,62772," const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events. ;  ; virtual bool syncNormalization (const RooArgSet *dset, bool adjustProxies=true) const;  Verify that the normalization integral cached with this PDF is valid for given set of normalization observables. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, ",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:62813,Performance,cache,cache,62813," const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events. ;  ; virtual bool syncNormalization (const RooArgSet *dset, bool adjustProxies=true) const;  Verify that the normalization integral cached with this PDF is valid for given set of normalization observables. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, ",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:65909,Performance,perform,perform,65909,"onst RooArgProxy &c, const RooArgProxy &d) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgSet &set) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgsByName (const RooArgSet &allArgs, RooArgSet &matchedArgs, const TList &nameList) const;  Check if allArgs contains matching elements for each name in nameList. ;  ; virtual RooPlot * plotAsymOn (RooPlot *frame, const RooAbsCategoryLValue &asymCat, PlotOpt o) const;  ; void plotOnCompSelect (RooArgSet *selNodes) const;  Helper function for plotting of composite p.d.fs. ;  ; RooPlot * plotOnWithErrorBand (RooPlot *frame, const RooFitResult &fr, double Z, const RooArgSet *params, const RooLinkedList &argList, bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; virtual void selectNormalizationRange (const char *rangeName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is f",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:67758,Performance,optimiz,optimizeDirtyHook,67758,";  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoErr",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:68246,Performance,cache,cached,68246,"id graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Additional Inherited Members;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , Cou",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:74268,Performance,cache,cache,74268," _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _dataToken = std::numeric_limits<std::size_t>::max();  In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrint",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:75163,Performance,cache,cache,75163,"nt status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooTruthModel.h>. Inheritance diagram for RooTruthModel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooTruthModel() [1/3]. RooTruthModel::RooTruthModel ; (; ). default . ◆ RooTruthModel() [2/3]. RooTruthModel::RooTruthModel ; (; const char * ; name, . const char * ; title, . RooAbsRealLValue & ; x . ). Constructor of a truth resolution model, i.e. a delta function in observable 'xIn'. ; Definition at line 89 of file RooTruthModel.cxx. ◆ RooTruthModel() [3/3]. RooTruthModel::RooTruthModel ; (; const RooTruthModel & ; other, . const char * ; name = nullptr . ). inline . Definition at line 26 of file RooTruthModel.h. Member Function Documentation. ◆ analyticalIntegral(). double RooTruthModel::analyti",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:12244,Safety,safe,safely,12244,"ilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; virtual void initGenerator (Int_t code);  Interface for one-time initialization to setup the generator for the specified code. ;  ; virtual bool isDirectGenSafe (const RooAbsArg &arg) const;  Check if given observable can be safely generated using the pdfs internal generator mechanism (if that existsP). ;  ; bool mustBeExtended () const;  If true PDF must provide extended likelihood term. ;  ; const char * normRange () const;  ; virtual RooPlot * paramOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Add a box with parameter values (and errors) to the specified frame. ;  ; RooPlot * plotOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const override;  Helper calling plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const override;  Plot (pr",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:65925,Safety,sanity check,sanity check,65925,"onst RooArgProxy &c, const RooArgProxy &d) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgSet &set) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgsByName (const RooArgSet &allArgs, RooArgSet &matchedArgs, const TList &nameList) const;  Check if allArgs contains matching elements for each name in nameList. ;  ; virtual RooPlot * plotAsymOn (RooPlot *frame, const RooAbsCategoryLValue &asymCat, PlotOpt o) const;  ; void plotOnCompSelect (RooArgSet *selNodes) const;  Helper function for plotting of composite p.d.fs. ;  ; RooPlot * plotOnWithErrorBand (RooPlot *frame, const RooFitResult &fr, double Z, const RooArgSet *params, const RooLinkedList &argList, bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; virtual void selectNormalizationRange (const char *rangeName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is f",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:65957,Safety,safe,safe,65957,"onst RooArgProxy &c, const RooArgProxy &d) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgSet &set) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgsByName (const RooArgSet &allArgs, RooArgSet &matchedArgs, const TList &nameList) const;  Check if allArgs contains matching elements for each name in nameList. ;  ; virtual RooPlot * plotAsymOn (RooPlot *frame, const RooAbsCategoryLValue &asymCat, PlotOpt o) const;  ; void plotOnCompSelect (RooArgSet *selNodes) const;  Helper function for plotting of composite p.d.fs. ;  ; RooPlot * plotOnWithErrorBand (RooPlot *frame, const RooFitResult &fr, double Z, const RooArgSet *params, const RooLinkedList &argList, bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; virtual void selectNormalizationRange (const char *rangeName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is f",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:48621,Security,hash,hash,48621,"ED (6, 36, ""Use recursiveCheckObservables()."") inline bool recursiveCheckDependents(const RooArgSet *nset) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:6260,Testability,log,log,6260,"< RooAbsReal > createCdf (const RooArgSet &iset, const RooArgSet &nset=RooArgSet());  Create a cumulative distribution function of this p.d.f in terms of the observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createCdf (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; virtual std::unique_ptr< RooAbsReal > createExpectedEventsFunc (const RooArgSet *nset) const;  Returns an object that represents the expected number of events for a given normalization set, similar to how createIntegral() returns an object that returns the integral. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooAbsReal > createNLL (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Construct representation of -log(L) of PDF with given dataset. ;  ; virtual RooAbsPdf * createProjection (const RooArgSet &iset);  Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; virtual double expectedEvents (const RooArgSet *nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given num",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:7201,Testability,log,log,7201,"(RooAbsData &data, CmdArgs_t const &... cmdArgs);  Construct representation of -log(L) of PDF with given dataset. ;  ; virtual RooAbsPdf * createProjection (const RooArgSet &iset);  Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; virtual double expectedEvents (const RooArgSet *nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; virtual ExtendMode extendMode () const;  Returns ability of PDF to provide extended likelihood terms. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; virtual RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const;  Interface function to create a generator context from a p.d.f. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:7467,Testability,log,log,7467," p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; virtual double expectedEvents (const RooArgSet *nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; virtual ExtendMode extendMode () const;  Returns ability of PDF to provide extended likelihood terms. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; virtual RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const;  Interface function to create a generator context from a p.d.f. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > gen",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:11381,Testability,log,log,11381,"{}) const;  As RooAbsPdf::generateBinned(const RooArgSet&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&) const. ;  ; virtual RooFit::OwningPtr< RooDataSet > generateSimGlobal (const RooArgSet &whatVars, Int_t nEvents);  Special generator interface for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true) const;  This helper function finds and collects all constraints terms of all component p.d.f.s and returns a RooArgSet with all those terms. ;  ; virtual RooArgSet * getConstraints (const RooArgSet &, RooArgSet const &, RooArgSet &) const;  ; const RooNumGenConfig * getGeneratorConfig () const;  Return the numeric MC generator configuration used for this object. ;  ; void getLogProbabilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; virtual void initGenerator (Int_t code);  Interface for one-time initialization to setup the generator for the specified code. ;  ; virtual bool isDirectGenSafe (const RooAbsArg &arg) const;  Check if given observable can be safely generated using the pdfs internal generator mechanism (if that existsP). ;  ; bool mustBeExtended () con",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:11482,Testability,log,log,11482,"{}) const;  As RooAbsPdf::generateBinned(const RooArgSet&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&) const. ;  ; virtual RooFit::OwningPtr< RooDataSet > generateSimGlobal (const RooArgSet &whatVars, Int_t nEvents);  Special generator interface for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true) const;  This helper function finds and collects all constraints terms of all component p.d.f.s and returns a RooArgSet with all those terms. ;  ; virtual RooArgSet * getConstraints (const RooArgSet &, RooArgSet const &, RooArgSet &) const;  ; const RooNumGenConfig * getGeneratorConfig () const;  Return the numeric MC generator configuration used for this object. ;  ; void getLogProbabilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; virtual void initGenerator (Int_t code);  Interface for one-time initialization to setup the generator for the specified code. ;  ; virtual bool isDirectGenSafe (const RooAbsArg &arg) const;  Check if given observable can be safely generated using the pdfs internal generator mechanism (if that existsP). ;  ; bool mustBeExtended () con",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:26698,Testability,log,logEvalError,26698,"the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; virtual bool isBinnedDistribution (const RooArgSet &) const;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; virtual double maxVal (Int_t code) const;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; virtual Int_t minTrialSamples (const RooArgSet &) const;  ; RooAbsMoment * moment (RooRealVar &obs, const RooArgSet &normObs, Int_t order, bool central, bool takeRoot, bool intNormObs);  Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ;  ; RooAbsMoment * moment (RooRealVar &obs, Int_t order, bool central, bool takeRoot);  Return function representing moment of function of given order. ;  ; virtual double offset () const;  ; bool operator== (const RooAbsArg &other) const override;  Equality operator when comparing to ano",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:37165,Testability,test,testArg,37165,"izTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:37289,Testability,test,testArg,37289,"izTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:37371,Testability,test,testArg,37371,"am. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::o",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:37495,Testability,test,testArg,37495,"am. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::o",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:37599,Testability,test,testArg,37599,") const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::ostream &os, const char *indent="""", const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on given ostream. ;  ; virtual void printCompactTreeHook (std::ostream &os",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:45393,Testability,test,test,45393,"th 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructo",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:45656,Testability,test,test,45656,"ooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void set",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:58339,Testability,log,logging,58339,");  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static vo",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:58400,Testability,log,logEvalError,58400,"ls. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:58561,Testability,log,logging,58561,"ls. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:58621,Testability,log,logging,58621,"ls. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:58733,Testability,log,logged,58733,"Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version (",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:58896,Testability,log,logged,58896,"();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get st",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:59027,Testability,log,logging,59027,"  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bo",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:70954,Testability,test,testArg,70954,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Protected Attributes inherited from RooResolutionModel; RooFormulaVar * _basis = nullptr;  Basis function convolved with this resolution model. ;  ; Int_t _basisCode;  Identifier code for selected basis function. ;  ; bool _ownBasis;  Flag indicating ownership of _basis. ;  ; RooTemplateProxy< RooAbsRealLValue > x;  Dependent/convolution variable. ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print.",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:71001,Testability,test,testArg,71001,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Protected Attributes inherited from RooResolutionModel; RooFormulaVar * _basis = nullptr;  Basis function convolved with this resolution model. ;  ; Int_t _basisCode;  Identifier code for selected basis function. ;  ; bool _ownBasis;  Flag indicating ownership of _basis. ;  ; RooTemplateProxy< RooAbsRealLValue > x;  Dependent/convolution variable. ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print.",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:71031,Testability,test,testArg,71031,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Protected Attributes inherited from RooResolutionModel; RooFormulaVar * _basis = nullptr;  Basis function convolved with this resolution model. ;  ; Int_t _basisCode;  Identifier code for selected basis function. ;  ; bool _ownBasis;  Flag indicating ownership of _basis. ;  ; RooTemplateProxy< RooAbsRealLValue > x;  Dependent/convolution variable. ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print.",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:71082,Testability,test,testArg,71082,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Protected Attributes inherited from RooResolutionModel; RooFormulaVar * _basis = nullptr;  Basis function convolved with this resolution model. ;  ; Int_t _basisCode;  Identifier code for selected basis function. ;  ; bool _ownBasis;  Flag indicating ownership of _basis. ;  ; RooTemplateProxy< RooAbsRealLValue > x;  Dependent/convolution variable. ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print.",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:39703,Usability,clear,clear,39703,"ert additional information when printed in the context of a tree structure. ;  ; void printComponentTree (const char *indent="""", const char *namePat=nullptr, Int_t nLevel=999);  Print tree structure of expression tree on given ostream, only branch nodes are printed. ;  ; void printDirty (bool depth=true) const;  Print information about current value dirty state information. ;  ; virtual void printMetaArgs (std::ostream &) const;  ; void printName (std::ostream &os) const override;  Print object name. ;  ; void printTitle (std::ostream &os) const override;  Print object title. ;  ; void printTree (std::ostream &os, TString indent="""") const override;  Print object tree structure. ;  ; bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; virtual void translate (RooFit::Detail::CodeSquashCon",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:40386,Usability,clear,clear,40386,"bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; virtual void translate (RooFit::Detail::CodeSquashContext &ctx) const;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ; RooWorkspace * workspace () const;  ; const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t & servers () const;  List of all servers of this object. ;  ; RooAbsArg * findServer (const char *name) const;  Return server of this with name name. Returns nullptr if not f",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:40802,Usability,simpl,simple,40802," ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; virtual void translate (RooFit::Detail::CodeSquashContext &ctx) const;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ; RooWorkspace * workspace () const;  ; const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t & servers () const;  List of all servers of this object. ;  ; RooAbsArg * findServer (const char *name) const;  Return server of this with name name. Returns nullptr if not found. ;  ; RooAbsArg * findServer (const RooAbsArg &arg) const;  Return server of this that has the same name as arg. Returns nullptr if not found. ;  ; RooAbsArg * findServer (Int_t index) const;  Return i-th server from server list. ;  ; bool isValueServer (c",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:57880,Usability,clear,clearEvalErrorLog,57880," static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooResolutionModel; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooFormulaVar * identity ();  Return identity formula pointer. ;  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (s",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:58773,Usability,clear,clearing,58773,"Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version (",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:66974,Usability,clear,clearShapeDirty,66974,"eName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forw",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:67008,Usability,clear,clearValueAndShapeDirty,67008,"eName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forw",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classRooTruthModel.html:67050,Usability,clear,clearValueDirty,67050,"eName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forw",MatchSource.WIKI,doc/master/classRooTruthModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilter.html:2051,Modifiability,inherit,inherited,2051,"FGraphDrawing::GraphNode > > &visitedMap) final;  ; template<typename ColType > ; auto GetValueChecked (unsigned int slot, std::size_t readerIdx, Long64_t entry) -> ColType &;  ; std::shared_ptr< RNodeBase > GetVariedFilter (const std::string &variationName) final;  Return a clone of this Filter that works with values in the variationName ""universe"". ;  ; void IncrChildrenCount () final;  ; void InitSlot (TTreeReader *r, unsigned int slot) final;  ; RFilter & operator= (const RFilter &)=delete;  ; void PartialReport (ROOT::RDF::RCutFlowReport &rep) const final;  ; void Report (ROOT::RDF::RCutFlowReport &rep) const final;  ; void StopProcessing () final;  ; void TriggerChildrenCount () final;  ;  Public Member Functions inherited from ROOT::Detail::RDF::RFilterBase;  RFilterBase (RLoopManager *df, std::string_view name, const unsigned int nSlots, const RDFInternal::RColumnRegister &colRegister, const ColumnNames_t &columns, const std::vector< std::string > &prevVariations, const std::string &variation=""nominal"");  ;  ~RFilterBase () override;  ; virtual void FillReport (ROOT::RDF::RCutFlowReport &) const;  ; std::string GetName () const;  ; bool HasName () const;  ; virtual void InitNode ();  ; RFilterBase & operator= (const RFilterBase &)=delete;  ; virtual void ResetReportCount ();  ;  Public Member Functions inherited from ROOT::Detail::RDF::RNodeBase;  RNodeBase (const std::vector< std::string > &variations={}, RLoopManager *lm=nullptr);  ; virtual ~RNodeBase ();  ; virtual RLoopManager * GetLoopManagerUnchecked ();  ; const std::vector< std::string > & GetVariations () const;  ; virtual void ResetChildrenCount ();  . Private Types; using ColumnTypes_t = typename CallableTraits< FilterF >::arg_types;  ; using PrevNode_t = std::conditional_t< std::is_same< PrevNodeRaw, RJittedFilter >::value, RFilterBase, PrevNodeRaw >;  ; using TypeInd_t = std::make_index_sequence< ColumnTypes_t::list_size >;  . Private Attributes; FilterF fFilter;  ; PrevNode_t & fPrevNode;  ; c",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilter.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilter.html:2654,Modifiability,inherit,inherited,2654,"FGraphDrawing::GraphNode > > &visitedMap) final;  ; template<typename ColType > ; auto GetValueChecked (unsigned int slot, std::size_t readerIdx, Long64_t entry) -> ColType &;  ; std::shared_ptr< RNodeBase > GetVariedFilter (const std::string &variationName) final;  Return a clone of this Filter that works with values in the variationName ""universe"". ;  ; void IncrChildrenCount () final;  ; void InitSlot (TTreeReader *r, unsigned int slot) final;  ; RFilter & operator= (const RFilter &)=delete;  ; void PartialReport (ROOT::RDF::RCutFlowReport &rep) const final;  ; void Report (ROOT::RDF::RCutFlowReport &rep) const final;  ; void StopProcessing () final;  ; void TriggerChildrenCount () final;  ;  Public Member Functions inherited from ROOT::Detail::RDF::RFilterBase;  RFilterBase (RLoopManager *df, std::string_view name, const unsigned int nSlots, const RDFInternal::RColumnRegister &colRegister, const ColumnNames_t &columns, const std::vector< std::string > &prevVariations, const std::string &variation=""nominal"");  ;  ~RFilterBase () override;  ; virtual void FillReport (ROOT::RDF::RCutFlowReport &) const;  ; std::string GetName () const;  ; bool HasName () const;  ; virtual void InitNode ();  ; RFilterBase & operator= (const RFilterBase &)=delete;  ; virtual void ResetReportCount ();  ;  Public Member Functions inherited from ROOT::Detail::RDF::RNodeBase;  RNodeBase (const std::vector< std::string > &variations={}, RLoopManager *lm=nullptr);  ; virtual ~RNodeBase ();  ; virtual RLoopManager * GetLoopManagerUnchecked ();  ; const std::vector< std::string > & GetVariations () const;  ; virtual void ResetChildrenCount ();  . Private Types; using ColumnTypes_t = typename CallableTraits< FilterF >::arg_types;  ; using PrevNode_t = std::conditional_t< std::is_same< PrevNodeRaw, RJittedFilter >::value, RFilterBase, PrevNodeRaw >;  ; using TypeInd_t = std::make_index_sequence< ColumnTypes_t::list_size >;  . Private Attributes; FilterF fFilter;  ; PrevNode_t & fPrevNode;  ; c",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilter.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilter.html:3562,Modifiability,inherit,inherited,3562,"ail::RDF::RNodeBase;  RNodeBase (const std::vector< std::string > &variations={}, RLoopManager *lm=nullptr);  ; virtual ~RNodeBase ();  ; virtual RLoopManager * GetLoopManagerUnchecked ();  ; const std::vector< std::string > & GetVariations () const;  ; virtual void ResetChildrenCount ();  . Private Types; using ColumnTypes_t = typename CallableTraits< FilterF >::arg_types;  ; using PrevNode_t = std::conditional_t< std::is_same< PrevNodeRaw, RJittedFilter >::value, RFilterBase, PrevNodeRaw >;  ; using TypeInd_t = std::make_index_sequence< ColumnTypes_t::list_size >;  . Private Attributes; FilterF fFilter;  ; PrevNode_t & fPrevNode;  ; const std::shared_ptr< PrevNode_t > fPrevNodePtr;  ; std::vector< std::array< RColumnReaderBase *, ColumnTypes_t::list_size > > fValues;  Column readers per slot and per input column. ;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Detail::RDF::RFilterBase; std::vector< ULong64_t > fAccepted = {0};  ; RDFInternal::RColumnRegister fColRegister;  ; const ROOT::RDF::ColumnNames_t fColumnNames;  ; ROOT::RVecB fIsDefine;  The nth flag signals whether the nth input column is a custom column or not. ;  ; std::vector< Long64_t > fLastCheckedEntry;  ; std::vector< int > fLastResult = {true};  ; const std::string fName;  ; std::vector< ULong64_t > fRejected = {0};  ; std::string fVariation;  This indicates for what variation this filter evaluates values. ;  ; std::unordered_map< std::string, std::shared_ptr< RFilterBase > > fVariedFilters;  ;  Protected Attributes inherited from ROOT::Detail::RDF::RNodeBase; RLoopManager * fLoopManager;  ; unsigned int fNChildren {0};  Number of nodes of the functional graph hanging from this object. ;  ; unsigned int fNStopsReceived {0};  Number of times that a children node signaled to stop processing entries. ;  ; std::vector< std::string > fVariations;  List of systematic variations that affect this node. ;  . #include <ROOT/RDF/RFilter.hxx>. Inheritance diagram for ROOT::Detail:",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilter.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilter.html:4218,Modifiability,inherit,inherited,4218," >;  . Private Attributes; FilterF fFilter;  ; PrevNode_t & fPrevNode;  ; const std::shared_ptr< PrevNode_t > fPrevNodePtr;  ; std::vector< std::array< RColumnReaderBase *, ColumnTypes_t::list_size > > fValues;  Column readers per slot and per input column. ;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Detail::RDF::RFilterBase; std::vector< ULong64_t > fAccepted = {0};  ; RDFInternal::RColumnRegister fColRegister;  ; const ROOT::RDF::ColumnNames_t fColumnNames;  ; ROOT::RVecB fIsDefine;  The nth flag signals whether the nth input column is a custom column or not. ;  ; std::vector< Long64_t > fLastCheckedEntry;  ; std::vector< int > fLastResult = {true};  ; const std::string fName;  ; std::vector< ULong64_t > fRejected = {0};  ; std::string fVariation;  This indicates for what variation this filter evaluates values. ;  ; std::unordered_map< std::string, std::shared_ptr< RFilterBase > > fVariedFilters;  ;  Protected Attributes inherited from ROOT::Detail::RDF::RNodeBase; RLoopManager * fLoopManager;  ; unsigned int fNChildren {0};  Number of nodes of the functional graph hanging from this object. ;  ; unsigned int fNStopsReceived {0};  Number of times that a children node signaled to stop processing entries. ;  ; std::vector< std::string > fVariations;  List of systematic variations that affect this node. ;  . #include <ROOT/RDF/RFilter.hxx>. Inheritance diagram for ROOT::Detail::RDF::RFilter< FilterF, PrevNodeRaw >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ ColumnTypes_t. template<typename FilterF , typename PrevNodeRaw > . using ROOT::Detail::RDF::RFilter< FilterF, PrevNodeRaw >::ColumnTypes_t = typename CallableTraits<FilterF>::arg_types. private . Definition at line 58 of file RFilter.hxx. ◆ PrevNode_t. template<typename FilterF , typename PrevNodeRaw > . using ROOT::Detail::RDF::RFilter< FilterF, PrevNodeRaw >::PrevNode_t = std::conditional_t<std:",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilter.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilter.html:1182,Performance,perform,performed,1182," . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Attributes |; List of all members ; ROOT::Detail::RDF::RFilter< FilterF, PrevNodeRaw > Class Template Referencefinal. ; template<typename FilterF, typename PrevNodeRaw>; class ROOT::Detail::RDF::RFilter< FilterF, PrevNodeRaw >; Definition at line 57 of file RFilter.hxx. Public Member Functions;  RFilter (const RFilter &)=delete;  ;  RFilter (FilterF f, const ROOT::RDF::ColumnNames_t &columns, std::shared_ptr< PrevNode_t > pd, const RDFInternal::RColumnRegister &colRegister, std::string_view name="""", const std::string &variationName=""nominal"");  ;  ~RFilter ();  ; void AddFilterName (std::vector< std::string > &filters) final;  ; template<typename... ColTypes, std::size_t... S> ; bool CheckFilterHelper (unsigned int slot, Long64_t entry, TypeList< ColTypes... >, std::index_sequence< S... >);  ; bool CheckFilters (unsigned int slot, Long64_t entry) final;  ; void FinalizeSlot (unsigned int slot) final;  Clean-up operations to be performed at the end of a task. ;  ; std::shared_ptr< RDFGraphDrawing::GraphNode > GetGraph (std::unordered_map< void *, std::shared_ptr< RDFGraphDrawing::GraphNode > > &visitedMap) final;  ; template<typename ColType > ; auto GetValueChecked (unsigned int slot, std::size_t readerIdx, Long64_t entry) -> ColType &;  ; std::shared_ptr< RNodeBase > GetVariedFilter (const std::string &variationName) final;  Return a clone of this Filter that works with values in the variationName ""universe"". ;  ; void IncrChildrenCount () final;  ; void InitSlot (TTreeReader *r, unsigned int slot) final;  ; RFilter & operator= (const RFilter &)=delete;  ; void PartialReport (ROOT::RDF::RCutFlowReport &rep) const final;  ; void Report (ROOT::RDF::RCutFlowReport &rep) const final;  ; void StopProcessing () final;  ; void TriggerChildrenCount () final;  ;  Public Member Functions inherited from ROOT::Detail::RDF::RFilterBase;  RFilterBase (RLoopManager *",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilter.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilter.html:7668,Performance,perform,performed,7668,"filters). inlinefinalvirtual . Implements ROOT::Detail::RDF::RNodeBase.; Definition at line 167 of file RFilter.hxx. ◆ CheckFilterHelper(). template<typename FilterF , typename PrevNodeRaw > . template<typename... ColTypes, std::size_t... S> . bool ROOT::Detail::RDF::RFilter< FilterF, PrevNodeRaw >::CheckFilterHelper ; (; unsigned int ; slot, . Long64_t ; entry, . TypeList< ColTypes... > ; , . std::index_sequence< S... > ;  . ). inline . Definition at line 122 of file RFilter.hxx. ◆ CheckFilters(). template<typename FilterF , typename PrevNodeRaw > . bool ROOT::Detail::RDF::RFilter< FilterF, PrevNodeRaw >::CheckFilters ; (; unsigned int ; slot, . Long64_t ; entry . ). inlinefinalvirtual . Implements ROOT::Detail::RDF::RNodeBase.; Definition at line 91 of file RFilter.hxx. ◆ FinalizeSlot(). template<typename FilterF , typename PrevNodeRaw > . void ROOT::Detail::RDF::RFilter< FilterF, PrevNodeRaw >::FinalizeSlot ; (; unsigned int ; slot). inlinefinalvirtual . Clean-up operations to be performed at the end of a task. ; Implements ROOT::Detail::RDF::RFilterBase.; Definition at line 175 of file RFilter.hxx. ◆ GetGraph(). template<typename FilterF , typename PrevNodeRaw > . std::shared_ptr< RDFGraphDrawing::GraphNode > ROOT::Detail::RDF::RFilter< FilterF, PrevNodeRaw >::GetGraph ; (; std::unordered_map< void *, std::shared_ptr< RDFGraphDrawing::GraphNode > > & ; visitedMap). inlinefinalvirtual . Implements ROOT::Detail::RDF::RNodeBase.; Definition at line 178 of file RFilter.hxx. ◆ GetValueChecked(). template<typename FilterF , typename PrevNodeRaw > . template<typename ColType > . auto ROOT::Detail::RDF::RFilter< FilterF, PrevNodeRaw >::GetValueChecked ; (; unsigned int ; slot, . std::size_t ; readerIdx, . Long64_t ; entry . ); -> ColType &; . inline . Definition at line 110 of file RFilter.hxx. ◆ GetVariedFilter(). template<typename FilterF , typename PrevNodeRaw > . std::shared_ptr< RNodeBase > ROOT::Detail::RDF::RFilter< FilterF, PrevNodeRaw >::GetVariedFilter ; (; co",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilter.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterBase.html:1139,Modifiability,inherit,inherited,1139,"erBase (RLoopManager *df, std::string_view name, const unsigned int nSlots, const RDFInternal::RColumnRegister &colRegister, const ColumnNames_t &columns, const std::vector< std::string > &prevVariations, const std::string &variation=""nominal"");  ;  ~RFilterBase () override;  ; virtual void FillReport (ROOT::RDF::RCutFlowReport &) const;  ; virtual void FinalizeSlot (unsigned int slot)=0;  Clean-up operations to be performed at the end of a task. ;  ; std::string GetName () const;  ; bool HasName () const;  ; virtual void InitNode ();  ; virtual void InitSlot (TTreeReader *r, unsigned int slot)=0;  ; RFilterBase & operator= (const RFilterBase &)=delete;  ; virtual void ResetReportCount ();  ; virtual void TriggerChildrenCount ()=0;  ;  Public Member Functions inherited from ROOT::Detail::RDF::RNodeBase;  RNodeBase (const std::vector< std::string > &variations={}, RLoopManager *lm=nullptr);  ; virtual ~RNodeBase ();  ; virtual void AddFilterName (std::vector< std::string > &filters)=0;  ; virtual bool CheckFilters (unsigned int, Long64_t)=0;  ; virtual std::shared_ptr< ROOT::Internal::RDF::GraphDrawing::GraphNode > GetGraph (std::unordered_map< void *, std::shared_ptr< ROOT::Internal::RDF::GraphDrawing::GraphNode > > &visitedMap)=0;  ; virtual RLoopManager * GetLoopManagerUnchecked ();  ; const std::vector< std::string > & GetVariations () const;  ; virtual std::shared_ptr< RNodeBase > GetVariedFilter (const std::string &);  Return a clone of this node that acts as a Filter working with values in the variationName ""universe"". ;  ; virtual void IncrChildrenCount ()=0;  ; virtual void PartialReport (ROOT::RDF::RCutFlowReport &) const =0;  ; virtual void Report (ROOT::RDF::RCutFlowReport &) const =0;  ; virtual void ResetChildrenCount ();  ; virtual void StopProcessing ()=0;  . Protected Attributes; std::vector< ULong64_t > fAccepted = {0};  ; RDFInternal::RColumnRegister fColRegister;  ; const ROOT::RDF::ColumnNames_t fColumnNames;  ; ROOT::RVecB fIsDefine;  The nth fl",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterBase.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterBase.html:2805,Modifiability,inherit,inherited,2805," this node that acts as a Filter working with values in the variationName ""universe"". ;  ; virtual void IncrChildrenCount ()=0;  ; virtual void PartialReport (ROOT::RDF::RCutFlowReport &) const =0;  ; virtual void Report (ROOT::RDF::RCutFlowReport &) const =0;  ; virtual void ResetChildrenCount ();  ; virtual void StopProcessing ()=0;  . Protected Attributes; std::vector< ULong64_t > fAccepted = {0};  ; RDFInternal::RColumnRegister fColRegister;  ; const ROOT::RDF::ColumnNames_t fColumnNames;  ; ROOT::RVecB fIsDefine;  The nth flag signals whether the nth input column is a custom column or not. ;  ; std::vector< Long64_t > fLastCheckedEntry;  ; std::vector< int > fLastResult = {true};  ; const std::string fName;  ; std::vector< ULong64_t > fRejected = {0};  ; std::string fVariation;  This indicates for what variation this filter evaluates values. ;  ; std::unordered_map< std::string, std::shared_ptr< RFilterBase > > fVariedFilters;  ;  Protected Attributes inherited from ROOT::Detail::RDF::RNodeBase; RLoopManager * fLoopManager;  ; unsigned int fNChildren {0};  Number of nodes of the functional graph hanging from this object. ;  ; unsigned int fNStopsReceived {0};  Number of times that a children node signaled to stop processing entries. ;  ; std::vector< std::string > fVariations;  List of systematic variations that affect this node. ;  . #include <ROOT/RDF/RFilterBase.hxx>. Inheritance diagram for ROOT::Detail::RDF::RFilterBase:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RFilterBase(). RFilterBase::RFilterBase ; (; RLoopManager * ; df, . std::string_view ; name, . const unsigned int ; nSlots, . const RDFInternal::RColumnRegister & ; colRegister, . const ColumnNames_t & ; columns, . const std::vector< std::string > & ; prevVariations, . const std::string & ; variation = ""nominal"" . ). Definition at line 19 of file RFilterBase.cxx. ◆ ~RFilterBase(). RFilterBase::~RFilterBa",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterBase.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterBase.html:788,Performance,perform,performed,788,". ROOT: ROOT::Detail::RDF::RFilterBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; List of all members ; ROOT::Detail::RDF::RFilterBase Class Referenceabstract. . Definition at line 38 of file RFilterBase.hxx. Public Member Functions;  RFilterBase (RLoopManager *df, std::string_view name, const unsigned int nSlots, const RDFInternal::RColumnRegister &colRegister, const ColumnNames_t &columns, const std::vector< std::string > &prevVariations, const std::string &variation=""nominal"");  ;  ~RFilterBase () override;  ; virtual void FillReport (ROOT::RDF::RCutFlowReport &) const;  ; virtual void FinalizeSlot (unsigned int slot)=0;  Clean-up operations to be performed at the end of a task. ;  ; std::string GetName () const;  ; bool HasName () const;  ; virtual void InitNode ();  ; virtual void InitSlot (TTreeReader *r, unsigned int slot)=0;  ; RFilterBase & operator= (const RFilterBase &)=delete;  ; virtual void ResetReportCount ();  ; virtual void TriggerChildrenCount ()=0;  ;  Public Member Functions inherited from ROOT::Detail::RDF::RNodeBase;  RNodeBase (const std::vector< std::string > &variations={}, RLoopManager *lm=nullptr);  ; virtual ~RNodeBase ();  ; virtual void AddFilterName (std::vector< std::string > &filters)=0;  ; virtual bool CheckFilters (unsigned int, Long64_t)=0;  ; virtual std::shared_ptr< ROOT::Internal::RDF::GraphDrawing::GraphNode > GetGraph (std::unordered_map< void *, std::shared_ptr< ROOT::Internal::RDF::GraphDrawing::GraphNode > > &visitedMap)=0;  ; virtual RLoopManager * GetLoopManagerUnchecked ();  ; const std::vector< std::string > & GetVariations () const;  ; virtual std::shared_ptr< RNodeBase > GetVariedFilter (const std::string &);  Return a clone of this node that acts as a Filter working with values in the variationName ""universe"". ;  ; virtual void IncrChildrenCount ()=0;  ; virtual void PartialReport (ROOT::RD",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterBase.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterBase.html:4281,Performance,perform,performed,4281,"Base:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RFilterBase(). RFilterBase::RFilterBase ; (; RLoopManager * ; df, . std::string_view ; name, . const unsigned int ; nSlots, . const RDFInternal::RColumnRegister & ; colRegister, . const ColumnNames_t & ; columns, . const std::vector< std::string > & ; prevVariations, . const std::string & ; variation = ""nominal"" . ). Definition at line 19 of file RFilterBase.cxx. ◆ ~RFilterBase(). RFilterBase::~RFilterBase ; (; ). override . Definition at line 38 of file RFilterBase.cxx. Member Function Documentation. ◆ FillReport(). void RFilterBase::FillReport ; (; ROOT::RDF::RCutFlowReport & ; rep); const. virtual . Reimplemented in ROOT::Detail::RDF::RJittedFilter.; Definition at line 50 of file RFilterBase.cxx. ◆ FinalizeSlot(). virtual void ROOT::Detail::RDF::RFilterBase::FinalizeSlot ; (; unsigned int ; slot). pure virtual . Clean-up operations to be performed at the end of a task. ; Implemented in ROOT::Detail::RDF::RFilter< FilterF, PrevNodeRaw >, ROOT::Detail::RDF::RFilterWithMissingValues< PrevNodeRaw >, and ROOT::Detail::RDF::RJittedFilter. ◆ GetName(). std::string RFilterBase::GetName ; (; ); const. Definition at line 45 of file RFilterBase.cxx. ◆ HasName(). bool RFilterBase::HasName ; (; ); const. Definition at line 40 of file RFilterBase.cxx. ◆ InitNode(). void RFilterBase::InitNode ; (; ). virtual . Reimplemented in ROOT::Detail::RDF::RJittedFilter.; Definition at line 59 of file RFilterBase.cxx. ◆ InitSlot(). virtual void ROOT::Detail::RDF::RFilterBase::InitSlot ; (; TTreeReader * ; r, . unsigned int ; slot . ). pure virtual . Implemented in ROOT::Detail::RDF::RFilter< FilterF, PrevNodeRaw >, ROOT::Detail::RDF::RFilterWithMissingValues< PrevNodeRaw >, and ROOT::Detail::RDF::RJittedFilter. ◆ operator=(). RFilterBase & ROOT::Detail::RDF::RFilterBase::operator= ; (; const RFilterBase & ; ). delete . ◆ ResetReportCount(). virtu",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterBase.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterWithMissingValues.html:2475,Modifiability,inherit,inherited,2475,"sitedMap) final;  ; ROOT::Detail::RDF::RColumnReaderBase * GetOrCreateColumnReader (TTreeReader *r, unsigned int slot);  ; std::shared_ptr< RNodeBase > GetVariedFilter (const std::string &variationName) final;  Return a clone of this Filter that works with values in the variationName ""universe"". ;  ; void IncrChildrenCount () final;  ; void InitSlot (TTreeReader *r, unsigned int slot) final;  ; RFilterWithMissingValues & operator= (const RFilterWithMissingValues &)=delete;  ; RFilterWithMissingValues & operator= (RFilterWithMissingValues &&)=delete;  ; void PartialReport (ROOT::RDF::RCutFlowReport &rep) const final;  ; void Report (ROOT::RDF::RCutFlowReport &rep) const final;  ; void StopProcessing () final;  ; void TriggerChildrenCount () final;  ;  Public Member Functions inherited from ROOT::Detail::RDF::RFilterBase;  RFilterBase (RLoopManager *df, std::string_view name, const unsigned int nSlots, const RDFInternal::RColumnRegister &colRegister, const ColumnNames_t &columns, const std::vector< std::string > &prevVariations, const std::string &variation=""nominal"");  ;  ~RFilterBase () override;  ; virtual void FillReport (ROOT::RDF::RCutFlowReport &) const;  ; std::string GetName () const;  ; bool HasName () const;  ; virtual void InitNode ();  ; RFilterBase & operator= (const RFilterBase &)=delete;  ; virtual void ResetReportCount ();  ;  Public Member Functions inherited from ROOT::Detail::RDF::RNodeBase;  RNodeBase (const std::vector< std::string > &variations={}, RLoopManager *lm=nullptr);  ; virtual ~RNodeBase ();  ; virtual RLoopManager * GetLoopManagerUnchecked ();  ; const std::vector< std::string > & GetVariations () const;  ; virtual void ResetChildrenCount ();  . Private Types; using PrevNode_t = std::conditional_t< std::is_same< PrevNodeRaw, RJittedFilter >::value, RFilterBase, PrevNodeRaw >;  . Private Attributes; bool fDiscardEntryWithMissingValue;  ; const std::shared_ptr< PrevNode_t > fPrevNodePtr;  ; std::vector< RColumnReaderBase * > fValues;  . ",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterWithMissingValues.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterWithMissingValues.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterWithMissingValues.html:3078,Modifiability,inherit,inherited,3078,"sitedMap) final;  ; ROOT::Detail::RDF::RColumnReaderBase * GetOrCreateColumnReader (TTreeReader *r, unsigned int slot);  ; std::shared_ptr< RNodeBase > GetVariedFilter (const std::string &variationName) final;  Return a clone of this Filter that works with values in the variationName ""universe"". ;  ; void IncrChildrenCount () final;  ; void InitSlot (TTreeReader *r, unsigned int slot) final;  ; RFilterWithMissingValues & operator= (const RFilterWithMissingValues &)=delete;  ; RFilterWithMissingValues & operator= (RFilterWithMissingValues &&)=delete;  ; void PartialReport (ROOT::RDF::RCutFlowReport &rep) const final;  ; void Report (ROOT::RDF::RCutFlowReport &rep) const final;  ; void StopProcessing () final;  ; void TriggerChildrenCount () final;  ;  Public Member Functions inherited from ROOT::Detail::RDF::RFilterBase;  RFilterBase (RLoopManager *df, std::string_view name, const unsigned int nSlots, const RDFInternal::RColumnRegister &colRegister, const ColumnNames_t &columns, const std::vector< std::string > &prevVariations, const std::string &variation=""nominal"");  ;  ~RFilterBase () override;  ; virtual void FillReport (ROOT::RDF::RCutFlowReport &) const;  ; std::string GetName () const;  ; bool HasName () const;  ; virtual void InitNode ();  ; RFilterBase & operator= (const RFilterBase &)=delete;  ; virtual void ResetReportCount ();  ;  Public Member Functions inherited from ROOT::Detail::RDF::RNodeBase;  RNodeBase (const std::vector< std::string > &variations={}, RLoopManager *lm=nullptr);  ; virtual ~RNodeBase ();  ; virtual RLoopManager * GetLoopManagerUnchecked ();  ; const std::vector< std::string > & GetVariations () const;  ; virtual void ResetChildrenCount ();  . Private Types; using PrevNode_t = std::conditional_t< std::is_same< PrevNodeRaw, RJittedFilter >::value, RFilterBase, PrevNodeRaw >;  . Private Attributes; bool fDiscardEntryWithMissingValue;  ; const std::shared_ptr< PrevNode_t > fPrevNodePtr;  ; std::vector< RColumnReaderBase * > fValues;  . ",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterWithMissingValues.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterWithMissingValues.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterWithMissingValues.html:3742,Modifiability,inherit,inherited,3742,"&) const;  ; std::string GetName () const;  ; bool HasName () const;  ; virtual void InitNode ();  ; RFilterBase & operator= (const RFilterBase &)=delete;  ; virtual void ResetReportCount ();  ;  Public Member Functions inherited from ROOT::Detail::RDF::RNodeBase;  RNodeBase (const std::vector< std::string > &variations={}, RLoopManager *lm=nullptr);  ; virtual ~RNodeBase ();  ; virtual RLoopManager * GetLoopManagerUnchecked ();  ; const std::vector< std::string > & GetVariations () const;  ; virtual void ResetChildrenCount ();  . Private Types; using PrevNode_t = std::conditional_t< std::is_same< PrevNodeRaw, RJittedFilter >::value, RFilterBase, PrevNodeRaw >;  . Private Attributes; bool fDiscardEntryWithMissingValue;  ; const std::shared_ptr< PrevNode_t > fPrevNodePtr;  ; std::vector< RColumnReaderBase * > fValues;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Detail::RDF::RFilterBase; std::vector< ULong64_t > fAccepted = {0};  ; RDFInternal::RColumnRegister fColRegister;  ; const ROOT::RDF::ColumnNames_t fColumnNames;  ; ROOT::RVecB fIsDefine;  The nth flag signals whether the nth input column is a custom column or not. ;  ; std::vector< Long64_t > fLastCheckedEntry;  ; std::vector< int > fLastResult = {true};  ; const std::string fName;  ; std::vector< ULong64_t > fRejected = {0};  ; std::string fVariation;  This indicates for what variation this filter evaluates values. ;  ; std::unordered_map< std::string, std::shared_ptr< RFilterBase > > fVariedFilters;  ;  Protected Attributes inherited from ROOT::Detail::RDF::RNodeBase; RLoopManager * fLoopManager;  ; unsigned int fNChildren {0};  Number of nodes of the functional graph hanging from this object. ;  ; unsigned int fNStopsReceived {0};  Number of times that a children node signaled to stop processing entries. ;  ; std::vector< std::string > fVariations;  List of systematic variations that affect this node. ;  . #include <ROOT/RDF/RFilterWithMissingValues.hxx>. Inheritance diagram ",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterWithMissingValues.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterWithMissingValues.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterWithMissingValues.html:4398,Modifiability,inherit,inherited,4398,"= std::conditional_t< std::is_same< PrevNodeRaw, RJittedFilter >::value, RFilterBase, PrevNodeRaw >;  . Private Attributes; bool fDiscardEntryWithMissingValue;  ; const std::shared_ptr< PrevNode_t > fPrevNodePtr;  ; std::vector< RColumnReaderBase * > fValues;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Detail::RDF::RFilterBase; std::vector< ULong64_t > fAccepted = {0};  ; RDFInternal::RColumnRegister fColRegister;  ; const ROOT::RDF::ColumnNames_t fColumnNames;  ; ROOT::RVecB fIsDefine;  The nth flag signals whether the nth input column is a custom column or not. ;  ; std::vector< Long64_t > fLastCheckedEntry;  ; std::vector< int > fLastResult = {true};  ; const std::string fName;  ; std::vector< ULong64_t > fRejected = {0};  ; std::string fVariation;  This indicates for what variation this filter evaluates values. ;  ; std::unordered_map< std::string, std::shared_ptr< RFilterBase > > fVariedFilters;  ;  Protected Attributes inherited from ROOT::Detail::RDF::RNodeBase; RLoopManager * fLoopManager;  ; unsigned int fNChildren {0};  Number of nodes of the functional graph hanging from this object. ;  ; unsigned int fNStopsReceived {0};  Number of times that a children node signaled to stop processing entries. ;  ; std::vector< std::string > fVariations;  List of systematic variations that affect this node. ;  . #include <ROOT/RDF/RFilterWithMissingValues.hxx>. Inheritance diagram for ROOT::Detail::RDF::RFilterWithMissingValues< PrevNodeRaw >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ PrevNode_t. template<typename PrevNodeRaw > . using ROOT::Detail::RDF::RFilterWithMissingValues< PrevNodeRaw >::PrevNode_t = std::conditional_t<std::is_same<PrevNodeRaw, RJittedFilter>::value, RFilterBase, PrevNodeRaw>. private . Definition at line 63 of file RFilterWithMissingValues.hxx. Constructor & Destructor Documentation. ◆ RFilterWithMissingValues() [1/3]. template<t",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterWithMissingValues.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterWithMissingValues.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterWithMissingValues.html:1518,Performance,perform,performed,1518," Functions |; Private Types |; Private Attributes |; List of all members ; ROOT::Detail::RDF::RFilterWithMissingValues< PrevNodeRaw > Class Template Referencefinal. ; template<typename PrevNodeRaw>; class ROOT::Detail::RDF::RFilterWithMissingValues< PrevNodeRaw >implementation of FilterAvailable and FilterMissing operations ; The filter evaluates if the entry is missing a value for the input column. Depending on which function was called by the user, the entry with the missing value:; will be discarded in case the user called FilterAvailable; will be kept in case the user called FilterMissing . Definition at line 58 of file RFilterWithMissingValues.hxx. Public Member Functions;  RFilterWithMissingValues (bool discardEntry, std::shared_ptr< PrevNode_t > pd, const RDFInternal::RColumnRegister &colRegister, const ColumnNames_t &columns, std::string_view filterName="""", const std::string &variationName=""nominal"");  ;  RFilterWithMissingValues (const RFilterWithMissingValues &)=delete;  ;  RFilterWithMissingValues (RFilterWithMissingValues &&)=delete;  ;  ~RFilterWithMissingValues () final;  ; void AddFilterName (std::vector< std::string > &filters) final;  ; bool CheckFilters (unsigned int slot, Long64_t entry) final;  ; void FinalizeSlot (unsigned int slot) final;  Clean-up operations to be performed at the end of a task. ;  ; std::shared_ptr< RDFGraphDrawing::GraphNode > GetGraph (std::unordered_map< void *, std::shared_ptr< RDFGraphDrawing::GraphNode > > &visitedMap) final;  ; ROOT::Detail::RDF::RColumnReaderBase * GetOrCreateColumnReader (TTreeReader *r, unsigned int slot);  ; std::shared_ptr< RNodeBase > GetVariedFilter (const std::string &variationName) final;  Return a clone of this Filter that works with values in the variationName ""universe"". ;  ; void IncrChildrenCount () final;  ; void InitSlot (TTreeReader *r, unsigned int slot) final;  ; RFilterWithMissingValues & operator= (const RFilterWithMissingValues &)=delete;  ; RFilterWithMissingValues & operator= (R",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterWithMissingValues.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterWithMissingValues.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterWithMissingValues.html:7364,Performance,perform,performed,7364,"il::RDF::RFilterWithMissingValues< PrevNodeRaw >::~RFilterWithMissingValues ; (; ). inlinefinal . Definition at line 91 of file RFilterWithMissingValues.hxx. Member Function Documentation. ◆ AddFilterName(). template<typename PrevNodeRaw > . void ROOT::Detail::RDF::RFilterWithMissingValues< PrevNodeRaw >::AddFilterName ; (; std::vector< std::string > & ; filters). inlinefinalvirtual . Implements ROOT::Detail::RDF::RNodeBase.; Definition at line 181 of file RFilterWithMissingValues.hxx. ◆ CheckFilters(). template<typename PrevNodeRaw > . bool ROOT::Detail::RDF::RFilterWithMissingValues< PrevNodeRaw >::CheckFilters ; (; unsigned int ; slot, . Long64_t ; entry . ). inlinefinalvirtual . Implements ROOT::Detail::RDF::RNodeBase.; Definition at line 99 of file RFilterWithMissingValues.hxx. ◆ FinalizeSlot(). template<typename PrevNodeRaw > . void ROOT::Detail::RDF::RFilterWithMissingValues< PrevNodeRaw >::FinalizeSlot ; (; unsigned int ; slot). inlinefinalvirtual . Clean-up operations to be performed at the end of a task. ; Implements ROOT::Detail::RDF::RFilterBase.; Definition at line 189 of file RFilterWithMissingValues.hxx. ◆ GetGraph(). template<typename PrevNodeRaw > . std::shared_ptr< RDFGraphDrawing::GraphNode > ROOT::Detail::RDF::RFilterWithMissingValues< PrevNodeRaw >::GetGraph ; (; std::unordered_map< void *, std::shared_ptr< RDFGraphDrawing::GraphNode > > & ; visitedMap). inlinefinalvirtual . Implements ROOT::Detail::RDF::RNodeBase.; Definition at line 192 of file RFilterWithMissingValues.hxx. ◆ GetOrCreateColumnReader(). template<typename PrevNodeRaw > . ROOT::Detail::RDF::RColumnReaderBase * ROOT::Detail::RDF::RFilterWithMissingValues< PrevNodeRaw >::GetOrCreateColumnReader ; (; TTreeReader * ; r, . unsigned int ; slot . ). inline . Definition at line 125 of file RFilterWithMissingValues.hxx. ◆ GetVariedFilter(). template<typename PrevNodeRaw > . std::shared_ptr< RNodeBase > ROOT::Detail::RDF::RFilterWithMissingValues< PrevNodeRaw >::GetVariedFilter ; (; const ",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterWithMissingValues.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterWithMissingValues.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RJittedFilter.html:292,Integrability,wrap,wrapper,292,". ROOT: ROOT::Detail::RDF::RJittedFilter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Detail::RDF::RJittedFilter Class Referencefinal. ; A wrapper around a concrete RFilter, which forwards all calls to it RJittedFilter is the type of the node returned by jitted Filter calls: the concrete filter can be created and set at a later time, from jitted code. ; Definition at line 39 of file RJittedFilter.hxx. Public Member Functions;  RJittedFilter (RLoopManager *lm, std::string_view name, const std::vector< std::string > &variations);  ;  ~RJittedFilter ();  ; void AddFilterName (std::vector< std::string > &filters) final;  ; bool CheckFilters (unsigned int slot, Long64_t entry) final;  ; void FillReport (ROOT::RDF::RCutFlowReport &) const final;  ; void FinalizeSlot (unsigned int slot) final;  Clean-up operations to be performed at the end of a task. ;  ; std::shared_ptr< RDFGraphDrawing::GraphNode > GetGraph (std::unordered_map< void *, std::shared_ptr< RDFGraphDrawing::GraphNode > > &visitedMap) final;  ; std::shared_ptr< RNodeBase > GetVariedFilter (const std::string &variationName) final;  Return a clone of this node that acts as a Filter working with values in the variationName ""universe"". ;  ; void IncrChildrenCount () final;  ; void InitNode () final;  ; void InitSlot (TTreeReader *r, unsigned int slot) final;  ; void PartialReport (ROOT::RDF::RCutFlowReport &) const final;  ; void Report (ROOT::RDF::RCutFlowReport &) const final;  ; void ResetChildrenCount () final;  ; void ResetReportCount () final;  ; void SetFilter (std::unique_ptr< RFilterBase > f);  ; void StopProcessing () final;  ; void TriggerChildrenCount () final;  ;  Public Member Functions inherited from ROOT::Detail::RDF::RFilterBase;  RFilterBase (RLoopManager *df, std::string_view name, const unsigned int nSlots, const RDFInternal::RColumnRegister &c",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RJittedFilter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RJittedFilter.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RJittedFilter.html:1835,Modifiability,inherit,inherited,1835,"to be performed at the end of a task. ;  ; std::shared_ptr< RDFGraphDrawing::GraphNode > GetGraph (std::unordered_map< void *, std::shared_ptr< RDFGraphDrawing::GraphNode > > &visitedMap) final;  ; std::shared_ptr< RNodeBase > GetVariedFilter (const std::string &variationName) final;  Return a clone of this node that acts as a Filter working with values in the variationName ""universe"". ;  ; void IncrChildrenCount () final;  ; void InitNode () final;  ; void InitSlot (TTreeReader *r, unsigned int slot) final;  ; void PartialReport (ROOT::RDF::RCutFlowReport &) const final;  ; void Report (ROOT::RDF::RCutFlowReport &) const final;  ; void ResetChildrenCount () final;  ; void ResetReportCount () final;  ; void SetFilter (std::unique_ptr< RFilterBase > f);  ; void StopProcessing () final;  ; void TriggerChildrenCount () final;  ;  Public Member Functions inherited from ROOT::Detail::RDF::RFilterBase;  RFilterBase (RLoopManager *df, std::string_view name, const unsigned int nSlots, const RDFInternal::RColumnRegister &colRegister, const ColumnNames_t &columns, const std::vector< std::string > &prevVariations, const std::string &variation=""nominal"");  ;  ~RFilterBase () override;  ; std::string GetName () const;  ; bool HasName () const;  ; RFilterBase & operator= (const RFilterBase &)=delete;  ;  Public Member Functions inherited from ROOT::Detail::RDF::RNodeBase;  RNodeBase (const std::vector< std::string > &variations={}, RLoopManager *lm=nullptr);  ; virtual ~RNodeBase ();  ; virtual RLoopManager * GetLoopManagerUnchecked ();  ; const std::vector< std::string > & GetVariations () const;  . Private Attributes; std::unique_ptr< RFilterBase > fConcreteFilter = nullptr;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Detail::RDF::RFilterBase; std::vector< ULong64_t > fAccepted = {0};  ; RDFInternal::RColumnRegister fColRegister;  ; const ROOT::RDF::ColumnNames_t fColumnNames;  ; ROOT::RVecB fIsDefine;  The nth flag signals whether the nth input c",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RJittedFilter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RJittedFilter.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RJittedFilter.html:2308,Modifiability,inherit,inherited,2308,"to be performed at the end of a task. ;  ; std::shared_ptr< RDFGraphDrawing::GraphNode > GetGraph (std::unordered_map< void *, std::shared_ptr< RDFGraphDrawing::GraphNode > > &visitedMap) final;  ; std::shared_ptr< RNodeBase > GetVariedFilter (const std::string &variationName) final;  Return a clone of this node that acts as a Filter working with values in the variationName ""universe"". ;  ; void IncrChildrenCount () final;  ; void InitNode () final;  ; void InitSlot (TTreeReader *r, unsigned int slot) final;  ; void PartialReport (ROOT::RDF::RCutFlowReport &) const final;  ; void Report (ROOT::RDF::RCutFlowReport &) const final;  ; void ResetChildrenCount () final;  ; void ResetReportCount () final;  ; void SetFilter (std::unique_ptr< RFilterBase > f);  ; void StopProcessing () final;  ; void TriggerChildrenCount () final;  ;  Public Member Functions inherited from ROOT::Detail::RDF::RFilterBase;  RFilterBase (RLoopManager *df, std::string_view name, const unsigned int nSlots, const RDFInternal::RColumnRegister &colRegister, const ColumnNames_t &columns, const std::vector< std::string > &prevVariations, const std::string &variation=""nominal"");  ;  ~RFilterBase () override;  ; std::string GetName () const;  ; bool HasName () const;  ; RFilterBase & operator= (const RFilterBase &)=delete;  ;  Public Member Functions inherited from ROOT::Detail::RDF::RNodeBase;  RNodeBase (const std::vector< std::string > &variations={}, RLoopManager *lm=nullptr);  ; virtual ~RNodeBase ();  ; virtual RLoopManager * GetLoopManagerUnchecked ();  ; const std::vector< std::string > & GetVariations () const;  . Private Attributes; std::unique_ptr< RFilterBase > fConcreteFilter = nullptr;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Detail::RDF::RFilterBase; std::vector< ULong64_t > fAccepted = {0};  ; RDFInternal::RColumnRegister fColRegister;  ; const ROOT::RDF::ColumnNames_t fColumnNames;  ; ROOT::RVecB fIsDefine;  The nth flag signals whether the nth input c",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RJittedFilter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RJittedFilter.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RJittedFilter.html:2719,Modifiability,inherit,inherited,2719,"inherited from ROOT::Detail::RDF::RFilterBase;  RFilterBase (RLoopManager *df, std::string_view name, const unsigned int nSlots, const RDFInternal::RColumnRegister &colRegister, const ColumnNames_t &columns, const std::vector< std::string > &prevVariations, const std::string &variation=""nominal"");  ;  ~RFilterBase () override;  ; std::string GetName () const;  ; bool HasName () const;  ; RFilterBase & operator= (const RFilterBase &)=delete;  ;  Public Member Functions inherited from ROOT::Detail::RDF::RNodeBase;  RNodeBase (const std::vector< std::string > &variations={}, RLoopManager *lm=nullptr);  ; virtual ~RNodeBase ();  ; virtual RLoopManager * GetLoopManagerUnchecked ();  ; const std::vector< std::string > & GetVariations () const;  . Private Attributes; std::unique_ptr< RFilterBase > fConcreteFilter = nullptr;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Detail::RDF::RFilterBase; std::vector< ULong64_t > fAccepted = {0};  ; RDFInternal::RColumnRegister fColRegister;  ; const ROOT::RDF::ColumnNames_t fColumnNames;  ; ROOT::RVecB fIsDefine;  The nth flag signals whether the nth input column is a custom column or not. ;  ; std::vector< Long64_t > fLastCheckedEntry;  ; std::vector< int > fLastResult = {true};  ; const std::string fName;  ; std::vector< ULong64_t > fRejected = {0};  ; std::string fVariation;  This indicates for what variation this filter evaluates values. ;  ; std::unordered_map< std::string, std::shared_ptr< RFilterBase > > fVariedFilters;  ;  Protected Attributes inherited from ROOT::Detail::RDF::RNodeBase; RLoopManager * fLoopManager;  ; unsigned int fNChildren {0};  Number of nodes of the functional graph hanging from this object. ;  ; unsigned int fNStopsReceived {0};  Number of times that a children node signaled to stop processing entries. ;  ; std::vector< std::string > fVariations;  List of systematic variations that affect this node. ;  . #include <ROOT/RDF/RJittedFilter.hxx>. Inheritance diagram for ROOT::D",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RJittedFilter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RJittedFilter.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RJittedFilter.html:3375,Modifiability,inherit,inherited,3375,"tions={}, RLoopManager *lm=nullptr);  ; virtual ~RNodeBase ();  ; virtual RLoopManager * GetLoopManagerUnchecked ();  ; const std::vector< std::string > & GetVariations () const;  . Private Attributes; std::unique_ptr< RFilterBase > fConcreteFilter = nullptr;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Detail::RDF::RFilterBase; std::vector< ULong64_t > fAccepted = {0};  ; RDFInternal::RColumnRegister fColRegister;  ; const ROOT::RDF::ColumnNames_t fColumnNames;  ; ROOT::RVecB fIsDefine;  The nth flag signals whether the nth input column is a custom column or not. ;  ; std::vector< Long64_t > fLastCheckedEntry;  ; std::vector< int > fLastResult = {true};  ; const std::string fName;  ; std::vector< ULong64_t > fRejected = {0};  ; std::string fVariation;  This indicates for what variation this filter evaluates values. ;  ; std::unordered_map< std::string, std::shared_ptr< RFilterBase > > fVariedFilters;  ;  Protected Attributes inherited from ROOT::Detail::RDF::RNodeBase; RLoopManager * fLoopManager;  ; unsigned int fNChildren {0};  Number of nodes of the functional graph hanging from this object. ;  ; unsigned int fNStopsReceived {0};  Number of times that a children node signaled to stop processing entries. ;  ; std::vector< std::string > fVariations;  List of systematic variations that affect this node. ;  . #include <ROOT/RDF/RJittedFilter.hxx>. Inheritance diagram for ROOT::Detail::RDF::RJittedFilter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RJittedFilter(). RJittedFilter::RJittedFilter ; (; RLoopManager * ; lm, . std::string_view ; name, . const std::vector< std::string > & ; variations . ). Definition at line 20 of file RJittedFilter.cxx. ◆ ~RJittedFilter(). RJittedFilter::~RJittedFilter ; (; ). Definition at line 34 of file RJittedFilter.cxx. Member Function Documentation. ◆ AddFilterName(). void RJittedFilter::AddFilterName ; (; std:",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RJittedFilter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RJittedFilter.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RJittedFilter.html:978,Performance,perform,performed,978,". ROOT: ROOT::Detail::RDF::RJittedFilter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Detail::RDF::RJittedFilter Class Referencefinal. ; A wrapper around a concrete RFilter, which forwards all calls to it RJittedFilter is the type of the node returned by jitted Filter calls: the concrete filter can be created and set at a later time, from jitted code. ; Definition at line 39 of file RJittedFilter.hxx. Public Member Functions;  RJittedFilter (RLoopManager *lm, std::string_view name, const std::vector< std::string > &variations);  ;  ~RJittedFilter ();  ; void AddFilterName (std::vector< std::string > &filters) final;  ; bool CheckFilters (unsigned int slot, Long64_t entry) final;  ; void FillReport (ROOT::RDF::RCutFlowReport &) const final;  ; void FinalizeSlot (unsigned int slot) final;  Clean-up operations to be performed at the end of a task. ;  ; std::shared_ptr< RDFGraphDrawing::GraphNode > GetGraph (std::unordered_map< void *, std::shared_ptr< RDFGraphDrawing::GraphNode > > &visitedMap) final;  ; std::shared_ptr< RNodeBase > GetVariedFilter (const std::string &variationName) final;  Return a clone of this node that acts as a Filter working with values in the variationName ""universe"". ;  ; void IncrChildrenCount () final;  ; void InitNode () final;  ; void InitSlot (TTreeReader *r, unsigned int slot) final;  ; void PartialReport (ROOT::RDF::RCutFlowReport &) const final;  ; void Report (ROOT::RDF::RCutFlowReport &) const final;  ; void ResetChildrenCount () final;  ; void ResetReportCount () final;  ; void SetFilter (std::unique_ptr< RFilterBase > f);  ; void StopProcessing () final;  ; void TriggerChildrenCount () final;  ;  Public Member Functions inherited from ROOT::Detail::RDF::RFilterBase;  RFilterBase (RLoopManager *df, std::string_view name, const unsigned int nSlots, const RDFInternal::RColumnRegister &c",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RJittedFilter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RJittedFilter.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RJittedFilter.html:5085,Performance,perform,performed,5085,"_view ; name, . const std::vector< std::string > & ; variations . ). Definition at line 20 of file RJittedFilter.cxx. ◆ ~RJittedFilter(). RJittedFilter::~RJittedFilter ; (; ). Definition at line 34 of file RJittedFilter.cxx. Member Function Documentation. ◆ AddFilterName(). void RJittedFilter::AddFilterName ; (; std::vector< std::string > & ; filters). finalvirtual . Implements ROOT::Detail::RDF::RNodeBase.; Definition at line 122 of file RJittedFilter.cxx. ◆ CheckFilters(). bool RJittedFilter::CheckFilters ; (; unsigned int ; slot, . Long64_t ; entry . ). finalvirtual . Implements ROOT::Detail::RDF::RNodeBase.; Definition at line 56 of file RJittedFilter.cxx. ◆ FillReport(). void RJittedFilter::FillReport ; (; ROOT::RDF::RCutFlowReport & ; cr); const. finalvirtual . Reimplemented from ROOT::Detail::RDF::RFilterBase.; Definition at line 74 of file RJittedFilter.cxx. ◆ FinalizeSlot(). void RJittedFilter::FinalizeSlot ; (; unsigned int ; slot). finalvirtual . Clean-up operations to be performed at the end of a task. ; Implements ROOT::Detail::RDF::RFilterBase.; Definition at line 110 of file RJittedFilter.cxx. ◆ GetGraph(). std::shared_ptr< RDFGraphDrawing::GraphNode > RJittedFilter::GetGraph ; (; std::unordered_map< void *, std::shared_ptr< RDFGraphDrawing::GraphNode > > & ; visitedMap). finalvirtual . Implements ROOT::Detail::RDF::RNodeBase.; Definition at line 132 of file RJittedFilter.cxx. ◆ GetVariedFilter(). std::shared_ptr< RNodeBase > RJittedFilter::GetVariedFilter ; (; const std::string & ; ). finalvirtual . Return a clone of this node that acts as a Filter working with values in the variationName ""universe"". ; Reimplemented from ROOT::Detail::RDF::RNodeBase.; Definition at line 141 of file RJittedFilter.cxx. ◆ IncrChildrenCount(). void RJittedFilter::IncrChildrenCount ; (; ). finalvirtual . Implements ROOT::Detail::RDF::RNodeBase.; Definition at line 80 of file RJittedFilter.cxx. ◆ InitNode(). void RJittedFilter::InitNode ; (; ). finalvirtual . Reimplemented",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RJittedFilter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RJittedFilter.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html:4819,Integrability,depend,depending,4819,"col, const std::type_info &ti) const;  Return true if AddDataSourceColumnReaders was called for column name col. ;  ; void IncrChildrenCount () final;  ; void Jit ();  Add RDF nodes that require just-in-time compilation to the computation graph. ;  ; void JitDeclarations ();  ; RLoopManager & operator= (const RLoopManager &)=delete;  ; RLoopManager & operator= (RLoopManager &&)=delete;  ; void PartialReport (ROOT::RDF::RCutFlowReport &) const final;  End of recursive chain of calls, does nothing. ;  ; void Register (RDefineBase *definePtr);  ; void Register (RDFInternal::RActionBase *actionPtr);  ; void Register (RDFInternal::RVariationBase *varPtr);  ; void Register (RFilterBase *filterPtr);  ; void Register (RRangeBase *rangePtr);  ; void RegisterCallback (ULong64_t everyNEvents, std::function< void(unsigned int)> &&f);  ; void Report (ROOT::RDF::RCutFlowReport &rep) const final;  Call FillReport on all booked filters. ;  ; void Run (bool jit=true);  Start the event loop with a different mechanism depending on IMT/no IMT, data source/no data source. ;  ; void SetEmptyEntryRange (std::pair< ULong64_t, ULong64_t > &&newRange);  ; void SetTree (std::shared_ptr< TTree > tree);  ; void StopProcessing () final;  ; void ToJitExec (const std::string &) const;  ;  Public Member Functions inherited from ROOT::Detail::RDF::RNodeBase;  RNodeBase (const std::vector< std::string > &variations={}, RLoopManager *lm=nullptr);  ; virtual ~RNodeBase ();  ; const std::vector< std::string > & GetVariations () const;  ; virtual std::shared_ptr< RNodeBase > GetVariedFilter (const std::string &);  Return a clone of this node that acts as a Filter working with values in the variationName ""universe"". ;  ; virtual void ResetChildrenCount ();  . Private Types; using ColumnNames_t = std::vector< std::string >;  ; enum class  ELoopType { ;   kROOTFiles; , kROOTFilesMT; , kNoFiles; , kNoFilesMT; , ;   kDataSource; , kDataSourceMT. };  . Private Member Functions; void CleanUpNodes ();  Perform cl",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html:21283,Integrability,depend,depend,21283," at line 271 of file RLoopManager.hxx. ◆ GetUniqueVariationsWithReaders(). std::set< std::pair< std::string_view, std::unique_ptr< ROOT::Internal::RDF::RVariationsWithReaders > > > & ROOT::Detail::RDF::RLoopManager::GetUniqueVariationsWithReaders ; (; ). inline . Definition at line 276 of file RLoopManager.hxx. ◆ HasDataSourceColumnReaders(). bool RLoopManager::HasDataSourceColumnReaders ; (; const std::string & ; col, . const std::type_info & ; ti . ); const. Return true if AddDataSourceColumnReaders was called for column name col. ; Definition at line 1103 of file RLoopManager.cxx. ◆ IncrChildrenCount(). void ROOT::Detail::RDF::RLoopManager::IncrChildrenCount ; (; ). inlinefinalvirtual . Implements ROOT::Detail::RDF::RNodeBase.; Definition at line 235 of file RLoopManager.hxx. ◆ InitNodes(). void RLoopManager::InitNodes ; (; ). private . Initialize all nodes of the functional graph before running the event loop. ; This method is called once per event-loop and performs generic initialization operations that do not depend on the specific processing slot (i.e. operations that are common for all threads). ; Definition at line 791 of file RLoopManager.cxx. ◆ InitNodeSlots(). void RLoopManager::InitNodeSlots ; (; TTreeReader * ; r, . unsigned int ; slot . ). private . Build TTreeReaderValues for all nodes This method loops over all filters, actions and other booked objects and calls their InitSlot method, to get them ready for running a task. ; Definition at line 728 of file RLoopManager.cxx. ◆ Jit(). void RLoopManager::Jit ; (; ). Add RDF nodes that require just-in-time compilation to the computation graph. ; This method also clears the contents of GetCodeToJit(). ; Definition at line 848 of file RLoopManager.cxx. ◆ JitDeclarations(). void ROOT::Detail::RDF::RLoopManager::JitDeclarations ; (; ). ◆ operator=() [1/2]. RLoopManager & ROOT::Detail::RDF::RLoopManager::operator= ; (; const RLoopManager & ; ). delete . ◆ operator=() [2/2]. RLoopManager & ROOT::Detail::RDF::RL",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html:23787,Integrability,depend,depending,23787,"nBase * ; actionPtr). Definition at line 946 of file RLoopManager.cxx. ◆ Register() [3/5]. void RLoopManager::Register ; (; RDFInternal::RVariationBase * ; varPtr). Definition at line 995 of file RLoopManager.cxx. ◆ Register() [4/5]. void RLoopManager::Register ; (; RFilterBase * ; filterPtr). Definition at line 959 of file RLoopManager.cxx. ◆ Register() [5/5]. void RLoopManager::Register ; (; RRangeBase * ; rangePtr). Definition at line 974 of file RLoopManager.cxx. ◆ RegisterCallback(). void RLoopManager::RegisterCallback ; (; ULong64_t ; everyNEvents, . std::function< void(unsigned int)> && ; f . ). Definition at line 1033 of file RLoopManager.cxx. ◆ Report(). void RLoopManager::Report ; (; ROOT::RDF::RCutFlowReport & ; rep); const. finalvirtual . Call FillReport on all booked filters. ; Implements ROOT::Detail::RDF::RNodeBase.; Definition at line 1012 of file RLoopManager.cxx. ◆ Run(). void RLoopManager::Run ; (; bool ; jit = true). Start the event loop with a different mechanism depending on IMT/no IMT, data source/no data source. ; Also perform a few setup and clean-up operations (jit actions if necessary, clear booked actions after the loop...). The jitting phase is skipped if the jit parameter is false (unsafe, use with care). ; Definition at line 889 of file RLoopManager.cxx. ◆ RunAndCheckFilters(). void RLoopManager::RunAndCheckFilters ; (; unsigned int ; slot, . Long64_t ; entry . ). private . Execute actions and make sure named filters are called for each event. ; Named filters must be called even if the analysis logic would not require it, lest they report confusing results. ; Definition at line 708 of file RLoopManager.cxx. ◆ RunDataSource(). void RLoopManager::RunDataSource ; (; ). private . Run event loop over data accessed through a DataSource, in sequence. ; Definition at line 635 of file RLoopManager.cxx. ◆ RunDataSourceMT(). void RLoopManager::RunDataSourceMT ; (; ). private . Run event loop over data accessed through a DataSource, in parallel. ; ",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html:5106,Modifiability,inherit,inherited,5106,"e;  ; void PartialReport (ROOT::RDF::RCutFlowReport &) const final;  End of recursive chain of calls, does nothing. ;  ; void Register (RDefineBase *definePtr);  ; void Register (RDFInternal::RActionBase *actionPtr);  ; void Register (RDFInternal::RVariationBase *varPtr);  ; void Register (RFilterBase *filterPtr);  ; void Register (RRangeBase *rangePtr);  ; void RegisterCallback (ULong64_t everyNEvents, std::function< void(unsigned int)> &&f);  ; void Report (ROOT::RDF::RCutFlowReport &rep) const final;  Call FillReport on all booked filters. ;  ; void Run (bool jit=true);  Start the event loop with a different mechanism depending on IMT/no IMT, data source/no data source. ;  ; void SetEmptyEntryRange (std::pair< ULong64_t, ULong64_t > &&newRange);  ; void SetTree (std::shared_ptr< TTree > tree);  ; void StopProcessing () final;  ; void ToJitExec (const std::string &) const;  ;  Public Member Functions inherited from ROOT::Detail::RDF::RNodeBase;  RNodeBase (const std::vector< std::string > &variations={}, RLoopManager *lm=nullptr);  ; virtual ~RNodeBase ();  ; const std::vector< std::string > & GetVariations () const;  ; virtual std::shared_ptr< RNodeBase > GetVariedFilter (const std::string &);  Return a clone of this node that acts as a Filter working with values in the variationName ""universe"". ;  ; virtual void ResetChildrenCount ();  . Private Types; using ColumnNames_t = std::vector< std::string >;  ; enum class  ELoopType { ;   kROOTFiles; , kROOTFilesMT; , kNoFiles; , kNoFilesMT; , ;   kDataSource; , kDataSourceMT. };  . Private Member Functions; void CleanUpNodes ();  Perform clean-up operations. To be called at the end of each event loop. ;  ; void CleanUpTask (TTreeReader *r, unsigned int slot);  Perform clean-up operations. To be called at the end of each task execution. ;  ; void EvalChildrenCounts ();  Trigger counting of number of children nodes for each node of the functional graph. ;  ; void InitNodes ();  Initialize all nodes of the functional gra",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html:10484,Modifiability,inherit,inherited,10484,"DF::Experimental::RSample * > fSampleMap;  Keys are fname + ""/"" + treename as RSampleInfo::fID; Values are pointers to the corresponding sample. ;  ; std::vector< ROOT::RDF::Experimental::RSample > fSamples;  Samples need to survive throughout the whole event loop, hence stored as an attribute. ;  ; std::vector< std::string > fSuppressErrorsForMissingBranches {};  ; std::shared_ptr< TTree > fTree {nullptr};  Shared pointer to the input TTree. ;  ; std::set< std::pair< std::string_view, std::unique_ptr< ROOT::Internal::RDF::RDefinesWithReaders > > > fUniqueDefinesWithReaders;  ; std::set< std::pair< std::string_view, std::unique_ptr< ROOT::Internal::RDF::RVariationsWithReaders > > > fUniqueVariationsWithReaders;  ; ColumnNames_t fValidBranchNames;  Cache of the tree/chain branch names. Never access directy, always use GetBranchNames(). ;  . Friends; struct RCallCleanUpTask;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Detail::RDF::RNodeBase; RLoopManager * fLoopManager;  ; unsigned int fNChildren {0};  Number of nodes of the functional graph hanging from this object. ;  ; unsigned int fNStopsReceived {0};  Number of times that a children node signaled to stop processing entries. ;  ; std::vector< std::string > fVariations;  List of systematic variations that affect this node. ;  . #include <ROOT/RDF/RLoopManager.hxx>. Inheritance diagram for ROOT::Detail::RDF::RLoopManager:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ ColumnNames_t. using ROOT::Detail::RDF::RLoopManager::ColumnNames_t = std::vector<std::string>. private . Definition at line 115 of file RLoopManager.hxx. Member Enumeration Documentation. ◆ ELoopType. enum class ROOT::Detail::RDF::RLoopManager::ELoopType. strongprivate . EnumeratorkROOTFiles ; kROOTFilesMT ; kNoFiles ; kNoFilesMT ; kDataSource ; kDataSourceMT . Definition at line 116 of file RLoopManager.hxx. Constructor & Destructor Docume",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html:21228,Performance,perform,performs,21228," at line 271 of file RLoopManager.hxx. ◆ GetUniqueVariationsWithReaders(). std::set< std::pair< std::string_view, std::unique_ptr< ROOT::Internal::RDF::RVariationsWithReaders > > > & ROOT::Detail::RDF::RLoopManager::GetUniqueVariationsWithReaders ; (; ). inline . Definition at line 276 of file RLoopManager.hxx. ◆ HasDataSourceColumnReaders(). bool RLoopManager::HasDataSourceColumnReaders ; (; const std::string & ; col, . const std::type_info & ; ti . ); const. Return true if AddDataSourceColumnReaders was called for column name col. ; Definition at line 1103 of file RLoopManager.cxx. ◆ IncrChildrenCount(). void ROOT::Detail::RDF::RLoopManager::IncrChildrenCount ; (; ). inlinefinalvirtual . Implements ROOT::Detail::RDF::RNodeBase.; Definition at line 235 of file RLoopManager.hxx. ◆ InitNodes(). void RLoopManager::InitNodes ; (; ). private . Initialize all nodes of the functional graph before running the event loop. ; This method is called once per event-loop and performs generic initialization operations that do not depend on the specific processing slot (i.e. operations that are common for all threads). ; Definition at line 791 of file RLoopManager.cxx. ◆ InitNodeSlots(). void RLoopManager::InitNodeSlots ; (; TTreeReader * ; r, . unsigned int ; slot . ). private . Build TTreeReaderValues for all nodes This method loops over all filters, actions and other booked objects and calls their InitSlot method, to get them ready for running a task. ; Definition at line 728 of file RLoopManager.cxx. ◆ Jit(). void RLoopManager::Jit ; (; ). Add RDF nodes that require just-in-time compilation to the computation graph. ; This method also clears the contents of GetCodeToJit(). ; Definition at line 848 of file RLoopManager.cxx. ◆ JitDeclarations(). void ROOT::Detail::RDF::RLoopManager::JitDeclarations ; (; ). ◆ operator=() [1/2]. RLoopManager & ROOT::Detail::RDF::RLoopManager::operator= ; (; const RLoopManager & ; ). delete . ◆ operator=() [2/2]. RLoopManager & ROOT::Detail::RDF::RL",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html:23847,Performance,perform,perform,23847,"::Register ; (; RDFInternal::RVariationBase * ; varPtr). Definition at line 995 of file RLoopManager.cxx. ◆ Register() [4/5]. void RLoopManager::Register ; (; RFilterBase * ; filterPtr). Definition at line 959 of file RLoopManager.cxx. ◆ Register() [5/5]. void RLoopManager::Register ; (; RRangeBase * ; rangePtr). Definition at line 974 of file RLoopManager.cxx. ◆ RegisterCallback(). void RLoopManager::RegisterCallback ; (; ULong64_t ; everyNEvents, . std::function< void(unsigned int)> && ; f . ). Definition at line 1033 of file RLoopManager.cxx. ◆ Report(). void RLoopManager::Report ; (; ROOT::RDF::RCutFlowReport & ; rep); const. finalvirtual . Call FillReport on all booked filters. ; Implements ROOT::Detail::RDF::RNodeBase.; Definition at line 1012 of file RLoopManager.cxx. ◆ Run(). void RLoopManager::Run ; (; bool ; jit = true). Start the event loop with a different mechanism depending on IMT/no IMT, data source/no data source. ; Also perform a few setup and clean-up operations (jit actions if necessary, clear booked actions after the loop...). The jitting phase is skipped if the jit parameter is false (unsafe, use with care). ; Definition at line 889 of file RLoopManager.cxx. ◆ RunAndCheckFilters(). void RLoopManager::RunAndCheckFilters ; (; unsigned int ; slot, . Long64_t ; entry . ). private . Execute actions and make sure named filters are called for each event. ; Named filters must be called even if the analysis logic would not require it, lest they report confusing results. ; Definition at line 708 of file RLoopManager.cxx. ◆ RunDataSource(). void RLoopManager::RunDataSource ; (; ). private . Run event loop over data accessed through a DataSource, in sequence. ; Definition at line 635 of file RLoopManager.cxx. ◆ RunDataSourceMT(). void RLoopManager::RunDataSourceMT ; (; ). private . Run event loop over data accessed through a DataSource, in parallel. ; Definition at line 666 of file RLoopManager.cxx. ◆ RunEmptySource(). void RLoopManager::RunEmptySource ; (; ",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html:24019,Safety,unsafe,unsafe,24019,". ◆ Register() [4/5]. void RLoopManager::Register ; (; RFilterBase * ; filterPtr). Definition at line 959 of file RLoopManager.cxx. ◆ Register() [5/5]. void RLoopManager::Register ; (; RRangeBase * ; rangePtr). Definition at line 974 of file RLoopManager.cxx. ◆ RegisterCallback(). void RLoopManager::RegisterCallback ; (; ULong64_t ; everyNEvents, . std::function< void(unsigned int)> && ; f . ). Definition at line 1033 of file RLoopManager.cxx. ◆ Report(). void RLoopManager::Report ; (; ROOT::RDF::RCutFlowReport & ; rep); const. finalvirtual . Call FillReport on all booked filters. ; Implements ROOT::Detail::RDF::RNodeBase.; Definition at line 1012 of file RLoopManager.cxx. ◆ Run(). void RLoopManager::Run ; (; bool ; jit = true). Start the event loop with a different mechanism depending on IMT/no IMT, data source/no data source. ; Also perform a few setup and clean-up operations (jit actions if necessary, clear booked actions after the loop...). The jitting phase is skipped if the jit parameter is false (unsafe, use with care). ; Definition at line 889 of file RLoopManager.cxx. ◆ RunAndCheckFilters(). void RLoopManager::RunAndCheckFilters ; (; unsigned int ; slot, . Long64_t ; entry . ). private . Execute actions and make sure named filters are called for each event. ; Named filters must be called even if the analysis logic would not require it, lest they report confusing results. ; Definition at line 708 of file RLoopManager.cxx. ◆ RunDataSource(). void RLoopManager::RunDataSource ; (; ). private . Run event loop over data accessed through a DataSource, in sequence. ; Definition at line 635 of file RLoopManager.cxx. ◆ RunDataSourceMT(). void RLoopManager::RunDataSourceMT ; (; ). private . Run event loop over data accessed through a DataSource, in parallel. ; Definition at line 666 of file RLoopManager.cxx. ◆ RunEmptySource(). void RLoopManager::RunEmptySource ; (; ). private . Run event loop with no source files, in sequence. ; Definition at line 505 of file RLoopMa",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html:6656,Security,access,accessed,6656,"kROOTFiles; , kROOTFilesMT; , kNoFiles; , kNoFilesMT; , ;   kDataSource; , kDataSourceMT. };  . Private Member Functions; void CleanUpNodes ();  Perform clean-up operations. To be called at the end of each event loop. ;  ; void CleanUpTask (TTreeReader *r, unsigned int slot);  Perform clean-up operations. To be called at the end of each task execution. ;  ; void EvalChildrenCounts ();  Trigger counting of number of children nodes for each node of the functional graph. ;  ; void InitNodes ();  Initialize all nodes of the functional graph before running the event loop. ;  ; void InitNodeSlots (TTreeReader *r, unsigned int slot);  Build TTreeReaderValues for all nodes This method loops over all filters, actions and other booked objects and calls their InitSlot method, to get them ready for running a task. ;  ; void RunAndCheckFilters (unsigned int slot, Long64_t entry);  Execute actions and make sure named filters are called for each event. ;  ; void RunDataSource ();  Run event loop over data accessed through a DataSource, in sequence. ;  ; void RunDataSourceMT ();  Run event loop over data accessed through a DataSource, in parallel. ;  ; void RunEmptySource ();  Run event loop with no source files, in sequence. ;  ; void RunEmptySourceMT ();  Run event loop with no source files, in parallel. ;  ; void RunTreeProcessorMT ();  Run event loop over one or multiple ROOT files, in parallel. ;  ; void RunTreeReader ();  Run event loop over one or multiple ROOT files, in sequence. ;  ; void SetupSampleCallbacks (TTreeReader *r, unsigned int slot);  ; void UpdateSampleInfo (unsigned int slot, const std::pair< ULong64_t, ULong64_t > &range);  ; void UpdateSampleInfo (unsigned int slot, TTreeReader &r);  . Private Attributes; Long64_t fBeginEntry {0};  ; std::vector< RDFInternal::RActionBase * > fBookedActions;  Non-owning pointers to actions to be run. ;  ; std::vector< RDefineBase * > fBookedDefines;  ; std::vector< RFilterBase * > fBookedFilters;  ; std::vector< RFilterBase ",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html:6756,Security,access,accessed,6756,"vate Member Functions; void CleanUpNodes ();  Perform clean-up operations. To be called at the end of each event loop. ;  ; void CleanUpTask (TTreeReader *r, unsigned int slot);  Perform clean-up operations. To be called at the end of each task execution. ;  ; void EvalChildrenCounts ();  Trigger counting of number of children nodes for each node of the functional graph. ;  ; void InitNodes ();  Initialize all nodes of the functional graph before running the event loop. ;  ; void InitNodeSlots (TTreeReader *r, unsigned int slot);  Build TTreeReaderValues for all nodes This method loops over all filters, actions and other booked objects and calls their InitSlot method, to get them ready for running a task. ;  ; void RunAndCheckFilters (unsigned int slot, Long64_t entry);  Execute actions and make sure named filters are called for each event. ;  ; void RunDataSource ();  Run event loop over data accessed through a DataSource, in sequence. ;  ; void RunDataSourceMT ();  Run event loop over data accessed through a DataSource, in parallel. ;  ; void RunEmptySource ();  Run event loop with no source files, in sequence. ;  ; void RunEmptySourceMT ();  Run event loop with no source files, in parallel. ;  ; void RunTreeProcessorMT ();  Run event loop over one or multiple ROOT files, in parallel. ;  ; void RunTreeReader ();  Run event loop over one or multiple ROOT files, in sequence. ;  ; void SetupSampleCallbacks (TTreeReader *r, unsigned int slot);  ; void UpdateSampleInfo (unsigned int slot, const std::pair< ULong64_t, ULong64_t > &range);  ; void UpdateSampleInfo (unsigned int slot, TTreeReader &r);  . Private Attributes; Long64_t fBeginEntry {0};  ; std::vector< RDFInternal::RActionBase * > fBookedActions;  Non-owning pointers to actions to be run. ;  ; std::vector< RDefineBase * > fBookedDefines;  ; std::vector< RFilterBase * > fBookedFilters;  ; std::vector< RFilterBase * > fBookedNamedFilters;  Contains a subset of fBookedFilters, i.e. only the named filters. ;  ; st",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html:10345,Security,access,access,10345,"Callbacks;  Registered callbacks to call at the beginning of each ""data block"". ;  ; std::vector< ROOT::RDF::RSampleInfo > fSampleInfos;  ; std::unordered_map< std::string, ROOT::RDF::Experimental::RSample * > fSampleMap;  Keys are fname + ""/"" + treename as RSampleInfo::fID; Values are pointers to the corresponding sample. ;  ; std::vector< ROOT::RDF::Experimental::RSample > fSamples;  Samples need to survive throughout the whole event loop, hence stored as an attribute. ;  ; std::vector< std::string > fSuppressErrorsForMissingBranches {};  ; std::shared_ptr< TTree > fTree {nullptr};  Shared pointer to the input TTree. ;  ; std::set< std::pair< std::string_view, std::unique_ptr< ROOT::Internal::RDF::RDefinesWithReaders > > > fUniqueDefinesWithReaders;  ; std::set< std::pair< std::string_view, std::unique_ptr< ROOT::Internal::RDF::RVariationsWithReaders > > > fUniqueVariationsWithReaders;  ; ColumnNames_t fValidBranchNames;  Cache of the tree/chain branch names. Never access directy, always use GetBranchNames(). ;  . Friends; struct RCallCleanUpTask;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Detail::RDF::RNodeBase; RLoopManager * fLoopManager;  ; unsigned int fNChildren {0};  Number of nodes of the functional graph hanging from this object. ;  ; unsigned int fNStopsReceived {0};  Number of times that a children node signaled to stop processing entries. ;  ; std::vector< std::string > fVariations;  List of systematic variations that affect this node. ;  . #include <ROOT/RDF/RLoopManager.hxx>. Inheritance diagram for ROOT::Detail::RDF::RLoopManager:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ ColumnNames_t. using ROOT::Detail::RDF::RLoopManager::ColumnNames_t = std::vector<std::string>. private . Definition at line 115 of file RLoopManager.hxx. Member Enumeration Documentation. ◆ ELoopType. enum class ROOT::Detail::RDF::RLoopManager::ELoopType. strongpr",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html:24549,Security,access,accessed,24549,"lReport on all booked filters. ; Implements ROOT::Detail::RDF::RNodeBase.; Definition at line 1012 of file RLoopManager.cxx. ◆ Run(). void RLoopManager::Run ; (; bool ; jit = true). Start the event loop with a different mechanism depending on IMT/no IMT, data source/no data source. ; Also perform a few setup and clean-up operations (jit actions if necessary, clear booked actions after the loop...). The jitting phase is skipped if the jit parameter is false (unsafe, use with care). ; Definition at line 889 of file RLoopManager.cxx. ◆ RunAndCheckFilters(). void RLoopManager::RunAndCheckFilters ; (; unsigned int ; slot, . Long64_t ; entry . ). private . Execute actions and make sure named filters are called for each event. ; Named filters must be called even if the analysis logic would not require it, lest they report confusing results. ; Definition at line 708 of file RLoopManager.cxx. ◆ RunDataSource(). void RLoopManager::RunDataSource ; (; ). private . Run event loop over data accessed through a DataSource, in sequence. ; Definition at line 635 of file RLoopManager.cxx. ◆ RunDataSourceMT(). void RLoopManager::RunDataSourceMT ; (; ). private . Run event loop over data accessed through a DataSource, in parallel. ; Definition at line 666 of file RLoopManager.cxx. ◆ RunEmptySource(). void RLoopManager::RunEmptySource ; (; ). private . Run event loop with no source files, in sequence. ; Definition at line 505 of file RLoopManager.cxx. ◆ RunEmptySourceMT(). void RLoopManager::RunEmptySourceMT ; (; ). private . Run event loop with no source files, in parallel. ; Definition at line 458 of file RLoopManager.cxx. ◆ RunTreeProcessorMT(). void RLoopManager::RunTreeProcessorMT ; (; ). private . Run event loop over one or multiple ROOT files, in parallel. ; Definition at line 549 of file RLoopManager.cxx. ◆ RunTreeReader(). void RLoopManager::RunTreeReader ; (; ). private . Run event loop over one or multiple ROOT files, in sequence. ; Definition at line 597 of file RLoopManager.c",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html:24743,Security,access,accessed,24743,"ent loop with a different mechanism depending on IMT/no IMT, data source/no data source. ; Also perform a few setup and clean-up operations (jit actions if necessary, clear booked actions after the loop...). The jitting phase is skipped if the jit parameter is false (unsafe, use with care). ; Definition at line 889 of file RLoopManager.cxx. ◆ RunAndCheckFilters(). void RLoopManager::RunAndCheckFilters ; (; unsigned int ; slot, . Long64_t ; entry . ). private . Execute actions and make sure named filters are called for each event. ; Named filters must be called even if the analysis logic would not require it, lest they report confusing results. ; Definition at line 708 of file RLoopManager.cxx. ◆ RunDataSource(). void RLoopManager::RunDataSource ; (; ). private . Run event loop over data accessed through a DataSource, in sequence. ; Definition at line 635 of file RLoopManager.cxx. ◆ RunDataSourceMT(). void RLoopManager::RunDataSourceMT ; (; ). private . Run event loop over data accessed through a DataSource, in parallel. ; Definition at line 666 of file RLoopManager.cxx. ◆ RunEmptySource(). void RLoopManager::RunEmptySource ; (; ). private . Run event loop with no source files, in sequence. ; Definition at line 505 of file RLoopManager.cxx. ◆ RunEmptySourceMT(). void RLoopManager::RunEmptySourceMT ; (; ). private . Run event loop with no source files, in parallel. ; Definition at line 458 of file RLoopManager.cxx. ◆ RunTreeProcessorMT(). void RLoopManager::RunTreeProcessorMT ; (; ). private . Run event loop over one or multiple ROOT files, in parallel. ; Definition at line 549 of file RLoopManager.cxx. ◆ RunTreeReader(). void RLoopManager::RunTreeReader ; (; ). private . Run event loop over one or multiple ROOT files, in sequence. ; Definition at line 597 of file RLoopManager.cxx. ◆ SetEmptyEntryRange(). void RLoopManager::SetEmptyEntryRange ; (; std::pair< ULong64_t, ULong64_t > && ; newRange). Definition at line 1158 of file RLoopManager.cxx. ◆ SetTree(). void RLoop",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html:33625,Security,access,access,33625," + ""/"" + treename as RSampleInfo::fID; Values are pointers to the corresponding sample. ; Definition at line 135 of file RLoopManager.hxx. ◆ fSamples. std::vector<ROOT::RDF::Experimental::RSample> ROOT::Detail::RDF::RLoopManager::fSamples. private . Samples need to survive throughout the whole event loop, hence stored as an attribute. ; Definition at line 137 of file RLoopManager.hxx. ◆ fSuppressErrorsForMissingBranches. std::vector<std::string> ROOT::Detail::RDF::RLoopManager::fSuppressErrorsForMissingBranches {}. private . Definition at line 188 of file RLoopManager.hxx. ◆ fTree. std::shared_ptr<TTree> ROOT::Detail::RDF::RLoopManager::fTree {nullptr}. private . Shared pointer to the input TTree. ; It does not delete the pointee if the TTree/TChain was passed directly as an argument to RDataFrame's ctor (in which case we let users retain ownership). ; Definition at line 130 of file RLoopManager.hxx. ◆ fUniqueDefinesWithReaders. std::set<std::pair<std::string_view, std::unique_ptr<ROOT::Internal::RDF::RDefinesWithReaders> > > ROOT::Detail::RDF::RLoopManager::fUniqueDefinesWithReaders. private . Definition at line 191 of file RLoopManager.hxx. ◆ fUniqueVariationsWithReaders. std::set<std::pair<std::string_view, std::unique_ptr<ROOT::Internal::RDF::RVariationsWithReaders> > > ROOT::Detail::RDF::RLoopManager::fUniqueVariationsWithReaders. private . Definition at line 193 of file RLoopManager.hxx. ◆ fValidBranchNames. ColumnNames_t ROOT::Detail::RDF::RLoopManager::fValidBranchNames. private . Cache of the tree/chain branch names. Never access directy, always use GetBranchNames(). ; Definition at line 165 of file RLoopManager.hxx. Libraries for ROOT::Detail::RDF::RLoopManager:. [legend]; The documentation for this class was generated from the following files:; tree/dataframe/inc/ROOT/RDF/RLoopManager.hxx; tree/dataframe/src/RLoopManager.cxx. ROOTDetailRDFRLoopManager. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html:24339,Testability,log,logic,24339,"nts, . std::function< void(unsigned int)> && ; f . ). Definition at line 1033 of file RLoopManager.cxx. ◆ Report(). void RLoopManager::Report ; (; ROOT::RDF::RCutFlowReport & ; rep); const. finalvirtual . Call FillReport on all booked filters. ; Implements ROOT::Detail::RDF::RNodeBase.; Definition at line 1012 of file RLoopManager.cxx. ◆ Run(). void RLoopManager::Run ; (; bool ; jit = true). Start the event loop with a different mechanism depending on IMT/no IMT, data source/no data source. ; Also perform a few setup and clean-up operations (jit actions if necessary, clear booked actions after the loop...). The jitting phase is skipped if the jit parameter is false (unsafe, use with care). ; Definition at line 889 of file RLoopManager.cxx. ◆ RunAndCheckFilters(). void RLoopManager::RunAndCheckFilters ; (; unsigned int ; slot, . Long64_t ; entry . ). private . Execute actions and make sure named filters are called for each event. ; Named filters must be called even if the analysis logic would not require it, lest they report confusing results. ; Definition at line 708 of file RLoopManager.cxx. ◆ RunDataSource(). void RLoopManager::RunDataSource ; (; ). private . Run event loop over data accessed through a DataSource, in sequence. ; Definition at line 635 of file RLoopManager.cxx. ◆ RunDataSourceMT(). void RLoopManager::RunDataSourceMT ; (; ). private . Run event loop over data accessed through a DataSource, in parallel. ; Definition at line 666 of file RLoopManager.cxx. ◆ RunEmptySource(). void RLoopManager::RunEmptySource ; (; ). private . Run event loop with no source files, in sequence. ; Definition at line 505 of file RLoopManager.cxx. ◆ RunEmptySourceMT(). void RLoopManager::RunEmptySourceMT ; (; ). private . Run event loop with no source files, in parallel. ; Definition at line 458 of file RLoopManager.cxx. ◆ RunTreeProcessorMT(). void RLoopManager::RunTreeProcessorMT ; (; ). private . Run event loop over one or multiple ROOT files, in parallel. ; Definition at",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html:21903,Usability,clear,clears,21903,"drenCount ; (; ). inlinefinalvirtual . Implements ROOT::Detail::RDF::RNodeBase.; Definition at line 235 of file RLoopManager.hxx. ◆ InitNodes(). void RLoopManager::InitNodes ; (; ). private . Initialize all nodes of the functional graph before running the event loop. ; This method is called once per event-loop and performs generic initialization operations that do not depend on the specific processing slot (i.e. operations that are common for all threads). ; Definition at line 791 of file RLoopManager.cxx. ◆ InitNodeSlots(). void RLoopManager::InitNodeSlots ; (; TTreeReader * ; r, . unsigned int ; slot . ). private . Build TTreeReaderValues for all nodes This method loops over all filters, actions and other booked objects and calls their InitSlot method, to get them ready for running a task. ; Definition at line 728 of file RLoopManager.cxx. ◆ Jit(). void RLoopManager::Jit ; (; ). Add RDF nodes that require just-in-time compilation to the computation graph. ; This method also clears the contents of GetCodeToJit(). ; Definition at line 848 of file RLoopManager.cxx. ◆ JitDeclarations(). void ROOT::Detail::RDF::RLoopManager::JitDeclarations ; (; ). ◆ operator=() [1/2]. RLoopManager & ROOT::Detail::RDF::RLoopManager::operator= ; (; const RLoopManager & ; ). delete . ◆ operator=() [2/2]. RLoopManager & ROOT::Detail::RDF::RLoopManager::operator= ; (; RLoopManager && ; ). delete . ◆ PartialReport(). void ROOT::Detail::RDF::RLoopManager::PartialReport ; (; ROOT::RDF::RCutFlowReport & ; ); const. inlinefinalvirtual . End of recursive chain of calls, does nothing. ; Implements ROOT::Detail::RDF::RNodeBase.; Definition at line 233 of file RLoopManager.hxx. ◆ Register() [1/5]. void RLoopManager::Register ; (; RDefineBase * ; definePtr). Definition at line 984 of file RLoopManager.cxx. ◆ Register() [2/5]. void RLoopManager::Register ; (; RDFInternal::RActionBase * ; actionPtr). Definition at line 946 of file RLoopManager.cxx. ◆ Register() [3/5]. void RLoopManager::Register ; (; ",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html:23918,Usability,clear,clear,23918,"::Register ; (; RDFInternal::RVariationBase * ; varPtr). Definition at line 995 of file RLoopManager.cxx. ◆ Register() [4/5]. void RLoopManager::Register ; (; RFilterBase * ; filterPtr). Definition at line 959 of file RLoopManager.cxx. ◆ Register() [5/5]. void RLoopManager::Register ; (; RRangeBase * ; rangePtr). Definition at line 974 of file RLoopManager.cxx. ◆ RegisterCallback(). void RLoopManager::RegisterCallback ; (; ULong64_t ; everyNEvents, . std::function< void(unsigned int)> && ; f . ). Definition at line 1033 of file RLoopManager.cxx. ◆ Report(). void RLoopManager::Report ; (; ROOT::RDF::RCutFlowReport & ; rep); const. finalvirtual . Call FillReport on all booked filters. ; Implements ROOT::Detail::RDF::RNodeBase.; Definition at line 1012 of file RLoopManager.cxx. ◆ Run(). void RLoopManager::Run ; (; bool ; jit = true). Start the event loop with a different mechanism depending on IMT/no IMT, data source/no data source. ; Also perform a few setup and clean-up operations (jit actions if necessary, clear booked actions after the loop...). The jitting phase is skipped if the jit parameter is false (unsafe, use with care). ; Definition at line 889 of file RLoopManager.cxx. ◆ RunAndCheckFilters(). void RLoopManager::RunAndCheckFilters ; (; unsigned int ; slot, . Long64_t ; entry . ). private . Execute actions and make sure named filters are called for each event. ; Named filters must be called even if the analysis logic would not require it, lest they report confusing results. ; Definition at line 708 of file RLoopManager.cxx. ◆ RunDataSource(). void RLoopManager::RunDataSource ; (; ). private . Run event loop over data accessed through a DataSource, in sequence. ; Definition at line 635 of file RLoopManager.cxx. ◆ RunDataSourceMT(). void RLoopManager::RunDataSourceMT ; (; ). private . Run event loop over data accessed through a DataSource, in parallel. ; Definition at line 666 of file RLoopManager.cxx. ◆ RunEmptySource(). void RLoopManager::RunEmptySource ; (; ",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RRange.html:927,Availability,down,downstream,927,". ROOT: ROOT::Detail::RDF::RRange< PrevNodeRaw > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Attributes |; List of all members ; ROOT::Detail::RDF::RRange< PrevNodeRaw > Class Template Referencefinal. ; template<typename PrevNodeRaw>; class ROOT::Detail::RDF::RRange< PrevNodeRaw >; Definition at line 43 of file RRange.hxx. Public Member Functions;  RRange (const RRange &)=delete;  ;  RRange (unsigned int start, unsigned int stop, unsigned int stride, std::shared_ptr< PrevNode_t > pd);  ;  ~RRange ();  ; void AddFilterName (std::vector< std::string > &filters) final;  This function must be defined by all nodes, but only the filters will add their name. ;  ; bool CheckFilters (unsigned int slot, Long64_t entry) final;  Ranges act as filters when it comes to selecting entries that downstream nodes should process. ;  ; std::shared_ptr< RDFGraphDrawing::GraphNode > GetGraph (std::unordered_map< void *, std::shared_ptr< RDFGraphDrawing::GraphNode > > &visitedMap) final;  ; std::shared_ptr< RNodeBase > GetVariedFilter (const std::string &variationName) final;  Return a clone of this node that acts as a Filter working with values in the variationName ""universe"". ;  ; void IncrChildrenCount () final;  ; RRange & operator= (const RRange &)=delete;  ; void PartialReport (ROOT::RDF::RCutFlowReport &rep) const final;  ; void Report (ROOT::RDF::RCutFlowReport &rep) const final;  ; void StopProcessing () final;  ;  Public Member Functions inherited from ROOT::Detail::RDF::RRangeBase;  RRangeBase (RLoopManager *implPtr, unsigned int start, unsigned int stop, unsigned int stride, const unsigned int nSlots, const std::vector< std::string > &prevVariations);  ;  ~RRangeBase () override;  ; void InitNode ();  ; RRangeBase & operator= (const RRangeBase &)=delete;  ;  Public Member Functions inherited from ROOT::Detail::RDF::RNodeBase;  RNodeBase (const",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RRange.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RRange.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RRange.html:5168,Availability,down,downstream,5168,"_ptr< PrevNode_t > ; pd . ). inline . Definition at line 52 of file RRange.hxx. ◆ RRange() [2/2]. template<typename PrevNodeRaw > . ROOT::Detail::RDF::RRange< PrevNodeRaw >::RRange ; (; const RRange< PrevNodeRaw > & ; ). delete . ◆ ~RRange(). template<typename PrevNodeRaw > . ROOT::Detail::RDF::RRange< PrevNodeRaw >::~RRange ; (; ). inline . Definition at line 64 of file RRange.hxx. Member Function Documentation. ◆ AddFilterName(). template<typename PrevNodeRaw > . void ROOT::Detail::RDF::RRange< PrevNodeRaw >::AddFilterName ; (; std::vector< std::string > & ; filters). inlinefinalvirtual . This function must be defined by all nodes, but only the filters will add their name. ; Implements ROOT::Detail::RDF::RNodeBase.; Definition at line 115 of file RRange.hxx. ◆ CheckFilters(). template<typename PrevNodeRaw > . bool ROOT::Detail::RDF::RRange< PrevNodeRaw >::CheckFilters ; (; unsigned int ; slot, . Long64_t ; entry . ). inlinefinalvirtual . Ranges act as filters when it comes to selecting entries that downstream nodes should process. ; Implements ROOT::Detail::RDF::RNodeBase.; Definition at line 67 of file RRange.hxx. ◆ GetGraph(). template<typename PrevNodeRaw > . std::shared_ptr< RDFGraphDrawing::GraphNode > ROOT::Detail::RDF::RRange< PrevNodeRaw >::GetGraph ; (; std::unordered_map< void *, std::shared_ptr< RDFGraphDrawing::GraphNode > > & ; visitedMap). inlinefinalvirtual . Implements ROOT::Detail::RDF::RNodeBase.; Definition at line 117 of file RRange.hxx. ◆ GetVariedFilter(). template<typename PrevNodeRaw > . std::shared_ptr< RNodeBase > ROOT::Detail::RDF::RRange< PrevNodeRaw >::GetVariedFilter ; (; const std::string & ; ). inlinefinalvirtual . Return a clone of this node that acts as a Filter working with values in the variationName ""universe"". ; Reimplemented from ROOT::Detail::RDF::RNodeBase.; Definition at line 151 of file RRange.hxx. ◆ IncrChildrenCount(). template<typename PrevNodeRaw > . void ROOT::Detail::RDF::RRange< PrevNodeRaw >::IncrChildrenCount ; (;",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RRange.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RRange.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RRange.html:1586,Modifiability,inherit,inherited,1586,"add their name. ;  ; bool CheckFilters (unsigned int slot, Long64_t entry) final;  Ranges act as filters when it comes to selecting entries that downstream nodes should process. ;  ; std::shared_ptr< RDFGraphDrawing::GraphNode > GetGraph (std::unordered_map< void *, std::shared_ptr< RDFGraphDrawing::GraphNode > > &visitedMap) final;  ; std::shared_ptr< RNodeBase > GetVariedFilter (const std::string &variationName) final;  Return a clone of this node that acts as a Filter working with values in the variationName ""universe"". ;  ; void IncrChildrenCount () final;  ; RRange & operator= (const RRange &)=delete;  ; void PartialReport (ROOT::RDF::RCutFlowReport &rep) const final;  ; void Report (ROOT::RDF::RCutFlowReport &rep) const final;  ; void StopProcessing () final;  ;  Public Member Functions inherited from ROOT::Detail::RDF::RRangeBase;  RRangeBase (RLoopManager *implPtr, unsigned int start, unsigned int stop, unsigned int stride, const unsigned int nSlots, const std::vector< std::string > &prevVariations);  ;  ~RRangeBase () override;  ; void InitNode ();  ; RRangeBase & operator= (const RRangeBase &)=delete;  ;  Public Member Functions inherited from ROOT::Detail::RDF::RNodeBase;  RNodeBase (const std::vector< std::string > &variations={}, RLoopManager *lm=nullptr);  ; virtual ~RNodeBase ();  ; virtual RLoopManager * GetLoopManagerUnchecked ();  ; const std::vector< std::string > & GetVariations () const;  ; virtual void ResetChildrenCount ();  . Private Types; using PrevNode_t = std::conditional_t< std::is_same< PrevNodeRaw, RJittedFilter >::value, RFilterBase, PrevNodeRaw >;  . Private Attributes; PrevNode_t & fPrevNode;  ; const std::shared_ptr< PrevNode_t > fPrevNodePtr;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Detail::RDF::RRangeBase; bool fHasStopped {false};  True if the end of the range has been reached. ;  ; Long64_t fLastCheckedEntry {-1};  ; bool fLastResult {true};  ; ULong64_t fNProcessedEntries {0};  ; const unsigne",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RRange.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RRange.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RRange.html:1939,Modifiability,inherit,inherited,1939,"add their name. ;  ; bool CheckFilters (unsigned int slot, Long64_t entry) final;  Ranges act as filters when it comes to selecting entries that downstream nodes should process. ;  ; std::shared_ptr< RDFGraphDrawing::GraphNode > GetGraph (std::unordered_map< void *, std::shared_ptr< RDFGraphDrawing::GraphNode > > &visitedMap) final;  ; std::shared_ptr< RNodeBase > GetVariedFilter (const std::string &variationName) final;  Return a clone of this node that acts as a Filter working with values in the variationName ""universe"". ;  ; void IncrChildrenCount () final;  ; RRange & operator= (const RRange &)=delete;  ; void PartialReport (ROOT::RDF::RCutFlowReport &rep) const final;  ; void Report (ROOT::RDF::RCutFlowReport &rep) const final;  ; void StopProcessing () final;  ;  Public Member Functions inherited from ROOT::Detail::RDF::RRangeBase;  RRangeBase (RLoopManager *implPtr, unsigned int start, unsigned int stop, unsigned int stride, const unsigned int nSlots, const std::vector< std::string > &prevVariations);  ;  ~RRangeBase () override;  ; void InitNode ();  ; RRangeBase & operator= (const RRangeBase &)=delete;  ;  Public Member Functions inherited from ROOT::Detail::RDF::RNodeBase;  RNodeBase (const std::vector< std::string > &variations={}, RLoopManager *lm=nullptr);  ; virtual ~RNodeBase ();  ; virtual RLoopManager * GetLoopManagerUnchecked ();  ; const std::vector< std::string > & GetVariations () const;  ; virtual void ResetChildrenCount ();  . Private Types; using PrevNode_t = std::conditional_t< std::is_same< PrevNodeRaw, RJittedFilter >::value, RFilterBase, PrevNodeRaw >;  . Private Attributes; PrevNode_t & fPrevNode;  ; const std::shared_ptr< PrevNode_t > fPrevNodePtr;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Detail::RDF::RRangeBase; bool fHasStopped {false};  True if the end of the range has been reached. ;  ; Long64_t fLastCheckedEntry {-1};  ; bool fLastResult {true};  ; ULong64_t fNProcessedEntries {0};  ; const unsigne",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RRange.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RRange.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RRange.html:2544,Modifiability,inherit,inherited,2544,"unctions inherited from ROOT::Detail::RDF::RRangeBase;  RRangeBase (RLoopManager *implPtr, unsigned int start, unsigned int stop, unsigned int stride, const unsigned int nSlots, const std::vector< std::string > &prevVariations);  ;  ~RRangeBase () override;  ; void InitNode ();  ; RRangeBase & operator= (const RRangeBase &)=delete;  ;  Public Member Functions inherited from ROOT::Detail::RDF::RNodeBase;  RNodeBase (const std::vector< std::string > &variations={}, RLoopManager *lm=nullptr);  ; virtual ~RNodeBase ();  ; virtual RLoopManager * GetLoopManagerUnchecked ();  ; const std::vector< std::string > & GetVariations () const;  ; virtual void ResetChildrenCount ();  . Private Types; using PrevNode_t = std::conditional_t< std::is_same< PrevNodeRaw, RJittedFilter >::value, RFilterBase, PrevNodeRaw >;  . Private Attributes; PrevNode_t & fPrevNode;  ; const std::shared_ptr< PrevNode_t > fPrevNodePtr;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Detail::RDF::RRangeBase; bool fHasStopped {false};  True if the end of the range has been reached. ;  ; Long64_t fLastCheckedEntry {-1};  ; bool fLastResult {true};  ; ULong64_t fNProcessedEntries {0};  ; const unsigned int fNSlots;  Number of thread slots used by this node, inherited from parent node. ;  ; unsigned int fStart;  ; unsigned int fStop;  ; unsigned int fStride;  ; std::unordered_map< std::string, std::shared_ptr< RRangeBase > > fVariedRanges;  ;  Protected Attributes inherited from ROOT::Detail::RDF::RNodeBase; RLoopManager * fLoopManager;  ; unsigned int fNChildren {0};  Number of nodes of the functional graph hanging from this object. ;  ; unsigned int fNStopsReceived {0};  Number of times that a children node signaled to stop processing entries. ;  ; std::vector< std::string > fVariations;  List of systematic variations that affect this node. ;  . #include <ROOT/RDF/RRange.hxx>. Inheritance diagram for ROOT::Detail::RDF::RRange< PrevNodeRaw >:. This browser is not able to show SVG",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RRange.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RRange.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RRange.html:2841,Modifiability,inherit,inherited,2841,":vector< std::string > &prevVariations);  ;  ~RRangeBase () override;  ; void InitNode ();  ; RRangeBase & operator= (const RRangeBase &)=delete;  ;  Public Member Functions inherited from ROOT::Detail::RDF::RNodeBase;  RNodeBase (const std::vector< std::string > &variations={}, RLoopManager *lm=nullptr);  ; virtual ~RNodeBase ();  ; virtual RLoopManager * GetLoopManagerUnchecked ();  ; const std::vector< std::string > & GetVariations () const;  ; virtual void ResetChildrenCount ();  . Private Types; using PrevNode_t = std::conditional_t< std::is_same< PrevNodeRaw, RJittedFilter >::value, RFilterBase, PrevNodeRaw >;  . Private Attributes; PrevNode_t & fPrevNode;  ; const std::shared_ptr< PrevNode_t > fPrevNodePtr;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Detail::RDF::RRangeBase; bool fHasStopped {false};  True if the end of the range has been reached. ;  ; Long64_t fLastCheckedEntry {-1};  ; bool fLastResult {true};  ; ULong64_t fNProcessedEntries {0};  ; const unsigned int fNSlots;  Number of thread slots used by this node, inherited from parent node. ;  ; unsigned int fStart;  ; unsigned int fStop;  ; unsigned int fStride;  ; std::unordered_map< std::string, std::shared_ptr< RRangeBase > > fVariedRanges;  ;  Protected Attributes inherited from ROOT::Detail::RDF::RNodeBase; RLoopManager * fLoopManager;  ; unsigned int fNChildren {0};  Number of nodes of the functional graph hanging from this object. ;  ; unsigned int fNStopsReceived {0};  Number of times that a children node signaled to stop processing entries. ;  ; std::vector< std::string > fVariations;  List of systematic variations that affect this node. ;  . #include <ROOT/RDF/RRange.hxx>. Inheritance diagram for ROOT::Detail::RDF::RRange< PrevNodeRaw >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ PrevNode_t. template<typename PrevNodeRaw > . using ROOT::Detail::RDF::RRange< PrevNodeRaw >::Pre",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RRange.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RRange.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RRange.html:3051,Modifiability,inherit,inherited,3051,"RLoopManager *lm=nullptr);  ; virtual ~RNodeBase ();  ; virtual RLoopManager * GetLoopManagerUnchecked ();  ; const std::vector< std::string > & GetVariations () const;  ; virtual void ResetChildrenCount ();  . Private Types; using PrevNode_t = std::conditional_t< std::is_same< PrevNodeRaw, RJittedFilter >::value, RFilterBase, PrevNodeRaw >;  . Private Attributes; PrevNode_t & fPrevNode;  ; const std::shared_ptr< PrevNode_t > fPrevNodePtr;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Detail::RDF::RRangeBase; bool fHasStopped {false};  True if the end of the range has been reached. ;  ; Long64_t fLastCheckedEntry {-1};  ; bool fLastResult {true};  ; ULong64_t fNProcessedEntries {0};  ; const unsigned int fNSlots;  Number of thread slots used by this node, inherited from parent node. ;  ; unsigned int fStart;  ; unsigned int fStop;  ; unsigned int fStride;  ; std::unordered_map< std::string, std::shared_ptr< RRangeBase > > fVariedRanges;  ;  Protected Attributes inherited from ROOT::Detail::RDF::RNodeBase; RLoopManager * fLoopManager;  ; unsigned int fNChildren {0};  Number of nodes of the functional graph hanging from this object. ;  ; unsigned int fNStopsReceived {0};  Number of times that a children node signaled to stop processing entries. ;  ; std::vector< std::string > fVariations;  List of systematic variations that affect this node. ;  . #include <ROOT/RDF/RRange.hxx>. Inheritance diagram for ROOT::Detail::RDF::RRange< PrevNodeRaw >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ PrevNode_t. template<typename PrevNodeRaw > . using ROOT::Detail::RDF::RRange< PrevNodeRaw >::PrevNode_t = std::conditional_t<std::is_same<PrevNodeRaw, RJittedFilter>::value, RFilterBase, PrevNodeRaw>. private . Definition at line 47 of file RRange.hxx. Constructor & Destructor Documentation. ◆ RRange() [1/2]. template<typename PrevNodeRaw > . ROOT::Detail::RDF::RRange< Prev",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RRange.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RRange.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RRangeBase.html:659,Modifiability,inherit,inherited,659,". ROOT: ROOT::Detail::RDF::RRangeBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; List of all members ; ROOT::Detail::RDF::RRangeBase Class Reference. . Definition at line 33 of file RRangeBase.hxx. Public Member Functions;  RRangeBase (RLoopManager *implPtr, unsigned int start, unsigned int stop, unsigned int stride, const unsigned int nSlots, const std::vector< std::string > &prevVariations);  ;  ~RRangeBase () override;  ; void InitNode ();  ; RRangeBase & operator= (const RRangeBase &)=delete;  ;  Public Member Functions inherited from ROOT::Detail::RDF::RNodeBase;  RNodeBase (const std::vector< std::string > &variations={}, RLoopManager *lm=nullptr);  ; virtual ~RNodeBase ();  ; virtual void AddFilterName (std::vector< std::string > &filters)=0;  ; virtual bool CheckFilters (unsigned int, Long64_t)=0;  ; virtual std::shared_ptr< ROOT::Internal::RDF::GraphDrawing::GraphNode > GetGraph (std::unordered_map< void *, std::shared_ptr< ROOT::Internal::RDF::GraphDrawing::GraphNode > > &visitedMap)=0;  ; virtual RLoopManager * GetLoopManagerUnchecked ();  ; const std::vector< std::string > & GetVariations () const;  ; virtual std::shared_ptr< RNodeBase > GetVariedFilter (const std::string &);  Return a clone of this node that acts as a Filter working with values in the variationName ""universe"". ;  ; virtual void IncrChildrenCount ()=0;  ; virtual void PartialReport (ROOT::RDF::RCutFlowReport &) const =0;  ; virtual void Report (ROOT::RDF::RCutFlowReport &) const =0;  ; virtual void ResetChildrenCount ();  ; virtual void StopProcessing ()=0;  . Protected Attributes; bool fHasStopped {false};  True if the end of the range has been reached. ;  ; Long64_t fLastCheckedEntry {-1};  ; bool fLastResult {true};  ; ULong64_t fNProcessedEntries {0};  ; const unsigned int fNSlots;  Number of thread slots used by this node, inherited from parent node. ;  ; u",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RRangeBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RRangeBase.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RRangeBase.html:1967,Modifiability,inherit,inherited,1967," virtual bool CheckFilters (unsigned int, Long64_t)=0;  ; virtual std::shared_ptr< ROOT::Internal::RDF::GraphDrawing::GraphNode > GetGraph (std::unordered_map< void *, std::shared_ptr< ROOT::Internal::RDF::GraphDrawing::GraphNode > > &visitedMap)=0;  ; virtual RLoopManager * GetLoopManagerUnchecked ();  ; const std::vector< std::string > & GetVariations () const;  ; virtual std::shared_ptr< RNodeBase > GetVariedFilter (const std::string &);  Return a clone of this node that acts as a Filter working with values in the variationName ""universe"". ;  ; virtual void IncrChildrenCount ()=0;  ; virtual void PartialReport (ROOT::RDF::RCutFlowReport &) const =0;  ; virtual void Report (ROOT::RDF::RCutFlowReport &) const =0;  ; virtual void ResetChildrenCount ();  ; virtual void StopProcessing ()=0;  . Protected Attributes; bool fHasStopped {false};  True if the end of the range has been reached. ;  ; Long64_t fLastCheckedEntry {-1};  ; bool fLastResult {true};  ; ULong64_t fNProcessedEntries {0};  ; const unsigned int fNSlots;  Number of thread slots used by this node, inherited from parent node. ;  ; unsigned int fStart;  ; unsigned int fStop;  ; unsigned int fStride;  ; std::unordered_map< std::string, std::shared_ptr< RRangeBase > > fVariedRanges;  ;  Protected Attributes inherited from ROOT::Detail::RDF::RNodeBase; RLoopManager * fLoopManager;  ; unsigned int fNChildren {0};  Number of nodes of the functional graph hanging from this object. ;  ; unsigned int fNStopsReceived {0};  Number of times that a children node signaled to stop processing entries. ;  ; std::vector< std::string > fVariations;  List of systematic variations that affect this node. ;  . #include <ROOT/RDF/RRangeBase.hxx>. Inheritance diagram for ROOT::Detail::RDF::RRangeBase:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RRangeBase(). RRangeBase::RRangeBase ; (; RLoopManager * ; implPtr, . unsigned int ; start, . ",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RRangeBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RRangeBase.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RRangeBase.html:2177,Modifiability,inherit,inherited,2177,"oopManagerUnchecked ();  ; const std::vector< std::string > & GetVariations () const;  ; virtual std::shared_ptr< RNodeBase > GetVariedFilter (const std::string &);  Return a clone of this node that acts as a Filter working with values in the variationName ""universe"". ;  ; virtual void IncrChildrenCount ()=0;  ; virtual void PartialReport (ROOT::RDF::RCutFlowReport &) const =0;  ; virtual void Report (ROOT::RDF::RCutFlowReport &) const =0;  ; virtual void ResetChildrenCount ();  ; virtual void StopProcessing ()=0;  . Protected Attributes; bool fHasStopped {false};  True if the end of the range has been reached. ;  ; Long64_t fLastCheckedEntry {-1};  ; bool fLastResult {true};  ; ULong64_t fNProcessedEntries {0};  ; const unsigned int fNSlots;  Number of thread slots used by this node, inherited from parent node. ;  ; unsigned int fStart;  ; unsigned int fStop;  ; unsigned int fStride;  ; std::unordered_map< std::string, std::shared_ptr< RRangeBase > > fVariedRanges;  ;  Protected Attributes inherited from ROOT::Detail::RDF::RNodeBase; RLoopManager * fLoopManager;  ; unsigned int fNChildren {0};  Number of nodes of the functional graph hanging from this object. ;  ; unsigned int fNStopsReceived {0};  Number of times that a children node signaled to stop processing entries. ;  ; std::vector< std::string > fVariations;  List of systematic variations that affect this node. ;  . #include <ROOT/RDF/RRangeBase.hxx>. Inheritance diagram for ROOT::Detail::RDF::RRangeBase:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RRangeBase(). RRangeBase::RRangeBase ; (; RLoopManager * ; implPtr, . unsigned int ; start, . unsigned int ; stop, . unsigned int ; stride, . const unsigned int ; nSlots, . const std::vector< std::string > & ; prevVariations . ). Definition at line 15 of file RRangeBase.cxx. ◆ ~RRangeBase(). RRangeBase::~RRangeBase ; (; ). override . Definition at line 29 of file RRangeBa",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RRangeBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RRangeBase.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RRangeBase.html:4159,Modifiability,inherit,inherited,4159," (; ). override . Definition at line 29 of file RRangeBase.cxx. Member Function Documentation. ◆ InitNode(). void RRangeBase::InitNode ; (; ). Definition at line 21 of file RRangeBase.cxx. ◆ operator=(). RRangeBase & ROOT::Detail::RDF::RRangeBase::operator= ; (; const RRangeBase & ; ). delete . Member Data Documentation. ◆ fHasStopped. bool ROOT::Detail::RDF::RRangeBase::fHasStopped {false}. protected . True if the end of the range has been reached. ; Definition at line 41 of file RRangeBase.hxx. ◆ fLastCheckedEntry. Long64_t ROOT::Detail::RDF::RRangeBase::fLastCheckedEntry {-1}. protected . Definition at line 38 of file RRangeBase.hxx. ◆ fLastResult. bool ROOT::Detail::RDF::RRangeBase::fLastResult {true}. protected . Definition at line 39 of file RRangeBase.hxx. ◆ fNProcessedEntries. ULong64_t ROOT::Detail::RDF::RRangeBase::fNProcessedEntries {0}. protected . Definition at line 40 of file RRangeBase.hxx. ◆ fNSlots. const unsigned int ROOT::Detail::RDF::RRangeBase::fNSlots. protected . Number of thread slots used by this node, inherited from parent node. ; Definition at line 42 of file RRangeBase.hxx. ◆ fStart. unsigned int ROOT::Detail::RDF::RRangeBase::fStart. protected . Definition at line 35 of file RRangeBase.hxx. ◆ fStop. unsigned int ROOT::Detail::RDF::RRangeBase::fStop. protected . Definition at line 36 of file RRangeBase.hxx. ◆ fStride. unsigned int ROOT::Detail::RDF::RRangeBase::fStride. protected . Definition at line 37 of file RRangeBase.hxx. ◆ fVariedRanges. std::unordered_map<std::string, std::shared_ptr<RRangeBase> > ROOT::Detail::RDF::RRangeBase::fVariedRanges. protected . Definition at line 43 of file RRangeBase.hxx. Libraries for ROOT::Detail::RDF::RRangeBase:. [legend]; The documentation for this class was generated from the following files:; tree/dataframe/inc/ROOT/RDF/RRangeBase.hxx; tree/dataframe/src/RRangeBase.cxx. ROOTDetailRDFRRangeBase. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1RDF_1_1RRangeBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RRangeBase.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TCollectionProxyInfo.html:680,Security,access,accesses,680,". ROOT: ROOT::Detail::TCollectionProxyInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Static Public Attributes |; List of all members ; ROOT::Detail::TCollectionProxyInfo Class Reference. . Definition at line 57 of file TCollectionProxyInfo.h. Classes; struct  Address;  ; struct  Address< std::vector< Bool_t, A > >;  ; class  Environ;  Small helper to save proxy environment in the event of recursive calls. More...;  ; struct  EnvironBase;  ; class  Insert;  Small helper to encapsulate all necessary data accesses for containers like set, multiset etc. More...;  ; class  Iterators;  Small helper to implement the function to create,access and destroy iterators. More...;  ; struct  Iterators< Cont_t, true >;  ; struct  Iterators< std::vector< T >, false >;  ; class  IteratorValue;  Small helper to encapsulate whether to return the value pointed to by the iterator or its address. More...;  ; struct  IteratorValue< Cont_t, value_ptr * >;  ; class  MapInsert;  Small helper to encapsulate all necessary data accesses for containers like set, multiset etc. More...;  ; struct  PairHolder;  ; class  Pushback;  Small helper to encapsulate all necessary data accesses for containers like vector, list, deque. More...;  ; struct  Pushback< Internal::TStdBitsetHelper< Bitset_t > >;  ; struct  Pushback< std::vector< Bool_t, A > >;  ; class  Pushfront;  Small helper to encapsulate all necessary data accesses for containers like forward_list. More...;  ; struct  SfinaeHelper;  ; class  Type;  Small helper to encapsulate basic data accesses for all STL continers. More...;  ; struct  Type< Internal::TStdBitsetHelper< Bitset_t > >;  ; struct  Type< std::vector< Bool_t, A > >;  . Public Member Functions;  TCollectionProxyInfo (const std::type_info &info, size_t iter_size, size_t value_diff, int value_offset, void *(*size_fu",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TCollectionProxyInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TCollectionProxyInfo.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TCollectionProxyInfo.html:808,Security,access,access,808,". ROOT: ROOT::Detail::TCollectionProxyInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Static Public Attributes |; List of all members ; ROOT::Detail::TCollectionProxyInfo Class Reference. . Definition at line 57 of file TCollectionProxyInfo.h. Classes; struct  Address;  ; struct  Address< std::vector< Bool_t, A > >;  ; class  Environ;  Small helper to save proxy environment in the event of recursive calls. More...;  ; struct  EnvironBase;  ; class  Insert;  Small helper to encapsulate all necessary data accesses for containers like set, multiset etc. More...;  ; class  Iterators;  Small helper to implement the function to create,access and destroy iterators. More...;  ; struct  Iterators< Cont_t, true >;  ; struct  Iterators< std::vector< T >, false >;  ; class  IteratorValue;  Small helper to encapsulate whether to return the value pointed to by the iterator or its address. More...;  ; struct  IteratorValue< Cont_t, value_ptr * >;  ; class  MapInsert;  Small helper to encapsulate all necessary data accesses for containers like set, multiset etc. More...;  ; struct  PairHolder;  ; class  Pushback;  Small helper to encapsulate all necessary data accesses for containers like vector, list, deque. More...;  ; struct  Pushback< Internal::TStdBitsetHelper< Bitset_t > >;  ; struct  Pushback< std::vector< Bool_t, A > >;  ; class  Pushfront;  Small helper to encapsulate all necessary data accesses for containers like forward_list. More...;  ; struct  SfinaeHelper;  ; class  Type;  Small helper to encapsulate basic data accesses for all STL continers. More...;  ; struct  Type< Internal::TStdBitsetHelper< Bitset_t > >;  ; struct  Type< std::vector< Bool_t, A > >;  . Public Member Functions;  TCollectionProxyInfo (const std::type_info &info, size_t iter_size, size_t value_diff, int value_offset, void *(*size_fu",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TCollectionProxyInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TCollectionProxyInfo.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TCollectionProxyInfo.html:1186,Security,access,accesses,1186,"all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Static Public Attributes |; List of all members ; ROOT::Detail::TCollectionProxyInfo Class Reference. . Definition at line 57 of file TCollectionProxyInfo.h. Classes; struct  Address;  ; struct  Address< std::vector< Bool_t, A > >;  ; class  Environ;  Small helper to save proxy environment in the event of recursive calls. More...;  ; struct  EnvironBase;  ; class  Insert;  Small helper to encapsulate all necessary data accesses for containers like set, multiset etc. More...;  ; class  Iterators;  Small helper to implement the function to create,access and destroy iterators. More...;  ; struct  Iterators< Cont_t, true >;  ; struct  Iterators< std::vector< T >, false >;  ; class  IteratorValue;  Small helper to encapsulate whether to return the value pointed to by the iterator or its address. More...;  ; struct  IteratorValue< Cont_t, value_ptr * >;  ; class  MapInsert;  Small helper to encapsulate all necessary data accesses for containers like set, multiset etc. More...;  ; struct  PairHolder;  ; class  Pushback;  Small helper to encapsulate all necessary data accesses for containers like vector, list, deque. More...;  ; struct  Pushback< Internal::TStdBitsetHelper< Bitset_t > >;  ; struct  Pushback< std::vector< Bool_t, A > >;  ; class  Pushfront;  Small helper to encapsulate all necessary data accesses for containers like forward_list. More...;  ; struct  SfinaeHelper;  ; class  Type;  Small helper to encapsulate basic data accesses for all STL continers. More...;  ; struct  Type< Internal::TStdBitsetHelper< Bitset_t > >;  ; struct  Type< std::vector< Bool_t, A > >;  . Public Member Functions;  TCollectionProxyInfo (const std::type_info &info, size_t iter_size, size_t value_diff, int value_offset, void *(*size_func)(void *), void(*resize_func)(void *, size_t), void *(*clear_func)(void *), void *(*first_func)(void *), void *(*next_func)(void *), void *(*constr",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TCollectionProxyInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TCollectionProxyInfo.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TCollectionProxyInfo.html:1334,Security,access,accesses,1334,":Detail::TCollectionProxyInfo Class Reference. . Definition at line 57 of file TCollectionProxyInfo.h. Classes; struct  Address;  ; struct  Address< std::vector< Bool_t, A > >;  ; class  Environ;  Small helper to save proxy environment in the event of recursive calls. More...;  ; struct  EnvironBase;  ; class  Insert;  Small helper to encapsulate all necessary data accesses for containers like set, multiset etc. More...;  ; class  Iterators;  Small helper to implement the function to create,access and destroy iterators. More...;  ; struct  Iterators< Cont_t, true >;  ; struct  Iterators< std::vector< T >, false >;  ; class  IteratorValue;  Small helper to encapsulate whether to return the value pointed to by the iterator or its address. More...;  ; struct  IteratorValue< Cont_t, value_ptr * >;  ; class  MapInsert;  Small helper to encapsulate all necessary data accesses for containers like set, multiset etc. More...;  ; struct  PairHolder;  ; class  Pushback;  Small helper to encapsulate all necessary data accesses for containers like vector, list, deque. More...;  ; struct  Pushback< Internal::TStdBitsetHelper< Bitset_t > >;  ; struct  Pushback< std::vector< Bool_t, A > >;  ; class  Pushfront;  Small helper to encapsulate all necessary data accesses for containers like forward_list. More...;  ; struct  SfinaeHelper;  ; class  Type;  Small helper to encapsulate basic data accesses for all STL continers. More...;  ; struct  Type< Internal::TStdBitsetHelper< Bitset_t > >;  ; struct  Type< std::vector< Bool_t, A > >;  . Public Member Functions;  TCollectionProxyInfo (const std::type_info &info, size_t iter_size, size_t value_diff, int value_offset, void *(*size_func)(void *), void(*resize_func)(void *, size_t), void *(*clear_func)(void *), void *(*first_func)(void *), void *(*next_func)(void *), void *(*construct_func)(void *, size_t), void(*destruct_func)(void *, size_t), void *(*feed_func)(void *, void *, size_t), void *(*collect_func)(void *, void *), void *(*create",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TCollectionProxyInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TCollectionProxyInfo.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TCollectionProxyInfo.html:1574,Security,access,accesses,1574,"ron;  Small helper to save proxy environment in the event of recursive calls. More...;  ; struct  EnvironBase;  ; class  Insert;  Small helper to encapsulate all necessary data accesses for containers like set, multiset etc. More...;  ; class  Iterators;  Small helper to implement the function to create,access and destroy iterators. More...;  ; struct  Iterators< Cont_t, true >;  ; struct  Iterators< std::vector< T >, false >;  ; class  IteratorValue;  Small helper to encapsulate whether to return the value pointed to by the iterator or its address. More...;  ; struct  IteratorValue< Cont_t, value_ptr * >;  ; class  MapInsert;  Small helper to encapsulate all necessary data accesses for containers like set, multiset etc. More...;  ; struct  PairHolder;  ; class  Pushback;  Small helper to encapsulate all necessary data accesses for containers like vector, list, deque. More...;  ; struct  Pushback< Internal::TStdBitsetHelper< Bitset_t > >;  ; struct  Pushback< std::vector< Bool_t, A > >;  ; class  Pushfront;  Small helper to encapsulate all necessary data accesses for containers like forward_list. More...;  ; struct  SfinaeHelper;  ; class  Type;  Small helper to encapsulate basic data accesses for all STL continers. More...;  ; struct  Type< Internal::TStdBitsetHelper< Bitset_t > >;  ; struct  Type< std::vector< Bool_t, A > >;  . Public Member Functions;  TCollectionProxyInfo (const std::type_info &info, size_t iter_size, size_t value_diff, int value_offset, void *(*size_func)(void *), void(*resize_func)(void *, size_t), void *(*clear_func)(void *), void *(*first_func)(void *), void *(*next_func)(void *), void *(*construct_func)(void *, size_t), void(*destruct_func)(void *, size_t), void *(*feed_func)(void *, void *, size_t), void *(*collect_func)(void *, void *), void *(*create_env)(), void(*getIterators)(void *collection, void **begin_arena, void **end_arena, TVirtualCollectionProxy *proxy)=nullptr, void *(*copyIterator)(void *dest, const void *source)=nullptr, voi",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TCollectionProxyInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TCollectionProxyInfo.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TCollectionProxyInfo.html:1707,Security,access,accesses,1707,"ccesses for containers like set, multiset etc. More...;  ; class  Iterators;  Small helper to implement the function to create,access and destroy iterators. More...;  ; struct  Iterators< Cont_t, true >;  ; struct  Iterators< std::vector< T >, false >;  ; class  IteratorValue;  Small helper to encapsulate whether to return the value pointed to by the iterator or its address. More...;  ; struct  IteratorValue< Cont_t, value_ptr * >;  ; class  MapInsert;  Small helper to encapsulate all necessary data accesses for containers like set, multiset etc. More...;  ; struct  PairHolder;  ; class  Pushback;  Small helper to encapsulate all necessary data accesses for containers like vector, list, deque. More...;  ; struct  Pushback< Internal::TStdBitsetHelper< Bitset_t > >;  ; struct  Pushback< std::vector< Bool_t, A > >;  ; class  Pushfront;  Small helper to encapsulate all necessary data accesses for containers like forward_list. More...;  ; struct  SfinaeHelper;  ; class  Type;  Small helper to encapsulate basic data accesses for all STL continers. More...;  ; struct  Type< Internal::TStdBitsetHelper< Bitset_t > >;  ; struct  Type< std::vector< Bool_t, A > >;  . Public Member Functions;  TCollectionProxyInfo (const std::type_info &info, size_t iter_size, size_t value_diff, int value_offset, void *(*size_func)(void *), void(*resize_func)(void *, size_t), void *(*clear_func)(void *), void *(*first_func)(void *), void *(*next_func)(void *), void *(*construct_func)(void *, size_t), void(*destruct_func)(void *, size_t), void *(*feed_func)(void *, void *, size_t), void *(*collect_func)(void *, void *), void *(*create_env)(), void(*getIterators)(void *collection, void **begin_arena, void **end_arena, TVirtualCollectionProxy *proxy)=nullptr, void *(*copyIterator)(void *dest, const void *source)=nullptr, void *(*next)(void *iter, const void *end)=nullptr, void(*deleteSingleIterator)(void *iter)=nullptr, void(*deleteTwoIterators)(void *begin, void *end)=nullptr);  . Static Public Me",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TCollectionProxyInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TCollectionProxyInfo.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TRangeCast.html:561,Modifiability,inherit,inherited,561,". ROOT: ROOT::Detail::TRangeCast< T, isDynamic > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::Detail::TRangeCast< T, isDynamic > Class Template Reference. ; template<typename T, bool isDynamic>; class ROOT::Detail::TRangeCast< T, isDynamic >; Definition at line 311 of file TCollection.h. Public Member Functions;  TRangeCast (TCollection const &col);  ;  TRangeCast (TCollection const *col);  ;  Public Member Functions inherited from ROOT::RRangeCast< T, isDynamic, Range_t >;  RRangeCast (Range_t &&inputRange);  ; iterator begin ();  ; const_iterator begin () const;  ; iterator end ();  ; const_iterator end () const;  . Additional Inherited Members;  Public Types inherited from ROOT::RRangeCast< T, isDynamic, Range_t >; using const_iterator = Internal::TypedIter< T, decltype(std::cbegin(std::declval< Range_t >())), isDynamic >;  ; using iterator = Internal::TypedIter< T, decltype(std::begin(std::declval< Range_t >())), isDynamic >;  . #include <TCollection.h>. Inheritance diagram for ROOT::Detail::TRangeCast< T, isDynamic >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TRangeCast() [1/2]. template<typename T , bool isDynamic> . ROOT::Detail::TRangeCast< T, isDynamic >::TRangeCast ; (; TCollection const & ; col). inline . Definition at line 313 of file TCollection.h. ◆ TRangeCast() [2/2]. template<typename T , bool isDynamic> . ROOT::Detail::TRangeCast< T, isDynamic >::TRangeCast ; (; TCollection const * ; col). inline . Definition at line 316 of file TCollection.h. core/cont/inc/TCollection.h. ROOTDetailTRangeCast. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TRangeCast.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TRangeCast.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TRangeCast.html:810,Modifiability,inherit,inherited,810,". ROOT: ROOT::Detail::TRangeCast< T, isDynamic > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::Detail::TRangeCast< T, isDynamic > Class Template Reference. ; template<typename T, bool isDynamic>; class ROOT::Detail::TRangeCast< T, isDynamic >; Definition at line 311 of file TCollection.h. Public Member Functions;  TRangeCast (TCollection const &col);  ;  TRangeCast (TCollection const *col);  ;  Public Member Functions inherited from ROOT::RRangeCast< T, isDynamic, Range_t >;  RRangeCast (Range_t &&inputRange);  ; iterator begin ();  ; const_iterator begin () const;  ; iterator end ();  ; const_iterator end () const;  . Additional Inherited Members;  Public Types inherited from ROOT::RRangeCast< T, isDynamic, Range_t >; using const_iterator = Internal::TypedIter< T, decltype(std::cbegin(std::declval< Range_t >())), isDynamic >;  ; using iterator = Internal::TypedIter< T, decltype(std::begin(std::declval< Range_t >())), isDynamic >;  . #include <TCollection.h>. Inheritance diagram for ROOT::Detail::TRangeCast< T, isDynamic >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TRangeCast() [1/2]. template<typename T , bool isDynamic> . ROOT::Detail::TRangeCast< T, isDynamic >::TRangeCast ; (; TCollection const & ; col). inline . Definition at line 313 of file TCollection.h. ◆ TRangeCast() [2/2]. template<typename T , bool isDynamic> . ROOT::Detail::TRangeCast< T, isDynamic >::TRangeCast ; (; TCollection const * ; col). inline . Definition at line 316 of file TCollection.h. core/cont/inc/TCollection.h. ROOTDetailTRangeCast. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TRangeCast.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TRangeCast.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet-members.html:1800,Availability,error,error,1800,")ROOT::Detail::TSchemaRuleSetinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *="""")TObjectinlinevirtual; Clone(const char *newname="""") constTObjectvirtual; Compare(const TObject *obj) constTObjectvirtual; Copy(TObject &object) constTObjectvirtual; DeclFileName()ROOT::Detail::TSchemaRuleSetinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EConsistencyCheck enum nameROOT::Detail::TSchemaRuleSet; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; fAllRulesROOT::Detail::TSchemaRuleSetprivate; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fCheckSumROOT::Detail::TSchemaRuleSetprivate; fClassROOT::Detail::TSchemaRuleSetprivate; fClassNameROOT::Detail::TSchemaRuleSetprivate; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; FindRules(const TString &source) constROOT::Detail::TSchemaRuleSet; FindRules(const TString &source, Int_t version) constROOT::Detail::TSchemaRuleSet; FindRules(const TString &source, UInt_t checksum) constROOT::Detail::TSchemaRuleSet; FindRules(const TString &source, Int_t version, UInt_t checksum) constROOT::Detail::TSchemaRuleSet; fPersistentRulesROOT::Detail::TSchemaRuleSetprivate; fRemainingRulesROOT::Detail::TSchemaRuleSetprivate; fUniqueIDTObjectprivate",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet-members.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet-members.html:1881,Availability,error,error,1881,")ROOT::Detail::TSchemaRuleSetinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *="""")TObjectinlinevirtual; Clone(const char *newname="""") constTObjectvirtual; Compare(const TObject *obj) constTObjectvirtual; Copy(TObject &object) constTObjectvirtual; DeclFileName()ROOT::Detail::TSchemaRuleSetinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EConsistencyCheck enum nameROOT::Detail::TSchemaRuleSet; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; fAllRulesROOT::Detail::TSchemaRuleSetprivate; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fCheckSumROOT::Detail::TSchemaRuleSetprivate; fClassROOT::Detail::TSchemaRuleSetprivate; fClassNameROOT::Detail::TSchemaRuleSetprivate; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; FindRules(const TString &source) constROOT::Detail::TSchemaRuleSet; FindRules(const TString &source, Int_t version) constROOT::Detail::TSchemaRuleSet; FindRules(const TString &source, UInt_t checksum) constROOT::Detail::TSchemaRuleSet; FindRules(const TString &source, Int_t version, UInt_t checksum) constROOT::Detail::TSchemaRuleSet; fPersistentRulesROOT::Detail::TSchemaRuleSetprivate; fRemainingRulesROOT::Detail::TSchemaRuleSetprivate; fUniqueIDTObjectprivate",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet-members.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet-members.html:229,Modifiability,inherit,inherited,229,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOT::Detail::TSchemaRuleSet Member List. This is the complete list of members for ROOT::Detail::TSchemaRuleSet, including all inherited members. AbstractMethod(const char *method) constTObject; AddRule(TSchemaRule *rule, EConsistencyCheck checkConsistency=kCheckAll, TString *errmsg=nullptr)ROOT::Detail::TSchemaRuleSet; AddRules(TSchemaRuleSet *rules, EConsistencyCheck checkConsistency=kCheckAll, TString *errmsg=nullptr)ROOT::Detail::TSchemaRuleSet; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; AsString(TString &out) constROOT::Detail::TSchemaRuleSet; Browse(TBrowser *b)TObjectvirtual; CheckedHash()TObjectinline; Class()ROOT::Detail::TSchemaRuleSetstatic; Class_Name()ROOT::Detail::TSchemaRuleSetstatic; Class_Version()ROOT::Detail::TSchemaRuleSetinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *="""")TObjectinlinevirtual; Clone(const char *newname="""") constTObjectvirtual; Compare(const TObject *obj) constTObjectvirtual; Copy(TObject &object) constTObjectvirtual; DeclFileName()ROOT::Detail::TSchemaRuleSetinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EConsistencyCheck enum nameROOT::Detail::TSchemaRuleSet; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; fAllRulesROOT::Detail::TSchem",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet-members.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet-members.html:2605,Security,checksum,checksum,2605,"nt_t event, Int_t px, Int_t py)TObjectvirtual; fAllRulesROOT::Detail::TSchemaRuleSetprivate; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fCheckSumROOT::Detail::TSchemaRuleSetprivate; fClassROOT::Detail::TSchemaRuleSetprivate; fClassNameROOT::Detail::TSchemaRuleSetprivate; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; FindRules(const TString &source) constROOT::Detail::TSchemaRuleSet; FindRules(const TString &source, Int_t version) constROOT::Detail::TSchemaRuleSet; FindRules(const TString &source, UInt_t checksum) constROOT::Detail::TSchemaRuleSet; FindRules(const TString &source, Int_t version, UInt_t checksum) constROOT::Detail::TSchemaRuleSet; fPersistentRulesROOT::Detail::TSchemaRuleSetprivate; fRemainingRulesROOT::Detail::TSchemaRuleSetprivate; fUniqueIDTObjectprivate; fVersionROOT::Detail::TSchemaRuleSetprivate; GetClass()ROOT::Detail::TSchemaRuleSet; GetClassCheckSum() constROOT::Detail::TSchemaRuleSet; GetClassName() constROOT::Detail::TSchemaRuleSet; GetClassVersion() constROOT::Detail::TSchemaRuleSet; GetDrawOption() constTObjectvirtual; GetDtorOnly()TObjectstatic; GetIconName() constTObjectvirtual; GetName() constTObjectvirtual; GetObjectInfo(Int_t px, Int_t py) constTObjectvirtual; GetObjectStat()TObjectstatic; GetOption() constTObjectinlinevirtual; GetPersistentRules() constROOT::Detail::TSchemaRuleSet; GetRules() constROOT::Detail::TSchemaRuleSet; GetTitle() constTObjectvirtual; GetUniqueID() constTObjectvirtual; HandleTimer(TTimer *timer)TObjectvirtual; Hash() constTObjectvirtual; HasInconsistentHash() constTObjectinline; HasRuleWithSourceClass(const TString &source) constROOT::Detail::TSchemaRuleSet; Info(const char *method, const char *msgfmt,...) constTObjectvirtual; InheritsFrom(const char *classname) constTObjectvirtual; InheritsFrom(const TClass *cl) constTObjectvirtual; Inspect",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet-members.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet-members.html:2705,Security,checksum,checksum,2705,"nt_t event, Int_t px, Int_t py)TObjectvirtual; fAllRulesROOT::Detail::TSchemaRuleSetprivate; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fCheckSumROOT::Detail::TSchemaRuleSetprivate; fClassROOT::Detail::TSchemaRuleSetprivate; fClassNameROOT::Detail::TSchemaRuleSetprivate; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; FindRules(const TString &source) constROOT::Detail::TSchemaRuleSet; FindRules(const TString &source, Int_t version) constROOT::Detail::TSchemaRuleSet; FindRules(const TString &source, UInt_t checksum) constROOT::Detail::TSchemaRuleSet; FindRules(const TString &source, Int_t version, UInt_t checksum) constROOT::Detail::TSchemaRuleSet; fPersistentRulesROOT::Detail::TSchemaRuleSetprivate; fRemainingRulesROOT::Detail::TSchemaRuleSetprivate; fUniqueIDTObjectprivate; fVersionROOT::Detail::TSchemaRuleSetprivate; GetClass()ROOT::Detail::TSchemaRuleSet; GetClassCheckSum() constROOT::Detail::TSchemaRuleSet; GetClassName() constROOT::Detail::TSchemaRuleSet; GetClassVersion() constROOT::Detail::TSchemaRuleSet; GetDrawOption() constTObjectvirtual; GetDtorOnly()TObjectstatic; GetIconName() constTObjectvirtual; GetName() constTObjectvirtual; GetObjectInfo(Int_t px, Int_t py) constTObjectvirtual; GetObjectStat()TObjectstatic; GetOption() constTObjectinlinevirtual; GetPersistentRules() constROOT::Detail::TSchemaRuleSet; GetRules() constROOT::Detail::TSchemaRuleSet; GetTitle() constTObjectvirtual; GetUniqueID() constTObjectvirtual; HandleTimer(TTimer *timer)TObjectvirtual; Hash() constTObjectvirtual; HasInconsistentHash() constTObjectinline; HasRuleWithSourceClass(const TString &source) constROOT::Detail::TSchemaRuleSet; Info(const char *method, const char *msgfmt,...) constTObjectvirtual; InheritsFrom(const char *classname) constTObjectvirtual; InheritsFrom(const TClass *cl) constTObjectvirtual; Inspect",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet-members.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html:5300,Availability,error,error,5300,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html:5389,Availability,error,error,5389,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html:5544,Availability,error,error,5544,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html:5841,Availability,error,error,5841,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html:10297,Availability,error,error,10297," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html:5306,Integrability,message,message,5306,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html:5847,Integrability,message,message,5847,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html:7049,Integrability,message,message,7049,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle again",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html:10303,Integrability,message,message,10303," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html:10676,Integrability,message,message,10676," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Priva",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html:528,Modifiability,inherit,inherited,528,". ROOT: ROOT::Detail::TSchemaRuleSet Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::Detail::TSchemaRuleSet Class Reference. . Definition at line 24 of file TSchemaRuleSet.h. Classes; class  TMatches;  . Public Types; enum  EConsistencyCheck { kNoCheck = 0; , kCheckAll = 1; , kCheckConflict = 2; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSchemaRuleSet ();  Default constructor. ;  ; virtual ~TSchemaRuleSet ();  Destructor. ;  ; Bool_t AddRule (TSchemaRule *rule, EConsistencyCheck checkConsistency=kCheckAll, TString *errmsg=nullptr);  The consistency check always fails if the TClass object was not set! if checkConsistency is: kNoCheck: no check is done, register the rule as is kCheckConflict: check only for conflicting rules kCheckAll: check for conflict and check for rule about members that are not in the current class layout. ;  ; Bool_t AddRules (TSchemaRuleSet *rules, EConsistencyCheck checkConsistency=kCheckAll, TString *errmsg=nullptr);  ; void AsString (TString &out) const;  Fill the string 'out' with the string representation of the rule. ;  ; const TMatches FindRules (const TString &source) const;  Return all the rules that are about the",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html:3539,Modifiability,inherit,inherited,3539,"m of the given 'source' class. ;  ; TClass * GetClass ();  ; UInt_t GetClassCheckSum () const;  ; TString GetClassName () const;  ; Int_t GetClassVersion () const;  ; const TObjArray * GetPersistentRules () const;  ; const TObjArray * GetRules () const;  ; Bool_t HasRuleWithSourceClass (const TString &source) const;  Return True if we have any rule whose source class is 'source'. ;  ; TClass * IsA () const override;  ; void ls (Option_t *option="""") const override;  The ls function lists the contents of a class on stdout. ;  ; void RemoveRule (TSchemaRule *rule);  Remove given rule from the set - the rule is not being deleted! ;  ; void RemoveRules (TObjArray *rules);  remove given array of rules from the set - the rules are not being deleted! ;  ; void SetClass (TClass *cls);  Set the TClass associated with this rule set. ;  ; void Streamer (TBuffer &) override;  Stream an object of class ROOT::TSchemaRuleSet. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html:4936,Modifiability,inherit,inheritance,4936,"pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html:7147,Modifiability,inherit,inherits,7147,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality th",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html:7264,Modifiability,inherit,inherits,7264,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden t",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html:11177,Modifiability,inherit,inherited,11177,"reamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; TObjArray * fAllRules;  Array of non-persistent rules - just for cleanup purposes - owns the elements. ;  ; UInt_t fCheckSum;  ; TClassRef fClass;  Array of all rules. ;  ; TString fClassName;  Target class pointer (for consistency checking) ;  ; TObjArray * fPersistentRules;  ; TObjArray * fRemainingRules;  ; Int_t fVersion;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virt",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html:12061,Modifiability,inherit,inherited,12061,"ber Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; TObjArray * fAllRules;  Array of non-persistent rules - just for cleanup purposes - owns the elements. ;  ; UInt_t fCheckSum;  ; TClassRef fClass;  Array of all rules. ;  ; TString fClassName;  Target class pointer (for consistency checking) ;  ; TObjArray * fPersistentRules;  ; TObjArray * fRemainingRules;  ; Int_t fVersion;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TSchemaRuleSet.h>. Inheritance diagram for ROOT::Detail::TSchemaRuleSet:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EConsistencyCheck. enum ROOT::Detail::TSchemaRuleSet::EConsistencyCheck. EnumeratorkNoCheck ; kCheckAll ; kCheckConflict . Definition at line 38 of file TSchemaRuleSet.h. Constructor & Destructor Documentation. ◆ TSchemaRuleSet(). TSchemaRuleSet::TSchemaRuleSet ; (; ). Default constructor. ; Definition at line 28 of file TSchemaRuleSet.cxx. ◆ ~TSchemaRuleSet(). TSchemaRuleSet::~TSchemaRuleSet ; (; ). virtual . Destructor. ; Definition at line 40 of file TSchemaRuleSet.cxx. Member Function Documentation. ◆ AddRule(). Bool_t TSchemaRuleSet::AddRule ; (; TSchemaRule * ; rule, . EConsistencyCheck ; che",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html:12160,Modifiability,inherit,inherited,12160,"ber Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; TObjArray * fAllRules;  Array of non-persistent rules - just for cleanup purposes - owns the elements. ;  ; UInt_t fCheckSum;  ; TClassRef fClass;  Array of all rules. ;  ; TString fClassName;  Target class pointer (for consistency checking) ;  ; TObjArray * fPersistentRules;  ; TObjArray * fRemainingRules;  ; Int_t fVersion;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TSchemaRuleSet.h>. Inheritance diagram for ROOT::Detail::TSchemaRuleSet:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EConsistencyCheck. enum ROOT::Detail::TSchemaRuleSet::EConsistencyCheck. EnumeratorkNoCheck ; kCheckAll ; kCheckConflict . Definition at line 38 of file TSchemaRuleSet.h. Constructor & Destructor Documentation. ◆ TSchemaRuleSet(). TSchemaRuleSet::TSchemaRuleSet ; (; ). Default constructor. ; Definition at line 28 of file TSchemaRuleSet.cxx. ◆ ~TSchemaRuleSet(). TSchemaRuleSet::~TSchemaRuleSet ; (; ). virtual . Destructor. ; Definition at line 40 of file TSchemaRuleSet.cxx. Member Function Documentation. ◆ AddRule(). Bool_t TSchemaRuleSet::AddRule ; (; TSchemaRule * ; rule, . EConsistencyCheck ; che",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html:2265,Security,checksum,checksum,2265,"(TSchemaRule *rule, EConsistencyCheck checkConsistency=kCheckAll, TString *errmsg=nullptr);  The consistency check always fails if the TClass object was not set! if checkConsistency is: kNoCheck: no check is done, register the rule as is kCheckConflict: check only for conflicting rules kCheckAll: check for conflict and check for rule about members that are not in the current class layout. ;  ; Bool_t AddRules (TSchemaRuleSet *rules, EConsistencyCheck checkConsistency=kCheckAll, TString *errmsg=nullptr);  ; void AsString (TString &out) const;  Fill the string 'out' with the string representation of the rule. ;  ; const TMatches FindRules (const TString &source) const;  Return all the rules that are about the given 'source' class. ;  ; const TMatches FindRules (const TString &source, Int_t version) const;  Return all the rules that applies to the specified version of the given 'source' class. ;  ; const TMatches FindRules (const TString &source, Int_t version, UInt_t checksum) const;  Return all the rules that applies to the specified version OR checksum of the given 'source' class. ;  ; const TMatches FindRules (const TString &source, UInt_t checksum) const;  Return all the rules that applies to the specified checksum of the given 'source' class. ;  ; TClass * GetClass ();  ; UInt_t GetClassCheckSum () const;  ; TString GetClassName () const;  ; Int_t GetClassVersion () const;  ; const TObjArray * GetPersistentRules () const;  ; const TObjArray * GetRules () const;  ; Bool_t HasRuleWithSourceClass (const TString &source) const;  Return True if we have any rule whose source class is 'source'. ;  ; TClass * IsA () const override;  ; void ls (Option_t *option="""") const override;  The ls function lists the contents of a class on stdout. ;  ; void RemoveRule (TSchemaRule *rule);  Remove given rule from the set - the rule is not being deleted! ;  ; void RemoveRules (TObjArray *rules);  remove given array of rules from the set - the rules are not being deleted! ;  ; void Se",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html:2345,Security,checksum,checksum,2345,"(TSchemaRule *rule, EConsistencyCheck checkConsistency=kCheckAll, TString *errmsg=nullptr);  The consistency check always fails if the TClass object was not set! if checkConsistency is: kNoCheck: no check is done, register the rule as is kCheckConflict: check only for conflicting rules kCheckAll: check for conflict and check for rule about members that are not in the current class layout. ;  ; Bool_t AddRules (TSchemaRuleSet *rules, EConsistencyCheck checkConsistency=kCheckAll, TString *errmsg=nullptr);  ; void AsString (TString &out) const;  Fill the string 'out' with the string representation of the rule. ;  ; const TMatches FindRules (const TString &source) const;  Return all the rules that are about the given 'source' class. ;  ; const TMatches FindRules (const TString &source, Int_t version) const;  Return all the rules that applies to the specified version of the given 'source' class. ;  ; const TMatches FindRules (const TString &source, Int_t version, UInt_t checksum) const;  Return all the rules that applies to the specified version OR checksum of the given 'source' class. ;  ; const TMatches FindRules (const TString &source, UInt_t checksum) const;  Return all the rules that applies to the specified checksum of the given 'source' class. ;  ; TClass * GetClass ();  ; UInt_t GetClassCheckSum () const;  ; TString GetClassName () const;  ; Int_t GetClassVersion () const;  ; const TObjArray * GetPersistentRules () const;  ; const TObjArray * GetRules () const;  ; Bool_t HasRuleWithSourceClass (const TString &source) const;  Return True if we have any rule whose source class is 'source'. ;  ; TClass * IsA () const override;  ; void ls (Option_t *option="""") const override;  The ls function lists the contents of a class on stdout. ;  ; void RemoveRule (TSchemaRule *rule);  Remove given rule from the set - the rule is not being deleted! ;  ; void RemoveRules (TObjArray *rules);  remove given array of rules from the set - the rules are not being deleted! ;  ; void Se",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html:2444,Security,checksum,checksum,2444," is: kNoCheck: no check is done, register the rule as is kCheckConflict: check only for conflicting rules kCheckAll: check for conflict and check for rule about members that are not in the current class layout. ;  ; Bool_t AddRules (TSchemaRuleSet *rules, EConsistencyCheck checkConsistency=kCheckAll, TString *errmsg=nullptr);  ; void AsString (TString &out) const;  Fill the string 'out' with the string representation of the rule. ;  ; const TMatches FindRules (const TString &source) const;  Return all the rules that are about the given 'source' class. ;  ; const TMatches FindRules (const TString &source, Int_t version) const;  Return all the rules that applies to the specified version of the given 'source' class. ;  ; const TMatches FindRules (const TString &source, Int_t version, UInt_t checksum) const;  Return all the rules that applies to the specified version OR checksum of the given 'source' class. ;  ; const TMatches FindRules (const TString &source, UInt_t checksum) const;  Return all the rules that applies to the specified checksum of the given 'source' class. ;  ; TClass * GetClass ();  ; UInt_t GetClassCheckSum () const;  ; TString GetClassName () const;  ; Int_t GetClassVersion () const;  ; const TObjArray * GetPersistentRules () const;  ; const TObjArray * GetRules () const;  ; Bool_t HasRuleWithSourceClass (const TString &source) const;  Return True if we have any rule whose source class is 'source'. ;  ; TClass * IsA () const override;  ; void ls (Option_t *option="""") const override;  The ls function lists the contents of a class on stdout. ;  ; void RemoveRule (TSchemaRule *rule);  Remove given rule from the set - the rule is not being deleted! ;  ; void RemoveRules (TObjArray *rules);  remove given array of rules from the set - the rules are not being deleted! ;  ; void SetClass (TClass *cls);  Set the TClass associated with this rule set. ;  ; void Streamer (TBuffer &) override;  Stream an object of class ROOT::TSchemaRuleSet. ;  ; void StreamerNVir",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html:2513,Security,checksum,checksum,2513," is: kNoCheck: no check is done, register the rule as is kCheckConflict: check only for conflicting rules kCheckAll: check for conflict and check for rule about members that are not in the current class layout. ;  ; Bool_t AddRules (TSchemaRuleSet *rules, EConsistencyCheck checkConsistency=kCheckAll, TString *errmsg=nullptr);  ; void AsString (TString &out) const;  Fill the string 'out' with the string representation of the rule. ;  ; const TMatches FindRules (const TString &source) const;  Return all the rules that are about the given 'source' class. ;  ; const TMatches FindRules (const TString &source, Int_t version) const;  Return all the rules that applies to the specified version of the given 'source' class. ;  ; const TMatches FindRules (const TString &source, Int_t version, UInt_t checksum) const;  Return all the rules that applies to the specified version OR checksum of the given 'source' class. ;  ; const TMatches FindRules (const TString &source, UInt_t checksum) const;  Return all the rules that applies to the specified checksum of the given 'source' class. ;  ; TClass * GetClass ();  ; UInt_t GetClassCheckSum () const;  ; TString GetClassName () const;  ; Int_t GetClassVersion () const;  ; const TObjArray * GetPersistentRules () const;  ; const TObjArray * GetRules () const;  ; Bool_t HasRuleWithSourceClass (const TString &source) const;  Return True if we have any rule whose source class is 'source'. ;  ; TClass * IsA () const override;  ; void ls (Option_t *option="""") const override;  The ls function lists the contents of a class on stdout. ;  ; void RemoveRule (TSchemaRule *rule);  Remove given rule from the set - the rule is not being deleted! ;  ; void RemoveRules (TObjArray *rules);  remove given array of rules from the set - the rules are not being deleted! ;  ; void SetClass (TClass *cls);  Set the TClass associated with this rule set. ;  ; void Streamer (TBuffer &) override;  Stream an object of class ROOT::TSchemaRuleSet. ;  ; void StreamerNVir",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html:6778,Security,hash,hash,6778," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html:15561,Security,checksum,checksum,15561,"s class ; Definition at line 76 of file TSchemaRuleSet.h. ◆ DeclFileName(). static const char * ROOT::Detail::TSchemaRuleSet::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 76 of file TSchemaRuleSet.h. ◆ FindRules() [1/4]. const TSchemaRuleSet::TMatches TSchemaRuleSet::FindRules ; (; const TString & ; source); const. Return all the rules that are about the given 'source' class. ; User has to delete the returned array ; Definition at line 289 of file TSchemaRuleSet.cxx. ◆ FindRules() [2/4]. const TSchemaRuleSet::TMatches TSchemaRuleSet::FindRules ; (; const TString & ; source, . Int_t ; version . ); const. Return all the rules that applies to the specified version of the given 'source' class. ; User has to delete the returned array ; Definition at line 328 of file TSchemaRuleSet.cxx. ◆ FindRules() [3/4]. const TSchemaRuleSet::TMatches TSchemaRuleSet::FindRules ; (; const TString & ; source, . Int_t ; version, . UInt_t ; checksum . ); const. Return all the rules that applies to the specified version OR checksum of the given 'source' class. ; User has to delete the returned array ; Definition at line 368 of file TSchemaRuleSet.cxx. ◆ FindRules() [4/4]. const TSchemaRuleSet::TMatches TSchemaRuleSet::FindRules ; (; const TString & ; source, . UInt_t ; checksum . ); const. Return all the rules that applies to the specified checksum of the given 'source' class. ; User has to delete the returned array ; Definition at line 348 of file TSchemaRuleSet.cxx. ◆ GetClass(). TClass * TSchemaRuleSet::GetClass ; (; ). Definition at line 386 of file TSchemaRuleSet.cxx. ◆ GetClassCheckSum(). UInt_t TSchemaRuleSet::GetClassCheckSum ; (; ); const. Definition at line 393 of file TSchemaRuleSet.cxx. ◆ GetClassName(). TString TSchemaRuleSet::GetClassName ; (; ); const. Definition at line 403 of file TSchemaRuleSet.cxx. ◆ GetClassVersion(). Int_t TSchemaRuleSet::GetClassVersion ; (; ); const. Definition at line 410 of file TS",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html:15644,Security,checksum,checksum,15644,"me(). static const char * ROOT::Detail::TSchemaRuleSet::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 76 of file TSchemaRuleSet.h. ◆ FindRules() [1/4]. const TSchemaRuleSet::TMatches TSchemaRuleSet::FindRules ; (; const TString & ; source); const. Return all the rules that are about the given 'source' class. ; User has to delete the returned array ; Definition at line 289 of file TSchemaRuleSet.cxx. ◆ FindRules() [2/4]. const TSchemaRuleSet::TMatches TSchemaRuleSet::FindRules ; (; const TString & ; source, . Int_t ; version . ); const. Return all the rules that applies to the specified version of the given 'source' class. ; User has to delete the returned array ; Definition at line 328 of file TSchemaRuleSet.cxx. ◆ FindRules() [3/4]. const TSchemaRuleSet::TMatches TSchemaRuleSet::FindRules ; (; const TString & ; source, . Int_t ; version, . UInt_t ; checksum . ); const. Return all the rules that applies to the specified version OR checksum of the given 'source' class. ; User has to delete the returned array ; Definition at line 368 of file TSchemaRuleSet.cxx. ◆ FindRules() [4/4]. const TSchemaRuleSet::TMatches TSchemaRuleSet::FindRules ; (; const TString & ; source, . UInt_t ; checksum . ); const. Return all the rules that applies to the specified checksum of the given 'source' class. ; User has to delete the returned array ; Definition at line 348 of file TSchemaRuleSet.cxx. ◆ GetClass(). TClass * TSchemaRuleSet::GetClass ; (; ). Definition at line 386 of file TSchemaRuleSet.cxx. ◆ GetClassCheckSum(). UInt_t TSchemaRuleSet::GetClassCheckSum ; (; ); const. Definition at line 393 of file TSchemaRuleSet.cxx. ◆ GetClassName(). TString TSchemaRuleSet::GetClassName ; (; ); const. Definition at line 403 of file TSchemaRuleSet.cxx. ◆ GetClassVersion(). Int_t TSchemaRuleSet::GetClassVersion ; (; ); const. Definition at line 410 of file TSchemaRuleSet.cxx. ◆ GetPersistentRules(). const TObjArray * TSchemaRul",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html:15895,Security,checksum,checksum,15895,"t::FindRules ; (; const TString & ; source); const. Return all the rules that are about the given 'source' class. ; User has to delete the returned array ; Definition at line 289 of file TSchemaRuleSet.cxx. ◆ FindRules() [2/4]. const TSchemaRuleSet::TMatches TSchemaRuleSet::FindRules ; (; const TString & ; source, . Int_t ; version . ); const. Return all the rules that applies to the specified version of the given 'source' class. ; User has to delete the returned array ; Definition at line 328 of file TSchemaRuleSet.cxx. ◆ FindRules() [3/4]. const TSchemaRuleSet::TMatches TSchemaRuleSet::FindRules ; (; const TString & ; source, . Int_t ; version, . UInt_t ; checksum . ); const. Return all the rules that applies to the specified version OR checksum of the given 'source' class. ; User has to delete the returned array ; Definition at line 368 of file TSchemaRuleSet.cxx. ◆ FindRules() [4/4]. const TSchemaRuleSet::TMatches TSchemaRuleSet::FindRules ; (; const TString & ; source, . UInt_t ; checksum . ); const. Return all the rules that applies to the specified checksum of the given 'source' class. ; User has to delete the returned array ; Definition at line 348 of file TSchemaRuleSet.cxx. ◆ GetClass(). TClass * TSchemaRuleSet::GetClass ; (; ). Definition at line 386 of file TSchemaRuleSet.cxx. ◆ GetClassCheckSum(). UInt_t TSchemaRuleSet::GetClassCheckSum ; (; ); const. Definition at line 393 of file TSchemaRuleSet.cxx. ◆ GetClassName(). TString TSchemaRuleSet::GetClassName ; (; ); const. Definition at line 403 of file TSchemaRuleSet.cxx. ◆ GetClassVersion(). Int_t TSchemaRuleSet::GetClassVersion ; (; ); const. Definition at line 410 of file TSchemaRuleSet.cxx. ◆ GetPersistentRules(). const TObjArray * TSchemaRuleSet::GetPersistentRules ; (; ); const. Definition at line 424 of file TSchemaRuleSet.cxx. ◆ GetRules(). const TObjArray * TSchemaRuleSet::GetRules ; (; ); const. Definition at line 417 of file TSchemaRuleSet.cxx. ◆ HasRuleWithSourceClass(). Bool_t TSchemaRuleSet:",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html:15967,Security,checksum,checksum,15967,"he rules that are about the given 'source' class. ; User has to delete the returned array ; Definition at line 289 of file TSchemaRuleSet.cxx. ◆ FindRules() [2/4]. const TSchemaRuleSet::TMatches TSchemaRuleSet::FindRules ; (; const TString & ; source, . Int_t ; version . ); const. Return all the rules that applies to the specified version of the given 'source' class. ; User has to delete the returned array ; Definition at line 328 of file TSchemaRuleSet.cxx. ◆ FindRules() [3/4]. const TSchemaRuleSet::TMatches TSchemaRuleSet::FindRules ; (; const TString & ; source, . Int_t ; version, . UInt_t ; checksum . ); const. Return all the rules that applies to the specified version OR checksum of the given 'source' class. ; User has to delete the returned array ; Definition at line 368 of file TSchemaRuleSet.cxx. ◆ FindRules() [4/4]. const TSchemaRuleSet::TMatches TSchemaRuleSet::FindRules ; (; const TString & ; source, . UInt_t ; checksum . ); const. Return all the rules that applies to the specified checksum of the given 'source' class. ; User has to delete the returned array ; Definition at line 348 of file TSchemaRuleSet.cxx. ◆ GetClass(). TClass * TSchemaRuleSet::GetClass ; (; ). Definition at line 386 of file TSchemaRuleSet.cxx. ◆ GetClassCheckSum(). UInt_t TSchemaRuleSet::GetClassCheckSum ; (; ); const. Definition at line 393 of file TSchemaRuleSet.cxx. ◆ GetClassName(). TString TSchemaRuleSet::GetClassName ; (; ); const. Definition at line 403 of file TSchemaRuleSet.cxx. ◆ GetClassVersion(). Int_t TSchemaRuleSet::GetClassVersion ; (; ); const. Definition at line 410 of file TSchemaRuleSet.cxx. ◆ GetPersistentRules(). const TObjArray * TSchemaRuleSet::GetPersistentRules ; (; ); const. Definition at line 424 of file TSchemaRuleSet.cxx. ◆ GetRules(). const TObjArray * TSchemaRuleSet::GetRules ; (; ); const. Definition at line 417 of file TSchemaRuleSet.cxx. ◆ HasRuleWithSourceClass(). Bool_t TSchemaRuleSet::HasRuleWithSourceClass ; (; const TString & ; source); const. Re",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html:13664,Testability,test,test,13664,"eckConflict . Definition at line 38 of file TSchemaRuleSet.h. Constructor & Destructor Documentation. ◆ TSchemaRuleSet(). TSchemaRuleSet::TSchemaRuleSet ; (; ). Default constructor. ; Definition at line 28 of file TSchemaRuleSet.cxx. ◆ ~TSchemaRuleSet(). TSchemaRuleSet::~TSchemaRuleSet ; (; ). virtual . Destructor. ; Definition at line 40 of file TSchemaRuleSet.cxx. Member Function Documentation. ◆ AddRule(). Bool_t TSchemaRuleSet::AddRule ; (; TSchemaRule * ; rule, . EConsistencyCheck ; checkConsistency = kCheckAll, . TString * ; errmsg = nullptr . ). The consistency check always fails if the TClass object was not set! if checkConsistency is: kNoCheck: no check is done, register the rule as is kCheckConflict: check only for conflicting rules kCheckAll: check for conflict and check for rule about members that are not in the current class layout. ; return kTRUE if the layout is accepted, in which case we take ownership of the rule object. return kFALSE if the rule failed one of the test, the rule now needs to be deleted by the caller. ; Definition at line 81 of file TSchemaRuleSet.cxx. ◆ AddRules(). Bool_t TSchemaRuleSet::AddRules ; (; TSchemaRuleSet * ; rules, . EConsistencyCheck ; checkConsistency = kCheckAll, . TString * ; errmsg = nullptr . ). Definition at line 66 of file TSchemaRuleSet.cxx. ◆ AsString(). void TSchemaRuleSet::AsString ; (; TString & ; out); const. Fill the string 'out' with the string representation of the rule. ; Definition at line 186 of file TSchemaRuleSet.cxx. ◆ Class(). static TClass * ROOT::Detail::TSchemaRuleSet::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::Detail::TSchemaRuleSet::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::Detail::TSchemaRuleSet::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 76 of file TSchemaRuleSet.h. ◆ DeclFileName(). static const char * ROOT::Detai",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet_1_1TMatches.html:1959,Performance,cache,cached,1959,"the data member named 'name' as a target. ;  ;  operator bool ();  . #include <TSchemaRuleSet.h>. Inheritance diagram for ROOT::Detail::TSchemaRuleSet::TMatches:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Function Documentation. ◆ GetRuleWithSource(). const TSchemaRule * TSchemaRuleSet::TMatches::GetRuleWithSource ; (; const TString & ; name); const. Return the rule that has 'name' as a source. ; Definition at line 468 of file TSchemaRuleSet.cxx. ◆ GetRuleWithTarget(). const TSchemaRule * TSchemaRuleSet::TMatches::GetRuleWithTarget ; (; const TString & ; name); const. Return the rule that has 'name' as a target. ; Definition at line 479 of file TSchemaRuleSet.cxx. ◆ HasRuleWithSource(). Bool_t TSchemaRuleSet::TMatches::HasRuleWithSource ; (; const TString & ; name, . Bool_t ; needingAlloc . ); const. Return true if the set of rules has at least one rule that has the data member named 'name' as a source. ; If needingAlloc is true, only the rule that requires the data member to be cached will be taken in consideration. ; Definition at line 493 of file TSchemaRuleSet.cxx. ◆ HasRuleWithTarget(). Bool_t TSchemaRuleSet::TMatches::HasRuleWithTarget ; (; const TString & ; name, . Bool_t ; willset . ); const. Return true if the set of rules has at least one rule that has the data member named 'name' as a target. ; If willset is true, only the rule that will set the value of the data member. ; Definition at line 523 of file TSchemaRuleSet.cxx. ◆ operator bool(). ROOT::Detail::TSchemaRuleSet::TMatches::operator bool ; (; ). inline . Definition at line 31 of file TSchemaRuleSet.h. Libraries for ROOT::Detail::TSchemaRuleSet::TMatches:. [legend]; The documentation for this class was generated from the following files:; core/meta/inc/TSchemaRuleSet.h; core/meta/src/TSchemaRuleSet.cxx. ROOTDetailTSchemaRuleSetTMatches. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet_1_1TMatches.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet_1_1TMatches.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html:489,Energy Efficiency,reduce,reduce,489,". ROOT: ROOT::Detail::VecOps::RVecImpl< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Private Types |; List of all members ; ROOT::Detail::VecOps::RVecImpl< T > Class Template Reference. ; template<typename T>; class ROOT::Detail::VecOps::RVecImpl< T >This class consists of common code factored out of the SmallVector class to reduce code duplication based on the SmallVector 'N' template parameter. ; Definition at line 561 of file RVec.hxx. Public Types; using const_iterator = typename SuperClass::const_iterator;  ; using iterator = typename SuperClass::iterator;  ; using reference = typename SuperClass::reference;  ; using size_type = typename SuperClass::size_type;  ;  Public Types inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >; using const_iterator = const T *;  ; using const_pointer = const T *;  ; using const_reference = const T &;  ; using const_reverse_iterator = std::reverse_iterator< const_iterator >;  ; using difference_type = ptrdiff_t;  ; using iterator = T *;  ; using pointer = T *;  ; using reference = T &;  ; using reverse_iterator = std::reverse_iterator< iterator >;  ; using size_type = size_t;  ; using value_type = T;  ;  Public Types inherited from ROOT::Internal::VecOps::SmallVectorBase; using Size_T = int32_t;  . Public Member Functions;  RVecImpl (const RVecImpl &)=delete;  ;  ~RVecImpl ();  ; template<typename in_iter , typename = typename std::enable_if<std::is_convertible< typename std::iterator_traits<in_iter>::iterator_category, std::input_iterator_tag>::value>::type> ; void append (in_iter in_start, in_iter in_end);  Add the specified range to the end of the SmallVector. ;  ; void append (size_type NumInputs, const T &Elt);  Append NumInputs copies of Elt to the end. ;  ; void append (std::initializer_list< T > IL);  ; template<typename in_iter , typename = ty",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html:5051,Energy Efficiency,allocate,allocated,5051,"fer, even if empty(). ;  ; pointer data () noexcept;  Return a pointer to the vector's buffer, even if empty(). ;  ; bool empty () const;  ; const_iterator end () const noexcept;  ; iterator end () noexcept;  ; reference front ();  ; const_reference front () const;  ; size_type max_size () const noexcept;  ; const_reverse_iterator rbegin () const noexcept;  ; reverse_iterator rbegin () noexcept;  ; const_reverse_iterator rend () const noexcept;  ; reverse_iterator rend () noexcept;  ; size_t size () const;  ; size_type size_in_bytes () const;  ;  Public Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; size_t capacity () const noexcept;  ; bool empty () const;  ; void set_size (size_t N);  Set the array size to N, which the current array must have enough capacity for. ;  ; size_t size () const;  . Protected Member Functions;  RVecImpl (unsigned N);  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >;  SmallVectorTemplateBase (size_t Size);  ; void grow (size_t MinSize=0);  Grow the allocated memory (without initializing new elements), doubling the size of the allocated memory. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >;  SmallVectorTemplateCommon (size_t Size);  ; void grow_pod (size_t MinSize, size_t TSize);  ; bool isSmall () const;  Return true if this is a smallvector which has not had dynamic memory allocated for it. ;  ; void resetToSmall ();  Put this vector in a state of being small. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase;  SmallVectorBase ()=delete;  ;  SmallVectorBase (void *FirstEl, size_t TotalCapacity);  ; void grow_pod (void *FirstEl, size_t MinSize, size_t TSize);  This is an implementation of the grow() method which only works on POD-like data types and is out of line to reduce code duplication. ;  ; bool Owns () const;  If false, the RVec is in ""memory adoption"" mode,",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html:5130,Energy Efficiency,allocate,allocated,5130,"fer, even if empty(). ;  ; pointer data () noexcept;  Return a pointer to the vector's buffer, even if empty(). ;  ; bool empty () const;  ; const_iterator end () const noexcept;  ; iterator end () noexcept;  ; reference front ();  ; const_reference front () const;  ; size_type max_size () const noexcept;  ; const_reverse_iterator rbegin () const noexcept;  ; reverse_iterator rbegin () noexcept;  ; const_reverse_iterator rend () const noexcept;  ; reverse_iterator rend () noexcept;  ; size_t size () const;  ; size_type size_in_bytes () const;  ;  Public Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; size_t capacity () const noexcept;  ; bool empty () const;  ; void set_size (size_t N);  Set the array size to N, which the current array must have enough capacity for. ;  ; size_t size () const;  . Protected Member Functions;  RVecImpl (unsigned N);  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >;  SmallVectorTemplateBase (size_t Size);  ; void grow (size_t MinSize=0);  Grow the allocated memory (without initializing new elements), doubling the size of the allocated memory. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >;  SmallVectorTemplateCommon (size_t Size);  ; void grow_pod (size_t MinSize, size_t TSize);  ; bool isSmall () const;  Return true if this is a smallvector which has not had dynamic memory allocated for it. ;  ; void resetToSmall ();  Put this vector in a state of being small. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase;  SmallVectorBase ()=delete;  ;  SmallVectorBase (void *FirstEl, size_t TotalCapacity);  ; void grow_pod (void *FirstEl, size_t MinSize, size_t TSize);  This is an implementation of the grow() method which only works on POD-like data types and is out of line to reduce code duplication. ;  ; bool Owns () const;  If false, the RVec is in ""memory adoption"" mode,",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html:5440,Energy Efficiency,allocate,allocated,5440,"iterator rbegin () const noexcept;  ; reverse_iterator rbegin () noexcept;  ; const_reverse_iterator rend () const noexcept;  ; reverse_iterator rend () noexcept;  ; size_t size () const;  ; size_type size_in_bytes () const;  ;  Public Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; size_t capacity () const noexcept;  ; bool empty () const;  ; void set_size (size_t N);  Set the array size to N, which the current array must have enough capacity for. ;  ; size_t size () const;  . Protected Member Functions;  RVecImpl (unsigned N);  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >;  SmallVectorTemplateBase (size_t Size);  ; void grow (size_t MinSize=0);  Grow the allocated memory (without initializing new elements), doubling the size of the allocated memory. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >;  SmallVectorTemplateCommon (size_t Size);  ; void grow_pod (size_t MinSize, size_t TSize);  ; bool isSmall () const;  Return true if this is a smallvector which has not had dynamic memory allocated for it. ;  ; void resetToSmall ();  Put this vector in a state of being small. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase;  SmallVectorBase ()=delete;  ;  SmallVectorBase (void *FirstEl, size_t TotalCapacity);  ; void grow_pod (void *FirstEl, size_t MinSize, size_t TSize);  This is an implementation of the grow() method which only works on POD-like data types and is out of line to reduce code duplication. ;  ; bool Owns () const;  If false, the RVec is in ""memory adoption"" mode, i.e. it is acting as a view on a memory buffer it does not own. ;  . Private Types; using SuperClass = Internal::VecOps::SmallVectorTemplateBase< T >;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >; static void destroy_range (T ",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html:5879,Energy Efficiency,reduce,reduce,5879,"ize to N, which the current array must have enough capacity for. ;  ; size_t size () const;  . Protected Member Functions;  RVecImpl (unsigned N);  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >;  SmallVectorTemplateBase (size_t Size);  ; void grow (size_t MinSize=0);  Grow the allocated memory (without initializing new elements), doubling the size of the allocated memory. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >;  SmallVectorTemplateCommon (size_t Size);  ; void grow_pod (size_t MinSize, size_t TSize);  ; bool isSmall () const;  Return true if this is a smallvector which has not had dynamic memory allocated for it. ;  ; void resetToSmall ();  Put this vector in a state of being small. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase;  SmallVectorBase ()=delete;  ;  SmallVectorBase (void *FirstEl, size_t TotalCapacity);  ; void grow_pod (void *FirstEl, size_t MinSize, size_t TSize);  This is an implementation of the grow() method which only works on POD-like data types and is out of line to reduce code duplication. ;  ; bool Owns () const;  If false, the RVec is in ""memory adoption"" mode, i.e. it is acting as a view on a memory buffer it does not own. ;  . Private Types; using SuperClass = Internal::VecOps::SmallVectorTemplateBase< T >;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >; static void destroy_range (T *S, T *E);  ; template<typename It1 , typename It2 > ; static void uninitialized_copy (It1 I, It1 E, It2 Dest);  Copy the range [I, E) onto the uninitialized memory starting with ""Dest"", constructing elements as needed. ;  ; template<typename It1 , typename It2 > ; static void uninitialized_move (It1 I, It1 E, It2 Dest);  Move the range [I, E) into the uninitialized memory starting with ""Dest"", constructing ele",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html:853,Modifiability,inherit,inherited,853,"::VecOps::RVecImpl< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Private Types |; List of all members ; ROOT::Detail::VecOps::RVecImpl< T > Class Template Reference. ; template<typename T>; class ROOT::Detail::VecOps::RVecImpl< T >This class consists of common code factored out of the SmallVector class to reduce code duplication based on the SmallVector 'N' template parameter. ; Definition at line 561 of file RVec.hxx. Public Types; using const_iterator = typename SuperClass::const_iterator;  ; using iterator = typename SuperClass::iterator;  ; using reference = typename SuperClass::reference;  ; using size_type = typename SuperClass::size_type;  ;  Public Types inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >; using const_iterator = const T *;  ; using const_pointer = const T *;  ; using const_reference = const T &;  ; using const_reverse_iterator = std::reverse_iterator< const_iterator >;  ; using difference_type = ptrdiff_t;  ; using iterator = T *;  ; using pointer = T *;  ; using reference = T &;  ; using reverse_iterator = std::reverse_iterator< iterator >;  ; using size_type = size_t;  ; using value_type = T;  ;  Public Types inherited from ROOT::Internal::VecOps::SmallVectorBase; using Size_T = int32_t;  . Public Member Functions;  RVecImpl (const RVecImpl &)=delete;  ;  ~RVecImpl ();  ; template<typename in_iter , typename = typename std::enable_if<std::is_convertible< typename std::iterator_traits<in_iter>::iterator_category, std::input_iterator_tag>::value>::type> ; void append (in_iter in_start, in_iter in_end);  Add the specified range to the end of the SmallVector. ;  ; void append (size_type NumInputs, const T &Elt);  Append NumInputs copies of Elt to the end. ;  ; void append (std::initializer_list< T > IL);  ; template<typename in_iter , typename = typename std::enable_",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html:1354,Modifiability,inherit,inherited,1354,"::VecOps::RVecImpl< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Private Types |; List of all members ; ROOT::Detail::VecOps::RVecImpl< T > Class Template Reference. ; template<typename T>; class ROOT::Detail::VecOps::RVecImpl< T >This class consists of common code factored out of the SmallVector class to reduce code duplication based on the SmallVector 'N' template parameter. ; Definition at line 561 of file RVec.hxx. Public Types; using const_iterator = typename SuperClass::const_iterator;  ; using iterator = typename SuperClass::iterator;  ; using reference = typename SuperClass::reference;  ; using size_type = typename SuperClass::size_type;  ;  Public Types inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >; using const_iterator = const T *;  ; using const_pointer = const T *;  ; using const_reference = const T &;  ; using const_reverse_iterator = std::reverse_iterator< const_iterator >;  ; using difference_type = ptrdiff_t;  ; using iterator = T *;  ; using pointer = T *;  ; using reference = T &;  ; using reverse_iterator = std::reverse_iterator< iterator >;  ; using size_type = size_t;  ; using value_type = T;  ;  Public Types inherited from ROOT::Internal::VecOps::SmallVectorBase; using Size_T = int32_t;  . Public Member Functions;  RVecImpl (const RVecImpl &)=delete;  ;  ~RVecImpl ();  ; template<typename in_iter , typename = typename std::enable_if<std::is_convertible< typename std::iterator_traits<in_iter>::iterator_category, std::input_iterator_tag>::value>::type> ; void append (in_iter in_start, in_iter in_end);  Add the specified range to the end of the SmallVector. ;  ; void append (size_type NumInputs, const T &Elt);  Append NumInputs copies of Elt to the end. ;  ; void append (std::initializer_list< T > IL);  ; template<typename in_iter , typename = typename std::enable_",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html:3252,Modifiability,inherit,inherited,3252,";  ; void assign (size_type NumElts, const T &Elt);  ; void assign (std::initializer_list< T > IL);  ; void clear ();  ; template<typename... ArgTypes> ; reference emplace_back (ArgTypes &&...Args);  ; iterator erase (const_iterator CI);  ; iterator erase (const_iterator CS, const_iterator CE);  ; iterator insert (iterator I, const T &Elt);  ; template<typename ItTy , typename = typename std::enable_if<std::is_convertible< typename std::iterator_traits<ItTy>::iterator_category, std::input_iterator_tag>::value>::type> ; iterator insert (iterator I, ItTy From, ItTy To);  ; iterator insert (iterator I, size_type NumToInsert, const T &Elt);  ; void insert (iterator I, std::initializer_list< T > IL);  ; iterator insert (iterator I, T &&Elt);  ; RVecImpl & operator= (const RVecImpl &RHS);  ; RVecImpl & operator= (RVecImpl &&RHS);  ; void pop_back_n (size_type NumItems);  ; T pop_back_val ();  ; void reserve (size_type N);  ; void resize (size_type N);  ; void resize (size_type N, const T &NV);  ; void swap (RVecImpl &RHS);  ;  Public Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >; void pop_back ();  ; void push_back (const T &Elt);  ; void push_back (T &&Elt);  ;  Public Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >; reference back ();  ; const_reference back () const;  ; const_iterator begin () const noexcept;  ; iterator begin () noexcept;  ; size_t capacity () const noexcept;  ; size_t capacity_in_bytes () const;  ; const_iterator cbegin () const noexcept;  ; const_iterator cend () const noexcept;  ; const_reverse_iterator crbegin () const noexcept;  ; const_reverse_iterator crend () const noexcept;  ; const_pointer data () const noexcept;  Return a pointer to the vector's buffer, even if empty(). ;  ; pointer data () noexcept;  Return a pointer to the vector's buffer, even if empty(). ;  ; bool empty () const;  ; const_iterator end () const noexcept;  ; iterator end () noexcept;  ; re",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html:3436,Modifiability,inherit,inherited,3436,";  ; void assign (size_type NumElts, const T &Elt);  ; void assign (std::initializer_list< T > IL);  ; void clear ();  ; template<typename... ArgTypes> ; reference emplace_back (ArgTypes &&...Args);  ; iterator erase (const_iterator CI);  ; iterator erase (const_iterator CS, const_iterator CE);  ; iterator insert (iterator I, const T &Elt);  ; template<typename ItTy , typename = typename std::enable_if<std::is_convertible< typename std::iterator_traits<ItTy>::iterator_category, std::input_iterator_tag>::value>::type> ; iterator insert (iterator I, ItTy From, ItTy To);  ; iterator insert (iterator I, size_type NumToInsert, const T &Elt);  ; void insert (iterator I, std::initializer_list< T > IL);  ; iterator insert (iterator I, T &&Elt);  ; RVecImpl & operator= (const RVecImpl &RHS);  ; RVecImpl & operator= (RVecImpl &&RHS);  ; void pop_back_n (size_type NumItems);  ; T pop_back_val ();  ; void reserve (size_type N);  ; void resize (size_type N);  ; void resize (size_type N, const T &NV);  ; void swap (RVecImpl &RHS);  ;  Public Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >; void pop_back ();  ; void push_back (const T &Elt);  ; void push_back (T &&Elt);  ;  Public Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >; reference back ();  ; const_reference back () const;  ; const_iterator begin () const noexcept;  ; iterator begin () noexcept;  ; size_t capacity () const noexcept;  ; size_t capacity_in_bytes () const;  ; const_iterator cbegin () const noexcept;  ; const_iterator cend () const noexcept;  ; const_reverse_iterator crbegin () const noexcept;  ; const_reverse_iterator crend () const noexcept;  ; const_pointer data () const noexcept;  Return a pointer to the vector's buffer, even if empty(). ;  ; pointer data () noexcept;  Return a pointer to the vector's buffer, even if empty(). ;  ; bool empty () const;  ; const_iterator end () const noexcept;  ; iterator end () noexcept;  ; re",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html:4555,Modifiability,inherit,inherited,4555,"s inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >; reference back ();  ; const_reference back () const;  ; const_iterator begin () const noexcept;  ; iterator begin () noexcept;  ; size_t capacity () const noexcept;  ; size_t capacity_in_bytes () const;  ; const_iterator cbegin () const noexcept;  ; const_iterator cend () const noexcept;  ; const_reverse_iterator crbegin () const noexcept;  ; const_reverse_iterator crend () const noexcept;  ; const_pointer data () const noexcept;  Return a pointer to the vector's buffer, even if empty(). ;  ; pointer data () noexcept;  Return a pointer to the vector's buffer, even if empty(). ;  ; bool empty () const;  ; const_iterator end () const noexcept;  ; iterator end () noexcept;  ; reference front ();  ; const_reference front () const;  ; size_type max_size () const noexcept;  ; const_reverse_iterator rbegin () const noexcept;  ; reverse_iterator rbegin () noexcept;  ; const_reverse_iterator rend () const noexcept;  ; reverse_iterator rend () noexcept;  ; size_t size () const;  ; size_type size_in_bytes () const;  ;  Public Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; size_t capacity () const noexcept;  ; bool empty () const;  ; void set_size (size_t N);  Set the array size to N, which the current array must have enough capacity for. ;  ; size_t size () const;  . Protected Member Functions;  RVecImpl (unsigned N);  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >;  SmallVectorTemplateBase (size_t Size);  ; void grow (size_t MinSize=0);  Grow the allocated memory (without initializing new elements), doubling the size of the allocated memory. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >;  SmallVectorTemplateCommon (size_t Size);  ; void grow_pod (size_t MinSize, size_t TSize);  ; bool isSmall () const;  Return true if this is a smallvector which has not had dynamic m",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html:4893,Modifiability,inherit,inherited,4893,"fer, even if empty(). ;  ; pointer data () noexcept;  Return a pointer to the vector's buffer, even if empty(). ;  ; bool empty () const;  ; const_iterator end () const noexcept;  ; iterator end () noexcept;  ; reference front ();  ; const_reference front () const;  ; size_type max_size () const noexcept;  ; const_reverse_iterator rbegin () const noexcept;  ; reverse_iterator rbegin () noexcept;  ; const_reverse_iterator rend () const noexcept;  ; reverse_iterator rend () noexcept;  ; size_t size () const;  ; size_type size_in_bytes () const;  ;  Public Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; size_t capacity () const noexcept;  ; bool empty () const;  ; void set_size (size_t N);  Set the array size to N, which the current array must have enough capacity for. ;  ; size_t size () const;  . Protected Member Functions;  RVecImpl (unsigned N);  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >;  SmallVectorTemplateBase (size_t Size);  ; void grow (size_t MinSize=0);  Grow the allocated memory (without initializing new elements), doubling the size of the allocated memory. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >;  SmallVectorTemplateCommon (size_t Size);  ; void grow_pod (size_t MinSize, size_t TSize);  ; bool isSmall () const;  Return true if this is a smallvector which has not had dynamic memory allocated for it. ;  ; void resetToSmall ();  Put this vector in a state of being small. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase;  SmallVectorBase ()=delete;  ;  SmallVectorBase (void *FirstEl, size_t TotalCapacity);  ; void grow_pod (void *FirstEl, size_t MinSize, size_t TSize);  This is an implementation of the grow() method which only works on POD-like data types and is out of line to reduce code duplication. ;  ; bool Owns () const;  If false, the RVec is in ""memory adoption"" mode,",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html:5181,Modifiability,inherit,inherited,5181,"iterator rbegin () const noexcept;  ; reverse_iterator rbegin () noexcept;  ; const_reverse_iterator rend () const noexcept;  ; reverse_iterator rend () noexcept;  ; size_t size () const;  ; size_type size_in_bytes () const;  ;  Public Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; size_t capacity () const noexcept;  ; bool empty () const;  ; void set_size (size_t N);  Set the array size to N, which the current array must have enough capacity for. ;  ; size_t size () const;  . Protected Member Functions;  RVecImpl (unsigned N);  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >;  SmallVectorTemplateBase (size_t Size);  ; void grow (size_t MinSize=0);  Grow the allocated memory (without initializing new elements), doubling the size of the allocated memory. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >;  SmallVectorTemplateCommon (size_t Size);  ; void grow_pod (size_t MinSize, size_t TSize);  ; bool isSmall () const;  Return true if this is a smallvector which has not had dynamic memory allocated for it. ;  ; void resetToSmall ();  Put this vector in a state of being small. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase;  SmallVectorBase ()=delete;  ;  SmallVectorBase (void *FirstEl, size_t TotalCapacity);  ; void grow_pod (void *FirstEl, size_t MinSize, size_t TSize);  This is an implementation of the grow() method which only works on POD-like data types and is out of line to reduce code duplication. ;  ; bool Owns () const;  If false, the RVec is in ""memory adoption"" mode, i.e. it is acting as a view on a memory buffer it does not own. ;  . Private Types; using SuperClass = Internal::VecOps::SmallVectorTemplateBase< T >;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >; static void destroy_range (T ",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html:5562,Modifiability,inherit,inherited,5562,"ize to N, which the current array must have enough capacity for. ;  ; size_t size () const;  . Protected Member Functions;  RVecImpl (unsigned N);  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >;  SmallVectorTemplateBase (size_t Size);  ; void grow (size_t MinSize=0);  Grow the allocated memory (without initializing new elements), doubling the size of the allocated memory. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >;  SmallVectorTemplateCommon (size_t Size);  ; void grow_pod (size_t MinSize, size_t TSize);  ; bool isSmall () const;  Return true if this is a smallvector which has not had dynamic memory allocated for it. ;  ; void resetToSmall ();  Put this vector in a state of being small. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase;  SmallVectorBase ()=delete;  ;  SmallVectorBase (void *FirstEl, size_t TotalCapacity);  ; void grow_pod (void *FirstEl, size_t MinSize, size_t TSize);  This is an implementation of the grow() method which only works on POD-like data types and is out of line to reduce code duplication. ;  ; bool Owns () const;  If false, the RVec is in ""memory adoption"" mode, i.e. it is acting as a view on a memory buffer it does not own. ;  . Private Types; using SuperClass = Internal::VecOps::SmallVectorTemplateBase< T >;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >; static void destroy_range (T *S, T *E);  ; template<typename It1 , typename It2 > ; static void uninitialized_copy (It1 I, It1 E, It2 Dest);  Copy the range [I, E) onto the uninitialized memory starting with ""Dest"", constructing elements as needed. ;  ; template<typename It1 , typename It2 > ; static void uninitialized_move (It1 I, It1 E, It2 Dest);  Move the range [I, E) into the uninitialized memory starting with ""Dest"", constructing ele",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html:6198,Modifiability,inherit,inherited,6198,", size_t TSize);  ; bool isSmall () const;  Return true if this is a smallvector which has not had dynamic memory allocated for it. ;  ; void resetToSmall ();  Put this vector in a state of being small. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase;  SmallVectorBase ()=delete;  ;  SmallVectorBase (void *FirstEl, size_t TotalCapacity);  ; void grow_pod (void *FirstEl, size_t MinSize, size_t TSize);  This is an implementation of the grow() method which only works on POD-like data types and is out of line to reduce code duplication. ;  ; bool Owns () const;  If false, the RVec is in ""memory adoption"" mode, i.e. it is acting as a view on a memory buffer it does not own. ;  . Private Types; using SuperClass = Internal::VecOps::SmallVectorTemplateBase< T >;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >; static void destroy_range (T *S, T *E);  ; template<typename It1 , typename It2 > ; static void uninitialized_copy (It1 I, It1 E, It2 Dest);  Copy the range [I, E) onto the uninitialized memory starting with ""Dest"", constructing elements as needed. ;  ; template<typename It1 , typename It2 > ; static void uninitialized_move (It1 I, It1 E, It2 Dest);  Move the range [I, E) into the uninitialized memory starting with ""Dest"", constructing elements as needed. ;  ;  Static Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; static void report_at_maximum_capacity ();  Report that this vector is already at maximum capacity. ;  ; static void report_size_overflow (size_t MinSize);  Report that MinSize doesn't fit into this vector's size type. ;  ; static constexpr size_t SizeTypeMax ();  The maximum value of the Size_T used. ;  ;  Protected Attributes inherited from ROOT::Internal::VecOps::SmallVectorBase; void * fBeginX;  ; Size_T fCapacity;  Always >= -1. fCapacity == -1 indicates the RVec is in ""memory adoption"" m",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html:6773,Modifiability,inherit,inherited,6773,"rks on POD-like data types and is out of line to reduce code duplication. ;  ; bool Owns () const;  If false, the RVec is in ""memory adoption"" mode, i.e. it is acting as a view on a memory buffer it does not own. ;  . Private Types; using SuperClass = Internal::VecOps::SmallVectorTemplateBase< T >;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >; static void destroy_range (T *S, T *E);  ; template<typename It1 , typename It2 > ; static void uninitialized_copy (It1 I, It1 E, It2 Dest);  Copy the range [I, E) onto the uninitialized memory starting with ""Dest"", constructing elements as needed. ;  ; template<typename It1 , typename It2 > ; static void uninitialized_move (It1 I, It1 E, It2 Dest);  Move the range [I, E) into the uninitialized memory starting with ""Dest"", constructing elements as needed. ;  ;  Static Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; static void report_at_maximum_capacity ();  Report that this vector is already at maximum capacity. ;  ; static void report_size_overflow (size_t MinSize);  Report that MinSize doesn't fit into this vector's size type. ;  ; static constexpr size_t SizeTypeMax ();  The maximum value of the Size_T used. ;  ;  Protected Attributes inherited from ROOT::Internal::VecOps::SmallVectorBase; void * fBeginX;  ; Size_T fCapacity;  Always >= -1. fCapacity == -1 indicates the RVec is in ""memory adoption"" mode. ;  ; Size_T fSize = 0;  Always >= 0. ;  . #include <ROOT/RVec.hxx>. Inheritance diagram for ROOT::Detail::VecOps::RVecImpl< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ const_iterator. template<typename T > . using ROOT::Detail::VecOps::RVecImpl< T >::const_iterator = typename SuperClass::const_iterator. Definition at line 566 of file RVec.hxx. ◆ iterator. template<typename T > . using ROOT::Detail::VecOps",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html:7159,Modifiability,inherit,inherited,7159,"inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >; static void destroy_range (T *S, T *E);  ; template<typename It1 , typename It2 > ; static void uninitialized_copy (It1 I, It1 E, It2 Dest);  Copy the range [I, E) onto the uninitialized memory starting with ""Dest"", constructing elements as needed. ;  ; template<typename It1 , typename It2 > ; static void uninitialized_move (It1 I, It1 E, It2 Dest);  Move the range [I, E) into the uninitialized memory starting with ""Dest"", constructing elements as needed. ;  ;  Static Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; static void report_at_maximum_capacity ();  Report that this vector is already at maximum capacity. ;  ; static void report_size_overflow (size_t MinSize);  Report that MinSize doesn't fit into this vector's size type. ;  ; static constexpr size_t SizeTypeMax ();  The maximum value of the Size_T used. ;  ;  Protected Attributes inherited from ROOT::Internal::VecOps::SmallVectorBase; void * fBeginX;  ; Size_T fCapacity;  Always >= -1. fCapacity == -1 indicates the RVec is in ""memory adoption"" mode. ;  ; Size_T fSize = 0;  Always >= 0. ;  . #include <ROOT/RVec.hxx>. Inheritance diagram for ROOT::Detail::VecOps::RVecImpl< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ const_iterator. template<typename T > . using ROOT::Detail::VecOps::RVecImpl< T >::const_iterator = typename SuperClass::const_iterator. Definition at line 566 of file RVec.hxx. ◆ iterator. template<typename T > . using ROOT::Detail::VecOps::RVecImpl< T >::iterator = typename SuperClass::iterator. Definition at line 565 of file RVec.hxx. ◆ reference. template<typename T > . using ROOT::Detail::VecOps::RVecImpl< T >::reference = typename SuperClass::reference. Definition at line 567 of file RVec.hxx. ◆ size_type. template<typename T > . using ROOT::Detail::VecOps::RVecImpl< T >::size_type = typename Sup",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html:2299,Usability,clear,clear,2299,"fference_type = ptrdiff_t;  ; using iterator = T *;  ; using pointer = T *;  ; using reference = T &;  ; using reverse_iterator = std::reverse_iterator< iterator >;  ; using size_type = size_t;  ; using value_type = T;  ;  Public Types inherited from ROOT::Internal::VecOps::SmallVectorBase; using Size_T = int32_t;  . Public Member Functions;  RVecImpl (const RVecImpl &)=delete;  ;  ~RVecImpl ();  ; template<typename in_iter , typename = typename std::enable_if<std::is_convertible< typename std::iterator_traits<in_iter>::iterator_category, std::input_iterator_tag>::value>::type> ; void append (in_iter in_start, in_iter in_end);  Add the specified range to the end of the SmallVector. ;  ; void append (size_type NumInputs, const T &Elt);  Append NumInputs copies of Elt to the end. ;  ; void append (std::initializer_list< T > IL);  ; template<typename in_iter , typename = typename std::enable_if<std::is_convertible< typename std::iterator_traits<in_iter>::iterator_category, std::input_iterator_tag>::value>::type> ; void assign (in_iter in_start, in_iter in_end);  ; void assign (size_type NumElts, const T &Elt);  ; void assign (std::initializer_list< T > IL);  ; void clear ();  ; template<typename... ArgTypes> ; reference emplace_back (ArgTypes &&...Args);  ; iterator erase (const_iterator CI);  ; iterator erase (const_iterator CS, const_iterator CE);  ; iterator insert (iterator I, const T &Elt);  ; template<typename ItTy , typename = typename std::enable_if<std::is_convertible< typename std::iterator_traits<ItTy>::iterator_category, std::input_iterator_tag>::value>::type> ; iterator insert (iterator I, ItTy From, ItTy To);  ; iterator insert (iterator I, size_type NumToInsert, const T &Elt);  ; void insert (iterator I, std::initializer_list< T > IL);  ; iterator insert (iterator I, T &&Elt);  ; RVecImpl & operator= (const RVecImpl &RHS);  ; RVecImpl & operator= (RVecImpl &&RHS);  ; void pop_back_n (size_type NumItems);  ; T pop_back_val ();  ; void reserve (size_type N",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html:10570,Usability,clear,clear,10570,"s copies of Elt to the end. ; Definition at line 665 of file RVec.hxx. ◆ append() [3/3]. template<typename T > . void ROOT::Detail::VecOps::RVecImpl< T >::append ; (; std::initializer_list< T > ; IL). inline . Definition at line 674 of file RVec.hxx. ◆ assign() [1/3]. template<typename T > . template<typename in_iter , typename = typename std::enable_if<std::is_convertible< typename std::iterator_traits<in_iter>::iterator_category, std::input_iterator_tag>::value>::type> . void ROOT::Detail::VecOps::RVecImpl< T >::assign ; (; in_iter ; in_start, . in_iter ; in_end . ). inline . Definition at line 692 of file RVec.hxx. ◆ assign() [2/3]. template<typename T > . void ROOT::Detail::VecOps::RVecImpl< T >::assign ; (; size_type ; NumElts, . const T & ; Elt . ). inline . Definition at line 680 of file RVec.hxx. ◆ assign() [3/3]. template<typename T > . void ROOT::Detail::VecOps::RVecImpl< T >::assign ; (; std::initializer_list< T > ; IL). inline . Definition at line 698 of file RVec.hxx. ◆ clear(). template<typename T > . void ROOT::Detail::VecOps::RVecImpl< T >::clear ; (; ). inline . Definition at line 586 of file RVec.hxx. ◆ emplace_back(). template<typename T > . template<typename... ArgTypes> . reference ROOT::Detail::VecOps::RVecImpl< T >::emplace_back ; (; ArgTypes &&... ; Args). inline . Definition at line 920 of file RVec.hxx. ◆ erase() [1/2]. template<typename T > . iterator ROOT::Detail::VecOps::RVecImpl< T >::erase ; (; const_iterator ; CI). inline . Definition at line 704 of file RVec.hxx. ◆ erase() [2/2]. template<typename T > . iterator ROOT::Detail::VecOps::RVecImpl< T >::erase ; (; const_iterator ; CS, . const_iterator ; CE . ). inline . Definition at line 721 of file RVec.hxx. ◆ insert() [1/5]. template<typename T > . iterator ROOT::Detail::VecOps::RVecImpl< T >::insert ; (; iterator ; I, . const T & ; Elt . ). inline . Definition at line 773 of file RVec.hxx. ◆ insert() [2/5]. template<typename T > . template<typename ItTy , typename = typename std::enabl",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html
https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html:10645,Usability,clear,clear,10645,"le RVec.hxx. ◆ append() [3/3]. template<typename T > . void ROOT::Detail::VecOps::RVecImpl< T >::append ; (; std::initializer_list< T > ; IL). inline . Definition at line 674 of file RVec.hxx. ◆ assign() [1/3]. template<typename T > . template<typename in_iter , typename = typename std::enable_if<std::is_convertible< typename std::iterator_traits<in_iter>::iterator_category, std::input_iterator_tag>::value>::type> . void ROOT::Detail::VecOps::RVecImpl< T >::assign ; (; in_iter ; in_start, . in_iter ; in_end . ). inline . Definition at line 692 of file RVec.hxx. ◆ assign() [2/3]. template<typename T > . void ROOT::Detail::VecOps::RVecImpl< T >::assign ; (; size_type ; NumElts, . const T & ; Elt . ). inline . Definition at line 680 of file RVec.hxx. ◆ assign() [3/3]. template<typename T > . void ROOT::Detail::VecOps::RVecImpl< T >::assign ; (; std::initializer_list< T > ; IL). inline . Definition at line 698 of file RVec.hxx. ◆ clear(). template<typename T > . void ROOT::Detail::VecOps::RVecImpl< T >::clear ; (; ). inline . Definition at line 586 of file RVec.hxx. ◆ emplace_back(). template<typename T > . template<typename... ArgTypes> . reference ROOT::Detail::VecOps::RVecImpl< T >::emplace_back ; (; ArgTypes &&... ; Args). inline . Definition at line 920 of file RVec.hxx. ◆ erase() [1/2]. template<typename T > . iterator ROOT::Detail::VecOps::RVecImpl< T >::erase ; (; const_iterator ; CI). inline . Definition at line 704 of file RVec.hxx. ◆ erase() [2/2]. template<typename T > . iterator ROOT::Detail::VecOps::RVecImpl< T >::erase ; (; const_iterator ; CS, . const_iterator ; CE . ). inline . Definition at line 721 of file RVec.hxx. ◆ insert() [1/5]. template<typename T > . iterator ROOT::Detail::VecOps::RVecImpl< T >::insert ; (; iterator ; I, . const T & ; Elt . ). inline . Definition at line 773 of file RVec.hxx. ◆ insert() [2/5]. template<typename T > . template<typename ItTy , typename = typename std::enable_if<std::is_convertible< typename std::iterator_traits<I",MatchSource.WIKI,doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html:7779,Availability,error,error,7779,"ant to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ; ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html:7868,Availability,error,error,7868,"hics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html:8023,Availability,error,error,8023,"e regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html:8320,Availability,error,error,8320,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns k",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html:12063,Availability,error,error,12063,"ion_t *option="""");  This method must be overridden if a class wants to paint itself. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TKey; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t C",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html:7785,Integrability,message,message,7785,"ant to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ; ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html:8326,Integrability,message,message,8326,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns k",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html:9233,Integrability,message,message,9233,"py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be o",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html:12069,Integrability,message,message,12069,"ion_t *option="""");  This method must be overridden if a class wants to paint itself. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TKey; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t C",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html:12442,Integrability,message,message,12442," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TKey; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html:981,Modifiability,inherit,inherited,981,". ROOT: ROOT::Experimental::Internal::RKeyBlob Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; ROOT::Experimental::Internal::RKeyBlob Class Reference. ; The RKeyBlob writes an invisible key into a TFile. ; That is, a key that is not indexed in the list of keys, like a TBasket. NOTE: out of anonymous namespace because otherwise ClassDefInline fails to compile on some platforms. ; Definition at line 613 of file RMiniFile.cxx. Public Member Functions;  RKeyBlob ()=default;  ;  RKeyBlob (TFile *file);  ; TClass * IsA () const override;  ; void Reserve (size_t nbytes, std::uint64_t *seekKey);  Register a new key for a data record of size nbytes. ;  ; void Streamer (TBuffer &R__b) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TKey;  TKey ();  TKey default constructor. ;  ;  TKey (const char *name, const char *title, const TClass *cl, Int_t nbytes, TDirectory *motherDir);  Create a TKey object with the specified name, title for the given class. ;  ;  TKey (const TObject *obj, const char *name, Int_t bufsize, TDirectory *motherDir);  Create a TKey object for a TObject* and fill output buffer. ;  ;  TKey (const TString &name, const TString &title, const TClass *cl, Int_t nbytes, TDirectory *motherDir);  Create a TKey object with the specified name, title for the given class. ;  ;  TKey (const void *obj, const TClass *cl, const char *name, Int_t bufsize, TDirectory *motherDir);  Create a TKey object for any object obj of class cl d and fill output buffer. ;  ;  TKey (Long64_t pointer, Int_t nbytes, TDirectory *motherDir=nullptr);  Create a TKey object to read keys. ;  ;  TKey (TDirectory *motherDir);  TKey default constructor. ;  ;  TKey (TDirectory *motherDir, const TKey &orig, UShort_t pidOffset);  Copy a TKey fro",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html:4918,Modifiability,inherit,inherited,4918,"er);  Decode input buffer. ;  ; virtual TObject * ReadObj ();  To read a TObject* from the file. ;  ; template<typename T > ; T * ReadObject ();  To read an object (non deriving from TObject) from the file. ;  ; virtual void * ReadObjectAny (const TClass *expectedClass);  To read an object (non deriving from TObject) from the file. ;  ; virtual TObject * ReadObjWithBuffer (char *bufferRead);  To read a TObject* from bufferRead. ;  ; virtual void SetBuffer ();  ; void SetMotherDir (TDirectory *dir);  ; virtual void SetParent (const TObject *parent);  Set parent in key buffer. ;  ; Int_t Sizeof () const override;  Return the size in bytes of the key header structure. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t WriteFile (Int_t cycle=1, TFile *f=nullptr);  Write the encoded object supported by this key. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html:6493,Modifiability,inherit,inherited,6493," &named) const override;  Copy this to obj. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs.",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html:7415,Modifiability,inherit,inheritance,7415,"rtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html:9331,Modifiability,inherit,inherits,9331,"nst;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base implementation is no-op).",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html:9448,Modifiability,inherit,inherits,9448,"derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; void Obsolete (const char *method, const char *asOfVers, const char *removedFromVers) const;  Use this method ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html:12943,Modifiability,inherit,inherited,12943,"const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TKey; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL <<",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html:13151,Modifiability,inherit,inherited,13151,"const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TKey; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL <<",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html:13361,Modifiability,inherit,inherited,13361,"const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TKey; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL <<",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html:13891,Modifiability,inherit,inherited,13891,"from TKey; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TKey; void Build (TDirectory *motherDir, const char *classname, Long64_t filepos);  Method used in all TKey constructor to initialize basic data fields. ;  ; virtual void Create (Int_t nbytes, TFile *f=nullptr);  Create a TKey object of specified size. ;  ; Int_t Read (const char *name) override;  Read cont",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html:14532,Modifiability,inherit,inherited,14532,"f object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TKey; void Build (TDirectory *motherDir, const char *classname, Long64_t filepos);  Method used in all TKey constructor to initialize basic data fields. ;  ; virtual void Create (Int_t nbytes, TFile *f=nullptr);  Create a TKey object of specified size. ;  ; Int_t Read (const char *name) override;  Read contents of object with specified name from the current directory. ;  ; void Reset ();  Reset the key as it had not been 'filled' yet. ;  ; virtual Int_t WriteFileKeepBuffer (TFile *f=nullptr);  Write the encoded object supported by this key. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TKey; char * fBuffer;  Object buffer. ;  ; TBuffer * fBufferRef;  Pointer to the TBuffer object. ;  ; TString fClassName;  Object Class name. ;  ; Short_t fCycle;  Cycle number. ;  ; TDatime fDatime;  Date/T",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html:14631,Modifiability,inherit,inherited,14631,"f object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TKey; void Build (TDirectory *motherDir, const char *classname, Long64_t filepos);  Method used in all TKey constructor to initialize basic data fields. ;  ; virtual void Create (Int_t nbytes, TFile *f=nullptr);  Create a TKey object of specified size. ;  ; Int_t Read (const char *name) override;  Read contents of object with specified name from the current directory. ;  ; void Reset ();  Reset the key as it had not been 'filled' yet. ;  ; virtual Int_t WriteFileKeepBuffer (TFile *f=nullptr);  Write the encoded object supported by this key. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TKey; char * fBuffer;  Object buffer. ;  ; TBuffer * fBufferRef;  Pointer to the TBuffer object. ;  ; TString fClassName;  Object Class name. ;  ; Short_t fCycle;  Cycle number. ;  ; TDatime fDatime;  Date/T",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html:15226,Modifiability,inherit,inherited,15226,"LL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TKey; void Build (TDirectory *motherDir, const char *classname, Long64_t filepos);  Method used in all TKey constructor to initialize basic data fields. ;  ; virtual void Create (Int_t nbytes, TFile *f=nullptr);  Create a TKey object of specified size. ;  ; Int_t Read (const char *name) override;  Read contents of object with specified name from the current directory. ;  ; void Reset ();  Reset the key as it had not been 'filled' yet. ;  ; virtual Int_t WriteFileKeepBuffer (TFile *f=nullptr);  Write the encoded object supported by this key. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TKey; char * fBuffer;  Object buffer. ;  ; TBuffer * fBufferRef;  Pointer to the TBuffer object. ;  ; TString fClassName;  Object Class name. ;  ; Short_t fCycle;  Cycle number. ;  ; TDatime fDatime;  Date/Time of insertion in file. ;  ; Short_t fKeylen;  Number of bytes for the key itself. ;  ; Int_t fLeft;  Number of bytes left in current segment. ;  ; TDirectory * fMotherDir;  !pointer to mother directory ;  ; Int_t fNbytes;  Number of bytes for the object on file. ;  ; Int_t fObjlen;  Length of uncompressed object in bytes. ;  ; UShort_t fPidOffset;  !Offset to be added to the pid index in this key/buffer. This is actually saved in the high bits of fSeekPdir ;  ; Long64_t fSeekKey;  Location of object on file. ;  ; Long64_t fSeekPdir;  Location of parent directory on file. ;  ; Int_t fVersion;  Key version identifier. ;  ;  ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html:15431,Modifiability,inherit,inherited,15431," )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TKey; void Build (TDirectory *motherDir, const char *classname, Long64_t filepos);  Method used in all TKey constructor to initialize basic data fields. ;  ; virtual void Create (Int_t nbytes, TFile *f=nullptr);  Create a TKey object of specified size. ;  ; Int_t Read (const char *name) override;  Read contents of object with specified name from the current directory. ;  ; void Reset ();  Reset the key as it had not been 'filled' yet. ;  ; virtual Int_t WriteFileKeepBuffer (TFile *f=nullptr);  Write the encoded object supported by this key. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TKey; char * fBuffer;  Object buffer. ;  ; TBuffer * fBufferRef;  Pointer to the TBuffer object. ;  ; TString fClassName;  Object Class name. ;  ; Short_t fCycle;  Cycle number. ;  ; TDatime fDatime;  Date/Time of insertion in file. ;  ; Short_t fKeylen;  Number of bytes for the key itself. ;  ; Int_t fLeft;  Number of bytes left in current segment. ;  ; TDirectory * fMotherDir;  !pointer to mother directory ;  ; Int_t fNbytes;  Number of bytes for the object on file. ;  ; Int_t fObjlen;  Length of uncompressed object in bytes. ;  ; UShort_t fPidOffset;  !Offset to be added to the pid index in this key/buffer. This is actually saved in the high bits of fSeekPdir ;  ; Long64_t fSeekKey;  Location of object on file. ;  ; Long64_t fSeekPdir;  Location of parent directory on file. ;  ; Int_t fVersion;  Key version identifier. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Inheritance diagram for ROOT::Experimental::Internal::RKeyBlob:. ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html:16307,Modifiability,inherit,inherited,16307,"va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TKey; char * fBuffer;  Object buffer. ;  ; TBuffer * fBufferRef;  Pointer to the TBuffer object. ;  ; TString fClassName;  Object Class name. ;  ; Short_t fCycle;  Cycle number. ;  ; TDatime fDatime;  Date/Time of insertion in file. ;  ; Short_t fKeylen;  Number of bytes for the key itself. ;  ; Int_t fLeft;  Number of bytes left in current segment. ;  ; TDirectory * fMotherDir;  !pointer to mother directory ;  ; Int_t fNbytes;  Number of bytes for the object on file. ;  ; Int_t fObjlen;  Length of uncompressed object in bytes. ;  ; UShort_t fPidOffset;  !Offset to be added to the pid index in this key/buffer. This is actually saved in the high bits of fSeekPdir ;  ; Long64_t fSeekKey;  Location of object on file. ;  ; Long64_t fSeekPdir;  Location of parent directory on file. ;  ; Int_t fVersion;  Key version identifier. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Inheritance diagram for ROOT::Experimental::Internal::RKeyBlob:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RKeyBlob() [1/2]. ROOT::Experimental::Internal::RKeyBlob::RKeyBlob ; (; ). default . ◆ RKeyBlob() [2/2]. ROOT::Experimental::Internal::RKeyBlob::RKeyBlob ; (; TFile * ; file). inlineexplicit . Definition at line 617 of file RMiniFile.cxx. Member Function Documentation. ◆ Class(). static TClass * ROOT::Experimental::Internal::RKeyBlob::Class ; (; ). inlinestatic . ReturnsTClass describing this class ; Definition at line 631 of file RMiniFile.cxx. ◆ Class_Name(). static const char * ROOT::Experimental::Internal::RKeyBlob::Class_Name ; (; ). inlinestatic . ReturnsName of this class ; Definition at line 631 of file RMiniFile.cxx. ◆ Class_Version(). static constexpr Version_t ROOT::Experimental::Internal::RKeyBlob::Class_Version ; (; ). inlinestati",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html:5705,Security,hash,hash,5705," class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t WriteFile (Int_t cycle=1, TFile *f=nullptr);  Write the encoded object supported by this key. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html:453,Integrability,interface,interface,453,". ROOT: ROOT::Experimental::Internal::RPageSink Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; ROOT::Experimental::Internal::RPageSink Class ReferenceabstractNTuple-related classes. ; Abstract interface to write data into an ntuple. ; The page sink takes the list of columns and afterwards a series of page commits and cluster commits. The user is responsible to commit clusters at a consistent point, i.e. when all pages corresponding to data up to the given entry number are committed.; An object of this class may either be a wrapper (for example a RPageSinkBuf) or a ""persistent"" sink, inheriting from RPagePersistentSink. ; Definition at line 256 of file RPageStorage.hxx. Classes; struct  RSealPageConfig;  Parameters for the SealPage() method. More...;  ; class  RSinkGuard;  An RAII wrapper used to synchronize a page sink. See GetSinkGuard(). More...;  ; struct  RStagedCluster;  Cluster that was staged, but not yet logically appended to the RNTuple. More...;  . Public Types; using Callback_t = std::function< void(RPageSink &)>;  ;  Public Types inherited from ROOT::Experimental::Internal::RPageStorage; using ColumnHandle_t = RColumnHandle;  The column handle identifies a column with the current open page storage. ;  ; using SealedPageSequence_t = std::deque< RSealedPage >;  . Public Member Functions;  RPageSink (const RPageSink &)=delete;  ;  RPageSink (RPageSink &&)=default;  ;  RPageSink (std::string_view ntupleName, const RNTupleWriteOptions &options);  ;  ~RPageSink () override;  ; virtual std::uint64_t CommitCluster (NTupleSize_t nNewEntries);  Finalize the current cluster and create a new one for the following data. ;  ; virtual void CommitClusterGroup ()=0;  Write out the page locations (page list envelope) ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html:789,Integrability,wrap,wrapper,789,". ROOT: ROOT::Experimental::Internal::RPageSink Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; ROOT::Experimental::Internal::RPageSink Class ReferenceabstractNTuple-related classes. ; Abstract interface to write data into an ntuple. ; The page sink takes the list of columns and afterwards a series of page commits and cluster commits. The user is responsible to commit clusters at a consistent point, i.e. when all pages corresponding to data up to the given entry number are committed.; An object of this class may either be a wrapper (for example a RPageSinkBuf) or a ""persistent"" sink, inheriting from RPagePersistentSink. ; Definition at line 256 of file RPageStorage.hxx. Classes; struct  RSealPageConfig;  Parameters for the SealPage() method. More...;  ; class  RSinkGuard;  An RAII wrapper used to synchronize a page sink. See GetSinkGuard(). More...;  ; struct  RStagedCluster;  Cluster that was staged, but not yet logically appended to the RNTuple. More...;  . Public Types; using Callback_t = std::function< void(RPageSink &)>;  ;  Public Types inherited from ROOT::Experimental::Internal::RPageStorage; using ColumnHandle_t = RColumnHandle;  The column handle identifies a column with the current open page storage. ;  ; using SealedPageSequence_t = std::deque< RSealedPage >;  . Public Member Functions;  RPageSink (const RPageSink &)=delete;  ;  RPageSink (RPageSink &&)=default;  ;  RPageSink (std::string_view ntupleName, const RNTupleWriteOptions &options);  ;  ~RPageSink () override;  ; virtual std::uint64_t CommitCluster (NTupleSize_t nNewEntries);  Finalize the current cluster and create a new one for the following data. ;  ; virtual void CommitClusterGroup ()=0;  Write out the page locations (page list envelope) ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html:1051,Integrability,wrap,wrapper,1051,"Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; ROOT::Experimental::Internal::RPageSink Class ReferenceabstractNTuple-related classes. ; Abstract interface to write data into an ntuple. ; The page sink takes the list of columns and afterwards a series of page commits and cluster commits. The user is responsible to commit clusters at a consistent point, i.e. when all pages corresponding to data up to the given entry number are committed.; An object of this class may either be a wrapper (for example a RPageSinkBuf) or a ""persistent"" sink, inheriting from RPagePersistentSink. ; Definition at line 256 of file RPageStorage.hxx. Classes; struct  RSealPageConfig;  Parameters for the SealPage() method. More...;  ; class  RSinkGuard;  An RAII wrapper used to synchronize a page sink. See GetSinkGuard(). More...;  ; struct  RStagedCluster;  Cluster that was staged, but not yet logically appended to the RNTuple. More...;  . Public Types; using Callback_t = std::function< void(RPageSink &)>;  ;  Public Types inherited from ROOT::Experimental::Internal::RPageStorage; using ColumnHandle_t = RColumnHandle;  The column handle identifies a column with the current open page storage. ;  ; using SealedPageSequence_t = std::deque< RSealedPage >;  . Public Member Functions;  RPageSink (const RPageSink &)=delete;  ;  RPageSink (RPageSink &&)=default;  ;  RPageSink (std::string_view ntupleName, const RNTupleWriteOptions &options);  ;  ~RPageSink () override;  ; virtual std::uint64_t CommitCluster (NTupleSize_t nNewEntries);  Finalize the current cluster and create a new one for the following data. ;  ; virtual void CommitClusterGroup ()=0;  Write out the page locations (page list envelope) for all the committed clusters since the last call of ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html:1067,Integrability,synchroniz,synchronize,1067,"Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; ROOT::Experimental::Internal::RPageSink Class ReferenceabstractNTuple-related classes. ; Abstract interface to write data into an ntuple. ; The page sink takes the list of columns and afterwards a series of page commits and cluster commits. The user is responsible to commit clusters at a consistent point, i.e. when all pages corresponding to data up to the given entry number are committed.; An object of this class may either be a wrapper (for example a RPageSinkBuf) or a ""persistent"" sink, inheriting from RPagePersistentSink. ; Definition at line 256 of file RPageStorage.hxx. Classes; struct  RSealPageConfig;  Parameters for the SealPage() method. More...;  ; class  RSinkGuard;  An RAII wrapper used to synchronize a page sink. See GetSinkGuard(). More...;  ; struct  RStagedCluster;  Cluster that was staged, but not yet logically appended to the RNTuple. More...;  . Public Types; using Callback_t = std::function< void(RPageSink &)>;  ;  Public Types inherited from ROOT::Experimental::Internal::RPageStorage; using ColumnHandle_t = RColumnHandle;  The column handle identifies a column with the current open page storage. ;  ; using SealedPageSequence_t = std::deque< RSealedPage >;  . Public Member Functions;  RPageSink (const RPageSink &)=delete;  ;  RPageSink (RPageSink &&)=default;  ;  RPageSink (std::string_view ntupleName, const RNTupleWriteOptions &options);  ;  ~RPageSink () override;  ; virtual std::uint64_t CommitCluster (NTupleSize_t nNewEntries);  Finalize the current cluster and create a new one for the following data. ;  ; virtual void CommitClusterGroup ()=0;  Write out the page locations (page list envelope) for all the committed clusters since the last call of ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html:850,Modifiability,inherit,inheriting,850,". ROOT: ROOT::Experimental::Internal::RPageSink Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; ROOT::Experimental::Internal::RPageSink Class ReferenceabstractNTuple-related classes. ; Abstract interface to write data into an ntuple. ; The page sink takes the list of columns and afterwards a series of page commits and cluster commits. The user is responsible to commit clusters at a consistent point, i.e. when all pages corresponding to data up to the given entry number are committed.; An object of this class may either be a wrapper (for example a RPageSinkBuf) or a ""persistent"" sink, inheriting from RPagePersistentSink. ; Definition at line 256 of file RPageStorage.hxx. Classes; struct  RSealPageConfig;  Parameters for the SealPage() method. More...;  ; class  RSinkGuard;  An RAII wrapper used to synchronize a page sink. See GetSinkGuard(). More...;  ; struct  RStagedCluster;  Cluster that was staged, but not yet logically appended to the RNTuple. More...;  . Public Types; using Callback_t = std::function< void(RPageSink &)>;  ;  Public Types inherited from ROOT::Experimental::Internal::RPageStorage; using ColumnHandle_t = RColumnHandle;  The column handle identifies a column with the current open page storage. ;  ; using SealedPageSequence_t = std::deque< RSealedPage >;  . Public Member Functions;  RPageSink (const RPageSink &)=delete;  ;  RPageSink (RPageSink &&)=default;  ;  RPageSink (std::string_view ntupleName, const RNTupleWriteOptions &options);  ;  ~RPageSink () override;  ; virtual std::uint64_t CommitCluster (NTupleSize_t nNewEntries);  Finalize the current cluster and create a new one for the following data. ;  ; virtual void CommitClusterGroup ()=0;  Write out the page locations (page list envelope) ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html:1318,Modifiability,inherit,inherited,1318,":Experimental::Internal::RPageSink Class ReferenceabstractNTuple-related classes. ; Abstract interface to write data into an ntuple. ; The page sink takes the list of columns and afterwards a series of page commits and cluster commits. The user is responsible to commit clusters at a consistent point, i.e. when all pages corresponding to data up to the given entry number are committed.; An object of this class may either be a wrapper (for example a RPageSinkBuf) or a ""persistent"" sink, inheriting from RPagePersistentSink. ; Definition at line 256 of file RPageStorage.hxx. Classes; struct  RSealPageConfig;  Parameters for the SealPage() method. More...;  ; class  RSinkGuard;  An RAII wrapper used to synchronize a page sink. See GetSinkGuard(). More...;  ; struct  RStagedCluster;  Cluster that was staged, but not yet logically appended to the RNTuple. More...;  . Public Types; using Callback_t = std::function< void(RPageSink &)>;  ;  Public Types inherited from ROOT::Experimental::Internal::RPageStorage; using ColumnHandle_t = RColumnHandle;  The column handle identifies a column with the current open page storage. ;  ; using SealedPageSequence_t = std::deque< RSealedPage >;  . Public Member Functions;  RPageSink (const RPageSink &)=delete;  ;  RPageSink (RPageSink &&)=default;  ;  RPageSink (std::string_view ntupleName, const RNTupleWriteOptions &options);  ;  ~RPageSink () override;  ; virtual std::uint64_t CommitCluster (NTupleSize_t nNewEntries);  Finalize the current cluster and create a new one for the following data. ;  ; virtual void CommitClusterGroup ()=0;  Write out the page locations (page list envelope) for all the committed clusters since the last call of CommitClusterGroup (or the beginning of writing). ;  ; void CommitDataset ();  Run the registered callbacks and finalize the current cluster and the entrire data set. ;  ; virtual void CommitPage (ColumnHandle_t columnHandle, const RPage &page)=0;  Write a page to the storage. The column must have been ad",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html:4644,Modifiability,inherit,inherited,4644,"eSink &&)=default;  ; void RegisterOnCommitDatasetCallback (Callback_t callback);  The registered callback is executed at the beginning of CommitDataset();. ;  ; virtual RPage ReservePage (ColumnHandle_t columnHandle, std::size_t nElements);  Get a new, empty page for the given column that can be filled with up to nElements; nElements must be larger than zero. ;  ; virtual RStagedCluster StageCluster (NTupleSize_t nNewEntries)=0;  Stage the current cluster and create a new one for the following data. ;  ; virtual void UpdateExtraTypeInfo (const RExtraTypeInfoDescriptor &extraTypeInfo)=0;  Adds an extra type information record to schema. ;  ; virtual void UpdateSchema (const RNTupleModelChangeset &changeset, NTupleSize_t firstEntry)=0;  Incorporate incremental changes to the model into the ntuple descriptor. ;  ;  Public Member Functions inherited from ROOT::Experimental::Internal::RPageStorage;  RPageStorage (const RPageStorage &other)=delete;  ;  RPageStorage (RPageStorage &&other)=default;  ;  RPageStorage (std::string_view name);  ; virtual ~RPageStorage ();  ; virtual ColumnHandle_t AddColumn (DescriptorId_t fieldId, RColumn &column)=0;  Register a new column. ;  ; ColumnId_t GetColumnId (ColumnHandle_t columnHandle) const;  ; virtual Detail::RNTupleMetrics & GetMetrics ();  Returns the default metrics object. ;  ; const std::string & GetNTupleName () const;  Returns the NTuple name. ;  ; RPageStorage & operator= (const RPageStorage &other)=delete;  ; RPageStorage & operator= (RPageStorage &&other)=default;  ; void SetTaskScheduler (RTaskScheduler *taskScheduler);  . Static Public Member Functions; static RSealedPage SealPage (const RSealPageConfig &config);  Seal a page using the provided info. ;  . Protected Member Functions; virtual void CommitDatasetImpl ()=0;  ; virtual void InitImpl (RNTupleModel &model)=0;  ; RSealedPage SealPage (const RPage &page, const RColumnElementBase &element);  Helper for streaming a page. ;  ;  Protected Member Functions inherite",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html:5477,Modifiability,config,config,5477," UpdateSchema (const RNTupleModelChangeset &changeset, NTupleSize_t firstEntry)=0;  Incorporate incremental changes to the model into the ntuple descriptor. ;  ;  Public Member Functions inherited from ROOT::Experimental::Internal::RPageStorage;  RPageStorage (const RPageStorage &other)=delete;  ;  RPageStorage (RPageStorage &&other)=default;  ;  RPageStorage (std::string_view name);  ; virtual ~RPageStorage ();  ; virtual ColumnHandle_t AddColumn (DescriptorId_t fieldId, RColumn &column)=0;  Register a new column. ;  ; ColumnId_t GetColumnId (ColumnHandle_t columnHandle) const;  ; virtual Detail::RNTupleMetrics & GetMetrics ();  Returns the default metrics object. ;  ; const std::string & GetNTupleName () const;  Returns the NTuple name. ;  ; RPageStorage & operator= (const RPageStorage &other)=delete;  ; RPageStorage & operator= (RPageStorage &&other)=default;  ; void SetTaskScheduler (RTaskScheduler *taskScheduler);  . Static Public Member Functions; static RSealedPage SealPage (const RSealPageConfig &config);  Seal a page using the provided info. ;  . Protected Member Functions; virtual void CommitDatasetImpl ()=0;  ; virtual void InitImpl (RNTupleModel &model)=0;  ; RSealedPage SealPage (const RPage &page, const RColumnElementBase &element);  Helper for streaming a page. ;  ;  Protected Member Functions inherited from ROOT::Experimental::Internal::RPageStorage; void WaitForAllTasks ();  . Protected Attributes; std::unique_ptr< RNTupleCompressor > fCompressor;  Helper to zip pages and header/footer; includes a 16MB (kMAXZIPBUF) zip buffer. ;  ; std::unique_ptr< RNTupleWriteOptions > fOptions;  ;  Protected Attributes inherited from ROOT::Experimental::Internal::RPageStorage; Detail::RNTupleMetrics fMetrics;  ; std::string fNTupleName;  ; std::unique_ptr< RPageAllocator > fPageAllocator;  For the time being, we will use the heap allocator for all sources and sinks. This may change in the future. ;  ; RTaskScheduler * fTaskScheduler = nullptr;  . Private Attributes",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html:5787,Modifiability,inherit,inherited,5787,"orage (std::string_view name);  ; virtual ~RPageStorage ();  ; virtual ColumnHandle_t AddColumn (DescriptorId_t fieldId, RColumn &column)=0;  Register a new column. ;  ; ColumnId_t GetColumnId (ColumnHandle_t columnHandle) const;  ; virtual Detail::RNTupleMetrics & GetMetrics ();  Returns the default metrics object. ;  ; const std::string & GetNTupleName () const;  Returns the NTuple name. ;  ; RPageStorage & operator= (const RPageStorage &other)=delete;  ; RPageStorage & operator= (RPageStorage &&other)=default;  ; void SetTaskScheduler (RTaskScheduler *taskScheduler);  . Static Public Member Functions; static RSealedPage SealPage (const RSealPageConfig &config);  Seal a page using the provided info. ;  . Protected Member Functions; virtual void CommitDatasetImpl ()=0;  ; virtual void InitImpl (RNTupleModel &model)=0;  ; RSealedPage SealPage (const RPage &page, const RColumnElementBase &element);  Helper for streaming a page. ;  ;  Protected Member Functions inherited from ROOT::Experimental::Internal::RPageStorage; void WaitForAllTasks ();  . Protected Attributes; std::unique_ptr< RNTupleCompressor > fCompressor;  Helper to zip pages and header/footer; includes a 16MB (kMAXZIPBUF) zip buffer. ;  ; std::unique_ptr< RNTupleWriteOptions > fOptions;  ;  Protected Attributes inherited from ROOT::Experimental::Internal::RPageStorage; Detail::RNTupleMetrics fMetrics;  ; std::string fNTupleName;  ; std::unique_ptr< RPageAllocator > fPageAllocator;  For the time being, we will use the heap allocator for all sources and sinks. This may change in the future. ;  ; RTaskScheduler * fTaskScheduler = nullptr;  . Private Attributes; bool fIsInitialized = false;  Flag if sink was initialized. ;  ; std::vector< Callback_t > fOnDatasetCommitCallbacks;  ; std::vector< unsigned char > fSealPageBuffer;  Used as destination buffer in the simple SealPage overload. ;  ; RWritePageMemoryManager fWritePageMemoryManager;  Used in ReservePage to maintain the page buffer budget. ;  . Additiona",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html:6106,Modifiability,inherit,inherited,6106,"e NTuple name. ;  ; RPageStorage & operator= (const RPageStorage &other)=delete;  ; RPageStorage & operator= (RPageStorage &&other)=default;  ; void SetTaskScheduler (RTaskScheduler *taskScheduler);  . Static Public Member Functions; static RSealedPage SealPage (const RSealPageConfig &config);  Seal a page using the provided info. ;  . Protected Member Functions; virtual void CommitDatasetImpl ()=0;  ; virtual void InitImpl (RNTupleModel &model)=0;  ; RSealedPage SealPage (const RPage &page, const RColumnElementBase &element);  Helper for streaming a page. ;  ;  Protected Member Functions inherited from ROOT::Experimental::Internal::RPageStorage; void WaitForAllTasks ();  . Protected Attributes; std::unique_ptr< RNTupleCompressor > fCompressor;  Helper to zip pages and header/footer; includes a 16MB (kMAXZIPBUF) zip buffer. ;  ; std::unique_ptr< RNTupleWriteOptions > fOptions;  ;  Protected Attributes inherited from ROOT::Experimental::Internal::RPageStorage; Detail::RNTupleMetrics fMetrics;  ; std::string fNTupleName;  ; std::unique_ptr< RPageAllocator > fPageAllocator;  For the time being, we will use the heap allocator for all sources and sinks. This may change in the future. ;  ; RTaskScheduler * fTaskScheduler = nullptr;  . Private Attributes; bool fIsInitialized = false;  Flag if sink was initialized. ;  ; std::vector< Callback_t > fOnDatasetCommitCallbacks;  ; std::vector< unsigned char > fSealPageBuffer;  Used as destination buffer in the simple SealPage overload. ;  ; RWritePageMemoryManager fWritePageMemoryManager;  Used in ReservePage to maintain the page buffer budget. ;  . Additional Inherited Members;  Static Public Attributes inherited from ROOT::Experimental::Internal::RPageStorage; static constexpr std::size_t kNBytesPageChecksum = sizeof(std::uint64_t);  The page checksum is a 64bit xxhash3. ;  . #include <ROOT/RPageStorage.hxx>. Inheritance diagram for ROOT::Experimental::Internal::RPageSink:. This browser is not able to show SVG: try Firefox, Chro",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html:6860,Modifiability,inherit,inherited,6860,"pleCompressor > fCompressor;  Helper to zip pages and header/footer; includes a 16MB (kMAXZIPBUF) zip buffer. ;  ; std::unique_ptr< RNTupleWriteOptions > fOptions;  ;  Protected Attributes inherited from ROOT::Experimental::Internal::RPageStorage; Detail::RNTupleMetrics fMetrics;  ; std::string fNTupleName;  ; std::unique_ptr< RPageAllocator > fPageAllocator;  For the time being, we will use the heap allocator for all sources and sinks. This may change in the future. ;  ; RTaskScheduler * fTaskScheduler = nullptr;  . Private Attributes; bool fIsInitialized = false;  Flag if sink was initialized. ;  ; std::vector< Callback_t > fOnDatasetCommitCallbacks;  ; std::vector< unsigned char > fSealPageBuffer;  Used as destination buffer in the simple SealPage overload. ;  ; RWritePageMemoryManager fWritePageMemoryManager;  Used in ReservePage to maintain the page buffer budget. ;  . Additional Inherited Members;  Static Public Attributes inherited from ROOT::Experimental::Internal::RPageStorage; static constexpr std::size_t kNBytesPageChecksum = sizeof(std::uint64_t);  The page checksum is a 64bit xxhash3. ;  . #include <ROOT/RPageStorage.hxx>. Inheritance diagram for ROOT::Experimental::Internal::RPageSink:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ Callback_t. using ROOT::Experimental::Internal::RPageSink::Callback_t = std::function<void(RPageSink &)>. Definition at line 258 of file RPageStorage.hxx. Constructor & Destructor Documentation. ◆ RPageSink() [1/3]. ROOT::Experimental::Internal::RPageSink::RPageSink ; (; std::string_view ; ntupleName, . const RNTupleWriteOptions & ; options . ). Definition at line 611 of file RPageStorage.cxx. ◆ RPageSink() [2/3]. ROOT::Experimental::Internal::RPageSink::RPageSink ; (; const RPageSink & ; ). delete . ◆ RPageSink() [3/3]. ROOT::Experimental::Internal::RPageSink::RPageSink ; (; RPageSink && ; ). default . ◆ ~RPageSink(). ROOT::Experimental::Inter",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html:15738,Modifiability,config,config,15738," that can be filled with up to nElements; nElements must be larger than zero. ; Reimplemented in ROOT::Experimental::Internal::RPageSinkBuf.; Definition at line 681 of file RPageStorage.cxx. ◆ SealPage() [1/2]. ROOT::Experimental::Internal::RPageStorage::RSealedPage ROOT::Experimental::Internal::RPageSink::SealPage ; (; const RPage & ; page, . const RColumnElementBase & ; element . ). protected . Helper for streaming a page. ; This is commonly used in derived, concrete page sinks. Note that if compressionSetting is 0 (uncompressed) and the page is mappable and not checksummed, the returned sealed page will point directly to the input page buffer. Otherwise, the sealed page references an internal buffer of fCompressor. Thus, the buffer pointed to by the RSealedPage should never be freed. Usage of this method requires construction of fCompressor. ; Definition at line 656 of file RPageStorage.cxx. ◆ SealPage() [2/2]. ROOT::Experimental::Internal::RPageStorage::RSealedPage ROOT::Experimental::Internal::RPageSink::SealPage ; (; const RSealPageConfig & ; config). static . Seal a page using the provided info. ; Definition at line 619 of file RPageStorage.cxx. ◆ StageCluster(). virtual RStagedCluster ROOT::Experimental::Internal::RPageSink::StageCluster ; (; NTupleSize_t ; nNewEntries). pure virtual . Stage the current cluster and create a new one for the following data. ; Returns the object that must be passed to CommitStagedClusters to logically append the staged cluster to the ntuple descriptor. ; Implemented in ROOT::Experimental::Internal::RPageSinkBuf, ROOT::Experimental::Internal::RPagePersistentSink, and ROOT::Experimental::Internal::RPageNullSink. ◆ UpdateExtraTypeInfo(). virtual void ROOT::Experimental::Internal::RPageSink::UpdateExtraTypeInfo ; (; const RExtraTypeInfoDescriptor & ; extraTypeInfo). pure virtual . Adds an extra type information record to schema. ; The extra type information will be written to the extension header. The information in the record will",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html:7003,Security,checksum,checksum,7003,"pleCompressor > fCompressor;  Helper to zip pages and header/footer; includes a 16MB (kMAXZIPBUF) zip buffer. ;  ; std::unique_ptr< RNTupleWriteOptions > fOptions;  ;  Protected Attributes inherited from ROOT::Experimental::Internal::RPageStorage; Detail::RNTupleMetrics fMetrics;  ; std::string fNTupleName;  ; std::unique_ptr< RPageAllocator > fPageAllocator;  For the time being, we will use the heap allocator for all sources and sinks. This may change in the future. ;  ; RTaskScheduler * fTaskScheduler = nullptr;  . Private Attributes; bool fIsInitialized = false;  Flag if sink was initialized. ;  ; std::vector< Callback_t > fOnDatasetCommitCallbacks;  ; std::vector< unsigned char > fSealPageBuffer;  Used as destination buffer in the simple SealPage overload. ;  ; RWritePageMemoryManager fWritePageMemoryManager;  Used in ReservePage to maintain the page buffer budget. ;  . Additional Inherited Members;  Static Public Attributes inherited from ROOT::Experimental::Internal::RPageStorage; static constexpr std::size_t kNBytesPageChecksum = sizeof(std::uint64_t);  The page checksum is a 64bit xxhash3. ;  . #include <ROOT/RPageStorage.hxx>. Inheritance diagram for ROOT::Experimental::Internal::RPageSink:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ Callback_t. using ROOT::Experimental::Internal::RPageSink::Callback_t = std::function<void(RPageSink &)>. Definition at line 258 of file RPageStorage.hxx. Constructor & Destructor Documentation. ◆ RPageSink() [1/3]. ROOT::Experimental::Internal::RPageSink::RPageSink ; (; std::string_view ; ntupleName, . const RNTupleWriteOptions & ; options . ). Definition at line 611 of file RPageStorage.cxx. ◆ RPageSink() [2/3]. ROOT::Experimental::Internal::RPageSink::RPageSink ; (; const RPageSink & ; ). delete . ◆ RPageSink() [3/3]. ROOT::Experimental::Internal::RPageSink::RPageSink ; (; RPageSink && ; ). default . ◆ ~RPageSink(). ROOT::Experimental::Inter",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html:15244,Security,checksum,checksummed,15244,"RPageSink::RegisterOnCommitDatasetCallback ; (; Callback_t ; callback). inline . The registered callback is executed at the beginning of CommitDataset();. ; Definition at line 390 of file RPageStorage.hxx. ◆ ReservePage(). ROOT::Experimental::Internal::RPage ROOT::Experimental::Internal::RPageSink::ReservePage ; (; ColumnHandle_t ; columnHandle, . std::size_t ; nElements . ). virtual . Get a new, empty page for the given column that can be filled with up to nElements; nElements must be larger than zero. ; Reimplemented in ROOT::Experimental::Internal::RPageSinkBuf.; Definition at line 681 of file RPageStorage.cxx. ◆ SealPage() [1/2]. ROOT::Experimental::Internal::RPageStorage::RSealedPage ROOT::Experimental::Internal::RPageSink::SealPage ; (; const RPage & ; page, . const RColumnElementBase & ; element . ). protected . Helper for streaming a page. ; This is commonly used in derived, concrete page sinks. Note that if compressionSetting is 0 (uncompressed) and the page is mappable and not checksummed, the returned sealed page will point directly to the input page buffer. Otherwise, the sealed page references an internal buffer of fCompressor. Thus, the buffer pointed to by the RSealedPage should never be freed. Usage of this method requires construction of fCompressor. ; Definition at line 656 of file RPageStorage.cxx. ◆ SealPage() [2/2]. ROOT::Experimental::Internal::RPageStorage::RSealedPage ROOT::Experimental::Internal::RPageSink::SealPage ; (; const RSealPageConfig & ; config). static . Seal a page using the provided info. ; Definition at line 619 of file RPageStorage.cxx. ◆ StageCluster(). virtual RStagedCluster ROOT::Experimental::Internal::RPageSink::StageCluster ; (; NTupleSize_t ; nNewEntries). pure virtual . Stage the current cluster and create a new one for the following data. ; Returns the object that must be passed to CommitStagedClusters to logically append the staged cluster to the ntuple descriptor. ; Implemented in ROOT::Experimental::Internal::RPageSi",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html:1186,Testability,log,logically,1186,"Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; ROOT::Experimental::Internal::RPageSink Class ReferenceabstractNTuple-related classes. ; Abstract interface to write data into an ntuple. ; The page sink takes the list of columns and afterwards a series of page commits and cluster commits. The user is responsible to commit clusters at a consistent point, i.e. when all pages corresponding to data up to the given entry number are committed.; An object of this class may either be a wrapper (for example a RPageSinkBuf) or a ""persistent"" sink, inheriting from RPagePersistentSink. ; Definition at line 256 of file RPageStorage.hxx. Classes; struct  RSealPageConfig;  Parameters for the SealPage() method. More...;  ; class  RSinkGuard;  An RAII wrapper used to synchronize a page sink. See GetSinkGuard(). More...;  ; struct  RStagedCluster;  Cluster that was staged, but not yet logically appended to the RNTuple. More...;  . Public Types; using Callback_t = std::function< void(RPageSink &)>;  ;  Public Types inherited from ROOT::Experimental::Internal::RPageStorage; using ColumnHandle_t = RColumnHandle;  The column handle identifies a column with the current open page storage. ;  ; using SealedPageSequence_t = std::deque< RSealedPage >;  . Public Member Functions;  RPageSink (const RPageSink &)=delete;  ;  RPageSink (RPageSink &&)=default;  ;  RPageSink (std::string_view ntupleName, const RNTupleWriteOptions &options);  ;  ~RPageSink () override;  ; virtual std::uint64_t CommitCluster (NTupleSize_t nNewEntries);  Finalize the current cluster and create a new one for the following data. ;  ; virtual void CommitClusterGroup ()=0;  Write out the page locations (page list envelope) for all the committed clusters since the last call of CommitClusterGroup (or the beginning of writing). ;  ; void CommitDataset ();  Run the registered callbacks and fin",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html:2872,Testability,log,logically,2872,"he current cluster and create a new one for the following data. ;  ; virtual void CommitClusterGroup ()=0;  Write out the page locations (page list envelope) for all the committed clusters since the last call of CommitClusterGroup (or the beginning of writing). ;  ; void CommitDataset ();  Run the registered callbacks and finalize the current cluster and the entrire data set. ;  ; virtual void CommitPage (ColumnHandle_t columnHandle, const RPage &page)=0;  Write a page to the storage. The column must have been added before. ;  ; virtual void CommitSealedPage (DescriptorId_t physicalColumnId, const RPageStorage::RSealedPage &sealedPage)=0;  Write a preprocessed page to storage. The column must have been added before. ;  ; virtual void CommitSealedPageV (std::span< RPageStorage::RSealedPageGroup > ranges)=0;  Write a vector of preprocessed pages to storage. The corresponding columns must have been added before. ;  ; virtual void CommitStagedClusters (std::span< RStagedCluster > clusters)=0;  Commit staged clusters, logically appending them to the ntuple descriptor. ;  ; virtual void CommitSuppressedColumn (ColumnHandle_t columnHandle)=0;  Commits a suppressed column for the current cluster. ;  ; void DropColumn (ColumnHandle_t) final;  Unregisters a column. ;  ; virtual const RNTupleDescriptor & GetDescriptor () const =0;  Return the RNTupleDescriptor being constructed. ;  ; virtual RSinkGuard GetSinkGuard ();  ; EPageStorageType GetType () final;  Whether the concrete implementation is a sink or a source. ;  ; const RNTupleWriteOptions & GetWriteOptions () const;  Returns the sink's write options. ;  ; void Init (RNTupleModel &model);  Physically creates the storage container to hold the ntuple (e.g., a keys a TFile or an S3 bucket) Init() associates column handles to the columns referenced by the model. ;  ; bool IsInitialized () const;  ; RPageSink & operator= (const RPageSink &)=delete;  ; RPageSink & operator= (RPageSink &&)=default;  ; void RegisterOnCommitDatase",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html:10937,Testability,log,logically,10937,"::CommitSealedPage ; (; DescriptorId_t ; physicalColumnId, . const RPageStorage::RSealedPage & ; sealedPage . ). pure virtual . Write a preprocessed page to storage. The column must have been added before. ; Implemented in ROOT::Experimental::Internal::RPagePersistentSink, ROOT::Experimental::Internal::RPageSinkBuf, and ROOT::Experimental::Internal::RPageNullSink. ◆ CommitSealedPageV(). virtual void ROOT::Experimental::Internal::RPageSink::CommitSealedPageV ; (; std::span< RPageStorage::RSealedPageGroup > ; ranges). pure virtual . Write a vector of preprocessed pages to storage. The corresponding columns must have been added before. ; Implemented in ROOT::Experimental::Internal::RPageSinkBuf, ROOT::Experimental::Internal::RPagePersistentSink, and ROOT::Experimental::Internal::RPageNullSink. ◆ CommitStagedClusters(). virtual void ROOT::Experimental::Internal::RPageSink::CommitStagedClusters ; (; std::span< RStagedCluster > ; clusters). pure virtual . Commit staged clusters, logically appending them to the ntuple descriptor. ; Implemented in ROOT::Experimental::Internal::RPageSinkBuf, ROOT::Experimental::Internal::RPagePersistentSink, and ROOT::Experimental::Internal::RPageNullSink. ◆ CommitSuppressedColumn(). virtual void ROOT::Experimental::Internal::RPageSink::CommitSuppressedColumn ; (; ColumnHandle_t ; columnHandle). pure virtual . Commits a suppressed column for the current cluster. ; Can be called anytime before CommitCluster(). For any given column and cluster, there must be no calls to both CommitSuppressedColumn() and page commits. ; Implemented in ROOT::Experimental::Internal::RPageSinkBuf, ROOT::Experimental::Internal::RPagePersistentSink, and ROOT::Experimental::Internal::RPageNullSink. ◆ DropColumn(). void ROOT::Experimental::Internal::RPageSink::DropColumn ; (; ColumnHandle_t ; columnHandle). inlinefinalvirtual . Unregisters a column. ; A page source decreases the reference counter for the corresponding active column. For a page sink, dropping columns is",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html:16127,Testability,log,logically,16127,"ed in derived, concrete page sinks. Note that if compressionSetting is 0 (uncompressed) and the page is mappable and not checksummed, the returned sealed page will point directly to the input page buffer. Otherwise, the sealed page references an internal buffer of fCompressor. Thus, the buffer pointed to by the RSealedPage should never be freed. Usage of this method requires construction of fCompressor. ; Definition at line 656 of file RPageStorage.cxx. ◆ SealPage() [2/2]. ROOT::Experimental::Internal::RPageStorage::RSealedPage ROOT::Experimental::Internal::RPageSink::SealPage ; (; const RSealPageConfig & ; config). static . Seal a page using the provided info. ; Definition at line 619 of file RPageStorage.cxx. ◆ StageCluster(). virtual RStagedCluster ROOT::Experimental::Internal::RPageSink::StageCluster ; (; NTupleSize_t ; nNewEntries). pure virtual . Stage the current cluster and create a new one for the following data. ; Returns the object that must be passed to CommitStagedClusters to logically append the staged cluster to the ntuple descriptor. ; Implemented in ROOT::Experimental::Internal::RPageSinkBuf, ROOT::Experimental::Internal::RPagePersistentSink, and ROOT::Experimental::Internal::RPageNullSink. ◆ UpdateExtraTypeInfo(). virtual void ROOT::Experimental::Internal::RPageSink::UpdateExtraTypeInfo ; (; const RExtraTypeInfoDescriptor & ; extraTypeInfo). pure virtual . Adds an extra type information record to schema. ; The extra type information will be written to the extension header. The information in the record will be merged with the existing information, e.g. duplicate streamer info records will be removed. This method is called by the ""on commit dataset"" callback registered by specific fields (e.g., streamer field) and during merging. ; Implemented in ROOT::Experimental::Internal::RPageNullSink, ROOT::Experimental::Internal::RPageSinkBuf, and ROOT::Experimental::Internal::RPagePersistentSink. ◆ UpdateSchema(). virtual void ROOT::Experimental::Internal::R",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html:6662,Usability,simpl,simple,6662,"l void InitImpl (RNTupleModel &model)=0;  ; RSealedPage SealPage (const RPage &page, const RColumnElementBase &element);  Helper for streaming a page. ;  ;  Protected Member Functions inherited from ROOT::Experimental::Internal::RPageStorage; void WaitForAllTasks ();  . Protected Attributes; std::unique_ptr< RNTupleCompressor > fCompressor;  Helper to zip pages and header/footer; includes a 16MB (kMAXZIPBUF) zip buffer. ;  ; std::unique_ptr< RNTupleWriteOptions > fOptions;  ;  Protected Attributes inherited from ROOT::Experimental::Internal::RPageStorage; Detail::RNTupleMetrics fMetrics;  ; std::string fNTupleName;  ; std::unique_ptr< RPageAllocator > fPageAllocator;  For the time being, we will use the heap allocator for all sources and sinks. This may change in the future. ;  ; RTaskScheduler * fTaskScheduler = nullptr;  . Private Attributes; bool fIsInitialized = false;  Flag if sink was initialized. ;  ; std::vector< Callback_t > fOnDatasetCommitCallbacks;  ; std::vector< unsigned char > fSealPageBuffer;  Used as destination buffer in the simple SealPage overload. ;  ; RWritePageMemoryManager fWritePageMemoryManager;  Used in ReservePage to maintain the page buffer budget. ;  . Additional Inherited Members;  Static Public Attributes inherited from ROOT::Experimental::Internal::RPageStorage; static constexpr std::size_t kNBytesPageChecksum = sizeof(std::uint64_t);  The page checksum is a 64bit xxhash3. ;  . #include <ROOT/RPageStorage.hxx>. Inheritance diagram for ROOT::Experimental::Internal::RPageSink:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ Callback_t. using ROOT::Experimental::Internal::RPageSink::Callback_t = std::function<void(RPageSink &)>. Definition at line 258 of file RPageStorage.hxx. Constructor & Destructor Documentation. ◆ RPageSink() [1/3]. ROOT::Experimental::Internal::RPageSink::RPageSink ; (; std::string_view ; ntupleName, . const RNTupleWriteOptions & ; opt",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html:18828,Usability,simpl,simple,18828,"ed columns. ; Implemented in ROOT::Experimental::Internal::RPageNullSink, ROOT::Experimental::Internal::RPageSinkBuf, and ROOT::Experimental::Internal::RPagePersistentSink. Member Data Documentation. ◆ fCompressor. std::unique_ptr<RNTupleCompressor> ROOT::Experimental::Internal::RPageSink::fCompressor. protected . Helper to zip pages and header/footer; includes a 16MB (kMAXZIPBUF) zip buffer. ; There could be concrete page sinks that don't need a compressor. Therefore, and in order to stay consistent with the page source, we leave it up to the derived class whether or not the compressor gets constructed. ; Definition at line 280 of file RPageStorage.hxx. ◆ fIsInitialized. bool ROOT::Experimental::Internal::RPageSink::fIsInitialized = false. private . Flag if sink was initialized. ; Definition at line 291 of file RPageStorage.hxx. ◆ fOnDatasetCommitCallbacks. std::vector<Callback_t> ROOT::Experimental::Internal::RPageSink::fOnDatasetCommitCallbacks. private . Definition at line 292 of file RPageStorage.hxx. ◆ fOptions. std::unique_ptr<RNTupleWriteOptions> ROOT::Experimental::Internal::RPageSink::fOptions. protected . Definition at line 275 of file RPageStorage.hxx. ◆ fSealPageBuffer. std::vector<unsigned char> ROOT::Experimental::Internal::RPageSink::fSealPageBuffer. private . Used as destination buffer in the simple SealPage overload. ; Definition at line 293 of file RPageStorage.hxx. ◆ fWritePageMemoryManager. RWritePageMemoryManager ROOT::Experimental::Internal::RPageSink::fWritePageMemoryManager. private . Used in ReservePage to maintain the page buffer budget. ; Definition at line 296 of file RPageStorage.hxx. Libraries for ROOT::Experimental::Internal::RPageSink:. [legend]; The documentation for this class was generated from the following files:; tree/ntuple/v7/inc/ROOT/RPageStorage.hxx; tree/ntuple/v7/src/RPageStorage.cxx. ROOTExperimentalInternalRPageSink. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:14 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html:16820,Energy Efficiency,allocate,allocate,16820," line 353 of file RPageStorage.cxx. ◆ LoadPageImpl(). virtual RPageRef ROOT::Experimental::Internal::RPageSource::LoadPageImpl ; (; ColumnHandle_t ; columnHandle, . const RClusterInfo & ; clusterInfo, . ClusterSize_t::ValueType ; idxInCluster . ). protectedpure virtual . Implemented in ROOT::Experimental::Internal::RPageSourceDaos, ROOT::Experimental::Internal::RPageSourceFile, and ROOT::Experimental::Internal::RPageSourceFriends. ◆ LoadSealedPage(). virtual void ROOT::Experimental::Internal::RPageSource::LoadSealedPage ; (; DescriptorId_t ; physicalColumnId, . RClusterIndex ; clusterIndex, . RSealedPage & ; sealedPage . ). pure virtual . Read the packed and compressed bytes of a page into the memory buffer provided by sealedPage. ; The sealed page can be used subsequently in a call to RPageSink::CommitSealedPage. The fSize and fNElements member of the sealedPage parameters are always set. If sealedPage.fBuffer is nullptr, no data will be copied but the returned size information can be used by the caller to allocate a large enough buffer and call LoadSealedPage again. ; Implemented in ROOT::Experimental::Internal::RPageSourceFriends, ROOT::Experimental::Internal::RPageSourceDaos, and ROOT::Experimental::Internal::RPageSourceFile. ◆ LoadStructure(). void ROOT::Experimental::Internal::RPageSource::LoadStructure ; (; ). Loads header and footer without decompressing or deserializing them. ; This can be used to asynchronously open a file in the background. The method is idempotent and it is called as a first step in Attach(). Pages sources may or may not make use of splitting loading and processing meta-data. Therefore, LoadStructure() may do nothing and defer loading the meta-data to Attach(). ; Definition at line 188 of file RPageStorage.cxx. ◆ LoadStructureImpl(). virtual void ROOT::Experimental::Internal::RPageSource::LoadStructureImpl ; (; ). protectedpure virtual . Implemented in ROOT::Experimental::Internal::RPageSourceFriends, ROOT::Experimental::Internal::RPageSo",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html:20509,Energy Efficiency,schedul,scheduler,20509,"tal::Internal::RPageSource::UnsealPage ; (; const RSealedPage & ; sealedPage, . const RColumnElementBase & ; element, . DescriptorId_t ; physicalColumnId, . RPageAllocator & ; pageAlloc . ). static . Helper for unstreaming a page. ; This is commonly used in derived, concrete page sources. The implementation currently always makes a memory copy, even if the sealed page is uncompressed and in the final memory layout. The optimization of directly mapping pages is left to the concrete page source implementations. ; Definition at line 487 of file RPageStorage.cxx. ◆ UnzipCluster(). void ROOT::Experimental::Internal::RPageSource::UnzipCluster ; (; RCluster * ; cluster). Parallel decompression and unpacking of the pages in the given cluster. ; The unzipped pages are supposed to be preloaded in a page pool attached to the source. The method is triggered by the cluster pool's unzip thread. It is an optional optimization, the method can safely do nothing. In particular, the actual implementation will only run if a task scheduler is set. In practice, a task scheduler is set if implicit multi-threading is turned on. ; Definition at line 224 of file RPageStorage.cxx. ◆ UnzipClusterImpl(). void ROOT::Experimental::Internal::RPageSource::UnzipClusterImpl ; (; RCluster * ; cluster). protectedvirtual . Definition at line 230 of file RPageStorage.cxx. Member Data Documentation. ◆ fActivePhysicalColumns. RActivePhysicalColumns ROOT::Experimental::Internal::RPageSource::fActivePhysicalColumns. protected . The active columns are implicitly defined by the model fields or views. ; Definition at line 658 of file RPageStorage.hxx. ◆ fCounters. std::unique_ptr<RCounters> ROOT::Experimental::Internal::RPageSource::fCounters. protected . Definition at line 654 of file RPageStorage.hxx. ◆ fDescriptor. RNTupleDescriptor ROOT::Experimental::Internal::RPageSource::fDescriptor. private . Definition at line 603 of file RPageStorage.hxx. ◆ fDescriptorLock. std::shared_mutex ROOT::Experimental::Interna",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html:20547,Energy Efficiency,schedul,scheduler,20547,"onst RColumnElementBase & ; element, . DescriptorId_t ; physicalColumnId, . RPageAllocator & ; pageAlloc . ). static . Helper for unstreaming a page. ; This is commonly used in derived, concrete page sources. The implementation currently always makes a memory copy, even if the sealed page is uncompressed and in the final memory layout. The optimization of directly mapping pages is left to the concrete page source implementations. ; Definition at line 487 of file RPageStorage.cxx. ◆ UnzipCluster(). void ROOT::Experimental::Internal::RPageSource::UnzipCluster ; (; RCluster * ; cluster). Parallel decompression and unpacking of the pages in the given cluster. ; The unzipped pages are supposed to be preloaded in a page pool attached to the source. The method is triggered by the cluster pool's unzip thread. It is an optional optimization, the method can safely do nothing. In particular, the actual implementation will only run if a task scheduler is set. In practice, a task scheduler is set if implicit multi-threading is turned on. ; Definition at line 224 of file RPageStorage.cxx. ◆ UnzipClusterImpl(). void ROOT::Experimental::Internal::RPageSource::UnzipClusterImpl ; (; RCluster * ; cluster). protectedvirtual . Definition at line 230 of file RPageStorage.cxx. Member Data Documentation. ◆ fActivePhysicalColumns. RActivePhysicalColumns ROOT::Experimental::Internal::RPageSource::fActivePhysicalColumns. protected . The active columns are implicitly defined by the model fields or views. ; Definition at line 658 of file RPageStorage.hxx. ◆ fCounters. std::unique_ptr<RCounters> ROOT::Experimental::Internal::RPageSource::fCounters. protected . Definition at line 654 of file RPageStorage.hxx. ◆ fDescriptor. RNTupleDescriptor ROOT::Experimental::Internal::RPageSource::fDescriptor. private . Definition at line 603 of file RPageStorage.hxx. ◆ fDescriptorLock. std::shared_mutex ROOT::Experimental::Internal::RPageSource::fDescriptorLock. mutableprivate . Definition at line 604 of file ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html:441,Integrability,interface,interface,441,". ROOT: ROOT::Experimental::Internal::RPageSource Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; ROOT::Experimental::Internal::RPageSource Class ReferenceabstractNTuple-related classes. ; Abstract interface to read data from an ntuple. ; The page source is initialized with the columns of interest. Alias columns from projected fields are mapped to the corresponding physical columns. Pages from the columns of interest can then be mapped into memory. The page source also gives access to the ntuple's meta-data. ; Definition at line 549 of file RPageStorage.hxx. Classes; class  RActivePhysicalColumns;  Keeps track of the requested physical column IDs. More...;  ; struct  RClusterInfo;  Summarizes cluster-level information that are necessary to load a certain page. More...;  ; struct  RCounters;  Default I/O performance counters that get registered in fMetrics More...;  ; struct  REntryRange;  Used in SetEntryRange / GetEntryRange. More...;  ; class  RExclDescriptorGuard;  An RAII wrapper used for the writable access to RPageSource::fDescriptor. See GetSharedDescriptorGuard(). More...;  ; class  RSharedDescriptorGuard;  An RAII wrapper used for the read-only access to RPageSource::fDescriptor. See GetExclDescriptorGuard()`. More...;  . Public Member Functions;  RPageSource (const RPageSource &)=delete;  ;  RPageSource (RPageSource &&)=delete;  ;  RPageSource (std::string_view ntupleName, const RNTupleReadOptions &fOptions);  ;  ~RPageSource () override;  ; ColumnHandle_t AddColumn (DescriptorId_t fieldId, RColumn &column) override;  Register a new column. ;  ; void Attach ();  Open the physical storage container and deserialize header and footer. ;  ; std::unique_ptr< RPageSource > Clone () const;  Open the same storage multiple time",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html:1234,Integrability,wrap,wrapper,1234,"otected Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; ROOT::Experimental::Internal::RPageSource Class ReferenceabstractNTuple-related classes. ; Abstract interface to read data from an ntuple. ; The page source is initialized with the columns of interest. Alias columns from projected fields are mapped to the corresponding physical columns. Pages from the columns of interest can then be mapped into memory. The page source also gives access to the ntuple's meta-data. ; Definition at line 549 of file RPageStorage.hxx. Classes; class  RActivePhysicalColumns;  Keeps track of the requested physical column IDs. More...;  ; struct  RClusterInfo;  Summarizes cluster-level information that are necessary to load a certain page. More...;  ; struct  RCounters;  Default I/O performance counters that get registered in fMetrics More...;  ; struct  REntryRange;  Used in SetEntryRange / GetEntryRange. More...;  ; class  RExclDescriptorGuard;  An RAII wrapper used for the writable access to RPageSource::fDescriptor. See GetSharedDescriptorGuard(). More...;  ; class  RSharedDescriptorGuard;  An RAII wrapper used for the read-only access to RPageSource::fDescriptor. See GetExclDescriptorGuard()`. More...;  . Public Member Functions;  RPageSource (const RPageSource &)=delete;  ;  RPageSource (RPageSource &&)=delete;  ;  RPageSource (std::string_view ntupleName, const RNTupleReadOptions &fOptions);  ;  ~RPageSource () override;  ; ColumnHandle_t AddColumn (DescriptorId_t fieldId, RColumn &column) override;  Register a new column. ;  ; void Attach ();  Open the physical storage container and deserialize header and footer. ;  ; std::unique_ptr< RPageSource > Clone () const;  Open the same storage multiple time, e.g. ;  ; void DropColumn (ColumnHandle_t columnHandle) override;  Unregisters a column. ;  ; REntryRange GetEntryRange () const;  ; NTupleSize_t GetNElements (ColumnHandle_t columnHandle);  ; NTupleSize_t GetNEntries ();  ; const RNTupleRead",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html:1384,Integrability,wrap,wrapper,1384,"enceabstractNTuple-related classes. ; Abstract interface to read data from an ntuple. ; The page source is initialized with the columns of interest. Alias columns from projected fields are mapped to the corresponding physical columns. Pages from the columns of interest can then be mapped into memory. The page source also gives access to the ntuple's meta-data. ; Definition at line 549 of file RPageStorage.hxx. Classes; class  RActivePhysicalColumns;  Keeps track of the requested physical column IDs. More...;  ; struct  RClusterInfo;  Summarizes cluster-level information that are necessary to load a certain page. More...;  ; struct  RCounters;  Default I/O performance counters that get registered in fMetrics More...;  ; struct  REntryRange;  Used in SetEntryRange / GetEntryRange. More...;  ; class  RExclDescriptorGuard;  An RAII wrapper used for the writable access to RPageSource::fDescriptor. See GetSharedDescriptorGuard(). More...;  ; class  RSharedDescriptorGuard;  An RAII wrapper used for the read-only access to RPageSource::fDescriptor. See GetExclDescriptorGuard()`. More...;  . Public Member Functions;  RPageSource (const RPageSource &)=delete;  ;  RPageSource (RPageSource &&)=delete;  ;  RPageSource (std::string_view ntupleName, const RNTupleReadOptions &fOptions);  ;  ~RPageSource () override;  ; ColumnHandle_t AddColumn (DescriptorId_t fieldId, RColumn &column) override;  Register a new column. ;  ; void Attach ();  Open the physical storage container and deserialize header and footer. ;  ; std::unique_ptr< RPageSource > Clone () const;  Open the same storage multiple time, e.g. ;  ; void DropColumn (ColumnHandle_t columnHandle) override;  Unregisters a column. ;  ; REntryRange GetEntryRange () const;  ; NTupleSize_t GetNElements (ColumnHandle_t columnHandle);  ; NTupleSize_t GetNEntries ();  ; const RNTupleReadOptions & GetReadOptions () const;  ; const RSharedDescriptorGuard GetSharedDescriptorGuard () const;  Takes the read lock for the descriptor. ;  ; EP",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html:3850,Modifiability,inherit,inherited,3850,"r-relative indexes. ;  ; virtual void LoadSealedPage (DescriptorId_t physicalColumnId, RClusterIndex clusterIndex, RSealedPage &sealedPage)=0;  Read the packed and compressed bytes of a page into the memory buffer provided by sealedPage. ;  ; void LoadStructure ();  Loads header and footer without decompressing or deserializing them. ;  ; RPageSource & operator= (const RPageSource &)=delete;  ; RPageSource & operator= (RPageSource &&)=delete;  ; void SetEntryRange (const REntryRange &range);  Promise to only read from the given entry range. ;  ; RResult< RPage > UnsealPage (const RSealedPage &sealedPage, const RColumnElementBase &element, DescriptorId_t physicalColumnId);  ; void UnzipCluster (RCluster *cluster);  Parallel decompression and unpacking of the pages in the given cluster. ;  ;  Public Member Functions inherited from ROOT::Experimental::Internal::RPageStorage;  RPageStorage (const RPageStorage &other)=delete;  ;  RPageStorage (RPageStorage &&other)=default;  ;  RPageStorage (std::string_view name);  ; virtual ~RPageStorage ();  ; ColumnId_t GetColumnId (ColumnHandle_t columnHandle) const;  ; virtual Detail::RNTupleMetrics & GetMetrics ();  Returns the default metrics object. ;  ; const std::string & GetNTupleName () const;  Returns the NTuple name. ;  ; RPageStorage & operator= (const RPageStorage &other)=delete;  ; RPageStorage & operator= (RPageStorage &&other)=default;  ; void SetTaskScheduler (RTaskScheduler *taskScheduler);  . Static Public Member Functions; static std::unique_ptr< RPageSource > Create (std::string_view ntupleName, std::string_view location, const RNTupleReadOptions &options=RNTupleReadOptions());  Guess the concrete derived page source from the file name (location) ;  ; static RResult< RPage > UnsealPage (const RSealedPage &sealedPage, const RColumnElementBase &element, DescriptorId_t physicalColumnId, RPageAllocator &pageAlloc);  Helper for unstreaming a page. ;  . Protected Member Functions; virtual RNTupleDescriptor AttachImpl (",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html:6039,Modifiability,inherit,inherited,6039,"ctureImpl() has been called before AttachImpl() is called ;  ; virtual std::unique_ptr< RPageSource > CloneImpl () const =0;  Returns a new, unattached page source for the same data set. ;  ; void EnableDefaultMetrics (const std::string &prefix);  Enables the default set of metrics provided by RPageSource. ;  ; RExclDescriptorGuard GetExclDescriptorGuard ();  Note that the underlying lock is not recursive. See GetSharedDescriptorGuard() for further information. ;  ; virtual RPageRef LoadPageImpl (ColumnHandle_t columnHandle, const RClusterInfo &clusterInfo, ClusterSize_t::ValueType idxInCluster)=0;  ; virtual void LoadStructureImpl ()=0;  ; void PrepareLoadCluster (const RCluster::RKey &clusterKey, ROnDiskPageMap &pageZeroMap, std::function< void(DescriptorId_t, NTupleSize_t, const RClusterDescriptor::RPageRange::RPageInfo &)> perPageFunc);  Prepare a page range read for the column set in clusterKey. ;  ; virtual void UnzipClusterImpl (RCluster *cluster);  ;  Protected Member Functions inherited from ROOT::Experimental::Internal::RPageStorage; void WaitForAllTasks ();  . Protected Attributes; RActivePhysicalColumns fActivePhysicalColumns;  The active columns are implicitly defined by the model fields or views. ;  ; std::unique_ptr< RCounters > fCounters;  ; RNTupleReadOptions fOptions;  ; RPagePool fPagePool;  Pages that are unzipped with IMT are staged into the page pool. ;  ;  Protected Attributes inherited from ROOT::Experimental::Internal::RPageStorage; Detail::RNTupleMetrics fMetrics;  ; std::string fNTupleName;  ; std::unique_ptr< RPageAllocator > fPageAllocator;  For the time being, we will use the heap allocator for all sources and sinks. This may change in the future. ;  ; RTaskScheduler * fTaskScheduler = nullptr;  . Private Attributes; RNTupleDescriptor fDescriptor;  ; std::shared_mutex fDescriptorLock;  ; REntryRange fEntryRange;  Used by the cluster pool to prevent reading beyond the given range. ;  ; bool fHasStructure = false;  Set to true once LoadSt",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html:6461,Modifiability,inherit,inherited,6461,"st RClusterInfo &clusterInfo, ClusterSize_t::ValueType idxInCluster)=0;  ; virtual void LoadStructureImpl ()=0;  ; void PrepareLoadCluster (const RCluster::RKey &clusterKey, ROnDiskPageMap &pageZeroMap, std::function< void(DescriptorId_t, NTupleSize_t, const RClusterDescriptor::RPageRange::RPageInfo &)> perPageFunc);  Prepare a page range read for the column set in clusterKey. ;  ; virtual void UnzipClusterImpl (RCluster *cluster);  ;  Protected Member Functions inherited from ROOT::Experimental::Internal::RPageStorage; void WaitForAllTasks ();  . Protected Attributes; RActivePhysicalColumns fActivePhysicalColumns;  The active columns are implicitly defined by the model fields or views. ;  ; std::unique_ptr< RCounters > fCounters;  ; RNTupleReadOptions fOptions;  ; RPagePool fPagePool;  Pages that are unzipped with IMT are staged into the page pool. ;  ;  Protected Attributes inherited from ROOT::Experimental::Internal::RPageStorage; Detail::RNTupleMetrics fMetrics;  ; std::string fNTupleName;  ; std::unique_ptr< RPageAllocator > fPageAllocator;  For the time being, we will use the heap allocator for all sources and sinks. This may change in the future. ;  ; RTaskScheduler * fTaskScheduler = nullptr;  . Private Attributes; RNTupleDescriptor fDescriptor;  ; std::shared_mutex fDescriptorLock;  ; REntryRange fEntryRange;  Used by the cluster pool to prevent reading beyond the given range. ;  ; bool fHasStructure = false;  Set to true once LoadStructure() is called. ;  ; bool fIsAttached = false;  Set to true once Attach() is called. ;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::Internal::RPageStorage; using ColumnHandle_t = RColumnHandle;  The column handle identifies a column with the current open page storage. ;  ; using SealedPageSequence_t = std::deque< RSealedPage >;  ;  Static Public Attributes inherited from ROOT::Experimental::Internal::RPageStorage; static constexpr std::size_t kNBytesPageChecksum = sizeof(std::uint64_t);  ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html:7177,Modifiability,inherit,inherited,7177," the model fields or views. ;  ; std::unique_ptr< RCounters > fCounters;  ; RNTupleReadOptions fOptions;  ; RPagePool fPagePool;  Pages that are unzipped with IMT are staged into the page pool. ;  ;  Protected Attributes inherited from ROOT::Experimental::Internal::RPageStorage; Detail::RNTupleMetrics fMetrics;  ; std::string fNTupleName;  ; std::unique_ptr< RPageAllocator > fPageAllocator;  For the time being, we will use the heap allocator for all sources and sinks. This may change in the future. ;  ; RTaskScheduler * fTaskScheduler = nullptr;  . Private Attributes; RNTupleDescriptor fDescriptor;  ; std::shared_mutex fDescriptorLock;  ; REntryRange fEntryRange;  Used by the cluster pool to prevent reading beyond the given range. ;  ; bool fHasStructure = false;  Set to true once LoadStructure() is called. ;  ; bool fIsAttached = false;  Set to true once Attach() is called. ;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::Internal::RPageStorage; using ColumnHandle_t = RColumnHandle;  The column handle identifies a column with the current open page storage. ;  ; using SealedPageSequence_t = std::deque< RSealedPage >;  ;  Static Public Attributes inherited from ROOT::Experimental::Internal::RPageStorage; static constexpr std::size_t kNBytesPageChecksum = sizeof(std::uint64_t);  The page checksum is a 64bit xxhash3. ;  . #include <ROOT/RPageStorage.hxx>. Inheritance diagram for ROOT::Experimental::Internal::RPageSource:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RPageSource() [1/3]. ROOT::Experimental::Internal::RPageSource::RPageSource ; (; std::string_view ; ntupleName, . const RNTupleReadOptions & ; fOptions . ). Definition at line 137 of file RPageStorage.cxx. ◆ RPageSource() [2/3]. ROOT::Experimental::Internal::RPageSource::RPageSource ; (; const RPageSource & ; ). delete . ◆ RPageSource() [3/3]. ROOT::Experimental::Internal::RPageSou",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html:7439,Modifiability,inherit,inherited,7439,"T::Experimental::Internal::RPageStorage; Detail::RNTupleMetrics fMetrics;  ; std::string fNTupleName;  ; std::unique_ptr< RPageAllocator > fPageAllocator;  For the time being, we will use the heap allocator for all sources and sinks. This may change in the future. ;  ; RTaskScheduler * fTaskScheduler = nullptr;  . Private Attributes; RNTupleDescriptor fDescriptor;  ; std::shared_mutex fDescriptorLock;  ; REntryRange fEntryRange;  Used by the cluster pool to prevent reading beyond the given range. ;  ; bool fHasStructure = false;  Set to true once LoadStructure() is called. ;  ; bool fIsAttached = false;  Set to true once Attach() is called. ;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::Internal::RPageStorage; using ColumnHandle_t = RColumnHandle;  The column handle identifies a column with the current open page storage. ;  ; using SealedPageSequence_t = std::deque< RSealedPage >;  ;  Static Public Attributes inherited from ROOT::Experimental::Internal::RPageStorage; static constexpr std::size_t kNBytesPageChecksum = sizeof(std::uint64_t);  The page checksum is a 64bit xxhash3. ;  . #include <ROOT/RPageStorage.hxx>. Inheritance diagram for ROOT::Experimental::Internal::RPageSource:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RPageSource() [1/3]. ROOT::Experimental::Internal::RPageSource::RPageSource ; (; std::string_view ; ntupleName, . const RNTupleReadOptions & ; fOptions . ). Definition at line 137 of file RPageStorage.cxx. ◆ RPageSource() [2/3]. ROOT::Experimental::Internal::RPageSource::RPageSource ; (; const RPageSource & ; ). delete . ◆ RPageSource() [3/3]. ROOT::Experimental::Internal::RPageSource::RPageSource ; (; RPageSource && ; ). delete . ◆ ~RPageSource(). ROOT::Experimental::Internal::RPageSource::~RPageSource ; (; ). override . Definition at line 142 of file RPageStorage.cxx. Member Function Documentation. ◆ AddColumn(). ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html:993,Performance,load,load,993,". ROOT: ROOT::Experimental::Internal::RPageSource Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; ROOT::Experimental::Internal::RPageSource Class ReferenceabstractNTuple-related classes. ; Abstract interface to read data from an ntuple. ; The page source is initialized with the columns of interest. Alias columns from projected fields are mapped to the corresponding physical columns. Pages from the columns of interest can then be mapped into memory. The page source also gives access to the ntuple's meta-data. ; Definition at line 549 of file RPageStorage.hxx. Classes; class  RActivePhysicalColumns;  Keeps track of the requested physical column IDs. More...;  ; struct  RClusterInfo;  Summarizes cluster-level information that are necessary to load a certain page. More...;  ; struct  RCounters;  Default I/O performance counters that get registered in fMetrics More...;  ; struct  REntryRange;  Used in SetEntryRange / GetEntryRange. More...;  ; class  RExclDescriptorGuard;  An RAII wrapper used for the writable access to RPageSource::fDescriptor. See GetSharedDescriptorGuard(). More...;  ; class  RSharedDescriptorGuard;  An RAII wrapper used for the read-only access to RPageSource::fDescriptor. See GetExclDescriptorGuard()`. More...;  . Public Member Functions;  RPageSource (const RPageSource &)=delete;  ;  RPageSource (RPageSource &&)=delete;  ;  RPageSource (std::string_view ntupleName, const RNTupleReadOptions &fOptions);  ;  ~RPageSource () override;  ; ColumnHandle_t AddColumn (DescriptorId_t fieldId, RColumn &column) override;  Register a new column. ;  ; void Attach ();  Open the physical storage container and deserialize header and footer. ;  ; std::unique_ptr< RPageSource > Clone () const;  Open the same storage multiple time",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html:1058,Performance,perform,performance,1058," ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; ROOT::Experimental::Internal::RPageSource Class ReferenceabstractNTuple-related classes. ; Abstract interface to read data from an ntuple. ; The page source is initialized with the columns of interest. Alias columns from projected fields are mapped to the corresponding physical columns. Pages from the columns of interest can then be mapped into memory. The page source also gives access to the ntuple's meta-data. ; Definition at line 549 of file RPageStorage.hxx. Classes; class  RActivePhysicalColumns;  Keeps track of the requested physical column IDs. More...;  ; struct  RClusterInfo;  Summarizes cluster-level information that are necessary to load a certain page. More...;  ; struct  RCounters;  Default I/O performance counters that get registered in fMetrics More...;  ; struct  REntryRange;  Used in SetEntryRange / GetEntryRange. More...;  ; class  RExclDescriptorGuard;  An RAII wrapper used for the writable access to RPageSource::fDescriptor. See GetSharedDescriptorGuard(). More...;  ; class  RSharedDescriptorGuard;  An RAII wrapper used for the read-only access to RPageSource::fDescriptor. See GetExclDescriptorGuard()`. More...;  . Public Member Functions;  RPageSource (const RPageSource &)=delete;  ;  RPageSource (RPageSource &&)=delete;  ;  RPageSource (std::string_view ntupleName, const RNTupleReadOptions &fOptions);  ;  ~RPageSource () override;  ; ColumnHandle_t AddColumn (DescriptorId_t fieldId, RColumn &column) override;  Register a new column. ;  ; void Attach ();  Open the physical storage container and deserialize header and footer. ;  ; std::unique_ptr< RPageSource > Clone () const;  Open the same storage multiple time, e.g. ;  ; void DropColumn (ColumnHandle_t columnHandle) override; ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html:13066,Performance,concurren,concurrently,13066,"uard ROOT::Experimental::Internal::RPageSource::GetExclDescriptorGuard ; (; ). inlineprotected . Note that the underlying lock is not recursive. See GetSharedDescriptorGuard() for further information. ; Definition at line 690 of file RPageStorage.hxx. ◆ GetNElements(). ROOT::Experimental::NTupleSize_t ROOT::Experimental::Internal::RPageSource::GetNElements ; (; ColumnHandle_t ; columnHandle). Definition at line 219 of file RPageStorage.cxx. ◆ GetNEntries(). ROOT::Experimental::NTupleSize_t ROOT::Experimental::Internal::RPageSource::GetNEntries ; (; ). Definition at line 214 of file RPageStorage.cxx. ◆ GetReadOptions(). const RNTupleReadOptions & ROOT::Experimental::Internal::RPageSource::GetReadOptions ; (; ); const. inline . Definition at line 714 of file RPageStorage.hxx. ◆ GetSharedDescriptorGuard(). const RSharedDescriptorGuard ROOT::Experimental::Internal::RPageSource::GetSharedDescriptorGuard ; (; ); const. inline . Takes the read lock for the descriptor. ; Multiple threads can take the lock concurrently. The underlying std::shared_mutex, however, is neither read nor write recursive: within one thread, only one lock (shared or exclusive) must be acquired at the same time. This requires special care in sections protected by GetSharedDescriptorGuard() and GetExclDescriptorGuard() especially to avoid that the locks are acquired indirectly (e.g. by a call to GetNEntries()). As a general guideline, no other method of the page source should be called (directly or indirectly) in a guarded section. ; Definition at line 722 of file RPageStorage.hxx. ◆ GetType(). EPageStorageType ROOT::Experimental::Internal::RPageSource::GetType ; (; ). inlinefinalvirtual . Whether the concrete implementation is a sink or a source. ; Implements ROOT::Experimental::Internal::RPageStorage.; Definition at line 713 of file RPageStorage.hxx. ◆ LoadClusters(). virtual std::vector< std::unique_ptr< RCluster > > ROOT::Experimental::Internal::RPageSource::LoadClusters ; (; std::span< RCluster::R",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html:14234,Performance,load,load,14234,"s requires special care in sections protected by GetSharedDescriptorGuard() and GetExclDescriptorGuard() especially to avoid that the locks are acquired indirectly (e.g. by a call to GetNEntries()). As a general guideline, no other method of the page source should be called (directly or indirectly) in a guarded section. ; Definition at line 722 of file RPageStorage.hxx. ◆ GetType(). EPageStorageType ROOT::Experimental::Internal::RPageSource::GetType ; (; ). inlinefinalvirtual . Whether the concrete implementation is a sink or a source. ; Implements ROOT::Experimental::Internal::RPageStorage.; Definition at line 713 of file RPageStorage.hxx. ◆ LoadClusters(). virtual std::vector< std::unique_ptr< RCluster > > ROOT::Experimental::Internal::RPageSource::LoadClusters ; (; std::span< RCluster::RKey > ; clusterKeys). pure virtual . Populates all the pages of the given cluster ids and columns; it is possible that some columns do not contain any pages. ; The page source may load more columns than the minimal necessary set from columns. To indicate which columns have been loaded, LoadClusters()must mark them withSetColumnAvailable(). That includes the ones from thecolumnsthat don't have pages; otherwise subsequent requests for the cluster would assume an incomplete cluster and trigger loading again. LoadClusters()` is typically called from the I/O thread of a cluster pool, i.e. the method runs concurrently to other methods of the page source. ; Implemented in ROOT::Experimental::Internal::RPageSourceFriends, ROOT::Experimental::Internal::RPageSourceDaos, and ROOT::Experimental::Internal::RPageSourceFile. ◆ LoadPage() [1/2]. ROOT::Experimental::Internal::RPageRef ROOT::Experimental::Internal::RPageSource::LoadPage ; (; ColumnHandle_t ; columnHandle, . NTupleSize_t ; globalIndex . ). virtual . Allocates and fills a page that contains the index-th element. ; The default implementation searches the page and calls LoadPageImpl(). Returns a default-constructed RPage for suppressed ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html:14333,Performance,load,loaded,14333,"iptorGuard() especially to avoid that the locks are acquired indirectly (e.g. by a call to GetNEntries()). As a general guideline, no other method of the page source should be called (directly or indirectly) in a guarded section. ; Definition at line 722 of file RPageStorage.hxx. ◆ GetType(). EPageStorageType ROOT::Experimental::Internal::RPageSource::GetType ; (; ). inlinefinalvirtual . Whether the concrete implementation is a sink or a source. ; Implements ROOT::Experimental::Internal::RPageStorage.; Definition at line 713 of file RPageStorage.hxx. ◆ LoadClusters(). virtual std::vector< std::unique_ptr< RCluster > > ROOT::Experimental::Internal::RPageSource::LoadClusters ; (; std::span< RCluster::RKey > ; clusterKeys). pure virtual . Populates all the pages of the given cluster ids and columns; it is possible that some columns do not contain any pages. ; The page source may load more columns than the minimal necessary set from columns. To indicate which columns have been loaded, LoadClusters()must mark them withSetColumnAvailable(). That includes the ones from thecolumnsthat don't have pages; otherwise subsequent requests for the cluster would assume an incomplete cluster and trigger loading again. LoadClusters()` is typically called from the I/O thread of a cluster pool, i.e. the method runs concurrently to other methods of the page source. ; Implemented in ROOT::Experimental::Internal::RPageSourceFriends, ROOT::Experimental::Internal::RPageSourceDaos, and ROOT::Experimental::Internal::RPageSourceFile. ◆ LoadPage() [1/2]. ROOT::Experimental::Internal::RPageRef ROOT::Experimental::Internal::RPageSource::LoadPage ; (; ColumnHandle_t ; columnHandle, . NTupleSize_t ; globalIndex . ). virtual . Allocates and fills a page that contains the index-th element. ; The default implementation searches the page and calls LoadPageImpl(). Returns a default-constructed RPage for suppressed columns. ; Reimplemented in ROOT::Experimental::Internal::RPageSourceFriends.; Definition at",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html:14550,Performance,load,loading,14550,"other method of the page source should be called (directly or indirectly) in a guarded section. ; Definition at line 722 of file RPageStorage.hxx. ◆ GetType(). EPageStorageType ROOT::Experimental::Internal::RPageSource::GetType ; (; ). inlinefinalvirtual . Whether the concrete implementation is a sink or a source. ; Implements ROOT::Experimental::Internal::RPageStorage.; Definition at line 713 of file RPageStorage.hxx. ◆ LoadClusters(). virtual std::vector< std::unique_ptr< RCluster > > ROOT::Experimental::Internal::RPageSource::LoadClusters ; (; std::span< RCluster::RKey > ; clusterKeys). pure virtual . Populates all the pages of the given cluster ids and columns; it is possible that some columns do not contain any pages. ; The page source may load more columns than the minimal necessary set from columns. To indicate which columns have been loaded, LoadClusters()must mark them withSetColumnAvailable(). That includes the ones from thecolumnsthat don't have pages; otherwise subsequent requests for the cluster would assume an incomplete cluster and trigger loading again. LoadClusters()` is typically called from the I/O thread of a cluster pool, i.e. the method runs concurrently to other methods of the page source. ; Implemented in ROOT::Experimental::Internal::RPageSourceFriends, ROOT::Experimental::Internal::RPageSourceDaos, and ROOT::Experimental::Internal::RPageSourceFile. ◆ LoadPage() [1/2]. ROOT::Experimental::Internal::RPageRef ROOT::Experimental::Internal::RPageSource::LoadPage ; (; ColumnHandle_t ; columnHandle, . NTupleSize_t ; globalIndex . ). virtual . Allocates and fills a page that contains the index-th element. ; The default implementation searches the page and calls LoadPageImpl(). Returns a default-constructed RPage for suppressed columns. ; Reimplemented in ROOT::Experimental::Internal::RPageSourceFriends.; Definition at line 319 of file RPageStorage.cxx. ◆ LoadPage() [2/2]. ROOT::Experimental::Internal::RPageRef ROOT::Experimental::Internal::RPageSour",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html:14661,Performance,concurren,concurrently,14661,"nternal::RPageSource::GetType ; (; ). inlinefinalvirtual . Whether the concrete implementation is a sink or a source. ; Implements ROOT::Experimental::Internal::RPageStorage.; Definition at line 713 of file RPageStorage.hxx. ◆ LoadClusters(). virtual std::vector< std::unique_ptr< RCluster > > ROOT::Experimental::Internal::RPageSource::LoadClusters ; (; std::span< RCluster::RKey > ; clusterKeys). pure virtual . Populates all the pages of the given cluster ids and columns; it is possible that some columns do not contain any pages. ; The page source may load more columns than the minimal necessary set from columns. To indicate which columns have been loaded, LoadClusters()must mark them withSetColumnAvailable(). That includes the ones from thecolumnsthat don't have pages; otherwise subsequent requests for the cluster would assume an incomplete cluster and trigger loading again. LoadClusters()` is typically called from the I/O thread of a cluster pool, i.e. the method runs concurrently to other methods of the page source. ; Implemented in ROOT::Experimental::Internal::RPageSourceFriends, ROOT::Experimental::Internal::RPageSourceDaos, and ROOT::Experimental::Internal::RPageSourceFile. ◆ LoadPage() [1/2]. ROOT::Experimental::Internal::RPageRef ROOT::Experimental::Internal::RPageSource::LoadPage ; (; ColumnHandle_t ; columnHandle, . NTupleSize_t ; globalIndex . ). virtual . Allocates and fills a page that contains the index-th element. ; The default implementation searches the page and calls LoadPageImpl(). Returns a default-constructed RPage for suppressed columns. ; Reimplemented in ROOT::Experimental::Internal::RPageSourceFriends.; Definition at line 319 of file RPageStorage.cxx. ◆ LoadPage() [2/2]. ROOT::Experimental::Internal::RPageRef ROOT::Experimental::Internal::RPageSource::LoadPage ; (; ColumnHandle_t ; columnHandle, . RClusterIndex ; clusterIndex . ). virtual . Another version of LoadPage that allows to specify cluster-relative indexes. ; Returns a default-const",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html:17395,Performance,load,loading,17395,"terIndex, . RSealedPage & ; sealedPage . ). pure virtual . Read the packed and compressed bytes of a page into the memory buffer provided by sealedPage. ; The sealed page can be used subsequently in a call to RPageSink::CommitSealedPage. The fSize and fNElements member of the sealedPage parameters are always set. If sealedPage.fBuffer is nullptr, no data will be copied but the returned size information can be used by the caller to allocate a large enough buffer and call LoadSealedPage again. ; Implemented in ROOT::Experimental::Internal::RPageSourceFriends, ROOT::Experimental::Internal::RPageSourceDaos, and ROOT::Experimental::Internal::RPageSourceFile. ◆ LoadStructure(). void ROOT::Experimental::Internal::RPageSource::LoadStructure ; (; ). Loads header and footer without decompressing or deserializing them. ; This can be used to asynchronously open a file in the background. The method is idempotent and it is called as a first step in Attach(). Pages sources may or may not make use of splitting loading and processing meta-data. Therefore, LoadStructure() may do nothing and defer loading the meta-data to Attach(). ; Definition at line 188 of file RPageStorage.cxx. ◆ LoadStructureImpl(). virtual void ROOT::Experimental::Internal::RPageSource::LoadStructureImpl ; (; ). protectedpure virtual . Implemented in ROOT::Experimental::Internal::RPageSourceFriends, ROOT::Experimental::Internal::RPageSourceDaos, and ROOT::Experimental::Internal::RPageSourceFile. ◆ operator=() [1/2]. RPageSource & ROOT::Experimental::Internal::RPageSource::operator= ; (; const RPageSource & ; ). delete . ◆ operator=() [2/2]. RPageSource & ROOT::Experimental::Internal::RPageSource::operator= ; (; RPageSource && ; ). delete . ◆ PrepareLoadCluster(). void ROOT::Experimental::Internal::RPageSource::PrepareLoadCluster ; (; const RCluster::RKey & ; clusterKey, . ROnDiskPageMap & ; pageZeroMap, . std::function< void(DescriptorId_t, NTupleSize_t, const RClusterDescriptor::RPageRange::RPageInfo &)> ; perPa",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html:17481,Performance,load,loading,17481,"sed bytes of a page into the memory buffer provided by sealedPage. ; The sealed page can be used subsequently in a call to RPageSink::CommitSealedPage. The fSize and fNElements member of the sealedPage parameters are always set. If sealedPage.fBuffer is nullptr, no data will be copied but the returned size information can be used by the caller to allocate a large enough buffer and call LoadSealedPage again. ; Implemented in ROOT::Experimental::Internal::RPageSourceFriends, ROOT::Experimental::Internal::RPageSourceDaos, and ROOT::Experimental::Internal::RPageSourceFile. ◆ LoadStructure(). void ROOT::Experimental::Internal::RPageSource::LoadStructure ; (; ). Loads header and footer without decompressing or deserializing them. ; This can be used to asynchronously open a file in the background. The method is idempotent and it is called as a first step in Attach(). Pages sources may or may not make use of splitting loading and processing meta-data. Therefore, LoadStructure() may do nothing and defer loading the meta-data to Attach(). ; Definition at line 188 of file RPageStorage.cxx. ◆ LoadStructureImpl(). virtual void ROOT::Experimental::Internal::RPageSource::LoadStructureImpl ; (; ). protectedpure virtual . Implemented in ROOT::Experimental::Internal::RPageSourceFriends, ROOT::Experimental::Internal::RPageSourceDaos, and ROOT::Experimental::Internal::RPageSourceFile. ◆ operator=() [1/2]. RPageSource & ROOT::Experimental::Internal::RPageSource::operator= ; (; const RPageSource & ; ). delete . ◆ operator=() [2/2]. RPageSource & ROOT::Experimental::Internal::RPageSource::operator= ; (; RPageSource && ; ). delete . ◆ PrepareLoadCluster(). void ROOT::Experimental::Internal::RPageSource::PrepareLoadCluster ; (; const RCluster::RKey & ; clusterKey, . ROnDiskPageMap & ; pageZeroMap, . std::function< void(DescriptorId_t, NTupleSize_t, const RClusterDescriptor::RPageRange::RPageInfo &)> ; perPageFunc . ). protected . Prepare a page range read for the column set in clusterKey. ; ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html:19907,Performance,optimiz,optimization,19907," the given range. The range needs to be within [0, GetNEntries()). ; Definition at line 180 of file RPageStorage.cxx. ◆ UnsealPage() [1/2]. ROOT::Experimental::RResult< ROOT::Experimental::Internal::RPage > ROOT::Experimental::Internal::RPageSource::UnsealPage ; (; const RSealedPage & ; sealedPage, . const RColumnElementBase & ; element, . DescriptorId_t ; physicalColumnId . ). Definition at line 480 of file RPageStorage.cxx. ◆ UnsealPage() [2/2]. ROOT::Experimental::RResult< ROOT::Experimental::Internal::RPage > ROOT::Experimental::Internal::RPageSource::UnsealPage ; (; const RSealedPage & ; sealedPage, . const RColumnElementBase & ; element, . DescriptorId_t ; physicalColumnId, . RPageAllocator & ; pageAlloc . ). static . Helper for unstreaming a page. ; This is commonly used in derived, concrete page sources. The implementation currently always makes a memory copy, even if the sealed page is uncompressed and in the final memory layout. The optimization of directly mapping pages is left to the concrete page source implementations. ; Definition at line 487 of file RPageStorage.cxx. ◆ UnzipCluster(). void ROOT::Experimental::Internal::RPageSource::UnzipCluster ; (; RCluster * ; cluster). Parallel decompression and unpacking of the pages in the given cluster. ; The unzipped pages are supposed to be preloaded in a page pool attached to the source. The method is triggered by the cluster pool's unzip thread. It is an optional optimization, the method can safely do nothing. In particular, the actual implementation will only run if a task scheduler is set. In practice, a task scheduler is set if implicit multi-threading is turned on. ; Definition at line 224 of file RPageStorage.cxx. ◆ UnzipClusterImpl(). void ROOT::Experimental::Internal::RPageSource::UnzipClusterImpl ; (; RCluster * ; cluster). protectedvirtual . Definition at line 230 of file RPageStorage.cxx. Member Data Documentation. ◆ fActivePhysicalColumns. RActivePhysicalColumns ROOT::Experimental::Internal::RPag",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html:20396,Performance,optimiz,optimization,20396,"perimental::RResult< ROOT::Experimental::Internal::RPage > ROOT::Experimental::Internal::RPageSource::UnsealPage ; (; const RSealedPage & ; sealedPage, . const RColumnElementBase & ; element, . DescriptorId_t ; physicalColumnId, . RPageAllocator & ; pageAlloc . ). static . Helper for unstreaming a page. ; This is commonly used in derived, concrete page sources. The implementation currently always makes a memory copy, even if the sealed page is uncompressed and in the final memory layout. The optimization of directly mapping pages is left to the concrete page source implementations. ; Definition at line 487 of file RPageStorage.cxx. ◆ UnzipCluster(). void ROOT::Experimental::Internal::RPageSource::UnzipCluster ; (; RCluster * ; cluster). Parallel decompression and unpacking of the pages in the given cluster. ; The unzipped pages are supposed to be preloaded in a page pool attached to the source. The method is triggered by the cluster pool's unzip thread. It is an optional optimization, the method can safely do nothing. In particular, the actual implementation will only run if a task scheduler is set. In practice, a task scheduler is set if implicit multi-threading is turned on. ; Definition at line 224 of file RPageStorage.cxx. ◆ UnzipClusterImpl(). void ROOT::Experimental::Internal::RPageSource::UnzipClusterImpl ; (; RCluster * ; cluster). protectedvirtual . Definition at line 230 of file RPageStorage.cxx. Member Data Documentation. ◆ fActivePhysicalColumns. RActivePhysicalColumns ROOT::Experimental::Internal::RPageSource::fActivePhysicalColumns. protected . The active columns are implicitly defined by the model fields or views. ; Definition at line 658 of file RPageStorage.hxx. ◆ fCounters. std::unique_ptr<RCounters> ROOT::Experimental::Internal::RPageSource::fCounters. protected . Definition at line 654 of file RPageStorage.hxx. ◆ fDescriptor. RNTupleDescriptor ROOT::Experimental::Internal::RPageSource::fDescriptor. private . Definition at line 603 of file RPageSt",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html:20576,Performance,multi-thread,multi-threading,20576,"onst RColumnElementBase & ; element, . DescriptorId_t ; physicalColumnId, . RPageAllocator & ; pageAlloc . ). static . Helper for unstreaming a page. ; This is commonly used in derived, concrete page sources. The implementation currently always makes a memory copy, even if the sealed page is uncompressed and in the final memory layout. The optimization of directly mapping pages is left to the concrete page source implementations. ; Definition at line 487 of file RPageStorage.cxx. ◆ UnzipCluster(). void ROOT::Experimental::Internal::RPageSource::UnzipCluster ; (; RCluster * ; cluster). Parallel decompression and unpacking of the pages in the given cluster. ; The unzipped pages are supposed to be preloaded in a page pool attached to the source. The method is triggered by the cluster pool's unzip thread. It is an optional optimization, the method can safely do nothing. In particular, the actual implementation will only run if a task scheduler is set. In practice, a task scheduler is set if implicit multi-threading is turned on. ; Definition at line 224 of file RPageStorage.cxx. ◆ UnzipClusterImpl(). void ROOT::Experimental::Internal::RPageSource::UnzipClusterImpl ; (; RCluster * ; cluster). protectedvirtual . Definition at line 230 of file RPageStorage.cxx. Member Data Documentation. ◆ fActivePhysicalColumns. RActivePhysicalColumns ROOT::Experimental::Internal::RPageSource::fActivePhysicalColumns. protected . The active columns are implicitly defined by the model fields or views. ; Definition at line 658 of file RPageStorage.hxx. ◆ fCounters. std::unique_ptr<RCounters> ROOT::Experimental::Internal::RPageSource::fCounters. protected . Definition at line 654 of file RPageStorage.hxx. ◆ fDescriptor. RNTupleDescriptor ROOT::Experimental::Internal::RPageSource::fDescriptor. private . Definition at line 603 of file RPageStorage.hxx. ◆ fDescriptorLock. std::shared_mutex ROOT::Experimental::Internal::RPageSource::fDescriptorLock. mutableprivate . Definition at line 604 of file ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html:13372,Safety,avoid,avoid,13372,"imental::NTupleSize_t ROOT::Experimental::Internal::RPageSource::GetNElements ; (; ColumnHandle_t ; columnHandle). Definition at line 219 of file RPageStorage.cxx. ◆ GetNEntries(). ROOT::Experimental::NTupleSize_t ROOT::Experimental::Internal::RPageSource::GetNEntries ; (; ). Definition at line 214 of file RPageStorage.cxx. ◆ GetReadOptions(). const RNTupleReadOptions & ROOT::Experimental::Internal::RPageSource::GetReadOptions ; (; ); const. inline . Definition at line 714 of file RPageStorage.hxx. ◆ GetSharedDescriptorGuard(). const RSharedDescriptorGuard ROOT::Experimental::Internal::RPageSource::GetSharedDescriptorGuard ; (; ); const. inline . Takes the read lock for the descriptor. ; Multiple threads can take the lock concurrently. The underlying std::shared_mutex, however, is neither read nor write recursive: within one thread, only one lock (shared or exclusive) must be acquired at the same time. This requires special care in sections protected by GetSharedDescriptorGuard() and GetExclDescriptorGuard() especially to avoid that the locks are acquired indirectly (e.g. by a call to GetNEntries()). As a general guideline, no other method of the page source should be called (directly or indirectly) in a guarded section. ; Definition at line 722 of file RPageStorage.hxx. ◆ GetType(). EPageStorageType ROOT::Experimental::Internal::RPageSource::GetType ; (; ). inlinefinalvirtual . Whether the concrete implementation is a sink or a source. ; Implements ROOT::Experimental::Internal::RPageStorage.; Definition at line 713 of file RPageStorage.hxx. ◆ LoadClusters(). virtual std::vector< std::unique_ptr< RCluster > > ROOT::Experimental::Internal::RPageSource::LoadClusters ; (; std::span< RCluster::RKey > ; clusterKeys). pure virtual . Populates all the pages of the given cluster ids and columns; it is possible that some columns do not contain any pages. ; The page source may load more columns than the minimal necessary set from columns. To indicate which columns have been lo",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html:20425,Safety,safe,safely,20425,"perimental::RResult< ROOT::Experimental::Internal::RPage > ROOT::Experimental::Internal::RPageSource::UnsealPage ; (; const RSealedPage & ; sealedPage, . const RColumnElementBase & ; element, . DescriptorId_t ; physicalColumnId, . RPageAllocator & ; pageAlloc . ). static . Helper for unstreaming a page. ; This is commonly used in derived, concrete page sources. The implementation currently always makes a memory copy, even if the sealed page is uncompressed and in the final memory layout. The optimization of directly mapping pages is left to the concrete page source implementations. ; Definition at line 487 of file RPageStorage.cxx. ◆ UnzipCluster(). void ROOT::Experimental::Internal::RPageSource::UnzipCluster ; (; RCluster * ; cluster). Parallel decompression and unpacking of the pages in the given cluster. ; The unzipped pages are supposed to be preloaded in a page pool attached to the source. The method is triggered by the cluster pool's unzip thread. It is an optional optimization, the method can safely do nothing. In particular, the actual implementation will only run if a task scheduler is set. In practice, a task scheduler is set if implicit multi-threading is turned on. ; Definition at line 224 of file RPageStorage.cxx. ◆ UnzipClusterImpl(). void ROOT::Experimental::Internal::RPageSource::UnzipClusterImpl ; (; RCluster * ; cluster). protectedvirtual . Definition at line 230 of file RPageStorage.cxx. Member Data Documentation. ◆ fActivePhysicalColumns. RActivePhysicalColumns ROOT::Experimental::Internal::RPageSource::fActivePhysicalColumns. protected . The active columns are implicitly defined by the model fields or views. ; Definition at line 658 of file RPageStorage.hxx. ◆ fCounters. std::unique_ptr<RCounters> ROOT::Experimental::Internal::RPageSource::fCounters. protected . Definition at line 654 of file RPageStorage.hxx. ◆ fDescriptor. RNTupleDescriptor ROOT::Experimental::Internal::RPageSource::fDescriptor. private . Definition at line 603 of file RPageSt",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html:723,Security,access,access,723,". ROOT: ROOT::Experimental::Internal::RPageSource Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; ROOT::Experimental::Internal::RPageSource Class ReferenceabstractNTuple-related classes. ; Abstract interface to read data from an ntuple. ; The page source is initialized with the columns of interest. Alias columns from projected fields are mapped to the corresponding physical columns. Pages from the columns of interest can then be mapped into memory. The page source also gives access to the ntuple's meta-data. ; Definition at line 549 of file RPageStorage.hxx. Classes; class  RActivePhysicalColumns;  Keeps track of the requested physical column IDs. More...;  ; struct  RClusterInfo;  Summarizes cluster-level information that are necessary to load a certain page. More...;  ; struct  RCounters;  Default I/O performance counters that get registered in fMetrics More...;  ; struct  REntryRange;  Used in SetEntryRange / GetEntryRange. More...;  ; class  RExclDescriptorGuard;  An RAII wrapper used for the writable access to RPageSource::fDescriptor. See GetSharedDescriptorGuard(). More...;  ; class  RSharedDescriptorGuard;  An RAII wrapper used for the read-only access to RPageSource::fDescriptor. See GetExclDescriptorGuard()`. More...;  . Public Member Functions;  RPageSource (const RPageSource &)=delete;  ;  RPageSource (RPageSource &&)=delete;  ;  RPageSource (std::string_view ntupleName, const RNTupleReadOptions &fOptions);  ;  ~RPageSource () override;  ; ColumnHandle_t AddColumn (DescriptorId_t fieldId, RColumn &column) override;  Register a new column. ;  ; void Attach ();  Open the physical storage container and deserialize header and footer. ;  ; std::unique_ptr< RPageSource > Clone () const;  Open the same storage multiple time",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html:1264,Security,access,access,1264,"otected Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; ROOT::Experimental::Internal::RPageSource Class ReferenceabstractNTuple-related classes. ; Abstract interface to read data from an ntuple. ; The page source is initialized with the columns of interest. Alias columns from projected fields are mapped to the corresponding physical columns. Pages from the columns of interest can then be mapped into memory. The page source also gives access to the ntuple's meta-data. ; Definition at line 549 of file RPageStorage.hxx. Classes; class  RActivePhysicalColumns;  Keeps track of the requested physical column IDs. More...;  ; struct  RClusterInfo;  Summarizes cluster-level information that are necessary to load a certain page. More...;  ; struct  RCounters;  Default I/O performance counters that get registered in fMetrics More...;  ; struct  REntryRange;  Used in SetEntryRange / GetEntryRange. More...;  ; class  RExclDescriptorGuard;  An RAII wrapper used for the writable access to RPageSource::fDescriptor. See GetSharedDescriptorGuard(). More...;  ; class  RSharedDescriptorGuard;  An RAII wrapper used for the read-only access to RPageSource::fDescriptor. See GetExclDescriptorGuard()`. More...;  . Public Member Functions;  RPageSource (const RPageSource &)=delete;  ;  RPageSource (RPageSource &&)=delete;  ;  RPageSource (std::string_view ntupleName, const RNTupleReadOptions &fOptions);  ;  ~RPageSource () override;  ; ColumnHandle_t AddColumn (DescriptorId_t fieldId, RColumn &column) override;  Register a new column. ;  ; void Attach ();  Open the physical storage container and deserialize header and footer. ;  ; std::unique_ptr< RPageSource > Clone () const;  Open the same storage multiple time, e.g. ;  ; void DropColumn (ColumnHandle_t columnHandle) override;  Unregisters a column. ;  ; REntryRange GetEntryRange () const;  ; NTupleSize_t GetNElements (ColumnHandle_t columnHandle);  ; NTupleSize_t GetNEntries ();  ; const RNTupleRead",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html:1415,Security,access,access,1415,"enceabstractNTuple-related classes. ; Abstract interface to read data from an ntuple. ; The page source is initialized with the columns of interest. Alias columns from projected fields are mapped to the corresponding physical columns. Pages from the columns of interest can then be mapped into memory. The page source also gives access to the ntuple's meta-data. ; Definition at line 549 of file RPageStorage.hxx. Classes; class  RActivePhysicalColumns;  Keeps track of the requested physical column IDs. More...;  ; struct  RClusterInfo;  Summarizes cluster-level information that are necessary to load a certain page. More...;  ; struct  RCounters;  Default I/O performance counters that get registered in fMetrics More...;  ; struct  REntryRange;  Used in SetEntryRange / GetEntryRange. More...;  ; class  RExclDescriptorGuard;  An RAII wrapper used for the writable access to RPageSource::fDescriptor. See GetSharedDescriptorGuard(). More...;  ; class  RSharedDescriptorGuard;  An RAII wrapper used for the read-only access to RPageSource::fDescriptor. See GetExclDescriptorGuard()`. More...;  . Public Member Functions;  RPageSource (const RPageSource &)=delete;  ;  RPageSource (RPageSource &&)=delete;  ;  RPageSource (std::string_view ntupleName, const RNTupleReadOptions &fOptions);  ;  ~RPageSource () override;  ; ColumnHandle_t AddColumn (DescriptorId_t fieldId, RColumn &column) override;  Register a new column. ;  ; void Attach ();  Open the physical storage container and deserialize header and footer. ;  ; std::unique_ptr< RPageSource > Clone () const;  Open the same storage multiple time, e.g. ;  ; void DropColumn (ColumnHandle_t columnHandle) override;  Unregisters a column. ;  ; REntryRange GetEntryRange () const;  ; NTupleSize_t GetNElements (ColumnHandle_t columnHandle);  ; NTupleSize_t GetNEntries ();  ; const RNTupleReadOptions & GetReadOptions () const;  ; const RSharedDescriptorGuard GetSharedDescriptorGuard () const;  Takes the read lock for the descriptor. ;  ; EP",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html:7582,Security,checksum,checksum,7582,"T::Experimental::Internal::RPageStorage; Detail::RNTupleMetrics fMetrics;  ; std::string fNTupleName;  ; std::unique_ptr< RPageAllocator > fPageAllocator;  For the time being, we will use the heap allocator for all sources and sinks. This may change in the future. ;  ; RTaskScheduler * fTaskScheduler = nullptr;  . Private Attributes; RNTupleDescriptor fDescriptor;  ; std::shared_mutex fDescriptorLock;  ; REntryRange fEntryRange;  Used by the cluster pool to prevent reading beyond the given range. ;  ; bool fHasStructure = false;  Set to true once LoadStructure() is called. ;  ; bool fIsAttached = false;  Set to true once Attach() is called. ;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::Internal::RPageStorage; using ColumnHandle_t = RColumnHandle;  The column handle identifies a column with the current open page storage. ;  ; using SealedPageSequence_t = std::deque< RSealedPage >;  ;  Static Public Attributes inherited from ROOT::Experimental::Internal::RPageStorage; static constexpr std::size_t kNBytesPageChecksum = sizeof(std::uint64_t);  The page checksum is a 64bit xxhash3. ;  . #include <ROOT/RPageStorage.hxx>. Inheritance diagram for ROOT::Experimental::Internal::RPageSource:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RPageSource() [1/3]. ROOT::Experimental::Internal::RPageSource::RPageSource ; (; std::string_view ; ntupleName, . const RNTupleReadOptions & ; fOptions . ). Definition at line 137 of file RPageStorage.cxx. ◆ RPageSource() [2/3]. ROOT::Experimental::Internal::RPageSource::RPageSource ; (; const RPageSource & ; ). delete . ◆ RPageSource() [3/3]. ROOT::Experimental::Internal::RPageSource::RPageSource ; (; RPageSource && ; ). delete . ◆ ~RPageSource(). ROOT::Experimental::Internal::RPageSource::~RPageSource ; (; ). override . Definition at line 142 of file RPageStorage.cxx. Member Function Documentation. ◆ AddColumn(). ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html:13465,Usability,guid,guideline,13465,"). ROOT::Experimental::NTupleSize_t ROOT::Experimental::Internal::RPageSource::GetNEntries ; (; ). Definition at line 214 of file RPageStorage.cxx. ◆ GetReadOptions(). const RNTupleReadOptions & ROOT::Experimental::Internal::RPageSource::GetReadOptions ; (; ); const. inline . Definition at line 714 of file RPageStorage.hxx. ◆ GetSharedDescriptorGuard(). const RSharedDescriptorGuard ROOT::Experimental::Internal::RPageSource::GetSharedDescriptorGuard ; (; ); const. inline . Takes the read lock for the descriptor. ; Multiple threads can take the lock concurrently. The underlying std::shared_mutex, however, is neither read nor write recursive: within one thread, only one lock (shared or exclusive) must be acquired at the same time. This requires special care in sections protected by GetSharedDescriptorGuard() and GetExclDescriptorGuard() especially to avoid that the locks are acquired indirectly (e.g. by a call to GetNEntries()). As a general guideline, no other method of the page source should be called (directly or indirectly) in a guarded section. ; Definition at line 722 of file RPageStorage.hxx. ◆ GetType(). EPageStorageType ROOT::Experimental::Internal::RPageSource::GetType ; (; ). inlinefinalvirtual . Whether the concrete implementation is a sink or a source. ; Implements ROOT::Experimental::Internal::RPageStorage.; Definition at line 713 of file RPageStorage.hxx. ◆ LoadClusters(). virtual std::vector< std::unique_ptr< RCluster > > ROOT::Experimental::Internal::RPageSource::LoadClusters ; (; std::span< RCluster::RKey > ; clusterKeys). pure virtual . Populates all the pages of the given cluster ids and columns; it is possible that some columns do not contain any pages. ; The page source may load more columns than the minimal necessary set from columns. To indicate which columns have been loaded, LoadClusters()must mark them withSetColumnAvailable(). That includes the ones from thecolumnsthat don't have pages; otherwise subsequent requests for the cluster would assu",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageStorage_1_1RTaskScheduler.html:347,Energy Efficiency,schedul,scheduler,347,". ROOT: ROOT::Experimental::Internal::RPageStorage::RTaskScheduler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::Experimental::Internal::RPageStorage::RTaskScheduler Class Referenceabstract. ; The interface of a task scheduler to schedule page (de)compression tasks. ; Definition at line 77 of file RPageStorage.hxx. Public Member Functions; virtual ~RTaskScheduler ()=default;  ; virtual void AddTask (const std::function< void(void)> &taskFunc)=0;  Take a callable that represents a task. ;  ; virtual void Wait ()=0;  Blocks until all scheduled tasks finished. ;  . #include <ROOT/RPageStorage.hxx>. Inheritance diagram for ROOT::Experimental::Internal::RPageStorage::RTaskScheduler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~RTaskScheduler(). virtual ROOT::Experimental::Internal::RPageStorage::RTaskScheduler::~RTaskScheduler ; (; ). virtualdefault . Member Function Documentation. ◆ AddTask(). virtual void ROOT::Experimental::Internal::RPageStorage::RTaskScheduler::AddTask ; (; const std::function< void(void)> & ; taskFunc). pure virtual . Take a callable that represents a task. ; Implemented in ROOT::Experimental::Internal::RNTupleImtTaskScheduler. ◆ Wait(). virtual void ROOT::Experimental::Internal::RPageStorage::RTaskScheduler::Wait ; (; ). pure virtual . Blocks until all scheduled tasks finished. ; Implemented in ROOT::Experimental::Internal::RNTupleImtTaskScheduler. The documentation for this class was generated from the following file:; tree/ntuple/v7/inc/ROOT/RPageStorage.hxx. ROOTExperimentalInternalRPageStorageRTaskScheduler. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:14 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageStorage_1_1RTaskScheduler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageStorage_1_1RTaskScheduler.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageStorage_1_1RTaskScheduler.html:360,Energy Efficiency,schedul,schedule,360,". ROOT: ROOT::Experimental::Internal::RPageStorage::RTaskScheduler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::Experimental::Internal::RPageStorage::RTaskScheduler Class Referenceabstract. ; The interface of a task scheduler to schedule page (de)compression tasks. ; Definition at line 77 of file RPageStorage.hxx. Public Member Functions; virtual ~RTaskScheduler ()=default;  ; virtual void AddTask (const std::function< void(void)> &taskFunc)=0;  Take a callable that represents a task. ;  ; virtual void Wait ()=0;  Blocks until all scheduled tasks finished. ;  . #include <ROOT/RPageStorage.hxx>. Inheritance diagram for ROOT::Experimental::Internal::RPageStorage::RTaskScheduler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~RTaskScheduler(). virtual ROOT::Experimental::Internal::RPageStorage::RTaskScheduler::~RTaskScheduler ; (; ). virtualdefault . Member Function Documentation. ◆ AddTask(). virtual void ROOT::Experimental::Internal::RPageStorage::RTaskScheduler::AddTask ; (; const std::function< void(void)> & ; taskFunc). pure virtual . Take a callable that represents a task. ; Implemented in ROOT::Experimental::Internal::RNTupleImtTaskScheduler. ◆ Wait(). virtual void ROOT::Experimental::Internal::RPageStorage::RTaskScheduler::Wait ; (; ). pure virtual . Blocks until all scheduled tasks finished. ; Implemented in ROOT::Experimental::Internal::RNTupleImtTaskScheduler. The documentation for this class was generated from the following file:; tree/ntuple/v7/inc/ROOT/RPageStorage.hxx. ROOTExperimentalInternalRPageStorageRTaskScheduler. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:14 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageStorage_1_1RTaskScheduler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageStorage_1_1RTaskScheduler.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageStorage_1_1RTaskScheduler.html:668,Energy Efficiency,schedul,scheduled,668,". ROOT: ROOT::Experimental::Internal::RPageStorage::RTaskScheduler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::Experimental::Internal::RPageStorage::RTaskScheduler Class Referenceabstract. ; The interface of a task scheduler to schedule page (de)compression tasks. ; Definition at line 77 of file RPageStorage.hxx. Public Member Functions; virtual ~RTaskScheduler ()=default;  ; virtual void AddTask (const std::function< void(void)> &taskFunc)=0;  Take a callable that represents a task. ;  ; virtual void Wait ()=0;  Blocks until all scheduled tasks finished. ;  . #include <ROOT/RPageStorage.hxx>. Inheritance diagram for ROOT::Experimental::Internal::RPageStorage::RTaskScheduler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~RTaskScheduler(). virtual ROOT::Experimental::Internal::RPageStorage::RTaskScheduler::~RTaskScheduler ; (; ). virtualdefault . Member Function Documentation. ◆ AddTask(). virtual void ROOT::Experimental::Internal::RPageStorage::RTaskScheduler::AddTask ; (; const std::function< void(void)> & ; taskFunc). pure virtual . Take a callable that represents a task. ; Implemented in ROOT::Experimental::Internal::RNTupleImtTaskScheduler. ◆ Wait(). virtual void ROOT::Experimental::Internal::RPageStorage::RTaskScheduler::Wait ; (; ). pure virtual . Blocks until all scheduled tasks finished. ; Implemented in ROOT::Experimental::Internal::RNTupleImtTaskScheduler. The documentation for this class was generated from the following file:; tree/ntuple/v7/inc/ROOT/RPageStorage.hxx. ROOTExperimentalInternalRPageStorageRTaskScheduler. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:14 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageStorage_1_1RTaskScheduler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageStorage_1_1RTaskScheduler.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageStorage_1_1RTaskScheduler.html:1517,Energy Efficiency,schedul,scheduled,1517,". ROOT: ROOT::Experimental::Internal::RPageStorage::RTaskScheduler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::Experimental::Internal::RPageStorage::RTaskScheduler Class Referenceabstract. ; The interface of a task scheduler to schedule page (de)compression tasks. ; Definition at line 77 of file RPageStorage.hxx. Public Member Functions; virtual ~RTaskScheduler ()=default;  ; virtual void AddTask (const std::function< void(void)> &taskFunc)=0;  Take a callable that represents a task. ;  ; virtual void Wait ()=0;  Blocks until all scheduled tasks finished. ;  . #include <ROOT/RPageStorage.hxx>. Inheritance diagram for ROOT::Experimental::Internal::RPageStorage::RTaskScheduler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~RTaskScheduler(). virtual ROOT::Experimental::Internal::RPageStorage::RTaskScheduler::~RTaskScheduler ; (; ). virtualdefault . Member Function Documentation. ◆ AddTask(). virtual void ROOT::Experimental::Internal::RPageStorage::RTaskScheduler::AddTask ; (; const std::function< void(void)> & ; taskFunc). pure virtual . Take a callable that represents a task. ; Implemented in ROOT::Experimental::Internal::RNTupleImtTaskScheduler. ◆ Wait(). virtual void ROOT::Experimental::Internal::RPageStorage::RTaskScheduler::Wait ; (; ). pure virtual . Blocks until all scheduled tasks finished. ; Implemented in ROOT::Experimental::Internal::RNTupleImtTaskScheduler. The documentation for this class was generated from the following file:; tree/ntuple/v7/inc/ROOT/RPageStorage.hxx. ROOTExperimentalInternalRPageStorageRTaskScheduler. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:14 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageStorage_1_1RTaskScheduler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageStorage_1_1RTaskScheduler.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageStorage_1_1RTaskScheduler.html:327,Integrability,interface,interface,327,". ROOT: ROOT::Experimental::Internal::RPageStorage::RTaskScheduler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::Experimental::Internal::RPageStorage::RTaskScheduler Class Referenceabstract. ; The interface of a task scheduler to schedule page (de)compression tasks. ; Definition at line 77 of file RPageStorage.hxx. Public Member Functions; virtual ~RTaskScheduler ()=default;  ; virtual void AddTask (const std::function< void(void)> &taskFunc)=0;  Take a callable that represents a task. ;  ; virtual void Wait ()=0;  Blocks until all scheduled tasks finished. ;  . #include <ROOT/RPageStorage.hxx>. Inheritance diagram for ROOT::Experimental::Internal::RPageStorage::RTaskScheduler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~RTaskScheduler(). virtual ROOT::Experimental::Internal::RPageStorage::RTaskScheduler::~RTaskScheduler ; (; ). virtualdefault . Member Function Documentation. ◆ AddTask(). virtual void ROOT::Experimental::Internal::RPageStorage::RTaskScheduler::AddTask ; (; const std::function< void(void)> & ; taskFunc). pure virtual . Take a callable that represents a task. ; Implemented in ROOT::Experimental::Internal::RNTupleImtTaskScheduler. ◆ Wait(). virtual void ROOT::Experimental::Internal::RPageStorage::RTaskScheduler::Wait ; (; ). pure virtual . Blocks until all scheduled tasks finished. ; Implemented in ROOT::Experimental::Internal::RNTupleImtTaskScheduler. The documentation for this class was generated from the following file:; tree/ntuple/v7/inc/ROOT/RPageStorage.hxx. ROOTExperimentalInternalRPageStorageRTaskScheduler. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:14 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageStorage_1_1RTaskScheduler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageStorage_1_1RTaskScheduler.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RVirtualCanvasPainter.html:453,Integrability,interface,interface,453,". ROOT: ROOT::Experimental::Internal::RVirtualCanvasPainter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Static Protected Member Functions |; List of all members ; ROOT::Experimental::Internal::RVirtualCanvasPainter Class ReferenceabstractGraphics » ROOT7 Graphics » ROOT7 Pad related classes. ; Abstract interface for painting a canvas. ; AuthorAxel Naumann axel@.nosp@m.cern.nosp@m..ch ; Date2017-05-31 ; WarningThis is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome! ; Definition at line 36 of file RVirtualCanvasPainter.hxx. Classes; class  Generator;  . Public Member Functions; virtual ~RVirtualCanvasPainter ();  Default destructor. ;  ; virtual bool AddPanel (std::shared_ptr< ROOT::RWebWindow >);  ; virtual void CanvasUpdated (uint64_t, bool, CanvasCallback_t)=0;  indicate that canvas changed, provides current version of the canvas ;  ; virtual void DoWhenReady (const std::string &, const std::string &, bool, CanvasCallback_t)=0;  perform special action when drawing is ready ;  ; virtual std::string GetWindowAddr () const =0;  ; virtual std::string GetWindowUrl (bool remote)=0;  ; virtual bool IsCanvasModified (uint64_t) const =0;  return true if canvas modified since last painting ;  ; virtual void NewDisplay (const std::string &where)=0;  ; virtual int NumDisplays () const =0;  ; virtual bool ProduceBatchOutput (const std::string &, int, int)=0;  produce file output in batch mode like png, jpeg, svg or pdf ;  ; virtual std::string ProduceJSON ()=0;  produce canvas JSON ;  ; virtual void Run (double tm=0.)=0;  run canvas functionality in caller thread, not needed when main thread is used ;  ; virtual void SetClearOnClose (const std::shared_ptr< void > &);  . Static Public Member Functions; static std::unique_ptr< RVirtualCanvasPainter > Create (RCanvas &canv",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RVirtualCanvasPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RVirtualCanvasPainter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RVirtualCanvasPainter.html:2015,Modifiability,plugin,plugin,2015,"lback_t)=0;  indicate that canvas changed, provides current version of the canvas ;  ; virtual void DoWhenReady (const std::string &, const std::string &, bool, CanvasCallback_t)=0;  perform special action when drawing is ready ;  ; virtual std::string GetWindowAddr () const =0;  ; virtual std::string GetWindowUrl (bool remote)=0;  ; virtual bool IsCanvasModified (uint64_t) const =0;  return true if canvas modified since last painting ;  ; virtual void NewDisplay (const std::string &where)=0;  ; virtual int NumDisplays () const =0;  ; virtual bool ProduceBatchOutput (const std::string &, int, int)=0;  produce file output in batch mode like png, jpeg, svg or pdf ;  ; virtual std::string ProduceJSON ()=0;  produce canvas JSON ;  ; virtual void Run (double tm=0.)=0;  run canvas functionality in caller thread, not needed when main thread is used ;  ; virtual void SetClearOnClose (const std::shared_ptr< void > &);  . Static Public Member Functions; static std::unique_ptr< RVirtualCanvasPainter > Create (RCanvas &canv);  Loads the plugin that implements this class. ;  . Static Protected Member Functions; static std::unique_ptr< Generator > & GetGenerator ();  generator getter ;  . #include <ROOT/RVirtualCanvasPainter.hxx>. Inheritance diagram for ROOT::Experimental::Internal::RVirtualCanvasPainter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~RVirtualCanvasPainter(). RVirtualCanvasPainter::~RVirtualCanvasPainter ; (; ). virtualdefault . Default destructor. ; The implementation is here to pin the vtable. . Member Function Documentation. ◆ AddPanel(). virtual bool ROOT::Experimental::Internal::RVirtualCanvasPainter::AddPanel ; (; std::shared_ptr< ROOT::RWebWindow > ; ). inlinevirtual . Reimplemented in ROOT::Experimental::RCanvasPainter.; Definition at line 79 of file RVirtualCanvasPainter.hxx. ◆ CanvasUpdated(). virtual void ROOT::Experimental::Internal::RVirtualCanvasPainter::Ca",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RVirtualCanvasPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RVirtualCanvasPainter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RVirtualCanvasPainter.html:3305,Modifiability,plugin,plugin,3305," show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~RVirtualCanvasPainter(). RVirtualCanvasPainter::~RVirtualCanvasPainter ; (; ). virtualdefault . Default destructor. ; The implementation is here to pin the vtable. . Member Function Documentation. ◆ AddPanel(). virtual bool ROOT::Experimental::Internal::RVirtualCanvasPainter::AddPanel ; (; std::shared_ptr< ROOT::RWebWindow > ; ). inlinevirtual . Reimplemented in ROOT::Experimental::RCanvasPainter.; Definition at line 79 of file RVirtualCanvasPainter.hxx. ◆ CanvasUpdated(). virtual void ROOT::Experimental::Internal::RVirtualCanvasPainter::CanvasUpdated ; (; uint64_t ; , . bool ; , . CanvasCallback_t ;  . ). pure virtual . indicate that canvas changed, provides current version of the canvas ; Implemented in ROOT::Experimental::RCanvasPainter. ◆ Create(). std::unique_ptr< RVirtualCanvasPainter > RVirtualCanvasPainter::Create ; (; RCanvas & ; canv). static . Loads the plugin that implements this class. ; Definition at line 42 of file RVirtualCanvasPainter.cxx. ◆ DoWhenReady(). virtual void ROOT::Experimental::Internal::RVirtualCanvasPainter::DoWhenReady ; (; const std::string & ; , . const std::string & ; , . bool ; , . CanvasCallback_t ;  . ). pure virtual . perform special action when drawing is ready ; Implemented in ROOT::Experimental::RCanvasPainter. ◆ GetGenerator(). std::unique_ptr< RVirtualCanvasPainter::Generator > & RVirtualCanvasPainter::GetGenerator ; (; ). staticprotected . generator getter ; Definition at line 35 of file RVirtualCanvasPainter.cxx. ◆ GetWindowAddr(). virtual std::string ROOT::Experimental::Internal::RVirtualCanvasPainter::GetWindowAddr ; (; ); const. pure virtual . Implemented in ROOT::Experimental::RCanvasPainter. ◆ GetWindowUrl(). virtual std::string ROOT::Experimental::Internal::RVirtualCanvasPainter::GetWindowUrl ; (; bool ; remote). pure virtual . Implemented in ROOT::Experimental::RCanvasPainter. ◆ IsCanvasModified(). virtual",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RVirtualCanvasPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RVirtualCanvasPainter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RVirtualCanvasPainter.html:1157,Performance,perform,perform,1157," all members ; ROOT::Experimental::Internal::RVirtualCanvasPainter Class ReferenceabstractGraphics » ROOT7 Graphics » ROOT7 Pad related classes. ; Abstract interface for painting a canvas. ; AuthorAxel Naumann axel@.nosp@m.cern.nosp@m..ch ; Date2017-05-31 ; WarningThis is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome! ; Definition at line 36 of file RVirtualCanvasPainter.hxx. Classes; class  Generator;  . Public Member Functions; virtual ~RVirtualCanvasPainter ();  Default destructor. ;  ; virtual bool AddPanel (std::shared_ptr< ROOT::RWebWindow >);  ; virtual void CanvasUpdated (uint64_t, bool, CanvasCallback_t)=0;  indicate that canvas changed, provides current version of the canvas ;  ; virtual void DoWhenReady (const std::string &, const std::string &, bool, CanvasCallback_t)=0;  perform special action when drawing is ready ;  ; virtual std::string GetWindowAddr () const =0;  ; virtual std::string GetWindowUrl (bool remote)=0;  ; virtual bool IsCanvasModified (uint64_t) const =0;  return true if canvas modified since last painting ;  ; virtual void NewDisplay (const std::string &where)=0;  ; virtual int NumDisplays () const =0;  ; virtual bool ProduceBatchOutput (const std::string &, int, int)=0;  produce file output in batch mode like png, jpeg, svg or pdf ;  ; virtual std::string ProduceJSON ()=0;  produce canvas JSON ;  ; virtual void Run (double tm=0.)=0;  run canvas functionality in caller thread, not needed when main thread is used ;  ; virtual void SetClearOnClose (const std::shared_ptr< void > &);  . Static Public Member Functions; static std::unique_ptr< RVirtualCanvasPainter > Create (RCanvas &canv);  Loads the plugin that implements this class. ;  . Static Protected Member Functions; static std::unique_ptr< Generator > & GetGenerator ();  generator getter ;  . #include <ROOT/RVirtualCanvasPainter.hxx>. Inheritance diagram for ROOT::Experimental::Internal::RVirtualCanvasPainter:. This bro",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RVirtualCanvasPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RVirtualCanvasPainter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RVirtualCanvasPainter.html:3602,Performance,perform,perform,3602,"l ROOT::Experimental::Internal::RVirtualCanvasPainter::AddPanel ; (; std::shared_ptr< ROOT::RWebWindow > ; ). inlinevirtual . Reimplemented in ROOT::Experimental::RCanvasPainter.; Definition at line 79 of file RVirtualCanvasPainter.hxx. ◆ CanvasUpdated(). virtual void ROOT::Experimental::Internal::RVirtualCanvasPainter::CanvasUpdated ; (; uint64_t ; , . bool ; , . CanvasCallback_t ;  . ). pure virtual . indicate that canvas changed, provides current version of the canvas ; Implemented in ROOT::Experimental::RCanvasPainter. ◆ Create(). std::unique_ptr< RVirtualCanvasPainter > RVirtualCanvasPainter::Create ; (; RCanvas & ; canv). static . Loads the plugin that implements this class. ; Definition at line 42 of file RVirtualCanvasPainter.cxx. ◆ DoWhenReady(). virtual void ROOT::Experimental::Internal::RVirtualCanvasPainter::DoWhenReady ; (; const std::string & ; , . const std::string & ; , . bool ; , . CanvasCallback_t ;  . ). pure virtual . perform special action when drawing is ready ; Implemented in ROOT::Experimental::RCanvasPainter. ◆ GetGenerator(). std::unique_ptr< RVirtualCanvasPainter::Generator > & RVirtualCanvasPainter::GetGenerator ; (; ). staticprotected . generator getter ; Definition at line 35 of file RVirtualCanvasPainter.cxx. ◆ GetWindowAddr(). virtual std::string ROOT::Experimental::Internal::RVirtualCanvasPainter::GetWindowAddr ; (; ); const. pure virtual . Implemented in ROOT::Experimental::RCanvasPainter. ◆ GetWindowUrl(). virtual std::string ROOT::Experimental::Internal::RVirtualCanvasPainter::GetWindowUrl ; (; bool ; remote). pure virtual . Implemented in ROOT::Experimental::RCanvasPainter. ◆ IsCanvasModified(). virtual bool ROOT::Experimental::Internal::RVirtualCanvasPainter::IsCanvasModified ; (; uint64_t ; ); const. pure virtual . return true if canvas modified since last painting ; Implemented in ROOT::Experimental::RCanvasPainter. ◆ NewDisplay(). virtual void ROOT::Experimental::Internal::RVirtualCanvasPainter::NewDisplay ; (; const std::str",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RVirtualCanvasPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RVirtualCanvasPainter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1TBulkBranchRead.html:1022,Integrability,interface,interfaces,1022,". ROOT: ROOT::Experimental::Internal::TBulkBranchRead Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::Experimental::Internal::TBulkBranchRead Class Reference. ; Helper class for reading many branch entries at once to optimize throughput. ; Definition at line 68 of file TBranch.h. Public Member Functions; Int_t GetBulkEntries (Long64_t evt, TBuffer &user_buf);  See TBranch::GetBulkEntries(Long64_t evt, TBuffer &user_buf);. ;  ; Int_t GetEntriesSerialized (Long64_t evt, TBuffer &user_buf);  See TBranch::GetEntriesSerialized(Long64_t evt, TBuffer &user_buf);. ;  ; Int_t GetEntriesSerialized (Long64_t evt, TBuffer &user_buf, TBuffer *count_buf);  See TBranch::GetEntriesSerialized(Long64_t evt, TBuffer &user_buf, TBuffer *count_buf);. ;  ; bool SupportsBulkRead () const;  Return true if the branch can be read through the bulk interfaces. ;  . Private Member Functions;  TBulkBranchRead (TBranch &parent);  . Private Attributes; TBranch & fParent;  . Friends; class ::TBranch;  . #include <TBranch.h>; Constructor & Destructor Documentation. ◆ TBulkBranchRead(). ROOT::Experimental::Internal::TBulkBranchRead::TBulkBranchRead ; (; TBranch & ; parent). inlineprivate . Definition at line 83 of file TBranch.h. Member Function Documentation. ◆ GetBulkEntries(). Int_t ROOT::Experimental::Internal::TBulkBranchRead::GetBulkEntries ; (; Long64_t ; evt, . TBuffer & ; user_buf . ). inline . See TBranch::GetBulkEntries(Long64_t evt, TBuffer &user_buf);. ; Definition at line 320 of file TBranch.h. ◆ GetEntriesSerialized() [1/2]. Int_t ROOT::Experimental::Internal::TBulkBranchRead::GetEntriesSerialized ; (; Long64_t ; evt, . TBuffer & ; user_buf . ). inline . See TBranch::GetEntriesSerialized(Long64_t evt, TBuffer &user_buf);. ; Definition at line 321 of file TBranch.h. ◆ GetEntriesSerialized() [2/2]. Int_",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1TBulkBranchRead.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1TBulkBranchRead.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1TBulkBranchRead.html:2457,Integrability,interface,interfaces,2457," Attributes; TBranch & fParent;  . Friends; class ::TBranch;  . #include <TBranch.h>; Constructor & Destructor Documentation. ◆ TBulkBranchRead(). ROOT::Experimental::Internal::TBulkBranchRead::TBulkBranchRead ; (; TBranch & ; parent). inlineprivate . Definition at line 83 of file TBranch.h. Member Function Documentation. ◆ GetBulkEntries(). Int_t ROOT::Experimental::Internal::TBulkBranchRead::GetBulkEntries ; (; Long64_t ; evt, . TBuffer & ; user_buf . ). inline . See TBranch::GetBulkEntries(Long64_t evt, TBuffer &user_buf);. ; Definition at line 320 of file TBranch.h. ◆ GetEntriesSerialized() [1/2]. Int_t ROOT::Experimental::Internal::TBulkBranchRead::GetEntriesSerialized ; (; Long64_t ; evt, . TBuffer & ; user_buf . ). inline . See TBranch::GetEntriesSerialized(Long64_t evt, TBuffer &user_buf);. ; Definition at line 321 of file TBranch.h. ◆ GetEntriesSerialized() [2/2]. Int_t ROOT::Experimental::Internal::TBulkBranchRead::GetEntriesSerialized ; (; Long64_t ; evt, . TBuffer & ; user_buf, . TBuffer * ; count_buf . ). inline . See TBranch::GetEntriesSerialized(Long64_t evt, TBuffer &user_buf, TBuffer *count_buf);. ; Definition at line 322 of file TBranch.h. ◆ SupportsBulkRead(). bool ROOT::Experimental::Internal::TBulkBranchRead::SupportsBulkRead ; (; ); const. inline . Return true if the branch can be read through the bulk interfaces. ; Definition at line 323 of file TBranch.h. Friends And Related Symbol Documentation. ◆ ::TBranch. friend class ::TBranch. friend . Definition at line 70 of file TBranch.h. Member Data Documentation. ◆ fParent. TBranch& ROOT::Experimental::Internal::TBulkBranchRead::fParent. private . Definition at line 87 of file TBranch.h. Libraries for ROOT::Experimental::Internal::TBulkBranchRead:. [legend]; The documentation for this class was generated from the following file:; tree/tree/inc/TBranch.h. ROOTExperimentalInternalTBulkBranchRead. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:14 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1TBulkBranchRead.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1TBulkBranchRead.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1TBulkBranchRead.html:406,Performance,optimiz,optimize,406,". ROOT: ROOT::Experimental::Internal::TBulkBranchRead Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::Experimental::Internal::TBulkBranchRead Class Reference. ; Helper class for reading many branch entries at once to optimize throughput. ; Definition at line 68 of file TBranch.h. Public Member Functions; Int_t GetBulkEntries (Long64_t evt, TBuffer &user_buf);  See TBranch::GetBulkEntries(Long64_t evt, TBuffer &user_buf);. ;  ; Int_t GetEntriesSerialized (Long64_t evt, TBuffer &user_buf);  See TBranch::GetEntriesSerialized(Long64_t evt, TBuffer &user_buf);. ;  ; Int_t GetEntriesSerialized (Long64_t evt, TBuffer &user_buf, TBuffer *count_buf);  See TBranch::GetEntriesSerialized(Long64_t evt, TBuffer &user_buf, TBuffer *count_buf);. ;  ; bool SupportsBulkRead () const;  Return true if the branch can be read through the bulk interfaces. ;  . Private Member Functions;  TBulkBranchRead (TBranch &parent);  . Private Attributes; TBranch & fParent;  . Friends; class ::TBranch;  . #include <TBranch.h>; Constructor & Destructor Documentation. ◆ TBulkBranchRead(). ROOT::Experimental::Internal::TBulkBranchRead::TBulkBranchRead ; (; TBranch & ; parent). inlineprivate . Definition at line 83 of file TBranch.h. Member Function Documentation. ◆ GetBulkEntries(). Int_t ROOT::Experimental::Internal::TBulkBranchRead::GetBulkEntries ; (; Long64_t ; evt, . TBuffer & ; user_buf . ). inline . See TBranch::GetBulkEntries(Long64_t evt, TBuffer &user_buf);. ; Definition at line 320 of file TBranch.h. ◆ GetEntriesSerialized() [1/2]. Int_t ROOT::Experimental::Internal::TBulkBranchRead::GetEntriesSerialized ; (; Long64_t ; evt, . TBuffer & ; user_buf . ). inline . See TBranch::GetEntriesSerialized(Long64_t evt, TBuffer &user_buf);. ; Definition at line 321 of file TBranch.h. ◆ GetEntriesSerialized() [2/2]. Int_",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1TBulkBranchRead.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1TBulkBranchRead.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1TBulkBranchRead.html:415,Performance,throughput,throughput,415,". ROOT: ROOT::Experimental::Internal::TBulkBranchRead Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::Experimental::Internal::TBulkBranchRead Class Reference. ; Helper class for reading many branch entries at once to optimize throughput. ; Definition at line 68 of file TBranch.h. Public Member Functions; Int_t GetBulkEntries (Long64_t evt, TBuffer &user_buf);  See TBranch::GetBulkEntries(Long64_t evt, TBuffer &user_buf);. ;  ; Int_t GetEntriesSerialized (Long64_t evt, TBuffer &user_buf);  See TBranch::GetEntriesSerialized(Long64_t evt, TBuffer &user_buf);. ;  ; Int_t GetEntriesSerialized (Long64_t evt, TBuffer &user_buf, TBuffer *count_buf);  See TBranch::GetEntriesSerialized(Long64_t evt, TBuffer &user_buf, TBuffer *count_buf);. ;  ; bool SupportsBulkRead () const;  Return true if the branch can be read through the bulk interfaces. ;  . Private Member Functions;  TBulkBranchRead (TBranch &parent);  . Private Attributes; TBranch & fParent;  . Friends; class ::TBranch;  . #include <TBranch.h>; Constructor & Destructor Documentation. ◆ TBulkBranchRead(). ROOT::Experimental::Internal::TBulkBranchRead::TBulkBranchRead ; (; TBranch & ; parent). inlineprivate . Definition at line 83 of file TBranch.h. Member Function Documentation. ◆ GetBulkEntries(). Int_t ROOT::Experimental::Internal::TBulkBranchRead::GetBulkEntries ; (; Long64_t ; evt, . TBuffer & ; user_buf . ). inline . See TBranch::GetBulkEntries(Long64_t evt, TBuffer &user_buf);. ; Definition at line 320 of file TBranch.h. ◆ GetEntriesSerialized() [1/2]. Int_t ROOT::Experimental::Internal::TBulkBranchRead::GetEntriesSerialized ; (; Long64_t ; evt, . TBuffer & ; user_buf . ). inline . See TBranch::GetEntriesSerialized(Long64_t evt, TBuffer &user_buf);. ; Definition at line 321 of file TBranch.h. ◆ GetEntriesSerialized() [2/2]. Int_",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1Internal_1_1TBulkBranchRead.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1TBulkBranchRead.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas-members.html:227,Modifiability,inherit,inherited,227,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOT::Experimental::RCanvas Member List. This is the complete list of members for ROOT::Experimental::RCanvas, including all inherited members. Add(ARGS... args)ROOT::Experimental::RPadBaseinline; AddFrame()ROOT::Experimental::RPadBase; AddPad(const RPadPos &, const RPadExtent &)ROOT::Experimental::RPadBase; AddPanel(std::shared_ptr< PANEL > &panel)ROOT::Experimental::RCanvasinline; ClearOnClose(const std::shared_ptr< void > &handle)ROOT::Experimental::RCanvas; ClearShown()ROOT::Experimental::RCanvasinline; ClearStyle()ROOT::Experimental::RDrawableinline; ClearUpdated()ROOT::Experimental::RCanvasinline; CollectShared(Internal::RIOSharedVector_t &) overrideROOT::Experimental::RPadBaseprotectedvirtual; Create(const std::string &title)ROOT::Experimental::RCanvasstatic; CreateJSON()ROOT::Experimental::RCanvas; Display(const RDisplayContext &)ROOT::Experimental::RDrawableprotectedvirtual; DisplayPrimitives(RPadBaseDisplayItem &paditem, RDisplayContext &ctxt)ROOT::Experimental::RPadBaseprotected; Divide(int nHoriz, int nVert, const RPadExtent &padding={})ROOT::Experimental::RPadBase; Draw(const std::shared_ptr< T > &what, ARGS... args)ROOT::Experimental::RPadBaseinline; Draw(ARGS... args)ROOT::Experimental::RPadBaseinline; Draw(std::shared_ptr< RDrawable > &&drawable)ROOT::Experimental::RPadBaseinline; Execute(const std::string &)ROOT::Experimental::RDrawableprotectedvirtual; fAttrROOT::Experimental::RDrawableprivate; fCssClassROOT::Experimental::RDrawableprivate; fCssTypeROOT::Experimental::RDrawableprivate; fHeightROOT::Experimental::RCanvasprivate; fIdROOT::Experimental::RDrawableprivate; FindPadForPrimitiveWithDisplayId(const std::string &display_id) constROOT::Experimental::RPadBase; FindPrimitive(const std::string &id) constROOT::Experimental::RPadBase; FindPrimitiveByDisplayId(const std::string &display_id) constROOT::Experimental::RPadBase; fModifiedROOT::Experimen",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RCanvas-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas-members.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html:18534,Availability,avail,available,18534,"etSize(). void ROOT::Experimental::RCanvas::SetSize ; (; int ; width, . int ; height . ). inline . Set canvas pixel size - width and height. ; Definition at line 98 of file RCanvas.hxx. ◆ SetTitle(). RCanvas & ROOT::Experimental::RCanvas::SetTitle ; (; const std::string & ; title). inline . Set the canvas's title. ; Definition at line 186 of file RCanvas.hxx. ◆ SetWidth(). void ROOT::Experimental::RCanvas::SetWidth ; (; int ; width). inline . Set canvas width. ; Definition at line 105 of file RCanvas.hxx. ◆ Show(). void ROOT::Experimental::RCanvas::Show ; (; const std::string & ; where = """"). Display the canvas. ; Create new display for the canvas The parameter where specifies which program could be used for display creation Possible values:. cef Chromium Embeded Framework, local display, local communication; qt5 Qt5 WebEngine (when running via rootqt5), local display, local communication; browser default system web-browser, communication via random http port from range 8800 - 9800; <prog> any program name which will be started instead of default browser, like firefox or /usr/bin/opera one could also specify $url in program name, which will be replaced with canvas URL; native either any available local display or default browser. Canvas can be displayed in several different places ; Definition at line 115 of file RCanvas.cxx. ◆ Update(). void ROOT::Experimental::RCanvas::Update ; (; bool ; async = false, . CanvasCallback_t ; callback = nullptr . ). update drawing ; Update canvas. ; Definition at line 78 of file RCanvas.cxx. Friends And Related Symbol Documentation. ◆ RCanvasPainter. friend class RCanvasPainter. friend . use for ID generation ; Definition at line 49 of file RCanvas.hxx. ◆ RChangeAttrRequest. friend class RChangeAttrRequest. friend . used for primitives drawing ; Definition at line 50 of file RCanvas.hxx. ◆ RPadBase. friend class RPadBase. friend . Definition at line 48 of file RCanvas.hxx. Member Data Documentation. ◆ fHeight. int ROOT::Experimental::",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html:3295,Deployability,update,update,3295,"wable);  Set newest version to specified drawable. ;  ; void Remove ();  Remove canvas from global canvas lists, will be destroyed when shared_ptr will be removed. ;  ; void ResolveSharedPtrs ();  To resolve problem with storing of shared pointers Call this method when reading canvas from the file Can be called many times - after reinitialization of shared pointers no changes will be performed. ;  ; void Run (double tm=0.);  Run canvas functionality for given time (in seconds) ;  ; bool SaveAs (const std::string &filename);  Save canvas in image file. ;  ; void SetHeight (int height);  Set canvas height. ;  ; void SetSize (int width, int height);  Set canvas pixel size - width and height. ;  ; RCanvas & SetTitle (const std::string &title);  Set the canvas's title. ;  ; void SetWidth (int width);  Set canvas width. ;  ; void Show (const std::string &where="""");  Display the canvas. ;  ; void Update (bool async=false, CanvasCallback_t callback=nullptr);  update drawing ;  ;  Public Member Functions inherited from ROOT::Experimental::RPadBase;  ~RPadBase () override;  ; template<class T , class... ARGS> ; std::shared_ptr< T > Add (ARGS... args);  Add drawable of specified class T. ;  ; std::shared_ptr< RFrame > AddFrame ();  Add a frame object for the pad. ;  ; std::shared_ptr< RPad > AddPad (const RPadPos &, const RPadExtent &);  Add subpad. ;  ; std::vector< std::vector< std::shared_ptr< RPad > > > Divide (int nHoriz, int nVert, const RPadExtent &padding={});  Divide this pad into a grid of subpads with padding in between. ;  ; template<class T , class... ARGS> ; std::shared_ptr< T > Draw (ARGS... args);  Create drawable of specified class T. ;  ; template<class T , class... ARGS> ; auto Draw (const std::shared_ptr< T > &what, ARGS... args);  Add object to be painted. ;  ; std::shared_ptr< RDrawable > Draw (std::shared_ptr< RDrawable > &&drawable);  Add existing drawable instance to canvas. ;  ; const RPadBase * FindPadForPrimitiveWithDisplayId (const std::string &dis",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html:18801,Deployability,update,update,18801,"5 of file RCanvas.hxx. ◆ Show(). void ROOT::Experimental::RCanvas::Show ; (; const std::string & ; where = """"). Display the canvas. ; Create new display for the canvas The parameter where specifies which program could be used for display creation Possible values:. cef Chromium Embeded Framework, local display, local communication; qt5 Qt5 WebEngine (when running via rootqt5), local display, local communication; browser default system web-browser, communication via random http port from range 8800 - 9800; <prog> any program name which will be started instead of default browser, like firefox or /usr/bin/opera one could also specify $url in program name, which will be replaced with canvas URL; native either any available local display or default browser. Canvas can be displayed in several different places ; Definition at line 115 of file RCanvas.cxx. ◆ Update(). void ROOT::Experimental::RCanvas::Update ; (; bool ; async = false, . CanvasCallback_t ; callback = nullptr . ). update drawing ; Update canvas. ; Definition at line 78 of file RCanvas.cxx. Friends And Related Symbol Documentation. ◆ RCanvasPainter. friend class RCanvasPainter. friend . use for ID generation ; Definition at line 49 of file RCanvas.hxx. ◆ RChangeAttrRequest. friend class RChangeAttrRequest. friend . used for primitives drawing ; Definition at line 50 of file RCanvas.hxx. ◆ RPadBase. friend class RPadBase. friend . Definition at line 48 of file RCanvas.hxx. Member Data Documentation. ◆ fHeight. int ROOT::Experimental::RCanvas::fHeight {0}. private . Height of the canvas in pixels. ; Definition at line 59 of file RCanvas.hxx. ◆ fModified. Version_t ROOT::Experimental::RCanvas::fModified {1}. private . Modify counter, incremented every time canvas is changed. ; ! ; Definition at line 62 of file RCanvas.hxx. ◆ fPainter. std::unique_ptr<Internal::RVirtualCanvasPainter> ROOT::Experimental::RCanvas::fPainter. private . The painter of this canvas, bootstrapping the graphics connection. ; Unmapped canvas",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html:3340,Modifiability,inherit,inherited,3340,"wable);  Set newest version to specified drawable. ;  ; void Remove ();  Remove canvas from global canvas lists, will be destroyed when shared_ptr will be removed. ;  ; void ResolveSharedPtrs ();  To resolve problem with storing of shared pointers Call this method when reading canvas from the file Can be called many times - after reinitialization of shared pointers no changes will be performed. ;  ; void Run (double tm=0.);  Run canvas functionality for given time (in seconds) ;  ; bool SaveAs (const std::string &filename);  Save canvas in image file. ;  ; void SetHeight (int height);  Set canvas height. ;  ; void SetSize (int width, int height);  Set canvas pixel size - width and height. ;  ; RCanvas & SetTitle (const std::string &title);  Set the canvas's title. ;  ; void SetWidth (int width);  Set canvas width. ;  ; void Show (const std::string &where="""");  Display the canvas. ;  ; void Update (bool async=false, CanvasCallback_t callback=nullptr);  update drawing ;  ;  Public Member Functions inherited from ROOT::Experimental::RPadBase;  ~RPadBase () override;  ; template<class T , class... ARGS> ; std::shared_ptr< T > Add (ARGS... args);  Add drawable of specified class T. ;  ; std::shared_ptr< RFrame > AddFrame ();  Add a frame object for the pad. ;  ; std::shared_ptr< RPad > AddPad (const RPadPos &, const RPadExtent &);  Add subpad. ;  ; std::vector< std::vector< std::shared_ptr< RPad > > > Divide (int nHoriz, int nVert, const RPadExtent &padding={});  Divide this pad into a grid of subpads with padding in between. ;  ; template<class T , class... ARGS> ; std::shared_ptr< T > Draw (ARGS... args);  Create drawable of specified class T. ;  ; template<class T , class... ARGS> ; auto Draw (const std::shared_ptr< T > &what, ARGS... args);  Add object to be painted. ;  ; std::shared_ptr< RDrawable > Draw (std::shared_ptr< RDrawable > &&drawable);  Add existing drawable instance to canvas. ;  ; const RPadBase * FindPadForPrimitiveWithDisplayId (const std::string &dis",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html:5650,Modifiability,inherit,inherited,5650,"ists. ;  ; const std::shared_ptr< RFrame > GetFrame () const;  Get a frame object if exists. ;  ; std::shared_ptr< RDrawable > GetPrimitive (unsigned num) const;  returns primitive of given number ;  ; auto GetPrimitives () const;  Get all primitives contained in the pad. ;  ; unsigned NumPrimitives () const;  returns number of primitives in the pad ;  ; bool Remove (const std::shared_ptr< RDrawable > &drawable);  Remove drawable from list of primitives. ;  ; bool Remove (const std::string &id);  Remove an object from the list of primitives. ;  ; bool RemoveAt (unsigned indx);  Remove drawable at specified position. ;  ; void UseStyle (const std::shared_ptr< RStyle > &style) override;  Use provided style for pad and all primitives inside. ;  ; void Wipe ();  Wipe the pad by clearing the list of primitives. ;  ;  Public Member Functions inherited from ROOT::Experimental::RDrawable;  RDrawable (const char *csstype);  ; virtual ~RDrawable ();  ; void ClearStyle ();  ; const std::string & GetCssClass () const;  ; const char * GetCssType () const;  ; const std::string & GetId () const;  ; void SetCssClass (const std::string &cl);  ; void SetId (const std::string &id);  . Static Public Member Functions; static std::shared_ptr< RCanvas > Create (const std::string &title);  Create new canvas instance. ;  ; static const std::vector< std::shared_ptr< RCanvas > > GetCanvases ();  Returns list of created canvases. ;  ; static void ReleaseHeldCanvases ();  Release list of held canvases pointers If no other shared pointers exists on the canvas, object will be destroyed. ;  . Private Member Functions;  RCanvas (const RCanvas &)=delete;  Disable copy construction for now. ;  ; uint64_t IncModified ();  ; RCanvas & operator= (const RCanvas &)=delete;  Disable assignment for now. ;  . Private Attributes; int fHeight {0};  Height of the canvas in pixels. ;  ; Version_t fModified {1};  Modify counter, incremented every time canvas is changed. ;  ; std::unique_ptr< Internal::RVirtualCanv",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html:7333,Modifiability,inherit,inherited,7333,"int64_t IncModified ();  ; RCanvas & operator= (const RCanvas &)=delete;  Disable assignment for now. ;  . Private Attributes; int fHeight {0};  Height of the canvas in pixels. ;  ; Version_t fModified {1};  Modify counter, incremented every time canvas is changed. ;  ; std::unique_ptr< Internal::RVirtualCanvasPainter > fPainter;  The painter of this canvas, bootstrapping the graphics connection. ;  ; bool fShown {false};  indicate if Show() method was called before ;  ; std::string fTitle;  to apply attributes changes ;  ; bool fUpdated {false};  indicate if Update() method was called before ;  ; int fWidth {0};  Width of the canvas in pixels. ;  . Friends; class RCanvasPainter;  use for ID generation ;  ; class RChangeAttrRequest;  used for primitives drawing ;  ; class RPadBase;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::RPadBase; using Primitives_t = std::vector< std::shared_ptr< RDrawable > >;  ;  Public Types inherited from ROOT::Experimental::RDrawable; using Version_t = uint64_t;  ;  Protected Member Functions inherited from ROOT::Experimental::RPadBase;  RPadBase (const char *csstype);  Allow derived classes to default construct a RPadBase. ;  ; void CollectShared (Internal::RIOSharedVector_t &) override;  Collect all shared items to resolve shared_ptr after IO. ;  ; void DisplayPrimitives (RPadBaseDisplayItem &paditem, RDisplayContext &ctxt);  Create display items for all primitives in the pad Each display item gets its special id, which used later for client-server communication Second parameter is version id which already delivered to the client. ;  ; void SetDrawableVersion (Version_t vers) override;  Assign drawable version - for pad itself and all primitives. ;  ;  Protected Member Functions inherited from ROOT::Experimental::RDrawable;  RDrawable (const RDrawable &)=delete;  ; virtual std::unique_ptr< RDisplayItem > Display (const RDisplayContext &);  Creates display item for drawable By default item contains dra",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html:7461,Modifiability,inherit,inherited,7461,"int64_t IncModified ();  ; RCanvas & operator= (const RCanvas &)=delete;  Disable assignment for now. ;  . Private Attributes; int fHeight {0};  Height of the canvas in pixels. ;  ; Version_t fModified {1};  Modify counter, incremented every time canvas is changed. ;  ; std::unique_ptr< Internal::RVirtualCanvasPainter > fPainter;  The painter of this canvas, bootstrapping the graphics connection. ;  ; bool fShown {false};  indicate if Show() method was called before ;  ; std::string fTitle;  to apply attributes changes ;  ; bool fUpdated {false};  indicate if Update() method was called before ;  ; int fWidth {0};  Width of the canvas in pixels. ;  . Friends; class RCanvasPainter;  use for ID generation ;  ; class RChangeAttrRequest;  used for primitives drawing ;  ; class RPadBase;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::RPadBase; using Primitives_t = std::vector< std::shared_ptr< RDrawable > >;  ;  Public Types inherited from ROOT::Experimental::RDrawable; using Version_t = uint64_t;  ;  Protected Member Functions inherited from ROOT::Experimental::RPadBase;  RPadBase (const char *csstype);  Allow derived classes to default construct a RPadBase. ;  ; void CollectShared (Internal::RIOSharedVector_t &) override;  Collect all shared items to resolve shared_ptr after IO. ;  ; void DisplayPrimitives (RPadBaseDisplayItem &paditem, RDisplayContext &ctxt);  Create display items for all primitives in the pad Each display item gets its special id, which used later for client-server communication Second parameter is version id which already delivered to the client. ;  ; void SetDrawableVersion (Version_t vers) override;  Assign drawable version - for pad itself and all primitives. ;  ;  Protected Member Functions inherited from ROOT::Experimental::RDrawable;  RDrawable (const RDrawable &)=delete;  ; virtual std::unique_ptr< RDisplayItem > Display (const RDisplayContext &);  Creates display item for drawable By default item contains dra",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html:7566,Modifiability,inherit,inherited,7566,"int64_t IncModified ();  ; RCanvas & operator= (const RCanvas &)=delete;  Disable assignment for now. ;  . Private Attributes; int fHeight {0};  Height of the canvas in pixels. ;  ; Version_t fModified {1};  Modify counter, incremented every time canvas is changed. ;  ; std::unique_ptr< Internal::RVirtualCanvasPainter > fPainter;  The painter of this canvas, bootstrapping the graphics connection. ;  ; bool fShown {false};  indicate if Show() method was called before ;  ; std::string fTitle;  to apply attributes changes ;  ; bool fUpdated {false};  indicate if Update() method was called before ;  ; int fWidth {0};  Width of the canvas in pixels. ;  . Friends; class RCanvasPainter;  use for ID generation ;  ; class RChangeAttrRequest;  used for primitives drawing ;  ; class RPadBase;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::RPadBase; using Primitives_t = std::vector< std::shared_ptr< RDrawable > >;  ;  Public Types inherited from ROOT::Experimental::RDrawable; using Version_t = uint64_t;  ;  Protected Member Functions inherited from ROOT::Experimental::RPadBase;  RPadBase (const char *csstype);  Allow derived classes to default construct a RPadBase. ;  ; void CollectShared (Internal::RIOSharedVector_t &) override;  Collect all shared items to resolve shared_ptr after IO. ;  ; void DisplayPrimitives (RPadBaseDisplayItem &paditem, RDisplayContext &ctxt);  Create display items for all primitives in the pad Each display item gets its special id, which used later for client-server communication Second parameter is version id which already delivered to the client. ;  ; void SetDrawableVersion (Version_t vers) override;  Assign drawable version - for pad itself and all primitives. ;  ;  Protected Member Functions inherited from ROOT::Experimental::RDrawable;  RDrawable (const RDrawable &)=delete;  ; virtual std::unique_ptr< RDisplayItem > Display (const RDisplayContext &);  Creates display item for drawable By default item contains dra",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html:8268,Modifiability,inherit,inherited,8268,"ase; using Primitives_t = std::vector< std::shared_ptr< RDrawable > >;  ;  Public Types inherited from ROOT::Experimental::RDrawable; using Version_t = uint64_t;  ;  Protected Member Functions inherited from ROOT::Experimental::RPadBase;  RPadBase (const char *csstype);  Allow derived classes to default construct a RPadBase. ;  ; void CollectShared (Internal::RIOSharedVector_t &) override;  Collect all shared items to resolve shared_ptr after IO. ;  ; void DisplayPrimitives (RPadBaseDisplayItem &paditem, RDisplayContext &ctxt);  Create display items for all primitives in the pad Each display item gets its special id, which used later for client-server communication Second parameter is version id which already delivered to the client. ;  ; void SetDrawableVersion (Version_t vers) override;  Assign drawable version - for pad itself and all primitives. ;  ;  Protected Member Functions inherited from ROOT::Experimental::RDrawable;  RDrawable (const RDrawable &)=delete;  ; virtual std::unique_ptr< RDisplayItem > Display (const RDisplayContext &);  Creates display item for drawable By default item contains drawable data itself. ;  ; virtual void Execute (const std::string &);  ; RAttrMap & GetAttrMap ();  ; const RAttrMap & GetAttrMap () const;  ; Version_t GetVersion () const;  ; virtual bool IsFrameRequired () const;  ; bool MatchSelector (const std::string &selector) const;  Preliminary method which checks if drawable matches with given selector Following selector are allowed: ""type"" or ""#id"" or "".class_name"" Here type is drawable kind like 'rect' or 'pad' id is drawable identifier, specified with RDrawable::SetId() method class_name is drawable class name, specified with RDrawable::SetCssClass() method. ;  ; virtual void OnDisplayItemDestroyed (RDisplayItem *) const;  ; RDrawable & operator= (const RDrawable &)=delete;  ; virtual void PopulateMenu (RMenuItems &);  ; void SetCssType (const char *csstype);  . #include <ROOT/RCanvas.hxx>. Inheritance diagram for ROOT::Ex",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html:2716,Performance,perform,performed,2716," () const;  Get the canvas's title. ;  ; std::string GetUID () const;  Return unique identifier for the canvas Used in iPython display. ;  ; int GetWidth () const;  Get canvas width. ;  ; std::string GetWindowAddr () const;  Returns window name used to display canvas. ;  ; std::string GetWindowUrl (bool remote);  Returns window URL which can be used for connection. ;  ; void Hide ();  Hide all canvas displays. ;  ; bool IsModified () const;  Returns true is canvas was modified since last painting. ;  ; bool IsShown () const;  returns true if Show() method was called ;  ; bool IsUpdated () const;  returns true if Update() method was called ;  ; void Modified ();  ; void Modified (std::shared_ptr< RDrawable > drawable);  Set newest version to specified drawable. ;  ; void Remove ();  Remove canvas from global canvas lists, will be destroyed when shared_ptr will be removed. ;  ; void ResolveSharedPtrs ();  To resolve problem with storing of shared pointers Call this method when reading canvas from the file Can be called many times - after reinitialization of shared pointers no changes will be performed. ;  ; void Run (double tm=0.);  Run canvas functionality for given time (in seconds) ;  ; bool SaveAs (const std::string &filename);  Save canvas in image file. ;  ; void SetHeight (int height);  Set canvas height. ;  ; void SetSize (int width, int height);  Set canvas pixel size - width and height. ;  ; RCanvas & SetTitle (const std::string &title);  Set the canvas's title. ;  ; void SetWidth (int width);  Set canvas width. ;  ; void Show (const std::string &where="""");  Display the canvas. ;  ; void Update (bool async=false, CanvasCallback_t callback=nullptr);  update drawing ;  ;  Public Member Functions inherited from ROOT::Experimental::RPadBase;  ~RPadBase () override;  ; template<class T , class... ARGS> ; std::shared_ptr< T > Add (ARGS... args);  Add drawable of specified class T. ;  ; std::shared_ptr< RFrame > AddFrame ();  Add a frame object for the pad. ;  ; st",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html:15295,Performance,perform,performed,15295,"hared_ptr< RDrawable > ; drawable). inline . Set newest version to specified drawable. ; Definition at line 152 of file RCanvas.hxx. ◆ operator=(). RCanvas & ROOT::Experimental::RCanvas::operator= ; (; const RCanvas & ; ). privatedelete . Disable assignment for now. . ◆ ReleaseHeldCanvases(). void ROOT::Experimental::RCanvas::ReleaseHeldCanvases ; (; ). static . Release list of held canvases pointers If no other shared pointers exists on the canvas, object will be destroyed. ; Definition at line 56 of file RCanvas.cxx. ◆ Remove(). void ROOT::Experimental::RCanvas::Remove ; (; ). Remove canvas from global canvas lists, will be destroyed when shared_ptr will be removed. ; Remove canvas from global canvas lists, will be destroyed once last shared_ptr is disappear. ; Definition at line 225 of file RCanvas.cxx. ◆ ResolveSharedPtrs(). void ROOT::Experimental::RCanvas::ResolveSharedPtrs ; (; ). To resolve problem with storing of shared pointers Call this method when reading canvas from the file Can be called many times - after reinitialization of shared pointers no changes will be performed. ; Definition at line 299 of file RCanvas.cxx. ◆ Run(). void ROOT::Experimental::RCanvas::Run ; (; double ; tm = 0.). Run canvas functionality for given time (in seconds) ; Run canvas functionality for the given time (in seconds) Used to process canvas-related actions in the appropriate thread context.; Must be regularly called when canvas created and used in extra thread. Time parameter specifies minimal execution time in seconds - if default value 0 is used, just all pending actions will be performed. When canvas is not yet displayed - just performs sleep for given time interval.; Example of usage:; void draw_canvas(bool &run_loop, std::make_shared<RH1D> hist); {; auto canvas = RCanvas::Create(""Canvas title"");; canvas->Draw(hist)->SetLineColor(RColor::kBlue);; canvas->Show();; while (run_loop) {; pHist->Fill(1);; canvas->Modified();; canvas->Update();; canvas->Run(0.1); // process canv",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html:15803,Performance,perform,performed,15803,"ROOT::Experimental::RCanvas::Remove ; (; ). Remove canvas from global canvas lists, will be destroyed when shared_ptr will be removed. ; Remove canvas from global canvas lists, will be destroyed once last shared_ptr is disappear. ; Definition at line 225 of file RCanvas.cxx. ◆ ResolveSharedPtrs(). void ROOT::Experimental::RCanvas::ResolveSharedPtrs ; (; ). To resolve problem with storing of shared pointers Call this method when reading canvas from the file Can be called many times - after reinitialization of shared pointers no changes will be performed. ; Definition at line 299 of file RCanvas.cxx. ◆ Run(). void ROOT::Experimental::RCanvas::Run ; (; double ; tm = 0.). Run canvas functionality for given time (in seconds) ; Run canvas functionality for the given time (in seconds) Used to process canvas-related actions in the appropriate thread context.; Must be regularly called when canvas created and used in extra thread. Time parameter specifies minimal execution time in seconds - if default value 0 is used, just all pending actions will be performed. When canvas is not yet displayed - just performs sleep for given time interval.; Example of usage:; void draw_canvas(bool &run_loop, std::make_shared<RH1D> hist); {; auto canvas = RCanvas::Create(""Canvas title"");; canvas->Draw(hist)->SetLineColor(RColor::kBlue);; canvas->Show();; while (run_loop) {; pHist->Fill(1);; canvas->Modified();; canvas->Update();; canvas->Run(0.1); // process canvas events; }; ; canvas->Remove();; }; ; int main(); {; RAxisConfig xaxis(100, -10., 10.);; auto pHist = std::make_shared<RH1D>(xaxis);; bool run_loop = true;; ; std::thread thrd(draw_canvas, run_loop, pHist);; std::this_thread::sleep_for(std::chrono::seconds(100));; run_loop = false;; thrd.join();; return 0;; }; mainint main()Definition Prototype.cxx:12; ROOT::Experimental::RCanvas::Createstatic std::shared_ptr< RCanvas > Create(const std::string &title)Create new canvas instance.Definition RCanvas.cxx:89; ROOT::Experimental::RColor::kB",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html:15854,Performance,perform,performs,15854,"shared_ptr will be removed. ; Remove canvas from global canvas lists, will be destroyed once last shared_ptr is disappear. ; Definition at line 225 of file RCanvas.cxx. ◆ ResolveSharedPtrs(). void ROOT::Experimental::RCanvas::ResolveSharedPtrs ; (; ). To resolve problem with storing of shared pointers Call this method when reading canvas from the file Can be called many times - after reinitialization of shared pointers no changes will be performed. ; Definition at line 299 of file RCanvas.cxx. ◆ Run(). void ROOT::Experimental::RCanvas::Run ; (; double ; tm = 0.). Run canvas functionality for given time (in seconds) ; Run canvas functionality for the given time (in seconds) Used to process canvas-related actions in the appropriate thread context.; Must be regularly called when canvas created and used in extra thread. Time parameter specifies minimal execution time in seconds - if default value 0 is used, just all pending actions will be performed. When canvas is not yet displayed - just performs sleep for given time interval.; Example of usage:; void draw_canvas(bool &run_loop, std::make_shared<RH1D> hist); {; auto canvas = RCanvas::Create(""Canvas title"");; canvas->Draw(hist)->SetLineColor(RColor::kBlue);; canvas->Show();; while (run_loop) {; pHist->Fill(1);; canvas->Modified();; canvas->Update();; canvas->Run(0.1); // process canvas events; }; ; canvas->Remove();; }; ; int main(); {; RAxisConfig xaxis(100, -10., 10.);; auto pHist = std::make_shared<RH1D>(xaxis);; bool run_loop = true;; ; std::thread thrd(draw_canvas, run_loop, pHist);; std::this_thread::sleep_for(std::chrono::seconds(100));; run_loop = false;; thrd.join();; return 0;; }; mainint main()Definition Prototype.cxx:12; ROOT::Experimental::RCanvas::Createstatic std::shared_ptr< RCanvas > Create(const std::string &title)Create new canvas instance.Definition RCanvas.cxx:89; ROOT::Experimental::RColor::kBluestatic R__DLLEXPORT constexpr RGB_t kBlueDefinition RColor.hxx:186. Definition at line 285 of file RCan",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html:1048,Usability,clear,cleared,1048,"imental::RCanvas Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::Experimental::RCanvas Class ReferenceGraphics » ROOT7 Graphics » ROOT7 Pad related classes. ; A window's topmost RPad. ; AuthorAxel Naumann axel@.nosp@m.cern.nosp@m..ch ; Date2015-07-08 ; WarningThis is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome! ; Definition at line 47 of file RCanvas.hxx. Public Member Functions;  RCanvas ();  Create a temporary RCanvas; for long-lived ones please use Create(). ;  ;  ~RCanvas () override=default;  ; template<class PANEL > ; bool AddPanel (std::shared_ptr< PANEL > &panel);  Insert panel into the canvas, canvas should be shown at this moment. ;  ; void ClearOnClose (const std::shared_ptr< void > &handle);  Set handle which will be cleared when connection is closed. ;  ; void ClearShown ();  clear IsShown() flag ;  ; void ClearUpdated ();  clear IsUpdated() flag ;  ; std::string CreateJSON ();  Provide JSON which can be used for offline display. ;  ; const RCanvas * GetCanvas () const override;  Access to the top-most canvas, if any (const version). ;  ; RCanvas * GetCanvas () override;  Access to the top-most canvas, if any (non-const version). ;  ; int GetHeight () const;  Get canvas height. ;  ; uint64_t GetModified () const;  Get modify counter. ;  ; const std::string & GetTitle () const;  Get the canvas's title. ;  ; std::string GetUID () const;  Return unique identifier for the canvas Used in iPython display. ;  ; int GetWidth () const;  Get canvas width. ;  ; std::string GetWindowAddr () const;  Returns window name used to display canvas. ;  ; std::string GetWindowUrl (bool remote);  Returns window URL which can be used for connection. ;  ; void Hide ();  Hide all canvas display",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html:1109,Usability,clear,clear,1109,"nctions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::Experimental::RCanvas Class ReferenceGraphics » ROOT7 Graphics » ROOT7 Pad related classes. ; A window's topmost RPad. ; AuthorAxel Naumann axel@.nosp@m.cern.nosp@m..ch ; Date2015-07-08 ; WarningThis is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome! ; Definition at line 47 of file RCanvas.hxx. Public Member Functions;  RCanvas ();  Create a temporary RCanvas; for long-lived ones please use Create(). ;  ;  ~RCanvas () override=default;  ; template<class PANEL > ; bool AddPanel (std::shared_ptr< PANEL > &panel);  Insert panel into the canvas, canvas should be shown at this moment. ;  ; void ClearOnClose (const std::shared_ptr< void > &handle);  Set handle which will be cleared when connection is closed. ;  ; void ClearShown ();  clear IsShown() flag ;  ; void ClearUpdated ();  clear IsUpdated() flag ;  ; std::string CreateJSON ();  Provide JSON which can be used for offline display. ;  ; const RCanvas * GetCanvas () const override;  Access to the top-most canvas, if any (const version). ;  ; RCanvas * GetCanvas () override;  Access to the top-most canvas, if any (non-const version). ;  ; int GetHeight () const;  Get canvas height. ;  ; uint64_t GetModified () const;  Get modify counter. ;  ; const std::string & GetTitle () const;  Get the canvas's title. ;  ; std::string GetUID () const;  Return unique identifier for the canvas Used in iPython display. ;  ; int GetWidth () const;  Get canvas width. ;  ; std::string GetWindowAddr () const;  Returns window name used to display canvas. ;  ; std::string GetWindowUrl (bool remote);  Returns window URL which can be used for connection. ;  ; void Hide ();  Hide all canvas displays. ;  ; bool IsModified () const;  Returns true is canvas was modified since last painting. ;  ; bool IsShown () const;  returns true if Show() method was",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html:1158,Usability,clear,clear,1158,"nctions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::Experimental::RCanvas Class ReferenceGraphics » ROOT7 Graphics » ROOT7 Pad related classes. ; A window's topmost RPad. ; AuthorAxel Naumann axel@.nosp@m.cern.nosp@m..ch ; Date2015-07-08 ; WarningThis is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome! ; Definition at line 47 of file RCanvas.hxx. Public Member Functions;  RCanvas ();  Create a temporary RCanvas; for long-lived ones please use Create(). ;  ;  ~RCanvas () override=default;  ; template<class PANEL > ; bool AddPanel (std::shared_ptr< PANEL > &panel);  Insert panel into the canvas, canvas should be shown at this moment. ;  ; void ClearOnClose (const std::shared_ptr< void > &handle);  Set handle which will be cleared when connection is closed. ;  ; void ClearShown ();  clear IsShown() flag ;  ; void ClearUpdated ();  clear IsUpdated() flag ;  ; std::string CreateJSON ();  Provide JSON which can be used for offline display. ;  ; const RCanvas * GetCanvas () const override;  Access to the top-most canvas, if any (const version). ;  ; RCanvas * GetCanvas () override;  Access to the top-most canvas, if any (non-const version). ;  ; int GetHeight () const;  Get canvas height. ;  ; uint64_t GetModified () const;  Get modify counter. ;  ; const std::string & GetTitle () const;  Get the canvas's title. ;  ; std::string GetUID () const;  Return unique identifier for the canvas Used in iPython display. ;  ; int GetWidth () const;  Get canvas width. ;  ; std::string GetWindowAddr () const;  Returns window name used to display canvas. ;  ; std::string GetWindowUrl (bool remote);  Returns window URL which can be used for connection. ;  ; void Hide ();  Hide all canvas displays. ;  ; bool IsModified () const;  Returns true is canvas was modified since last painting. ;  ; bool IsShown () const;  returns true if Show() method was",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html:5587,Usability,clear,clearing,5587,"t std::string &display_id) const;  Find primitive with unique id, produce for RDisplayItem Such id used for client-server identification of objects. ;  ; std::shared_ptr< RFrame > GetFrame ();  Get a frame object if exists. ;  ; const std::shared_ptr< RFrame > GetFrame () const;  Get a frame object if exists. ;  ; std::shared_ptr< RDrawable > GetPrimitive (unsigned num) const;  returns primitive of given number ;  ; auto GetPrimitives () const;  Get all primitives contained in the pad. ;  ; unsigned NumPrimitives () const;  returns number of primitives in the pad ;  ; bool Remove (const std::shared_ptr< RDrawable > &drawable);  Remove drawable from list of primitives. ;  ; bool Remove (const std::string &id);  Remove an object from the list of primitives. ;  ; bool RemoveAt (unsigned indx);  Remove drawable at specified position. ;  ; void UseStyle (const std::shared_ptr< RStyle > &style) override;  Use provided style for pad and all primitives inside. ;  ; void Wipe ();  Wipe the pad by clearing the list of primitives. ;  ;  Public Member Functions inherited from ROOT::Experimental::RDrawable;  RDrawable (const char *csstype);  ; virtual ~RDrawable ();  ; void ClearStyle ();  ; const std::string & GetCssClass () const;  ; const char * GetCssType () const;  ; const std::string & GetId () const;  ; void SetCssClass (const std::string &cl);  ; void SetId (const std::string &id);  . Static Public Member Functions; static std::shared_ptr< RCanvas > Create (const std::string &title);  Create new canvas instance. ;  ; static const std::vector< std::shared_ptr< RCanvas > > GetCanvases ();  Returns list of created canvases. ;  ; static void ReleaseHeldCanvases ();  Release list of held canvases pointers If no other shared pointers exists on the canvas, object will be destroyed. ;  . Private Member Functions;  RCanvas (const RCanvas &)=delete;  Disable copy construction for now. ;  ; uint64_t IncModified ();  ; RCanvas & operator= (const RCanvas &)=delete;  Disable assignment",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html:10348,Usability,clear,cleared,10348," diagram for ROOT::Experimental::RCanvas:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RCanvas() [1/2]. ROOT::Experimental::RCanvas::RCanvas ; (; const RCanvas & ; ). privatedelete . Disable copy construction for now. . ◆ RCanvas() [2/2]. ROOT::Experimental::RCanvas::RCanvas ; (; ). inline . Create a temporary RCanvas; for long-lived ones please use Create(). ; Definition at line 88 of file RCanvas.hxx. ◆ ~RCanvas(). ROOT::Experimental::RCanvas::~RCanvas ; (; ). overridedefault . Member Function Documentation. ◆ AddPanel(). template<class PANEL > . bool ROOT::Experimental::RCanvas::AddPanel ; (; std::shared_ptr< PANEL > & ; panel). inline . Insert panel into the canvas, canvas should be shown at this moment. ; Definition at line 139 of file RCanvas.hxx. ◆ ClearOnClose(). void ROOT::Experimental::RCanvas::ClearOnClose ; (; const std::shared_ptr< void > & ; handle). Set handle which will be cleared when connection is closed. ; Definition at line 239 of file RCanvas.cxx. ◆ ClearShown(). void ROOT::Experimental::RCanvas::ClearShown ; (; ). inline . clear IsShown() flag ; Definition at line 123 of file RCanvas.hxx. ◆ ClearUpdated(). void ROOT::Experimental::RCanvas::ClearUpdated ; (; ). inline . clear IsUpdated() flag ; Definition at line 169 of file RCanvas.hxx. ◆ Create(). std::shared_ptr< ROOT::Experimental::RCanvas > ROOT::Experimental::RCanvas::Create ; (; const std::string & ; title). static . Create new canvas instance. ; Definition at line 89 of file RCanvas.cxx. ◆ CreateJSON(). std::string ROOT::Experimental::RCanvas::CreateJSON ; (; ). Provide JSON which can be used for offline display. ; Create JSON data for the canvas Can be used of offline display with JSROOT. ; Definition at line 211 of file RCanvas.cxx. ◆ GetCanvas() [1/2]. const RCanvas * ROOT::Experimental::RCanvas::GetCanvas ; (; ); const. inlineoverridevirtual . Access to the top-most canvas, if any (const ver",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html:10507,Usability,clear,clear,10507,"vas() [1/2]. ROOT::Experimental::RCanvas::RCanvas ; (; const RCanvas & ; ). privatedelete . Disable copy construction for now. . ◆ RCanvas() [2/2]. ROOT::Experimental::RCanvas::RCanvas ; (; ). inline . Create a temporary RCanvas; for long-lived ones please use Create(). ; Definition at line 88 of file RCanvas.hxx. ◆ ~RCanvas(). ROOT::Experimental::RCanvas::~RCanvas ; (; ). overridedefault . Member Function Documentation. ◆ AddPanel(). template<class PANEL > . bool ROOT::Experimental::RCanvas::AddPanel ; (; std::shared_ptr< PANEL > & ; panel). inline . Insert panel into the canvas, canvas should be shown at this moment. ; Definition at line 139 of file RCanvas.hxx. ◆ ClearOnClose(). void ROOT::Experimental::RCanvas::ClearOnClose ; (; const std::shared_ptr< void > & ; handle). Set handle which will be cleared when connection is closed. ; Definition at line 239 of file RCanvas.cxx. ◆ ClearShown(). void ROOT::Experimental::RCanvas::ClearShown ; (; ). inline . clear IsShown() flag ; Definition at line 123 of file RCanvas.hxx. ◆ ClearUpdated(). void ROOT::Experimental::RCanvas::ClearUpdated ; (; ). inline . clear IsUpdated() flag ; Definition at line 169 of file RCanvas.hxx. ◆ Create(). std::shared_ptr< ROOT::Experimental::RCanvas > ROOT::Experimental::RCanvas::Create ; (; const std::string & ; title). static . Create new canvas instance. ; Definition at line 89 of file RCanvas.cxx. ◆ CreateJSON(). std::string ROOT::Experimental::RCanvas::CreateJSON ; (; ). Provide JSON which can be used for offline display. ; Create JSON data for the canvas Can be used of offline display with JSROOT. ; Definition at line 211 of file RCanvas.cxx. ◆ GetCanvas() [1/2]. const RCanvas * ROOT::Experimental::RCanvas::GetCanvas ; (; ); const. inlineoverridevirtual . Access to the top-most canvas, if any (const version). ; Implements ROOT::Experimental::RPadBase.; Definition at line 92 of file RCanvas.hxx. ◆ GetCanvas() [2/2]. RCanvas * ROOT::Experimental::RCanvas::GetCanvas ; (; ). inlineoverride",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html:10656,Usability,clear,clear,10656,"OT::Experimental::RCanvas::RCanvas ; (; ). inline . Create a temporary RCanvas; for long-lived ones please use Create(). ; Definition at line 88 of file RCanvas.hxx. ◆ ~RCanvas(). ROOT::Experimental::RCanvas::~RCanvas ; (; ). overridedefault . Member Function Documentation. ◆ AddPanel(). template<class PANEL > . bool ROOT::Experimental::RCanvas::AddPanel ; (; std::shared_ptr< PANEL > & ; panel). inline . Insert panel into the canvas, canvas should be shown at this moment. ; Definition at line 139 of file RCanvas.hxx. ◆ ClearOnClose(). void ROOT::Experimental::RCanvas::ClearOnClose ; (; const std::shared_ptr< void > & ; handle). Set handle which will be cleared when connection is closed. ; Definition at line 239 of file RCanvas.cxx. ◆ ClearShown(). void ROOT::Experimental::RCanvas::ClearShown ; (; ). inline . clear IsShown() flag ; Definition at line 123 of file RCanvas.hxx. ◆ ClearUpdated(). void ROOT::Experimental::RCanvas::ClearUpdated ; (; ). inline . clear IsUpdated() flag ; Definition at line 169 of file RCanvas.hxx. ◆ Create(). std::shared_ptr< ROOT::Experimental::RCanvas > ROOT::Experimental::RCanvas::Create ; (; const std::string & ; title). static . Create new canvas instance. ; Definition at line 89 of file RCanvas.cxx. ◆ CreateJSON(). std::string ROOT::Experimental::RCanvas::CreateJSON ; (; ). Provide JSON which can be used for offline display. ; Create JSON data for the canvas Can be used of offline display with JSROOT. ; Definition at line 211 of file RCanvas.cxx. ◆ GetCanvas() [1/2]. const RCanvas * ROOT::Experimental::RCanvas::GetCanvas ; (; ); const. inlineoverridevirtual . Access to the top-most canvas, if any (const version). ; Implements ROOT::Experimental::RPadBase.; Definition at line 92 of file RCanvas.hxx. ◆ GetCanvas() [2/2]. RCanvas * ROOT::Experimental::RCanvas::GetCanvas ; (; ). inlineoverridevirtual . Access to the top-most canvas, if any (non-const version). ; Implements ROOT::Experimental::RPadBase.; Definition at line 95 of file RCanvas",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html:932,Deployability,update,updated,932,". ROOT: ROOT::Experimental::RCanvasPainter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Experimental::RCanvasPainter Class ReferenceWeb Widgets. ; Implementation of painter for ROOT::Experimental::RCanvas, using RWebWindow. ; Definition at line 61 of file RCanvasPainter.cxx. Classes; class  GeneratorImpl;  ; struct  WebCommand;  ; struct  WebConn;  ; struct  WebUpdate;  . Public Member Functions;  RCanvasPainter (RCanvas &canv);  Constructor. ;  ; virtual ~RCanvasPainter ();  Destructor. ;  ; bool AddPanel (std::shared_ptr< ROOT::RWebWindow >) final;  Add window as panel inside canvas window. ;  ; void CanvasUpdated (uint64_t ver, bool async, CanvasCallback_t callback) final;  Method invoked when canvas should be updated on the client side Depending from delivered status, each client will received new data. ;  ; void DoWhenReady (const std::string &name, const std::string &arg, bool async, CanvasCallback_t callback) final;  perform special action when drawing is ready ;  ; std::string GetWindowAddr () const final;  Returns web window name. ;  ; std::string GetWindowUrl (bool remote) final;  Returns connection URL for web window. ;  ; bool IsCanvasModified (uint64_t id) const final;  return true if canvas modified since last painting ;  ; void NewDisplay (const std::string &where) final;  Create new display for the canvas See ROOT::RWebWindowsManager::Show() docu for more info. ;  ; int NumDisplays () const final;  Returns number of connected displays. ;  ; bool ProduceBatchOutput (const std::string &fname, int width, int height) final;  Produce batch output, using chrome headless mode with DOM dump. ;  ; std::string ProduceJSON () final;  Produce JSON for the canvas. ;  ; void Run (double tm=0.) final;  Run canvas functionality for specified period of time Requi",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html:4412,Deployability,update,update,4412,"imitive (const RCanvas &can, const std::string &id, const RPadBase **subpad=nullptr);  Find drawable in the canvas with specified id Used to communicate with the clients, which does not have any pointer. ;  ; void FrontCommandReplied (const std::string &reply);  Process reply on the currently active command. ;  ; RCanvasPainter & operator= (const RCanvasPainter &)=delete;  Disable assignment. ;  ; void ProcessData (unsigned connid, const std::string &arg);  Process data from the client. ;  ; void SaveCreatedFile (std::string &reply);  Method called when GUI sends file to save on local disk File data coded with base64 coding beside SVG format. ;  . Private Attributes; RCanvas & fCanvas;  ! Canvas we are painting, *this will be owned by canvas ;  ; std::list< std::shared_ptr< WebCommand > > fCmds;  ! list of submitted commands ;  ; uint64_t fCmdsCnt {0};  ! commands counter ;  ; std::vector< std::unique_ptr< ROOT::RWebDisplayHandle > > fHelpHandles;  ! array of handles for help widgets ;  ; int fJsonComp {23};  ! json compression for data send to client ;  ; uint64_t fSnapshotDelivered {0};  ! minimal version delivered to all connections ;  ; std::list< WebUpdate > fUpdatesLst;  ! list of callbacks for canvas update ;  ; std::list< WebConn > fWebConn;  !< configured display ;  ; std::shared_ptr< ROOT::RWebWindow > fWindow;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::Experimental::Internal::RVirtualCanvasPainter; static std::unique_ptr< RVirtualCanvasPainter > Create (RCanvas &canv);  Loads the plugin that implements this class. ;  ;  Static Protected Member Functions inherited from ROOT::Experimental::Internal::RVirtualCanvasPainter; static std::unique_ptr< Generator > & GetGenerator ();  generator getter ;  . Inheritance diagram for ROOT::Experimental::RCanvasPainter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ MenuItemsVector. typedef std::v",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html:6691,Deployability,update,updated,6691,"; (; ). virtual . Destructor. ; Definition at line 228 of file RCanvasPainter.cxx. Member Function Documentation. ◆ AddPanel(). bool RCanvasPainter::AddPanel ; (; std::shared_ptr< ROOT::RWebWindow > ; win). finalvirtual . Add window as panel inside canvas window. ; Reimplemented from ROOT::Experimental::Internal::RVirtualCanvasPainter.; Definition at line 713 of file RCanvasPainter.cxx. ◆ CancelCommands(). void RCanvasPainter::CancelCommands ; (; unsigned ; connid = 0). private . Cancel command execution on provided connection All commands are cancelled, when connid === 0. ; Definition at line 251 of file RCanvasPainter.cxx. ◆ CancelUpdates(). void RCanvasPainter::CancelUpdates ; (; ). private . Cancel all pending Canvas::Update() ; Definition at line 239 of file RCanvasPainter.cxx. ◆ CanvasUpdated(). void RCanvasPainter::CanvasUpdated ; (; uint64_t ; ver, . bool ; async, . CanvasCallback_t ; callback . ). finalvirtual . Method invoked when canvas should be updated on the client side Depending from delivered status, each client will received new data. ; Implements ROOT::Experimental::Internal::RVirtualCanvasPainter.; Definition at line 364 of file RCanvasPainter.cxx. ◆ CheckDataToSend(). void RCanvasPainter::CheckDataToSend ; (; ). private . Check if canvas need to send data to the clients. ; Definition at line 270 of file RCanvasPainter.cxx. ◆ CreateSnapshot(). std::string RCanvasPainter::CreateSnapshot ; (; RDrawable::RDisplayContext & ; ctxt). private . Create JSON representation of data, which should be send to the clients Here server-side painting is performed - each drawable adds own elements in so-called display list, which transferred to the clients. ; Definition at line 768 of file RCanvasPainter.cxx. ◆ CreateWindow(). void RCanvasPainter::CreateWindow ; (; ). private . Create web window for canvas. ; Definition at line 627 of file RCanvasPainter.cxx. ◆ DoWhenReady(). void RCanvasPainter::DoWhenReady ; (; const std::string & ; name, . const std::string & ; a",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html:12946,Deployability,update,update,12946,"ared when connection is closed. ; Reimplemented from ROOT::Experimental::Internal::RVirtualCanvasPainter.; Definition at line 757 of file RCanvasPainter.cxx. Member Data Documentation. ◆ fCanvas. RCanvas& ROOT::Experimental::RCanvasPainter::fCanvas. private . ! Canvas we are painting, *this will be owned by canvas ; Definition at line 109 of file RCanvasPainter.cxx. ◆ fCmds. std::list<std::shared_ptr<WebCommand> > ROOT::Experimental::RCanvasPainter::fCmds. private . ! list of submitted commands ; Definition at line 114 of file RCanvasPainter.cxx. ◆ fCmdsCnt. uint64_t ROOT::Experimental::RCanvasPainter::fCmdsCnt {0}. private . ! commands counter ; Definition at line 115 of file RCanvasPainter.cxx. ◆ fHelpHandles. std::vector<std::unique_ptr<ROOT::RWebDisplayHandle> > ROOT::Experimental::RCanvasPainter::fHelpHandles. private . ! array of handles for help widgets ; Definition at line 122 of file RCanvasPainter.cxx. ◆ fJsonComp. int ROOT::Experimental::RCanvasPainter::fJsonComp {23}. private . ! json compression for data send to client ; Definition at line 120 of file RCanvasPainter.cxx. ◆ fSnapshotDelivered. uint64_t ROOT::Experimental::RCanvasPainter::fSnapshotDelivered {0}. private . ! minimal version delivered to all connections ; Definition at line 117 of file RCanvasPainter.cxx. ◆ fUpdatesLst. std::list<WebUpdate> ROOT::Experimental::RCanvasPainter::fUpdatesLst. private . ! list of callbacks for canvas update ; Definition at line 118 of file RCanvasPainter.cxx. ◆ fWebConn. std::list<WebConn> ROOT::Experimental::RCanvasPainter::fWebConn. private . !< configured display ; ! connections list ; Definition at line 113 of file RCanvasPainter.cxx. ◆ fWindow. std::shared_ptr<ROOT::RWebWindow> ROOT::Experimental::RCanvasPainter::fWindow. private . Definition at line 111 of file RCanvasPainter.cxx. gui/canvaspainter/src/RCanvasPainter.cxx. ROOTExperimentalRCanvasPainter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:03 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html:2216,Modifiability,inherit,inherited,2216,"e. ;  ; std::string GetWindowUrl (bool remote) final;  Returns connection URL for web window. ;  ; bool IsCanvasModified (uint64_t id) const final;  return true if canvas modified since last painting ;  ; void NewDisplay (const std::string &where) final;  Create new display for the canvas See ROOT::RWebWindowsManager::Show() docu for more info. ;  ; int NumDisplays () const final;  Returns number of connected displays. ;  ; bool ProduceBatchOutput (const std::string &fname, int width, int height) final;  Produce batch output, using chrome headless mode with DOM dump. ;  ; std::string ProduceJSON () final;  Produce JSON for the canvas. ;  ; void Run (double tm=0.) final;  Run canvas functionality for specified period of time Required when canvas used not from the main thread. ;  ; void SetClearOnClose (const std::shared_ptr< void > &) final;  Set handle to window which will be cleared when connection is closed. ;  ;  Public Member Functions inherited from ROOT::Experimental::Internal::RVirtualCanvasPainter; virtual ~RVirtualCanvasPainter ();  Default destructor. ;  . Private Types; typedef std::vector< Detail::RMenuItem > MenuItemsVector;  . Private Member Functions;  RCanvasPainter (const RCanvasPainter &)=delete;  Disable copy construction. ;  ; void CancelCommands (unsigned connid=0);  Cancel command execution on provided connection All commands are cancelled, when connid === 0. ;  ; void CancelUpdates ();  Cancel all pending Canvas::Update() ;  ; void CheckDataToSend ();  Check if canvas need to send data to the clients. ;  ; std::string CreateSnapshot (RDrawable::RDisplayContext &ctxt);  Create JSON representation of data, which should be send to the clients Here server-side painting is performed - each drawable adds own elements in so-called display list, which transferred to the clients. ;  ; void CreateWindow ();  Create web window for canvas. ;  ; std::shared_ptr< RDrawable > FindPrimitive (const RCanvas &can, const std::string &id, const RPadBase **subpad=n",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html:4459,Modifiability,config,configured,4459,"imitive (const RCanvas &can, const std::string &id, const RPadBase **subpad=nullptr);  Find drawable in the canvas with specified id Used to communicate with the clients, which does not have any pointer. ;  ; void FrontCommandReplied (const std::string &reply);  Process reply on the currently active command. ;  ; RCanvasPainter & operator= (const RCanvasPainter &)=delete;  Disable assignment. ;  ; void ProcessData (unsigned connid, const std::string &arg);  Process data from the client. ;  ; void SaveCreatedFile (std::string &reply);  Method called when GUI sends file to save on local disk File data coded with base64 coding beside SVG format. ;  . Private Attributes; RCanvas & fCanvas;  ! Canvas we are painting, *this will be owned by canvas ;  ; std::list< std::shared_ptr< WebCommand > > fCmds;  ! list of submitted commands ;  ; uint64_t fCmdsCnt {0};  ! commands counter ;  ; std::vector< std::unique_ptr< ROOT::RWebDisplayHandle > > fHelpHandles;  ! array of handles for help widgets ;  ; int fJsonComp {23};  ! json compression for data send to client ;  ; uint64_t fSnapshotDelivered {0};  ! minimal version delivered to all connections ;  ; std::list< WebUpdate > fUpdatesLst;  ! list of callbacks for canvas update ;  ; std::list< WebConn > fWebConn;  !< configured display ;  ; std::shared_ptr< ROOT::RWebWindow > fWindow;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::Experimental::Internal::RVirtualCanvasPainter; static std::unique_ptr< RVirtualCanvasPainter > Create (RCanvas &canv);  Loads the plugin that implements this class. ;  ;  Static Protected Member Functions inherited from ROOT::Experimental::Internal::RVirtualCanvasPainter; static std::unique_ptr< Generator > & GetGenerator ();  generator getter ;  . Inheritance diagram for ROOT::Experimental::RCanvasPainter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ MenuItemsVector. typedef std::v",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html:4593,Modifiability,inherit,inherited,4593," data from the client. ;  ; void SaveCreatedFile (std::string &reply);  Method called when GUI sends file to save on local disk File data coded with base64 coding beside SVG format. ;  . Private Attributes; RCanvas & fCanvas;  ! Canvas we are painting, *this will be owned by canvas ;  ; std::list< std::shared_ptr< WebCommand > > fCmds;  ! list of submitted commands ;  ; uint64_t fCmdsCnt {0};  ! commands counter ;  ; std::vector< std::unique_ptr< ROOT::RWebDisplayHandle > > fHelpHandles;  ! array of handles for help widgets ;  ; int fJsonComp {23};  ! json compression for data send to client ;  ; uint64_t fSnapshotDelivered {0};  ! minimal version delivered to all connections ;  ; std::list< WebUpdate > fUpdatesLst;  ! list of callbacks for canvas update ;  ; std::list< WebConn > fWebConn;  !< configured display ;  ; std::shared_ptr< ROOT::RWebWindow > fWindow;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::Experimental::Internal::RVirtualCanvasPainter; static std::unique_ptr< RVirtualCanvasPainter > Create (RCanvas &canv);  Loads the plugin that implements this class. ;  ;  Static Protected Member Functions inherited from ROOT::Experimental::Internal::RVirtualCanvasPainter; static std::unique_ptr< Generator > & GetGenerator ();  generator getter ;  . Inheritance diagram for ROOT::Experimental::RCanvasPainter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ MenuItemsVector. typedef std::vector<Detail::RMenuItem> ROOT::Experimental::RCanvasPainter::MenuItemsVector. private . Definition at line 107 of file RCanvasPainter.cxx. Constructor & Destructor Documentation. ◆ RCanvasPainter() [1/2]. ROOT::Experimental::RCanvasPainter::RCanvasPainter ; (; const RCanvasPainter & ; ). privatedelete . Disable copy construction. . ◆ RCanvasPainter() [2/2]. RCanvasPainter::RCanvasPainter ; (; RCanvas & ; canv). Constructor. ; Definition at line 219 of file RCanvasP",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html:4744,Modifiability,plugin,plugin,4744," data from the client. ;  ; void SaveCreatedFile (std::string &reply);  Method called when GUI sends file to save on local disk File data coded with base64 coding beside SVG format. ;  . Private Attributes; RCanvas & fCanvas;  ! Canvas we are painting, *this will be owned by canvas ;  ; std::list< std::shared_ptr< WebCommand > > fCmds;  ! list of submitted commands ;  ; uint64_t fCmdsCnt {0};  ! commands counter ;  ; std::vector< std::unique_ptr< ROOT::RWebDisplayHandle > > fHelpHandles;  ! array of handles for help widgets ;  ; int fJsonComp {23};  ! json compression for data send to client ;  ; uint64_t fSnapshotDelivered {0};  ! minimal version delivered to all connections ;  ; std::list< WebUpdate > fUpdatesLst;  ! list of callbacks for canvas update ;  ; std::list< WebConn > fWebConn;  !< configured display ;  ; std::shared_ptr< ROOT::RWebWindow > fWindow;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::Experimental::Internal::RVirtualCanvasPainter; static std::unique_ptr< RVirtualCanvasPainter > Create (RCanvas &canv);  Loads the plugin that implements this class. ;  ;  Static Protected Member Functions inherited from ROOT::Experimental::Internal::RVirtualCanvasPainter; static std::unique_ptr< Generator > & GetGenerator ();  generator getter ;  . Inheritance diagram for ROOT::Experimental::RCanvasPainter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ MenuItemsVector. typedef std::vector<Detail::RMenuItem> ROOT::Experimental::RCanvasPainter::MenuItemsVector. private . Definition at line 107 of file RCanvasPainter.cxx. Constructor & Destructor Documentation. ◆ RCanvasPainter() [1/2]. ROOT::Experimental::RCanvasPainter::RCanvasPainter ; (; const RCanvasPainter & ; ). privatedelete . Disable copy construction. . ◆ RCanvasPainter() [2/2]. RCanvasPainter::RCanvasPainter ; (; RCanvas & ; canv). Constructor. ; Definition at line 219 of file RCanvasP",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html:4819,Modifiability,inherit,inherited,4819,"fCanvas;  ! Canvas we are painting, *this will be owned by canvas ;  ; std::list< std::shared_ptr< WebCommand > > fCmds;  ! list of submitted commands ;  ; uint64_t fCmdsCnt {0};  ! commands counter ;  ; std::vector< std::unique_ptr< ROOT::RWebDisplayHandle > > fHelpHandles;  ! array of handles for help widgets ;  ; int fJsonComp {23};  ! json compression for data send to client ;  ; uint64_t fSnapshotDelivered {0};  ! minimal version delivered to all connections ;  ; std::list< WebUpdate > fUpdatesLst;  ! list of callbacks for canvas update ;  ; std::list< WebConn > fWebConn;  !< configured display ;  ; std::shared_ptr< ROOT::RWebWindow > fWindow;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::Experimental::Internal::RVirtualCanvasPainter; static std::unique_ptr< RVirtualCanvasPainter > Create (RCanvas &canv);  Loads the plugin that implements this class. ;  ;  Static Protected Member Functions inherited from ROOT::Experimental::Internal::RVirtualCanvasPainter; static std::unique_ptr< Generator > & GetGenerator ();  generator getter ;  . Inheritance diagram for ROOT::Experimental::RCanvasPainter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ MenuItemsVector. typedef std::vector<Detail::RMenuItem> ROOT::Experimental::RCanvasPainter::MenuItemsVector. private . Definition at line 107 of file RCanvasPainter.cxx. Constructor & Destructor Documentation. ◆ RCanvasPainter() [1/2]. ROOT::Experimental::RCanvasPainter::RCanvasPainter ; (; const RCanvasPainter & ; ). privatedelete . Disable copy construction. . ◆ RCanvasPainter() [2/2]. RCanvasPainter::RCanvasPainter ; (; RCanvas & ; canv). Constructor. ; Definition at line 219 of file RCanvasPainter.cxx. ◆ ~RCanvasPainter(). RCanvasPainter::~RCanvasPainter ; (; ). virtual . Destructor. ; Definition at line 228 of file RCanvasPainter.cxx. Member Function Documentation. ◆ AddPanel(). bool RCanvasPainter::Add",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html:13096,Modifiability,config,configured,13096,"ared when connection is closed. ; Reimplemented from ROOT::Experimental::Internal::RVirtualCanvasPainter.; Definition at line 757 of file RCanvasPainter.cxx. Member Data Documentation. ◆ fCanvas. RCanvas& ROOT::Experimental::RCanvasPainter::fCanvas. private . ! Canvas we are painting, *this will be owned by canvas ; Definition at line 109 of file RCanvasPainter.cxx. ◆ fCmds. std::list<std::shared_ptr<WebCommand> > ROOT::Experimental::RCanvasPainter::fCmds. private . ! list of submitted commands ; Definition at line 114 of file RCanvasPainter.cxx. ◆ fCmdsCnt. uint64_t ROOT::Experimental::RCanvasPainter::fCmdsCnt {0}. private . ! commands counter ; Definition at line 115 of file RCanvasPainter.cxx. ◆ fHelpHandles. std::vector<std::unique_ptr<ROOT::RWebDisplayHandle> > ROOT::Experimental::RCanvasPainter::fHelpHandles. private . ! array of handles for help widgets ; Definition at line 122 of file RCanvasPainter.cxx. ◆ fJsonComp. int ROOT::Experimental::RCanvasPainter::fJsonComp {23}. private . ! json compression for data send to client ; Definition at line 120 of file RCanvasPainter.cxx. ◆ fSnapshotDelivered. uint64_t ROOT::Experimental::RCanvasPainter::fSnapshotDelivered {0}. private . ! minimal version delivered to all connections ; Definition at line 117 of file RCanvasPainter.cxx. ◆ fUpdatesLst. std::list<WebUpdate> ROOT::Experimental::RCanvasPainter::fUpdatesLst. private . ! list of callbacks for canvas update ; Definition at line 118 of file RCanvasPainter.cxx. ◆ fWebConn. std::list<WebConn> ROOT::Experimental::RCanvasPainter::fWebConn. private . !< configured display ; ! connections list ; Definition at line 113 of file RCanvasPainter.cxx. ◆ fWindow. std::shared_ptr<ROOT::RWebWindow> ROOT::Experimental::RCanvasPainter::fWindow. private . Definition at line 111 of file RCanvasPainter.cxx. gui/canvaspainter/src/RCanvasPainter.cxx. ROOTExperimentalRCanvasPainter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:03 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html:1147,Performance,perform,perform,1147," of all members |; Classes |; Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Experimental::RCanvasPainter Class ReferenceWeb Widgets. ; Implementation of painter for ROOT::Experimental::RCanvas, using RWebWindow. ; Definition at line 61 of file RCanvasPainter.cxx. Classes; class  GeneratorImpl;  ; struct  WebCommand;  ; struct  WebConn;  ; struct  WebUpdate;  . Public Member Functions;  RCanvasPainter (RCanvas &canv);  Constructor. ;  ; virtual ~RCanvasPainter ();  Destructor. ;  ; bool AddPanel (std::shared_ptr< ROOT::RWebWindow >) final;  Add window as panel inside canvas window. ;  ; void CanvasUpdated (uint64_t ver, bool async, CanvasCallback_t callback) final;  Method invoked when canvas should be updated on the client side Depending from delivered status, each client will received new data. ;  ; void DoWhenReady (const std::string &name, const std::string &arg, bool async, CanvasCallback_t callback) final;  perform special action when drawing is ready ;  ; std::string GetWindowAddr () const final;  Returns web window name. ;  ; std::string GetWindowUrl (bool remote) final;  Returns connection URL for web window. ;  ; bool IsCanvasModified (uint64_t id) const final;  return true if canvas modified since last painting ;  ; void NewDisplay (const std::string &where) final;  Create new display for the canvas See ROOT::RWebWindowsManager::Show() docu for more info. ;  ; int NumDisplays () const final;  Returns number of connected displays. ;  ; bool ProduceBatchOutput (const std::string &fname, int width, int height) final;  Produce batch output, using chrome headless mode with DOM dump. ;  ; std::string ProduceJSON () final;  Produce JSON for the canvas. ;  ; void Run (double tm=0.) final;  Run canvas functionality for specified period of time Required when canvas used not from the main thread. ;  ; void SetClearOnClose (const std::shared_ptr< void > &) final;  Set handle to window which wil",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html:2982,Performance,perform,performed,2982,"nvas functionality for specified period of time Required when canvas used not from the main thread. ;  ; void SetClearOnClose (const std::shared_ptr< void > &) final;  Set handle to window which will be cleared when connection is closed. ;  ;  Public Member Functions inherited from ROOT::Experimental::Internal::RVirtualCanvasPainter; virtual ~RVirtualCanvasPainter ();  Default destructor. ;  . Private Types; typedef std::vector< Detail::RMenuItem > MenuItemsVector;  . Private Member Functions;  RCanvasPainter (const RCanvasPainter &)=delete;  Disable copy construction. ;  ; void CancelCommands (unsigned connid=0);  Cancel command execution on provided connection All commands are cancelled, when connid === 0. ;  ; void CancelUpdates ();  Cancel all pending Canvas::Update() ;  ; void CheckDataToSend ();  Check if canvas need to send data to the clients. ;  ; std::string CreateSnapshot (RDrawable::RDisplayContext &ctxt);  Create JSON representation of data, which should be send to the clients Here server-side painting is performed - each drawable adds own elements in so-called display list, which transferred to the clients. ;  ; void CreateWindow ();  Create web window for canvas. ;  ; std::shared_ptr< RDrawable > FindPrimitive (const RCanvas &can, const std::string &id, const RPadBase **subpad=nullptr);  Find drawable in the canvas with specified id Used to communicate with the clients, which does not have any pointer. ;  ; void FrontCommandReplied (const std::string &reply);  Process reply on the currently active command. ;  ; RCanvasPainter & operator= (const RCanvasPainter &)=delete;  Disable assignment. ;  ; void ProcessData (unsigned connid, const std::string &arg);  Process data from the client. ;  ; void SaveCreatedFile (std::string &reply);  Method called when GUI sends file to save on local disk File data coded with base64 coding beside SVG format. ;  . Private Attributes; RCanvas & fCanvas;  ! Canvas we are painting, *this will be owned by canvas ;  ; std::li",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html:7301,Performance,perform,performed,7301,"efinition at line 251 of file RCanvasPainter.cxx. ◆ CancelUpdates(). void RCanvasPainter::CancelUpdates ; (; ). private . Cancel all pending Canvas::Update() ; Definition at line 239 of file RCanvasPainter.cxx. ◆ CanvasUpdated(). void RCanvasPainter::CanvasUpdated ; (; uint64_t ; ver, . bool ; async, . CanvasCallback_t ; callback . ). finalvirtual . Method invoked when canvas should be updated on the client side Depending from delivered status, each client will received new data. ; Implements ROOT::Experimental::Internal::RVirtualCanvasPainter.; Definition at line 364 of file RCanvasPainter.cxx. ◆ CheckDataToSend(). void RCanvasPainter::CheckDataToSend ; (; ). private . Check if canvas need to send data to the clients. ; Definition at line 270 of file RCanvasPainter.cxx. ◆ CreateSnapshot(). std::string RCanvasPainter::CreateSnapshot ; (; RDrawable::RDisplayContext & ; ctxt). private . Create JSON representation of data, which should be send to the clients Here server-side painting is performed - each drawable adds own elements in so-called display list, which transferred to the clients. ; Definition at line 768 of file RCanvasPainter.cxx. ◆ CreateWindow(). void RCanvasPainter::CreateWindow ; (; ). private . Create web window for canvas. ; Definition at line 627 of file RCanvasPainter.cxx. ◆ DoWhenReady(). void RCanvasPainter::DoWhenReady ; (; const std::string & ; name, . const std::string & ; arg, . bool ; async, . CanvasCallback_t ; callback . ). finalvirtual . perform special action when drawing is ready ; Perform special action when drawing is ready. ; Implements ROOT::Experimental::Internal::RVirtualCanvasPainter.; Definition at line 410 of file RCanvasPainter.cxx. ◆ FindPrimitive(). std::shared_ptr< RDrawable > RCanvasPainter::FindPrimitive ; (; const RCanvas & ; can, . const std::string & ; id, . const RPadBase ** ; subpad = nullptr . ). private . Find drawable in the canvas with specified id Used to communicate with the clients, which does not have any point",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html:7790,Performance,perform,perform,7790,"ualCanvasPainter.; Definition at line 364 of file RCanvasPainter.cxx. ◆ CheckDataToSend(). void RCanvasPainter::CheckDataToSend ; (; ). private . Check if canvas need to send data to the clients. ; Definition at line 270 of file RCanvasPainter.cxx. ◆ CreateSnapshot(). std::string RCanvasPainter::CreateSnapshot ; (; RDrawable::RDisplayContext & ; ctxt). private . Create JSON representation of data, which should be send to the clients Here server-side painting is performed - each drawable adds own elements in so-called display list, which transferred to the clients. ; Definition at line 768 of file RCanvasPainter.cxx. ◆ CreateWindow(). void RCanvasPainter::CreateWindow ; (; ). private . Create web window for canvas. ; Definition at line 627 of file RCanvasPainter.cxx. ◆ DoWhenReady(). void RCanvasPainter::DoWhenReady ; (; const std::string & ; name, . const std::string & ; arg, . bool ; async, . CanvasCallback_t ; callback . ). finalvirtual . perform special action when drawing is ready ; Perform special action when drawing is ready. ; Implements ROOT::Experimental::Internal::RVirtualCanvasPainter.; Definition at line 410 of file RCanvasPainter.cxx. ◆ FindPrimitive(). std::shared_ptr< RDrawable > RCanvasPainter::FindPrimitive ; (; const RCanvas & ; can, . const std::string & ; id, . const RPadBase ** ; subpad = nullptr . ). private . Find drawable in the canvas with specified id Used to communicate with the clients, which does not have any pointer. ; Definition at line 810 of file RCanvasPainter.cxx. ◆ FrontCommandReplied(). void RCanvasPainter::FrontCommandReplied ; (; const std::string & ; reply). private . Process reply on the currently active command. ; Definition at line 859 of file RCanvasPainter.cxx. ◆ GetWindowAddr(). std::string RCanvasPainter::GetWindowAddr ; (; ); const. finalvirtual . Returns web window name. ; Implements ROOT::Experimental::Internal::RVirtualCanvasPainter.; Definition at line 692 of file RCanvasPainter.cxx. ◆ GetWindowUrl(). std::string RC",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html:2151,Usability,clear,cleared,2151,"asCallback_t callback) final;  perform special action when drawing is ready ;  ; std::string GetWindowAddr () const final;  Returns web window name. ;  ; std::string GetWindowUrl (bool remote) final;  Returns connection URL for web window. ;  ; bool IsCanvasModified (uint64_t id) const final;  return true if canvas modified since last painting ;  ; void NewDisplay (const std::string &where) final;  Create new display for the canvas See ROOT::RWebWindowsManager::Show() docu for more info. ;  ; int NumDisplays () const final;  Returns number of connected displays. ;  ; bool ProduceBatchOutput (const std::string &fname, int width, int height) final;  Produce batch output, using chrome headless mode with DOM dump. ;  ; std::string ProduceJSON () final;  Produce JSON for the canvas. ;  ; void Run (double tm=0.) final;  Run canvas functionality for specified period of time Required when canvas used not from the main thread. ;  ; void SetClearOnClose (const std::shared_ptr< void > &) final;  Set handle to window which will be cleared when connection is closed. ;  ;  Public Member Functions inherited from ROOT::Experimental::Internal::RVirtualCanvasPainter; virtual ~RVirtualCanvasPainter ();  Default destructor. ;  . Private Types; typedef std::vector< Detail::RMenuItem > MenuItemsVector;  . Private Member Functions;  RCanvasPainter (const RCanvasPainter &)=delete;  Disable copy construction. ;  ; void CancelCommands (unsigned connid=0);  Cancel command execution on provided connection All commands are cancelled, when connid === 0. ;  ; void CancelUpdates ();  Cancel all pending Canvas::Update() ;  ; void CheckDataToSend ();  Check if canvas need to send data to the clients. ;  ; std::string CreateSnapshot (RDrawable::RDisplayContext &ctxt);  Create JSON representation of data, which should be send to the clients Here server-side painting is performed - each drawable adds own elements in so-called display list, which transferred to the clients. ;  ; void CreateWindow ();  C",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html:11515,Usability,clear,cleared,11515,"Painter.; Definition at line 463 of file RCanvasPainter.cxx. ◆ ProduceJSON(). std::string RCanvasPainter::ProduceJSON ; (; ). finalvirtual . Produce JSON for the canvas. ; Implements ROOT::Experimental::Internal::RVirtualCanvasPainter.; Definition at line 494 of file RCanvasPainter.cxx. ◆ Run(). void RCanvasPainter::Run ; (; double ; tm = 0.). finalvirtual . Run canvas functionality for specified period of time Required when canvas used not from the main thread. ; Implements ROOT::Experimental::Internal::RVirtualCanvasPainter.; Definition at line 894 of file RCanvasPainter.cxx. ◆ SaveCreatedFile(). void RCanvasPainter::SaveCreatedFile ; (; std::string & ; reply). private . Method called when GUI sends file to save on local disk File data coded with base64 coding beside SVG format. ; Definition at line 827 of file RCanvasPainter.cxx. ◆ SetClearOnClose(). void RCanvasPainter::SetClearOnClose ; (; const std::shared_ptr< void > & ; handle). finalvirtual . Set handle to window which will be cleared when connection is closed. ; Reimplemented from ROOT::Experimental::Internal::RVirtualCanvasPainter.; Definition at line 757 of file RCanvasPainter.cxx. Member Data Documentation. ◆ fCanvas. RCanvas& ROOT::Experimental::RCanvasPainter::fCanvas. private . ! Canvas we are painting, *this will be owned by canvas ; Definition at line 109 of file RCanvasPainter.cxx. ◆ fCmds. std::list<std::shared_ptr<WebCommand> > ROOT::Experimental::RCanvasPainter::fCmds. private . ! list of submitted commands ; Definition at line 114 of file RCanvasPainter.cxx. ◆ fCmdsCnt. uint64_t ROOT::Experimental::RCanvasPainter::fCmdsCnt {0}. private . ! commands counter ; Definition at line 115 of file RCanvasPainter.cxx. ◆ fHelpHandles. std::vector<std::unique_ptr<ROOT::RWebDisplayHandle> > ROOT::Experimental::RCanvasPainter::fHelpHandles. private . ! array of handles for help widgets ; Definition at line 122 of file RCanvasPainter.cxx. ◆ fJsonComp. int ROOT::Experimental::RCanvasPainter::fJsonComp {23}. p",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RChangeAttrRequest.html:621,Availability,mask,mask,621,". ROOT: ROOT::Experimental::RChangeAttrRequest Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Experimental::RChangeAttrRequest Class Reference. . Definition at line 24 of file RCanvas.hxx. Public Member Functions;  RChangeAttrRequest ()=default;  ;  ~RChangeAttrRequest () override=default;  ; bool NeedCanvasUpdate () const override;  ; std::unique_ptr< RDrawableReply > Process () override;  Apply attributes changes to the drawable Return mask with actions which were really applied. ;  ;  Public Member Functions inherited from ROOT::Experimental::RDrawableRequest; virtual ~RDrawableRequest ();  destructor, pin vtable ;  ; RDrawable::RDisplayContext & GetContext ();  ; const RDrawable::RDisplayContext & GetContext () const;  ; const std::string & GetId () const;  ; uint64_t GetRequestId () const;  ; bool ShouldBeReplyed () const;  . Private Member Functions;  RChangeAttrRequest (const RChangeAttrRequest &)=delete;  ; RChangeAttrRequest & operator= (const RChangeAttrRequest &)=delete;  . Private Attributes; bool fNeedUpdate {false};  ! is canvas update required ;  ; std::vector< std::string > ids;  array of ids ;  ; std::vector< std::string > names;  array of attribute names ;  ; bool update {true};  update canvas at the end ;  ; std::vector< std::unique_ptr< RAttrMap::Value_t > > values;  array of values ;  . #include <ROOT/RCanvas.hxx>. Inheritance diagram for ROOT::Experimental::RChangeAttrRequest:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RChangeAttrRequest() [1/2]. ROOT::Experimental::RChangeAttrRequest::RChangeAttrRequest ; (; const RChangeAttrRequest & ; ). privatedelete . ◆ RChangeAttrRequest() [2/2]. ROOT::Experimental::RChangeAttrRequest::RChangeAttrRequest ; (; ). default . ◆ ~RChangeAttr",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RChangeAttrRequest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RChangeAttrRequest.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RChangeAttrRequest.html:2681,Availability,mask,mask,2681,instead.; [legend]; Constructor & Destructor Documentation. ◆ RChangeAttrRequest() [1/2]. ROOT::Experimental::RChangeAttrRequest::RChangeAttrRequest ; (; const RChangeAttrRequest & ; ). privatedelete . ◆ RChangeAttrRequest() [2/2]. ROOT::Experimental::RChangeAttrRequest::RChangeAttrRequest ; (; ). default . ◆ ~RChangeAttrRequest(). ROOT::Experimental::RChangeAttrRequest::~RChangeAttrRequest ; (; ). overridedefault . Member Function Documentation. ◆ NeedCanvasUpdate(). bool ROOT::Experimental::RChangeAttrRequest::NeedCanvasUpdate ; (; ); const. inlineoverridevirtual . Reimplemented from ROOT::Experimental::RDrawableRequest.; Definition at line 36 of file RCanvas.hxx. ◆ operator=(). RChangeAttrRequest & ROOT::Experimental::RChangeAttrRequest::operator= ; (; const RChangeAttrRequest & ; ). privatedelete . ◆ Process(). std::unique_ptr< ROOT::Experimental::RDrawableReply > ROOT::Experimental::RChangeAttrRequest::Process ; (; ). overridevirtual . Apply attributes changes to the drawable Return mask with actions which were really applied. ; Reimplemented from ROOT::Experimental::RDrawableRequest.; Definition at line 327 of file RCanvas.cxx. Member Data Documentation. ◆ fNeedUpdate. bool ROOT::Experimental::RChangeAttrRequest::fNeedUpdate {false}. private . ! is canvas update required ; Definition at line 29 of file RCanvas.hxx. ◆ ids. std::vector<std::string> ROOT::Experimental::RChangeAttrRequest::ids. private . array of ids ; Definition at line 25 of file RCanvas.hxx. ◆ names. std::vector<std::string> ROOT::Experimental::RChangeAttrRequest::names. private . array of attribute names ; Definition at line 26 of file RCanvas.hxx. ◆ update. bool ROOT::Experimental::RChangeAttrRequest::update {true}. private . update canvas at the end ; Definition at line 28 of file RCanvas.hxx. ◆ values. std::vector<std::unique_ptr<RAttrMap::Value_t> > ROOT::Experimental::RChangeAttrRequest::values. private . array of values ; Definition at line 27 of file RCanvas.hxx. Libraries for ROOT::Expe,MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RChangeAttrRequest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RChangeAttrRequest.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RChangeAttrRequest.html:1238,Deployability,update,update,1238,"e 24 of file RCanvas.hxx. Public Member Functions;  RChangeAttrRequest ()=default;  ;  ~RChangeAttrRequest () override=default;  ; bool NeedCanvasUpdate () const override;  ; std::unique_ptr< RDrawableReply > Process () override;  Apply attributes changes to the drawable Return mask with actions which were really applied. ;  ;  Public Member Functions inherited from ROOT::Experimental::RDrawableRequest; virtual ~RDrawableRequest ();  destructor, pin vtable ;  ; RDrawable::RDisplayContext & GetContext ();  ; const RDrawable::RDisplayContext & GetContext () const;  ; const std::string & GetId () const;  ; uint64_t GetRequestId () const;  ; bool ShouldBeReplyed () const;  . Private Member Functions;  RChangeAttrRequest (const RChangeAttrRequest &)=delete;  ; RChangeAttrRequest & operator= (const RChangeAttrRequest &)=delete;  . Private Attributes; bool fNeedUpdate {false};  ! is canvas update required ;  ; std::vector< std::string > ids;  array of ids ;  ; std::vector< std::string > names;  array of attribute names ;  ; bool update {true};  update canvas at the end ;  ; std::vector< std::unique_ptr< RAttrMap::Value_t > > values;  array of values ;  . #include <ROOT/RCanvas.hxx>. Inheritance diagram for ROOT::Experimental::RChangeAttrRequest:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RChangeAttrRequest() [1/2]. ROOT::Experimental::RChangeAttrRequest::RChangeAttrRequest ; (; const RChangeAttrRequest & ; ). privatedelete . ◆ RChangeAttrRequest() [2/2]. ROOT::Experimental::RChangeAttrRequest::RChangeAttrRequest ; (; ). default . ◆ ~RChangeAttrRequest(). ROOT::Experimental::RChangeAttrRequest::~RChangeAttrRequest ; (; ). overridedefault . Member Function Documentation. ◆ NeedCanvasUpdate(). bool ROOT::Experimental::RChangeAttrRequest::NeedCanvasUpdate ; (; ); const. inlineoverridevirtual . Reimplemented from ROOT::Experimental::RDrawableRequest.; Definition at line 36 of file RCa",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RChangeAttrRequest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RChangeAttrRequest.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RChangeAttrRequest.html:1380,Deployability,update,update,1380,"e 24 of file RCanvas.hxx. Public Member Functions;  RChangeAttrRequest ()=default;  ;  ~RChangeAttrRequest () override=default;  ; bool NeedCanvasUpdate () const override;  ; std::unique_ptr< RDrawableReply > Process () override;  Apply attributes changes to the drawable Return mask with actions which were really applied. ;  ;  Public Member Functions inherited from ROOT::Experimental::RDrawableRequest; virtual ~RDrawableRequest ();  destructor, pin vtable ;  ; RDrawable::RDisplayContext & GetContext ();  ; const RDrawable::RDisplayContext & GetContext () const;  ; const std::string & GetId () const;  ; uint64_t GetRequestId () const;  ; bool ShouldBeReplyed () const;  . Private Member Functions;  RChangeAttrRequest (const RChangeAttrRequest &)=delete;  ; RChangeAttrRequest & operator= (const RChangeAttrRequest &)=delete;  . Private Attributes; bool fNeedUpdate {false};  ! is canvas update required ;  ; std::vector< std::string > ids;  array of ids ;  ; std::vector< std::string > names;  array of attribute names ;  ; bool update {true};  update canvas at the end ;  ; std::vector< std::unique_ptr< RAttrMap::Value_t > > values;  array of values ;  . #include <ROOT/RCanvas.hxx>. Inheritance diagram for ROOT::Experimental::RChangeAttrRequest:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RChangeAttrRequest() [1/2]. ROOT::Experimental::RChangeAttrRequest::RChangeAttrRequest ; (; const RChangeAttrRequest & ; ). privatedelete . ◆ RChangeAttrRequest() [2/2]. ROOT::Experimental::RChangeAttrRequest::RChangeAttrRequest ; (; ). default . ◆ ~RChangeAttrRequest(). ROOT::Experimental::RChangeAttrRequest::~RChangeAttrRequest ; (; ). overridedefault . Member Function Documentation. ◆ NeedCanvasUpdate(). bool ROOT::Experimental::RChangeAttrRequest::NeedCanvasUpdate ; (; ); const. inlineoverridevirtual . Reimplemented from ROOT::Experimental::RDrawableRequest.; Definition at line 36 of file RCa",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RChangeAttrRequest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RChangeAttrRequest.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RChangeAttrRequest.html:1396,Deployability,update,update,1396,"e 24 of file RCanvas.hxx. Public Member Functions;  RChangeAttrRequest ()=default;  ;  ~RChangeAttrRequest () override=default;  ; bool NeedCanvasUpdate () const override;  ; std::unique_ptr< RDrawableReply > Process () override;  Apply attributes changes to the drawable Return mask with actions which were really applied. ;  ;  Public Member Functions inherited from ROOT::Experimental::RDrawableRequest; virtual ~RDrawableRequest ();  destructor, pin vtable ;  ; RDrawable::RDisplayContext & GetContext ();  ; const RDrawable::RDisplayContext & GetContext () const;  ; const std::string & GetId () const;  ; uint64_t GetRequestId () const;  ; bool ShouldBeReplyed () const;  . Private Member Functions;  RChangeAttrRequest (const RChangeAttrRequest &)=delete;  ; RChangeAttrRequest & operator= (const RChangeAttrRequest &)=delete;  . Private Attributes; bool fNeedUpdate {false};  ! is canvas update required ;  ; std::vector< std::string > ids;  array of ids ;  ; std::vector< std::string > names;  array of attribute names ;  ; bool update {true};  update canvas at the end ;  ; std::vector< std::unique_ptr< RAttrMap::Value_t > > values;  array of values ;  . #include <ROOT/RCanvas.hxx>. Inheritance diagram for ROOT::Experimental::RChangeAttrRequest:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RChangeAttrRequest() [1/2]. ROOT::Experimental::RChangeAttrRequest::RChangeAttrRequest ; (; const RChangeAttrRequest & ; ). privatedelete . ◆ RChangeAttrRequest() [2/2]. ROOT::Experimental::RChangeAttrRequest::RChangeAttrRequest ; (; ). default . ◆ ~RChangeAttrRequest(). ROOT::Experimental::RChangeAttrRequest::~RChangeAttrRequest ; (; ). overridedefault . Member Function Documentation. ◆ NeedCanvasUpdate(). bool ROOT::Experimental::RChangeAttrRequest::NeedCanvasUpdate ; (; ); const. inlineoverridevirtual . Reimplemented from ROOT::Experimental::RDrawableRequest.; Definition at line 36 of file RCa",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RChangeAttrRequest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RChangeAttrRequest.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RChangeAttrRequest.html:2960,Deployability,update,update,2960,ult . ◆ ~RChangeAttrRequest(). ROOT::Experimental::RChangeAttrRequest::~RChangeAttrRequest ; (; ). overridedefault . Member Function Documentation. ◆ NeedCanvasUpdate(). bool ROOT::Experimental::RChangeAttrRequest::NeedCanvasUpdate ; (; ); const. inlineoverridevirtual . Reimplemented from ROOT::Experimental::RDrawableRequest.; Definition at line 36 of file RCanvas.hxx. ◆ operator=(). RChangeAttrRequest & ROOT::Experimental::RChangeAttrRequest::operator= ; (; const RChangeAttrRequest & ; ). privatedelete . ◆ Process(). std::unique_ptr< ROOT::Experimental::RDrawableReply > ROOT::Experimental::RChangeAttrRequest::Process ; (; ). overridevirtual . Apply attributes changes to the drawable Return mask with actions which were really applied. ; Reimplemented from ROOT::Experimental::RDrawableRequest.; Definition at line 327 of file RCanvas.cxx. Member Data Documentation. ◆ fNeedUpdate. bool ROOT::Experimental::RChangeAttrRequest::fNeedUpdate {false}. private . ! is canvas update required ; Definition at line 29 of file RCanvas.hxx. ◆ ids. std::vector<std::string> ROOT::Experimental::RChangeAttrRequest::ids. private . array of ids ; Definition at line 25 of file RCanvas.hxx. ◆ names. std::vector<std::string> ROOT::Experimental::RChangeAttrRequest::names. private . array of attribute names ; Definition at line 26 of file RCanvas.hxx. ◆ update. bool ROOT::Experimental::RChangeAttrRequest::update {true}. private . update canvas at the end ; Definition at line 28 of file RCanvas.hxx. ◆ values. std::vector<std::unique_ptr<RAttrMap::Value_t> > ROOT::Experimental::RChangeAttrRequest::values. private . array of values ; Definition at line 27 of file RCanvas.hxx. Libraries for ROOT::Experimental::RChangeAttrRequest:. [legend]; The documentation for this class was generated from the following files:; graf2d/gpadv7/inc/ROOT/RCanvas.hxx; graf2d/gpadv7/src/RCanvas.cxx. ROOTExperimentalRChangeAttrRequest. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:03 (GVA Time) using D,MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RChangeAttrRequest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RChangeAttrRequest.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RChangeAttrRequest.html:3329,Deployability,update,update,3329,Request(). ROOT::Experimental::RChangeAttrRequest::~RChangeAttrRequest ; (; ). overridedefault . Member Function Documentation. ◆ NeedCanvasUpdate(). bool ROOT::Experimental::RChangeAttrRequest::NeedCanvasUpdate ; (; ); const. inlineoverridevirtual . Reimplemented from ROOT::Experimental::RDrawableRequest.; Definition at line 36 of file RCanvas.hxx. ◆ operator=(). RChangeAttrRequest & ROOT::Experimental::RChangeAttrRequest::operator= ; (; const RChangeAttrRequest & ; ). privatedelete . ◆ Process(). std::unique_ptr< ROOT::Experimental::RDrawableReply > ROOT::Experimental::RChangeAttrRequest::Process ; (; ). overridevirtual . Apply attributes changes to the drawable Return mask with actions which were really applied. ; Reimplemented from ROOT::Experimental::RDrawableRequest.; Definition at line 327 of file RCanvas.cxx. Member Data Documentation. ◆ fNeedUpdate. bool ROOT::Experimental::RChangeAttrRequest::fNeedUpdate {false}. private . ! is canvas update required ; Definition at line 29 of file RCanvas.hxx. ◆ ids. std::vector<std::string> ROOT::Experimental::RChangeAttrRequest::ids. private . array of ids ; Definition at line 25 of file RCanvas.hxx. ◆ names. std::vector<std::string> ROOT::Experimental::RChangeAttrRequest::names. private . array of attribute names ; Definition at line 26 of file RCanvas.hxx. ◆ update. bool ROOT::Experimental::RChangeAttrRequest::update {true}. private . update canvas at the end ; Definition at line 28 of file RCanvas.hxx. ◆ values. std::vector<std::unique_ptr<RAttrMap::Value_t> > ROOT::Experimental::RChangeAttrRequest::values. private . array of values ; Definition at line 27 of file RCanvas.hxx. Libraries for ROOT::Experimental::RChangeAttrRequest:. [legend]; The documentation for this class was generated from the following files:; graf2d/gpadv7/inc/ROOT/RCanvas.hxx; graf2d/gpadv7/src/RCanvas.cxx. ROOTExperimentalRChangeAttrRequest. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:03 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RChangeAttrRequest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RChangeAttrRequest.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RChangeAttrRequest.html:3382,Deployability,update,update,3382,Request(). ROOT::Experimental::RChangeAttrRequest::~RChangeAttrRequest ; (; ). overridedefault . Member Function Documentation. ◆ NeedCanvasUpdate(). bool ROOT::Experimental::RChangeAttrRequest::NeedCanvasUpdate ; (; ); const. inlineoverridevirtual . Reimplemented from ROOT::Experimental::RDrawableRequest.; Definition at line 36 of file RCanvas.hxx. ◆ operator=(). RChangeAttrRequest & ROOT::Experimental::RChangeAttrRequest::operator= ; (; const RChangeAttrRequest & ; ). privatedelete . ◆ Process(). std::unique_ptr< ROOT::Experimental::RDrawableReply > ROOT::Experimental::RChangeAttrRequest::Process ; (; ). overridevirtual . Apply attributes changes to the drawable Return mask with actions which were really applied. ; Reimplemented from ROOT::Experimental::RDrawableRequest.; Definition at line 327 of file RCanvas.cxx. Member Data Documentation. ◆ fNeedUpdate. bool ROOT::Experimental::RChangeAttrRequest::fNeedUpdate {false}. private . ! is canvas update required ; Definition at line 29 of file RCanvas.hxx. ◆ ids. std::vector<std::string> ROOT::Experimental::RChangeAttrRequest::ids. private . array of ids ; Definition at line 25 of file RCanvas.hxx. ◆ names. std::vector<std::string> ROOT::Experimental::RChangeAttrRequest::names. private . array of attribute names ; Definition at line 26 of file RCanvas.hxx. ◆ update. bool ROOT::Experimental::RChangeAttrRequest::update {true}. private . update canvas at the end ; Definition at line 28 of file RCanvas.hxx. ◆ values. std::vector<std::unique_ptr<RAttrMap::Value_t> > ROOT::Experimental::RChangeAttrRequest::values. private . array of values ; Definition at line 27 of file RCanvas.hxx. Libraries for ROOT::Experimental::RChangeAttrRequest:. [legend]; The documentation for this class was generated from the following files:; graf2d/gpadv7/inc/ROOT/RCanvas.hxx; graf2d/gpadv7/src/RCanvas.cxx. ROOTExperimentalRChangeAttrRequest. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:03 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RChangeAttrRequest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RChangeAttrRequest.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RChangeAttrRequest.html:3407,Deployability,update,update,3407,Request(). ROOT::Experimental::RChangeAttrRequest::~RChangeAttrRequest ; (; ). overridedefault . Member Function Documentation. ◆ NeedCanvasUpdate(). bool ROOT::Experimental::RChangeAttrRequest::NeedCanvasUpdate ; (; ); const. inlineoverridevirtual . Reimplemented from ROOT::Experimental::RDrawableRequest.; Definition at line 36 of file RCanvas.hxx. ◆ operator=(). RChangeAttrRequest & ROOT::Experimental::RChangeAttrRequest::operator= ; (; const RChangeAttrRequest & ; ). privatedelete . ◆ Process(). std::unique_ptr< ROOT::Experimental::RDrawableReply > ROOT::Experimental::RChangeAttrRequest::Process ; (; ). overridevirtual . Apply attributes changes to the drawable Return mask with actions which were really applied. ; Reimplemented from ROOT::Experimental::RDrawableRequest.; Definition at line 327 of file RCanvas.cxx. Member Data Documentation. ◆ fNeedUpdate. bool ROOT::Experimental::RChangeAttrRequest::fNeedUpdate {false}. private . ! is canvas update required ; Definition at line 29 of file RCanvas.hxx. ◆ ids. std::vector<std::string> ROOT::Experimental::RChangeAttrRequest::ids. private . array of ids ; Definition at line 25 of file RCanvas.hxx. ◆ names. std::vector<std::string> ROOT::Experimental::RChangeAttrRequest::names. private . array of attribute names ; Definition at line 26 of file RCanvas.hxx. ◆ update. bool ROOT::Experimental::RChangeAttrRequest::update {true}. private . update canvas at the end ; Definition at line 28 of file RCanvas.hxx. ◆ values. std::vector<std::unique_ptr<RAttrMap::Value_t> > ROOT::Experimental::RChangeAttrRequest::values. private . array of values ; Definition at line 27 of file RCanvas.hxx. Libraries for ROOT::Experimental::RChangeAttrRequest:. [legend]; The documentation for this class was generated from the following files:; graf2d/gpadv7/inc/ROOT/RCanvas.hxx; graf2d/gpadv7/src/RCanvas.cxx. ROOTExperimentalRChangeAttrRequest. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:03 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RChangeAttrRequest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RChangeAttrRequest.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RChangeAttrRequest.html:696,Modifiability,inherit,inherited,696,". ROOT: ROOT::Experimental::RChangeAttrRequest Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Experimental::RChangeAttrRequest Class Reference. . Definition at line 24 of file RCanvas.hxx. Public Member Functions;  RChangeAttrRequest ()=default;  ;  ~RChangeAttrRequest () override=default;  ; bool NeedCanvasUpdate () const override;  ; std::unique_ptr< RDrawableReply > Process () override;  Apply attributes changes to the drawable Return mask with actions which were really applied. ;  ;  Public Member Functions inherited from ROOT::Experimental::RDrawableRequest; virtual ~RDrawableRequest ();  destructor, pin vtable ;  ; RDrawable::RDisplayContext & GetContext ();  ; const RDrawable::RDisplayContext & GetContext () const;  ; const std::string & GetId () const;  ; uint64_t GetRequestId () const;  ; bool ShouldBeReplyed () const;  . Private Member Functions;  RChangeAttrRequest (const RChangeAttrRequest &)=delete;  ; RChangeAttrRequest & operator= (const RChangeAttrRequest &)=delete;  . Private Attributes; bool fNeedUpdate {false};  ! is canvas update required ;  ; std::vector< std::string > ids;  array of ids ;  ; std::vector< std::string > names;  array of attribute names ;  ; bool update {true};  update canvas at the end ;  ; std::vector< std::unique_ptr< RAttrMap::Value_t > > values;  array of values ;  . #include <ROOT/RCanvas.hxx>. Inheritance diagram for ROOT::Experimental::RChangeAttrRequest:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RChangeAttrRequest() [1/2]. ROOT::Experimental::RChangeAttrRequest::RChangeAttrRequest ; (; const RChangeAttrRequest & ; ). privatedelete . ◆ RChangeAttrRequest() [2/2]. ROOT::Experimental::RChangeAttrRequest::RChangeAttrRequest ; (; ). default . ◆ ~RChangeAttr",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RChangeAttrRequest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RChangeAttrRequest.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RColor.html:2084,Energy Efficiency,green,green,2084,"_t r, uint8_t g, uint8_t b);  Construct color with provided r,g,b values. ;  ;  RColor (uint8_t r, uint8_t g, uint8_t b, float alpha);  Construct color with provided r,g,b and alpha values. ;  ; std::string AsHex (bool with_alpha=false) const;  Returns color value in hex format like ""66FF66"" - without any prefix Alpha parameter can be optionally included. ;  ; std::vector< uint8_t > AsRGBA () const;  Returns color as RGBA array, trying also convert color name into RGBA value. ;  ; const std::string & AsString () const;  Returns color as it stored as string. ;  ; std::string AsSVG () const;  Returns color value as it will be used in SVG drawing It either include hex format #66FF66 or just plain SVG name. ;  ; void Clear ();  ; uint8_t GetAlpha () const;  Returns color alpha (opacity) as uint8_t 0..255. ;  ; float GetAlphaFloat () const;  Returns color alpha (opacity) as float from 0..1. ;  ; uint8_t GetBlue () const;  Returns blue color component 0..255. ;  ; uint8_t GetGreen () const;  Returns green color component 0..255. ;  ; bool GetHLS (float &hue, float &light, float &satur) const;  Return the Hue, Light, Saturation (HLS) definition of this RColor. ;  ; float GetOrdinal () const;  Return ordinal value, which was set before with SetOrdinal() call. ;  ; uint8_t GetRed () const;  Returns red color component 0..255. ;  ; bool HasAlpha () const;  Returns true if color alpha (opacity) was specified. ;  ; bool IsAuto () const;  Returns true if color specified as auto color. ;  ; bool IsEmpty () const;  Returns true if color is empty. ;  ; bool IsName () const;  Returns true if color specified as name. ;  ; bool IsOrdinal () const;  Returns if color codes ordinal value from palette. ;  ; bool IsRGB () const;  returns true if color stored as RGB ;  ; bool IsRGBA () const;  returns true if color stored as RGBA ;  ; void SetAlpha (uint8_t alpha);  Set alpha as value from range 0..255. ;  ; void SetAlphaFloat (float alpha);  Set alpha as float value from range 0..1. ;  ; v",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RColor.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RColor.html:9169,Energy Efficiency,green,green,9169,"finition at line 383 of file RColor.cxx. ◆ Clear(). void ROOT::Experimental::RColor::Clear ; (; ). inline . Definition at line 171 of file RColor.hxx. ◆ ConvertNameToRGB(). std::vector< uint8_t > RColor::ConvertNameToRGB ; (; const std::string & ; name). staticprivate . Converts string name of color in RGB value - when possible. ; Definition at line 156 of file RColor.cxx. ◆ GetAlpha(). uint8_t ROOT::Experimental::RColor::GetAlpha ; (; ); const. inline . Returns color alpha (opacity) as uint8_t 0..255. ; Definition at line 130 of file RColor.hxx. ◆ GetAlphaFloat(). float ROOT::Experimental::RColor::GetAlphaFloat ; (; ); const. inline . Returns color alpha (opacity) as float from 0..1. ; Definition at line 137 of file RColor.hxx. ◆ GetBlue(). uint8_t ROOT::Experimental::RColor::GetBlue ; (; ); const. inline . Returns blue color component 0..255. ; Definition at line 123 of file RColor.hxx. ◆ GetGreen(). uint8_t ROOT::Experimental::RColor::GetGreen ; (; ); const. inline . Returns green color component 0..255. ; Definition at line 116 of file RColor.hxx. ◆ GetHLS(). bool RColor::GetHLS ; (; float & ; hue, . float & ; light, . float & ; satur . ); const. Return the Hue, Light, Saturation (HLS) definition of this RColor. ; Returns the Hue, Light, Saturation (HLS) definition of this RColor If color was not specified as hex, method returns false. ; Definition at line 304 of file RColor.cxx. ◆ GetOrdinal(). float RColor::GetOrdinal ; (; ); const. Return ordinal value, which was set before with SetOrdinal() call. ; Definition at line 124 of file RColor.cxx. ◆ GetRed(). uint8_t ROOT::Experimental::RColor::GetRed ; (; ); const. inline . Returns red color component 0..255. ; Definition at line 109 of file RColor.hxx. ◆ HasAlpha(). bool ROOT::Experimental::RColor::HasAlpha ; (; ); const. inline . Returns true if color alpha (opacity) was specified. ; Definition at line 103 of file RColor.hxx. ◆ IsAuto(). bool RColor::IsAuto ; (; ); const. Returns true if color specified as auto c",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RColor.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html:4801,Availability,error,error,4801,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html:4890,Availability,error,error,4890,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html:5045,Availability,error,error,5045,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html:5342,Availability,error,error,5342,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html:9426,Availability,error,error,9426,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html:4807,Integrability,message,message,4807,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html:5348,Integrability,message,message,5348,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html:6338,Integrability,message,message,6338,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html:9432,Integrability,message,message,9432,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html:9805,Integrability,message,message,9805," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  G",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html:1604,Modifiability,inherit,inherited,1604," void AddElement (REveGeoShapeExtract *gse);  Add a child element. ;  ; TList * GetElements ();  ; Bool_t GetMiniFrame ();  ; Float_t * GetRGBA ();  ; Float_t * GetRGBALine ();  ; Bool_t GetRnrElements ();  ; Bool_t GetRnrFrame ();  ; Bool_t GetRnrSelf ();  ; TGeoShape * GetShape ();  ; Double_t * GetTrans ();  ; Bool_t HasElements ();  True if has at least one element. ;  ; TClass * IsA () const override;  ; void SetElements (TList *e);  ; void SetMiniFrame (Bool_t r);  ; void SetRGBA (const Float_t arr[4]);  Set RGBA color. ;  ; void SetRGBALine (const Float_t arr[4]);  Set RGBA color for line. ;  ; void SetRnrElements (Bool_t r);  ; void SetRnrFrame (Bool_t r);  ; void SetRnrSelf (Bool_t r);  ; void SetShape (TGeoShape *s);  ; void SetTrans (const Double_t arr[16]);  Set transformation matrix. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html:3344,Modifiability,inherit,inherited,3344,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html:4437,Modifiability,inherit,inheritance,4437,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html:6436,Modifiability,inherit,inherits,6436,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html:6553,Modifiability,inherit,inherits,6553,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html:10306,Modifiability,inherit,inherited,10306,"stem error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TList * fElements;  ; Bool_t fMiniFrame;  ; Float_t fRGBA [4];  ; Float_t fRGBALine [4];  ; Bool_t fRnrElements;  ; Bool_t fRnrFrame;  ; Bool_t fRnrSelf;  ; TGeoShape * fShape;  ; Double_t fTrans [16];  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions;  REveGeoShapeExtract (const REveGeoShapeExtract &)=delete;  ; REveGeoShapeExtract & o",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html:10516,Modifiability,inherit,inherited,10516,"stem error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TList * fElements;  ; Bool_t fMiniFrame;  ; Float_t fRGBA [4];  ; Float_t fRGBALine [4];  ; Bool_t fRnrElements;  ; Bool_t fRnrFrame;  ; Bool_t fRnrSelf;  ; TGeoShape * fShape;  ; Double_t fTrans [16];  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions;  REveGeoShapeExtract (const REveGeoShapeExtract &)=delete;  ; REveGeoShapeExtract & o",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html:11251,Modifiability,inherit,inherited,11251,"const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TList * fElements;  ; Bool_t fMiniFrame;  ; Float_t fRGBA [4];  ; Float_t fRGBALine [4];  ; Bool_t fRnrElements;  ; Bool_t fRnrFrame;  ; Bool_t fRnrSelf;  ; TGeoShape * fShape;  ; Double_t fTrans [16];  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions;  REveGeoShapeExtract (const REveGeoShapeExtract &)=delete;  ; REveGeoShapeExtract & operator= (const REveGeoShapeExtract &)=delete;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html:11516,Modifiability,inherit,inherited,11516,"nst char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TList * fElements;  ; Bool_t fMiniFrame;  ; Float_t fRGBA [4];  ; Float_t fRGBALine [4];  ; Bool_t fRnrElements;  ; Bool_t fRnrFrame;  ; Bool_t fRnrSelf;  ; TGeoShape * fShape;  ; Double_t fTrans [16];  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions;  REveGeoShapeExtract (const REveGeoShapeExtract &)=delete;  ; REveGeoShapeExtract & operator= (const REveGeoShapeExtract &)=delete;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <ROOT/REveGeoShapeExtract.hxx>. Inheritance diagram for ROOT::Experimental::REveGeoShapeExtract:. This browser is not able to show ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html:12157,Modifiability,inherit,inherited,12157,"d; TString fName;  ; TString fTitle;  . Private Member Functions;  REveGeoShapeExtract (const REveGeoShapeExtract &)=delete;  ; REveGeoShapeExtract & operator= (const REveGeoShapeExtract &)=delete;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <ROOT/REveGeoShapeExtract.hxx>. Inheritance diagram for ROOT::Experimental::REveGeoShapeExtract:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ REveGeoShapeExtract() [1/2]. ROOT::Experimental::REveGeoShapeExtract::REveGeoShapeExtract ; (; const REveGeoShapeExtract & ; ). privatedelete . ◆ REveGeoShapeExtract() [2/2]. REveGeoShapeExtract::REveGeoShapeExtract ; (; const char * ; n = ""REveGeoShapeExtract"", . const char * ; t = nullptr . ). Constructor. ; Definition at line 33 of file REveGeoShapeExtract.cxx. ◆ ~REveGeoShapeExtract(). REveGeoShapeExtract::~REveGeoShapeExtract ; (; ). override . Destructor. Delete shape and elements. ; Definition at line 51 of file REveGeoShapeExtract.cxx. Member Function Documentation. ◆ AddEl",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html:12256,Modifiability,inherit,inherited,12256,"d; TString fName;  ; TString fTitle;  . Private Member Functions;  REveGeoShapeExtract (const REveGeoShapeExtract &)=delete;  ; REveGeoShapeExtract & operator= (const REveGeoShapeExtract &)=delete;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <ROOT/REveGeoShapeExtract.hxx>. Inheritance diagram for ROOT::Experimental::REveGeoShapeExtract:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ REveGeoShapeExtract() [1/2]. ROOT::Experimental::REveGeoShapeExtract::REveGeoShapeExtract ; (; const REveGeoShapeExtract & ; ). privatedelete . ◆ REveGeoShapeExtract() [2/2]. REveGeoShapeExtract::REveGeoShapeExtract ; (; const char * ; n = ""REveGeoShapeExtract"", . const char * ; t = nullptr . ). Constructor. ; Definition at line 33 of file REveGeoShapeExtract.cxx. ◆ ~REveGeoShapeExtract(). REveGeoShapeExtract::~REveGeoShapeExtract ; (; ). override . Destructor. Delete shape and elements. ; Definition at line 51 of file REveGeoShapeExtract.cxx. Member Function Documentation. ◆ AddEl",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html:2472,Security,hash,hash,2472," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html:15262,Deployability,update,update,15262,");  Set transformation matrix from column-major array. ;  ; void SetupDefaultColorAndTransparency (Color_t col, Bool_t can_edit_color, Bool_t can_edit_transparency);  Set up element to use built-in main color and set flags allowing editing of main color and transparency. ;  ; void SetUserData (void *ud);  ; void SetVizModel (REveElement *model);  Set visualization-parameter model element. ;  ; Bool_t SetVizModelByTag ();  Find model element in VizDB that corresponds to previously assigned fVizTag and set fVizModel accordingly. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void Stamp ();  ; void StampColorSelection ();  ; void StampElementAdded ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; Bool_t TestCSCBits (UChar_t f) const;  ; void VizDB_Apply (const std::string &tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const std::string &tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ;  Public Member Functions inherited from ROOT::Experimental::REveProjectable;  REveProjectable ();  Constructor. ;  ;  REveProjectable (const REveProjectable &);  Copy constructor. Does shallow copy. ;  ; virtual ~REveProjectable ();  Destructor. ;  ; virtual void AddProjected (REveProjected *p);  ; virtual void AddProjectedsToSet (std::set< REveElement * > &set);  Add the projected elements to the set, dyn-casting them to REveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; virtual void ClearProjectedList ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Co",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html:15464,Deployability,update,update,15464,"flags allowing editing of main color and transparency. ;  ; void SetUserData (void *ud);  ; void SetVizModel (REveElement *model);  Set visualization-parameter model element. ;  ; Bool_t SetVizModelByTag ();  Find model element in VizDB that corresponds to previously assigned fVizTag and set fVizModel accordingly. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void Stamp ();  ; void StampColorSelection ();  ; void StampElementAdded ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; Bool_t TestCSCBits (UChar_t f) const;  ; void VizDB_Apply (const std::string &tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const std::string &tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ;  Public Member Functions inherited from ROOT::Experimental::REveProjectable;  REveProjectable ();  Constructor. ;  ;  REveProjectable (const REveProjectable &);  Copy constructor. Does shallow copy. ;  ; virtual ~REveProjectable ();  Destructor. ;  ; virtual void AddProjected (REveProjected *p);  ; virtual void AddProjectedsToSet (std::set< REveElement * > &set);  Add the projected elements to the set, dyn-casting them to REveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; virtual void ClearProjectedList ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main color of projecteds if their color is the same as old_color. ;  ; virtual void PropagateMainTransparency (Char_t t, Char_t old_t);  Set main transparency of projecteds if their transparency",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html:7165,Integrability,depend,dependant,7165,"CSCTakeMotherAsMaster ();  ; void DecDenyDestroy ();  Decreases the deny-destroy count of the element. ;  ; void DecImpliedSelected ();  ; virtual void Destroy ();  Destroy this element. ;  ; virtual void DestroyElements ();  Destroy all children of this element. ;  ; virtual void DestroyMainTrans ();  Destroy the main transformation matrix, it will always be taken as identity. ;  ; virtual void DestroyOrWarn ();  Destroy this element. Prints a warning if deny-destroy is in force. ;  ; void DisableListElements (Bool_t rnr_self=kFALSE, Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; virtual void ExportToInterpreter (const char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillExtraSelectionData (nlohmann::json &, const std::set< int > &) const;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet, const std::set< int > &);  Populate set impSelSet with derived / dependant elements. ;  ; REveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; REveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; REveElement * FirstChild () const;  Returns the first child element or 0 if the list is empty. ;  ; UChar_t GetChangeBits () const;  ; TClass * GetChildClass () const;  ; const char * GetCName () const;  ; REveCompound * GetCompound ();  ; const char * GetCTitle () const;  ; Int_t GetDenyDestroy () const;  R",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html:11026,Integrability,depend,dependent,11026," NumAunts () const;  ; Int_t NumChildren () const;  ; virtual void ProjectAllChildren (Bool_t same_depth=kTRUE);  If this is a projectable, loop over all projected replicas and add the projected image of all children there. ;  ; virtual void ProjectChild (REveElement *el, Bool_t same_depth=kTRUE);  If this is a projectable, loop over all projected replicas and add the projected image of child 'el' there. ;  ; virtual void PropagateMainColorToProjecteds (Color_t color, Color_t old_color);  Propagate color to projected elements. ;  ; virtual void PropagateMainTransparencyToProjecteds (Char_t t, Char_t old_t);  Propagate transparency to projected elements. ;  ; virtual void PropagateRnrStateToProjecteds ();  Propagate render state to the projected replicas of this element. ;  ; virtual void PropagateVizParamsToChildren (REveElement *el=nullptr);  Propagate visualization parameters from element el (defaulting to this) to all children. ;  ; virtual void PropagateVizParamsToProjecteds ();  Propagate visualization parameters to dependent elements. ;  ; virtual REveTrans * PtrMainTrans (Bool_t create=kTRUE);  Return pointer to main transformation. ;  ; void RecheckImpliedSelections ();  Call this if it is possible that implied-selection or highlight has changed for this element or for implied-selection this element is member of and you want to maintain consistent selection state. ;  ; AuntList_t & RefAunts ();  ; const AuntList_t & RefAunts () const;  ; List_t & RefChildren ();  ; const List_t & RefChildren () const;  ; virtual REveTrans & RefMainTrans ();  Return reference to main transformation. ;  ; virtual void RemoveAunt (REveAunt *au);  Remove el from the list of aunts. ;  ; virtual void RemoveElement (REveElement *el);  Remove el from the list of children. ;  ; virtual void RemoveElementLocal (REveElement *el);  Perform additional local removal of el. ;  ; virtual void RemoveElements ();  Remove all elements. ;  ; virtual void RemoveElementsLocal ();  Perform additio",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html:2296,Modifiability,inherit,inherited,2296,"EveProjectable, returns REvePointSetProjected class. ;  ; void ReduceSegmentLengths (Float_t max);  Make sure that no segment is longer than max. ;  ; void SetLineColor (Color_t col) override;  Set the line color. ;  ; void SetLineStyle (Style_t lstyle) override;  Set line-style of the line. ;  ; void SetLineWidth (Width_t lwidth) override;  Set line-style of the line. ;  ; void SetMarkerColor (Color_t col) override;  Set marker color. Propagate to projected lines. ;  ; void SetRnrLine (Bool_t r);  Set rendering of line. Propagate to projected lines. ;  ; void SetRnrPoints (Bool_t r);  Set rendering of points. Propagate to projected lines. ;  ; void SetSmooth (Bool_t r);  Set smooth rendering. Propagate to projected lines. ;  ; Int_t WriteCoreJson (nlohmann::json &cj, Int_t rnr_offset) override;  Write core json. ;  ; void WriteVizParams (std::ostream &out, const TString &var) override;  Write visualization parameters. ;  ;  Public Member Functions inherited from ROOT::Experimental::REvePointSet;  REvePointSet (const REvePointSet &e);  Copy constructor. ;  ;  REvePointSet (const std::string &name="""", const std::string &title="""", Int_t n_points=0);  Constructor. ;  ;  ~REvePointSet () override;  Destructor. ;  ; void BuildRenderData () override;  Crates 3D point array for rendering. ;  ; REvePointSet * CloneElement () const override;  Clone the element via copy constructor. ;  ; virtual void ClonePoints (const REvePointSet &e);  Clone points and all point-related information from point-set 'e'. ;  ; void ComputeBBox () override;  Compute bounding box. ;  ; void CopyVizParams (const REveElement *el) override;  Copy visualization parameters from element el. ;  ; int GetCapacity () const;  ; int GetSize () const;  ; Int_t GrowFor (Int_t n_points);  Resizes internal array to allow additional n_points to be stored. ;  ; void PointSelected (Int_t id);  Virtual method of base class TPointSet3D. ;  ; TClass * ProjectedClass (const REveProjection *p) const override;  Virtual f",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html:4168,Modifiability,inherit,inherited,4168," id);  Virtual method of base class TPointSet3D. ;  ; TClass * ProjectedClass (const REveProjection *p) const override;  Virtual from REveProjectable, returns REvePointSetProjected class. ;  ; REveVector & RefPoint (int n);  ; const REveVector & RefPoint (int n) const;  ; void Reset (Int_t n_points=0);  Drop all data and set-up the data structures to recive new data. ;  ; void SetMarkerColor (Color_t col) override;  Set the marker color. ;  ; void SetMarkerSize (Size_t msize=1) override;  Set marker size, propagate to projecteds. ;  ; void SetMarkerStyle (Style_t mstyle=1) override;  Set marker style, propagate to projecteds. ;  ; int SetNextPoint (float x, float y, float z);  ; int SetPoint (int n, float x, float y, float z);  ; Int_t WriteCoreJson (nlohmann::json &j, Int_t rnr_offset) override;  Write core json. ;  ; void WriteVizParams (std::ostream &out, const TString &var) override;  Write visualization parameters. ;  ;  Public Member Functions inherited from ROOT::Experimental::REveElement;  REveElement (const REveElement &e);  Copy constructor. ;  ;  REveElement (const std::string &name="""", const std::string &title="""");  Default constructor. ;  ; virtual ~REveElement ();  Destructor. ;  ; virtual Bool_t AcceptElement (REveElement *el);  Check if el can be added to this element. ;  ; virtual void AddAunt (REveAunt *au);  Add el into the list aunts. ;  ; virtual void AddElement (REveElement *el);  Add el to the list of children. ;  ; virtual void AddStamp (UChar_t bits);  Add (bitwise or) given stamps to fChangeBits. ;  ; virtual void Annihilate ();  Optimized destruction without check of reference-count. ;  ; virtual void AnnihilateElements ();  Annihilate elements. ;  ; Bool_t ApplyVizTag (const TString &tag, const TString &fallback_tag="""");  Set the VizTag, find model-element from the VizDB and copy visualization-parameters from it. ;  ; virtual Bool_t CanEditElement () const;  ; virtual Bool_t CanEditMainColor () const;  ; virtual Bool_t CanEditMainTrans ()",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html:6926,Modifiability,variab,variable,6926,"olorToMatchingChildren ();  ; void CSCApplyMainTransparencyToAllChildren ();  ; void CSCApplyMainTransparencyToMatchingChildren ();  ; void CSCImplySelectAllChildren ();  ; void CSCTakeMotherAsMaster ();  ; void DecDenyDestroy ();  Decreases the deny-destroy count of the element. ;  ; void DecImpliedSelected ();  ; virtual void Destroy ();  Destroy this element. ;  ; virtual void DestroyElements ();  Destroy all children of this element. ;  ; virtual void DestroyMainTrans ();  Destroy the main transformation matrix, it will always be taken as identity. ;  ; virtual void DestroyOrWarn ();  Destroy this element. Prints a warning if deny-destroy is in force. ;  ; void DisableListElements (Bool_t rnr_self=kFALSE, Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; virtual void ExportToInterpreter (const char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillExtraSelectionData (nlohmann::json &, const std::set< int > &) const;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet, const std::set< int > &);  Populate set impSelSet with derived / dependant elements. ;  ; REveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; REveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; REveElement * FirstChild () const;  Returns the first child element or 0 if the list is empty. ;  ; UChar_t GetChangeBits () const",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html:12703,Modifiability,variab,variable,12703,"oveAunt (REveAunt *au);  Remove el from the list of aunts. ;  ; virtual void RemoveElement (REveElement *el);  Remove el from the list of children. ;  ; virtual void RemoveElementLocal (REveElement *el);  Perform additional local removal of el. ;  ; virtual void RemoveElements ();  Remove all elements. ;  ; virtual void RemoveElementsLocal ();  Perform additional local removal of all elements. ;  ; virtual bool RequiresExtraSelectionData () const;  ; void ResetAllCSCBits ();  ; void ResetCSCBits (UChar_t f);  ; void SaveVizParams (std::ostream &out, const TString &tag, const TString &var);  Save visualization parameters for this element with given tag. ;  ; void SetChildClass (TClass *c);  ; void SetCompound (REveCompound *c);  ; void SetCSCBits (UChar_t f);  ; void SetDestroyOnZeroRefCnt (Bool_t d);  Sets the state of flag determining if the element will be destroyed when reference count reaches zero. ;  ; void SetEditMainColor (Bool_t x);  ; void SetEditMainTransparency (Bool_t x);  ; void SetMainAlpha (Float_t alpha);  Set main-transparency via float alpha variable. ;  ; virtual void SetMainColor (Color_t color);  Set main color of the element. ;  ; void SetMainColorPixel (Pixel_t pixel);  Convert pixel to Color_t and call SetMainColor(). ;  ; void SetMainColorPtr (Color_t *colptr);  ; void SetMainColorRGB (Float_t r, Float_t g, Float_t b);  Convert RGB values to Color_t and call SetMainColor. ;  ; void SetMainColorRGB (UChar_t r, UChar_t g, UChar_t b);  Convert RGB values to Color_t and call SetMainColor. ;  ; virtual void SetMainTransparency (Char_t t);  Set main-transparency. ;  ; void SetName (const std::string &name);  Set name of an element. ;  ; void SetNameTitle (const std::string &name, const std::string &title);  Set name and title of an element. ;  ; void SetPickable (Bool_t p);  ; void SetPickableRecursively (Bool_t p);  Set pickable state on the element and all its children. ;  ; virtual Bool_t SetRnrChildren (Bool_t rnr);  Set render state of this e",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html:15568,Modifiability,inherit,inherited,15568,"eElement *model);  Set visualization-parameter model element. ;  ; Bool_t SetVizModelByTag ();  Find model element in VizDB that corresponds to previously assigned fVizTag and set fVizModel accordingly. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void Stamp ();  ; void StampColorSelection ();  ; void StampElementAdded ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; Bool_t TestCSCBits (UChar_t f) const;  ; void VizDB_Apply (const std::string &tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const std::string &tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ;  Public Member Functions inherited from ROOT::Experimental::REveProjectable;  REveProjectable ();  Constructor. ;  ;  REveProjectable (const REveProjectable &);  Copy constructor. Does shallow copy. ;  ; virtual ~REveProjectable ();  Destructor. ;  ; virtual void AddProjected (REveProjected *p);  ; virtual void AddProjectedsToSet (std::set< REveElement * > &set);  Add the projected elements to the set, dyn-casting them to REveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; virtual void ClearProjectedList ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main color of projecteds if their color is the same as old_color. ;  ; virtual void PropagateMainTransparency (Char_t t, Char_t old_t);  Set main transparency of projecteds if their transparency is the same as the old one. ;  ; virtual void PropagateRenderState (Bool_t rnr_self, Bool_t rnr_children);  Set r",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html:16848,Modifiability,inherit,inherited,16848,"ojected *p);  ; virtual void AddProjectedsToSet (std::set< REveElement * > &set);  Add the projected elements to the set, dyn-casting them to REveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; virtual void ClearProjectedList ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main color of projecteds if their color is the same as old_color. ;  ; virtual void PropagateMainTransparency (Char_t t, Char_t old_t);  Set main transparency of projecteds if their transparency is the same as the old one. ;  ; virtual void PropagateRenderState (Bool_t rnr_self, Bool_t rnr_children);  Set render state of projecteds. ;  ; virtual void PropagateVizParams (REveElement *el=nullptr);  Set visualization parameters of projecteds. ;  ; ProjList_t & RefProjecteds ();  ; virtual void RemoveProjected (REveProjected *p);  ;  Public Member Functions inherited from TAttMarker;  TAttMarker ();  TAttMarker default constructor. ;  ;  TAttMarker (Color_t color, Style_t style, Size_t msize);  TAttMarker normal constructor. ;  ; virtual ~TAttMarker ();  TAttMarker destructor. ;  ; void Copy (TAttMarker &attmarker) const;  Copy this marker attributes to a new TAttMarker. ;  ; virtual Color_t GetMarkerColor () const;  Return the marker color. ;  ; virtual Size_t GetMarkerSize () const;  Return the marker size. ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual TClass * IsA () const;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttribut",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html:18116,Modifiability,inherit,inherited,18116,"; virtual Size_t GetMarkerSize () const;  Return the marker size. ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual TClass * IsA () const;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttBBox;  TAttBBox ();  ; virtual ~TAttBBox ();  ; Float_t * AssertBBox ();  ; Float_t * GetBBox ();  ; Bool_t GetBBoxOK () const;  ; virtual TClass * IsA () const;  ; TAttBBox & operator= (const TAttBBox &tab);  ; void ResetBBox ();  ; void SetupBBoxCube (Float_t extent, Float_t x, Float_t y, Float_t z);  Setup bounding box as cube with given extent and center position. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from ROOT::Experimental::REveSecondarySelectable;  REveSecondarySelectable ()=default;  ; virtual ~REveSecondarySelectable ();  ; Bool_t GetAlwaysSecSelect () const;  ; SelectionSet_t & RefHighlightedSet ();  ; SelectionSet_t & RefSelectedSet ();  ; void SetAlwaysSecSelect (Bool_t f);  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes t",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html:18639,Modifiability,inherit,inherited,18639,") on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttBBox;  TAttBBox ();  ; virtual ~TAttBBox ();  ; Float_t * AssertBBox ();  ; Float_t * GetBBox ();  ; Bool_t GetBBoxOK () const;  ; virtual TClass * IsA () const;  ; TAttBBox & operator= (const TAttBBox &tab);  ; void ResetBBox ();  ; void SetupBBoxCube (Float_t extent, Float_t x, Float_t y, Float_t z);  Setup bounding box as cube with given extent and center position. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from ROOT::Experimental::REveSecondarySelectable;  REveSecondarySelectable ()=default;  ; virtual ~REveSecondarySelectable ();  ; Bool_t GetAlwaysSecSelect () const;  ; SelectionSet_t & RefHighlightedSet ();  ; SelectionSet_t & RefSelectedSet ();  ; void SetAlwaysSecSelect (Bool_t f);  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual TClass * IsA () const;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *o",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html:18963,Modifiability,inherit,inherited,18963,") on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttBBox;  TAttBBox ();  ; virtual ~TAttBBox ();  ; Float_t * AssertBBox ();  ; Float_t * GetBBox ();  ; Bool_t GetBBoxOK () const;  ; virtual TClass * IsA () const;  ; TAttBBox & operator= (const TAttBBox &tab);  ; void ResetBBox ();  ; void SetupBBoxCube (Float_t extent, Float_t x, Float_t y, Float_t z);  Setup bounding box as cube with given extent and center position. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from ROOT::Experimental::REveSecondarySelectable;  REveSecondarySelectable ()=default;  ; virtual ~REveSecondarySelectable ();  ; Bool_t GetAlwaysSecSelect () const;  ; SelectionSet_t & RefHighlightedSet ();  ; SelectionSet_t & RefSelectedSet ();  ; void SetAlwaysSecSelect (Bool_t f);  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual TClass * IsA () const;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *o",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html:20570,Modifiability,inherit,inherited,20570,"ributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static Bool_t GetDefaultSmooth ();  Get default value for smooth-line drawing flag. ;  ; static void SetDefaultSmooth (Bool_t r);  Set default value for smooth-line drawing flag (default kFALSE). ;  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttBBox; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; Bool_t fRnrLine;  ; Bool_t fRnrPoints;  ; Bool_t fSmooth;  ;  Protected Attributes inherited from ROOT::Experimental::REvePointSet; int fCapacity {0};  ; std::vector< REveVector > fPoints;  ; int fSize {0};  ; int fTexX {0};  ; int fTexY {0};  ;  Protected Attributes inherited fro",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html:21105,Modifiability,inherit,inherited,21105,StreamerNVirtual_b);  . Static Public Member Functions; static Bool_t GetDefaultSmooth ();  Get default value for smooth-line drawing flag. ;  ; static void SetDefaultSmooth (Bool_t r);  Set default value for smooth-line drawing flag (default kFALSE). ;  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttBBox; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; Bool_t fRnrLine;  ; Bool_t fRnrPoints;  ; Bool_t fSmooth;  ;  Protected Attributes inherited from ROOT::Experimental::REvePointSet; int fCapacity {0};  ; std::vector< REveVector > fPoints;  ; int fSize {0};  ; int fTexX {0};  ; int fTexY {0};  ;  Protected Attributes inherited from ROOT::Experimental::REveElement; AuntList_t fAunts;  ; Bool_t fCanEditMainColor {kFALSE};  ; Bool_t fCanEditMainTrans {kFALSE};  ; Bool_t fCanEditMainTransparency {kFALSE};  ; UChar_t fChangeBits {0};  ; TClass * fChildClass {nullptr};  ; List_t fChildren;  ; REveCompound * fCompound {nullptr};  ; UChar_t fCSCBits {0};  ; Color_t fDefaultColor {kPink};  ; Int_t fDenyDestroy {0};  ; Bool_t fDestroyOnZeroRefCnt {kTRUE};  Deny-destroy count. ;  ; Char_t fDestructing {kNone};  ; ,MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html:21317,Modifiability,inherit,inherited,21317,StreamerNVirtual_b);  . Static Public Member Functions; static Bool_t GetDefaultSmooth ();  Get default value for smooth-line drawing flag. ;  ; static void SetDefaultSmooth (Bool_t r);  Set default value for smooth-line drawing flag (default kFALSE). ;  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttBBox; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; Bool_t fRnrLine;  ; Bool_t fRnrPoints;  ; Bool_t fSmooth;  ;  Protected Attributes inherited from ROOT::Experimental::REvePointSet; int fCapacity {0};  ; std::vector< REveVector > fPoints;  ; int fSize {0};  ; int fTexX {0};  ; int fTexY {0};  ;  Protected Attributes inherited from ROOT::Experimental::REveElement; AuntList_t fAunts;  ; Bool_t fCanEditMainColor {kFALSE};  ; Bool_t fCanEditMainTrans {kFALSE};  ; Bool_t fCanEditMainTransparency {kFALSE};  ; UChar_t fChangeBits {0};  ; TClass * fChildClass {nullptr};  ; List_t fChildren;  ; REveCompound * fCompound {nullptr};  ; UChar_t fCSCBits {0};  ; Color_t fDefaultColor {kPink};  ; Int_t fDenyDestroy {0};  ; Bool_t fDestroyOnZeroRefCnt {kTRUE};  Deny-destroy count. ;  ; Char_t fDestructing {kNone};  ; ,MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html:21602,Modifiability,inherit,inherited,21602,marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttBBox; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; Bool_t fRnrLine;  ; Bool_t fRnrPoints;  ; Bool_t fSmooth;  ;  Protected Attributes inherited from ROOT::Experimental::REvePointSet; int fCapacity {0};  ; std::vector< REveVector > fPoints;  ; int fSize {0};  ; int fTexX {0};  ; int fTexY {0};  ;  Protected Attributes inherited from ROOT::Experimental::REveElement; AuntList_t fAunts;  ; Bool_t fCanEditMainColor {kFALSE};  ; Bool_t fCanEditMainTrans {kFALSE};  ; Bool_t fCanEditMainTransparency {kFALSE};  ; UChar_t fChangeBits {0};  ; TClass * fChildClass {nullptr};  ; List_t fChildren;  ; REveCompound * fCompound {nullptr};  ; UChar_t fCSCBits {0};  ; Color_t fDefaultColor {kPink};  ; Int_t fDenyDestroy {0};  ; Bool_t fDestroyOnZeroRefCnt {kTRUE};  Deny-destroy count. ;  ; Char_t fDestructing {kNone};  ; Short_t fImpliedSelected {0};  ; Color_t * fMainColorPtr {nullptr};  ; std::unique_ptr< REveTrans > fMainTrans;  ; Char_t fMainTransparency {0};  ; REveElement * fMother {nullptr};  ; std::string fName;  ; Bool_t fPickable {false};  ; std::unique_ptr< REveRenderData > fRenderData;  Externally assigned and controlled user data. ;  ; Bool_t fRnrChildren {kTRUE};  ; Bool_t fRnrSelf {kTRUE};  ; REveScene * fScene {nullptr};  ; REveElement * fSelectionMaster {nullptr};  ; std::string fTitle;  ; void * fUserData {nullptr};  ; REveElement * fVizModel {nullptr};  ; TString fVizTag;  Elemen,MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html:21787,Modifiability,inherit,inherited,21787,marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttBBox; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; Bool_t fRnrLine;  ; Bool_t fRnrPoints;  ; Bool_t fSmooth;  ;  Protected Attributes inherited from ROOT::Experimental::REvePointSet; int fCapacity {0};  ; std::vector< REveVector > fPoints;  ; int fSize {0};  ; int fTexX {0};  ; int fTexY {0};  ;  Protected Attributes inherited from ROOT::Experimental::REveElement; AuntList_t fAunts;  ; Bool_t fCanEditMainColor {kFALSE};  ; Bool_t fCanEditMainTrans {kFALSE};  ; Bool_t fCanEditMainTransparency {kFALSE};  ; UChar_t fChangeBits {0};  ; TClass * fChildClass {nullptr};  ; List_t fChildren;  ; REveCompound * fCompound {nullptr};  ; UChar_t fCSCBits {0};  ; Color_t fDefaultColor {kPink};  ; Int_t fDenyDestroy {0};  ; Bool_t fDestroyOnZeroRefCnt {kTRUE};  Deny-destroy count. ;  ; Char_t fDestructing {kNone};  ; Short_t fImpliedSelected {0};  ; Color_t * fMainColorPtr {nullptr};  ; std::unique_ptr< REveTrans > fMainTrans;  ; Char_t fMainTransparency {0};  ; REveElement * fMother {nullptr};  ; std::string fName;  ; Bool_t fPickable {false};  ; std::unique_ptr< REveRenderData > fRenderData;  Externally assigned and controlled user data. ;  ; Bool_t fRnrChildren {kTRUE};  ; Bool_t fRnrSelf {kTRUE};  ; REveScene * fScene {nullptr};  ; REveElement * fSelectionMaster {nullptr};  ; std::string fTitle;  ; void * fUserData {nullptr};  ; REveElement * fVizModel {nullptr};  ; TString fVizTag;  Elemen,MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html:22925,Modifiability,inherit,inherited,22925,"its {0};  ; TClass * fChildClass {nullptr};  ; List_t fChildren;  ; REveCompound * fCompound {nullptr};  ; UChar_t fCSCBits {0};  ; Color_t fDefaultColor {kPink};  ; Int_t fDenyDestroy {0};  ; Bool_t fDestroyOnZeroRefCnt {kTRUE};  Deny-destroy count. ;  ; Char_t fDestructing {kNone};  ; Short_t fImpliedSelected {0};  ; Color_t * fMainColorPtr {nullptr};  ; std::unique_ptr< REveTrans > fMainTrans;  ; Char_t fMainTransparency {0};  ; REveElement * fMother {nullptr};  ; std::string fName;  ; Bool_t fPickable {false};  ; std::unique_ptr< REveRenderData > fRenderData;  Externally assigned and controlled user data. ;  ; Bool_t fRnrChildren {kTRUE};  ; Bool_t fRnrSelf {kTRUE};  ; REveScene * fScene {nullptr};  ; REveElement * fSelectionMaster {nullptr};  ; std::string fTitle;  ; void * fUserData {nullptr};  ; REveElement * fVizModel {nullptr};  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from ROOT::Experimental::REveProjectable; ProjList_t fProjectedList;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttBBox; Float_t * fBBox;  ;  Protected Attributes inherited from ROOT::Experimental::REveSecondarySelectable; Bool_t fAlwaysSecSelect {kFALSE};  ; SelectionSet_t fHighlightedSet;  ; SelectionSet_t fSelectedSet;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . Static Protected Attributes; static Bool_t fgDefaultSmooth = kFALSE;  . Private Member Functions; REveLine & operator= (const REveLine &)=delete;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::REveElement; typedef std::list< REveAunt * > AuntList_t;  ; enum  EChangeBits { ;   kCBColorSelection = BIT(0); , kCBTransBBox = BIT(1); , kCBObjProps = BIT(2); , kCBVisibili",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html:23029,Modifiability,inherit,inherited,23029,"its {0};  ; TClass * fChildClass {nullptr};  ; List_t fChildren;  ; REveCompound * fCompound {nullptr};  ; UChar_t fCSCBits {0};  ; Color_t fDefaultColor {kPink};  ; Int_t fDenyDestroy {0};  ; Bool_t fDestroyOnZeroRefCnt {kTRUE};  Deny-destroy count. ;  ; Char_t fDestructing {kNone};  ; Short_t fImpliedSelected {0};  ; Color_t * fMainColorPtr {nullptr};  ; std::unique_ptr< REveTrans > fMainTrans;  ; Char_t fMainTransparency {0};  ; REveElement * fMother {nullptr};  ; std::string fName;  ; Bool_t fPickable {false};  ; std::unique_ptr< REveRenderData > fRenderData;  Externally assigned and controlled user data. ;  ; Bool_t fRnrChildren {kTRUE};  ; Bool_t fRnrSelf {kTRUE};  ; REveScene * fScene {nullptr};  ; REveElement * fSelectionMaster {nullptr};  ; std::string fTitle;  ; void * fUserData {nullptr};  ; REveElement * fVizModel {nullptr};  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from ROOT::Experimental::REveProjectable; ProjList_t fProjectedList;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttBBox; Float_t * fBBox;  ;  Protected Attributes inherited from ROOT::Experimental::REveSecondarySelectable; Bool_t fAlwaysSecSelect {kFALSE};  ; SelectionSet_t fHighlightedSet;  ; SelectionSet_t fSelectedSet;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . Static Protected Attributes; static Bool_t fgDefaultSmooth = kFALSE;  . Private Member Functions; REveLine & operator= (const REveLine &)=delete;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::REveElement; typedef std::list< REveAunt * > AuntList_t;  ; enum  EChangeBits { ;   kCBColorSelection = BIT(0); , kCBTransBBox = BIT(1); , kCBObjProps = BIT(2); , kCBVisibili",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html:23201,Modifiability,inherit,inherited,23201,"llptr};  ; std::unique_ptr< REveTrans > fMainTrans;  ; Char_t fMainTransparency {0};  ; REveElement * fMother {nullptr};  ; std::string fName;  ; Bool_t fPickable {false};  ; std::unique_ptr< REveRenderData > fRenderData;  Externally assigned and controlled user data. ;  ; Bool_t fRnrChildren {kTRUE};  ; Bool_t fRnrSelf {kTRUE};  ; REveScene * fScene {nullptr};  ; REveElement * fSelectionMaster {nullptr};  ; std::string fTitle;  ; void * fUserData {nullptr};  ; REveElement * fVizModel {nullptr};  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from ROOT::Experimental::REveProjectable; ProjList_t fProjectedList;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttBBox; Float_t * fBBox;  ;  Protected Attributes inherited from ROOT::Experimental::REveSecondarySelectable; Bool_t fAlwaysSecSelect {kFALSE};  ; SelectionSet_t fHighlightedSet;  ; SelectionSet_t fSelectedSet;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . Static Protected Attributes; static Bool_t fgDefaultSmooth = kFALSE;  . Private Member Functions; REveLine & operator= (const REveLine &)=delete;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::REveElement; typedef std::list< REveAunt * > AuntList_t;  ; enum  EChangeBits { ;   kCBColorSelection = BIT(0); , kCBTransBBox = BIT(1); , kCBObjProps = BIT(2); , kCBVisibility = BIT(3); , ;   kCBElementAdded = BIT(4). };  ; typedef std::list< REveElement * > List_t;  ; typedef std::set< REveElement * > Set_t;  ;  Public Types inherited from ROOT::Experimental::REveProjectable; typedef std::list< REveProjected * > ProjList_t;  ;  Public Types inherited from ROOT::Experimental::REveSecondarySelectable; typedef std::s",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html:23268,Modifiability,inherit,inherited,23268,"llptr};  ; std::unique_ptr< REveTrans > fMainTrans;  ; Char_t fMainTransparency {0};  ; REveElement * fMother {nullptr};  ; std::string fName;  ; Bool_t fPickable {false};  ; std::unique_ptr< REveRenderData > fRenderData;  Externally assigned and controlled user data. ;  ; Bool_t fRnrChildren {kTRUE};  ; Bool_t fRnrSelf {kTRUE};  ; REveScene * fScene {nullptr};  ; REveElement * fSelectionMaster {nullptr};  ; std::string fTitle;  ; void * fUserData {nullptr};  ; REveElement * fVizModel {nullptr};  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from ROOT::Experimental::REveProjectable; ProjList_t fProjectedList;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttBBox; Float_t * fBBox;  ;  Protected Attributes inherited from ROOT::Experimental::REveSecondarySelectable; Bool_t fAlwaysSecSelect {kFALSE};  ; SelectionSet_t fHighlightedSet;  ; SelectionSet_t fSelectedSet;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . Static Protected Attributes; static Bool_t fgDefaultSmooth = kFALSE;  . Private Member Functions; REveLine & operator= (const REveLine &)=delete;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::REveElement; typedef std::list< REveAunt * > AuntList_t;  ; enum  EChangeBits { ;   kCBColorSelection = BIT(0); , kCBTransBBox = BIT(1); , kCBObjProps = BIT(2); , kCBVisibility = BIT(3); , ;   kCBElementAdded = BIT(4). };  ; typedef std::list< REveElement * > List_t;  ; typedef std::set< REveElement * > Set_t;  ;  Public Types inherited from ROOT::Experimental::REveProjectable; typedef std::list< REveProjected * > ProjList_t;  ;  Public Types inherited from ROOT::Experimental::REveSecondarySelectable; typedef std::s",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html:23454,Modifiability,inherit,inherited,23454,"llptr};  ; std::unique_ptr< REveTrans > fMainTrans;  ; Char_t fMainTransparency {0};  ; REveElement * fMother {nullptr};  ; std::string fName;  ; Bool_t fPickable {false};  ; std::unique_ptr< REveRenderData > fRenderData;  Externally assigned and controlled user data. ;  ; Bool_t fRnrChildren {kTRUE};  ; Bool_t fRnrSelf {kTRUE};  ; REveScene * fScene {nullptr};  ; REveElement * fSelectionMaster {nullptr};  ; std::string fTitle;  ; void * fUserData {nullptr};  ; REveElement * fVizModel {nullptr};  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from ROOT::Experimental::REveProjectable; ProjList_t fProjectedList;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttBBox; Float_t * fBBox;  ;  Protected Attributes inherited from ROOT::Experimental::REveSecondarySelectable; Bool_t fAlwaysSecSelect {kFALSE};  ; SelectionSet_t fHighlightedSet;  ; SelectionSet_t fSelectedSet;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . Static Protected Attributes; static Bool_t fgDefaultSmooth = kFALSE;  . Private Member Functions; REveLine & operator= (const REveLine &)=delete;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::REveElement; typedef std::list< REveAunt * > AuntList_t;  ; enum  EChangeBits { ;   kCBColorSelection = BIT(0); , kCBTransBBox = BIT(1); , kCBObjProps = BIT(2); , kCBVisibility = BIT(3); , ;   kCBElementAdded = BIT(4). };  ; typedef std::list< REveElement * > List_t;  ; typedef std::set< REveElement * > Set_t;  ;  Public Types inherited from ROOT::Experimental::REveProjectable; typedef std::list< REveProjected * > ProjList_t;  ;  Public Types inherited from ROOT::Experimental::REveSecondarySelectable; typedef std::s",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html:23786,Modifiability,inherit,inherited,23786," VizDB. ;  ;  Protected Attributes inherited from ROOT::Experimental::REveProjectable; ProjList_t fProjectedList;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttBBox; Float_t * fBBox;  ;  Protected Attributes inherited from ROOT::Experimental::REveSecondarySelectable; Bool_t fAlwaysSecSelect {kFALSE};  ; SelectionSet_t fHighlightedSet;  ; SelectionSet_t fSelectedSet;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . Static Protected Attributes; static Bool_t fgDefaultSmooth = kFALSE;  . Private Member Functions; REveLine & operator= (const REveLine &)=delete;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::REveElement; typedef std::list< REveAunt * > AuntList_t;  ; enum  EChangeBits { ;   kCBColorSelection = BIT(0); , kCBTransBBox = BIT(1); , kCBObjProps = BIT(2); , kCBVisibility = BIT(3); , ;   kCBElementAdded = BIT(4). };  ; typedef std::list< REveElement * > List_t;  ; typedef std::set< REveElement * > Set_t;  ;  Public Types inherited from ROOT::Experimental::REveProjectable; typedef std::list< REveProjected * > ProjList_t;  ;  Public Types inherited from ROOT::Experimental::REveSecondarySelectable; typedef std::set< Int_t > SelectionSet_t;  ;  Protected Types inherited from ROOT::Experimental::REveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = BIT(0); , kCSCBTakeMotherAsMaster = BIT(1); , kCSCBApplyMainColorToAllChildren = BIT(2); , kCSCBApplyMainColorToMatchingChildren = BIT(3); , ;   kCSCBApplyMainTransparencyToAllChildren = BIT(4); , kCSCBApplyMainTransparencyToMatchingChildren = BIT(5). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Member Functions inherited from ROOT::Experimental::RE",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html:24150,Modifiability,inherit,inherited,24150," SelectionSet_t fSelectedSet;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . Static Protected Attributes; static Bool_t fgDefaultSmooth = kFALSE;  . Private Member Functions; REveLine & operator= (const REveLine &)=delete;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::REveElement; typedef std::list< REveAunt * > AuntList_t;  ; enum  EChangeBits { ;   kCBColorSelection = BIT(0); , kCBTransBBox = BIT(1); , kCBObjProps = BIT(2); , kCBVisibility = BIT(3); , ;   kCBElementAdded = BIT(4). };  ; typedef std::list< REveElement * > List_t;  ; typedef std::set< REveElement * > Set_t;  ;  Public Types inherited from ROOT::Experimental::REveProjectable; typedef std::list< REveProjected * > ProjList_t;  ;  Public Types inherited from ROOT::Experimental::REveSecondarySelectable; typedef std::set< Int_t > SelectionSet_t;  ;  Protected Types inherited from ROOT::Experimental::REveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = BIT(0); , kCSCBTakeMotherAsMaster = BIT(1); , kCSCBApplyMainColorToAllChildren = BIT(2); , kCSCBApplyMainColorToMatchingChildren = BIT(3); , ;   kCSCBApplyMainTransparencyToAllChildren = BIT(4); , kCSCBApplyMainTransparencyToMatchingChildren = BIT(5). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Member Functions inherited from ROOT::Experimental::REveElement; virtual void AnnihilateRecursively ();  Protected member function called from REveElement::Annihilate(). ;  ; void assign_element_id_recurisvely ();  ; void assign_scene_recursively (REveScene *s);  ; ElementId_t get_mother_id () const;  ; ElementId_t get_scene_id () const;  ; virtual void PreDeleteElement ();  Vertex / normal / triangle index information for rendering. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TAttBBox; ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html:24268,Modifiability,inherit,inherited,24268," SelectionSet_t fSelectedSet;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . Static Protected Attributes; static Bool_t fgDefaultSmooth = kFALSE;  . Private Member Functions; REveLine & operator= (const REveLine &)=delete;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::REveElement; typedef std::list< REveAunt * > AuntList_t;  ; enum  EChangeBits { ;   kCBColorSelection = BIT(0); , kCBTransBBox = BIT(1); , kCBObjProps = BIT(2); , kCBVisibility = BIT(3); , ;   kCBElementAdded = BIT(4). };  ; typedef std::list< REveElement * > List_t;  ; typedef std::set< REveElement * > Set_t;  ;  Public Types inherited from ROOT::Experimental::REveProjectable; typedef std::list< REveProjected * > ProjList_t;  ;  Public Types inherited from ROOT::Experimental::REveSecondarySelectable; typedef std::set< Int_t > SelectionSet_t;  ;  Protected Types inherited from ROOT::Experimental::REveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = BIT(0); , kCSCBTakeMotherAsMaster = BIT(1); , kCSCBApplyMainColorToAllChildren = BIT(2); , kCSCBApplyMainColorToMatchingChildren = BIT(3); , ;   kCSCBApplyMainTransparencyToAllChildren = BIT(4); , kCSCBApplyMainTransparencyToMatchingChildren = BIT(5). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Member Functions inherited from ROOT::Experimental::REveElement; virtual void AnnihilateRecursively ();  Protected member function called from REveElement::Annihilate(). ;  ; void assign_element_id_recurisvely ();  ; void assign_scene_recursively (REveScene *s);  ; ElementId_t get_mother_id () const;  ; ElementId_t get_scene_id () const;  ; virtual void PreDeleteElement ();  Vertex / normal / triangle index information for rendering. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TAttBBox; ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html:24390,Modifiability,inherit,inherited,24390," SelectionSet_t fSelectedSet;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . Static Protected Attributes; static Bool_t fgDefaultSmooth = kFALSE;  . Private Member Functions; REveLine & operator= (const REveLine &)=delete;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::REveElement; typedef std::list< REveAunt * > AuntList_t;  ; enum  EChangeBits { ;   kCBColorSelection = BIT(0); , kCBTransBBox = BIT(1); , kCBObjProps = BIT(2); , kCBVisibility = BIT(3); , ;   kCBElementAdded = BIT(4). };  ; typedef std::list< REveElement * > List_t;  ; typedef std::set< REveElement * > Set_t;  ;  Public Types inherited from ROOT::Experimental::REveProjectable; typedef std::list< REveProjected * > ProjList_t;  ;  Public Types inherited from ROOT::Experimental::REveSecondarySelectable; typedef std::set< Int_t > SelectionSet_t;  ;  Protected Types inherited from ROOT::Experimental::REveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = BIT(0); , kCSCBTakeMotherAsMaster = BIT(1); , kCSCBApplyMainColorToAllChildren = BIT(2); , kCSCBApplyMainColorToMatchingChildren = BIT(3); , ;   kCSCBApplyMainTransparencyToAllChildren = BIT(4); , kCSCBApplyMainTransparencyToMatchingChildren = BIT(5). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Member Functions inherited from ROOT::Experimental::REveElement; virtual void AnnihilateRecursively ();  Protected member function called from REveElement::Annihilate(). ;  ; void assign_element_id_recurisvely ();  ; void assign_scene_recursively (REveScene *s);  ; ElementId_t get_mother_id () const;  ; ElementId_t get_scene_id () const;  ; virtual void PreDeleteElement ();  Vertex / normal / triangle index information for rendering. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TAttBBox; ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html:24853,Modifiability,inherit,inherited,24853,"num  EChangeBits { ;   kCBColorSelection = BIT(0); , kCBTransBBox = BIT(1); , kCBObjProps = BIT(2); , kCBVisibility = BIT(3); , ;   kCBElementAdded = BIT(4). };  ; typedef std::list< REveElement * > List_t;  ; typedef std::set< REveElement * > Set_t;  ;  Public Types inherited from ROOT::Experimental::REveProjectable; typedef std::list< REveProjected * > ProjList_t;  ;  Public Types inherited from ROOT::Experimental::REveSecondarySelectable; typedef std::set< Int_t > SelectionSet_t;  ;  Protected Types inherited from ROOT::Experimental::REveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = BIT(0); , kCSCBTakeMotherAsMaster = BIT(1); , kCSCBApplyMainColorToAllChildren = BIT(2); , kCSCBApplyMainColorToMatchingChildren = BIT(3); , ;   kCSCBApplyMainTransparencyToAllChildren = BIT(4); , kCSCBApplyMainTransparencyToMatchingChildren = BIT(5). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Member Functions inherited from ROOT::Experimental::REveElement; virtual void AnnihilateRecursively ();  Protected member function called from REveElement::Annihilate(). ;  ; void assign_element_id_recurisvely ();  ; void assign_scene_recursively (REveScene *s);  ; ElementId_t get_mother_id () const;  ; ElementId_t get_scene_id () const;  ; virtual void PreDeleteElement ();  Vertex / normal / triangle index information for rendering. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TAttBBox;  TAttBBox (const TAttBBox &tab);  ; void AssertBBoxExtents (Float_t epsilon=0.005);  Assert extents of all sides of the bounding-box are at least epsilon. ;  ; void BBoxCheckPoint (const Float_t *p);  ; void BBoxCheckPoint (Float_t x, Float_t y, Float_t z);  ; void BBoxClear ();  Remove BBox information. ;  ; void BBoxInit (Float_t infinity=1e6);  Dynamic Float_t[6] X(min,max), Y(min,max), Z(min,max) ;  ; void BBoxZero (Float_t epsilon=0, Float_t x=0, Float_t y=0, Float_t z=0); ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html:25374,Modifiability,inherit,inherited,25374,"T::Experimental::REveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = BIT(0); , kCSCBTakeMotherAsMaster = BIT(1); , kCSCBApplyMainColorToAllChildren = BIT(2); , kCSCBApplyMainColorToMatchingChildren = BIT(3); , ;   kCSCBApplyMainTransparencyToAllChildren = BIT(4); , kCSCBApplyMainTransparencyToMatchingChildren = BIT(5). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Member Functions inherited from ROOT::Experimental::REveElement; virtual void AnnihilateRecursively ();  Protected member function called from REveElement::Annihilate(). ;  ; void assign_element_id_recurisvely ();  ; void assign_scene_recursively (REveScene *s);  ; ElementId_t get_mother_id () const;  ; ElementId_t get_scene_id () const;  ; virtual void PreDeleteElement ();  Vertex / normal / triangle index information for rendering. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TAttBBox;  TAttBBox (const TAttBBox &tab);  ; void AssertBBoxExtents (Float_t epsilon=0.005);  Assert extents of all sides of the bounding-box are at least epsilon. ;  ; void BBoxCheckPoint (const Float_t *p);  ; void BBoxCheckPoint (Float_t x, Float_t y, Float_t z);  ; void BBoxClear ();  Remove BBox information. ;  ; void BBoxInit (Float_t infinity=1e6);  Dynamic Float_t[6] X(min,max), Y(min,max), Z(min,max) ;  ; void BBoxZero (Float_t epsilon=0, Float_t x=0, Float_t y=0, Float_t z=0);  Create cube of volume (2*epsilon)^3 at (x,y,z). ;  ;  Static Protected Member Functions inherited from ROOT::Experimental::REveElement; static const std::string & ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  . #include <ROOT/REveLine.hxx>. Inheritance diagram for ROOT::Experimental::REveLine:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ REveLine() [1/2]. REveLine::REveLine ; (; const std::string & ; name ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html:25971,Modifiability,inherit,inherited,25971,"gn_element_id_recurisvely ();  ; void assign_scene_recursively (REveScene *s);  ; ElementId_t get_mother_id () const;  ; ElementId_t get_scene_id () const;  ; virtual void PreDeleteElement ();  Vertex / normal / triangle index information for rendering. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TAttBBox;  TAttBBox (const TAttBBox &tab);  ; void AssertBBoxExtents (Float_t epsilon=0.005);  Assert extents of all sides of the bounding-box are at least epsilon. ;  ; void BBoxCheckPoint (const Float_t *p);  ; void BBoxCheckPoint (Float_t x, Float_t y, Float_t z);  ; void BBoxClear ();  Remove BBox information. ;  ; void BBoxInit (Float_t infinity=1e6);  Dynamic Float_t[6] X(min,max), Y(min,max), Z(min,max) ;  ; void BBoxZero (Float_t epsilon=0, Float_t x=0, Float_t y=0, Float_t z=0);  Create cube of volume (2*epsilon)^3 at (x,y,z). ;  ;  Static Protected Member Functions inherited from ROOT::Experimental::REveElement; static const std::string & ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  . #include <ROOT/REveLine.hxx>. Inheritance diagram for ROOT::Experimental::REveLine:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ REveLine() [1/2]. REveLine::REveLine ; (; const std::string & ; name = """", . const std::string & ; title = """", . Int_t ; n_points = 0 . ). Constructor. ; Definition at line 33 of file REveLine.cxx. ◆ REveLine() [2/2]. REveLine::REveLine ; (; const REveLine & ; l). Copy constructor. ; Definition at line 46 of file REveLine.cxx. ◆ ~REveLine(). ROOT::Experimental::REveLine::~REveLine ; (; ). inlineoverride . Definition at line 44 of file REveLine.hxx. Member Function Documentation. ◆ BuildRenderData(). void REveLine::BuildRenderData ; (; ). overridevirtual . Virtual from REveElement. Prepares render data for binary streaming to client. ; Reimplemented from ROOT::Experimental:",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:7272,Availability,error,error,7272,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:7361,Availability,error,error,7361,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:7516,Availability,error,error,7516,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:7813,Availability,error,error,7813,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of thi",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:12206,Availability,error,error,12206," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSelectorDraw; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Ve",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:16503,Availability,avail,available,16503,"d histogram ;  ; TTreeFormula * fSelect;  Pointer to selection formula. ;  ; Long64_t fSelectedRows;  Number of selected entries. ;  ; bool fSelectMultiple;  True if selection has a variable index. ;  ; TTree * fTree;  Pointer to current Tree. ;  ; TObject * fTreeElist;  Pointer to Tree Event list. ;  ; TEntryListArray * fTreeElistArray;  ! Pointer to Tree Event list array ;  ; Double_t ** fVal;  ![fSelectedRows][fDimension] Local buffer for the variables ;  ; Int_t fValSize;  ; TTreeFormula ** fVar;  ![fDimension] Array of pointers to variables formula ;  ; bool * fVarMultiple;  ![fDimension] True if fVar[i] has a variable index ;  ; Double_t * fVmax;  ![fDimension] Maxima of varexp columns ;  ; Double_t * fVmin;  ![fDimension] Minima of varexp columns ;  ; Double_t * fW;  ![fSelectedRows]Local buffer for weights ;  ; Double_t fWeight;  Tree weight (see TTree::SetWeight) ;  ;  Protected Attributes inherited from TSelector; EAbort fAbort;  Abort status. ;  ; TList * fInput;  List of objects available during processing. ;  ; TObject * fObject;  ! Current object if processing object (vs. TTree) ;  ; TString fOption;  Option given to TTree::Process. ;  ; TSelectorList * fOutput;  ! List of objects created during processing ;  ; Long64_t fStatus;  Selector status. ;  . Private Member Functions;  REvePointSelector (const REvePointSelector &)=delete;  ; REvePointSelector & operator= (const REvePointSelector &)=delete;  . Additional Inherited Members;  Public Types inherited from TSelector; enum  EAbort { kContinue; , kAbortProcess; , kAbortFile; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMus",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:18271,Availability,avail,available,18271,"08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TSelectorDraw; enum  EStatusBits { kWarn = (1ULL << ( 12 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TSelectorDraw; virtual void ClearFormula ();  Delete internal buffers. ;  ; virtual bool CompileVariables (const char *varexp="""", const char *selection="""");  Compile input variables and selection expression. ;  ; virtual void InitArrays (Int_t newsize);  Initialization of the primitive type arrays if the new size is bigger than the available space. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <ROOT/REveTreeTools.hxx>. Inheritance diagram for ROOT::Experimental::REvePointSelector:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ REvePointSelector() [1/2]. ROOT::Experimental::REvePointSelector::REvePointSelector ; (; const REvePointSelector & ; ). privatedelete . ◆ REvePointSelector() [2/2]. REvePointSelector::REvePointSelector ; (; TTree * ; t = nullptr, . REvePointSelectorConsumer * ; c = nullptr, . const char * ; vexp = """", . const char * ; sel = """" . ). Constructor. ; Definition at line 67 of file REveTreeTools.cxx. ◆ ~REvePointSelector(). ROOT::Experimental::REvePointSelector::~REvePointSele",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:7278,Integrability,message,message,7278,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:7819,Integrability,message,message,7819,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of thi",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:8979,Integrability,message,message,8979,"ect *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:12212,Integrability,message,message,12212," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSelectorDraw; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Ve",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:12585,Integrability,message,message,12585," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSelectorDraw; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSelector; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TSelector * GetSelector (const char *filename);  The code in filename is loaded (inter",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:1655,Modifiability,inherit,inherited,1655,"erride;  ; REvePointSelectorConsumer * GetConsumer () const;  ; const char * GetSelection () const;  ; const char * GetSubIdExp () const;  ; Int_t GetSubIdNum () const;  ; TTree * GetTree () const;  ; const char * GetVarexp () const;  ; TClass * IsA () const override;  ; virtual Long64_t Select (const char *selection=nullptr);  Process the tree, select points matching 'selection'. ;  ; virtual Long64_t Select (TTree *t, const char *selection=nullptr);  Process tree 't', select points matching 'selection'. ;  ; void SetConsumer (REvePointSelectorConsumer *c);  ; void SetSelection (const char *s);  ; void SetSubIdExp (const char *s);  ; void SetTree (TTree *t);  ; void SetVarexp (const char *v);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void TakeAction () override;  Callback from tree-player after a chunk of data has been processed. ;  ;  Public Member Functions inherited from TSelectorDraw;  TSelectorDraw ();  Default selector constructor. ;  ;  ~TSelectorDraw () override;  Selector destructor. ;  ; void Begin (TTree *tree) override;  Called every time a loop on the tree(s) starts. ;  ; virtual Int_t GetAction () const;  ; virtual bool GetCleanElist () const;  ; virtual Int_t GetDimension () const;  ; virtual Long64_t GetDrawFlag () const;  ; Int_t GetMultiplicity () const;  ; virtual Int_t GetNfill () const;  ; TObject * GetObject () const;  ; TH1 * GetOldHistogram () const;  ; TTreeFormula * GetSelect () const;  ; virtual Long64_t GetSelectedRows () const;  ; TTree * GetTree () const;  ; virtual Double_t * GetV1 () const;  See TSelectorDraw::GetVal. ;  ; virtual Double_t * GetV2 () const;  See TSelectorDraw::GetVal. ;  ; virtual Double_t * GetV3 () const;  See TSelectorDraw::GetVal. ;  ; virtual Double_t * GetV4 () const;  See TSelectorDraw::GetVal. ;  ; virtual Double_t * GetVal (Int_t i) const;  Return the last values corresponding to the i-th component of the f",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:3937,Modifiability,variab,variable,3937,"ated). ;  ; TTreeFormula * GetVar1 () const;  See TSelectorDraw::GetVar. ;  ; TTreeFormula * GetVar2 () const;  See TSelectorDraw::GetVar. ;  ; TTreeFormula * GetVar3 () const;  See TSelectorDraw::GetVar. ;  ; TTreeFormula * GetVar4 () const;  See TSelectorDraw::GetVar. ;  ; virtual Double_t * GetW () const;  ; TClass * IsA () const override;  ; bool Notify () override;  This function is called at the first entry of a new tree in a chain. ;  ; bool Process (Long64_t) override;  The Process() function is called for each entry in the tree (or possibly keyed object in the case of PROOF) to be processed. ;  ; void ProcessFill (Long64_t entry) override;  Called in the entry loop for all entries accepted by Select. ;  ; virtual void ProcessFillMultiple (Long64_t entry);  Called in the entry loop for all entries accepted by Select. ;  ; virtual void ProcessFillObject (Long64_t entry);  Called in the entry loop for all entries accepted by Select. ;  ; virtual void SetEstimate (Long64_t n);  Set number of entries to estimate variable limits. ;  ; virtual UInt_t SplitNames (const TString &varexp, std::vector< TString > &names);  Build Index array for names in varexp. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TakeEstimate ();  Estimate limits for 1-D, 2-D or 3-D objects. ;  ; void Terminate () override;  Called at the end of a loop on a TTree. ;  ;  Public Member Functions inherited from TSelector;  TSelector ();  Default selector ctor. ;  ;  ~TSelector () override;  Selector destructor. ;  ; virtual void Abort (const char *why, EAbort what=kAbortProcess);  Abort processing. ;  ; virtual EAbort GetAbort () const;  ; virtual Int_t GetEntry (Long64_t, Int_t=0);  ; virtual TList * GetInputList () const;  ; const char * GetOption () const override;  ; virtual TList * GetOutputList () const;  ; virtual Long64_t GetStatus () const;  ; virtual void ImportOutput (TList",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:4408,Modifiability,inherit,inherited,4408," each entry in the tree (or possibly keyed object in the case of PROOF) to be processed. ;  ; void ProcessFill (Long64_t entry) override;  Called in the entry loop for all entries accepted by Select. ;  ; virtual void ProcessFillMultiple (Long64_t entry);  Called in the entry loop for all entries accepted by Select. ;  ; virtual void ProcessFillObject (Long64_t entry);  Called in the entry loop for all entries accepted by Select. ;  ; virtual void SetEstimate (Long64_t n);  Set number of entries to estimate variable limits. ;  ; virtual UInt_t SplitNames (const TString &varexp, std::vector< TString > &names);  Build Index array for names in varexp. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TakeEstimate ();  Estimate limits for 1-D, 2-D or 3-D objects. ;  ; void Terminate () override;  Called at the end of a loop on a TTree. ;  ;  Public Member Functions inherited from TSelector;  TSelector ();  Default selector ctor. ;  ;  ~TSelector () override;  Selector destructor. ;  ; virtual void Abort (const char *why, EAbort what=kAbortProcess);  Abort processing. ;  ; virtual EAbort GetAbort () const;  ; virtual Int_t GetEntry (Long64_t, Int_t=0);  ; virtual TList * GetInputList () const;  ; const char * GetOption () const override;  ; virtual TList * GetOutputList () const;  ; virtual Long64_t GetStatus () const;  ; virtual void ImportOutput (TList *output);  Imports the content of 'output' in the internal output list. ;  ; virtual void Init (TTree *);  ; virtual bool ProcessCut (Long64_t);  This method is called before processing entry. ;  ; virtual void ResetAbort ();  ; virtual void SetInputList (TList *input);  ; virtual void SetObject (TObject *obj);  ; virtual void SetOption (const char *option);  ; virtual void SetStatus (Long64_t status);  ; virtual void SlaveBegin (TTree *);  ; virtual void SlaveTerminate ();  ; void StreamerNVirtual (TBuffer &Class",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:5511,Modifiability,inherit,inherited,5511,"de;  Called at the end of a loop on a TTree. ;  ;  Public Member Functions inherited from TSelector;  TSelector ();  Default selector ctor. ;  ;  ~TSelector () override;  Selector destructor. ;  ; virtual void Abort (const char *why, EAbort what=kAbortProcess);  Abort processing. ;  ; virtual EAbort GetAbort () const;  ; virtual Int_t GetEntry (Long64_t, Int_t=0);  ; virtual TList * GetInputList () const;  ; const char * GetOption () const override;  ; virtual TList * GetOutputList () const;  ; virtual Long64_t GetStatus () const;  ; virtual void ImportOutput (TList *output);  Imports the content of 'output' in the internal output list. ;  ; virtual void Init (TTree *);  ; virtual bool ProcessCut (Long64_t);  This method is called before processing entry. ;  ; virtual void ResetAbort ();  ; virtual void SetInputList (TList *input);  ; virtual void SetObject (TObject *obj);  ; virtual void SetOption (const char *option);  ; virtual void SetStatus (Long64_t status);  ; virtual void SlaveBegin (TTree *);  ; virtual void SlaveTerminate ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual int Version () const;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; vir",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:6908,Modifiability,inherit,inheritance,6908,"pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:9077,Modifiability,inherit,inherits,9077,"t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:9194,Modifiability,inherit,inherits,9194,"GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:13086,Modifiability,inherit,inherited,13086,";  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSelectorDraw; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSelector; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TSelector * GetSelector (const char *filename);  The code in filename is loaded (interpreted or compiled, see below), filename must contain a valid class implementation derived from TSelector. ;  ; static bool IsStandardDraw (const char *selec);  Find out if this is a standard selection used for Draw actions (either TSelectorDraw, TProofDraw or deriving from them). ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:13303,Modifiability,inherit,inherited,13303,";  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSelectorDraw; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSelector; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TSelector * GetSelector (const char *filename);  The code in filename is loaded (interpreted or compiled, see below), filename must contain a valid class implementation derived from TSelector. ;  ; static bool IsStandardDraw (const char *selec);  Find out if this is a standard selection used for Draw actions (either TSelectorDraw, TProofDraw or deriving from them). ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:13896,Modifiability,inherit,inherited,13896,"s_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSelectorDraw; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSelector; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TSelector * GetSelector (const char *filename);  The code in filename is loaded (interpreted or compiled, see below), filename must contain a valid class implementation derived from TSelector. ;  ; static bool IsStandardDraw (const char *selec);  Find out if this is a standard selection used for Draw actions (either TSelectorDraw, TProofDraw or deriving from them). ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; REvePointSelectorConsumer * fConsumer {nullptr};  ; TList fInputList;  ; TString fSelection;  ; TTree * fSelectTree {nullptr};  ; TString fSubIdExp;  ; Int_t fSubIdNum;  ; TString fVarexp;  ;  Protected Attributes inherited from TSelectorDraw; Int_t fAction;  ! Action type ;  ; bool fCleanElist;  True if original Tree elist must be saved. ;  ; Long64_t fCurrentSubEntry;  Current subentry when fSelectMultiple is true. Used to fill TEntryListArray. ;  ; Int_t fDimension;  Dimension of the current expression. ;  ; Long64_t fDraw;  ! Last entry loop number when object was drawn ;  ; Int_t fF",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:14618,Modifiability,inherit,inherited,14618,"s loaded (interpreted or compiled, see below), filename must contain a valid class implementation derived from TSelector. ;  ; static bool IsStandardDraw (const char *selec);  Find out if this is a standard selection used for Draw actions (either TSelectorDraw, TProofDraw or deriving from them). ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; REvePointSelectorConsumer * fConsumer {nullptr};  ; TList fInputList;  ; TString fSelection;  ; TTree * fSelectTree {nullptr};  ; TString fSubIdExp;  ; Int_t fSubIdNum;  ; TString fVarexp;  ;  Protected Attributes inherited from TSelectorDraw; Int_t fAction;  ! Action type ;  ; bool fCleanElist;  True if original Tree elist must be saved. ;  ; Long64_t fCurrentSubEntry;  Current subentry when fSelectMultiple is true. Used to fill TEntryListArray. ;  ; Int_t fDimension;  Dimension of the current expression. ;  ; Long64_t fDraw;  ! Last entry loop number when object was drawn ;  ; Int_t fForceRead;  Force Read flag. ;  ; TTreeFormulaManager * fManager;  Pointer to the formula manager. ;  ; Int_t fMultiplicity;  Indicator of the variability of the size of entries. ;  ; Int_t * fNbins;  ![fDimension] Number of bins per dimension ;  ; Int_t fNfill;  ! Total number of histogram fills ;  ; bool fObjEval;  True if fVar1 returns an object (or pointer to). ;  ; Long64_t fOldEstimate;  Value of Tree fEstimate when selector is called. ;  ; TH1 * fOldHistogram;  ! Pointer to previously used histogram ;  ; TTreeFormula * fSelect;  Pointer to selection for",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:15140,Modifiability,variab,variability,15140,g. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; REvePointSelectorConsumer * fConsumer {nullptr};  ; TList fInputList;  ; TString fSelection;  ; TTree * fSelectTree {nullptr};  ; TString fSubIdExp;  ; Int_t fSubIdNum;  ; TString fVarexp;  ;  Protected Attributes inherited from TSelectorDraw; Int_t fAction;  ! Action type ;  ; bool fCleanElist;  True if original Tree elist must be saved. ;  ; Long64_t fCurrentSubEntry;  Current subentry when fSelectMultiple is true. Used to fill TEntryListArray. ;  ; Int_t fDimension;  Dimension of the current expression. ;  ; Long64_t fDraw;  ! Last entry loop number when object was drawn ;  ; Int_t fForceRead;  Force Read flag. ;  ; TTreeFormulaManager * fManager;  Pointer to the formula manager. ;  ; Int_t fMultiplicity;  Indicator of the variability of the size of entries. ;  ; Int_t * fNbins;  ![fDimension] Number of bins per dimension ;  ; Int_t fNfill;  ! Total number of histogram fills ;  ; bool fObjEval;  True if fVar1 returns an object (or pointer to). ;  ; Long64_t fOldEstimate;  Value of Tree fEstimate when selector is called. ;  ; TH1 * fOldHistogram;  ! Pointer to previously used histogram ;  ; TTreeFormula * fSelect;  Pointer to selection formula. ;  ; Long64_t fSelectedRows;  Number of selected entries. ;  ; bool fSelectMultiple;  True if selection has a variable index. ;  ; TTree * fTree;  Pointer to current Tree. ;  ; TObject * fTreeElist;  Pointer to Tree Event list. ;  ; TEntryListArray * fTreeElistArray;  ! Pointer to Tree Event list array ;  ; Double_t ** fVal;  ![fSelectedRows][fDimension] Local buffer for the variables ;  ; Int_t fValSize;  ; TTreeFormula ** fVar;  ![fDimension] Array of pointers to variables formula ;  ; bool * fVarMultiple;  ![fDimension] True if fVar[i] has a variable index ,MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:15679,Modifiability,variab,variable,15679,n;  ! Action type ;  ; bool fCleanElist;  True if original Tree elist must be saved. ;  ; Long64_t fCurrentSubEntry;  Current subentry when fSelectMultiple is true. Used to fill TEntryListArray. ;  ; Int_t fDimension;  Dimension of the current expression. ;  ; Long64_t fDraw;  ! Last entry loop number when object was drawn ;  ; Int_t fForceRead;  Force Read flag. ;  ; TTreeFormulaManager * fManager;  Pointer to the formula manager. ;  ; Int_t fMultiplicity;  Indicator of the variability of the size of entries. ;  ; Int_t * fNbins;  ![fDimension] Number of bins per dimension ;  ; Int_t fNfill;  ! Total number of histogram fills ;  ; bool fObjEval;  True if fVar1 returns an object (or pointer to). ;  ; Long64_t fOldEstimate;  Value of Tree fEstimate when selector is called. ;  ; TH1 * fOldHistogram;  ! Pointer to previously used histogram ;  ; TTreeFormula * fSelect;  Pointer to selection formula. ;  ; Long64_t fSelectedRows;  Number of selected entries. ;  ; bool fSelectMultiple;  True if selection has a variable index. ;  ; TTree * fTree;  Pointer to current Tree. ;  ; TObject * fTreeElist;  Pointer to Tree Event list. ;  ; TEntryListArray * fTreeElistArray;  ! Pointer to Tree Event list array ;  ; Double_t ** fVal;  ![fSelectedRows][fDimension] Local buffer for the variables ;  ; Int_t fValSize;  ; TTreeFormula ** fVar;  ![fDimension] Array of pointers to variables formula ;  ; bool * fVarMultiple;  ![fDimension] True if fVar[i] has a variable index ;  ; Double_t * fVmax;  ![fDimension] Maxima of varexp columns ;  ; Double_t * fVmin;  ![fDimension] Minima of varexp columns ;  ; Double_t * fW;  ![fSelectedRows]Local buffer for weights ;  ; Double_t fWeight;  Tree weight (see TTree::SetWeight) ;  ;  Protected Attributes inherited from TSelector; EAbort fAbort;  Abort status. ;  ; TList * fInput;  List of objects available during processing. ;  ; TObject * fObject;  ! Current object if processing object (vs. TTree) ;  ; TString fOption;  Option given to TTree::Process,MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:15947,Modifiability,variab,variables,15947,"or of the variability of the size of entries. ;  ; Int_t * fNbins;  ![fDimension] Number of bins per dimension ;  ; Int_t fNfill;  ! Total number of histogram fills ;  ; bool fObjEval;  True if fVar1 returns an object (or pointer to). ;  ; Long64_t fOldEstimate;  Value of Tree fEstimate when selector is called. ;  ; TH1 * fOldHistogram;  ! Pointer to previously used histogram ;  ; TTreeFormula * fSelect;  Pointer to selection formula. ;  ; Long64_t fSelectedRows;  Number of selected entries. ;  ; bool fSelectMultiple;  True if selection has a variable index. ;  ; TTree * fTree;  Pointer to current Tree. ;  ; TObject * fTreeElist;  Pointer to Tree Event list. ;  ; TEntryListArray * fTreeElistArray;  ! Pointer to Tree Event list array ;  ; Double_t ** fVal;  ![fSelectedRows][fDimension] Local buffer for the variables ;  ; Int_t fValSize;  ; TTreeFormula ** fVar;  ![fDimension] Array of pointers to variables formula ;  ; bool * fVarMultiple;  ![fDimension] True if fVar[i] has a variable index ;  ; Double_t * fVmax;  ![fDimension] Maxima of varexp columns ;  ; Double_t * fVmin;  ![fDimension] Minima of varexp columns ;  ; Double_t * fW;  ![fSelectedRows]Local buffer for weights ;  ; Double_t fWeight;  Tree weight (see TTree::SetWeight) ;  ;  Protected Attributes inherited from TSelector; EAbort fAbort;  Abort status. ;  ; TList * fInput;  List of objects available during processing. ;  ; TObject * fObject;  ! Current object if processing object (vs. TTree) ;  ; TString fOption;  Option given to TTree::Process. ;  ; TSelectorList * fOutput;  ! List of objects created during processing ;  ; Long64_t fStatus;  Selector status. ;  . Private Member Functions;  REvePointSelector (const REvePointSelector &)=delete;  ; REvePointSelector & operator= (const REvePointSelector &)=delete;  . Additional Inherited Members;  Public Types inherited from TSelector; enum  EAbort { kContinue; , kAbortProcess; , kAbortFile; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap =",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:16039,Modifiability,variab,variables,16039,"or of the variability of the size of entries. ;  ; Int_t * fNbins;  ![fDimension] Number of bins per dimension ;  ; Int_t fNfill;  ! Total number of histogram fills ;  ; bool fObjEval;  True if fVar1 returns an object (or pointer to). ;  ; Long64_t fOldEstimate;  Value of Tree fEstimate when selector is called. ;  ; TH1 * fOldHistogram;  ! Pointer to previously used histogram ;  ; TTreeFormula * fSelect;  Pointer to selection formula. ;  ; Long64_t fSelectedRows;  Number of selected entries. ;  ; bool fSelectMultiple;  True if selection has a variable index. ;  ; TTree * fTree;  Pointer to current Tree. ;  ; TObject * fTreeElist;  Pointer to Tree Event list. ;  ; TEntryListArray * fTreeElistArray;  ! Pointer to Tree Event list array ;  ; Double_t ** fVal;  ![fSelectedRows][fDimension] Local buffer for the variables ;  ; Int_t fValSize;  ; TTreeFormula ** fVar;  ![fDimension] Array of pointers to variables formula ;  ; bool * fVarMultiple;  ![fDimension] True if fVar[i] has a variable index ;  ; Double_t * fVmax;  ![fDimension] Maxima of varexp columns ;  ; Double_t * fVmin;  ![fDimension] Minima of varexp columns ;  ; Double_t * fW;  ![fSelectedRows]Local buffer for weights ;  ; Double_t fWeight;  Tree weight (see TTree::SetWeight) ;  ;  Protected Attributes inherited from TSelector; EAbort fAbort;  Abort status. ;  ; TList * fInput;  List of objects available during processing. ;  ; TObject * fObject;  ! Current object if processing object (vs. TTree) ;  ; TString fOption;  Option given to TTree::Process. ;  ; TSelectorList * fOutput;  ! List of objects created during processing ;  ; Long64_t fStatus;  Selector status. ;  . Private Member Functions;  REvePointSelector (const REvePointSelector &)=delete;  ; REvePointSelector & operator= (const REvePointSelector &)=delete;  . Additional Inherited Members;  Public Types inherited from TSelector; enum  EAbort { kContinue; , kAbortProcess; , kAbortFile; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap =",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:16120,Modifiability,variab,variable,16120,"or of the variability of the size of entries. ;  ; Int_t * fNbins;  ![fDimension] Number of bins per dimension ;  ; Int_t fNfill;  ! Total number of histogram fills ;  ; bool fObjEval;  True if fVar1 returns an object (or pointer to). ;  ; Long64_t fOldEstimate;  Value of Tree fEstimate when selector is called. ;  ; TH1 * fOldHistogram;  ! Pointer to previously used histogram ;  ; TTreeFormula * fSelect;  Pointer to selection formula. ;  ; Long64_t fSelectedRows;  Number of selected entries. ;  ; bool fSelectMultiple;  True if selection has a variable index. ;  ; TTree * fTree;  Pointer to current Tree. ;  ; TObject * fTreeElist;  Pointer to Tree Event list. ;  ; TEntryListArray * fTreeElistArray;  ! Pointer to Tree Event list array ;  ; Double_t ** fVal;  ![fSelectedRows][fDimension] Local buffer for the variables ;  ; Int_t fValSize;  ; TTreeFormula ** fVar;  ![fDimension] Array of pointers to variables formula ;  ; bool * fVarMultiple;  ![fDimension] True if fVar[i] has a variable index ;  ; Double_t * fVmax;  ![fDimension] Maxima of varexp columns ;  ; Double_t * fVmin;  ![fDimension] Minima of varexp columns ;  ; Double_t * fW;  ![fSelectedRows]Local buffer for weights ;  ; Double_t fWeight;  Tree weight (see TTree::SetWeight) ;  ;  Protected Attributes inherited from TSelector; EAbort fAbort;  Abort status. ;  ; TList * fInput;  List of objects available during processing. ;  ; TObject * fObject;  ! Current object if processing object (vs. TTree) ;  ; TString fOption;  Option given to TTree::Process. ;  ; TSelectorList * fOutput;  ! List of objects created during processing ;  ; Long64_t fStatus;  Selector status. ;  . Private Member Functions;  REvePointSelector (const REvePointSelector &)=delete;  ; REvePointSelector & operator= (const REvePointSelector &)=delete;  . Additional Inherited Members;  Public Types inherited from TSelector; enum  EAbort { kContinue; , kAbortProcess; , kAbortFile; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap =",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:16409,Modifiability,inherit,inherited,16409,"or of the variability of the size of entries. ;  ; Int_t * fNbins;  ![fDimension] Number of bins per dimension ;  ; Int_t fNfill;  ! Total number of histogram fills ;  ; bool fObjEval;  True if fVar1 returns an object (or pointer to). ;  ; Long64_t fOldEstimate;  Value of Tree fEstimate when selector is called. ;  ; TH1 * fOldHistogram;  ! Pointer to previously used histogram ;  ; TTreeFormula * fSelect;  Pointer to selection formula. ;  ; Long64_t fSelectedRows;  Number of selected entries. ;  ; bool fSelectMultiple;  True if selection has a variable index. ;  ; TTree * fTree;  Pointer to current Tree. ;  ; TObject * fTreeElist;  Pointer to Tree Event list. ;  ; TEntryListArray * fTreeElistArray;  ! Pointer to Tree Event list array ;  ; Double_t ** fVal;  ![fSelectedRows][fDimension] Local buffer for the variables ;  ; Int_t fValSize;  ; TTreeFormula ** fVar;  ![fDimension] Array of pointers to variables formula ;  ; bool * fVarMultiple;  ![fDimension] True if fVar[i] has a variable index ;  ; Double_t * fVmax;  ![fDimension] Maxima of varexp columns ;  ; Double_t * fVmin;  ![fDimension] Minima of varexp columns ;  ; Double_t * fW;  ![fSelectedRows]Local buffer for weights ;  ; Double_t fWeight;  Tree weight (see TTree::SetWeight) ;  ;  Protected Attributes inherited from TSelector; EAbort fAbort;  Abort status. ;  ; TList * fInput;  List of objects available during processing. ;  ; TObject * fObject;  ! Current object if processing object (vs. TTree) ;  ; TString fOption;  Option given to TTree::Process. ;  ; TSelectorList * fOutput;  ! List of objects created during processing ;  ; Long64_t fStatus;  Selector status. ;  . Private Member Functions;  REvePointSelector (const REvePointSelector &)=delete;  ; REvePointSelector & operator= (const REvePointSelector &)=delete;  . Additional Inherited Members;  Public Types inherited from TSelector; enum  EAbort { kContinue; , kAbortProcess; , kAbortFile; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap =",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:16980,Modifiability,inherit,inherited,16980,"on] True if fVar[i] has a variable index ;  ; Double_t * fVmax;  ![fDimension] Maxima of varexp columns ;  ; Double_t * fVmin;  ![fDimension] Minima of varexp columns ;  ; Double_t * fW;  ![fSelectedRows]Local buffer for weights ;  ; Double_t fWeight;  Tree weight (see TTree::SetWeight) ;  ;  Protected Attributes inherited from TSelector; EAbort fAbort;  Abort status. ;  ; TList * fInput;  List of objects available during processing. ;  ; TObject * fObject;  ! Current object if processing object (vs. TTree) ;  ; TString fOption;  Option given to TTree::Process. ;  ; TSelectorList * fOutput;  ! List of objects created during processing ;  ; Long64_t fStatus;  Selector status. ;  . Private Member Functions;  REvePointSelector (const REvePointSelector &)=delete;  ; REvePointSelector & operator= (const REvePointSelector &)=delete;  . Additional Inherited Members;  Public Types inherited from TSelector; enum  EAbort { kContinue; , kAbortProcess; , kAbortFile; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TSelectorDraw; enum  EStatusBits { kWarn = (1ULL << ( 12 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TSelectorDraw; virtual void ClearFormula ();  Delete internal buffers. ;  ; virtual bool CompileVariables (const char *varexp="""", const char *selection=""""); ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:17083,Modifiability,inherit,inherited,17083,"on] True if fVar[i] has a variable index ;  ; Double_t * fVmax;  ![fDimension] Maxima of varexp columns ;  ; Double_t * fVmin;  ![fDimension] Minima of varexp columns ;  ; Double_t * fW;  ![fSelectedRows]Local buffer for weights ;  ; Double_t fWeight;  Tree weight (see TTree::SetWeight) ;  ;  Protected Attributes inherited from TSelector; EAbort fAbort;  Abort status. ;  ; TList * fInput;  List of objects available during processing. ;  ; TObject * fObject;  ! Current object if processing object (vs. TTree) ;  ; TString fOption;  Option given to TTree::Process. ;  ; TSelectorList * fOutput;  ! List of objects created during processing ;  ; Long64_t fStatus;  Selector status. ;  . Private Member Functions;  REvePointSelector (const REvePointSelector &)=delete;  ; REvePointSelector & operator= (const REvePointSelector &)=delete;  . Additional Inherited Members;  Public Types inherited from TSelector; enum  EAbort { kContinue; , kAbortProcess; , kAbortFile; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TSelectorDraw; enum  EStatusBits { kWarn = (1ULL << ( 12 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TSelectorDraw; virtual void ClearFormula ();  Delete internal buffers. ;  ; virtual bool CompileVariables (const char *varexp="""", const char *selection=""""); ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:17724,Modifiability,inherit,inherited,17724,"&)=delete;  ; REvePointSelector & operator= (const REvePointSelector &)=delete;  . Additional Inherited Members;  Public Types inherited from TSelector; enum  EAbort { kContinue; , kAbortProcess; , kAbortFile; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TSelectorDraw; enum  EStatusBits { kWarn = (1ULL << ( 12 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TSelectorDraw; virtual void ClearFormula ();  Delete internal buffers. ;  ; virtual bool CompileVariables (const char *varexp="""", const char *selection="""");  Compile input variables and selection expression. ;  ; virtual void InitArrays (Int_t newsize);  Initialization of the primitive type arrays if the new size is bigger than the available space. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <ROOT/REveTreeTools.hxx>. Inheritance diagram for ROOT::Experimental::REvePointSelector:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ REvePointSelector() [1/2]. ROOT::Experimental::REvePointSelector::REvePointSelector ; (; const REvePointSelector ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:17823,Modifiability,inherit,inherited,17823,"&)=delete;  ; REvePointSelector & operator= (const REvePointSelector &)=delete;  . Additional Inherited Members;  Public Types inherited from TSelector; enum  EAbort { kContinue; , kAbortProcess; , kAbortFile; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TSelectorDraw; enum  EStatusBits { kWarn = (1ULL << ( 12 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TSelectorDraw; virtual void ClearFormula ();  Delete internal buffers. ;  ; virtual bool CompileVariables (const char *varexp="""", const char *selection="""");  Compile input variables and selection expression. ;  ; virtual void InitArrays (Int_t newsize);  Initialization of the primitive type arrays if the new size is bigger than the available space. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <ROOT/REveTreeTools.hxx>. Inheritance diagram for ROOT::Experimental::REvePointSelector:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ REvePointSelector() [1/2]. ROOT::Experimental::REvePointSelector::REvePointSelector ; (; const REvePointSelector ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:17922,Modifiability,inherit,inherited,17922,"&)=delete;  ; REvePointSelector & operator= (const REvePointSelector &)=delete;  . Additional Inherited Members;  Public Types inherited from TSelector; enum  EAbort { kContinue; , kAbortProcess; , kAbortFile; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TSelectorDraw; enum  EStatusBits { kWarn = (1ULL << ( 12 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TSelectorDraw; virtual void ClearFormula ();  Delete internal buffers. ;  ; virtual bool CompileVariables (const char *varexp="""", const char *selection="""");  Compile input variables and selection expression. ;  ; virtual void InitArrays (Int_t newsize);  Initialization of the primitive type arrays if the new size is bigger than the available space. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <ROOT/REveTreeTools.hxx>. Inheritance diagram for ROOT::Experimental::REvePointSelector:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ REvePointSelector() [1/2]. ROOT::Experimental::REvePointSelector::REvePointSelector ; (; const REvePointSelector ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:18109,Modifiability,variab,variables,18109,"c Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TSelectorDraw; enum  EStatusBits { kWarn = (1ULL << ( 12 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TSelectorDraw; virtual void ClearFormula ();  Delete internal buffers. ;  ; virtual bool CompileVariables (const char *varexp="""", const char *selection="""");  Compile input variables and selection expression. ;  ; virtual void InitArrays (Int_t newsize);  Initialization of the primitive type arrays if the new size is bigger than the available space. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <ROOT/REveTreeTools.hxx>. Inheritance diagram for ROOT::Experimental::REvePointSelector:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ REvePointSelector() [1/2]. ROOT::Experimental::REvePointSelector::REvePointSelector ; (; const REvePointSelector & ; ). privatedelete . ◆ REvePointSelector() [2/2]. REvePointSelector::REvePointSelector ; (; TTree * ; t = nullptr, . REvePointSelectorConsumer * ; c = nullptr, . const char * ; vexp = """", . const char * ; sel = """" . ). C",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:18321,Modifiability,inherit,inherited,18321,"ecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TSelectorDraw; enum  EStatusBits { kWarn = (1ULL << ( 12 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TSelectorDraw; virtual void ClearFormula ();  Delete internal buffers. ;  ; virtual bool CompileVariables (const char *varexp="""", const char *selection="""");  Compile input variables and selection expression. ;  ; virtual void InitArrays (Int_t newsize);  Initialization of the primitive type arrays if the new size is bigger than the available space. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <ROOT/REveTreeTools.hxx>. Inheritance diagram for ROOT::Experimental::REvePointSelector:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ REvePointSelector() [1/2]. ROOT::Experimental::REvePointSelector::REvePointSelector ; (; const REvePointSelector & ; ). privatedelete . ◆ REvePointSelector() [2/2]. REvePointSelector::REvePointSelector ; (; TTree * ; t = nullptr, . REvePointSelectorConsumer * ; c = nullptr, . const char * ; vexp = """", . const char * ; sel = """" . ). Constructor. ; Definition at line 67 of file REveTreeTools.cxx. ◆ ~REvePointSelector(). ROOT::Experimental::REvePointSelector::~REvePointSelector ; (; ). inlineoverride . Definition at line 95 of file REveTreeTools.hxx. Member Function Documentation. ◆ Class(). static TClass * ROOT::Experimental::REvePoin",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:13564,Performance,load,loaded,13564,";  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSelectorDraw; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSelector; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TSelector * GetSelector (const char *filename);  The code in filename is loaded (interpreted or compiled, see below), filename must contain a valid class implementation derived from TSelector. ;  ; static bool IsStandardDraw (const char *selec);  Find out if this is a standard selection used for Draw actions (either TSelectorDraw, TProofDraw or deriving from them). ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:8708,Security,hash,hash,8708," to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html:13316,Deployability,update,update,13316,");  Set transformation matrix from column-major array. ;  ; void SetupDefaultColorAndTransparency (Color_t col, Bool_t can_edit_color, Bool_t can_edit_transparency);  Set up element to use built-in main color and set flags allowing editing of main color and transparency. ;  ; void SetUserData (void *ud);  ; void SetVizModel (REveElement *model);  Set visualization-parameter model element. ;  ; Bool_t SetVizModelByTag ();  Find model element in VizDB that corresponds to previously assigned fVizTag and set fVizModel accordingly. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void Stamp ();  ; void StampColorSelection ();  ; void StampElementAdded ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; Bool_t TestCSCBits (UChar_t f) const;  ; void VizDB_Apply (const std::string &tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const std::string &tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ;  Public Member Functions inherited from ROOT::Experimental::REveProjectable;  REveProjectable ();  Constructor. ;  ;  REveProjectable (const REveProjectable &);  Copy constructor. Does shallow copy. ;  ; virtual ~REveProjectable ();  Destructor. ;  ; virtual void AddProjected (REveProjected *p);  ; virtual void AddProjectedsToSet (std::set< REveElement * > &set);  Add the projected elements to the set, dyn-casting them to REveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; virtual void ClearProjectedList ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Co",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html:13518,Deployability,update,update,13518,"flags allowing editing of main color and transparency. ;  ; void SetUserData (void *ud);  ; void SetVizModel (REveElement *model);  Set visualization-parameter model element. ;  ; Bool_t SetVizModelByTag ();  Find model element in VizDB that corresponds to previously assigned fVizTag and set fVizModel accordingly. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void Stamp ();  ; void StampColorSelection ();  ; void StampElementAdded ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; Bool_t TestCSCBits (UChar_t f) const;  ; void VizDB_Apply (const std::string &tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const std::string &tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ;  Public Member Functions inherited from ROOT::Experimental::REveProjectable;  REveProjectable ();  Constructor. ;  ;  REveProjectable (const REveProjectable &);  Copy constructor. Does shallow copy. ;  ; virtual ~REveProjectable ();  Destructor. ;  ; virtual void AddProjected (REveProjected *p);  ; virtual void AddProjectedsToSet (std::set< REveElement * > &set);  Add the projected elements to the set, dyn-casting them to REveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; virtual void ClearProjectedList ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main color of projecteds if their color is the same as old_color. ;  ; virtual void PropagateMainTransparency (Char_t t, Char_t old_t);  Set main transparency of projecteds if their transparency",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html:5219,Integrability,depend,dependant,5219,"CSCTakeMotherAsMaster ();  ; void DecDenyDestroy ();  Decreases the deny-destroy count of the element. ;  ; void DecImpliedSelected ();  ; virtual void Destroy ();  Destroy this element. ;  ; virtual void DestroyElements ();  Destroy all children of this element. ;  ; virtual void DestroyMainTrans ();  Destroy the main transformation matrix, it will always be taken as identity. ;  ; virtual void DestroyOrWarn ();  Destroy this element. Prints a warning if deny-destroy is in force. ;  ; void DisableListElements (Bool_t rnr_self=kFALSE, Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; virtual void ExportToInterpreter (const char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillExtraSelectionData (nlohmann::json &, const std::set< int > &) const;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet, const std::set< int > &);  Populate set impSelSet with derived / dependant elements. ;  ; REveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; REveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; REveElement * FirstChild () const;  Returns the first child element or 0 if the list is empty. ;  ; UChar_t GetChangeBits () const;  ; TClass * GetChildClass () const;  ; const char * GetCName () const;  ; REveCompound * GetCompound ();  ; const char * GetCTitle () const;  ; Int_t GetDenyDestroy () const;  R",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html:9080,Integrability,depend,dependent,9080," NumAunts () const;  ; Int_t NumChildren () const;  ; virtual void ProjectAllChildren (Bool_t same_depth=kTRUE);  If this is a projectable, loop over all projected replicas and add the projected image of all children there. ;  ; virtual void ProjectChild (REveElement *el, Bool_t same_depth=kTRUE);  If this is a projectable, loop over all projected replicas and add the projected image of child 'el' there. ;  ; virtual void PropagateMainColorToProjecteds (Color_t color, Color_t old_color);  Propagate color to projected elements. ;  ; virtual void PropagateMainTransparencyToProjecteds (Char_t t, Char_t old_t);  Propagate transparency to projected elements. ;  ; virtual void PropagateRnrStateToProjecteds ();  Propagate render state to the projected replicas of this element. ;  ; virtual void PropagateVizParamsToChildren (REveElement *el=nullptr);  Propagate visualization parameters from element el (defaulting to this) to all children. ;  ; virtual void PropagateVizParamsToProjecteds ();  Propagate visualization parameters to dependent elements. ;  ; virtual REveTrans * PtrMainTrans (Bool_t create=kTRUE);  Return pointer to main transformation. ;  ; void RecheckImpliedSelections ();  Call this if it is possible that implied-selection or highlight has changed for this element or for implied-selection this element is member of and you want to maintain consistent selection state. ;  ; AuntList_t & RefAunts ();  ; const AuntList_t & RefAunts () const;  ; List_t & RefChildren ();  ; const List_t & RefChildren () const;  ; virtual REveTrans & RefMainTrans ();  Return reference to main transformation. ;  ; virtual void RemoveAunt (REveAunt *au);  Remove el from the list of aunts. ;  ; virtual void RemoveElement (REveElement *el);  Remove el from the list of children. ;  ; virtual void RemoveElementLocal (REveElement *el);  Perform additional local removal of el. ;  ; virtual void RemoveElements ();  Remove all elements. ;  ; virtual void RemoveElementsLocal ();  Perform additio",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html:2222,Modifiability,inherit,inherited,2222," id);  Virtual method of base class TPointSet3D. ;  ; TClass * ProjectedClass (const REveProjection *p) const override;  Virtual from REveProjectable, returns REvePointSetProjected class. ;  ; REveVector & RefPoint (int n);  ; const REveVector & RefPoint (int n) const;  ; void Reset (Int_t n_points=0);  Drop all data and set-up the data structures to recive new data. ;  ; void SetMarkerColor (Color_t col) override;  Set the marker color. ;  ; void SetMarkerSize (Size_t msize=1) override;  Set marker size, propagate to projecteds. ;  ; void SetMarkerStyle (Style_t mstyle=1) override;  Set marker style, propagate to projecteds. ;  ; int SetNextPoint (float x, float y, float z);  ; int SetPoint (int n, float x, float y, float z);  ; Int_t WriteCoreJson (nlohmann::json &j, Int_t rnr_offset) override;  Write core json. ;  ; void WriteVizParams (std::ostream &out, const TString &var) override;  Write visualization parameters. ;  ;  Public Member Functions inherited from ROOT::Experimental::REveElement;  REveElement (const REveElement &e);  Copy constructor. ;  ;  REveElement (const std::string &name="""", const std::string &title="""");  Default constructor. ;  ; virtual ~REveElement ();  Destructor. ;  ; virtual Bool_t AcceptElement (REveElement *el);  Check if el can be added to this element. ;  ; virtual void AddAunt (REveAunt *au);  Add el into the list aunts. ;  ; virtual void AddElement (REveElement *el);  Add el to the list of children. ;  ; virtual void AddStamp (UChar_t bits);  Add (bitwise or) given stamps to fChangeBits. ;  ; virtual void Annihilate ();  Optimized destruction without check of reference-count. ;  ; virtual void AnnihilateElements ();  Annihilate elements. ;  ; Bool_t ApplyVizTag (const TString &tag, const TString &fallback_tag="""");  Set the VizTag, find model-element from the VizDB and copy visualization-parameters from it. ;  ; virtual Bool_t CanEditElement () const;  ; virtual Bool_t CanEditMainColor () const;  ; virtual Bool_t CanEditMainTrans ()",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html:4980,Modifiability,variab,variable,4980,"olorToMatchingChildren ();  ; void CSCApplyMainTransparencyToAllChildren ();  ; void CSCApplyMainTransparencyToMatchingChildren ();  ; void CSCImplySelectAllChildren ();  ; void CSCTakeMotherAsMaster ();  ; void DecDenyDestroy ();  Decreases the deny-destroy count of the element. ;  ; void DecImpliedSelected ();  ; virtual void Destroy ();  Destroy this element. ;  ; virtual void DestroyElements ();  Destroy all children of this element. ;  ; virtual void DestroyMainTrans ();  Destroy the main transformation matrix, it will always be taken as identity. ;  ; virtual void DestroyOrWarn ();  Destroy this element. Prints a warning if deny-destroy is in force. ;  ; void DisableListElements (Bool_t rnr_self=kFALSE, Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; virtual void ExportToInterpreter (const char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillExtraSelectionData (nlohmann::json &, const std::set< int > &) const;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet, const std::set< int > &);  Populate set impSelSet with derived / dependant elements. ;  ; REveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; REveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; REveElement * FirstChild () const;  Returns the first child element or 0 if the list is empty. ;  ; UChar_t GetChangeBits () const",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html:10757,Modifiability,variab,variable,10757,"oveAunt (REveAunt *au);  Remove el from the list of aunts. ;  ; virtual void RemoveElement (REveElement *el);  Remove el from the list of children. ;  ; virtual void RemoveElementLocal (REveElement *el);  Perform additional local removal of el. ;  ; virtual void RemoveElements ();  Remove all elements. ;  ; virtual void RemoveElementsLocal ();  Perform additional local removal of all elements. ;  ; virtual bool RequiresExtraSelectionData () const;  ; void ResetAllCSCBits ();  ; void ResetCSCBits (UChar_t f);  ; void SaveVizParams (std::ostream &out, const TString &tag, const TString &var);  Save visualization parameters for this element with given tag. ;  ; void SetChildClass (TClass *c);  ; void SetCompound (REveCompound *c);  ; void SetCSCBits (UChar_t f);  ; void SetDestroyOnZeroRefCnt (Bool_t d);  Sets the state of flag determining if the element will be destroyed when reference count reaches zero. ;  ; void SetEditMainColor (Bool_t x);  ; void SetEditMainTransparency (Bool_t x);  ; void SetMainAlpha (Float_t alpha);  Set main-transparency via float alpha variable. ;  ; virtual void SetMainColor (Color_t color);  Set main color of the element. ;  ; void SetMainColorPixel (Pixel_t pixel);  Convert pixel to Color_t and call SetMainColor(). ;  ; void SetMainColorPtr (Color_t *colptr);  ; void SetMainColorRGB (Float_t r, Float_t g, Float_t b);  Convert RGB values to Color_t and call SetMainColor. ;  ; void SetMainColorRGB (UChar_t r, UChar_t g, UChar_t b);  Convert RGB values to Color_t and call SetMainColor. ;  ; virtual void SetMainTransparency (Char_t t);  Set main-transparency. ;  ; void SetName (const std::string &name);  Set name of an element. ;  ; void SetNameTitle (const std::string &name, const std::string &title);  Set name and title of an element. ;  ; void SetPickable (Bool_t p);  ; void SetPickableRecursively (Bool_t p);  Set pickable state on the element and all its children. ;  ; virtual Bool_t SetRnrChildren (Bool_t rnr);  Set render state of this e",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html:13622,Modifiability,inherit,inherited,13622,"eElement *model);  Set visualization-parameter model element. ;  ; Bool_t SetVizModelByTag ();  Find model element in VizDB that corresponds to previously assigned fVizTag and set fVizModel accordingly. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void Stamp ();  ; void StampColorSelection ();  ; void StampElementAdded ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; Bool_t TestCSCBits (UChar_t f) const;  ; void VizDB_Apply (const std::string &tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const std::string &tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ;  Public Member Functions inherited from ROOT::Experimental::REveProjectable;  REveProjectable ();  Constructor. ;  ;  REveProjectable (const REveProjectable &);  Copy constructor. Does shallow copy. ;  ; virtual ~REveProjectable ();  Destructor. ;  ; virtual void AddProjected (REveProjected *p);  ; virtual void AddProjectedsToSet (std::set< REveElement * > &set);  Add the projected elements to the set, dyn-casting them to REveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; virtual void ClearProjectedList ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main color of projecteds if their color is the same as old_color. ;  ; virtual void PropagateMainTransparency (Char_t t, Char_t old_t);  Set main transparency of projecteds if their transparency is the same as the old one. ;  ; virtual void PropagateRenderState (Bool_t rnr_self, Bool_t rnr_children);  Set r",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html:14902,Modifiability,inherit,inherited,14902,"ojected *p);  ; virtual void AddProjectedsToSet (std::set< REveElement * > &set);  Add the projected elements to the set, dyn-casting them to REveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; virtual void ClearProjectedList ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main color of projecteds if their color is the same as old_color. ;  ; virtual void PropagateMainTransparency (Char_t t, Char_t old_t);  Set main transparency of projecteds if their transparency is the same as the old one. ;  ; virtual void PropagateRenderState (Bool_t rnr_self, Bool_t rnr_children);  Set render state of projecteds. ;  ; virtual void PropagateVizParams (REveElement *el=nullptr);  Set visualization parameters of projecteds. ;  ; ProjList_t & RefProjecteds ();  ; virtual void RemoveProjected (REveProjected *p);  ;  Public Member Functions inherited from TAttMarker;  TAttMarker ();  TAttMarker default constructor. ;  ;  TAttMarker (Color_t color, Style_t style, Size_t msize);  TAttMarker normal constructor. ;  ; virtual ~TAttMarker ();  TAttMarker destructor. ;  ; void Copy (TAttMarker &attmarker) const;  Copy this marker attributes to a new TAttMarker. ;  ; virtual Color_t GetMarkerColor () const;  Return the marker color. ;  ; virtual Size_t GetMarkerSize () const;  Return the marker size. ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual TClass * IsA () const;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttribut",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html:16170,Modifiability,inherit,inherited,16170,"; virtual Size_t GetMarkerSize () const;  Return the marker size. ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual TClass * IsA () const;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttBBox;  TAttBBox ();  ; virtual ~TAttBBox ();  ; Float_t * AssertBBox ();  ; Float_t * GetBBox ();  ; Bool_t GetBBoxOK () const;  ; virtual TClass * IsA () const;  ; TAttBBox & operator= (const TAttBBox &tab);  ; void ResetBBox ();  ; void SetupBBoxCube (Float_t extent, Float_t x, Float_t y, Float_t z);  Setup bounding box as cube with given extent and center position. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from ROOT::Experimental::REveSecondarySelectable;  REveSecondarySelectable ()=default;  ; virtual ~REveSecondarySelectable ();  ; Bool_t GetAlwaysSecSelect () const;  ; SelectionSet_t & RefHighlightedSet ();  ; SelectionSet_t & RefSelectedSet ();  ; void SetAlwaysSecSelect (Bool_t f);  . Protected Attributes; int fCapacity {0};  ; std::vector< REveVector > fPoints;  ; int fSize {0};  ; int fTexX {0};  ; int fTexY {0};  ;  Protected Attributes inherited from ROOT::Experimental::REveElement; AuntList_t fAunts;  ; Bool_t fCanEditMainColor {kFALSE};  ; Bool_t fCanEditMainTrans {kFALSE};  ; Bo",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html:16693,Modifiability,inherit,inherited,16693,"ef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttBBox;  TAttBBox ();  ; virtual ~TAttBBox ();  ; Float_t * AssertBBox ();  ; Float_t * GetBBox ();  ; Bool_t GetBBoxOK () const;  ; virtual TClass * IsA () const;  ; TAttBBox & operator= (const TAttBBox &tab);  ; void ResetBBox ();  ; void SetupBBoxCube (Float_t extent, Float_t x, Float_t y, Float_t z);  Setup bounding box as cube with given extent and center position. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from ROOT::Experimental::REveSecondarySelectable;  REveSecondarySelectable ()=default;  ; virtual ~REveSecondarySelectable ();  ; Bool_t GetAlwaysSecSelect () const;  ; SelectionSet_t & RefHighlightedSet ();  ; SelectionSet_t & RefSelectedSet ();  ; void SetAlwaysSecSelect (Bool_t f);  . Protected Attributes; int fCapacity {0};  ; std::vector< REveVector > fPoints;  ; int fSize {0};  ; int fTexX {0};  ; int fTexY {0};  ;  Protected Attributes inherited from ROOT::Experimental::REveElement; AuntList_t fAunts;  ; Bool_t fCanEditMainColor {kFALSE};  ; Bool_t fCanEditMainTrans {kFALSE};  ; Bool_t fCanEditMainTransparency {kFALSE};  ; UChar_t fChangeBits {0};  ; TClass * fChildClass {nullptr};  ; List_t fChildren;  ; REveCompound * fCompound {nullptr};  ; UChar_t fCSCBits {0};  ; Color_t fDefaultColor {kPink};  ; Int_t fDenyDestroy {0};  ; Bool_t fDestroyOnZeroRefCnt {kTRUE};  Deny-destroy count. ;  ; Char_t fDestructing {kNone};  ; Short_t fImpliedSelected {0};  ; Color_t * fMainColorPtr {nullptr};  ; std::unique_ptr< REveTrans > fMainTrans;  ; Char_t fMainTra",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html:17150,Modifiability,inherit,inherited,17150,"tBBoxOK () const;  ; virtual TClass * IsA () const;  ; TAttBBox & operator= (const TAttBBox &tab);  ; void ResetBBox ();  ; void SetupBBoxCube (Float_t extent, Float_t x, Float_t y, Float_t z);  Setup bounding box as cube with given extent and center position. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from ROOT::Experimental::REveSecondarySelectable;  REveSecondarySelectable ()=default;  ; virtual ~REveSecondarySelectable ();  ; Bool_t GetAlwaysSecSelect () const;  ; SelectionSet_t & RefHighlightedSet ();  ; SelectionSet_t & RefSelectedSet ();  ; void SetAlwaysSecSelect (Bool_t f);  . Protected Attributes; int fCapacity {0};  ; std::vector< REveVector > fPoints;  ; int fSize {0};  ; int fTexX {0};  ; int fTexY {0};  ;  Protected Attributes inherited from ROOT::Experimental::REveElement; AuntList_t fAunts;  ; Bool_t fCanEditMainColor {kFALSE};  ; Bool_t fCanEditMainTrans {kFALSE};  ; Bool_t fCanEditMainTransparency {kFALSE};  ; UChar_t fChangeBits {0};  ; TClass * fChildClass {nullptr};  ; List_t fChildren;  ; REveCompound * fCompound {nullptr};  ; UChar_t fCSCBits {0};  ; Color_t fDefaultColor {kPink};  ; Int_t fDenyDestroy {0};  ; Bool_t fDestroyOnZeroRefCnt {kTRUE};  Deny-destroy count. ;  ; Char_t fDestructing {kNone};  ; Short_t fImpliedSelected {0};  ; Color_t * fMainColorPtr {nullptr};  ; std::unique_ptr< REveTrans > fMainTrans;  ; Char_t fMainTransparency {0};  ; REveElement * fMother {nullptr};  ; std::string fName;  ; Bool_t fPickable {false};  ; std::unique_ptr< REveRenderData > fRenderData;  Externally assigned and controlled user data. ;  ; Bool_t fRnrChildren {kTRUE};  ; Bool_t fRnrSelf {kTRUE};  ; REveScene * fScene {nullptr};  ; REveElement * fSelectionMaster {nullptr};  ; std::string fTitle;  ; void * fUserData {nullptr};  ; REveElement * fVizModel {nullptr};  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited f",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html:18288,Modifiability,inherit,inherited,18288,"its {0};  ; TClass * fChildClass {nullptr};  ; List_t fChildren;  ; REveCompound * fCompound {nullptr};  ; UChar_t fCSCBits {0};  ; Color_t fDefaultColor {kPink};  ; Int_t fDenyDestroy {0};  ; Bool_t fDestroyOnZeroRefCnt {kTRUE};  Deny-destroy count. ;  ; Char_t fDestructing {kNone};  ; Short_t fImpliedSelected {0};  ; Color_t * fMainColorPtr {nullptr};  ; std::unique_ptr< REveTrans > fMainTrans;  ; Char_t fMainTransparency {0};  ; REveElement * fMother {nullptr};  ; std::string fName;  ; Bool_t fPickable {false};  ; std::unique_ptr< REveRenderData > fRenderData;  Externally assigned and controlled user data. ;  ; Bool_t fRnrChildren {kTRUE};  ; Bool_t fRnrSelf {kTRUE};  ; REveScene * fScene {nullptr};  ; REveElement * fSelectionMaster {nullptr};  ; std::string fTitle;  ; void * fUserData {nullptr};  ; REveElement * fVizModel {nullptr};  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from ROOT::Experimental::REveProjectable; ProjList_t fProjectedList;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttBBox; Float_t * fBBox;  ;  Protected Attributes inherited from ROOT::Experimental::REveSecondarySelectable; Bool_t fAlwaysSecSelect {kFALSE};  ; SelectionSet_t fHighlightedSet;  ; SelectionSet_t fSelectedSet;  . Private Member Functions; REvePointSet & operator= (const REvePointSet &)=delete;  . Friends; class REvePointSetArray;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::REveElement; typedef std::list< REveAunt * > AuntList_t;  ; enum  EChangeBits { ;   kCBColorSelection = BIT(0); , kCBTransBBox = BIT(1); , kCBObjProps = BIT(2); , kCBVisibility = BIT(3); , ;   kCBElementAdded = BIT(4). };  ; typedef std::list< REveElement * > List_t;  ; typedef std::set< REveElement * > Set_t;  ;  Public Types inherited from ROOT::Experimental",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html:18392,Modifiability,inherit,inherited,18392,"its {0};  ; TClass * fChildClass {nullptr};  ; List_t fChildren;  ; REveCompound * fCompound {nullptr};  ; UChar_t fCSCBits {0};  ; Color_t fDefaultColor {kPink};  ; Int_t fDenyDestroy {0};  ; Bool_t fDestroyOnZeroRefCnt {kTRUE};  Deny-destroy count. ;  ; Char_t fDestructing {kNone};  ; Short_t fImpliedSelected {0};  ; Color_t * fMainColorPtr {nullptr};  ; std::unique_ptr< REveTrans > fMainTrans;  ; Char_t fMainTransparency {0};  ; REveElement * fMother {nullptr};  ; std::string fName;  ; Bool_t fPickable {false};  ; std::unique_ptr< REveRenderData > fRenderData;  Externally assigned and controlled user data. ;  ; Bool_t fRnrChildren {kTRUE};  ; Bool_t fRnrSelf {kTRUE};  ; REveScene * fScene {nullptr};  ; REveElement * fSelectionMaster {nullptr};  ; std::string fTitle;  ; void * fUserData {nullptr};  ; REveElement * fVizModel {nullptr};  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from ROOT::Experimental::REveProjectable; ProjList_t fProjectedList;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttBBox; Float_t * fBBox;  ;  Protected Attributes inherited from ROOT::Experimental::REveSecondarySelectable; Bool_t fAlwaysSecSelect {kFALSE};  ; SelectionSet_t fHighlightedSet;  ; SelectionSet_t fSelectedSet;  . Private Member Functions; REvePointSet & operator= (const REvePointSet &)=delete;  . Friends; class REvePointSetArray;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::REveElement; typedef std::list< REveAunt * > AuntList_t;  ; enum  EChangeBits { ;   kCBColorSelection = BIT(0); , kCBTransBBox = BIT(1); , kCBObjProps = BIT(2); , kCBVisibility = BIT(3); , ;   kCBElementAdded = BIT(4). };  ; typedef std::list< REveElement * > List_t;  ; typedef std::set< REveElement * > Set_t;  ;  Public Types inherited from ROOT::Experimental",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html:18564,Modifiability,inherit,inherited,18564,"cted {0};  ; Color_t * fMainColorPtr {nullptr};  ; std::unique_ptr< REveTrans > fMainTrans;  ; Char_t fMainTransparency {0};  ; REveElement * fMother {nullptr};  ; std::string fName;  ; Bool_t fPickable {false};  ; std::unique_ptr< REveRenderData > fRenderData;  Externally assigned and controlled user data. ;  ; Bool_t fRnrChildren {kTRUE};  ; Bool_t fRnrSelf {kTRUE};  ; REveScene * fScene {nullptr};  ; REveElement * fSelectionMaster {nullptr};  ; std::string fTitle;  ; void * fUserData {nullptr};  ; REveElement * fVizModel {nullptr};  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from ROOT::Experimental::REveProjectable; ProjList_t fProjectedList;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttBBox; Float_t * fBBox;  ;  Protected Attributes inherited from ROOT::Experimental::REveSecondarySelectable; Bool_t fAlwaysSecSelect {kFALSE};  ; SelectionSet_t fHighlightedSet;  ; SelectionSet_t fSelectedSet;  . Private Member Functions; REvePointSet & operator= (const REvePointSet &)=delete;  . Friends; class REvePointSetArray;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::REveElement; typedef std::list< REveAunt * > AuntList_t;  ; enum  EChangeBits { ;   kCBColorSelection = BIT(0); , kCBTransBBox = BIT(1); , kCBObjProps = BIT(2); , kCBVisibility = BIT(3); , ;   kCBElementAdded = BIT(4). };  ; typedef std::list< REveElement * > List_t;  ; typedef std::set< REveElement * > Set_t;  ;  Public Types inherited from ROOT::Experimental::REveProjectable; typedef std::list< REveProjected * > ProjList_t;  ;  Public Types inherited from ROOT::Experimental::REveSecondarySelectable; typedef std::set< Int_t > SelectionSet_t;  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Nam",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html:18631,Modifiability,inherit,inherited,18631,"cted {0};  ; Color_t * fMainColorPtr {nullptr};  ; std::unique_ptr< REveTrans > fMainTrans;  ; Char_t fMainTransparency {0};  ; REveElement * fMother {nullptr};  ; std::string fName;  ; Bool_t fPickable {false};  ; std::unique_ptr< REveRenderData > fRenderData;  Externally assigned and controlled user data. ;  ; Bool_t fRnrChildren {kTRUE};  ; Bool_t fRnrSelf {kTRUE};  ; REveScene * fScene {nullptr};  ; REveElement * fSelectionMaster {nullptr};  ; std::string fTitle;  ; void * fUserData {nullptr};  ; REveElement * fVizModel {nullptr};  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from ROOT::Experimental::REveProjectable; ProjList_t fProjectedList;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttBBox; Float_t * fBBox;  ;  Protected Attributes inherited from ROOT::Experimental::REveSecondarySelectable; Bool_t fAlwaysSecSelect {kFALSE};  ; SelectionSet_t fHighlightedSet;  ; SelectionSet_t fSelectedSet;  . Private Member Functions; REvePointSet & operator= (const REvePointSet &)=delete;  . Friends; class REvePointSetArray;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::REveElement; typedef std::list< REveAunt * > AuntList_t;  ; enum  EChangeBits { ;   kCBColorSelection = BIT(0); , kCBTransBBox = BIT(1); , kCBObjProps = BIT(2); , kCBVisibility = BIT(3); , ;   kCBElementAdded = BIT(4). };  ; typedef std::list< REveElement * > List_t;  ; typedef std::set< REveElement * > Set_t;  ;  Public Types inherited from ROOT::Experimental::REveProjectable; typedef std::list< REveProjected * > ProjList_t;  ;  Public Types inherited from ROOT::Experimental::REveSecondarySelectable; typedef std::set< Int_t > SelectionSet_t;  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Nam",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html:18961,Modifiability,inherit,inherited,18961,"r};  ; REveElement * fSelectionMaster {nullptr};  ; std::string fTitle;  ; void * fUserData {nullptr};  ; REveElement * fVizModel {nullptr};  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from ROOT::Experimental::REveProjectable; ProjList_t fProjectedList;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttBBox; Float_t * fBBox;  ;  Protected Attributes inherited from ROOT::Experimental::REveSecondarySelectable; Bool_t fAlwaysSecSelect {kFALSE};  ; SelectionSet_t fHighlightedSet;  ; SelectionSet_t fSelectedSet;  . Private Member Functions; REvePointSet & operator= (const REvePointSet &)=delete;  . Friends; class REvePointSetArray;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::REveElement; typedef std::list< REveAunt * > AuntList_t;  ; enum  EChangeBits { ;   kCBColorSelection = BIT(0); , kCBTransBBox = BIT(1); , kCBObjProps = BIT(2); , kCBVisibility = BIT(3); , ;   kCBElementAdded = BIT(4). };  ; typedef std::list< REveElement * > List_t;  ; typedef std::set< REveElement * > Set_t;  ;  Public Types inherited from ROOT::Experimental::REveProjectable; typedef std::list< REveProjected * > ProjList_t;  ;  Public Types inherited from ROOT::Experimental::REveSecondarySelectable; typedef std::set< Int_t > SelectionSet_t;  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html:19325,Modifiability,inherit,inherited,19325," ROOT::Experimental::REveSecondarySelectable; Bool_t fAlwaysSecSelect {kFALSE};  ; SelectionSet_t fHighlightedSet;  ; SelectionSet_t fSelectedSet;  . Private Member Functions; REvePointSet & operator= (const REvePointSet &)=delete;  . Friends; class REvePointSetArray;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::REveElement; typedef std::list< REveAunt * > AuntList_t;  ; enum  EChangeBits { ;   kCBColorSelection = BIT(0); , kCBTransBBox = BIT(1); , kCBObjProps = BIT(2); , kCBVisibility = BIT(3); , ;   kCBElementAdded = BIT(4). };  ; typedef std::list< REveElement * > List_t;  ; typedef std::set< REveElement * > Set_t;  ;  Public Types inherited from ROOT::Experimental::REveProjectable; typedef std::list< REveProjected * > ProjList_t;  ;  Public Types inherited from ROOT::Experimental::REveSecondarySelectable; typedef std::set< Int_t > SelectionSet_t;  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttBBox; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Types inherited from ROOT::Experimental::REveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = BIT(0); , kCSCBTakeMotherAsMaster = BIT(1); , kCSCBApplyMainColorToAllChildren = BIT(2); , kCSCBApplyMainColorToMatchingChildren = BIT(3); , ;   kCSCBApplyMainTransparencyToAllChildren = BIT(4); , kCSCBApplyMainTrans",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html:19443,Modifiability,inherit,inherited,19443," ROOT::Experimental::REveSecondarySelectable; Bool_t fAlwaysSecSelect {kFALSE};  ; SelectionSet_t fHighlightedSet;  ; SelectionSet_t fSelectedSet;  . Private Member Functions; REvePointSet & operator= (const REvePointSet &)=delete;  . Friends; class REvePointSetArray;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::REveElement; typedef std::list< REveAunt * > AuntList_t;  ; enum  EChangeBits { ;   kCBColorSelection = BIT(0); , kCBTransBBox = BIT(1); , kCBObjProps = BIT(2); , kCBVisibility = BIT(3); , ;   kCBElementAdded = BIT(4). };  ; typedef std::list< REveElement * > List_t;  ; typedef std::set< REveElement * > Set_t;  ;  Public Types inherited from ROOT::Experimental::REveProjectable; typedef std::list< REveProjected * > ProjList_t;  ;  Public Types inherited from ROOT::Experimental::REveSecondarySelectable; typedef std::set< Int_t > SelectionSet_t;  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttBBox; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Types inherited from ROOT::Experimental::REveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = BIT(0); , kCSCBTakeMotherAsMaster = BIT(1); , kCSCBApplyMainColorToAllChildren = BIT(2); , kCSCBApplyMainColorToMatchingChildren = BIT(3); , ;   kCSCBApplyMainTransparencyToAllChildren = BIT(4); , kCSCBApplyMainTrans",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html:19580,Modifiability,inherit,inherited,19580," ROOT::Experimental::REveSecondarySelectable; Bool_t fAlwaysSecSelect {kFALSE};  ; SelectionSet_t fHighlightedSet;  ; SelectionSet_t fSelectedSet;  . Private Member Functions; REvePointSet & operator= (const REvePointSet &)=delete;  . Friends; class REvePointSetArray;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::REveElement; typedef std::list< REveAunt * > AuntList_t;  ; enum  EChangeBits { ;   kCBColorSelection = BIT(0); , kCBTransBBox = BIT(1); , kCBObjProps = BIT(2); , kCBVisibility = BIT(3); , ;   kCBElementAdded = BIT(4). };  ; typedef std::list< REveElement * > List_t;  ; typedef std::set< REveElement * > Set_t;  ;  Public Types inherited from ROOT::Experimental::REveProjectable; typedef std::list< REveProjected * > ProjList_t;  ;  Public Types inherited from ROOT::Experimental::REveSecondarySelectable; typedef std::set< Int_t > SelectionSet_t;  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttBBox; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Types inherited from ROOT::Experimental::REveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = BIT(0); , kCSCBTakeMotherAsMaster = BIT(1); , kCSCBApplyMainColorToAllChildren = BIT(2); , kCSCBApplyMainColorToMatchingChildren = BIT(3); , ;   kCSCBApplyMainTransparencyToAllChildren = BIT(4); , kCSCBApplyMainTrans",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html:20115,Modifiability,inherit,inherited,20115,"pedef std::list< REveProjected * > ProjList_t;  ;  Public Types inherited from ROOT::Experimental::REveSecondarySelectable; typedef std::set< Int_t > SelectionSet_t;  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttBBox; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Types inherited from ROOT::Experimental::REveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = BIT(0); , kCSCBTakeMotherAsMaster = BIT(1); , kCSCBApplyMainColorToAllChildren = BIT(2); , kCSCBApplyMainColorToMatchingChildren = BIT(3); , ;   kCSCBApplyMainTransparencyToAllChildren = BIT(4); , kCSCBApplyMainTransparencyToMatchingChildren = BIT(5). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Member Functions inherited from ROOT::Experimental::REveElement; virtual void AnnihilateRecursively ();  Protected member function called from REveElement::Annihilate(). ;  ; void assign_element_id_recurisvely ();  ; void assign_scene_recursively (REveScene *s);  ; ElementId_t get_mother_id () const;  ; ElementId_t get_scene_id () const;  ; virtual void PreDeleteElement ();  Vertex / normal / triangle index information for rendering. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TAttBBox;  TAttBBox (const TAttBBox &tab);  ; void AssertBBoxExtents",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html:20312,Modifiability,inherit,inherited,20312,"pedef std::list< REveProjected * > ProjList_t;  ;  Public Types inherited from ROOT::Experimental::REveSecondarySelectable; typedef std::set< Int_t > SelectionSet_t;  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttBBox; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Types inherited from ROOT::Experimental::REveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = BIT(0); , kCSCBTakeMotherAsMaster = BIT(1); , kCSCBApplyMainColorToAllChildren = BIT(2); , kCSCBApplyMainColorToMatchingChildren = BIT(3); , ;   kCSCBApplyMainTransparencyToAllChildren = BIT(4); , kCSCBApplyMainTransparencyToMatchingChildren = BIT(5). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Member Functions inherited from ROOT::Experimental::REveElement; virtual void AnnihilateRecursively ();  Protected member function called from REveElement::Annihilate(). ;  ; void assign_element_id_recurisvely ();  ; void assign_scene_recursively (REveScene *s);  ; ElementId_t get_mother_id () const;  ; ElementId_t get_scene_id () const;  ; virtual void PreDeleteElement ();  Vertex / normal / triangle index information for rendering. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TAttBBox;  TAttBBox (const TAttBBox &tab);  ; void AssertBBoxExtents",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html:20775,Modifiability,inherit,inherited,20775," style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttBBox; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Types inherited from ROOT::Experimental::REveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = BIT(0); , kCSCBTakeMotherAsMaster = BIT(1); , kCSCBApplyMainColorToAllChildren = BIT(2); , kCSCBApplyMainColorToMatchingChildren = BIT(3); , ;   kCSCBApplyMainTransparencyToAllChildren = BIT(4); , kCSCBApplyMainTransparencyToMatchingChildren = BIT(5). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Member Functions inherited from ROOT::Experimental::REveElement; virtual void AnnihilateRecursively ();  Protected member function called from REveElement::Annihilate(). ;  ; void assign_element_id_recurisvely ();  ; void assign_scene_recursively (REveScene *s);  ; ElementId_t get_mother_id () const;  ; ElementId_t get_scene_id () const;  ; virtual void PreDeleteElement ();  Vertex / normal / triangle index information for rendering. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TAttBBox;  TAttBBox (const TAttBBox &tab);  ; void AssertBBoxExtents (Float_t epsilon=0.005);  Assert extents of all sides of the bounding-box are at least epsilon. ;  ; void BBoxCheckPoint (const Float_t *p);  ; void BBoxCheckPoint (Float_t x, Float_t y, Float_t z);  ; void BBoxClear ();  Remove BBox information. ;  ; void BBoxInit (Float_t infinity=1e6);  Dynamic Float_t[6] X(min,max), Y(min,max), Z(min,max) ;  ; void BBoxZero (Float_t epsilon=0, Float_t x=0, Float_t y=0, Float_t z=0); ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html:21296,Modifiability,inherit,inherited,21296,"T::Experimental::REveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = BIT(0); , kCSCBTakeMotherAsMaster = BIT(1); , kCSCBApplyMainColorToAllChildren = BIT(2); , kCSCBApplyMainColorToMatchingChildren = BIT(3); , ;   kCSCBApplyMainTransparencyToAllChildren = BIT(4); , kCSCBApplyMainTransparencyToMatchingChildren = BIT(5). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Member Functions inherited from ROOT::Experimental::REveElement; virtual void AnnihilateRecursively ();  Protected member function called from REveElement::Annihilate(). ;  ; void assign_element_id_recurisvely ();  ; void assign_scene_recursively (REveScene *s);  ; ElementId_t get_mother_id () const;  ; ElementId_t get_scene_id () const;  ; virtual void PreDeleteElement ();  Vertex / normal / triangle index information for rendering. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TAttBBox;  TAttBBox (const TAttBBox &tab);  ; void AssertBBoxExtents (Float_t epsilon=0.005);  Assert extents of all sides of the bounding-box are at least epsilon. ;  ; void BBoxCheckPoint (const Float_t *p);  ; void BBoxCheckPoint (Float_t x, Float_t y, Float_t z);  ; void BBoxClear ();  Remove BBox information. ;  ; void BBoxInit (Float_t infinity=1e6);  Dynamic Float_t[6] X(min,max), Y(min,max), Z(min,max) ;  ; void BBoxZero (Float_t epsilon=0, Float_t x=0, Float_t y=0, Float_t z=0);  Create cube of volume (2*epsilon)^3 at (x,y,z). ;  ;  Static Protected Member Functions inherited from ROOT::Experimental::REveElement; static const std::string & ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  . #include <ROOT/REvePointSet.hxx>. Inheritance diagram for ROOT::Experimental::REvePointSet:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ REvePointSet() [1/2]. REvePointSet::REvePointSet ; (; const s",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html:21893,Modifiability,inherit,inherited,21893,"gn_element_id_recurisvely ();  ; void assign_scene_recursively (REveScene *s);  ; ElementId_t get_mother_id () const;  ; ElementId_t get_scene_id () const;  ; virtual void PreDeleteElement ();  Vertex / normal / triangle index information for rendering. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TAttBBox;  TAttBBox (const TAttBBox &tab);  ; void AssertBBoxExtents (Float_t epsilon=0.005);  Assert extents of all sides of the bounding-box are at least epsilon. ;  ; void BBoxCheckPoint (const Float_t *p);  ; void BBoxCheckPoint (Float_t x, Float_t y, Float_t z);  ; void BBoxClear ();  Remove BBox information. ;  ; void BBoxInit (Float_t infinity=1e6);  Dynamic Float_t[6] X(min,max), Y(min,max), Z(min,max) ;  ; void BBoxZero (Float_t epsilon=0, Float_t x=0, Float_t y=0, Float_t z=0);  Create cube of volume (2*epsilon)^3 at (x,y,z). ;  ;  Static Protected Member Functions inherited from ROOT::Experimental::REveElement; static const std::string & ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  . #include <ROOT/REvePointSet.hxx>. Inheritance diagram for ROOT::Experimental::REvePointSet:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ REvePointSet() [1/2]. REvePointSet::REvePointSet ; (; const std::string & ; name = """", . const std::string & ; title = """", . Int_t ; n_points = 0 . ). Constructor. ; Definition at line 46 of file REvePointSet.cxx. ◆ REvePointSet() [2/2]. REvePointSet::REvePointSet ; (; const REvePointSet & ; e). Copy constructor. ; Definition at line 66 of file REvePointSet.cxx. ◆ ~REvePointSet(). REvePointSet::~REvePointSet ; (; ). override . Destructor. ; Definition at line 80 of file REvePointSet.cxx. Member Function Documentation. ◆ BuildRenderData(). void REvePointSet::BuildRenderData ; (; ). overridevirtual . Crates 3D point array for rendering. ; Reimplemented from ROOT::Exp",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html:13079,Deployability,update,update,13079,");  Set transformation matrix from column-major array. ;  ; void SetupDefaultColorAndTransparency (Color_t col, Bool_t can_edit_color, Bool_t can_edit_transparency);  Set up element to use built-in main color and set flags allowing editing of main color and transparency. ;  ; void SetUserData (void *ud);  ; void SetVizModel (REveElement *model);  Set visualization-parameter model element. ;  ; Bool_t SetVizModelByTag ();  Find model element in VizDB that corresponds to previously assigned fVizTag and set fVizModel accordingly. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void Stamp ();  ; void StampColorSelection ();  ; void StampElementAdded ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; Bool_t TestCSCBits (UChar_t f) const;  ; void VizDB_Apply (const std::string &tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const std::string &tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual Int_t WriteCoreJson (nlohmann::json &cj, Int_t rnr_offset);  Write core json. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from ROOT::Experimental::REveProjectable;  REveProjectable ();  Constructor. ;  ;  REveProjectable (const REveProjectable &);  Copy constructor. Does shallow copy. ;  ; virtual ~REveProjectable ();  Destructor. ;  ; virtual void AddProjected (REveProjected *p);  ; virtual void AddProjectedsToSet (std::set< REveElement * > &set);  Add the projected elements to the set, dyn-casting them to REveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of project",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html:13281,Deployability,update,update,13281,"flags allowing editing of main color and transparency. ;  ; void SetUserData (void *ud);  ; void SetVizModel (REveElement *model);  Set visualization-parameter model element. ;  ; Bool_t SetVizModelByTag ();  Find model element in VizDB that corresponds to previously assigned fVizTag and set fVizModel accordingly. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void Stamp ();  ; void StampColorSelection ();  ; void StampElementAdded ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; Bool_t TestCSCBits (UChar_t f) const;  ; void VizDB_Apply (const std::string &tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const std::string &tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual Int_t WriteCoreJson (nlohmann::json &cj, Int_t rnr_offset);  Write core json. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from ROOT::Experimental::REveProjectable;  REveProjectable ();  Constructor. ;  ;  REveProjectable (const REveProjectable &);  Copy constructor. Does shallow copy. ;  ; virtual ~REveProjectable ();  Destructor. ;  ; virtual void AddProjected (REveProjected *p);  ; virtual void AddProjectedsToSet (std::set< REveElement * > &set);  Add the projected elements to the set, dyn-casting them to REveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; virtual void ClearProjectedList ();  ; virtual Bool_t HasProjecteds () const;  ; virtual TClass * ProjectedClass (const REveProjection *p",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html:5172,Integrability,depend,dependant,5172,"CSCTakeMotherAsMaster ();  ; void DecDenyDestroy ();  Decreases the deny-destroy count of the element. ;  ; void DecImpliedSelected ();  ; virtual void Destroy ();  Destroy this element. ;  ; virtual void DestroyElements ();  Destroy all children of this element. ;  ; virtual void DestroyMainTrans ();  Destroy the main transformation matrix, it will always be taken as identity. ;  ; virtual void DestroyOrWarn ();  Destroy this element. Prints a warning if deny-destroy is in force. ;  ; void DisableListElements (Bool_t rnr_self=kFALSE, Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; virtual void ExportToInterpreter (const char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillExtraSelectionData (nlohmann::json &, const std::set< int > &) const;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet, const std::set< int > &);  Populate set impSelSet with derived / dependant elements. ;  ; REveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; REveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; REveElement * FirstChild () const;  Returns the first child element or 0 if the list is empty. ;  ; UChar_t GetChangeBits () const;  ; TClass * GetChildClass () const;  ; const char * GetCName () const;  ; REveCompound * GetCompound ();  ; const char * GetCTitle () const;  ; Int_t GetDenyDestroy () const;  R",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html:9033,Integrability,depend,dependent,9033," NumAunts () const;  ; Int_t NumChildren () const;  ; virtual void ProjectAllChildren (Bool_t same_depth=kTRUE);  If this is a projectable, loop over all projected replicas and add the projected image of all children there. ;  ; virtual void ProjectChild (REveElement *el, Bool_t same_depth=kTRUE);  If this is a projectable, loop over all projected replicas and add the projected image of child 'el' there. ;  ; virtual void PropagateMainColorToProjecteds (Color_t color, Color_t old_color);  Propagate color to projected elements. ;  ; virtual void PropagateMainTransparencyToProjecteds (Char_t t, Char_t old_t);  Propagate transparency to projected elements. ;  ; virtual void PropagateRnrStateToProjecteds ();  Propagate render state to the projected replicas of this element. ;  ; virtual void PropagateVizParamsToChildren (REveElement *el=nullptr);  Propagate visualization parameters from element el (defaulting to this) to all children. ;  ; virtual void PropagateVizParamsToProjecteds ();  Propagate visualization parameters to dependent elements. ;  ; virtual REveTrans * PtrMainTrans (Bool_t create=kTRUE);  Return pointer to main transformation. ;  ; void RecheckImpliedSelections ();  Call this if it is possible that implied-selection or highlight has changed for this element or for implied-selection this element is member of and you want to maintain consistent selection state. ;  ; AuntList_t & RefAunts ();  ; const AuntList_t & RefAunts () const;  ; List_t & RefChildren ();  ; const List_t & RefChildren () const;  ; virtual REveTrans & RefMainTrans ();  Return reference to main transformation. ;  ; virtual void RemoveAunt (REveAunt *au);  Remove el from the list of aunts. ;  ; virtual void RemoveElement (REveElement *el);  Remove el from the list of children. ;  ; virtual void RemoveElements ();  Remove all elements. ;  ; virtual bool RequiresExtraSelectionData () const;  ; void ResetAllCSCBits ();  ; void ResetCSCBits (UChar_t f);  ; void SaveVizParams (std::ostream &o",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html:1896,Modifiability,inherit,inherited,1896,"uble_t GetMin () const;  ; Int_t GetNBins () const;  ; void InitBins (const std::string &quant_name, Int_t nbins, Double_t min, Double_t max);  Initialize internal point-sets with given binning parameters. ;  ; void RemoveElementLocal (REveElement *el) override;  Virtual from REveElement, provide bin management. ;  ; void RemoveElementsLocal () override;  Virtual from REveElement, provide bin management. ;  ; void SetDefPointSetCapacity (Int_t c);  ; void SetMarkerColor (Color_t tcolor=1) override;  Set marker color, propagate to children. ;  ; void SetMarkerSize (Size_t msize=1) override;  Set marker size, propagate to children. ;  ; void SetMarkerStyle (Style_t mstyle=1) override;  Set marker style, propagate to children. ;  ; void SetRange (Double_t min, Double_t max);  Set active range of the separating quantity. ;  ; Int_t Size (Bool_t under=kFALSE, Bool_t over=kFALSE) const;  Get the total number of filled points. ;  ;  Public Member Functions inherited from ROOT::Experimental::REveElement;  REveElement (const REveElement &e);  Copy constructor. ;  ;  REveElement (const std::string &name="""", const std::string &title="""");  Default constructor. ;  ; virtual ~REveElement ();  Destructor. ;  ; virtual Bool_t AcceptElement (REveElement *el);  Check if el can be added to this element. ;  ; virtual void AddAunt (REveAunt *au);  Add el into the list aunts. ;  ; virtual void AddElement (REveElement *el);  Add el to the list of children. ;  ; virtual void AddStamp (UChar_t bits);  Add (bitwise or) given stamps to fChangeBits. ;  ; virtual void Annihilate ();  Optimized destruction without check of reference-count. ;  ; virtual void AnnihilateElements ();  Annihilate elements. ;  ; Bool_t ApplyVizTag (const TString &tag, const TString &fallback_tag="""");  Set the VizTag, find model-element from the VizDB and copy visualization-parameters from it. ;  ; virtual void BuildRenderData ();  Write transformation Matrix to render data. ;  ; virtual Bool_t CanEditElement () const;",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html:4933,Modifiability,variab,variable,4933,"olorToMatchingChildren ();  ; void CSCApplyMainTransparencyToAllChildren ();  ; void CSCApplyMainTransparencyToMatchingChildren ();  ; void CSCImplySelectAllChildren ();  ; void CSCTakeMotherAsMaster ();  ; void DecDenyDestroy ();  Decreases the deny-destroy count of the element. ;  ; void DecImpliedSelected ();  ; virtual void Destroy ();  Destroy this element. ;  ; virtual void DestroyElements ();  Destroy all children of this element. ;  ; virtual void DestroyMainTrans ();  Destroy the main transformation matrix, it will always be taken as identity. ;  ; virtual void DestroyOrWarn ();  Destroy this element. Prints a warning if deny-destroy is in force. ;  ; void DisableListElements (Bool_t rnr_self=kFALSE, Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; virtual void ExportToInterpreter (const char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillExtraSelectionData (nlohmann::json &, const std::set< int > &) const;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet, const std::set< int > &);  Populate set impSelSet with derived / dependant elements. ;  ; REveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; REveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; REveElement * FirstChild () const;  Returns the first child element or 0 if the list is empty. ;  ; UChar_t GetChangeBits () const",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html:10520,Modifiability,variab,variable,10520,"RefAunts () const;  ; List_t & RefChildren ();  ; const List_t & RefChildren () const;  ; virtual REveTrans & RefMainTrans ();  Return reference to main transformation. ;  ; virtual void RemoveAunt (REveAunt *au);  Remove el from the list of aunts. ;  ; virtual void RemoveElement (REveElement *el);  Remove el from the list of children. ;  ; virtual void RemoveElements ();  Remove all elements. ;  ; virtual bool RequiresExtraSelectionData () const;  ; void ResetAllCSCBits ();  ; void ResetCSCBits (UChar_t f);  ; void SaveVizParams (std::ostream &out, const TString &tag, const TString &var);  Save visualization parameters for this element with given tag. ;  ; void SetChildClass (TClass *c);  ; void SetCompound (REveCompound *c);  ; void SetCSCBits (UChar_t f);  ; void SetDestroyOnZeroRefCnt (Bool_t d);  Sets the state of flag determining if the element will be destroyed when reference count reaches zero. ;  ; void SetEditMainColor (Bool_t x);  ; void SetEditMainTransparency (Bool_t x);  ; void SetMainAlpha (Float_t alpha);  Set main-transparency via float alpha variable. ;  ; virtual void SetMainColor (Color_t color);  Set main color of the element. ;  ; void SetMainColorPixel (Pixel_t pixel);  Convert pixel to Color_t and call SetMainColor(). ;  ; void SetMainColorPtr (Color_t *colptr);  ; void SetMainColorRGB (Float_t r, Float_t g, Float_t b);  Convert RGB values to Color_t and call SetMainColor. ;  ; void SetMainColorRGB (UChar_t r, UChar_t g, UChar_t b);  Convert RGB values to Color_t and call SetMainColor. ;  ; virtual void SetMainTransparency (Char_t t);  Set main-transparency. ;  ; void SetName (const std::string &name);  Set name of an element. ;  ; void SetNameTitle (const std::string &name, const std::string &title);  Set name and title of an element. ;  ; void SetPickable (Bool_t p);  ; void SetPickableRecursively (Bool_t p);  Set pickable state on the element and all its children. ;  ; virtual Bool_t SetRnrChildren (Bool_t rnr);  Set render state of this e",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html:13596,Modifiability,inherit,inherited,13596,"d SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void Stamp ();  ; void StampColorSelection ();  ; void StampElementAdded ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; Bool_t TestCSCBits (UChar_t f) const;  ; void VizDB_Apply (const std::string &tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const std::string &tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual Int_t WriteCoreJson (nlohmann::json &cj, Int_t rnr_offset);  Write core json. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from ROOT::Experimental::REveProjectable;  REveProjectable ();  Constructor. ;  ;  REveProjectable (const REveProjectable &);  Copy constructor. Does shallow copy. ;  ; virtual ~REveProjectable ();  Destructor. ;  ; virtual void AddProjected (REveProjected *p);  ; virtual void AddProjectedsToSet (std::set< REveElement * > &set);  Add the projected elements to the set, dyn-casting them to REveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; virtual void ClearProjectedList ();  ; virtual Bool_t HasProjecteds () const;  ; virtual TClass * ProjectedClass (const REveProjection *p) const =0;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main color of projecteds if their color is the same as old_color. ;  ; virtual void PropagateMainTransparency (Char_t t, Char_t old_t);  Set main transparency of projecteds if their transparency is the same as the old one. ;  ; virtual v",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html:14947,Modifiability,inherit,inherited,14947,"* > &set);  Add the projected elements to the set, dyn-casting them to REveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; virtual void ClearProjectedList ();  ; virtual Bool_t HasProjecteds () const;  ; virtual TClass * ProjectedClass (const REveProjection *p) const =0;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main color of projecteds if their color is the same as old_color. ;  ; virtual void PropagateMainTransparency (Char_t t, Char_t old_t);  Set main transparency of projecteds if their transparency is the same as the old one. ;  ; virtual void PropagateRenderState (Bool_t rnr_self, Bool_t rnr_children);  Set render state of projecteds. ;  ; virtual void PropagateVizParams (REveElement *el=nullptr);  Set visualization parameters of projecteds. ;  ; ProjList_t & RefProjecteds ();  ; virtual void RemoveProjected (REveProjected *p);  ;  Public Member Functions inherited from TAttMarker;  TAttMarker ();  TAttMarker default constructor. ;  ;  TAttMarker (Color_t color, Style_t style, Size_t msize);  TAttMarker normal constructor. ;  ; virtual ~TAttMarker ();  TAttMarker destructor. ;  ; void Copy (TAttMarker &attmarker) const;  Copy this marker attributes to a new TAttMarker. ;  ; virtual Color_t GetMarkerColor () const;  Return the marker color. ;  ; virtual Size_t GetMarkerSize () const;  Return the marker size. ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual TClass * IsA () const;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttribut",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html:16507,Modifiability,inherit,inherited,16507,". ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Protected Attributes; REvePointSet ** fBins {nullptr};  ; Double_t fBinWidth;  ; Double_t fCurMax;  ; Double_t fCurMin;  ; Int_t fDefPointSetCapacity;  ; Int_t fLastBin;  ; Double_t fMax;  ; Double_t fMin;  Index of the last filled REvePointSet. ;  ; Int_t fNBins;  ; std::string fQuantName;  ;  Protected Attributes inherited from ROOT::Experimental::REveElement; AuntList_t fAunts;  ; Bool_t fCanEditMainColor {kFALSE};  ; Bool_t fCanEditMainTrans {kFALSE};  ; Bool_t fCanEditMainTransparency {kFALSE};  ; UChar_t fChangeBits {0};  ; TClass * fChildClass {nullptr};  ; List_t fChildren;  ; REveCompound * fCompound {nullptr};  ; UChar_t fCSCBits {0};  ; Color_t fDefaultColor {kPink};  ; Int_t fDenyDestroy {0};  ; Bool_t fDestroyOnZeroRefCnt {kTRUE};  Deny-destroy count. ;  ; Char_t fDestructing {kNone};  ; Short_t fImpliedSelected {0};  ; Color_t * fMainColorPtr {nullptr};  ; std::unique_ptr< REveTrans > fMainTrans;  ; Char_t fMainTransparency {0};  ; REveElement * fMother {nullptr};  ; std::string fName;  ; Bool_t fPickable {false};  ; std::unique_ptr< REveRenderData > fRenderData;  Externally assigned and controlled user data. ;  ; Bool_t fRnrChildren {kTRUE};  ; Bool_t fRnrSelf {kTRUE};  ; REveScene * fScene {nullptr};  ; REveElement * fSelectionMaster {nullptr};  ; std::string fTitle;  ; void * fUserData {nullptr};  ; REveElement * fVizModel {nullptr};  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from ROOT::Experimental::REveProjectable; Pro",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html:17645,Modifiability,inherit,inherited,17645,"its {0};  ; TClass * fChildClass {nullptr};  ; List_t fChildren;  ; REveCompound * fCompound {nullptr};  ; UChar_t fCSCBits {0};  ; Color_t fDefaultColor {kPink};  ; Int_t fDenyDestroy {0};  ; Bool_t fDestroyOnZeroRefCnt {kTRUE};  Deny-destroy count. ;  ; Char_t fDestructing {kNone};  ; Short_t fImpliedSelected {0};  ; Color_t * fMainColorPtr {nullptr};  ; std::unique_ptr< REveTrans > fMainTrans;  ; Char_t fMainTransparency {0};  ; REveElement * fMother {nullptr};  ; std::string fName;  ; Bool_t fPickable {false};  ; std::unique_ptr< REveRenderData > fRenderData;  Externally assigned and controlled user data. ;  ; Bool_t fRnrChildren {kTRUE};  ; Bool_t fRnrSelf {kTRUE};  ; REveScene * fScene {nullptr};  ; REveElement * fSelectionMaster {nullptr};  ; std::string fTitle;  ; void * fUserData {nullptr};  ; REveElement * fVizModel {nullptr};  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from ROOT::Experimental::REveProjectable; ProjList_t fProjectedList;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Member Functions;  REvePointSetArray (const REvePointSetArray &)=delete;  ; REvePointSetArray & operator= (const REvePointSetArray &)=delete;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::REveElement; typedef std::list< REveAunt * > AuntList_t;  ; enum  EChangeBits { ;   kCBColorSelection = BIT(0); , kCBTransBBox = BIT(1); , kCBObjProps = BIT(2); , kCBVisibility = BIT(3); , ;   kCBElementAdded = BIT(4). };  ; typedef std::list< REveElement * > List_t;  ; typedef std::set< REveElement * > Set_t;  ;  Public Types inherited from ROOT::Experimental::REveProjectable; typedef std::list< REveProjected * > ProjList_t;  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html:17749,Modifiability,inherit,inherited,17749,"its {0};  ; TClass * fChildClass {nullptr};  ; List_t fChildren;  ; REveCompound * fCompound {nullptr};  ; UChar_t fCSCBits {0};  ; Color_t fDefaultColor {kPink};  ; Int_t fDenyDestroy {0};  ; Bool_t fDestroyOnZeroRefCnt {kTRUE};  Deny-destroy count. ;  ; Char_t fDestructing {kNone};  ; Short_t fImpliedSelected {0};  ; Color_t * fMainColorPtr {nullptr};  ; std::unique_ptr< REveTrans > fMainTrans;  ; Char_t fMainTransparency {0};  ; REveElement * fMother {nullptr};  ; std::string fName;  ; Bool_t fPickable {false};  ; std::unique_ptr< REveRenderData > fRenderData;  Externally assigned and controlled user data. ;  ; Bool_t fRnrChildren {kTRUE};  ; Bool_t fRnrSelf {kTRUE};  ; REveScene * fScene {nullptr};  ; REveElement * fSelectionMaster {nullptr};  ; std::string fTitle;  ; void * fUserData {nullptr};  ; REveElement * fVizModel {nullptr};  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from ROOT::Experimental::REveProjectable; ProjList_t fProjectedList;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Member Functions;  REvePointSetArray (const REvePointSetArray &)=delete;  ; REvePointSetArray & operator= (const REvePointSetArray &)=delete;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::REveElement; typedef std::list< REveAunt * > AuntList_t;  ; enum  EChangeBits { ;   kCBColorSelection = BIT(0); , kCBTransBBox = BIT(1); , kCBObjProps = BIT(2); , kCBVisibility = BIT(3); , ;   kCBElementAdded = BIT(4). };  ; typedef std::list< REveElement * > List_t;  ; typedef std::set< REveElement * > Set_t;  ;  Public Types inherited from ROOT::Experimental::REveProjectable; typedef std::list< REveProjected * > ProjList_t;  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html:18096,Modifiability,inherit,inherited,18096,"ame;  ; Bool_t fPickable {false};  ; std::unique_ptr< REveRenderData > fRenderData;  Externally assigned and controlled user data. ;  ; Bool_t fRnrChildren {kTRUE};  ; Bool_t fRnrSelf {kTRUE};  ; REveScene * fScene {nullptr};  ; REveElement * fSelectionMaster {nullptr};  ; std::string fTitle;  ; void * fUserData {nullptr};  ; REveElement * fVizModel {nullptr};  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from ROOT::Experimental::REveProjectable; ProjList_t fProjectedList;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Member Functions;  REvePointSetArray (const REvePointSetArray &)=delete;  ; REvePointSetArray & operator= (const REvePointSetArray &)=delete;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::REveElement; typedef std::list< REveAunt * > AuntList_t;  ; enum  EChangeBits { ;   kCBColorSelection = BIT(0); , kCBTransBBox = BIT(1); , kCBObjProps = BIT(2); , kCBVisibility = BIT(3); , ;   kCBElementAdded = BIT(4). };  ; typedef std::list< REveElement * > List_t;  ; typedef std::set< REveElement * > Set_t;  ;  Public Types inherited from ROOT::Experimental::REveProjectable; typedef std::list< REveProjected * > ProjList_t;  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Protected Types inherited from ROOT::Experimental::REveElement; enum  ECompoundSelectionColorBits { ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html:18460,Modifiability,inherit,inherited,18460,"t;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Member Functions;  REvePointSetArray (const REvePointSetArray &)=delete;  ; REvePointSetArray & operator= (const REvePointSetArray &)=delete;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::REveElement; typedef std::list< REveAunt * > AuntList_t;  ; enum  EChangeBits { ;   kCBColorSelection = BIT(0); , kCBTransBBox = BIT(1); , kCBObjProps = BIT(2); , kCBVisibility = BIT(3); , ;   kCBElementAdded = BIT(4). };  ; typedef std::list< REveElement * > List_t;  ; typedef std::set< REveElement * > Set_t;  ;  Public Types inherited from ROOT::Experimental::REveProjectable; typedef std::list< REveProjected * > ProjList_t;  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Protected Types inherited from ROOT::Experimental::REveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = BIT(0); , kCSCBTakeMotherAsMaster = BIT(1); , kCSCBApplyMainColorToAllChildren = BIT(2); , kCSCBApplyMainColorToMatchingChildren = BIT(3); , ;   kCSCBApplyMainTransparencyToAllChildren = BIT(4); , kCSCBApplyMainTransparencyToMatchingChildren = BIT(5). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Member Functions inherited from ROOT::Experimental::REveElement; virtual void AnnihilateRecursively ();  Protected member function called from REveElement::Ann",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html:18596,Modifiability,inherit,inherited,18596,"t;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Member Functions;  REvePointSetArray (const REvePointSetArray &)=delete;  ; REvePointSetArray & operator= (const REvePointSetArray &)=delete;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::REveElement; typedef std::list< REveAunt * > AuntList_t;  ; enum  EChangeBits { ;   kCBColorSelection = BIT(0); , kCBTransBBox = BIT(1); , kCBObjProps = BIT(2); , kCBVisibility = BIT(3); , ;   kCBElementAdded = BIT(4). };  ; typedef std::list< REveElement * > List_t;  ; typedef std::set< REveElement * > Set_t;  ;  Public Types inherited from ROOT::Experimental::REveProjectable; typedef std::list< REveProjected * > ProjList_t;  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Protected Types inherited from ROOT::Experimental::REveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = BIT(0); , kCSCBTakeMotherAsMaster = BIT(1); , kCSCBApplyMainColorToAllChildren = BIT(2); , kCSCBApplyMainColorToMatchingChildren = BIT(3); , ;   kCSCBApplyMainTransparencyToAllChildren = BIT(4); , kCSCBApplyMainTransparencyToMatchingChildren = BIT(5). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Member Functions inherited from ROOT::Experimental::REveElement; virtual void AnnihilateRecursively ();  Protected member function called from REveElement::Ann",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html:19116,Modifiability,inherit,inherited,19116,"); , kCBVisibility = BIT(3); , ;   kCBElementAdded = BIT(4). };  ; typedef std::list< REveElement * > List_t;  ; typedef std::set< REveElement * > Set_t;  ;  Public Types inherited from ROOT::Experimental::REveProjectable; typedef std::list< REveProjected * > ProjList_t;  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Protected Types inherited from ROOT::Experimental::REveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = BIT(0); , kCSCBTakeMotherAsMaster = BIT(1); , kCSCBApplyMainColorToAllChildren = BIT(2); , kCSCBApplyMainColorToMatchingChildren = BIT(3); , ;   kCSCBApplyMainTransparencyToAllChildren = BIT(4); , kCSCBApplyMainTransparencyToMatchingChildren = BIT(5). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Member Functions inherited from ROOT::Experimental::REveElement; virtual void AnnihilateRecursively ();  Protected member function called from REveElement::Annihilate(). ;  ; void assign_element_id_recurisvely ();  ; void assign_scene_recursively (REveScene *s);  ; ElementId_t get_mother_id () const;  ; ElementId_t get_scene_id () const;  ; virtual void PreDeleteElement ();  Vertex / normal / triangle index information for rendering. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Static Protected Member Functions inherited from ROOT::Experimental::REveElement; static const std::string & ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  . #include <ROOT/REvePointSet.hxx>. In",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html:19579,Modifiability,inherit,inherited,19579,"om TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Protected Types inherited from ROOT::Experimental::REveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = BIT(0); , kCSCBTakeMotherAsMaster = BIT(1); , kCSCBApplyMainColorToAllChildren = BIT(2); , kCSCBApplyMainColorToMatchingChildren = BIT(3); , ;   kCSCBApplyMainTransparencyToAllChildren = BIT(4); , kCSCBApplyMainTransparencyToMatchingChildren = BIT(5). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Member Functions inherited from ROOT::Experimental::REveElement; virtual void AnnihilateRecursively ();  Protected member function called from REveElement::Annihilate(). ;  ; void assign_element_id_recurisvely ();  ; void assign_scene_recursively (REveScene *s);  ; ElementId_t get_mother_id () const;  ; ElementId_t get_scene_id () const;  ; virtual void PreDeleteElement ();  Vertex / normal / triangle index information for rendering. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Static Protected Member Functions inherited from ROOT::Experimental::REveElement; static const std::string & ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  . #include <ROOT/REvePointSet.hxx>. Inheritance diagram for ROOT::Experimental::REvePointSetArray:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ REvePointSetArray() [1/2]. ROOT::Experimental::REvePointSetArray::REvePointSetArray ; (; const REvePointSetArray & ; ).",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html:20107,Modifiability,inherit,inherited,20107,"lement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = BIT(0); , kCSCBTakeMotherAsMaster = BIT(1); , kCSCBApplyMainColorToAllChildren = BIT(2); , kCSCBApplyMainColorToMatchingChildren = BIT(3); , ;   kCSCBApplyMainTransparencyToAllChildren = BIT(4); , kCSCBApplyMainTransparencyToMatchingChildren = BIT(5). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Member Functions inherited from ROOT::Experimental::REveElement; virtual void AnnihilateRecursively ();  Protected member function called from REveElement::Annihilate(). ;  ; void assign_element_id_recurisvely ();  ; void assign_scene_recursively (REveScene *s);  ; ElementId_t get_mother_id () const;  ; ElementId_t get_scene_id () const;  ; virtual void PreDeleteElement ();  Vertex / normal / triangle index information for rendering. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Static Protected Member Functions inherited from ROOT::Experimental::REveElement; static const std::string & ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  . #include <ROOT/REvePointSet.hxx>. Inheritance diagram for ROOT::Experimental::REvePointSetArray:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ REvePointSetArray() [1/2]. ROOT::Experimental::REvePointSetArray::REvePointSetArray ; (; const REvePointSetArray & ; ). privatedelete . ◆ REvePointSetArray() [2/2]. REvePointSetArray::REvePointSetArray ; (; const std::string & ; name = ""REvePointSetArray"", . const std::string & ; title = """" . ). Constructor. ; Definition at line 307 of file REvePointSet.cxx. ◆ ~REvePointSetArray(). REvePointSetArray::~REvePointSetArray ; (; ). override . Destructor: deletes the fBins array. ; Actual removal of elements done by REveElement. ; Definition at line 323 of file REvePointSet.cxx. Member Function Documentation. ◆ CloseBins(). void REvePointSetArray::CloseBins ; (; ). ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:6638,Availability,error,error,6638,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:6727,Availability,error,error,6727,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:6882,Availability,error,error,6882,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:7179,Availability,error,error,7179,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of thi",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:11572,Availability,error,error,11572," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSelectorDraw; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Ve",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:15733,Availability,avail,available,15733,"d histogram ;  ; TTreeFormula * fSelect;  Pointer to selection formula. ;  ; Long64_t fSelectedRows;  Number of selected entries. ;  ; bool fSelectMultiple;  True if selection has a variable index. ;  ; TTree * fTree;  Pointer to current Tree. ;  ; TObject * fTreeElist;  Pointer to Tree Event list. ;  ; TEntryListArray * fTreeElistArray;  ! Pointer to Tree Event list array ;  ; Double_t ** fVal;  ![fSelectedRows][fDimension] Local buffer for the variables ;  ; Int_t fValSize;  ; TTreeFormula ** fVar;  ![fDimension] Array of pointers to variables formula ;  ; bool * fVarMultiple;  ![fDimension] True if fVar[i] has a variable index ;  ; Double_t * fVmax;  ![fDimension] Maxima of varexp columns ;  ; Double_t * fVmin;  ![fDimension] Minima of varexp columns ;  ; Double_t * fW;  ![fSelectedRows]Local buffer for weights ;  ; Double_t fWeight;  Tree weight (see TTree::SetWeight) ;  ;  Protected Attributes inherited from TSelector; EAbort fAbort;  Abort status. ;  ; TList * fInput;  List of objects available during processing. ;  ; TObject * fObject;  ! Current object if processing object (vs. TTree) ;  ; TString fOption;  Option given to TTree::Process. ;  ; TSelectorList * fOutput;  ! List of objects created during processing ;  ; Long64_t fStatus;  Selector status. ;  . Private Member Functions;  REveSelectorToEventList (const REveSelectorToEventList &)=delete;  ; REveSelectorToEventList & operator= (const REveSelectorToEventList &)=delete;  . Additional Inherited Members;  Public Types inherited from TSelector; enum  EAbort { kContinue; , kAbortProcess; , kAbortFile; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete =",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:17525,Availability,avail,available,17525,"08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TSelectorDraw; enum  EStatusBits { kWarn = (1ULL << ( 12 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TSelectorDraw; virtual void ClearFormula ();  Delete internal buffers. ;  ; virtual bool CompileVariables (const char *varexp="""", const char *selection="""");  Compile input variables and selection expression. ;  ; virtual void InitArrays (Int_t newsize);  Initialization of the primitive type arrays if the new size is bigger than the available space. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <ROOT/REveTreeTools.hxx>. Inheritance diagram for ROOT::Experimental::REveSelectorToEventList:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ REveSelectorToEventList() [1/2]. ROOT::Experimental::REveSelectorToEventList::REveSelectorToEventList ; (; const REveSelectorToEventList & ; ). privatedelete . ◆ REveSelectorToEventList() [2/2]. REveSelectorToEventList::REveSelectorToEventList ; (; TEventList * ; evl, . const char * ; sel . ). Constructor. ; Definition at line 33 of file REveTreeTools.cxx. ◆ ~REveSelectorToEventList(). ROOT::Experimental::REveSelectorToEventList::~REveSelectorToEventList ; (; ). in",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:6644,Integrability,message,message,6644,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:7185,Integrability,message,message,7185,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of thi",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:8345,Integrability,message,message,8345,"ect *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:11578,Integrability,message,message,11578," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSelectorDraw; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Ve",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:11951,Integrability,message,message,11951," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSelectorDraw; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSelector; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TSelector * GetSelector (const char *filename);  The code in filename is loaded (inter",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:976,Modifiability,inherit,inherited,976,". ROOT: ROOT::Experimental::REveSelectorToEventList Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; ROOT::Experimental::REveSelectorToEventList Class Reference. ; REveSelectorToEventList TSelector that stores entry numbers of matching TTree entries into an event-list. ; Definition at line 26 of file REveTreeTools.hxx. Public Member Functions;  REveSelectorToEventList (TEventList *evl, const char *sel);  Constructor. ;  ;  ~REveSelectorToEventList () override;  ; TClass * IsA () const override;  ; Bool_t Process (Long64_t entry) override;  Process entry. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t Version () const override;  ;  Public Member Functions inherited from TSelectorDraw;  TSelectorDraw ();  Default selector constructor. ;  ;  ~TSelectorDraw () override;  Selector destructor. ;  ; void Begin (TTree *tree) override;  Called every time a loop on the tree(s) starts. ;  ; virtual Int_t GetAction () const;  ; virtual bool GetCleanElist () const;  ; virtual Int_t GetDimension () const;  ; virtual Long64_t GetDrawFlag () const;  ; Int_t GetMultiplicity () const;  ; virtual Int_t GetNfill () const;  ; TObject * GetObject () const;  ; TH1 * GetOldHistogram () const;  ; TTreeFormula * GetSelect () const;  ; virtual Long64_t GetSelectedRows () const;  ; TTree * GetTree () const;  ; virtual Double_t * GetV1 () const;  See TSelectorDraw::GetVal. ;  ; virtual Double_t * GetV2 () const;  See TSelectorDraw::GetVal. ;  ; virtual Double_t * GetV3 () const;  See TSelectorDraw::GetVal. ;  ; virtual Double_t * GetV4 () const;  See TSelectorDraw::GetVal. ;  ; virtual Double_t * GetVal (Int_t i) const;  Return the last values corresponding to the i-th component of the fo",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:3258,Modifiability,variab,variable,3258,"ated). ;  ; TTreeFormula * GetVar1 () const;  See TSelectorDraw::GetVar. ;  ; TTreeFormula * GetVar2 () const;  See TSelectorDraw::GetVar. ;  ; TTreeFormula * GetVar3 () const;  See TSelectorDraw::GetVar. ;  ; TTreeFormula * GetVar4 () const;  See TSelectorDraw::GetVar. ;  ; virtual Double_t * GetW () const;  ; TClass * IsA () const override;  ; bool Notify () override;  This function is called at the first entry of a new tree in a chain. ;  ; bool Process (Long64_t) override;  The Process() function is called for each entry in the tree (or possibly keyed object in the case of PROOF) to be processed. ;  ; void ProcessFill (Long64_t entry) override;  Called in the entry loop for all entries accepted by Select. ;  ; virtual void ProcessFillMultiple (Long64_t entry);  Called in the entry loop for all entries accepted by Select. ;  ; virtual void ProcessFillObject (Long64_t entry);  Called in the entry loop for all entries accepted by Select. ;  ; virtual void SetEstimate (Long64_t n);  Set number of entries to estimate variable limits. ;  ; virtual UInt_t SplitNames (const TString &varexp, std::vector< TString > &names);  Build Index array for names in varexp. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TakeAction ();  Execute action for object obj fNfill times. ;  ; virtual void TakeEstimate ();  Estimate limits for 1-D, 2-D or 3-D objects. ;  ; void Terminate () override;  Called at the end of a loop on a TTree. ;  ;  Public Member Functions inherited from TSelector;  TSelector ();  Default selector ctor. ;  ;  ~TSelector () override;  Selector destructor. ;  ; virtual void Abort (const char *why, EAbort what=kAbortProcess);  Abort processing. ;  ; virtual EAbort GetAbort () const;  ; virtual Int_t GetEntry (Long64_t, Int_t=0);  ; virtual TList * GetInputList () const;  ; const char * GetOption () const override;  ; virtual TList * GetOutputList () cons",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:3807,Modifiability,inherit,inherited,3807,"processed. ;  ; void ProcessFill (Long64_t entry) override;  Called in the entry loop for all entries accepted by Select. ;  ; virtual void ProcessFillMultiple (Long64_t entry);  Called in the entry loop for all entries accepted by Select. ;  ; virtual void ProcessFillObject (Long64_t entry);  Called in the entry loop for all entries accepted by Select. ;  ; virtual void SetEstimate (Long64_t n);  Set number of entries to estimate variable limits. ;  ; virtual UInt_t SplitNames (const TString &varexp, std::vector< TString > &names);  Build Index array for names in varexp. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TakeAction ();  Execute action for object obj fNfill times. ;  ; virtual void TakeEstimate ();  Estimate limits for 1-D, 2-D or 3-D objects. ;  ; void Terminate () override;  Called at the end of a loop on a TTree. ;  ;  Public Member Functions inherited from TSelector;  TSelector ();  Default selector ctor. ;  ;  ~TSelector () override;  Selector destructor. ;  ; virtual void Abort (const char *why, EAbort what=kAbortProcess);  Abort processing. ;  ; virtual EAbort GetAbort () const;  ; virtual Int_t GetEntry (Long64_t, Int_t=0);  ; virtual TList * GetInputList () const;  ; const char * GetOption () const override;  ; virtual TList * GetOutputList () const;  ; virtual Long64_t GetStatus () const;  ; virtual void ImportOutput (TList *output);  Imports the content of 'output' in the internal output list. ;  ; virtual void Init (TTree *);  ; virtual bool ProcessCut (Long64_t);  This method is called before processing entry. ;  ; virtual void ResetAbort ();  ; virtual void SetInputList (TList *input);  ; virtual void SetObject (TObject *obj);  ; virtual void SetOption (const char *option);  ; virtual void SetStatus (Long64_t status);  ; virtual void SlaveBegin (TTree *);  ; virtual void SlaveTerminate ();  ; void StreamerNVirtual (TBuffer &Class",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:4877,Modifiability,inherit,inherited,4877,"minate () override;  Called at the end of a loop on a TTree. ;  ;  Public Member Functions inherited from TSelector;  TSelector ();  Default selector ctor. ;  ;  ~TSelector () override;  Selector destructor. ;  ; virtual void Abort (const char *why, EAbort what=kAbortProcess);  Abort processing. ;  ; virtual EAbort GetAbort () const;  ; virtual Int_t GetEntry (Long64_t, Int_t=0);  ; virtual TList * GetInputList () const;  ; const char * GetOption () const override;  ; virtual TList * GetOutputList () const;  ; virtual Long64_t GetStatus () const;  ; virtual void ImportOutput (TList *output);  Imports the content of 'output' in the internal output list. ;  ; virtual void Init (TTree *);  ; virtual bool ProcessCut (Long64_t);  This method is called before processing entry. ;  ; virtual void ResetAbort ();  ; virtual void SetInputList (TList *input);  ; virtual void SetObject (TObject *obj);  ; virtual void SetOption (const char *option);  ; virtual void SetStatus (Long64_t status);  ; virtual void SlaveBegin (TTree *);  ; virtual void SlaveTerminate ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * C",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:6274,Modifiability,inherit,inheritance,6274,"pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:8443,Modifiability,inherit,inherits,8443,"t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:8560,Modifiability,inherit,inherits,8560,"GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:12452,Modifiability,inherit,inherited,12452,";  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSelectorDraw; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSelector; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TSelector * GetSelector (const char *filename);  The code in filename is loaded (interpreted or compiled, see below), filename must contain a valid class implementation derived from TSelector. ;  ; static bool IsStandardDraw (const char *selec);  Find out if this is a standard selection used for Draw actions (either TSelectorDraw, TProofDraw or deriving from them). ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:12669,Modifiability,inherit,inherited,12669,";  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSelectorDraw; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSelector; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TSelector * GetSelector (const char *filename);  The code in filename is loaded (interpreted or compiled, see below), filename must contain a valid class implementation derived from TSelector. ;  ; static bool IsStandardDraw (const char *selec);  Find out if this is a standard selection used for Draw actions (either TSelectorDraw, TProofDraw or deriving from them). ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:13262,Modifiability,inherit,inherited,13262,"s_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSelectorDraw; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSelector; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TSelector * GetSelector (const char *filename);  The code in filename is loaded (interpreted or compiled, see below), filename must contain a valid class implementation derived from TSelector. ;  ; static bool IsStandardDraw (const char *selec);  Find out if this is a standard selection used for Draw actions (either TSelectorDraw, TProofDraw or deriving from them). ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TEventList * fEvList {nullptr};  ; TList fInputList;  ;  Protected Attributes inherited from TSelectorDraw; Int_t fAction;  ! Action type ;  ; bool fCleanElist;  True if original Tree elist must be saved. ;  ; Long64_t fCurrentSubEntry;  Current subentry when fSelectMultiple is true. Used to fill TEntryListArray. ;  ; Int_t fDimension;  Dimension of the current expression. ;  ; Long64_t fDraw;  ! Last entry loop number when object was drawn ;  ; Int_t fForceRead;  Force Read flag. ;  ; TTreeFormulaManager * fManager;  Pointer to the formula manager. ;  ; Int_t fMultiplicity;  Indicator o",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:13848,Modifiability,inherit,inherited,13848,"lector * GetSelector (const char *filename);  The code in filename is loaded (interpreted or compiled, see below), filename must contain a valid class implementation derived from TSelector. ;  ; static bool IsStandardDraw (const char *selec);  Find out if this is a standard selection used for Draw actions (either TSelectorDraw, TProofDraw or deriving from them). ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TEventList * fEvList {nullptr};  ; TList fInputList;  ;  Protected Attributes inherited from TSelectorDraw; Int_t fAction;  ! Action type ;  ; bool fCleanElist;  True if original Tree elist must be saved. ;  ; Long64_t fCurrentSubEntry;  Current subentry when fSelectMultiple is true. Used to fill TEntryListArray. ;  ; Int_t fDimension;  Dimension of the current expression. ;  ; Long64_t fDraw;  ! Last entry loop number when object was drawn ;  ; Int_t fForceRead;  Force Read flag. ;  ; TTreeFormulaManager * fManager;  Pointer to the formula manager. ;  ; Int_t fMultiplicity;  Indicator of the variability of the size of entries. ;  ; Int_t * fNbins;  ![fDimension] Number of bins per dimension ;  ; Int_t fNfill;  ! Total number of histogram fills ;  ; bool fObjEval;  True if fVar1 returns an object (or pointer to). ;  ; Long64_t fOldEstimate;  Value of Tree fEstimate when selector is called. ;  ; TH1 * fOldHistogram;  ! Pointer to previously used histogram ;  ; TTreeFormula * fSelect;  Pointer to selection formula. ;  ; Long64_t fSelectedRows;  Number of selected entries. ;  ;",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:14370,Modifiability,variab,variability,14370,expr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TEventList * fEvList {nullptr};  ; TList fInputList;  ;  Protected Attributes inherited from TSelectorDraw; Int_t fAction;  ! Action type ;  ; bool fCleanElist;  True if original Tree elist must be saved. ;  ; Long64_t fCurrentSubEntry;  Current subentry when fSelectMultiple is true. Used to fill TEntryListArray. ;  ; Int_t fDimension;  Dimension of the current expression. ;  ; Long64_t fDraw;  ! Last entry loop number when object was drawn ;  ; Int_t fForceRead;  Force Read flag. ;  ; TTreeFormulaManager * fManager;  Pointer to the formula manager. ;  ; Int_t fMultiplicity;  Indicator of the variability of the size of entries. ;  ; Int_t * fNbins;  ![fDimension] Number of bins per dimension ;  ; Int_t fNfill;  ! Total number of histogram fills ;  ; bool fObjEval;  True if fVar1 returns an object (or pointer to). ;  ; Long64_t fOldEstimate;  Value of Tree fEstimate when selector is called. ;  ; TH1 * fOldHistogram;  ! Pointer to previously used histogram ;  ; TTreeFormula * fSelect;  Pointer to selection formula. ;  ; Long64_t fSelectedRows;  Number of selected entries. ;  ; bool fSelectMultiple;  True if selection has a variable index. ;  ; TTree * fTree;  Pointer to current Tree. ;  ; TObject * fTreeElist;  Pointer to Tree Event list. ;  ; TEntryListArray * fTreeElistArray;  ! Pointer to Tree Event list array ;  ; Double_t ** fVal;  ![fSelectedRows][fDimension] Local buffer for the variables ;  ; Int_t fValSize;  ; TTreeFormula ** fVar;  ![fDimension] Array of pointers to variables formula ;  ; bool * fVarMultiple;  ![fDimension] True if fVar[i] has a variable index ,MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:14909,Modifiability,variab,variable,14909,n;  ! Action type ;  ; bool fCleanElist;  True if original Tree elist must be saved. ;  ; Long64_t fCurrentSubEntry;  Current subentry when fSelectMultiple is true. Used to fill TEntryListArray. ;  ; Int_t fDimension;  Dimension of the current expression. ;  ; Long64_t fDraw;  ! Last entry loop number when object was drawn ;  ; Int_t fForceRead;  Force Read flag. ;  ; TTreeFormulaManager * fManager;  Pointer to the formula manager. ;  ; Int_t fMultiplicity;  Indicator of the variability of the size of entries. ;  ; Int_t * fNbins;  ![fDimension] Number of bins per dimension ;  ; Int_t fNfill;  ! Total number of histogram fills ;  ; bool fObjEval;  True if fVar1 returns an object (or pointer to). ;  ; Long64_t fOldEstimate;  Value of Tree fEstimate when selector is called. ;  ; TH1 * fOldHistogram;  ! Pointer to previously used histogram ;  ; TTreeFormula * fSelect;  Pointer to selection formula. ;  ; Long64_t fSelectedRows;  Number of selected entries. ;  ; bool fSelectMultiple;  True if selection has a variable index. ;  ; TTree * fTree;  Pointer to current Tree. ;  ; TObject * fTreeElist;  Pointer to Tree Event list. ;  ; TEntryListArray * fTreeElistArray;  ! Pointer to Tree Event list array ;  ; Double_t ** fVal;  ![fSelectedRows][fDimension] Local buffer for the variables ;  ; Int_t fValSize;  ; TTreeFormula ** fVar;  ![fDimension] Array of pointers to variables formula ;  ; bool * fVarMultiple;  ![fDimension] True if fVar[i] has a variable index ;  ; Double_t * fVmax;  ![fDimension] Maxima of varexp columns ;  ; Double_t * fVmin;  ![fDimension] Minima of varexp columns ;  ; Double_t * fW;  ![fSelectedRows]Local buffer for weights ;  ; Double_t fWeight;  Tree weight (see TTree::SetWeight) ;  ;  Protected Attributes inherited from TSelector; EAbort fAbort;  Abort status. ;  ; TList * fInput;  List of objects available during processing. ;  ; TObject * fObject;  ! Current object if processing object (vs. TTree) ;  ; TString fOption;  Option given to TTree::Process,MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:15177,Modifiability,variab,variables,15177,"or of the variability of the size of entries. ;  ; Int_t * fNbins;  ![fDimension] Number of bins per dimension ;  ; Int_t fNfill;  ! Total number of histogram fills ;  ; bool fObjEval;  True if fVar1 returns an object (or pointer to). ;  ; Long64_t fOldEstimate;  Value of Tree fEstimate when selector is called. ;  ; TH1 * fOldHistogram;  ! Pointer to previously used histogram ;  ; TTreeFormula * fSelect;  Pointer to selection formula. ;  ; Long64_t fSelectedRows;  Number of selected entries. ;  ; bool fSelectMultiple;  True if selection has a variable index. ;  ; TTree * fTree;  Pointer to current Tree. ;  ; TObject * fTreeElist;  Pointer to Tree Event list. ;  ; TEntryListArray * fTreeElistArray;  ! Pointer to Tree Event list array ;  ; Double_t ** fVal;  ![fSelectedRows][fDimension] Local buffer for the variables ;  ; Int_t fValSize;  ; TTreeFormula ** fVar;  ![fDimension] Array of pointers to variables formula ;  ; bool * fVarMultiple;  ![fDimension] True if fVar[i] has a variable index ;  ; Double_t * fVmax;  ![fDimension] Maxima of varexp columns ;  ; Double_t * fVmin;  ![fDimension] Minima of varexp columns ;  ; Double_t * fW;  ![fSelectedRows]Local buffer for weights ;  ; Double_t fWeight;  Tree weight (see TTree::SetWeight) ;  ;  Protected Attributes inherited from TSelector; EAbort fAbort;  Abort status. ;  ; TList * fInput;  List of objects available during processing. ;  ; TObject * fObject;  ! Current object if processing object (vs. TTree) ;  ; TString fOption;  Option given to TTree::Process. ;  ; TSelectorList * fOutput;  ! List of objects created during processing ;  ; Long64_t fStatus;  Selector status. ;  . Private Member Functions;  REveSelectorToEventList (const REveSelectorToEventList &)=delete;  ; REveSelectorToEventList & operator= (const REveSelectorToEventList &)=delete;  . Additional Inherited Members;  Public Types inherited from TSelector; enum  EAbort { kContinue; , kAbortProcess; , kAbortFile; };  ;  Public Types inherited from TObject;",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:15269,Modifiability,variab,variables,15269,"or of the variability of the size of entries. ;  ; Int_t * fNbins;  ![fDimension] Number of bins per dimension ;  ; Int_t fNfill;  ! Total number of histogram fills ;  ; bool fObjEval;  True if fVar1 returns an object (or pointer to). ;  ; Long64_t fOldEstimate;  Value of Tree fEstimate when selector is called. ;  ; TH1 * fOldHistogram;  ! Pointer to previously used histogram ;  ; TTreeFormula * fSelect;  Pointer to selection formula. ;  ; Long64_t fSelectedRows;  Number of selected entries. ;  ; bool fSelectMultiple;  True if selection has a variable index. ;  ; TTree * fTree;  Pointer to current Tree. ;  ; TObject * fTreeElist;  Pointer to Tree Event list. ;  ; TEntryListArray * fTreeElistArray;  ! Pointer to Tree Event list array ;  ; Double_t ** fVal;  ![fSelectedRows][fDimension] Local buffer for the variables ;  ; Int_t fValSize;  ; TTreeFormula ** fVar;  ![fDimension] Array of pointers to variables formula ;  ; bool * fVarMultiple;  ![fDimension] True if fVar[i] has a variable index ;  ; Double_t * fVmax;  ![fDimension] Maxima of varexp columns ;  ; Double_t * fVmin;  ![fDimension] Minima of varexp columns ;  ; Double_t * fW;  ![fSelectedRows]Local buffer for weights ;  ; Double_t fWeight;  Tree weight (see TTree::SetWeight) ;  ;  Protected Attributes inherited from TSelector; EAbort fAbort;  Abort status. ;  ; TList * fInput;  List of objects available during processing. ;  ; TObject * fObject;  ! Current object if processing object (vs. TTree) ;  ; TString fOption;  Option given to TTree::Process. ;  ; TSelectorList * fOutput;  ! List of objects created during processing ;  ; Long64_t fStatus;  Selector status. ;  . Private Member Functions;  REveSelectorToEventList (const REveSelectorToEventList &)=delete;  ; REveSelectorToEventList & operator= (const REveSelectorToEventList &)=delete;  . Additional Inherited Members;  Public Types inherited from TSelector; enum  EAbort { kContinue; , kAbortProcess; , kAbortFile; };  ;  Public Types inherited from TObject;",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:15350,Modifiability,variab,variable,15350,"or of the variability of the size of entries. ;  ; Int_t * fNbins;  ![fDimension] Number of bins per dimension ;  ; Int_t fNfill;  ! Total number of histogram fills ;  ; bool fObjEval;  True if fVar1 returns an object (or pointer to). ;  ; Long64_t fOldEstimate;  Value of Tree fEstimate when selector is called. ;  ; TH1 * fOldHistogram;  ! Pointer to previously used histogram ;  ; TTreeFormula * fSelect;  Pointer to selection formula. ;  ; Long64_t fSelectedRows;  Number of selected entries. ;  ; bool fSelectMultiple;  True if selection has a variable index. ;  ; TTree * fTree;  Pointer to current Tree. ;  ; TObject * fTreeElist;  Pointer to Tree Event list. ;  ; TEntryListArray * fTreeElistArray;  ! Pointer to Tree Event list array ;  ; Double_t ** fVal;  ![fSelectedRows][fDimension] Local buffer for the variables ;  ; Int_t fValSize;  ; TTreeFormula ** fVar;  ![fDimension] Array of pointers to variables formula ;  ; bool * fVarMultiple;  ![fDimension] True if fVar[i] has a variable index ;  ; Double_t * fVmax;  ![fDimension] Maxima of varexp columns ;  ; Double_t * fVmin;  ![fDimension] Minima of varexp columns ;  ; Double_t * fW;  ![fSelectedRows]Local buffer for weights ;  ; Double_t fWeight;  Tree weight (see TTree::SetWeight) ;  ;  Protected Attributes inherited from TSelector; EAbort fAbort;  Abort status. ;  ; TList * fInput;  List of objects available during processing. ;  ; TObject * fObject;  ! Current object if processing object (vs. TTree) ;  ; TString fOption;  Option given to TTree::Process. ;  ; TSelectorList * fOutput;  ! List of objects created during processing ;  ; Long64_t fStatus;  Selector status. ;  . Private Member Functions;  REveSelectorToEventList (const REveSelectorToEventList &)=delete;  ; REveSelectorToEventList & operator= (const REveSelectorToEventList &)=delete;  . Additional Inherited Members;  Public Types inherited from TSelector; enum  EAbort { kContinue; , kAbortProcess; , kAbortFile; };  ;  Public Types inherited from TObject;",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:15639,Modifiability,inherit,inherited,15639,"or of the variability of the size of entries. ;  ; Int_t * fNbins;  ![fDimension] Number of bins per dimension ;  ; Int_t fNfill;  ! Total number of histogram fills ;  ; bool fObjEval;  True if fVar1 returns an object (or pointer to). ;  ; Long64_t fOldEstimate;  Value of Tree fEstimate when selector is called. ;  ; TH1 * fOldHistogram;  ! Pointer to previously used histogram ;  ; TTreeFormula * fSelect;  Pointer to selection formula. ;  ; Long64_t fSelectedRows;  Number of selected entries. ;  ; bool fSelectMultiple;  True if selection has a variable index. ;  ; TTree * fTree;  Pointer to current Tree. ;  ; TObject * fTreeElist;  Pointer to Tree Event list. ;  ; TEntryListArray * fTreeElistArray;  ! Pointer to Tree Event list array ;  ; Double_t ** fVal;  ![fSelectedRows][fDimension] Local buffer for the variables ;  ; Int_t fValSize;  ; TTreeFormula ** fVar;  ![fDimension] Array of pointers to variables formula ;  ; bool * fVarMultiple;  ![fDimension] True if fVar[i] has a variable index ;  ; Double_t * fVmax;  ![fDimension] Maxima of varexp columns ;  ; Double_t * fVmin;  ![fDimension] Minima of varexp columns ;  ; Double_t * fW;  ![fSelectedRows]Local buffer for weights ;  ; Double_t fWeight;  Tree weight (see TTree::SetWeight) ;  ;  Protected Attributes inherited from TSelector; EAbort fAbort;  Abort status. ;  ; TList * fInput;  List of objects available during processing. ;  ; TObject * fObject;  ! Current object if processing object (vs. TTree) ;  ; TString fOption;  Option given to TTree::Process. ;  ; TSelectorList * fOutput;  ! List of objects created during processing ;  ; Long64_t fStatus;  Selector status. ;  . Private Member Functions;  REveSelectorToEventList (const REveSelectorToEventList &)=delete;  ; REveSelectorToEventList & operator= (const REveSelectorToEventList &)=delete;  . Additional Inherited Members;  Public Types inherited from TSelector; enum  EAbort { kContinue; , kAbortProcess; , kAbortFile; };  ;  Public Types inherited from TObject;",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:16234,Modifiability,inherit,inherited,16234,"a variable index ;  ; Double_t * fVmax;  ![fDimension] Maxima of varexp columns ;  ; Double_t * fVmin;  ![fDimension] Minima of varexp columns ;  ; Double_t * fW;  ![fSelectedRows]Local buffer for weights ;  ; Double_t fWeight;  Tree weight (see TTree::SetWeight) ;  ;  Protected Attributes inherited from TSelector; EAbort fAbort;  Abort status. ;  ; TList * fInput;  List of objects available during processing. ;  ; TObject * fObject;  ! Current object if processing object (vs. TTree) ;  ; TString fOption;  Option given to TTree::Process. ;  ; TSelectorList * fOutput;  ! List of objects created during processing ;  ; Long64_t fStatus;  Selector status. ;  . Private Member Functions;  REveSelectorToEventList (const REveSelectorToEventList &)=delete;  ; REveSelectorToEventList & operator= (const REveSelectorToEventList &)=delete;  . Additional Inherited Members;  Public Types inherited from TSelector; enum  EAbort { kContinue; , kAbortProcess; , kAbortFile; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TSelectorDraw; enum  EStatusBits { kWarn = (1ULL << ( 12 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TSelectorDraw; virtual void ClearFormula ();  Delete internal buffers. ;  ; virtual bool CompileVariables (const char *varexp="""", const char *selection=""""); ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:16337,Modifiability,inherit,inherited,16337,"a variable index ;  ; Double_t * fVmax;  ![fDimension] Maxima of varexp columns ;  ; Double_t * fVmin;  ![fDimension] Minima of varexp columns ;  ; Double_t * fW;  ![fSelectedRows]Local buffer for weights ;  ; Double_t fWeight;  Tree weight (see TTree::SetWeight) ;  ;  Protected Attributes inherited from TSelector; EAbort fAbort;  Abort status. ;  ; TList * fInput;  List of objects available during processing. ;  ; TObject * fObject;  ! Current object if processing object (vs. TTree) ;  ; TString fOption;  Option given to TTree::Process. ;  ; TSelectorList * fOutput;  ! List of objects created during processing ;  ; Long64_t fStatus;  Selector status. ;  . Private Member Functions;  REveSelectorToEventList (const REveSelectorToEventList &)=delete;  ; REveSelectorToEventList & operator= (const REveSelectorToEventList &)=delete;  . Additional Inherited Members;  Public Types inherited from TSelector; enum  EAbort { kContinue; , kAbortProcess; , kAbortFile; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TSelectorDraw; enum  EStatusBits { kWarn = (1ULL << ( 12 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TSelectorDraw; virtual void ClearFormula ();  Delete internal buffers. ;  ; virtual bool CompileVariables (const char *varexp="""", const char *selection=""""); ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:16978,Modifiability,inherit,inherited,16978,"; REveSelectorToEventList & operator= (const REveSelectorToEventList &)=delete;  . Additional Inherited Members;  Public Types inherited from TSelector; enum  EAbort { kContinue; , kAbortProcess; , kAbortFile; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TSelectorDraw; enum  EStatusBits { kWarn = (1ULL << ( 12 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TSelectorDraw; virtual void ClearFormula ();  Delete internal buffers. ;  ; virtual bool CompileVariables (const char *varexp="""", const char *selection="""");  Compile input variables and selection expression. ;  ; virtual void InitArrays (Int_t newsize);  Initialization of the primitive type arrays if the new size is bigger than the available space. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <ROOT/REveTreeTools.hxx>. Inheritance diagram for ROOT::Experimental::REveSelectorToEventList:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ REveSelectorToEventList() [1/2]. ROOT::Experimental::REveSelectorToEventList::REveSelectorToEventList ; (; ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:17077,Modifiability,inherit,inherited,17077,"; REveSelectorToEventList & operator= (const REveSelectorToEventList &)=delete;  . Additional Inherited Members;  Public Types inherited from TSelector; enum  EAbort { kContinue; , kAbortProcess; , kAbortFile; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TSelectorDraw; enum  EStatusBits { kWarn = (1ULL << ( 12 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TSelectorDraw; virtual void ClearFormula ();  Delete internal buffers. ;  ; virtual bool CompileVariables (const char *varexp="""", const char *selection="""");  Compile input variables and selection expression. ;  ; virtual void InitArrays (Int_t newsize);  Initialization of the primitive type arrays if the new size is bigger than the available space. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <ROOT/REveTreeTools.hxx>. Inheritance diagram for ROOT::Experimental::REveSelectorToEventList:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ REveSelectorToEventList() [1/2]. ROOT::Experimental::REveSelectorToEventList::REveSelectorToEventList ; (; ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:17176,Modifiability,inherit,inherited,17176,"; REveSelectorToEventList & operator= (const REveSelectorToEventList &)=delete;  . Additional Inherited Members;  Public Types inherited from TSelector; enum  EAbort { kContinue; , kAbortProcess; , kAbortFile; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TSelectorDraw; enum  EStatusBits { kWarn = (1ULL << ( 12 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TSelectorDraw; virtual void ClearFormula ();  Delete internal buffers. ;  ; virtual bool CompileVariables (const char *varexp="""", const char *selection="""");  Compile input variables and selection expression. ;  ; virtual void InitArrays (Int_t newsize);  Initialization of the primitive type arrays if the new size is bigger than the available space. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <ROOT/REveTreeTools.hxx>. Inheritance diagram for ROOT::Experimental::REveSelectorToEventList:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ REveSelectorToEventList() [1/2]. ROOT::Experimental::REveSelectorToEventList::REveSelectorToEventList ; (; ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:17363,Modifiability,variab,variables,17363,"c Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TSelectorDraw; enum  EStatusBits { kWarn = (1ULL << ( 12 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TSelectorDraw; virtual void ClearFormula ();  Delete internal buffers. ;  ; virtual bool CompileVariables (const char *varexp="""", const char *selection="""");  Compile input variables and selection expression. ;  ; virtual void InitArrays (Int_t newsize);  Initialization of the primitive type arrays if the new size is bigger than the available space. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <ROOT/REveTreeTools.hxx>. Inheritance diagram for ROOT::Experimental::REveSelectorToEventList:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ REveSelectorToEventList() [1/2]. ROOT::Experimental::REveSelectorToEventList::REveSelectorToEventList ; (; const REveSelectorToEventList & ; ). privatedelete . ◆ REveSelectorToEventList() [2/2]. REveSelectorToEventList::REveSelectorToEventList ; (; TEventList * ; evl, . const char * ; sel . ). Constructor. ; Definition at line ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:17575,Modifiability,inherit,inherited,17575,"ecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TSelectorDraw; enum  EStatusBits { kWarn = (1ULL << ( 12 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TSelectorDraw; virtual void ClearFormula ();  Delete internal buffers. ;  ; virtual bool CompileVariables (const char *varexp="""", const char *selection="""");  Compile input variables and selection expression. ;  ; virtual void InitArrays (Int_t newsize);  Initialization of the primitive type arrays if the new size is bigger than the available space. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <ROOT/REveTreeTools.hxx>. Inheritance diagram for ROOT::Experimental::REveSelectorToEventList:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ REveSelectorToEventList() [1/2]. ROOT::Experimental::REveSelectorToEventList::REveSelectorToEventList ; (; const REveSelectorToEventList & ; ). privatedelete . ◆ REveSelectorToEventList() [2/2]. REveSelectorToEventList::REveSelectorToEventList ; (; TEventList * ; evl, . const char * ; sel . ). Constructor. ; Definition at line 33 of file REveTreeTools.cxx. ◆ ~REveSelectorToEventList(). ROOT::Experimental::REveSelectorToEventList::~REveSelectorToEventList ; (; ). inlineoverride . Definition at line 37 of file REveTreeTools.hxx. Member Function Documentation. ◆ Class(). static TClass * ROOT::Experimental::REveSelectorToEventList",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:12930,Performance,load,loaded,12930,";  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSelectorDraw; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSelector; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TSelector * GetSelector (const char *filename);  The code in filename is loaded (interpreted or compiled, see below), filename must contain a valid class implementation derived from TSelector. ;  ; static bool IsStandardDraw (const char *selec);  Find out if this is a standard selection used for Draw actions (either TSelectorDraw, TProofDraw or deriving from them). ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:8074,Security,hash,hash,8074," to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html:13625,Deployability,update,update,13625,");  Set transformation matrix from column-major array. ;  ; void SetupDefaultColorAndTransparency (Color_t col, Bool_t can_edit_color, Bool_t can_edit_transparency);  Set up element to use built-in main color and set flags allowing editing of main color and transparency. ;  ; void SetUserData (void *ud);  ; void SetVizModel (REveElement *model);  Set visualization-parameter model element. ;  ; Bool_t SetVizModelByTag ();  Find model element in VizDB that corresponds to previously assigned fVizTag and set fVizModel accordingly. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void Stamp ();  ; void StampColorSelection ();  ; void StampElementAdded ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; Bool_t TestCSCBits (UChar_t f) const;  ; void VizDB_Apply (const std::string &tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const std::string &tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ;  Public Member Functions inherited from ROOT::Experimental::REveProjectable;  REveProjectable ();  Constructor. ;  ;  REveProjectable (const REveProjectable &);  Copy constructor. Does shallow copy. ;  ; virtual ~REveProjectable ();  Destructor. ;  ; virtual void AddProjected (REveProjected *p);  ; virtual void AddProjectedsToSet (std::set< REveElement * > &set);  Add the projected elements to the set, dyn-casting them to REveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; virtual void ClearProjectedList ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Co",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html:13827,Deployability,update,update,13827,"flags allowing editing of main color and transparency. ;  ; void SetUserData (void *ud);  ; void SetVizModel (REveElement *model);  Set visualization-parameter model element. ;  ; Bool_t SetVizModelByTag ();  Find model element in VizDB that corresponds to previously assigned fVizTag and set fVizModel accordingly. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void Stamp ();  ; void StampColorSelection ();  ; void StampElementAdded ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; Bool_t TestCSCBits (UChar_t f) const;  ; void VizDB_Apply (const std::string &tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const std::string &tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ;  Public Member Functions inherited from ROOT::Experimental::REveProjectable;  REveProjectable ();  Constructor. ;  ;  REveProjectable (const REveProjectable &);  Copy constructor. Does shallow copy. ;  ; virtual ~REveProjectable ();  Destructor. ;  ; virtual void AddProjected (REveProjected *p);  ; virtual void AddProjectedsToSet (std::set< REveElement * > &set);  Add the projected elements to the set, dyn-casting them to REveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; virtual void ClearProjectedList ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main color of projecteds if their color is the same as old_color. ;  ; virtual void PropagateMainTransparency (Char_t t, Char_t old_t);  Set main transparency of projecteds if their transparency",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html:5528,Integrability,depend,dependant,5528,"CSCTakeMotherAsMaster ();  ; void DecDenyDestroy ();  Decreases the deny-destroy count of the element. ;  ; void DecImpliedSelected ();  ; virtual void Destroy ();  Destroy this element. ;  ; virtual void DestroyElements ();  Destroy all children of this element. ;  ; virtual void DestroyMainTrans ();  Destroy the main transformation matrix, it will always be taken as identity. ;  ; virtual void DestroyOrWarn ();  Destroy this element. Prints a warning if deny-destroy is in force. ;  ; void DisableListElements (Bool_t rnr_self=kFALSE, Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; virtual void ExportToInterpreter (const char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillExtraSelectionData (nlohmann::json &, const std::set< int > &) const;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet, const std::set< int > &);  Populate set impSelSet with derived / dependant elements. ;  ; REveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; REveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; REveElement * FirstChild () const;  Returns the first child element or 0 if the list is empty. ;  ; UChar_t GetChangeBits () const;  ; TClass * GetChildClass () const;  ; const char * GetCName () const;  ; REveCompound * GetCompound ();  ; const char * GetCTitle () const;  ; Int_t GetDenyDestroy () const;  R",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html:9389,Integrability,depend,dependent,9389," NumAunts () const;  ; Int_t NumChildren () const;  ; virtual void ProjectAllChildren (Bool_t same_depth=kTRUE);  If this is a projectable, loop over all projected replicas and add the projected image of all children there. ;  ; virtual void ProjectChild (REveElement *el, Bool_t same_depth=kTRUE);  If this is a projectable, loop over all projected replicas and add the projected image of child 'el' there. ;  ; virtual void PropagateMainColorToProjecteds (Color_t color, Color_t old_color);  Propagate color to projected elements. ;  ; virtual void PropagateMainTransparencyToProjecteds (Char_t t, Char_t old_t);  Propagate transparency to projected elements. ;  ; virtual void PropagateRnrStateToProjecteds ();  Propagate render state to the projected replicas of this element. ;  ; virtual void PropagateVizParamsToChildren (REveElement *el=nullptr);  Propagate visualization parameters from element el (defaulting to this) to all children. ;  ; virtual void PropagateVizParamsToProjecteds ();  Propagate visualization parameters to dependent elements. ;  ; virtual REveTrans * PtrMainTrans (Bool_t create=kTRUE);  Return pointer to main transformation. ;  ; void RecheckImpliedSelections ();  Call this if it is possible that implied-selection or highlight has changed for this element or for implied-selection this element is member of and you want to maintain consistent selection state. ;  ; AuntList_t & RefAunts ();  ; const AuntList_t & RefAunts () const;  ; List_t & RefChildren ();  ; const List_t & RefChildren () const;  ; virtual REveTrans & RefMainTrans ();  Return reference to main transformation. ;  ; virtual void RemoveAunt (REveAunt *au);  Remove el from the list of aunts. ;  ; virtual void RemoveElement (REveElement *el);  Remove el from the list of children. ;  ; virtual void RemoveElementLocal (REveElement *el);  Perform additional local removal of el. ;  ; virtual void RemoveElements ();  Remove all elements. ;  ; virtual void RemoveElementsLocal ();  Perform additio",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html:2440,Modifiability,inherit,inherited,2440,"ol_t GetDepthTest ();  ; REveChunkManager & GetLinePlex ();  ; REveChunkManager & GetMarkerPlex ();  ; virtual Bool_t GetRnrLines ();  ; virtual Bool_t GetRnrMarkers ();  ; TClass * ProjectedClass (const REveProjection *p) const override;  Return class of projected object. ;  ; virtual void SetDepthTest (Bool_t x);  ; void SetLine (int idx, const REveVector &p1, const REveVector &p2);  Set line vertices with given index. ;  ; void SetLine (int idx, Float_t x1, Float_t y1, Float_t z1, Float_t x2, Float_t y2, Float_t z2);  Set line vertices with given index. ;  ; void SetLineColor (Color_t col) override;  Set the line color. ;  ; virtual void SetRnrLines (Bool_t x);  ; virtual void SetRnrMarkers (Bool_t x);  ; Int_t WriteCoreJson (nlohmann::json &j, Int_t rnr_offset) override;  Fill core part of JSON representation. ;  ; void WriteVizParams (std::ostream &out, const TString &var) override;  Write visualization parameters. ;  ;  Public Member Functions inherited from ROOT::Experimental::REveElement;  REveElement (const REveElement &e);  Copy constructor. ;  ;  REveElement (const std::string &name="""", const std::string &title="""");  Default constructor. ;  ; virtual ~REveElement ();  Destructor. ;  ; virtual Bool_t AcceptElement (REveElement *el);  Check if el can be added to this element. ;  ; virtual void AddAunt (REveAunt *au);  Add el into the list aunts. ;  ; virtual void AddElement (REveElement *el);  Add el to the list of children. ;  ; virtual void AddStamp (UChar_t bits);  Add (bitwise or) given stamps to fChangeBits. ;  ; virtual void Annihilate ();  Optimized destruction without check of reference-count. ;  ; virtual void AnnihilateElements ();  Annihilate elements. ;  ; Bool_t ApplyVizTag (const TString &tag, const TString &fallback_tag="""");  Set the VizTag, find model-element from the VizDB and copy visualization-parameters from it. ;  ; virtual Bool_t CanEditElement () const;  ; virtual Bool_t CanEditMainColor () const;  ; virtual Bool_t CanEditMainTrans ()",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html:5289,Modifiability,variab,variable,5289,"olorToMatchingChildren ();  ; void CSCApplyMainTransparencyToAllChildren ();  ; void CSCApplyMainTransparencyToMatchingChildren ();  ; void CSCImplySelectAllChildren ();  ; void CSCTakeMotherAsMaster ();  ; void DecDenyDestroy ();  Decreases the deny-destroy count of the element. ;  ; void DecImpliedSelected ();  ; virtual void Destroy ();  Destroy this element. ;  ; virtual void DestroyElements ();  Destroy all children of this element. ;  ; virtual void DestroyMainTrans ();  Destroy the main transformation matrix, it will always be taken as identity. ;  ; virtual void DestroyOrWarn ();  Destroy this element. Prints a warning if deny-destroy is in force. ;  ; void DisableListElements (Bool_t rnr_self=kFALSE, Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; virtual void ExportToInterpreter (const char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillExtraSelectionData (nlohmann::json &, const std::set< int > &) const;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet, const std::set< int > &);  Populate set impSelSet with derived / dependant elements. ;  ; REveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; REveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; REveElement * FirstChild () const;  Returns the first child element or 0 if the list is empty. ;  ; UChar_t GetChangeBits () const",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html:11066,Modifiability,variab,variable,11066,"oveAunt (REveAunt *au);  Remove el from the list of aunts. ;  ; virtual void RemoveElement (REveElement *el);  Remove el from the list of children. ;  ; virtual void RemoveElementLocal (REveElement *el);  Perform additional local removal of el. ;  ; virtual void RemoveElements ();  Remove all elements. ;  ; virtual void RemoveElementsLocal ();  Perform additional local removal of all elements. ;  ; virtual bool RequiresExtraSelectionData () const;  ; void ResetAllCSCBits ();  ; void ResetCSCBits (UChar_t f);  ; void SaveVizParams (std::ostream &out, const TString &tag, const TString &var);  Save visualization parameters for this element with given tag. ;  ; void SetChildClass (TClass *c);  ; void SetCompound (REveCompound *c);  ; void SetCSCBits (UChar_t f);  ; void SetDestroyOnZeroRefCnt (Bool_t d);  Sets the state of flag determining if the element will be destroyed when reference count reaches zero. ;  ; void SetEditMainColor (Bool_t x);  ; void SetEditMainTransparency (Bool_t x);  ; void SetMainAlpha (Float_t alpha);  Set main-transparency via float alpha variable. ;  ; virtual void SetMainColor (Color_t color);  Set main color of the element. ;  ; void SetMainColorPixel (Pixel_t pixel);  Convert pixel to Color_t and call SetMainColor(). ;  ; void SetMainColorPtr (Color_t *colptr);  ; void SetMainColorRGB (Float_t r, Float_t g, Float_t b);  Convert RGB values to Color_t and call SetMainColor. ;  ; void SetMainColorRGB (UChar_t r, UChar_t g, UChar_t b);  Convert RGB values to Color_t and call SetMainColor. ;  ; virtual void SetMainTransparency (Char_t t);  Set main-transparency. ;  ; void SetName (const std::string &name);  Set name of an element. ;  ; void SetNameTitle (const std::string &name, const std::string &title);  Set name and title of an element. ;  ; void SetPickable (Bool_t p);  ; void SetPickableRecursively (Bool_t p);  Set pickable state on the element and all its children. ;  ; virtual Bool_t SetRnrChildren (Bool_t rnr);  Set render state of this e",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html:13931,Modifiability,inherit,inherited,13931,"eElement *model);  Set visualization-parameter model element. ;  ; Bool_t SetVizModelByTag ();  Find model element in VizDB that corresponds to previously assigned fVizTag and set fVizModel accordingly. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void Stamp ();  ; void StampColorSelection ();  ; void StampElementAdded ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; Bool_t TestCSCBits (UChar_t f) const;  ; void VizDB_Apply (const std::string &tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const std::string &tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ;  Public Member Functions inherited from ROOT::Experimental::REveProjectable;  REveProjectable ();  Constructor. ;  ;  REveProjectable (const REveProjectable &);  Copy constructor. Does shallow copy. ;  ; virtual ~REveProjectable ();  Destructor. ;  ; virtual void AddProjected (REveProjected *p);  ; virtual void AddProjectedsToSet (std::set< REveElement * > &set);  Add the projected elements to the set, dyn-casting them to REveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; virtual void ClearProjectedList ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main color of projecteds if their color is the same as old_color. ;  ; virtual void PropagateMainTransparency (Char_t t, Char_t old_t);  Set main transparency of projecteds if their transparency is the same as the old one. ;  ; virtual void PropagateRenderState (Bool_t rnr_self, Bool_t rnr_children);  Set r",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html:15211,Modifiability,inherit,inherited,15211,"veProjected *p);  ; virtual void AddProjectedsToSet (std::set< REveElement * > &set);  Add the projected elements to the set, dyn-casting them to REveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; virtual void ClearProjectedList ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main color of projecteds if their color is the same as old_color. ;  ; virtual void PropagateMainTransparency (Char_t t, Char_t old_t);  Set main transparency of projecteds if their transparency is the same as the old one. ;  ; virtual void PropagateRenderState (Bool_t rnr_self, Bool_t rnr_children);  Set render state of projecteds. ;  ; virtual void PropagateVizParams (REveElement *el=nullptr);  Set visualization parameters of projecteds. ;  ; ProjList_t & RefProjecteds ();  ; virtual void RemoveProjected (REveProjected *p);  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual TClass * IsA () const;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html:16718,Modifiability,inherit,inherited,16718,"Color () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual TClass * IsA () const;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttMarker;  TAttMarker ();  TAttMarker default constructor. ;  ;  TAttMarker (Color_t color, Style_t style, Size_t msize);  TAttMarker normal constructor. ;  ; virtual ~TAttMarker ();  TAttMarker destructor. ;  ; void Copy (TAttMarker &attmarker) const;  Copy this marker attributes to a new TAttMarker. ;  ; virtual Color_t GetMarkerColor () const;  Return the marker color. ;  ; virtual Size_t GetMarkerSize () const;  Return the marker size. ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual TClass * IsA () const;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarker",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html:18210,Modifiability,inherit,inherited,18210,"attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttBBox;  TAttBBox ();  ; virtual ~TAttBBox ();  ; Float_t * AssertBBox ();  ; Float_t * GetBBox ();  ; Bool_t GetBBoxOK () const;  ; virtual TClass * IsA () const;  ; TAttBBox & operator= (const TAttBBox &tab);  ; void ResetBBox ();  ; void SetupBBoxCube (Float_t extent, Float_t x, Float_t y, Float_t z);  Setup bounding box as cube with given extent and center position. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from ROOT::Experimental::REveSecondarySelectable;  REveSecondarySelectable ()=default;  ; virtual ~REveSecondarySelectable ();  ; Bool_t GetAlwaysSecSelect () const;  ; SelectionSet_t & RefHighlightedSet ();  ; SelectionSet_t & RefSelectedSet ();  ; void SetAlwaysSecSelect (Bool_t f);  . Protected Attributes; Bool_t fDepthTest;  ; Line_t * fLastLine {nullptr};  ! ;  ; REveChunkManager fLinePlex;  ; REveChunkManager fMarkerPlex;  ; Bool_t fOwnLinesIds;  ; Bool_t fOwnMarkersIds;  ; Bool_t fRnrLines;  ; Bool_t fRnrMarkers;  ;  Protected Attributes inherited from ROOT::Experimental::REveEleme",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html:18733,Modifiability,inherit,inherited,18733,"r color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttBBox;  TAttBBox ();  ; virtual ~TAttBBox ();  ; Float_t * AssertBBox ();  ; Float_t * GetBBox ();  ; Bool_t GetBBoxOK () const;  ; virtual TClass * IsA () const;  ; TAttBBox & operator= (const TAttBBox &tab);  ; void ResetBBox ();  ; void SetupBBoxCube (Float_t extent, Float_t x, Float_t y, Float_t z);  Setup bounding box as cube with given extent and center position. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from ROOT::Experimental::REveSecondarySelectable;  REveSecondarySelectable ()=default;  ; virtual ~REveSecondarySelectable ();  ; Bool_t GetAlwaysSecSelect () const;  ; SelectionSet_t & RefHighlightedSet ();  ; SelectionSet_t & RefSelectedSet ();  ; void SetAlwaysSecSelect (Bool_t f);  . Protected Attributes; Bool_t fDepthTest;  ; Line_t * fLastLine {nullptr};  ! ;  ; REveChunkManager fLinePlex;  ; REveChunkManager fMarkerPlex;  ; Bool_t fOwnLinesIds;  ; Bool_t fOwnMarkersIds;  ; Bool_t fRnrLines;  ; Bool_t fRnrMarkers;  ;  Protected Attributes inherited from ROOT::Experimental::REveElement; AuntList_t fAunts;  ; Bool_t fCanEditMainColor {kFALSE};  ; Bool_t fCanEditMainTrans {kFALSE};  ; Bool_t fCanEditMainTransparency {kFALSE};  ; UChar_t fChangeBits {0};  ; TClass * fChildClass {nullptr};  ; List_t fChildren;  ; REveCompound * fCompound {nullptr};  ; UChar_t fCSCBits {0};  ; Color_t fDefaultColor {kPink};  ; Int_t fDenyDestroy {0};  ; Bool_t fDestroyOnZeroRefCnt {kTRUE};  Deny-destroy count. ;  ; Char_t fDestructing {kNone};  ; Short_t fImpliedSelected {",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html:19294,Modifiability,inherit,inherited,19294," ; TAttBBox & operator= (const TAttBBox &tab);  ; void ResetBBox ();  ; void SetupBBoxCube (Float_t extent, Float_t x, Float_t y, Float_t z);  Setup bounding box as cube with given extent and center position. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from ROOT::Experimental::REveSecondarySelectable;  REveSecondarySelectable ()=default;  ; virtual ~REveSecondarySelectable ();  ; Bool_t GetAlwaysSecSelect () const;  ; SelectionSet_t & RefHighlightedSet ();  ; SelectionSet_t & RefSelectedSet ();  ; void SetAlwaysSecSelect (Bool_t f);  . Protected Attributes; Bool_t fDepthTest;  ; Line_t * fLastLine {nullptr};  ! ;  ; REveChunkManager fLinePlex;  ; REveChunkManager fMarkerPlex;  ; Bool_t fOwnLinesIds;  ; Bool_t fOwnMarkersIds;  ; Bool_t fRnrLines;  ; Bool_t fRnrMarkers;  ;  Protected Attributes inherited from ROOT::Experimental::REveElement; AuntList_t fAunts;  ; Bool_t fCanEditMainColor {kFALSE};  ; Bool_t fCanEditMainTrans {kFALSE};  ; Bool_t fCanEditMainTransparency {kFALSE};  ; UChar_t fChangeBits {0};  ; TClass * fChildClass {nullptr};  ; List_t fChildren;  ; REveCompound * fCompound {nullptr};  ; UChar_t fCSCBits {0};  ; Color_t fDefaultColor {kPink};  ; Int_t fDenyDestroy {0};  ; Bool_t fDestroyOnZeroRefCnt {kTRUE};  Deny-destroy count. ;  ; Char_t fDestructing {kNone};  ; Short_t fImpliedSelected {0};  ; Color_t * fMainColorPtr {nullptr};  ; std::unique_ptr< REveTrans > fMainTrans;  ; Char_t fMainTransparency {0};  ; REveElement * fMother {nullptr};  ; std::string fName;  ; Bool_t fPickable {false};  ; std::unique_ptr< REveRenderData > fRenderData;  Externally assigned and controlled user data. ;  ; Bool_t fRnrChildren {kTRUE};  ; Bool_t fRnrSelf {kTRUE};  ; REveScene * fScene {nullptr};  ; REveElement * fSelectionMaster {nullptr};  ; std::string fTitle;  ; void * fUserData {nullptr};  ; REveElement * fVizModel {nullptr};  ; TString fVizTag;  Element used as mode",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html:20432,Modifiability,inherit,inherited,20432,"geBits {0};  ; TClass * fChildClass {nullptr};  ; List_t fChildren;  ; REveCompound * fCompound {nullptr};  ; UChar_t fCSCBits {0};  ; Color_t fDefaultColor {kPink};  ; Int_t fDenyDestroy {0};  ; Bool_t fDestroyOnZeroRefCnt {kTRUE};  Deny-destroy count. ;  ; Char_t fDestructing {kNone};  ; Short_t fImpliedSelected {0};  ; Color_t * fMainColorPtr {nullptr};  ; std::unique_ptr< REveTrans > fMainTrans;  ; Char_t fMainTransparency {0};  ; REveElement * fMother {nullptr};  ; std::string fName;  ; Bool_t fPickable {false};  ; std::unique_ptr< REveRenderData > fRenderData;  Externally assigned and controlled user data. ;  ; Bool_t fRnrChildren {kTRUE};  ; Bool_t fRnrSelf {kTRUE};  ; REveScene * fScene {nullptr};  ; REveElement * fSelectionMaster {nullptr};  ; std::string fTitle;  ; void * fUserData {nullptr};  ; REveElement * fVizModel {nullptr};  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from ROOT::Experimental::REveProjectable; ProjList_t fProjectedList;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttBBox; Float_t * fBBox;  ;  Protected Attributes inherited from ROOT::Experimental::REveSecondarySelectable; Bool_t fAlwaysSecSelect {kFALSE};  ; SelectionSet_t fHighlightedSet;  ; SelectionSet_t fSelectedSet;  . Private Member Functions;  REveStraightLineSet (const REveStraightLineSet &)=delete;  ; REveStraightLineSet & operator= (const REveStraightLineSet &)=delete;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::REveElement; typedef std::list< REveAunt * > AuntList_t;  ; enum  EChangeBits { ;   kCBColorSelection = BIT(0); , kCBTransBBox = BIT(1); , kCBObjProps = BIT(2)",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html:20536,Modifiability,inherit,inherited,20536,"geBits {0};  ; TClass * fChildClass {nullptr};  ; List_t fChildren;  ; REveCompound * fCompound {nullptr};  ; UChar_t fCSCBits {0};  ; Color_t fDefaultColor {kPink};  ; Int_t fDenyDestroy {0};  ; Bool_t fDestroyOnZeroRefCnt {kTRUE};  Deny-destroy count. ;  ; Char_t fDestructing {kNone};  ; Short_t fImpliedSelected {0};  ; Color_t * fMainColorPtr {nullptr};  ; std::unique_ptr< REveTrans > fMainTrans;  ; Char_t fMainTransparency {0};  ; REveElement * fMother {nullptr};  ; std::string fName;  ; Bool_t fPickable {false};  ; std::unique_ptr< REveRenderData > fRenderData;  Externally assigned and controlled user data. ;  ; Bool_t fRnrChildren {kTRUE};  ; Bool_t fRnrSelf {kTRUE};  ; REveScene * fScene {nullptr};  ; REveElement * fSelectionMaster {nullptr};  ; std::string fTitle;  ; void * fUserData {nullptr};  ; REveElement * fVizModel {nullptr};  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from ROOT::Experimental::REveProjectable; ProjList_t fProjectedList;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttBBox; Float_t * fBBox;  ;  Protected Attributes inherited from ROOT::Experimental::REveSecondarySelectable; Bool_t fAlwaysSecSelect {kFALSE};  ; SelectionSet_t fHighlightedSet;  ; SelectionSet_t fSelectedSet;  . Private Member Functions;  REveStraightLineSet (const REveStraightLineSet &)=delete;  ; REveStraightLineSet & operator= (const REveStraightLineSet &)=delete;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::REveElement; typedef std::list< REveAunt * > AuntList_t;  ; enum  EChangeBits { ;   kCBColorSelection = BIT(0); , kCBTransBBox = BIT(1); , kCBObjProps = BIT(2)",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html:20697,Modifiability,inherit,inherited,20697,"oRefCnt {kTRUE};  Deny-destroy count. ;  ; Char_t fDestructing {kNone};  ; Short_t fImpliedSelected {0};  ; Color_t * fMainColorPtr {nullptr};  ; std::unique_ptr< REveTrans > fMainTrans;  ; Char_t fMainTransparency {0};  ; REveElement * fMother {nullptr};  ; std::string fName;  ; Bool_t fPickable {false};  ; std::unique_ptr< REveRenderData > fRenderData;  Externally assigned and controlled user data. ;  ; Bool_t fRnrChildren {kTRUE};  ; Bool_t fRnrSelf {kTRUE};  ; REveScene * fScene {nullptr};  ; REveElement * fSelectionMaster {nullptr};  ; std::string fTitle;  ; void * fUserData {nullptr};  ; REveElement * fVizModel {nullptr};  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from ROOT::Experimental::REveProjectable; ProjList_t fProjectedList;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttBBox; Float_t * fBBox;  ;  Protected Attributes inherited from ROOT::Experimental::REveSecondarySelectable; Bool_t fAlwaysSecSelect {kFALSE};  ; SelectionSet_t fHighlightedSet;  ; SelectionSet_t fSelectedSet;  . Private Member Functions;  REveStraightLineSet (const REveStraightLineSet &)=delete;  ; REveStraightLineSet & operator= (const REveStraightLineSet &)=delete;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::REveElement; typedef std::list< REveAunt * > AuntList_t;  ; enum  EChangeBits { ;   kCBColorSelection = BIT(0); , kCBTransBBox = BIT(1); , kCBObjProps = BIT(2); , kCBVisibility = BIT(3); , ;   kCBElementAdded = BIT(4). };  ; typedef std::list< REveElement * > List_t;  ; typedef std::set< REveElement * > Set_t;  ;  Public Types inherited from ROOT::Experimental::REveProject",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html:20869,Modifiability,inherit,inherited,20869," ; std::string fName;  ; Bool_t fPickable {false};  ; std::unique_ptr< REveRenderData > fRenderData;  Externally assigned and controlled user data. ;  ; Bool_t fRnrChildren {kTRUE};  ; Bool_t fRnrSelf {kTRUE};  ; REveScene * fScene {nullptr};  ; REveElement * fSelectionMaster {nullptr};  ; std::string fTitle;  ; void * fUserData {nullptr};  ; REveElement * fVizModel {nullptr};  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from ROOT::Experimental::REveProjectable; ProjList_t fProjectedList;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttBBox; Float_t * fBBox;  ;  Protected Attributes inherited from ROOT::Experimental::REveSecondarySelectable; Bool_t fAlwaysSecSelect {kFALSE};  ; SelectionSet_t fHighlightedSet;  ; SelectionSet_t fSelectedSet;  . Private Member Functions;  REveStraightLineSet (const REveStraightLineSet &)=delete;  ; REveStraightLineSet & operator= (const REveStraightLineSet &)=delete;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::REveElement; typedef std::list< REveAunt * > AuntList_t;  ; enum  EChangeBits { ;   kCBColorSelection = BIT(0); , kCBTransBBox = BIT(1); , kCBObjProps = BIT(2); , kCBVisibility = BIT(3); , ;   kCBElementAdded = BIT(4). };  ; typedef std::list< REveElement * > List_t;  ; typedef std::set< REveElement * > Set_t;  ;  Public Types inherited from ROOT::Experimental::REveProjectable; typedef std::list< REveProjected * > ProjList_t;  ;  Public Types inherited from ROOT::Experimental::REveSecondarySelectable; typedef std::set< Int_t > SelectionSet_t;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html:20936,Modifiability,inherit,inherited,20936," ; std::string fName;  ; Bool_t fPickable {false};  ; std::unique_ptr< REveRenderData > fRenderData;  Externally assigned and controlled user data. ;  ; Bool_t fRnrChildren {kTRUE};  ; Bool_t fRnrSelf {kTRUE};  ; REveScene * fScene {nullptr};  ; REveElement * fSelectionMaster {nullptr};  ; std::string fTitle;  ; void * fUserData {nullptr};  ; REveElement * fVizModel {nullptr};  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from ROOT::Experimental::REveProjectable; ProjList_t fProjectedList;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttBBox; Float_t * fBBox;  ;  Protected Attributes inherited from ROOT::Experimental::REveSecondarySelectable; Bool_t fAlwaysSecSelect {kFALSE};  ; SelectionSet_t fHighlightedSet;  ; SelectionSet_t fSelectedSet;  . Private Member Functions;  REveStraightLineSet (const REveStraightLineSet &)=delete;  ; REveStraightLineSet & operator= (const REveStraightLineSet &)=delete;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::REveElement; typedef std::list< REveAunt * > AuntList_t;  ; enum  EChangeBits { ;   kCBColorSelection = BIT(0); , kCBTransBBox = BIT(1); , kCBObjProps = BIT(2); , kCBVisibility = BIT(3); , ;   kCBElementAdded = BIT(4). };  ; typedef std::list< REveElement * > List_t;  ; typedef std::set< REveElement * > Set_t;  ;  Public Types inherited from ROOT::Experimental::REveProjectable; typedef std::list< REveProjected * > ProjList_t;  ;  Public Types inherited from ROOT::Experimental::REveSecondarySelectable; typedef std::set< Int_t > SelectionSet_t;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html:21305,Modifiability,inherit,inherited,21305,"  Protected Attributes inherited from ROOT::Experimental::REveProjectable; ProjList_t fProjectedList;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttBBox; Float_t * fBBox;  ;  Protected Attributes inherited from ROOT::Experimental::REveSecondarySelectable; Bool_t fAlwaysSecSelect {kFALSE};  ; SelectionSet_t fHighlightedSet;  ; SelectionSet_t fSelectedSet;  . Private Member Functions;  REveStraightLineSet (const REveStraightLineSet &)=delete;  ; REveStraightLineSet & operator= (const REveStraightLineSet &)=delete;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::REveElement; typedef std::list< REveAunt * > AuntList_t;  ; enum  EChangeBits { ;   kCBColorSelection = BIT(0); , kCBTransBBox = BIT(1); , kCBObjProps = BIT(2); , kCBVisibility = BIT(3); , ;   kCBElementAdded = BIT(4). };  ; typedef std::list< REveElement * > List_t;  ; typedef std::set< REveElement * > Set_t;  ;  Public Types inherited from ROOT::Experimental::REveProjectable; typedef std::list< REveProjected * > ProjList_t;  ;  Public Types inherited from ROOT::Experimental::REveSecondarySelectable; typedef std::set< Int_t > SelectionSet_t;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns t",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html:21669,Modifiability,inherit,inherited,21669,";  . Private Member Functions;  REveStraightLineSet (const REveStraightLineSet &)=delete;  ; REveStraightLineSet & operator= (const REveStraightLineSet &)=delete;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::REveElement; typedef std::list< REveAunt * > AuntList_t;  ; enum  EChangeBits { ;   kCBColorSelection = BIT(0); , kCBTransBBox = BIT(1); , kCBObjProps = BIT(2); , kCBVisibility = BIT(3); , ;   kCBElementAdded = BIT(4). };  ; typedef std::list< REveElement * > List_t;  ; typedef std::set< REveElement * > Set_t;  ;  Public Types inherited from ROOT::Experimental::REveProjectable; typedef std::list< REveProjected * > ProjList_t;  ;  Public Types inherited from ROOT::Experimental::REveSecondarySelectable; typedef std::set< Int_t > SelectionSet_t;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttBBox; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Types inherited from ROOT::Experimental::REveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = BIT(0); , kCSCBTakeMotherAsMaster = BIT(1); , kCSCBApplyMainColorToAllChildren = BIT(2); , kCSCBApplyMainColor",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html:21787,Modifiability,inherit,inherited,21787,";  . Private Member Functions;  REveStraightLineSet (const REveStraightLineSet &)=delete;  ; REveStraightLineSet & operator= (const REveStraightLineSet &)=delete;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::REveElement; typedef std::list< REveAunt * > AuntList_t;  ; enum  EChangeBits { ;   kCBColorSelection = BIT(0); , kCBTransBBox = BIT(1); , kCBObjProps = BIT(2); , kCBVisibility = BIT(3); , ;   kCBElementAdded = BIT(4). };  ; typedef std::list< REveElement * > List_t;  ; typedef std::set< REveElement * > Set_t;  ;  Public Types inherited from ROOT::Experimental::REveProjectable; typedef std::list< REveProjected * > ProjList_t;  ;  Public Types inherited from ROOT::Experimental::REveSecondarySelectable; typedef std::set< Int_t > SelectionSet_t;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttBBox; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Types inherited from ROOT::Experimental::REveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = BIT(0); , kCSCBTakeMotherAsMaster = BIT(1); , kCSCBApplyMainColorToAllChildren = BIT(2); , kCSCBApplyMainColor",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html:21924,Modifiability,inherit,inherited,21924,";  . Private Member Functions;  REveStraightLineSet (const REveStraightLineSet &)=delete;  ; REveStraightLineSet & operator= (const REveStraightLineSet &)=delete;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::REveElement; typedef std::list< REveAunt * > AuntList_t;  ; enum  EChangeBits { ;   kCBColorSelection = BIT(0); , kCBTransBBox = BIT(1); , kCBObjProps = BIT(2); , kCBVisibility = BIT(3); , ;   kCBElementAdded = BIT(4). };  ; typedef std::list< REveElement * > List_t;  ; typedef std::set< REveElement * > Set_t;  ;  Public Types inherited from ROOT::Experimental::REveProjectable; typedef std::list< REveProjected * > ProjList_t;  ;  Public Types inherited from ROOT::Experimental::REveSecondarySelectable; typedef std::set< Int_t > SelectionSet_t;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttBBox; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Types inherited from ROOT::Experimental::REveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = BIT(0); , kCSCBTakeMotherAsMaster = BIT(1); , kCSCBApplyMainColorToAllChildren = BIT(2); , kCSCBApplyMainColor",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html:22136,Modifiability,inherit,inherited,22136,";  . Private Member Functions;  REveStraightLineSet (const REveStraightLineSet &)=delete;  ; REveStraightLineSet & operator= (const REveStraightLineSet &)=delete;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::REveElement; typedef std::list< REveAunt * > AuntList_t;  ; enum  EChangeBits { ;   kCBColorSelection = BIT(0); , kCBTransBBox = BIT(1); , kCBObjProps = BIT(2); , kCBVisibility = BIT(3); , ;   kCBElementAdded = BIT(4). };  ; typedef std::list< REveElement * > List_t;  ; typedef std::set< REveElement * > Set_t;  ;  Public Types inherited from ROOT::Experimental::REveProjectable; typedef std::list< REveProjected * > ProjList_t;  ;  Public Types inherited from ROOT::Experimental::REveSecondarySelectable; typedef std::set< Int_t > SelectionSet_t;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttBBox; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Types inherited from ROOT::Experimental::REveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = BIT(0); , kCSCBTakeMotherAsMaster = BIT(1); , kCSCBApplyMainColorToAllChildren = BIT(2); , kCSCBApplyMainColor",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html:22671,Modifiability,inherit,inherited,22671,"rom TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttBBox; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Types inherited from ROOT::Experimental::REveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = BIT(0); , kCSCBTakeMotherAsMaster = BIT(1); , kCSCBApplyMainColorToAllChildren = BIT(2); , kCSCBApplyMainColorToMatchingChildren = BIT(3); , ;   kCSCBApplyMainTransparencyToAllChildren = BIT(4); , kCSCBApplyMainTransparencyToMatchingChildren = BIT(5). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Member Functions inherited from ROOT::Experimental::REveElement; virtual void AnnihilateRecursively ();  Protected member function called from REveElement::Annihilate(). ;  ; void assign_element_id_recurisvely ();  ; void assign_scene_recursively (REveScene *s);  ; ElementId_t get_mother_id () const;  ; ElementId_t get_scene_id () const;  ; virtual void PreDeleteElement ();  Vertex / normal / triangle index information for rendering. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TAttBBox;  TAttBBox (const TAttBBox &tab);  ; void AssertBBoxExtents",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html:22868,Modifiability,inherit,inherited,22868,"rom TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttBBox; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Types inherited from ROOT::Experimental::REveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = BIT(0); , kCSCBTakeMotherAsMaster = BIT(1); , kCSCBApplyMainColorToAllChildren = BIT(2); , kCSCBApplyMainColorToMatchingChildren = BIT(3); , ;   kCSCBApplyMainTransparencyToAllChildren = BIT(4); , kCSCBApplyMainTransparencyToMatchingChildren = BIT(5). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Member Functions inherited from ROOT::Experimental::REveElement; virtual void AnnihilateRecursively ();  Protected member function called from REveElement::Annihilate(). ;  ; void assign_element_id_recurisvely ();  ; void assign_scene_recursively (REveScene *s);  ; ElementId_t get_mother_id () const;  ; ElementId_t get_scene_id () const;  ; virtual void PreDeleteElement ();  Vertex / normal / triangle index information for rendering. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TAttBBox;  TAttBBox (const TAttBBox &tab);  ; void AssertBBoxExtents",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html:23331,Modifiability,inherit,inherited,23331," style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttBBox; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Types inherited from ROOT::Experimental::REveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = BIT(0); , kCSCBTakeMotherAsMaster = BIT(1); , kCSCBApplyMainColorToAllChildren = BIT(2); , kCSCBApplyMainColorToMatchingChildren = BIT(3); , ;   kCSCBApplyMainTransparencyToAllChildren = BIT(4); , kCSCBApplyMainTransparencyToMatchingChildren = BIT(5). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Member Functions inherited from ROOT::Experimental::REveElement; virtual void AnnihilateRecursively ();  Protected member function called from REveElement::Annihilate(). ;  ; void assign_element_id_recurisvely ();  ; void assign_scene_recursively (REveScene *s);  ; ElementId_t get_mother_id () const;  ; ElementId_t get_scene_id () const;  ; virtual void PreDeleteElement ();  Vertex / normal / triangle index information for rendering. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TAttBBox;  TAttBBox (const TAttBBox &tab);  ; void AssertBBoxExtents (Float_t epsilon=0.005);  Assert extents of all sides of the bounding-box are at least epsilon. ;  ; void BBoxCheckPoint (const Float_t *p);  ; void BBoxCheckPoint (Float_t x, Float_t y, Float_t z);  ; void BBoxClear ();  Remove BBox information. ;  ; void BBoxInit (Float_t infinity=1e6);  Dynamic Float_t[6] X(min,max), Y(min,max), Z(min,max) ;  ; void BBoxZero (Float_t epsilon=0, Float_t x=0, Float_t y=0, Float_t z=0); ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html:23852,Modifiability,inherit,inherited,23852,"T::Experimental::REveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = BIT(0); , kCSCBTakeMotherAsMaster = BIT(1); , kCSCBApplyMainColorToAllChildren = BIT(2); , kCSCBApplyMainColorToMatchingChildren = BIT(3); , ;   kCSCBApplyMainTransparencyToAllChildren = BIT(4); , kCSCBApplyMainTransparencyToMatchingChildren = BIT(5). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Member Functions inherited from ROOT::Experimental::REveElement; virtual void AnnihilateRecursively ();  Protected member function called from REveElement::Annihilate(). ;  ; void assign_element_id_recurisvely ();  ; void assign_scene_recursively (REveScene *s);  ; ElementId_t get_mother_id () const;  ; ElementId_t get_scene_id () const;  ; virtual void PreDeleteElement ();  Vertex / normal / triangle index information for rendering. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TAttBBox;  TAttBBox (const TAttBBox &tab);  ; void AssertBBoxExtents (Float_t epsilon=0.005);  Assert extents of all sides of the bounding-box are at least epsilon. ;  ; void BBoxCheckPoint (const Float_t *p);  ; void BBoxCheckPoint (Float_t x, Float_t y, Float_t z);  ; void BBoxClear ();  Remove BBox information. ;  ; void BBoxInit (Float_t infinity=1e6);  Dynamic Float_t[6] X(min,max), Y(min,max), Z(min,max) ;  ; void BBoxZero (Float_t epsilon=0, Float_t x=0, Float_t y=0, Float_t z=0);  Create cube of volume (2*epsilon)^3 at (x,y,z). ;  ;  Static Protected Member Functions inherited from ROOT::Experimental::REveElement; static const std::string & ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  . #include <ROOT/REveStraightLineSet.hxx>. Inheritance diagram for ROOT::Experimental::REveStraightLineSet:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ REveStraightLineSet() [1/2]. ROOT::Experimental",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html:24449,Modifiability,inherit,inherited,24449,"gn_element_id_recurisvely ();  ; void assign_scene_recursively (REveScene *s);  ; ElementId_t get_mother_id () const;  ; ElementId_t get_scene_id () const;  ; virtual void PreDeleteElement ();  Vertex / normal / triangle index information for rendering. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TAttBBox;  TAttBBox (const TAttBBox &tab);  ; void AssertBBoxExtents (Float_t epsilon=0.005);  Assert extents of all sides of the bounding-box are at least epsilon. ;  ; void BBoxCheckPoint (const Float_t *p);  ; void BBoxCheckPoint (Float_t x, Float_t y, Float_t z);  ; void BBoxClear ();  Remove BBox information. ;  ; void BBoxInit (Float_t infinity=1e6);  Dynamic Float_t[6] X(min,max), Y(min,max), Z(min,max) ;  ; void BBoxZero (Float_t epsilon=0, Float_t x=0, Float_t y=0, Float_t z=0);  Create cube of volume (2*epsilon)^3 at (x,y,z). ;  ;  Static Protected Member Functions inherited from ROOT::Experimental::REveElement; static const std::string & ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  . #include <ROOT/REveStraightLineSet.hxx>. Inheritance diagram for ROOT::Experimental::REveStraightLineSet:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ REveStraightLineSet() [1/2]. ROOT::Experimental::REveStraightLineSet::REveStraightLineSet ; (; const REveStraightLineSet & ; ). privatedelete . ◆ REveStraightLineSet() [2/2]. REveStraightLineSet::REveStraightLineSet ; (; const std::string & ; n = ""StraightLineSet"", . const std::string & ; t = """" . ). Constructor. ; Definition at line 26 of file REveStraightLineSet.cxx. ◆ ~REveStraightLineSet(). ROOT::Experimental::REveStraightLineSet::~REveStraightLineSet ; (; ). inlineoverride . Definition at line 89 of file REveStraightLineSet.hxx. Member Function Documentation. ◆ AddLine() [1/2]. REveStraightLineSet::Line_t * REveStraightLineSet::AddLine ; (; const",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html:15300,Deployability,update,update,15300,");  Set transformation matrix from column-major array. ;  ; void SetupDefaultColorAndTransparency (Color_t col, Bool_t can_edit_color, Bool_t can_edit_transparency);  Set up element to use built-in main color and set flags allowing editing of main color and transparency. ;  ; void SetUserData (void *ud);  ; void SetVizModel (REveElement *model);  Set visualization-parameter model element. ;  ; Bool_t SetVizModelByTag ();  Find model element in VizDB that corresponds to previously assigned fVizTag and set fVizModel accordingly. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void Stamp ();  ; void StampColorSelection ();  ; void StampElementAdded ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; Bool_t TestCSCBits (UChar_t f) const;  ; void VizDB_Apply (const std::string &tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const std::string &tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual Int_t WriteCoreJson (nlohmann::json &cj, Int_t rnr_offset);  Write core json. ;  ;  Public Member Functions inherited from ROOT::Experimental::REveProjectable;  REveProjectable ();  Constructor. ;  ;  REveProjectable (const REveProjectable &);  Copy constructor. Does shallow copy. ;  ; virtual ~REveProjectable ();  Destructor. ;  ; virtual void AddProjected (REveProjected *p);  ; virtual void AddProjectedsToSet (std::set< REveElement * > &set);  Add the projected elements to the set, dyn-casting them to REveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; virtual void ClearProjectedList ();  ; v",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrackList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html:15502,Deployability,update,update,15502,"flags allowing editing of main color and transparency. ;  ; void SetUserData (void *ud);  ; void SetVizModel (REveElement *model);  Set visualization-parameter model element. ;  ; Bool_t SetVizModelByTag ();  Find model element in VizDB that corresponds to previously assigned fVizTag and set fVizModel accordingly. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void Stamp ();  ; void StampColorSelection ();  ; void StampElementAdded ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; Bool_t TestCSCBits (UChar_t f) const;  ; void VizDB_Apply (const std::string &tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const std::string &tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual Int_t WriteCoreJson (nlohmann::json &cj, Int_t rnr_offset);  Write core json. ;  ;  Public Member Functions inherited from ROOT::Experimental::REveProjectable;  REveProjectable ();  Constructor. ;  ;  REveProjectable (const REveProjectable &);  Copy constructor. Does shallow copy. ;  ; virtual ~REveProjectable ();  Destructor. ;  ; virtual void AddProjected (REveProjected *p);  ; virtual void AddProjectedsToSet (std::set< REveElement * > &set);  Add the projected elements to the set, dyn-casting them to REveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; virtual void ClearProjectedList ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main color of projecteds if their color is the same as old_color. ;  ; virtual void PropagateMainTransp",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrackList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html:7283,Integrability,depend,dependant,7283,"CSCTakeMotherAsMaster ();  ; void DecDenyDestroy ();  Decreases the deny-destroy count of the element. ;  ; void DecImpliedSelected ();  ; virtual void Destroy ();  Destroy this element. ;  ; virtual void DestroyElements ();  Destroy all children of this element. ;  ; virtual void DestroyMainTrans ();  Destroy the main transformation matrix, it will always be taken as identity. ;  ; virtual void DestroyOrWarn ();  Destroy this element. Prints a warning if deny-destroy is in force. ;  ; void DisableListElements (Bool_t rnr_self=kFALSE, Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; virtual void ExportToInterpreter (const char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillExtraSelectionData (nlohmann::json &, const std::set< int > &) const;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet, const std::set< int > &);  Populate set impSelSet with derived / dependant elements. ;  ; REveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; REveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; REveElement * FirstChild () const;  Returns the first child element or 0 if the list is empty. ;  ; UChar_t GetChangeBits () const;  ; TClass * GetChildClass () const;  ; const char * GetCName () const;  ; REveCompound * GetCompound ();  ; const char * GetCTitle () const;  ; Int_t GetDenyDestroy () const;  R",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrackList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html:11144,Integrability,depend,dependent,11144," NumAunts () const;  ; Int_t NumChildren () const;  ; virtual void ProjectAllChildren (Bool_t same_depth=kTRUE);  If this is a projectable, loop over all projected replicas and add the projected image of all children there. ;  ; virtual void ProjectChild (REveElement *el, Bool_t same_depth=kTRUE);  If this is a projectable, loop over all projected replicas and add the projected image of child 'el' there. ;  ; virtual void PropagateMainColorToProjecteds (Color_t color, Color_t old_color);  Propagate color to projected elements. ;  ; virtual void PropagateMainTransparencyToProjecteds (Char_t t, Char_t old_t);  Propagate transparency to projected elements. ;  ; virtual void PropagateRnrStateToProjecteds ();  Propagate render state to the projected replicas of this element. ;  ; virtual void PropagateVizParamsToChildren (REveElement *el=nullptr);  Propagate visualization parameters from element el (defaulting to this) to all children. ;  ; virtual void PropagateVizParamsToProjecteds ();  Propagate visualization parameters to dependent elements. ;  ; virtual REveTrans * PtrMainTrans (Bool_t create=kTRUE);  Return pointer to main transformation. ;  ; void RecheckImpliedSelections ();  Call this if it is possible that implied-selection or highlight has changed for this element or for implied-selection this element is member of and you want to maintain consistent selection state. ;  ; AuntList_t & RefAunts ();  ; const AuntList_t & RefAunts () const;  ; List_t & RefChildren ();  ; const List_t & RefChildren () const;  ; virtual REveTrans & RefMainTrans ();  Return reference to main transformation. ;  ; virtual void RemoveAunt (REveAunt *au);  Remove el from the list of aunts. ;  ; virtual void RemoveElement (REveElement *el);  Remove el from the list of children. ;  ; virtual void RemoveElementLocal (REveElement *el);  Perform additional local removal of el. ;  ; virtual void RemoveElements ();  Remove all elements. ;  ; virtual void RemoveElementsLocal ();  Perform additio",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrackList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html:4112,Modifiability,inherit,inherited,4112,"s. ;  ; virtual void SetMarkerSize (Size_t s, REveElement *el);  Set marker size for children of el. ;  ; void SetMarkerStyle (Style_t s) override;  Set marker style for the list and the elements. ;  ; virtual void SetMarkerStyle (Style_t s, REveElement *el);  Set marker style for children of el. ;  ; void SetPropagator (REveTrackPropagator *prop);  Set default propagator for tracks. ;  ; void SetRecurse (Bool_t x);  ; void SetRnrLine (Bool_t rnr);  Set rendering of track as line for the list and the elements. ;  ; void SetRnrLine (Bool_t rnr, REveElement *el);  Set rendering of track as line for children of el. ;  ; void SetRnrPoints (Bool_t r);  Set rendering of track as points for the list and the elements. ;  ; void SetRnrPoints (Bool_t r, REveElement *el);  Set rendering of track as points for children of el. ;  ; void WriteVizParams (std::ostream &out, const TString &var) override;  Write visualization parameters. ;  ;  Public Member Functions inherited from ROOT::Experimental::REveElement;  REveElement (const REveElement &e);  Copy constructor. ;  ;  REveElement (const std::string &name="""", const std::string &title="""");  Default constructor. ;  ; virtual ~REveElement ();  Destructor. ;  ; virtual Bool_t AcceptElement (REveElement *el);  Check if el can be added to this element. ;  ; virtual void AddAunt (REveAunt *au);  Add el into the list aunts. ;  ; virtual void AddElement (REveElement *el);  Add el to the list of children. ;  ; virtual void AddStamp (UChar_t bits);  Add (bitwise or) given stamps to fChangeBits. ;  ; virtual void Annihilate ();  Optimized destruction without check of reference-count. ;  ; virtual void AnnihilateElements ();  Annihilate elements. ;  ; Bool_t ApplyVizTag (const TString &tag, const TString &fallback_tag="""");  Set the VizTag, find model-element from the VizDB and copy visualization-parameters from it. ;  ; virtual void BuildRenderData ();  Write transformation Matrix to render data. ;  ; virtual Bool_t CanEditElement () const;",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrackList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html:7044,Modifiability,variab,variable,7044,"olorToMatchingChildren ();  ; void CSCApplyMainTransparencyToAllChildren ();  ; void CSCApplyMainTransparencyToMatchingChildren ();  ; void CSCImplySelectAllChildren ();  ; void CSCTakeMotherAsMaster ();  ; void DecDenyDestroy ();  Decreases the deny-destroy count of the element. ;  ; void DecImpliedSelected ();  ; virtual void Destroy ();  Destroy this element. ;  ; virtual void DestroyElements ();  Destroy all children of this element. ;  ; virtual void DestroyMainTrans ();  Destroy the main transformation matrix, it will always be taken as identity. ;  ; virtual void DestroyOrWarn ();  Destroy this element. Prints a warning if deny-destroy is in force. ;  ; void DisableListElements (Bool_t rnr_self=kFALSE, Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; virtual void ExportToInterpreter (const char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillExtraSelectionData (nlohmann::json &, const std::set< int > &) const;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet, const std::set< int > &);  Populate set impSelSet with derived / dependant elements. ;  ; REveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; REveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; REveElement * FirstChild () const;  Returns the first child element or 0 if the list is empty. ;  ; UChar_t GetChangeBits () const",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrackList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html:12821,Modifiability,variab,variable,12821,"oveAunt (REveAunt *au);  Remove el from the list of aunts. ;  ; virtual void RemoveElement (REveElement *el);  Remove el from the list of children. ;  ; virtual void RemoveElementLocal (REveElement *el);  Perform additional local removal of el. ;  ; virtual void RemoveElements ();  Remove all elements. ;  ; virtual void RemoveElementsLocal ();  Perform additional local removal of all elements. ;  ; virtual bool RequiresExtraSelectionData () const;  ; void ResetAllCSCBits ();  ; void ResetCSCBits (UChar_t f);  ; void SaveVizParams (std::ostream &out, const TString &tag, const TString &var);  Save visualization parameters for this element with given tag. ;  ; void SetChildClass (TClass *c);  ; void SetCompound (REveCompound *c);  ; void SetCSCBits (UChar_t f);  ; void SetDestroyOnZeroRefCnt (Bool_t d);  Sets the state of flag determining if the element will be destroyed when reference count reaches zero. ;  ; void SetEditMainColor (Bool_t x);  ; void SetEditMainTransparency (Bool_t x);  ; void SetMainAlpha (Float_t alpha);  Set main-transparency via float alpha variable. ;  ; void SetMainColorPixel (Pixel_t pixel);  Convert pixel to Color_t and call SetMainColor(). ;  ; void SetMainColorPtr (Color_t *colptr);  ; void SetMainColorRGB (Float_t r, Float_t g, Float_t b);  Convert RGB values to Color_t and call SetMainColor. ;  ; void SetMainColorRGB (UChar_t r, UChar_t g, UChar_t b);  Convert RGB values to Color_t and call SetMainColor. ;  ; virtual void SetMainTransparency (Char_t t);  Set main-transparency. ;  ; void SetName (const std::string &name);  Set name of an element. ;  ; void SetNameTitle (const std::string &name, const std::string &title);  Set name and title of an element. ;  ; void SetPickable (Bool_t p);  ; void SetPickableRecursively (Bool_t p);  Set pickable state on the element and all its children. ;  ; virtual Bool_t SetRnrChildren (Bool_t rnr);  Set render state of this element's children, i.e. ;  ; virtual Bool_t SetRnrSelf (Bool_t rnr);  Set render",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrackList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html:15697,Modifiability,inherit,inherited,15697,"();  Find model element in VizDB that corresponds to previously assigned fVizTag and set fVizModel accordingly. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void Stamp ();  ; void StampColorSelection ();  ; void StampElementAdded ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; Bool_t TestCSCBits (UChar_t f) const;  ; void VizDB_Apply (const std::string &tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const std::string &tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual Int_t WriteCoreJson (nlohmann::json &cj, Int_t rnr_offset);  Write core json. ;  ;  Public Member Functions inherited from ROOT::Experimental::REveProjectable;  REveProjectable ();  Constructor. ;  ;  REveProjectable (const REveProjectable &);  Copy constructor. Does shallow copy. ;  ; virtual ~REveProjectable ();  Destructor. ;  ; virtual void AddProjected (REveProjected *p);  ; virtual void AddProjectedsToSet (std::set< REveElement * > &set);  Add the projected elements to the set, dyn-casting them to REveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; virtual void ClearProjectedList ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main color of projecteds if their color is the same as old_color. ;  ; virtual void PropagateMainTransparency (Char_t t, Char_t old_t);  Set main transparency of projecteds if their transparency is the same as the old one. ;  ; virtual void PropagateRenderState (Bool_t rnr_self, Bool_t rnr_children);  Set r",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrackList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html:16977,Modifiability,inherit,inherited,16977,"ojected *p);  ; virtual void AddProjectedsToSet (std::set< REveElement * > &set);  Add the projected elements to the set, dyn-casting them to REveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; virtual void ClearProjectedList ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main color of projecteds if their color is the same as old_color. ;  ; virtual void PropagateMainTransparency (Char_t t, Char_t old_t);  Set main transparency of projecteds if their transparency is the same as the old one. ;  ; virtual void PropagateRenderState (Bool_t rnr_self, Bool_t rnr_children);  Set render state of projecteds. ;  ; virtual void PropagateVizParams (REveElement *el=nullptr);  Set visualization parameters of projecteds. ;  ; ProjList_t & RefProjecteds ();  ; virtual void RemoveProjected (REveProjected *p);  ;  Public Member Functions inherited from TAttMarker;  TAttMarker ();  TAttMarker default constructor. ;  ;  TAttMarker (Color_t color, Style_t style, Size_t msize);  TAttMarker normal constructor. ;  ; virtual ~TAttMarker ();  TAttMarker destructor. ;  ; void Copy (TAttMarker &attmarker) const;  Copy this marker attributes to a new TAttMarker. ;  ; virtual Color_t GetMarkerColor () const;  Return the marker color. ;  ; virtual Size_t GetMarkerSize () const;  Return the marker size. ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual TClass * IsA () const;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttribut",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrackList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html:18245,Modifiability,inherit,inherited,18245,"opy (TAttMarker &attmarker) const;  Copy this marker attributes to a new TAttMarker. ;  ; virtual Color_t GetMarkerColor () const;  Return the marker color. ;  ; virtual Size_t GetMarkerSize () const;  Return the marker size. ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual TClass * IsA () const;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual TClass * IsA () const;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrackList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html:19966,Modifiability,inherit,inherited,19966,"ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Protected Member Functions; void FindMomentumLimits (REveElement *el, Bool_t recurse=kTRUE);  Loop over track elements of argument el and find highest pT and p. ;  ; Double_t RoundMomentumLimit (Double_t x);  Round the momentum limit up to a nice value. ;  ; void SanitizeMinMaxCuts ();  Set Min/Max cuts so that they are within detected limits. ;  ;  Protected Member Functions inherited from ROOT::Experimental::REveElement; virtual void AnnihilateRecursively ();  Protected member function called from REveElement::Annihilate(). ;  ; void assign_element_id_recurisvely ();  ; void assign_scene_recursively (REveScene *s);  ; ElementId_t get_mother_id () const;  ; ElementId_t get_scene_id () const;  ; virtual void PreDeleteElement ();  Vertex / normal / triangle index information for rendering. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  . Protected Attributes; Double_t fLimP;  ; Double_t fLimPt;  ; Double_t fMaxP;  ; Double_t fMaxPt;  ; Double_t fMinP;  ; Double_t fMinPt;  ; REveTrackPropagator * fPropagator {nullptr};  ; Bool_t fRecurse;  ; Bool_t fRnrLine;  ; Bool_t fRnrPoints;  ;  Protected Attributes inherited from ROOT::Experimental::REveElement; AuntList_t fAunts;  ; Bool_t fCanEditMainColor {kFALSE};  ; Bool_t fCanEditMainTrans {kFALSE};  ; Bool_t fCanEditMainTransparency {kFALSE};  ; UChar_t fChangeBits {0};  ; TClass * fChildClass {nullptr};  ; List_t fChildren;  ; REveCompound * fComp",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrackList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html:20730,Modifiability,inherit,inherited,20730,p to a nice value. ;  ; void SanitizeMinMaxCuts ();  Set Min/Max cuts so that they are within detected limits. ;  ;  Protected Member Functions inherited from ROOT::Experimental::REveElement; virtual void AnnihilateRecursively ();  Protected member function called from REveElement::Annihilate(). ;  ; void assign_element_id_recurisvely ();  ; void assign_scene_recursively (REveScene *s);  ; ElementId_t get_mother_id () const;  ; ElementId_t get_scene_id () const;  ; virtual void PreDeleteElement ();  Vertex / normal / triangle index information for rendering. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  . Protected Attributes; Double_t fLimP;  ; Double_t fLimPt;  ; Double_t fMaxP;  ; Double_t fMaxPt;  ; Double_t fMinP;  ; Double_t fMinPt;  ; REveTrackPropagator * fPropagator {nullptr};  ; Bool_t fRecurse;  ; Bool_t fRnrLine;  ; Bool_t fRnrPoints;  ;  Protected Attributes inherited from ROOT::Experimental::REveElement; AuntList_t fAunts;  ; Bool_t fCanEditMainColor {kFALSE};  ; Bool_t fCanEditMainTrans {kFALSE};  ; Bool_t fCanEditMainTransparency {kFALSE};  ; UChar_t fChangeBits {0};  ; TClass * fChildClass {nullptr};  ; List_t fChildren;  ; REveCompound * fCompound {nullptr};  ; UChar_t fCSCBits {0};  ; Color_t fDefaultColor {kPink};  ; Int_t fDenyDestroy {0};  ; Bool_t fDestroyOnZeroRefCnt {kTRUE};  Deny-destroy count. ;  ; Char_t fDestructing {kNone};  ; Short_t fImpliedSelected {0};  ; Color_t * fMainColorPtr {nullptr};  ; std::unique_ptr< REveTrans > fMainTrans;  ; Char_t fMainTransparency {0};  ; REveElement * fMother {nullptr};  ; std::string fName;  ; Bool_t fPickable {false};  ; std::unique_ptr< REveRenderData > fRenderData;  Externally assigned and controlled user data. ;  ; Bool_t fRnrChildren {kTRUE};  ; Bool_t fRnrSelf {kTRUE};  ; REveScene * fScene {nullptr};  ; REveElement * fSelectionMaster {nullptr};  ; std::string fTitle;  ; void * fUserData {nullptr};  ; REveElement * fVizModel {nullptr};  ; TString fVizTag;  Element used as ,MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrackList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html:21868,Modifiability,inherit,inherited,21868,"its {0};  ; TClass * fChildClass {nullptr};  ; List_t fChildren;  ; REveCompound * fCompound {nullptr};  ; UChar_t fCSCBits {0};  ; Color_t fDefaultColor {kPink};  ; Int_t fDenyDestroy {0};  ; Bool_t fDestroyOnZeroRefCnt {kTRUE};  Deny-destroy count. ;  ; Char_t fDestructing {kNone};  ; Short_t fImpliedSelected {0};  ; Color_t * fMainColorPtr {nullptr};  ; std::unique_ptr< REveTrans > fMainTrans;  ; Char_t fMainTransparency {0};  ; REveElement * fMother {nullptr};  ; std::string fName;  ; Bool_t fPickable {false};  ; std::unique_ptr< REveRenderData > fRenderData;  Externally assigned and controlled user data. ;  ; Bool_t fRnrChildren {kTRUE};  ; Bool_t fRnrSelf {kTRUE};  ; REveScene * fScene {nullptr};  ; REveElement * fSelectionMaster {nullptr};  ; std::string fTitle;  ; void * fUserData {nullptr};  ; REveElement * fVizModel {nullptr};  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from ROOT::Experimental::REveProjectable; ProjList_t fProjectedList;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . Private Member Functions;  REveTrackList (const REveTrackList &)=delete;  ; REveTrackList & operator= (const REveTrackList &)=delete;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::REveElement; typedef std::list< REveAunt * > AuntList_t;  ; enum  EChangeBits { ;   kCBColorSelection = BIT(0); , kCBTransBBox = BIT(1); , kCBObjProps = BIT(2); , kCBVisibility = BIT(3); , ;   kCBElementAdded = BIT(4). };  ; typedef std::list< REveElement * > List_t;  ; typedef std::set< REveElement * > Set_t;  ;  Public Types inherited from ROOT::Experimental::REveProjectable; typedef std::list< REveProjected * > ProjList_t;  ;  Stati",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrackList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html:21972,Modifiability,inherit,inherited,21972,"its {0};  ; TClass * fChildClass {nullptr};  ; List_t fChildren;  ; REveCompound * fCompound {nullptr};  ; UChar_t fCSCBits {0};  ; Color_t fDefaultColor {kPink};  ; Int_t fDenyDestroy {0};  ; Bool_t fDestroyOnZeroRefCnt {kTRUE};  Deny-destroy count. ;  ; Char_t fDestructing {kNone};  ; Short_t fImpliedSelected {0};  ; Color_t * fMainColorPtr {nullptr};  ; std::unique_ptr< REveTrans > fMainTrans;  ; Char_t fMainTransparency {0};  ; REveElement * fMother {nullptr};  ; std::string fName;  ; Bool_t fPickable {false};  ; std::unique_ptr< REveRenderData > fRenderData;  Externally assigned and controlled user data. ;  ; Bool_t fRnrChildren {kTRUE};  ; Bool_t fRnrSelf {kTRUE};  ; REveScene * fScene {nullptr};  ; REveElement * fSelectionMaster {nullptr};  ; std::string fTitle;  ; void * fUserData {nullptr};  ; REveElement * fVizModel {nullptr};  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from ROOT::Experimental::REveProjectable; ProjList_t fProjectedList;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . Private Member Functions;  REveTrackList (const REveTrackList &)=delete;  ; REveTrackList & operator= (const REveTrackList &)=delete;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::REveElement; typedef std::list< REveAunt * > AuntList_t;  ; enum  EChangeBits { ;   kCBColorSelection = BIT(0); , kCBTransBBox = BIT(1); , kCBObjProps = BIT(2); , kCBVisibility = BIT(3); , ;   kCBElementAdded = BIT(4). };  ; typedef std::list< REveElement * > List_t;  ; typedef std::set< REveElement * > Set_t;  ;  Public Types inherited from ROOT::Experimental::REveProjectable; typedef std::list< REveProjected * > ProjList_t;  ;  Stati",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrackList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html:22144,Modifiability,inherit,inherited,22144,"{kTRUE};  Deny-destroy count. ;  ; Char_t fDestructing {kNone};  ; Short_t fImpliedSelected {0};  ; Color_t * fMainColorPtr {nullptr};  ; std::unique_ptr< REveTrans > fMainTrans;  ; Char_t fMainTransparency {0};  ; REveElement * fMother {nullptr};  ; std::string fName;  ; Bool_t fPickable {false};  ; std::unique_ptr< REveRenderData > fRenderData;  Externally assigned and controlled user data. ;  ; Bool_t fRnrChildren {kTRUE};  ; Bool_t fRnrSelf {kTRUE};  ; REveScene * fScene {nullptr};  ; REveElement * fSelectionMaster {nullptr};  ; std::string fTitle;  ; void * fUserData {nullptr};  ; REveElement * fVizModel {nullptr};  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from ROOT::Experimental::REveProjectable; ProjList_t fProjectedList;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . Private Member Functions;  REveTrackList (const REveTrackList &)=delete;  ; REveTrackList & operator= (const REveTrackList &)=delete;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::REveElement; typedef std::list< REveAunt * > AuntList_t;  ; enum  EChangeBits { ;   kCBColorSelection = BIT(0); , kCBTransBBox = BIT(1); , kCBObjProps = BIT(2); , kCBVisibility = BIT(3); , ;   kCBElementAdded = BIT(4). };  ; typedef std::list< REveElement * > List_t;  ; typedef std::set< REveElement * > Set_t;  ;  Public Types inherited from ROOT::Experimental::REveProjectable; typedef std::list< REveProjected * > ProjList_t;  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrackList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html:22464,Modifiability,inherit,inherited,22464,"nrChildren {kTRUE};  ; Bool_t fRnrSelf {kTRUE};  ; REveScene * fScene {nullptr};  ; REveElement * fSelectionMaster {nullptr};  ; std::string fTitle;  ; void * fUserData {nullptr};  ; REveElement * fVizModel {nullptr};  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from ROOT::Experimental::REveProjectable; ProjList_t fProjectedList;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . Private Member Functions;  REveTrackList (const REveTrackList &)=delete;  ; REveTrackList & operator= (const REveTrackList &)=delete;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::REveElement; typedef std::list< REveAunt * > AuntList_t;  ; enum  EChangeBits { ;   kCBColorSelection = BIT(0); , kCBTransBBox = BIT(1); , kCBObjProps = BIT(2); , kCBVisibility = BIT(3); , ;   kCBElementAdded = BIT(4). };  ; typedef std::list< REveElement * > List_t;  ; typedef std::set< REveElement * > Set_t;  ;  Public Types inherited from ROOT::Experimental::REveProjectable; typedef std::list< REveProjected * > ProjList_t;  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const ch",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrackList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html:22828,Modifiability,inherit,inherited,22828,"MarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . Private Member Functions;  REveTrackList (const REveTrackList &)=delete;  ; REveTrackList & operator= (const REveTrackList &)=delete;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::REveElement; typedef std::list< REveAunt * > AuntList_t;  ; enum  EChangeBits { ;   kCBColorSelection = BIT(0); , kCBTransBBox = BIT(1); , kCBObjProps = BIT(2); , kCBVisibility = BIT(3); , ;   kCBElementAdded = BIT(4). };  ; typedef std::list< REveElement * > List_t;  ; typedef std::set< REveElement * > Set_t;  ;  Public Types inherited from ROOT::Experimental::REveProjectable; typedef std::list< REveProjected * > ProjList_t;  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Types inherited from ROOT::Experimental::REveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = BIT(0); , kCSCBTakeMotherAsMaster = BIT(1); , kCSCBApplyMainColorToAllChildren = BIT(2); , kCSCBApplyMainColorToMatchingChildren = BIT(3); , ;   kCSCBApplyMainTransparencyToAllChildren = BIT(4); , kCSCBApplyMainTransparencyToMatchingChildren = BIT(5). };  ; enum  EDestruct {",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrackList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html:22964,Modifiability,inherit,inherited,22964,"MarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . Private Member Functions;  REveTrackList (const REveTrackList &)=delete;  ; REveTrackList & operator= (const REveTrackList &)=delete;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::REveElement; typedef std::list< REveAunt * > AuntList_t;  ; enum  EChangeBits { ;   kCBColorSelection = BIT(0); , kCBTransBBox = BIT(1); , kCBObjProps = BIT(2); , kCBVisibility = BIT(3); , ;   kCBElementAdded = BIT(4). };  ; typedef std::list< REveElement * > List_t;  ; typedef std::set< REveElement * > Set_t;  ;  Public Types inherited from ROOT::Experimental::REveProjectable; typedef std::list< REveProjected * > ProjList_t;  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Types inherited from ROOT::Experimental::REveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = BIT(0); , kCSCBTakeMotherAsMaster = BIT(1); , kCSCBApplyMainColorToAllChildren = BIT(2); , kCSCBApplyMainColorToMatchingChildren = BIT(3); , ;   kCSCBApplyMainTransparencyToAllChildren = BIT(4); , kCSCBApplyMainTransparencyToMatchingChildren = BIT(5). };  ; enum  EDestruct {",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrackList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html:23499,Modifiability,inherit,inherited,23499,"_t;  ; typedef std::set< REveElement * > Set_t;  ;  Public Types inherited from ROOT::Experimental::REveProjectable; typedef std::list< REveProjected * > ProjList_t;  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Types inherited from ROOT::Experimental::REveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = BIT(0); , kCSCBTakeMotherAsMaster = BIT(1); , kCSCBApplyMainColorToAllChildren = BIT(2); , kCSCBApplyMainColorToMatchingChildren = BIT(3); , ;   kCSCBApplyMainTransparencyToAllChildren = BIT(4); , kCSCBApplyMainTransparencyToMatchingChildren = BIT(5). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Static Protected Member Functions inherited from ROOT::Experimental::REveElement; static const std::string & ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  . #include <ROOT/REveTrack.hxx>. Inheritance diagram for ROOT::Experimental::REveTrackList:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ REveTrackList() [1/3]. ROOT::Experimental::REveTrackList::REveTrackList ; (; const REveTrackList & ; ). privatedelete . ◆ REveTrackList() [2/3]. REveTrackList::REveTrackList ; (; REveTrackPropagator * ; prop = nullptr). Co",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrackList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html:23696,Modifiability,inherit,inherited,23696,"_t;  ; typedef std::set< REveElement * > Set_t;  ;  Public Types inherited from ROOT::Experimental::REveProjectable; typedef std::list< REveProjected * > ProjList_t;  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Types inherited from ROOT::Experimental::REveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = BIT(0); , kCSCBTakeMotherAsMaster = BIT(1); , kCSCBApplyMainColorToAllChildren = BIT(2); , kCSCBApplyMainColorToMatchingChildren = BIT(3); , ;   kCSCBApplyMainTransparencyToAllChildren = BIT(4); , kCSCBApplyMainTransparencyToMatchingChildren = BIT(5). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Static Protected Member Functions inherited from ROOT::Experimental::REveElement; static const std::string & ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  . #include <ROOT/REveTrack.hxx>. Inheritance diagram for ROOT::Experimental::REveTrackList:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ REveTrackList() [1/3]. ROOT::Experimental::REveTrackList::REveTrackList ; (; const REveTrackList & ; ). privatedelete . ◆ REveTrackList() [2/3]. REveTrackList::REveTrackList ; (; REveTrackPropagator * ; prop = nullptr). Co",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrackList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html:24166,Modifiability,inherit,inherited,24166,"e_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Types inherited from ROOT::Experimental::REveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = BIT(0); , kCSCBTakeMotherAsMaster = BIT(1); , kCSCBApplyMainColorToAllChildren = BIT(2); , kCSCBApplyMainColorToMatchingChildren = BIT(3); , ;   kCSCBApplyMainTransparencyToAllChildren = BIT(4); , kCSCBApplyMainTransparencyToMatchingChildren = BIT(5). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Static Protected Member Functions inherited from ROOT::Experimental::REveElement; static const std::string & ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  . #include <ROOT/REveTrack.hxx>. Inheritance diagram for ROOT::Experimental::REveTrackList:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ REveTrackList() [1/3]. ROOT::Experimental::REveTrackList::REveTrackList ; (; const REveTrackList & ; ). privatedelete . ◆ REveTrackList() [2/3]. REveTrackList::REveTrackList ; (; REveTrackPropagator * ; prop = nullptr). Constructor. ; If track-propagator argument is 0, a new default one is created. ; Definition at line 563 of file REveTrack.cxx. ◆ REveTrackList() [3/3]. REveTrackList::REveTrackList ; (; const std::string & ; name, . REveTrackPropagator * ; prop = nullptr . ). Constructor. ; If track-propagator argument is 0, a new default one is created. ; Definition at line 589 of file REveTrack.cxx. ◆ ~REveTrackList(). REveTrackList::~",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrackList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html:19916,Safety,detect,detected,19916,"line width. ;  ; virtual TClass * IsA () const;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Protected Member Functions; void FindMomentumLimits (REveElement *el, Bool_t recurse=kTRUE);  Loop over track elements of argument el and find highest pT and p. ;  ; Double_t RoundMomentumLimit (Double_t x);  Round the momentum limit up to a nice value. ;  ; void SanitizeMinMaxCuts ();  Set Min/Max cuts so that they are within detected limits. ;  ;  Protected Member Functions inherited from ROOT::Experimental::REveElement; virtual void AnnihilateRecursively ();  Protected member function called from REveElement::Annihilate(). ;  ; void assign_element_id_recurisvely ();  ; void assign_scene_recursively (REveScene *s);  ; ElementId_t get_mother_id () const;  ; ElementId_t get_scene_id () const;  ; virtual void PreDeleteElement ();  Vertex / normal / triangle index information for rendering. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  . Protected Attributes; Double_t fLimP;  ; Double_t fLimPt;  ; Double_t fMaxP;  ; Double_t fMaxPt;  ; Double_t fMinP;  ; Double_t fMinPt;  ; REveTrackPropagator * fPropagator {nullptr};  ; Bool_t fRecurse;  ; Bool_t fRnrLine;  ; Bool_t fRnrPoints;  ;  Protected Attributes inherited from ROOT::Experimental::REveElement; AuntList_t fAunts;  ; Bool_t fCanEditMainColor {kFALSE};  ; Bool_t fCanEditMainTrans {kFALSE};  ; Bool_t fCa",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrackList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html:28876,Safety,detect,detected,28876,"e . Definition at line 207 of file REveTrack.hxx. ◆ MakeTracks(). void REveTrackList::MakeTracks ; (; Bool_t ; recurse = kTRUE). Regenerate the visual representations of tracks. ; The momentum limits are rescanned during the same traversal. ; Definition at line 635 of file REveTrack.cxx. ◆ operator=(). REveTrackList & ROOT::Experimental::REveTrackList::operator= ; (; const REveTrackList & ; ). privatedelete . ◆ ProjectedClass(). TClass * REveTrackList::ProjectedClass ; (; const REveProjection * ; p); const. overridevirtual . Virtual from REveProjectable, returns REveTrackListProjected class. ; Implements ROOT::Experimental::REveProjectable.; Definition at line 1136 of file REveTrack.cxx. ◆ RoundMomentumLimit(). Double_t REveTrackList::RoundMomentumLimit ; (; Double_t ; x). protected . Round the momentum limit up to a nice value. ; Definition at line 706 of file REveTrack.cxx. ◆ SanitizeMinMaxCuts(). void REveTrackList::SanitizeMinMaxCuts ; (; ). protected . Set Min/Max cuts so that they are within detected limits. ; Definition at line 719 of file REveTrack.cxx. ◆ SelectByP() [1/2]. void REveTrackList::SelectByP ; (; Double_t ; min_p, . Double_t ; max_p . ). Select visibility of tracks by momentum. ; If data-member fRecurse is set, the selection is applied recursively to all children. ; Definition at line 1007 of file REveTrack.cxx. ◆ SelectByP() [2/2]. void REveTrackList::SelectByP ; (; Double_t ; min_p, . Double_t ; max_p, . REveElement * ; el . ). Select visibility of el's children tracks by momentum. ; Definition at line 1027 of file REveTrack.cxx. ◆ SelectByPt() [1/2]. void REveTrackList::SelectByPt ; (; Double_t ; min_pt, . Double_t ; max_pt . ). Select visibility of tracks by transverse momentum. ; If data-member fRecurse is set, the selection is applied recursively to all children. ; Definition at line 965 of file REveTrack.cxx. ◆ SelectByPt() [2/2]. void REveTrackList::SelectByPt ; (; Double_t ; min_pt, . Double_t ; max_pt, . REveElement * ; el . ). Select v",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrackList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html:8452,Availability,error,error,8452,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrans.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html:8541,Availability,error,error,8541,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrans.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html:8696,Availability,error,error,8696,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrans.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html:8993,Availability,error,error,8993,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrans.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html:13546,Availability,error,error,13546,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Member Functions; Double_t Norm3Column (Int_t col);  Norm 3-vector in column col. ;  ; Double_t Orto3Column (Int_t col, Int_t ref);  Orto-norm 3-vector in column col with respect to column ref. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrans.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html:8458,Integrability,message,message,8458,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrans.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html:8999,Integrability,message,message,8999,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrans.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html:10201,Integrability,message,message,10201,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; virtual TClass * IsA () const;  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const ch",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrans.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html:13552,Integrability,message,message,13552,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Member Functions; Double_t Norm3Column (Int_t col);  Norm 3-vector in column col. ;  ; Double_t Orto3Column (Int_t col, Int_t ref);  Orto-norm 3-vector in column col with respect to column ref. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrans.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html:13925,Integrability,message,message,13925,"rimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Member Functions; Double_t Norm3Column (Int_t col);  Norm 3-vector in column col. ;  ; Double_t Orto3Column (Int_t col, Int_t ref);  Orto-norm 3-vector in column col with respect to column ref. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Float_t fA1;  ; Float_t fA2;  ; Float_t fA3;  ; Bool_t fAsOK;  ; Bool_t fEditRotation;  ; Bool_t fEditScale;  ; Bool_t fEditTrans;  ; Double32_t fM [16];  ; Bool_t fUseTrans;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrans.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html:6691,Modifiability,inherit,inherited,6691,"etScaleZ (Double_t sz);  Change z scaling. ;  ; void SetTrans (const REveTrans &t, Bool_t copyAngles=kTRUE);  Set matrix from another,. ;  ; void SetupFromToVec (const REveVector &from, const REveVector &to);  A function for creating a rotation matrix that rotates a vector called ""from"" into another vector called ""to"". ;  ; void SetupRotation (Int_t i, Int_t j, Double_t f);  Setup the matrix as an elementary rotation. ;  ; void SetUseTrans (Bool_t v);  ; void TransposeRotationPart ();  Transpose 3x3 rotation sub-matrix. ;  ; void UnitRot ();  Reset rotation part of the matrix to unity. ;  ; void UnitTrans ();  Reset matrix to unity. ;  ; Double_t Unscale ();  Remove scaling, make all base vectors of unit length. ;  ; void Unscale (Double_t &sx, Double_t &sy, Double_t &sz);  Remove scaling, make all base vectors of unit length. ;  ; void ZeroTrans (Double_t w=1.0);  Reset matrix to zero, only the perspective scaling is set to w (1 by default). ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrans.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html:8088,Modifiability,inherit,inheritance,8088,"pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrans.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html:10299,Modifiability,inherit,inherits,10299,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; virtual TClass * IsA () const;  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a b",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrans.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html:10416,Modifiability,inherit,inherits,10416,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; virtual TClass * IsA () const;  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not pro",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrans.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html:14444,Modifiability,inherit,inherited,14444,"st char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Member Functions; Double_t Norm3Column (Int_t col);  Norm 3-vector in column col. ;  ; Double_t Orto3Column (Int_t col, Int_t ref);  Orto-norm 3-vector in column col with respect to column ref. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Float_t fA1;  ; Float_t fA2;  ; Float_t fA3;  ; Bool_t fAsOK;  ; Bool_t fEditRotation;  ; Bool_t fEditScale;  ; Bool_t fEditTrans;  ; Double32_t fM [16];  ; Bool_t fUseTrans;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static P",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrans.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html:14871,Modifiability,inherit,inherited,14871," ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Member Functions; Double_t Norm3Column (Int_t col);  Norm 3-vector in column col. ;  ; Double_t Orto3Column (Int_t col, Int_t ref);  Orto-norm 3-vector in column col with respect to column ref. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Float_t fA1;  ; Float_t fA2;  ; Float_t fA3;  ; Bool_t fAsOK;  ; Bool_t fEditRotation;  ; Bool_t fEditScale;  ; Bool_t fEditTrans;  ; Double32_t fM [16];  ; Bool_t fUseTrans;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObject",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrans.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html:15527,Modifiability,inherit,inherited,15527,"rotected Attributes; Float_t fA1;  ; Float_t fA2;  ; Float_t fA3;  ; Bool_t fAsOK;  ; Bool_t fEditRotation;  ; Bool_t fEditScale;  ; Bool_t fEditTrans;  ; Double32_t fM [16];  ; Bool_t fUseTrans;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <ROOT/REveTrans.hxx>. Inheritance diagram for ROOT::Experimental::REveTrans:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ REveTrans() [1/4]. REveTrans::REveTrans ; (; ). Default constructor. ; Definition at line 72 of file REveTrans.cxx. ◆ REveTrans() [2/4]. REveTrans::REveTrans ; (; const REveTrans & ; t). Constructor. ; Definition at line 86 of file REveTrans.cxx. ◆ REveTrans() [3/4]. REveTrans::REveTrans ; (; const Do",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrans.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html:16030,Modifiability,inherit,inherited,16030," { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <ROOT/REveTrans.hxx>. Inheritance diagram for ROOT::Experimental::REveTrans:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ REveTrans() [1/4]. REveTrans::REveTrans ; (; ). Default constructor. ; Definition at line 72 of file REveTrans.cxx. ◆ REveTrans() [2/4]. REveTrans::REveTrans ; (; const REveTrans & ; t). Constructor. ; Definition at line 86 of file REveTrans.cxx. ◆ REveTrans() [3/4]. REveTrans::REveTrans ; (; const Double_t ; arr[16]). Constructor. ; Definition at line 100 of file REveTrans.cxx. ◆ REveTrans() [4/4]. REveTrans::REveTrans ; (; const Float_t ; arr[16]). Constructor. ; Definition at line 114 of file REveTrans.cxx. ◆ ~REveTrans(). ROOT::Experimental::REveTrans::~REveTrans ; (; ). inlineoverride . Definition at line 53 of file REveTrans.hxx. Member Function Documentation. ◆ Array() [1/2]. Double_t * ROOT::Experimental::REveT",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrans.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html:9930,Security,hash,hash,9930," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; virtual TClass * IsA () const;  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other obje",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveTrans.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html:2902,Availability,error,error,2902,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html:2991,Availability,error,error,2991,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html:3146,Availability,error,error,3146,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html:3443,Availability,error,error,3443,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html:8117,Availability,error,error,8117,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static void DisableTObjectStreamersForVSDStruct ();  Disable TObject streamers for those VSD structs that inherit from TObject directly. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html:2908,Integrability,message,message,2908,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html:3449,Integrability,message,message,3449,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html:4651,Integrability,message,message,4651,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; virtual TClass * IsA () const;  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const ch",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html:8123,Integrability,message,message,8123,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static void DisableTObjectStreamersForVSDStruct ();  Disable TObject streamers for those VSD structs that inherit from TObject directly. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html:8496,Integrability,message,message,8496,"rimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static void DisableTObjectStreamersForVSDStruct ();  Disable TObject streamers for those VSD structs that inherit from TObject directly. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes;",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html:1141,Modifiability,inherit,inherited,1141,"|; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Attributes |; Private Member Functions |; List of all members ; ROOT::Experimental::REveVSD Class Reference. . Definition at line 25 of file REveVSD.hxx. Public Member Functions;  REveVSD (const char *name=""REveVSD"", const char *title="""");  Constructor. ;  ;  ~REveVSD () override;  Destructor. ;  ;  ClassDefOverride (REveVSD, 1);  ; virtual void CreateBranches ();  Create internal VSD branches. ;  ; virtual void CreateTrees ();  Create internal trees. ;  ; virtual void DeleteTrees ();  Delete internal trees. ;  ; virtual void LoadTrees ();  Load internal trees from directory. ;  ; virtual void SetBranchAddresses ();  Set branche addresses of internal trees. ;  ; virtual void SetDirectory (TDirectory *dir);  Set directory in which the trees are (or will be) created. ;  ; virtual void WriteTrees ();  Does nothing here ... reimplemented in sub-classes. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html:2538,Modifiability,inherit,inheritance,2538,"pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html:4749,Modifiability,inherit,inherits,4749,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; virtual TClass * IsA () const;  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a b",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html:4866,Modifiability,inherit,inherits,4866,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; virtual TClass * IsA () const;  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not pro",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html:8916,Modifiability,inherit,inherit,8916,"the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static void DisableTObjectStreamersForVSDStruct ();  Disable TObject streamers for those VSD structs that inherit from TObject directly. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; REveCluster fC;  ; REveRecCascade fCC;  ; REveMCRecCrossRef fGI;  ; REveHit fH;  ; REveMCTrack fK;  Sim-Rec cross references. ;  ; REveRecKink fKK;  ; REveCluster * fpC {nullptr};  ; REveRecCascade * fpCC {nullptr};  ; REveMCRecCrossRef * fpGI {nullptr};  ; REveHit * fpH {nullptr};  ; REveMCTrack * fpK {nullptr};  ; REveRecKink * fpKK {nullptr};  ; REveRecTrack * fpR {nu",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html:8984,Modifiability,inherit,inherited,8984,"sgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static void DisableTObjectStreamersForVSDStruct ();  Disable TObject streamers for those VSD structs that inherit from TObject directly. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; REveCluster fC;  ; REveRecCascade fCC;  ; REveMCRecCrossRef fGI;  ; REveHit fH;  ; REveMCTrack fK;  Sim-Rec cross references. ;  ; REveRecKink fKK;  ; REveCluster * fpC {nullptr};  ; REveRecCascade * fpCC {nullptr};  ; REveMCRecCrossRef * fpGI {nullptr};  ; REveHit * fpH {nullptr};  ; REveMCTrack * fpK {nullptr};  ; REveRecKink * fpKK {nullptr};  ; REveRecTrack * fpR {nullptr};  ; REveRecV0 * fpV0 {nullptr};  ; REveRecTrack fR;  ; TTree * fTreeC {nullptr};  Hits. ;  ; TTree * fTreeCC {nullptr};  VO's. ;  ; TTree * fTreeGI {nullptr};  Cascades. ;  ; TTree * fTreeH {nullptr};  Kinematics. ;  ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html:10564,Modifiability,inherit,inherited,10564,"cKink fKK;  ; REveCluster * fpC {nullptr};  ; REveRecCascade * fpCC {nullptr};  ; REveMCRecCrossRef * fpGI {nullptr};  ; REveHit * fpH {nullptr};  ; REveMCTrack * fpK {nullptr};  ; REveRecKink * fpKK {nullptr};  ; REveRecTrack * fpR {nullptr};  ; REveRecV0 * fpV0 {nullptr};  ; REveRecTrack fR;  ; TTree * fTreeC {nullptr};  Hits. ;  ; TTree * fTreeCC {nullptr};  VO's. ;  ; TTree * fTreeGI {nullptr};  Cascades. ;  ; TTree * fTreeH {nullptr};  Kinematics. ;  ; TTree * fTreeK {nullptr};  ; TTree * fTreeKK {nullptr};  Reconstructed tracks. ;  ; TTree * fTreeR {nullptr};  Clusters. ;  ; TTree * fTreeV0 {nullptr};  Kinks. ;  ; REveRecV0 fV0;  . Protected Attributes; Int_t fBuffSize {0};  ; TDirectory * fDirectory {nullptr};  ; TFile * fFile {nullptr};  ; Int_t fVerbose {0};  . Private Member Functions;  REveVSD (const REveVSD &)=delete;  ; REveVSD & operator= (const REveVSD &)=delete;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <ROOT/REveVSD.hxx>. Inheritance diagram for ROOT::Experimental::REveVSD:. This browser is not able to show SVG: try Firefox, Chrome",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html:11205,Modifiability,inherit,inherited,11205,"Directory * fDirectory {nullptr};  ; TFile * fFile {nullptr};  ; Int_t fVerbose {0};  . Private Member Functions;  REveVSD (const REveVSD &)=delete;  ; REveVSD & operator= (const REveVSD &)=delete;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <ROOT/REveVSD.hxx>. Inheritance diagram for ROOT::Experimental::REveVSD:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ REveVSD() [1/2]. ROOT::Experimental::REveVSD::REveVSD ; (; const REveVSD & ; ). privatedelete . ◆ REveVSD() [2/2]. REveVSD::REveVSD ; (; const char * ; name = ""REveVSD"", . const char * ; title = """" . ). Constructor. ; Definition at line 27 of file REveVSD.cxx. ◆ ~REveVSD(). REveVSD::~REveVSD ; (; ). override . Destructor. ; Definition at line 58 of file REveVSD.cxx. Member Function Documentation. ◆ ClassDefOverride(). ROOT::Experimental::REveVSD::ClassDefOverride ; (; REveVSD ; , . 1 ;  . ). ◆ CreateBranches(). void REveVSD::CreateBranches ; (; ). virtual . Create internal VSD branches. ; Definition at li",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html:11304,Modifiability,inherit,inherited,11304,"Directory * fDirectory {nullptr};  ; TFile * fFile {nullptr};  ; Int_t fVerbose {0};  . Private Member Functions;  REveVSD (const REveVSD &)=delete;  ; REveVSD & operator= (const REveVSD &)=delete;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <ROOT/REveVSD.hxx>. Inheritance diagram for ROOT::Experimental::REveVSD:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ REveVSD() [1/2]. ROOT::Experimental::REveVSD::REveVSD ; (; const REveVSD & ; ). privatedelete . ◆ REveVSD() [2/2]. REveVSD::REveVSD ; (; const char * ; name = ""REveVSD"", . const char * ; title = """" . ). Constructor. ; Definition at line 27 of file REveVSD.cxx. ◆ ~REveVSD(). REveVSD::~REveVSD ; (; ). override . Destructor. ; Definition at line 58 of file REveVSD.cxx. Member Function Documentation. ◆ ClassDefOverride(). ROOT::Experimental::REveVSD::ClassDefOverride ; (; REveVSD ; , . 1 ;  . ). ◆ CreateBranches(). void REveVSD::CreateBranches ; (; ). virtual . Create internal VSD branches. ; Definition at li",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html:12767,Modifiability,inherit,inherit,12767,"EveVSD ; (; const REveVSD & ; ). privatedelete . ◆ REveVSD() [2/2]. REveVSD::REveVSD ; (; const char * ; name = ""REveVSD"", . const char * ; title = """" . ). Constructor. ; Definition at line 27 of file REveVSD.cxx. ◆ ~REveVSD(). REveVSD::~REveVSD ; (; ). override . Destructor. ; Definition at line 58 of file REveVSD.cxx. Member Function Documentation. ◆ ClassDefOverride(). ROOT::Experimental::REveVSD::ClassDefOverride ; (; REveVSD ; , . 1 ;  . ). ◆ CreateBranches(). void REveVSD::CreateBranches ; (; ). virtual . Create internal VSD branches. ; Definition at line 103 of file REveVSD.cxx. ◆ CreateTrees(). void REveVSD::CreateTrees ; (; ). virtual . Create internal trees. ; Definition at line 73 of file REveVSD.cxx. ◆ DeleteTrees(). void REveVSD::DeleteTrees ; (; ). virtual . Delete internal trees. ; Definition at line 89 of file REveVSD.cxx. ◆ DisableTObjectStreamersForVSDStruct(). void REveVSD::DisableTObjectStreamersForVSDStruct ; (; ). static . Disable TObject streamers for those VSD structs that inherit from TObject directly. ; Definition at line 190 of file REveVSD.cxx. ◆ LoadTrees(). void REveVSD::LoadTrees ; (; ). virtual . Load internal trees from directory. ; Definition at line 150 of file REveVSD.cxx. ◆ operator=(). REveVSD & ROOT::Experimental::REveVSD::operator= ; (; const REveVSD & ; ). privatedelete . ◆ SetBranchAddresses(). void REveVSD::SetBranchAddresses ; (; ). virtual . Set branche addresses of internal trees. ; Definition at line 123 of file REveVSD.cxx. ◆ SetDirectory(). void REveVSD::SetDirectory ; (; TDirectory * ; dir). virtual . Set directory in which the trees are (or will be) created. ; Definition at line 65 of file REveVSD.cxx. ◆ WriteTrees(). void REveVSD::WriteTrees ; (; ). virtual . Does nothing here ... reimplemented in sub-classes. ; Definition at line 143 of file REveVSD.cxx. Member Data Documentation. ◆ fBuffSize. Int_t ROOT::Experimental::REveVSD::fBuffSize {0}. protected . Definition at line 33 of file REveVSD.hxx. ◆ fC. REveCluster",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html:4380,Security,hash,hash,4380," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; virtual TClass * IsA () const;  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other obje",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1REveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RException.html:457,Availability,error,error,457,". ROOT: ROOT::Experimental::RException Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Experimental::RException Class ReferenceCore ROOT classes » Base ROOT classes. ; Base class for all ROOT issued exceptions. ; Definition at line 78 of file RError.hxx. Public Member Functions;  RException (const RError &error);  ; const RError & GetError () const;  . Private Attributes; RError fError;  . #include <ROOT/RError.hxx>. Inheritance diagram for ROOT::Experimental::RException:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RException(). ROOT::Experimental::RException::RException ; (; const RError & ; error). inlineexplicit . Definition at line 81 of file RError.hxx. Member Function Documentation. ◆ GetError(). const RError & ROOT::Experimental::RException::GetError ; (; ); const. inline . Definition at line 82 of file RError.hxx. Member Data Documentation. ◆ fError. RError ROOT::Experimental::RException::fError. private . Definition at line 79 of file RError.hxx. Libraries for ROOT::Experimental::RException:. [legend]; The documentation for this class was generated from the following file:; core/foundation/v7/inc/ROOT/RError.hxx. ROOTExperimentalRException. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:09 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RException.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RException.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RException.html:845,Availability,error,error,845,". ROOT: ROOT::Experimental::RException Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Experimental::RException Class ReferenceCore ROOT classes » Base ROOT classes. ; Base class for all ROOT issued exceptions. ; Definition at line 78 of file RError.hxx. Public Member Functions;  RException (const RError &error);  ; const RError & GetError () const;  . Private Attributes; RError fError;  . #include <ROOT/RError.hxx>. Inheritance diagram for ROOT::Experimental::RException:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RException(). ROOT::Experimental::RException::RException ; (; const RError & ; error). inlineexplicit . Definition at line 81 of file RError.hxx. Member Function Documentation. ◆ GetError(). const RError & ROOT::Experimental::RException::GetError ; (; ); const. inline . Definition at line 82 of file RError.hxx. Member Data Documentation. ◆ fError. RError ROOT::Experimental::RException::fError. private . Definition at line 79 of file RError.hxx. Libraries for ROOT::Experimental::RException:. [legend]; The documentation for this class was generated from the following file:; core/foundation/v7/inc/ROOT/RError.hxx. ROOTExperimentalRException. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:09 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RException.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RException.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html:10372,Availability,avail,available,10372,"nerateColumnsImpl ();  For writing, use the currently set column representative. ;  ; template<std::uint32_t ColumnIndexT, typename HeadT , typename... TailTs> ; void GenerateColumnsImpl (const ColumnRepresentation_t &representation, std::uint16_t representationIndex);  Helpers for generating columns. ;  ; template<typename... ColumnCppTs> ; void GenerateColumnsImpl (const RNTupleDescriptor &desc);  For reading, use the on-disk column list. ;  ; virtual const RColumnRepresentations & GetColumnRepresentations () const;  Implementations in derived classes should return a static RColumnRepresentations object. ;  ; virtual RExtraTypeInfoDescriptor GetExtraTypeInfo () const;  ; virtual bool HasExtraTypeInfo () const;  ; void Read (NTupleSize_t globalIndex, void *to);  Populate a single value with data from the field. ;  ; void Read (RClusterIndex clusterIndex, void *to);  Populate a single value with data from the field. ;  ; std::size_t ReadBulk (const RBulkSpec &bulkSpec);  Returns the number of newly available values, that is the number of bools in bulkSpec.fMaskAvail that flipped from false to true. ;  ; virtual std::size_t ReadBulkImpl (const RBulkSpec &bulkSpec);  General implementation of bulk read. ;  ; void RemoveReadCallback (size_t idx);  ;  Static Protected Member Functions inherited from ROOT::Experimental::RFieldBase; static std::size_t CallAppendOn (RFieldBase &other, const void *from);  Allow derived classes to call Append and Read on other (sub) fields. ;  ; static void CallConstructValueOn (const RFieldBase &other, void *where);  Allow derived classes to call ConstructValue(void *) and GetDeleter on other (sub) fields. ;  ; static void * CallCreateObjectRawPtrOn (RFieldBase &other);  ; static void CallReadOn (RFieldBase &other, NTupleSize_t globalIndex, void *to);  ; static void CallReadOn (RFieldBase &other, RClusterIndex clusterIndex, void *to);  ; static RResult< std::unique_ptr< RFieldBase > > Create (const std::string &fieldName, const std::string &",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html:2954,Energy Efficiency,allocate,allocates,2954,"std::string_view name, std::string_view type, ENTupleStructure structure, bool isSimple, std::size_t nRepetitions=0);  The constructor creates the underlying column objects and connects them to either a sink or a source. ;  ; virtual ~RFieldBase ()=default;  ; RSchemaIterator begin ();  ; RConstSchemaIterator begin () const;  ; RValue BindValue (std::shared_ptr< void > objPtr);  Creates a value from a memory location with an already constructed object. ;  ; RConstSchemaIterator cbegin () const;  ; RConstSchemaIterator cend () const;  ; std::unique_ptr< RFieldBase > Clone (std::string_view newName) const;  Copies the field and its sub fields using a possibly new name and a new, unconnected set of columns. ;  ; RBulk CreateBulk ();  The returned bulk is initially empty; RBulk::ReadBulk will construct the array of values. ;  ; template<> ; std::unique_ptr< void, typename RFieldBase::RCreateObjectDeleter< void >::deleter > CreateObject () const;  ; template<typename T > ; std::unique_ptr< T, typename RCreateObjectDeleter< T >::deleter > CreateObject () const;  Generates an object of the field type and allocates new initialized memory according to the type. ;  ; template<> ; std::unique_ptr< void, typename ROOT::Experimental::RFieldBase::RCreateObjectDeleter< void >::deleter > CreateObject () const;  ; RValue CreateValue ();  Generates an object of the field type and wraps the created object in a shared pointer and returns it an RValue connected to the field. ;  ; RSchemaIterator end ();  ; RConstSchemaIterator end () const;  ; RColumnRepresentations::Selection_t GetColumnRepresentatives () const;  Returns the fColumnRepresentative pointee or, if unset, the field's default representative. ;  ; const std::string & GetDescription () const;  Get the field's description. ;  ; const std::string & GetFieldName () const;  ; virtual std::uint32_t GetFieldVersion () const;  Indicates an evolution of the mapping scheme from C++ type to columns. ;  ; std::size_t GetNRepetitions () ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html:3224,Integrability,wrap,wraps,3224,"t;  ; RValue BindValue (std::shared_ptr< void > objPtr);  Creates a value from a memory location with an already constructed object. ;  ; RConstSchemaIterator cbegin () const;  ; RConstSchemaIterator cend () const;  ; std::unique_ptr< RFieldBase > Clone (std::string_view newName) const;  Copies the field and its sub fields using a possibly new name and a new, unconnected set of columns. ;  ; RBulk CreateBulk ();  The returned bulk is initially empty; RBulk::ReadBulk will construct the array of values. ;  ; template<> ; std::unique_ptr< void, typename RFieldBase::RCreateObjectDeleter< void >::deleter > CreateObject () const;  ; template<typename T > ; std::unique_ptr< T, typename RCreateObjectDeleter< T >::deleter > CreateObject () const;  Generates an object of the field type and allocates new initialized memory according to the type. ;  ; template<> ; std::unique_ptr< void, typename ROOT::Experimental::RFieldBase::RCreateObjectDeleter< void >::deleter > CreateObject () const;  ; RValue CreateValue ();  Generates an object of the field type and wraps the created object in a shared pointer and returns it an RValue connected to the field. ;  ; RSchemaIterator end ();  ; RConstSchemaIterator end () const;  ; RColumnRepresentations::Selection_t GetColumnRepresentatives () const;  Returns the fColumnRepresentative pointee or, if unset, the field's default representative. ;  ; const std::string & GetDescription () const;  Get the field's description. ;  ; const std::string & GetFieldName () const;  ; virtual std::uint32_t GetFieldVersion () const;  Indicates an evolution of the mapping scheme from C++ type to columns. ;  ; std::size_t GetNRepetitions () const;  ; DescriptorId_t GetOnDiskId () const;  ; std::uint32_t GetOnDiskTypeChecksum () const;  Return checksum stored in the field descriptor; only valid after a call to ConnectPageSource(), if the field stored a type checksum. ;  ; std::uint32_t GetOnDiskTypeVersion () const;  Return the C++ type version stored in the f",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html:729,Modifiability,inherit,inherited,729,". ROOT: ROOT::Experimental::RField< T, typename > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; ROOT::Experimental::RField< T, typename > Class Template Referencefinal. ; template<typename T, typename = void>; class ROOT::Experimental::RField< T, typename >Classes with dictionaries that can be inspected by TClass. ; Definition at line 241 of file RField.hxx. Public Member Functions;  RField (RField &&other)=default;  ;  RField (std::string_view name);  ;  ~RField () final=default;  ; RField & operator= (RField &&other)=default;  ;  Public Member Functions inherited from ROOT::Experimental::RClassField;  RClassField (RClassField &&other)=default;  ;  RClassField (std::string_view fieldName, std::string_view className);  ;  ~RClassField () override=default;  ; void AcceptVisitor (Detail::RFieldVisitor &visitor) const final;  ; size_t GetAlignment () const final;  As a rule of thumb, the alignment is equal to the size of the type. ;  ; std::uint32_t GetTypeChecksum () const final;  Return the current TClass reported checksum of this class. Only valid if kTraitTypeChecksum is set. ;  ; std::uint32_t GetTypeVersion () const final;  Indicates an evolution of the C++ type itself. ;  ; size_t GetValueSize () const final;  The number of bytes taken by a value of the appropriate type. ;  ; RClassField & operator= (RClassField &&other)=default;  ; std::vector< RValue > SplitValue (const RValue &value) const final;  Creates the list of direct child values given a value for this field. ;  ;  Public Member Functions inherited from ROOT::Experimental::RFieldBase;  RFieldBase (const RFieldBase &)=delete;  ;  RFieldBase (RFieldBase &&)=default;  ;  RFieldBase (std::string_view name, std::string_view type, ENTupleStructure structure, bool isSimple, std::size_t nRepetitions=0);  The constructor creates the underlying colu",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html:1695,Modifiability,inherit,inherited,1695,"ame, std::string_view className);  ;  ~RClassField () override=default;  ; void AcceptVisitor (Detail::RFieldVisitor &visitor) const final;  ; size_t GetAlignment () const final;  As a rule of thumb, the alignment is equal to the size of the type. ;  ; std::uint32_t GetTypeChecksum () const final;  Return the current TClass reported checksum of this class. Only valid if kTraitTypeChecksum is set. ;  ; std::uint32_t GetTypeVersion () const final;  Indicates an evolution of the C++ type itself. ;  ; size_t GetValueSize () const final;  The number of bytes taken by a value of the appropriate type. ;  ; RClassField & operator= (RClassField &&other)=default;  ; std::vector< RValue > SplitValue (const RValue &value) const final;  Creates the list of direct child values given a value for this field. ;  ;  Public Member Functions inherited from ROOT::Experimental::RFieldBase;  RFieldBase (const RFieldBase &)=delete;  ;  RFieldBase (RFieldBase &&)=default;  ;  RFieldBase (std::string_view name, std::string_view type, ENTupleStructure structure, bool isSimple, std::size_t nRepetitions=0);  The constructor creates the underlying column objects and connects them to either a sink or a source. ;  ; virtual ~RFieldBase ()=default;  ; RSchemaIterator begin ();  ; RConstSchemaIterator begin () const;  ; RValue BindValue (std::shared_ptr< void > objPtr);  Creates a value from a memory location with an already constructed object. ;  ; RConstSchemaIterator cbegin () const;  ; RConstSchemaIterator cend () const;  ; std::unique_ptr< RFieldBase > Clone (std::string_view newName) const;  Copies the field and its sub fields using a possibly new name and a new, unconnected set of columns. ;  ; RBulk CreateBulk ();  The returned bulk is initially empty; RBulk::ReadBulk will construct the array of values. ;  ; template<> ; std::unique_ptr< void, typename RFieldBase::RCreateObjectDeleter< void >::deleter > CreateObject () const;  ; template<typename T > ; std::unique_ptr< T, typename RCreateObje",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html:5317,Modifiability,inherit,inherited,5317,"eparated by dots (""grandparent.parent.child"") ;  ; EState GetState () const;  ; ENTupleStructure GetStructure () const;  ; std::vector< RFieldBase * > GetSubFields ();  ; std::vector< const RFieldBase * > GetSubFields () const;  ; int GetTraits () const;  ; const std::string & GetTypeAlias () const;  ; const std::string & GetTypeName () const;  ; bool HasDefaultColumnRepresentative () const;  Whether or not an explicit column representative was set. ;  ; bool HasReadCallbacks () const;  ; bool IsSimple () const;  ; RFieldBase & operator= (const RFieldBase &)=delete;  ; RFieldBase & operator= (RFieldBase &&)=default;  ; void SetColumnRepresentatives (const RColumnRepresentations::Selection_t &representatives);  Fixes a column representative. ;  ; void SetDescription (std::string_view description);  ; void SetOnDiskId (DescriptorId_t id);  . Static Public Member Functions; static std::string TypeName ();  ;  Static Public Member Functions inherited from ROOT::Experimental::RFieldBase; static std::vector< RCheckResult > Check (const std::string &fieldName, const std::string &typeName);  Checks if the given type is supported by RNTuple. ;  ; static RResult< std::unique_ptr< RFieldBase > > Create (const std::string &fieldName, const std::string &typeName);  Factory method to resurrect a field from the stored on-disk type information. ;  ; static RResult< void > EnsureValidFieldName (std::string_view fieldName);  Check whether a given string is a valid field name. ;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::RFieldBase; using ColumnRepresentation_t = std::vector< EColumnType >;  ; enum class  EState { kUnconnected; , kConnectedToSink; , kConnectedToSource; };  During its lifetime, a field undergoes the following possible state transitions: More...;  ; using RConstSchemaIterator = RSchemaIteratorTemplate< true >;  ; using RSchemaIterator = RSchemaIteratorTemplate< false >;  ;  Static Public Attributes inherited from ROOT::Experimental:",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html:5898,Modifiability,inherit,inherited,5898,"entatives (const RColumnRepresentations::Selection_t &representatives);  Fixes a column representative. ;  ; void SetDescription (std::string_view description);  ; void SetOnDiskId (DescriptorId_t id);  . Static Public Member Functions; static std::string TypeName ();  ;  Static Public Member Functions inherited from ROOT::Experimental::RFieldBase; static std::vector< RCheckResult > Check (const std::string &fieldName, const std::string &typeName);  Checks if the given type is supported by RNTuple. ;  ; static RResult< std::unique_ptr< RFieldBase > > Create (const std::string &fieldName, const std::string &typeName);  Factory method to resurrect a field from the stored on-disk type information. ;  ; static RResult< void > EnsureValidFieldName (std::string_view fieldName);  Check whether a given string is a valid field name. ;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::RFieldBase; using ColumnRepresentation_t = std::vector< EColumnType >;  ; enum class  EState { kUnconnected; , kConnectedToSink; , kConnectedToSource; };  During its lifetime, a field undergoes the following possible state transitions: More...;  ; using RConstSchemaIterator = RSchemaIteratorTemplate< true >;  ; using RSchemaIterator = RSchemaIteratorTemplate< false >;  ;  Static Public Attributes inherited from ROOT::Experimental::RFieldBase; static constexpr std::uint32_t kInvalidTypeVersion = -1U;  ; static constexpr int kTraitMappable = 0x04;  A field of a fundamental type that can be directly mapped via RField<T>::Map(), i.e. ;  ; static constexpr int kTraitTriviallyConstructible = 0x01;  No constructor needs to be called, i.e. ;  ; static constexpr int kTraitTriviallyDestructible = 0x02;  The type is cleaned up just by freeing its memory. I.e. the destructor performs a no-op. ;  ; static constexpr int kTraitTrivialType = kTraitTriviallyConstructible | kTraitTriviallyDestructible;  Shorthand for types that are both trivially constructible and destructible. ;  ;",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html:6333,Modifiability,inherit,inherited,6333,"td::vector< RCheckResult > Check (const std::string &fieldName, const std::string &typeName);  Checks if the given type is supported by RNTuple. ;  ; static RResult< std::unique_ptr< RFieldBase > > Create (const std::string &fieldName, const std::string &typeName);  Factory method to resurrect a field from the stored on-disk type information. ;  ; static RResult< void > EnsureValidFieldName (std::string_view fieldName);  Check whether a given string is a valid field name. ;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::RFieldBase; using ColumnRepresentation_t = std::vector< EColumnType >;  ; enum class  EState { kUnconnected; , kConnectedToSink; , kConnectedToSource; };  During its lifetime, a field undergoes the following possible state transitions: More...;  ; using RConstSchemaIterator = RSchemaIteratorTemplate< true >;  ; using RSchemaIterator = RSchemaIteratorTemplate< false >;  ;  Static Public Attributes inherited from ROOT::Experimental::RFieldBase; static constexpr std::uint32_t kInvalidTypeVersion = -1U;  ; static constexpr int kTraitMappable = 0x04;  A field of a fundamental type that can be directly mapped via RField<T>::Map(), i.e. ;  ; static constexpr int kTraitTriviallyConstructible = 0x01;  No constructor needs to be called, i.e. ;  ; static constexpr int kTraitTriviallyDestructible = 0x02;  The type is cleaned up just by freeing its memory. I.e. the destructor performs a no-op. ;  ; static constexpr int kTraitTrivialType = kTraitTriviallyConstructible | kTraitTriviallyDestructible;  Shorthand for types that are both trivially constructible and destructible. ;  ; static constexpr int kTraitTypeChecksum = 0x08;  The TClass checksum is set and valid. ;  ;  Protected Member Functions inherited from ROOT::Experimental::RClassField; std::size_t AppendImpl (const void *from) final;  Operations on values of complex types, e.g. ;  ; std::unique_ptr< RFieldBase > CloneImpl (std::string_view newName) const final;  Called by",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html:7135,Modifiability,inherit,inherited,7135,"RConstSchemaIterator = RSchemaIteratorTemplate< true >;  ; using RSchemaIterator = RSchemaIteratorTemplate< false >;  ;  Static Public Attributes inherited from ROOT::Experimental::RFieldBase; static constexpr std::uint32_t kInvalidTypeVersion = -1U;  ; static constexpr int kTraitMappable = 0x04;  A field of a fundamental type that can be directly mapped via RField<T>::Map(), i.e. ;  ; static constexpr int kTraitTriviallyConstructible = 0x01;  No constructor needs to be called, i.e. ;  ; static constexpr int kTraitTriviallyDestructible = 0x02;  The type is cleaned up just by freeing its memory. I.e. the destructor performs a no-op. ;  ; static constexpr int kTraitTrivialType = kTraitTriviallyConstructible | kTraitTriviallyDestructible;  Shorthand for types that are both trivially constructible and destructible. ;  ; static constexpr int kTraitTypeChecksum = 0x08;  The TClass checksum is set and valid. ;  ;  Protected Member Functions inherited from ROOT::Experimental::RClassField; std::size_t AppendImpl (const void *from) final;  Operations on values of complex types, e.g. ;  ; std::unique_ptr< RFieldBase > CloneImpl (std::string_view newName) const final;  Called by Clone(), which additionally copies the on-disk ID. ;  ; void ConstructValue (void *where) const final;  Constructs value in a given location of size at least GetValueSize(). Called by the base class' CreateValue(). ;  ; std::unique_ptr< RDeleter > GetDeleter () const final;  ; void OnConnectPageSource () final;  Called by ConnectPageSource() once connected; derived classes may override this as appropriate. ;  ; void ReadGlobalImpl (NTupleSize_t globalIndex, void *to) final;  ; void ReadInClusterImpl (RClusterIndex clusterIndex, void *to) final;  ;  Protected Member Functions inherited from ROOT::Experimental::RFieldBase; size_t AddReadCallback (ReadCallback_t func);  Set a user-defined function to be called after reading a value, giving a chance to inspect and/or modify the value object. ;  ; std::size_t",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html:7955,Modifiability,inherit,inherited,7955,"y constructible and destructible. ;  ; static constexpr int kTraitTypeChecksum = 0x08;  The TClass checksum is set and valid. ;  ;  Protected Member Functions inherited from ROOT::Experimental::RClassField; std::size_t AppendImpl (const void *from) final;  Operations on values of complex types, e.g. ;  ; std::unique_ptr< RFieldBase > CloneImpl (std::string_view newName) const final;  Called by Clone(), which additionally copies the on-disk ID. ;  ; void ConstructValue (void *where) const final;  Constructs value in a given location of size at least GetValueSize(). Called by the base class' CreateValue(). ;  ; std::unique_ptr< RDeleter > GetDeleter () const final;  ; void OnConnectPageSource () final;  Called by ConnectPageSource() once connected; derived classes may override this as appropriate. ;  ; void ReadGlobalImpl (NTupleSize_t globalIndex, void *to) final;  ; void ReadInClusterImpl (RClusterIndex clusterIndex, void *to) final;  ;  Protected Member Functions inherited from ROOT::Experimental::RFieldBase; size_t AddReadCallback (ReadCallback_t func);  Set a user-defined function to be called after reading a value, giving a chance to inspect and/or modify the value object. ;  ; std::size_t Append (const void *from);  Write the given value into columns. ;  ; void Attach (std::unique_ptr< RFieldBase > child);  Add a new subfield to the list of nested fields. ;  ; void AutoAdjustColumnTypes (const RNTupleWriteOptions &options);  When connecting a field to a page sink, the field's default column representation is subject to adjustment according to the write options. ;  ; virtual void CommitClusterImpl ();  ; void * CreateObjectRawPtr () const;  Factory method for the field's type. The caller owns the returned pointer. ;  ; const ColumnRepresentation_t & EnsureCompatibleColumnTypes (const RNTupleDescriptor &desc, std::uint16_t representationIndex) const;  Returns the on-disk column types found in the provided descriptor for fOnDiskId and the given representation index",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html:10660,Modifiability,inherit,inherited,10660,"ateColumnsImpl (const RNTupleDescriptor &desc);  For reading, use the on-disk column list. ;  ; virtual const RColumnRepresentations & GetColumnRepresentations () const;  Implementations in derived classes should return a static RColumnRepresentations object. ;  ; virtual RExtraTypeInfoDescriptor GetExtraTypeInfo () const;  ; virtual bool HasExtraTypeInfo () const;  ; void Read (NTupleSize_t globalIndex, void *to);  Populate a single value with data from the field. ;  ; void Read (RClusterIndex clusterIndex, void *to);  Populate a single value with data from the field. ;  ; std::size_t ReadBulk (const RBulkSpec &bulkSpec);  Returns the number of newly available values, that is the number of bools in bulkSpec.fMaskAvail that flipped from false to true. ;  ; virtual std::size_t ReadBulkImpl (const RBulkSpec &bulkSpec);  General implementation of bulk read. ;  ; void RemoveReadCallback (size_t idx);  ;  Static Protected Member Functions inherited from ROOT::Experimental::RFieldBase; static std::size_t CallAppendOn (RFieldBase &other, const void *from);  Allow derived classes to call Append and Read on other (sub) fields. ;  ; static void CallConstructValueOn (const RFieldBase &other, void *where);  Allow derived classes to call ConstructValue(void *) and GetDeleter on other (sub) fields. ;  ; static void * CallCreateObjectRawPtrOn (RFieldBase &other);  ; static void CallReadOn (RFieldBase &other, NTupleSize_t globalIndex, void *to);  ; static void CallReadOn (RFieldBase &other, RClusterIndex clusterIndex, void *to);  ; static RResult< std::unique_ptr< RFieldBase > > Create (const std::string &fieldName, const std::string &canonicalType, const std::string &typeAlias, bool continueOnError=false);  Factory method to resurrect a field from the stored on-disk type information. ;  ; static std::unique_ptr< RDeleter > GetDeleterOf (const RFieldBase &other);  ; static Internal::RColumn * GetPrincipalColumnOf (const RFieldBase &other);  Fields may need direct access to the princ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html:11803,Modifiability,inherit,inherited,11803,"lConstructValueOn (const RFieldBase &other, void *where);  Allow derived classes to call ConstructValue(void *) and GetDeleter on other (sub) fields. ;  ; static void * CallCreateObjectRawPtrOn (RFieldBase &other);  ; static void CallReadOn (RFieldBase &other, NTupleSize_t globalIndex, void *to);  ; static void CallReadOn (RFieldBase &other, RClusterIndex clusterIndex, void *to);  ; static RResult< std::unique_ptr< RFieldBase > > Create (const std::string &fieldName, const std::string &canonicalType, const std::string &typeAlias, bool continueOnError=false);  Factory method to resurrect a field from the stored on-disk type information. ;  ; static std::unique_ptr< RDeleter > GetDeleterOf (const RFieldBase &other);  ; static Internal::RColumn * GetPrincipalColumnOf (const RFieldBase &other);  Fields may need direct access to the principal column of their sub fields, e.g. in RRVecField::ReadBulk. ;  ;  Protected Attributes inherited from ROOT::Experimental::RFieldBase; Internal::RColumn * fAuxiliaryColumn = nullptr;  Some fields have a second column in its column representation. ;  ; std::vector< std::unique_ptr< Internal::RColumn > > fAvailableColumns;  The columns are connected either to a sink or to a source (not to both); they are owned by the field. ;  ; std::vector< std::reference_wrapper< const ColumnRepresentation_t > > fColumnRepresentatives;  Pointers into the static vector GetColumnRepresentations().GetSerializationTypes() when SetColumnRepresentatives is called. ;  ; std::uint32_t fOnDiskTypeChecksum = 0;  TClass checksum cached from the descriptor after a call to ConnectPageSource(). ;  ; std::uint32_t fOnDiskTypeVersion = kInvalidTypeVersion;  C++ type version cached from the descriptor after a call to ConnectPageSource() ;  ; RFieldBase * fParent;  Sub fields point to their mother field. ;  ; Internal::RColumn * fPrincipalColumn = nullptr;  All fields that have columns have a distinct main column. ;  ; std::vector< ReadCallback_t > fReadCallbacks;  List",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html:6809,Performance,perform,performs,6809,"r a given string is a valid field name. ;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::RFieldBase; using ColumnRepresentation_t = std::vector< EColumnType >;  ; enum class  EState { kUnconnected; , kConnectedToSink; , kConnectedToSource; };  During its lifetime, a field undergoes the following possible state transitions: More...;  ; using RConstSchemaIterator = RSchemaIteratorTemplate< true >;  ; using RSchemaIterator = RSchemaIteratorTemplate< false >;  ;  Static Public Attributes inherited from ROOT::Experimental::RFieldBase; static constexpr std::uint32_t kInvalidTypeVersion = -1U;  ; static constexpr int kTraitMappable = 0x04;  A field of a fundamental type that can be directly mapped via RField<T>::Map(), i.e. ;  ; static constexpr int kTraitTriviallyConstructible = 0x01;  No constructor needs to be called, i.e. ;  ; static constexpr int kTraitTriviallyDestructible = 0x02;  The type is cleaned up just by freeing its memory. I.e. the destructor performs a no-op. ;  ; static constexpr int kTraitTrivialType = kTraitTriviallyConstructible | kTraitTriviallyDestructible;  Shorthand for types that are both trivially constructible and destructible. ;  ; static constexpr int kTraitTypeChecksum = 0x08;  The TClass checksum is set and valid. ;  ;  Protected Member Functions inherited from ROOT::Experimental::RClassField; std::size_t AppendImpl (const void *from) final;  Operations on values of complex types, e.g. ;  ; std::unique_ptr< RFieldBase > CloneImpl (std::string_view newName) const final;  Called by Clone(), which additionally copies the on-disk ID. ;  ; void ConstructValue (void *where) const final;  Constructs value in a given location of size at least GetValueSize(). Called by the base class' CreateValue(). ;  ; std::unique_ptr< RDeleter > GetDeleter () const final;  ; void OnConnectPageSource () final;  Called by ConnectPageSource() once connected; derived classes may override this as appropriate. ;  ; void ReadGlobalImpl (N",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html:12426,Performance,cache,cached,12426,"alse);  Factory method to resurrect a field from the stored on-disk type information. ;  ; static std::unique_ptr< RDeleter > GetDeleterOf (const RFieldBase &other);  ; static Internal::RColumn * GetPrincipalColumnOf (const RFieldBase &other);  Fields may need direct access to the principal column of their sub fields, e.g. in RRVecField::ReadBulk. ;  ;  Protected Attributes inherited from ROOT::Experimental::RFieldBase; Internal::RColumn * fAuxiliaryColumn = nullptr;  Some fields have a second column in its column representation. ;  ; std::vector< std::unique_ptr< Internal::RColumn > > fAvailableColumns;  The columns are connected either to a sink or to a source (not to both); they are owned by the field. ;  ; std::vector< std::reference_wrapper< const ColumnRepresentation_t > > fColumnRepresentatives;  Pointers into the static vector GetColumnRepresentations().GetSerializationTypes() when SetColumnRepresentatives is called. ;  ; std::uint32_t fOnDiskTypeChecksum = 0;  TClass checksum cached from the descriptor after a call to ConnectPageSource(). ;  ; std::uint32_t fOnDiskTypeVersion = kInvalidTypeVersion;  C++ type version cached from the descriptor after a call to ConnectPageSource() ;  ; RFieldBase * fParent;  Sub fields point to their mother field. ;  ; Internal::RColumn * fPrincipalColumn = nullptr;  All fields that have columns have a distinct main column. ;  ; std::vector< ReadCallback_t > fReadCallbacks;  List of functions to be called after reading a value. ;  ; std::vector< std::unique_ptr< RFieldBase > > fSubFields;  Collections and classes own sub fields. ;  ; int fTraits = 0;  Properties of the type that allow for optimizations of collections of that type. ;  ; std::string fTypeAlias;  A typedef or using name that was used when creating the field. ;  . #include <ROOT/RField.hxx>. Inheritance diagram for ROOT::Experimental::RField< T, typename >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html:12569,Performance,cache,cached,12569," static Internal::RColumn * GetPrincipalColumnOf (const RFieldBase &other);  Fields may need direct access to the principal column of their sub fields, e.g. in RRVecField::ReadBulk. ;  ;  Protected Attributes inherited from ROOT::Experimental::RFieldBase; Internal::RColumn * fAuxiliaryColumn = nullptr;  Some fields have a second column in its column representation. ;  ; std::vector< std::unique_ptr< Internal::RColumn > > fAvailableColumns;  The columns are connected either to a sink or to a source (not to both); they are owned by the field. ;  ; std::vector< std::reference_wrapper< const ColumnRepresentation_t > > fColumnRepresentatives;  Pointers into the static vector GetColumnRepresentations().GetSerializationTypes() when SetColumnRepresentatives is called. ;  ; std::uint32_t fOnDiskTypeChecksum = 0;  TClass checksum cached from the descriptor after a call to ConnectPageSource(). ;  ; std::uint32_t fOnDiskTypeVersion = kInvalidTypeVersion;  C++ type version cached from the descriptor after a call to ConnectPageSource() ;  ; RFieldBase * fParent;  Sub fields point to their mother field. ;  ; Internal::RColumn * fPrincipalColumn = nullptr;  All fields that have columns have a distinct main column. ;  ; std::vector< ReadCallback_t > fReadCallbacks;  List of functions to be called after reading a value. ;  ; std::vector< std::unique_ptr< RFieldBase > > fSubFields;  Collections and classes own sub fields. ;  ; int fTraits = 0;  Properties of the type that allow for optimizations of collections of that type. ;  ; std::string fTypeAlias;  A typedef or using name that was used when creating the field. ;  . #include <ROOT/RField.hxx>. Inheritance diagram for ROOT::Experimental::RField< T, typename >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RField() [1/2]. template<typename T , typename = void> . ROOT::Experimental::RField< T, typename >::RField ; (; std::string_view ; name).",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html:13082,Performance,optimiz,optimizations,13082,"to a sink or to a source (not to both); they are owned by the field. ;  ; std::vector< std::reference_wrapper< const ColumnRepresentation_t > > fColumnRepresentatives;  Pointers into the static vector GetColumnRepresentations().GetSerializationTypes() when SetColumnRepresentatives is called. ;  ; std::uint32_t fOnDiskTypeChecksum = 0;  TClass checksum cached from the descriptor after a call to ConnectPageSource(). ;  ; std::uint32_t fOnDiskTypeVersion = kInvalidTypeVersion;  C++ type version cached from the descriptor after a call to ConnectPageSource() ;  ; RFieldBase * fParent;  Sub fields point to their mother field. ;  ; Internal::RColumn * fPrincipalColumn = nullptr;  All fields that have columns have a distinct main column. ;  ; std::vector< ReadCallback_t > fReadCallbacks;  List of functions to be called after reading a value. ;  ; std::vector< std::unique_ptr< RFieldBase > > fSubFields;  Collections and classes own sub fields. ;  ; int fTraits = 0;  Properties of the type that allow for optimizations of collections of that type. ;  ; std::string fTypeAlias;  A typedef or using name that was used when creating the field. ;  . #include <ROOT/RField.hxx>. Inheritance diagram for ROOT::Experimental::RField< T, typename >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RField() [1/2]. template<typename T , typename = void> . ROOT::Experimental::RField< T, typename >::RField ; (; std::string_view ; name). inline . Definition at line 244 of file RField.hxx. ◆ RField() [2/2]. template<typename T , typename = void> . ROOT::Experimental::RField< T, typename >::RField ; (; RField< T, typename > && ; other). default . ◆ ~RField(). template<typename T , typename = void> . ROOT::Experimental::RField< T, typename >::~RField ; (; ). finaldefault . Member Function Documentation. ◆ operator=(). template<typename T , typename = void> . RField & ROOT::Experimental::RField< T, typename >:",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html:1196,Security,checksum,checksum,1196,"f all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; ROOT::Experimental::RField< T, typename > Class Template Referencefinal. ; template<typename T, typename = void>; class ROOT::Experimental::RField< T, typename >Classes with dictionaries that can be inspected by TClass. ; Definition at line 241 of file RField.hxx. Public Member Functions;  RField (RField &&other)=default;  ;  RField (std::string_view name);  ;  ~RField () final=default;  ; RField & operator= (RField &&other)=default;  ;  Public Member Functions inherited from ROOT::Experimental::RClassField;  RClassField (RClassField &&other)=default;  ;  RClassField (std::string_view fieldName, std::string_view className);  ;  ~RClassField () override=default;  ; void AcceptVisitor (Detail::RFieldVisitor &visitor) const final;  ; size_t GetAlignment () const final;  As a rule of thumb, the alignment is equal to the size of the type. ;  ; std::uint32_t GetTypeChecksum () const final;  Return the current TClass reported checksum of this class. Only valid if kTraitTypeChecksum is set. ;  ; std::uint32_t GetTypeVersion () const final;  Indicates an evolution of the C++ type itself. ;  ; size_t GetValueSize () const final;  The number of bytes taken by a value of the appropriate type. ;  ; RClassField & operator= (RClassField &&other)=default;  ; std::vector< RValue > SplitValue (const RValue &value) const final;  Creates the list of direct child values given a value for this field. ;  ;  Public Member Functions inherited from ROOT::Experimental::RFieldBase;  RFieldBase (const RFieldBase &)=delete;  ;  RFieldBase (RFieldBase &&)=default;  ;  RFieldBase (std::string_view name, std::string_view type, ENTupleStructure structure, bool isSimple, std::size_t nRepetitions=0);  The constructor creates the underlying column objects and connects them to either a sink or a source. ;  ; virtual ~RFieldBase ()=default;  ; RSchemaIterator begin ();  ; RConstSchemaIterator begin () const",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html:3943,Security,checksum,checksum,3943,"the field type and allocates new initialized memory according to the type. ;  ; template<> ; std::unique_ptr< void, typename ROOT::Experimental::RFieldBase::RCreateObjectDeleter< void >::deleter > CreateObject () const;  ; RValue CreateValue ();  Generates an object of the field type and wraps the created object in a shared pointer and returns it an RValue connected to the field. ;  ; RSchemaIterator end ();  ; RConstSchemaIterator end () const;  ; RColumnRepresentations::Selection_t GetColumnRepresentatives () const;  Returns the fColumnRepresentative pointee or, if unset, the field's default representative. ;  ; const std::string & GetDescription () const;  Get the field's description. ;  ; const std::string & GetFieldName () const;  ; virtual std::uint32_t GetFieldVersion () const;  Indicates an evolution of the mapping scheme from C++ type to columns. ;  ; std::size_t GetNRepetitions () const;  ; DescriptorId_t GetOnDiskId () const;  ; std::uint32_t GetOnDiskTypeChecksum () const;  Return checksum stored in the field descriptor; only valid after a call to ConnectPageSource(), if the field stored a type checksum. ;  ; std::uint32_t GetOnDiskTypeVersion () const;  Return the C++ type version stored in the field descriptor; only valid after a call to ConnectPageSource() ;  ; const RFieldBase * GetParent () const;  ; std::string GetQualifiedFieldName () const;  Returns the field name and parent field names separated by dots (""grandparent.parent.child"") ;  ; EState GetState () const;  ; ENTupleStructure GetStructure () const;  ; std::vector< RFieldBase * > GetSubFields ();  ; std::vector< const RFieldBase * > GetSubFields () const;  ; int GetTraits () const;  ; const std::string & GetTypeAlias () const;  ; const std::string & GetTypeName () const;  ; bool HasDefaultColumnRepresentative () const;  Whether or not an explicit column representative was set. ;  ; bool HasReadCallbacks () const;  ; bool IsSimple () const;  ; RFieldBase & operator= (const RFieldBase &)=dele",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html:4059,Security,checksum,checksum,4059,"the field type and allocates new initialized memory according to the type. ;  ; template<> ; std::unique_ptr< void, typename ROOT::Experimental::RFieldBase::RCreateObjectDeleter< void >::deleter > CreateObject () const;  ; RValue CreateValue ();  Generates an object of the field type and wraps the created object in a shared pointer and returns it an RValue connected to the field. ;  ; RSchemaIterator end ();  ; RConstSchemaIterator end () const;  ; RColumnRepresentations::Selection_t GetColumnRepresentatives () const;  Returns the fColumnRepresentative pointee or, if unset, the field's default representative. ;  ; const std::string & GetDescription () const;  Get the field's description. ;  ; const std::string & GetFieldName () const;  ; virtual std::uint32_t GetFieldVersion () const;  Indicates an evolution of the mapping scheme from C++ type to columns. ;  ; std::size_t GetNRepetitions () const;  ; DescriptorId_t GetOnDiskId () const;  ; std::uint32_t GetOnDiskTypeChecksum () const;  Return checksum stored in the field descriptor; only valid after a call to ConnectPageSource(), if the field stored a type checksum. ;  ; std::uint32_t GetOnDiskTypeVersion () const;  Return the C++ type version stored in the field descriptor; only valid after a call to ConnectPageSource() ;  ; const RFieldBase * GetParent () const;  ; std::string GetQualifiedFieldName () const;  Returns the field name and parent field names separated by dots (""grandparent.parent.child"") ;  ; EState GetState () const;  ; ENTupleStructure GetStructure () const;  ; std::vector< RFieldBase * > GetSubFields ();  ; std::vector< const RFieldBase * > GetSubFields () const;  ; int GetTraits () const;  ; const std::string & GetTypeAlias () const;  ; const std::string & GetTypeName () const;  ; bool HasDefaultColumnRepresentative () const;  Whether or not an explicit column representative was set. ;  ; bool HasReadCallbacks () const;  ; bool IsSimple () const;  ; RFieldBase & operator= (const RFieldBase &)=dele",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html:7075,Security,checksum,checksum,7075,"oSink; , kConnectedToSource; };  During its lifetime, a field undergoes the following possible state transitions: More...;  ; using RConstSchemaIterator = RSchemaIteratorTemplate< true >;  ; using RSchemaIterator = RSchemaIteratorTemplate< false >;  ;  Static Public Attributes inherited from ROOT::Experimental::RFieldBase; static constexpr std::uint32_t kInvalidTypeVersion = -1U;  ; static constexpr int kTraitMappable = 0x04;  A field of a fundamental type that can be directly mapped via RField<T>::Map(), i.e. ;  ; static constexpr int kTraitTriviallyConstructible = 0x01;  No constructor needs to be called, i.e. ;  ; static constexpr int kTraitTriviallyDestructible = 0x02;  The type is cleaned up just by freeing its memory. I.e. the destructor performs a no-op. ;  ; static constexpr int kTraitTrivialType = kTraitTriviallyConstructible | kTraitTriviallyDestructible;  Shorthand for types that are both trivially constructible and destructible. ;  ; static constexpr int kTraitTypeChecksum = 0x08;  The TClass checksum is set and valid. ;  ;  Protected Member Functions inherited from ROOT::Experimental::RClassField; std::size_t AppendImpl (const void *from) final;  Operations on values of complex types, e.g. ;  ; std::unique_ptr< RFieldBase > CloneImpl (std::string_view newName) const final;  Called by Clone(), which additionally copies the on-disk ID. ;  ; void ConstructValue (void *where) const final;  Constructs value in a given location of size at least GetValueSize(). Called by the base class' CreateValue(). ;  ; std::unique_ptr< RDeleter > GetDeleter () const final;  ; void OnConnectPageSource () final;  Called by ConnectPageSource() once connected; derived classes may override this as appropriate. ;  ; void ReadGlobalImpl (NTupleSize_t globalIndex, void *to) final;  ; void ReadInClusterImpl (RClusterIndex clusterIndex, void *to) final;  ;  Protected Member Functions inherited from ROOT::Experimental::RFieldBase; size_t AddReadCallback (ReadCallback_t func);  Set a ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html:11694,Security,access,access,11694,"tic Protected Member Functions inherited from ROOT::Experimental::RFieldBase; static std::size_t CallAppendOn (RFieldBase &other, const void *from);  Allow derived classes to call Append and Read on other (sub) fields. ;  ; static void CallConstructValueOn (const RFieldBase &other, void *where);  Allow derived classes to call ConstructValue(void *) and GetDeleter on other (sub) fields. ;  ; static void * CallCreateObjectRawPtrOn (RFieldBase &other);  ; static void CallReadOn (RFieldBase &other, NTupleSize_t globalIndex, void *to);  ; static void CallReadOn (RFieldBase &other, RClusterIndex clusterIndex, void *to);  ; static RResult< std::unique_ptr< RFieldBase > > Create (const std::string &fieldName, const std::string &canonicalType, const std::string &typeAlias, bool continueOnError=false);  Factory method to resurrect a field from the stored on-disk type information. ;  ; static std::unique_ptr< RDeleter > GetDeleterOf (const RFieldBase &other);  ; static Internal::RColumn * GetPrincipalColumnOf (const RFieldBase &other);  Fields may need direct access to the principal column of their sub fields, e.g. in RRVecField::ReadBulk. ;  ;  Protected Attributes inherited from ROOT::Experimental::RFieldBase; Internal::RColumn * fAuxiliaryColumn = nullptr;  Some fields have a second column in its column representation. ;  ; std::vector< std::unique_ptr< Internal::RColumn > > fAvailableColumns;  The columns are connected either to a sink or to a source (not to both); they are owned by the field. ;  ; std::vector< std::reference_wrapper< const ColumnRepresentation_t > > fColumnRepresentatives;  Pointers into the static vector GetColumnRepresentations().GetSerializationTypes() when SetColumnRepresentatives is called. ;  ; std::uint32_t fOnDiskTypeChecksum = 0;  TClass checksum cached from the descriptor after a call to ConnectPageSource(). ;  ; std::uint32_t fOnDiskTypeVersion = kInvalidTypeVersion;  C++ type version cached from the descriptor after a call to ConnectPageSource(",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html:12417,Security,checksum,checksum,12417,"alse);  Factory method to resurrect a field from the stored on-disk type information. ;  ; static std::unique_ptr< RDeleter > GetDeleterOf (const RFieldBase &other);  ; static Internal::RColumn * GetPrincipalColumnOf (const RFieldBase &other);  Fields may need direct access to the principal column of their sub fields, e.g. in RRVecField::ReadBulk. ;  ;  Protected Attributes inherited from ROOT::Experimental::RFieldBase; Internal::RColumn * fAuxiliaryColumn = nullptr;  Some fields have a second column in its column representation. ;  ; std::vector< std::unique_ptr< Internal::RColumn > > fAvailableColumns;  The columns are connected either to a sink or to a source (not to both); they are owned by the field. ;  ; std::vector< std::reference_wrapper< const ColumnRepresentation_t > > fColumnRepresentatives;  Pointers into the static vector GetColumnRepresentations().GetSerializationTypes() when SetColumnRepresentatives is called. ;  ; std::uint32_t fOnDiskTypeChecksum = 0;  TClass checksum cached from the descriptor after a call to ConnectPageSource(). ;  ; std::uint32_t fOnDiskTypeVersion = kInvalidTypeVersion;  C++ type version cached from the descriptor after a call to ConnectPageSource() ;  ; RFieldBase * fParent;  Sub fields point to their mother field. ;  ; Internal::RColumn * fPrincipalColumn = nullptr;  All fields that have columns have a distinct main column. ;  ; std::vector< ReadCallback_t > fReadCallbacks;  List of functions to be called after reading a value. ;  ; std::vector< std::unique_ptr< RFieldBase > > fSubFields;  Collections and classes own sub fields. ;  ; int fTraits = 0;  Properties of the type that allow for optimizations of collections of that type. ;  ; std::string fTypeAlias;  A typedef or using name that was used when creating the field. ;  . #include <ROOT/RField.hxx>. Inheritance diagram for ROOT::Experimental::RField< T, typename >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RField.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:10999,Availability,avail,available,10999,"nRepresentation_t &representation, std::uint16_t representationIndex);  Helpers for generating columns. ;  ; template<typename... ColumnCppTs> ; void GenerateColumnsImpl (const RNTupleDescriptor &desc);  For reading, use the on-disk column list. ;  ; virtual const RColumnRepresentations & GetColumnRepresentations () const;  Implementations in derived classes should return a static RColumnRepresentations object. ;  ; virtual std::unique_ptr< RDeleter > GetDeleter () const;  ; virtual RExtraTypeInfoDescriptor GetExtraTypeInfo () const;  ; virtual bool HasExtraTypeInfo () const;  ; virtual void OnConnectPageSource ();  Called by ConnectPageSource() once connected; derived classes may override this as appropriate. ;  ; void Read (NTupleSize_t globalIndex, void *to);  Populate a single value with data from the field. ;  ; void Read (RClusterIndex clusterIndex, void *to);  Populate a single value with data from the field. ;  ; std::size_t ReadBulk (const RBulkSpec &bulkSpec);  Returns the number of newly available values, that is the number of bools in bulkSpec.fMaskAvail that flipped from false to true. ;  ; virtual std::size_t ReadBulkImpl (const RBulkSpec &bulkSpec);  General implementation of bulk read. ;  ; virtual void ReadGlobalImpl (NTupleSize_t globalIndex, void *to);  ; virtual void ReadInClusterImpl (RClusterIndex clusterIndex, void *to);  ; void RemoveReadCallback (size_t idx);  . Static Protected Member Functions; static std::size_t CallAppendOn (RFieldBase &other, const void *from);  Allow derived classes to call Append and Read on other (sub) fields. ;  ; static void CallConstructValueOn (const RFieldBase &other, void *where);  Allow derived classes to call ConstructValue(void *) and GetDeleter on other (sub) fields. ;  ; static void * CallCreateObjectRawPtrOn (RFieldBase &other);  ; static void CallReadOn (RFieldBase &other, NTupleSize_t globalIndex, void *to);  ; static void CallReadOn (RFieldBase &other, RClusterIndex clusterIndex, void *to);  ; static RR",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:23421,Availability,error,error,23421,", . NTupleSize_t ; globalIndex, . void * ; to . ). inlinestaticprotected . Definition at line 404 of file RFieldBase.hxx. ◆ CallReadOn() [2/2]. static void ROOT::Experimental::RFieldBase::CallReadOn ; (; RFieldBase & ; other, . RClusterIndex ; clusterIndex, . void * ; to . ). inlinestaticprotected . Definition at line 403 of file RFieldBase.hxx. ◆ cbegin(). ROOT::Experimental::RFieldBase::RConstSchemaIterator ROOT::Experimental::RFieldBase::cbegin ; (; ); const. Definition at line 1118 of file RField.cxx. ◆ cend(). ROOT::Experimental::RFieldBase::RConstSchemaIterator ROOT::Experimental::RFieldBase::cend ; (; ); const. Definition at line 1123 of file RField.cxx. ◆ Check(). std::vector< ROOT::Experimental::RFieldBase::RCheckResult > ROOT::Experimental::RFieldBase::Check ; (; const std::string & ; fieldName, . const std::string & ; typeName . ). static . Checks if the given type is supported by RNTuple. ; In case of success, the result vector is empty. Otherwise there is an error record for each failing sub field (sub type). ; Definition at line 590 of file RField.cxx. ◆ Clone(). std::unique_ptr< ROOT::Experimental::RFieldBase > ROOT::Experimental::RFieldBase::Clone ; (; std::string_view ; newName); const. Copies the field and its sub fields using a possibly new name and a new, unconnected set of columns. ; Definition at line 914 of file RField.cxx. ◆ CloneImpl(). virtual std::unique_ptr< RFieldBase > ROOT::Experimental::RFieldBase::CloneImpl ; (; std::string_view ; newName); const. protectedpure virtual . Called by Clone(), which additionally copies the on-disk ID. ; Implemented in ROOT::Experimental::RFieldZero, ROOT::Experimental::RInvalidField, ROOT::Experimental::RClassField, ROOT::Experimental::RStreamerField, ROOT::Experimental::REnumField, ROOT::Experimental::RField< RNTupleCardinality< SizeT > >, ROOT::Experimental::RField< TObject >, ROOT::Experimental::RField< bool >, ROOT::Experimental::RField< char >, ROOT::Experimental::RField< float >, ROOT::Experimental",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:29920,Availability,error,error,29920,"ateBulk(). ROOT::Experimental::RFieldBase::RBulk ROOT::Experimental::RFieldBase::CreateBulk ; (; ). The returned bulk is initially empty; RBulk::ReadBulk will construct the array of values. ; Definition at line 1076 of file RField.cxx. ◆ CreateObject() [1/3]. template<> . std::unique_ptr< void, typename RFieldBase::RCreateObjectDeleter< void >::deleter > ROOT::Experimental::RFieldBase::CreateObject ; (; ); const. ◆ CreateObject() [2/3]. template<typename T > . std::unique_ptr< T, typename RFieldBase::RCreateObjectDeleter< T >::deleter > ROOT::Experimental::RFieldBase::CreateObject. Generates an object of the field type and allocates new initialized memory according to the type. ; Implemented at the end of this header because the implementation is using RField<T>::TypeName() The returned object can be released with delete, i.e. it is valid to call auto ptr = field->CreateObject(); delete ptr.release();; Note that CreateObject<void> is supported. The returned unique_ptr has a custom deleter that reports an error if it is called. The intended use of the returned unique_ptr<void> is to call release(). In this way, the transfer of pointer ownership is explicit. ; Definition at line 451 of file RField.hxx. ◆ CreateObject() [3/3]. template<> . std::unique_ptr< void, typename ROOT::Experimental::RFieldBase::RCreateObjectDeleter< void >::deleter > ROOT::Experimental::RFieldBase::CreateObject ; (; ); const. Definition at line 542 of file RField.cxx. ◆ CreateObjectRawPtr(). void * ROOT::Experimental::RFieldBase::CreateObjectRawPtr ; (; ); const. protected . Factory method for the field's type. The caller owns the returned pointer. ; Definition at line 961 of file RField.cxx. ◆ CreateValue(). ROOT::Experimental::RFieldBase::RValue ROOT::Experimental::RFieldBase::CreateValue ; (; ). Generates an object of the field type and wraps the created object in a shared pointer and returns it an RValue connected to the field. ; Definition at line 969 of file RField.cxx. ◆ end() [1/2]. ROO",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:48053,Availability,avail,available,48053,") [1/2]. void ROOT::Experimental::RFieldBase::Read ; (; NTupleSize_t ; globalIndex, . void * ; to . ). inlineprotected . Populate a single value with data from the field. ; The memory location pointed to by to needs to be of the fitting type. The fast path is conditioned by the field qualifying as simple, i.e. maps as-is to a single column and has no read callback. ; Definition at line 362 of file RFieldBase.hxx. ◆ Read() [2/2]. void ROOT::Experimental::RFieldBase::Read ; (; RClusterIndex ; clusterIndex, . void * ; to . ). inlineprotected . Populate a single value with data from the field. ; The memory location pointed to by to needs to be of the fitting type. The fast path is conditioned by the field qualifying as simple, i.e. maps as-is to a single column and has no read callback. ; Definition at line 378 of file RFieldBase.hxx. ◆ ReadBulk(). std::size_t ROOT::Experimental::RFieldBase::ReadBulk ; (; const RBulkSpec & ; bulkSpec). protected . Returns the number of newly available values, that is the number of bools in bulkSpec.fMaskAvail that flipped from false to true. ; As a special return value, kAllSet can be used if all values are read independent from the masks. ; Definition at line 1086 of file RField.cxx. ◆ ReadBulkImpl(). std::size_t ROOT::Experimental::RFieldBase::ReadBulkImpl ; (; const RBulkSpec & ; bulkSpec). protectedvirtual . General implementation of bulk read. ; Loop over the required range and read values that are required and not already present. Derived classes may implement more optimized versions of this method. See ReadBulk() for the return value. ; Reimplemented in ROOT::Experimental::RField< RNTupleCardinality< SizeT > >, and ROOT::Experimental::RRVecField.; Definition at line 941 of file RField.cxx. ◆ ReadGlobalImpl(). void ROOT::Experimental::RFieldBase::ReadGlobalImpl ; (; NTupleSize_t ; globalIndex, . void * ; to . ). protectedvirtual . Reimplemented in ROOT::Experimental::RClassField, ROOT::Experimental::RStreamerField, ROOT::Experiment",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:48248,Availability,mask,masks,48248,"e value with data from the field. ; The memory location pointed to by to needs to be of the fitting type. The fast path is conditioned by the field qualifying as simple, i.e. maps as-is to a single column and has no read callback. ; Definition at line 362 of file RFieldBase.hxx. ◆ Read() [2/2]. void ROOT::Experimental::RFieldBase::Read ; (; RClusterIndex ; clusterIndex, . void * ; to . ). inlineprotected . Populate a single value with data from the field. ; The memory location pointed to by to needs to be of the fitting type. The fast path is conditioned by the field qualifying as simple, i.e. maps as-is to a single column and has no read callback. ; Definition at line 378 of file RFieldBase.hxx. ◆ ReadBulk(). std::size_t ROOT::Experimental::RFieldBase::ReadBulk ; (; const RBulkSpec & ; bulkSpec). protected . Returns the number of newly available values, that is the number of bools in bulkSpec.fMaskAvail that flipped from false to true. ; As a special return value, kAllSet can be used if all values are read independent from the masks. ; Definition at line 1086 of file RField.cxx. ◆ ReadBulkImpl(). std::size_t ROOT::Experimental::RFieldBase::ReadBulkImpl ; (; const RBulkSpec & ; bulkSpec). protectedvirtual . General implementation of bulk read. ; Loop over the required range and read values that are required and not already present. Derived classes may implement more optimized versions of this method. See ReadBulk() for the return value. ; Reimplemented in ROOT::Experimental::RField< RNTupleCardinality< SizeT > >, and ROOT::Experimental::RRVecField.; Definition at line 941 of file RField.cxx. ◆ ReadGlobalImpl(). void ROOT::Experimental::RFieldBase::ReadGlobalImpl ; (; NTupleSize_t ; globalIndex, . void * ; to . ). protectedvirtual . Reimplemented in ROOT::Experimental::RClassField, ROOT::Experimental::RStreamerField, ROOT::Experimental::REnumField, ROOT::Experimental::RField< RNTupleCardinality< SizeT > >, ROOT::Experimental::RField< TObject >, ROOT::Experimental::RP",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:1678,Deployability,release,release,1678,"zable C++ type or a container for a collection of sub fields. The RFieldBase and its type-safe descendants provide the object to column mapper. They map C++ objects to primitive columns. The mapping is trivial for simple types such as 'double'. Complex types resolve to multiple primitive columns. The field knows based on its type and the field name the type(s) and name(s) of the columns.; Note: the class hierarchy starting at RFieldBase is not meant to be extended by user-provided child classes. This is and can only be partially enforced through C++. ; Definition at line 67 of file RFieldBase.hxx. Classes; class  RBulk;  Similar to RValue but manages an array of consecutive values. More...;  ; struct  RBulkSpec;  ; struct  RCheckResult;  Used in the return value of the Check() method. More...;  ; class  RColumnRepresentations;  Some fields have multiple possible column representations, e.g. More...;  ; struct  RCreateObjectDeleter;  ; struct  RCreateObjectDeleter< void >;  ; class  RDeleter;  A functor to release the memory acquired by CreateValue (memory and constructor). More...;  ; class  RSchemaIteratorTemplate;  Iterates over the sub tree of fields in depth-first search order. More...;  ; struct  RSharedPtrDeleter;  ; class  RTypedDeleter;  A deleter for templated RFieldBase descendents where the value type is known. More...;  ; class  RValue;  Points to an object with RNTuple I/O support and keeps a pointer to the corresponding field. More...;  . Public Types; using ColumnRepresentation_t = std::vector< EColumnType >;  ; enum class  EState { kUnconnected; , kConnectedToSink; , kConnectedToSource; };  During its lifetime, a field undergoes the following possible state transitions: More...;  ; using RConstSchemaIterator = RSchemaIteratorTemplate< true >;  ; using RSchemaIterator = RSchemaIteratorTemplate< false >;  . Public Member Functions;  RFieldBase (const RFieldBase &)=delete;  ;  RFieldBase (RFieldBase &&)=default;  ;  RFieldBase (std::string_view name, st",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:29712,Deployability,release,released,29712,"ental::RFieldBase::Create ; (; const std::string & ; fieldName, . const std::string & ; typeName . ). static . Factory method to resurrect a field from the stored on-disk type information. ; Definition at line 582 of file RField.cxx. ◆ CreateBulk(). ROOT::Experimental::RFieldBase::RBulk ROOT::Experimental::RFieldBase::CreateBulk ; (; ). The returned bulk is initially empty; RBulk::ReadBulk will construct the array of values. ; Definition at line 1076 of file RField.cxx. ◆ CreateObject() [1/3]. template<> . std::unique_ptr< void, typename RFieldBase::RCreateObjectDeleter< void >::deleter > ROOT::Experimental::RFieldBase::CreateObject ; (; ); const. ◆ CreateObject() [2/3]. template<typename T > . std::unique_ptr< T, typename RFieldBase::RCreateObjectDeleter< T >::deleter > ROOT::Experimental::RFieldBase::CreateObject. Generates an object of the field type and allocates new initialized memory according to the type. ; Implemented at the end of this header because the implementation is using RField<T>::TypeName() The returned object can be released with delete, i.e. it is valid to call auto ptr = field->CreateObject(); delete ptr.release();; Note that CreateObject<void> is supported. The returned unique_ptr has a custom deleter that reports an error if it is called. The intended use of the returned unique_ptr<void> is to call release(). In this way, the transfer of pointer ownership is explicit. ; Definition at line 451 of file RField.hxx. ◆ CreateObject() [3/3]. template<> . std::unique_ptr< void, typename ROOT::Experimental::RFieldBase::RCreateObjectDeleter< void >::deleter > ROOT::Experimental::RFieldBase::CreateObject ; (; ); const. Definition at line 542 of file RField.cxx. ◆ CreateObjectRawPtr(). void * ROOT::Experimental::RFieldBase::CreateObjectRawPtr ; (; ); const. protected . Factory method for the field's type. The caller owns the returned pointer. ; Definition at line 961 of file RField.cxx. ◆ CreateValue(). ROOT::Experimental::RFieldBase::RValue ROOT::Experi",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:29804,Deployability,release,release,29804," type information. ; Definition at line 582 of file RField.cxx. ◆ CreateBulk(). ROOT::Experimental::RFieldBase::RBulk ROOT::Experimental::RFieldBase::CreateBulk ; (; ). The returned bulk is initially empty; RBulk::ReadBulk will construct the array of values. ; Definition at line 1076 of file RField.cxx. ◆ CreateObject() [1/3]. template<> . std::unique_ptr< void, typename RFieldBase::RCreateObjectDeleter< void >::deleter > ROOT::Experimental::RFieldBase::CreateObject ; (; ); const. ◆ CreateObject() [2/3]. template<typename T > . std::unique_ptr< T, typename RFieldBase::RCreateObjectDeleter< T >::deleter > ROOT::Experimental::RFieldBase::CreateObject. Generates an object of the field type and allocates new initialized memory according to the type. ; Implemented at the end of this header because the implementation is using RField<T>::TypeName() The returned object can be released with delete, i.e. it is valid to call auto ptr = field->CreateObject(); delete ptr.release();; Note that CreateObject<void> is supported. The returned unique_ptr has a custom deleter that reports an error if it is called. The intended use of the returned unique_ptr<void> is to call release(). In this way, the transfer of pointer ownership is explicit. ; Definition at line 451 of file RField.hxx. ◆ CreateObject() [3/3]. template<> . std::unique_ptr< void, typename ROOT::Experimental::RFieldBase::RCreateObjectDeleter< void >::deleter > ROOT::Experimental::RFieldBase::CreateObject ; (; ); const. Definition at line 542 of file RField.cxx. ◆ CreateObjectRawPtr(). void * ROOT::Experimental::RFieldBase::CreateObjectRawPtr ; (; ); const. protected . Factory method for the field's type. The caller owns the returned pointer. ; Definition at line 961 of file RField.cxx. ◆ CreateValue(). ROOT::Experimental::RFieldBase::RValue ROOT::Experimental::RFieldBase::CreateValue ; (; ). Generates an object of the field type and wraps the created object in a shared pointer and returns it an RValue connected to the f",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:30004,Deployability,release,release,30004,"e::CreateBulk ; (; ). The returned bulk is initially empty; RBulk::ReadBulk will construct the array of values. ; Definition at line 1076 of file RField.cxx. ◆ CreateObject() [1/3]. template<> . std::unique_ptr< void, typename RFieldBase::RCreateObjectDeleter< void >::deleter > ROOT::Experimental::RFieldBase::CreateObject ; (; ); const. ◆ CreateObject() [2/3]. template<typename T > . std::unique_ptr< T, typename RFieldBase::RCreateObjectDeleter< T >::deleter > ROOT::Experimental::RFieldBase::CreateObject. Generates an object of the field type and allocates new initialized memory according to the type. ; Implemented at the end of this header because the implementation is using RField<T>::TypeName() The returned object can be released with delete, i.e. it is valid to call auto ptr = field->CreateObject(); delete ptr.release();; Note that CreateObject<void> is supported. The returned unique_ptr has a custom deleter that reports an error if it is called. The intended use of the returned unique_ptr<void> is to call release(). In this way, the transfer of pointer ownership is explicit. ; Definition at line 451 of file RField.hxx. ◆ CreateObject() [3/3]. template<> . std::unique_ptr< void, typename ROOT::Experimental::RFieldBase::RCreateObjectDeleter< void >::deleter > ROOT::Experimental::RFieldBase::CreateObject ; (; ); const. Definition at line 542 of file RField.cxx. ◆ CreateObjectRawPtr(). void * ROOT::Experimental::RFieldBase::CreateObjectRawPtr ; (; ); const. protected . Factory method for the field's type. The caller owns the returned pointer. ; Definition at line 961 of file RField.cxx. ◆ CreateValue(). ROOT::Experimental::RFieldBase::RValue ROOT::Experimental::RFieldBase::CreateValue ; (; ). Generates an object of the field type and wraps the created object in a shared pointer and returns it an RValue connected to the field. ; Definition at line 969 of file RField.cxx. ◆ end() [1/2]. ROOT::Experimental::RFieldBase::RSchemaIterator ROOT::Experimental::RFieldBase::e",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:3817,Energy Efficiency,allocate,allocates,3817,"re, bool isSimple, std::size_t nRepetitions=0);  The constructor creates the underlying column objects and connects them to either a sink or a source. ;  ; virtual ~RFieldBase ()=default;  ; virtual void AcceptVisitor (Detail::RFieldVisitor &visitor) const;  ; RSchemaIterator begin ();  ; RConstSchemaIterator begin () const;  ; RValue BindValue (std::shared_ptr< void > objPtr);  Creates a value from a memory location with an already constructed object. ;  ; RConstSchemaIterator cbegin () const;  ; RConstSchemaIterator cend () const;  ; std::unique_ptr< RFieldBase > Clone (std::string_view newName) const;  Copies the field and its sub fields using a possibly new name and a new, unconnected set of columns. ;  ; RBulk CreateBulk ();  The returned bulk is initially empty; RBulk::ReadBulk will construct the array of values. ;  ; template<> ; std::unique_ptr< void, typename RFieldBase::RCreateObjectDeleter< void >::deleter > CreateObject () const;  ; template<typename T > ; std::unique_ptr< T, typename RCreateObjectDeleter< T >::deleter > CreateObject () const;  Generates an object of the field type and allocates new initialized memory according to the type. ;  ; template<> ; std::unique_ptr< void, typename ROOT::Experimental::RFieldBase::RCreateObjectDeleter< void >::deleter > CreateObject () const;  ; RValue CreateValue ();  Generates an object of the field type and wraps the created object in a shared pointer and returns it an RValue connected to the field. ;  ; RSchemaIterator end ();  ; RConstSchemaIterator end () const;  ; virtual size_t GetAlignment () const =0;  As a rule of thumb, the alignment is equal to the size of the type. ;  ; RColumnRepresentations::Selection_t GetColumnRepresentatives () const;  Returns the fColumnRepresentative pointee or, if unset, the field's default representative. ;  ; const std::string & GetDescription () const;  Get the field's description. ;  ; const std::string & GetFieldName () const;  ; virtual std::uint32_t GetFieldVersion () ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:29531,Energy Efficiency,allocate,allocates,29531,"RField.cxx. ◆ Create() [2/2]. ROOT::Experimental::RResult< std::unique_ptr< ROOT::Experimental::RFieldBase > > ROOT::Experimental::RFieldBase::Create ; (; const std::string & ; fieldName, . const std::string & ; typeName . ). static . Factory method to resurrect a field from the stored on-disk type information. ; Definition at line 582 of file RField.cxx. ◆ CreateBulk(). ROOT::Experimental::RFieldBase::RBulk ROOT::Experimental::RFieldBase::CreateBulk ; (; ). The returned bulk is initially empty; RBulk::ReadBulk will construct the array of values. ; Definition at line 1076 of file RField.cxx. ◆ CreateObject() [1/3]. template<> . std::unique_ptr< void, typename RFieldBase::RCreateObjectDeleter< void >::deleter > ROOT::Experimental::RFieldBase::CreateObject ; (; ); const. ◆ CreateObject() [2/3]. template<typename T > . std::unique_ptr< T, typename RFieldBase::RCreateObjectDeleter< T >::deleter > ROOT::Experimental::RFieldBase::CreateObject. Generates an object of the field type and allocates new initialized memory according to the type. ; Implemented at the end of this header because the implementation is using RField<T>::TypeName() The returned object can be released with delete, i.e. it is valid to call auto ptr = field->CreateObject(); delete ptr.release();; Note that CreateObject<void> is supported. The returned unique_ptr has a custom deleter that reports an error if it is called. The intended use of the returned unique_ptr<void> is to call release(). In this way, the transfer of pointer ownership is explicit. ; Definition at line 451 of file RField.hxx. ◆ CreateObject() [3/3]. template<> . std::unique_ptr< void, typename ROOT::Experimental::RFieldBase::RCreateObjectDeleter< void >::deleter > ROOT::Experimental::RFieldBase::CreateObject ; (; ); const. Definition at line 542 of file RField.cxx. ◆ CreateObjectRawPtr(). void * ROOT::Experimental::RFieldBase::CreateObjectRawPtr ; (; ); const. protected . Factory method for the field's type. The caller owns the returne",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:36433,Energy Efficiency,reduce,reduce,36433,"impleField< T >, ROOT::Experimental::RSimpleField< bool >, ROOT::Experimental::RSimpleField< char >, ROOT::Experimental::RSimpleField< double >, ROOT::Experimental::RSimpleField< float >, and ROOT::Experimental::Internal::RArraySizeField.; Definition at line 325 of file RFieldBase.hxx. ◆ GenerateColumnsImpl() [1/3]. template<typename... ColumnCppTs> . void ROOT::Experimental::RFieldBase::GenerateColumnsImpl ; (; ). inlineprotected . For writing, use the currently set column representative. ; Definition at line 281 of file RFieldBase.hxx. ◆ GenerateColumnsImpl() [2/3]. template<std::uint32_t ColumnIndexT, typename HeadT , typename... TailTs> . void ROOT::Experimental::RFieldBase::GenerateColumnsImpl ; (; const ColumnRepresentation_t & ; representation, . std::uint16_t ; representationIndex . ). inlineprotected . Helpers for generating columns. ; We use the fact that most fields have the same C++/memory types for all their column representations. Where possible, we call the helpers not from the header to reduce compilation time. ; Definition at line 259 of file RFieldBase.hxx. ◆ GenerateColumnsImpl() [3/3]. template<typename... ColumnCppTs> . void ROOT::Experimental::RFieldBase::GenerateColumnsImpl ; (; const RNTupleDescriptor & ; desc). inlineprotected . For reading, use the on-disk column list. ; Definition at line 297 of file RFieldBase.hxx. ◆ GetAlignment(). virtual size_t ROOT::Experimental::RFieldBase::GetAlignment ; (; ); const. pure virtual . As a rule of thumb, the alignment is equal to the size of the type. ; There are, however, various exceptions to this rule depending on OS and CPU architecture. So enforce the alignment to be explicitly spelled out. ; Implemented in ROOT::Experimental::Internal::RRDFCardinalityField, ROOT::Experimental::Internal::RArraySizeField, ROOT::Experimental::RFieldZero, ROOT::Experimental::RInvalidField, ROOT::Experimental::RClassField, ROOT::Experimental::RStreamerField, ROOT::Experimental::REnumField, ROOT::Experimental::RSimpleF",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:58753,Energy Efficiency,allocate,allocated,58753,"e. private . The C++ type captured by this field. ; Definition at line 169 of file RFieldBase.hxx. ◆ fTypeAlias. std::string ROOT::Experimental::RFieldBase::fTypeAlias. protected . A typedef or using name that was used when creating the field. ; Definition at line 239 of file RFieldBase.hxx. ◆ kInvalidTypeVersion. constexpr std::uint32_t ROOT::Experimental::RFieldBase::kInvalidTypeVersion = -1U. staticconstexpr . Definition at line 111 of file RFieldBase.hxx. ◆ kTraitMappable. constexpr int ROOT::Experimental::RFieldBase::kTraitMappable = 0x04. staticconstexpr . A field of a fundamental type that can be directly mapped via RField<T>::Map(), i.e. ; maps as-is to a single column ; Definition at line 119 of file RFieldBase.hxx. ◆ kTraitTriviallyConstructible. constexpr int ROOT::Experimental::RFieldBase::kTraitTriviallyConstructible = 0x01. staticconstexpr . No constructor needs to be called, i.e. ; any bit pattern in the allocated memory represents a valid type A trivially constructible field has a no-op ConstructValue() implementation ; Definition at line 114 of file RFieldBase.hxx. ◆ kTraitTriviallyDestructible. constexpr int ROOT::Experimental::RFieldBase::kTraitTriviallyDestructible = 0x02. staticconstexpr . The type is cleaned up just by freeing its memory. I.e. the destructor performs a no-op. ; Definition at line 116 of file RFieldBase.hxx. ◆ kTraitTrivialType. constexpr int ROOT::Experimental::RFieldBase::kTraitTrivialType = kTraitTriviallyConstructible | kTraitTriviallyDestructible. staticconstexpr . Shorthand for types that are both trivially constructible and destructible. ; Definition at line 123 of file RFieldBase.hxx. ◆ kTraitTypeChecksum. constexpr int ROOT::Experimental::RFieldBase::kTraitTypeChecksum = 0x08. staticconstexpr . The TClass checksum is set and valid. ; Definition at line 121 of file RFieldBase.hxx. Libraries for ROOT::Experimental::RFieldBase:. [legend]; The documentation for this class was generated from the following files:; tree/ntuple/",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:4087,Integrability,wrap,wraps,4087,"t;  ; RValue BindValue (std::shared_ptr< void > objPtr);  Creates a value from a memory location with an already constructed object. ;  ; RConstSchemaIterator cbegin () const;  ; RConstSchemaIterator cend () const;  ; std::unique_ptr< RFieldBase > Clone (std::string_view newName) const;  Copies the field and its sub fields using a possibly new name and a new, unconnected set of columns. ;  ; RBulk CreateBulk ();  The returned bulk is initially empty; RBulk::ReadBulk will construct the array of values. ;  ; template<> ; std::unique_ptr< void, typename RFieldBase::RCreateObjectDeleter< void >::deleter > CreateObject () const;  ; template<typename T > ; std::unique_ptr< T, typename RCreateObjectDeleter< T >::deleter > CreateObject () const;  Generates an object of the field type and allocates new initialized memory according to the type. ;  ; template<> ; std::unique_ptr< void, typename ROOT::Experimental::RFieldBase::RCreateObjectDeleter< void >::deleter > CreateObject () const;  ; RValue CreateValue ();  Generates an object of the field type and wraps the created object in a shared pointer and returns it an RValue connected to the field. ;  ; RSchemaIterator end ();  ; RConstSchemaIterator end () const;  ; virtual size_t GetAlignment () const =0;  As a rule of thumb, the alignment is equal to the size of the type. ;  ; RColumnRepresentations::Selection_t GetColumnRepresentatives () const;  Returns the fColumnRepresentative pointee or, if unset, the field's default representative. ;  ; const std::string & GetDescription () const;  Get the field's description. ;  ; const std::string & GetFieldName () const;  ; virtual std::uint32_t GetFieldVersion () const;  Indicates an evolution of the mapping scheme from C++ type to columns. ;  ; std::size_t GetNRepetitions () const;  ; DescriptorId_t GetOnDiskId () const;  ; std::uint32_t GetOnDiskTypeChecksum () const;  Return checksum stored in the field descriptor; only valid after a call to ConnectPageSource(), if the field sto",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:30743,Integrability,wrap,wraps,30743,"= field->CreateObject(); delete ptr.release();; Note that CreateObject<void> is supported. The returned unique_ptr has a custom deleter that reports an error if it is called. The intended use of the returned unique_ptr<void> is to call release(). In this way, the transfer of pointer ownership is explicit. ; Definition at line 451 of file RField.hxx. ◆ CreateObject() [3/3]. template<> . std::unique_ptr< void, typename ROOT::Experimental::RFieldBase::RCreateObjectDeleter< void >::deleter > ROOT::Experimental::RFieldBase::CreateObject ; (; ); const. Definition at line 542 of file RField.cxx. ◆ CreateObjectRawPtr(). void * ROOT::Experimental::RFieldBase::CreateObjectRawPtr ; (; ); const. protected . Factory method for the field's type. The caller owns the returned pointer. ; Definition at line 961 of file RField.cxx. ◆ CreateValue(). ROOT::Experimental::RFieldBase::RValue ROOT::Experimental::RFieldBase::CreateValue ; (; ). Generates an object of the field type and wraps the created object in a shared pointer and returns it an RValue connected to the field. ; Definition at line 969 of file RField.cxx. ◆ end() [1/2]. ROOT::Experimental::RFieldBase::RSchemaIterator ROOT::Experimental::RFieldBase::end ; (; ). Definition at line 1103 of file RField.cxx. ◆ end() [2/2]. ROOT::Experimental::RFieldBase::RConstSchemaIterator ROOT::Experimental::RFieldBase::end ; (; ); const. Definition at line 1113 of file RField.cxx. ◆ EnsureCompatibleColumnTypes(). const ROOT::Experimental::RFieldBase::ColumnRepresentation_t & ROOT::Experimental::RFieldBase::EnsureCompatibleColumnTypes ; (; const RNTupleDescriptor & ; desc, . std::uint16_t ; representationIndex . ); const. protected . Returns the on-disk column types found in the provided descriptor for fOnDiskId and the given representation index. ; If there are no columns for the given representation index, return an empty ColumnRepresentation_t list. Otherwise, the returned reference points into the static array returned by GetColumnRepresen",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:32853,Integrability,depend,depends,32853,"ColumnRepresentations(). ; Definition at line 1160 of file RField.cxx. ◆ EnsureValidFieldName(). ROOT::Experimental::RResult< void > ROOT::Experimental::RFieldBase::EnsureValidFieldName ; (; std::string_view ; fieldName). static . Check whether a given string is a valid field name. ; Definition at line 897 of file RField.cxx. ◆ EntryToColumnElementIndex(). ROOT::Experimental::NTupleSize_t ROOT::Experimental::RFieldBase::EntryToColumnElementIndex ; (; NTupleSize_t ; globalIndex); const. private . Translate an entry index to a column element index of the principal column and viceversa. ; These functions take into account the role and number of repetitions on each level of the field hierarchy as follows:; Top level fields: element index == entry index; Record fields propagate their principal column index to the principal columns of direct descendant fields; Collection and variant fields set the principal column index of their childs to 0. The column element index also depends on the number of repetitions of each field in the hierarchy, e.g., given a field with type std::array<std::array<float, 4>, 2>, this function returns 8 for the inner-most field. ; Definition at line 992 of file RField.cxx. ◆ FlushColumns(). void ROOT::Experimental::RFieldBase::FlushColumns ; (; ). private . Flushes data from active columns. ; Definition at line 1024 of file RField.cxx. ◆ GenerateColumns() [1/2]. virtual void ROOT::Experimental::RFieldBase::GenerateColumns ; (; ). inlineprotectedvirtual . Implementations in derived classes should create the backing columns corresponsing to the field type for writing. ; The default implementation does not attach any columns to the field. ; Reimplemented in ROOT::Experimental::RArrayAsRVecField, ROOT::Experimental::Internal::RRDFCardinalityField, ROOT::Experimental::Internal::RArraySizeField, ROOT::Experimental::RStreamerField, ROOT::Experimental::RCardinalityField, ROOT::Experimental::RRealField< T >, ROOT::Experimental::RRealField< double >, ROOT::",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:37010,Integrability,depend,depending,37010,"d::uint32_t ColumnIndexT, typename HeadT , typename... TailTs> . void ROOT::Experimental::RFieldBase::GenerateColumnsImpl ; (; const ColumnRepresentation_t & ; representation, . std::uint16_t ; representationIndex . ). inlineprotected . Helpers for generating columns. ; We use the fact that most fields have the same C++/memory types for all their column representations. Where possible, we call the helpers not from the header to reduce compilation time. ; Definition at line 259 of file RFieldBase.hxx. ◆ GenerateColumnsImpl() [3/3]. template<typename... ColumnCppTs> . void ROOT::Experimental::RFieldBase::GenerateColumnsImpl ; (; const RNTupleDescriptor & ; desc). inlineprotected . For reading, use the on-disk column list. ; Definition at line 297 of file RFieldBase.hxx. ◆ GetAlignment(). virtual size_t ROOT::Experimental::RFieldBase::GetAlignment ; (; ); const. pure virtual . As a rule of thumb, the alignment is equal to the size of the type. ; There are, however, various exceptions to this rule depending on OS and CPU architecture. So enforce the alignment to be explicitly spelled out. ; Implemented in ROOT::Experimental::Internal::RRDFCardinalityField, ROOT::Experimental::Internal::RArraySizeField, ROOT::Experimental::RFieldZero, ROOT::Experimental::RInvalidField, ROOT::Experimental::RClassField, ROOT::Experimental::RStreamerField, ROOT::Experimental::REnumField, ROOT::Experimental::RSimpleField< T >, ROOT::Experimental::RSimpleField< bool >, ROOT::Experimental::RSimpleField< char >, ROOT::Experimental::RSimpleField< double >, ROOT::Experimental::RSimpleField< float >, ROOT::Experimental::RField< RNTupleCardinality< SizeT > >, ROOT::Experimental::RField< TObject >, ROOT::Experimental::RProxiedCollectionField, ROOT::Experimental::RRecordField, ROOT::Experimental::RArrayField, ROOT::Experimental::RRVecField, ROOT::Experimental::RVectorField, ROOT::Experimental::RArrayAsRVecField, ROOT::Experimental::RAtomicField, ROOT::Experimental::RBitsetField, ROOT::Experimental::R",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:1117,Modifiability,extend,extended,1117,"ding...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::Experimental::RFieldBase Class ReferenceabstractNTuple-related classes. ; A field translates read and write calls from/to underlying columns to/from tree values. ; A field is a serializable C++ type or a container for a collection of sub fields. The RFieldBase and its type-safe descendants provide the object to column mapper. They map C++ objects to primitive columns. The mapping is trivial for simple types such as 'double'. Complex types resolve to multiple primitive columns. The field knows based on its type and the field name the type(s) and name(s) of the columns.; Note: the class hierarchy starting at RFieldBase is not meant to be extended by user-provided child classes. This is and can only be partially enforced through C++. ; Definition at line 67 of file RFieldBase.hxx. Classes; class  RBulk;  Similar to RValue but manages an array of consecutive values. More...;  ; struct  RBulkSpec;  ; struct  RCheckResult;  Used in the return value of the Check() method. More...;  ; class  RColumnRepresentations;  Some fields have multiple possible column representations, e.g. More...;  ; struct  RCreateObjectDeleter;  ; struct  RCreateObjectDeleter< void >;  ; class  RDeleter;  A functor to release the memory acquired by CreateValue (memory and constructor). More...;  ; class  RSchemaIteratorTemplate;  Iterates over the sub tree of fields in depth-first search order. More...;  ; struct  RSharedPtrDeleter;  ; class  RTypedDeleter;  A deleter for templated RFieldBase descendents where the value type is known. More...;  ; class  RValue;  Points to an object with RNTuple I/O support and keeps a pointer to the c",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:7682,Performance,perform,performs,7682,"e for this field. ;  . Static Public Member Functions; static std::vector< RCheckResult > Check (const std::string &fieldName, const std::string &typeName);  Checks if the given type is supported by RNTuple. ;  ; static RResult< std::unique_ptr< RFieldBase > > Create (const std::string &fieldName, const std::string &typeName);  Factory method to resurrect a field from the stored on-disk type information. ;  ; static RResult< void > EnsureValidFieldName (std::string_view fieldName);  Check whether a given string is a valid field name. ;  . Static Public Attributes; static constexpr std::uint32_t kInvalidTypeVersion = -1U;  ; static constexpr int kTraitMappable = 0x04;  A field of a fundamental type that can be directly mapped via RField<T>::Map(), i.e. ;  ; static constexpr int kTraitTriviallyConstructible = 0x01;  No constructor needs to be called, i.e. ;  ; static constexpr int kTraitTriviallyDestructible = 0x02;  The type is cleaned up just by freeing its memory. I.e. the destructor performs a no-op. ;  ; static constexpr int kTraitTrivialType = kTraitTriviallyConstructible | kTraitTriviallyDestructible;  Shorthand for types that are both trivially constructible and destructible. ;  ; static constexpr int kTraitTypeChecksum = 0x08;  The TClass checksum is set and valid. ;  . Protected Member Functions; size_t AddReadCallback (ReadCallback_t func);  Set a user-defined function to be called after reading a value, giving a chance to inspect and/or modify the value object. ;  ; std::size_t Append (const void *from);  Write the given value into columns. ;  ; virtual std::size_t AppendImpl (const void *from);  Operations on values of complex types, e.g. ;  ; void Attach (std::unique_ptr< RFieldBase > child);  Add a new subfield to the list of nested fields. ;  ; void AutoAdjustColumnTypes (const RNTupleWriteOptions &options);  When connecting a field to a page sink, the field's default column representation is subject to adjustment according to the write options. ;  ; vi",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:13102,Performance,cache,cached,13102," std::string &typeAlias, bool continueOnError=false);  Factory method to resurrect a field from the stored on-disk type information. ;  ; static std::unique_ptr< RDeleter > GetDeleterOf (const RFieldBase &other);  ; static Internal::RColumn * GetPrincipalColumnOf (const RFieldBase &other);  Fields may need direct access to the principal column of their sub fields, e.g. in RRVecField::ReadBulk. ;  . Protected Attributes; Internal::RColumn * fAuxiliaryColumn = nullptr;  Some fields have a second column in its column representation. ;  ; std::vector< std::unique_ptr< Internal::RColumn > > fAvailableColumns;  The columns are connected either to a sink or to a source (not to both); they are owned by the field. ;  ; std::vector< std::reference_wrapper< const ColumnRepresentation_t > > fColumnRepresentatives;  Pointers into the static vector GetColumnRepresentations().GetSerializationTypes() when SetColumnRepresentatives is called. ;  ; std::uint32_t fOnDiskTypeChecksum = 0;  TClass checksum cached from the descriptor after a call to ConnectPageSource(). ;  ; std::uint32_t fOnDiskTypeVersion = kInvalidTypeVersion;  C++ type version cached from the descriptor after a call to ConnectPageSource() ;  ; RFieldBase * fParent;  Sub fields point to their mother field. ;  ; Internal::RColumn * fPrincipalColumn = nullptr;  All fields that have columns have a distinct main column. ;  ; std::vector< ReadCallback_t > fReadCallbacks;  List of functions to be called after reading a value. ;  ; std::vector< std::unique_ptr< RFieldBase > > fSubFields;  Collections and classes own sub fields. ;  ; int fTraits = 0;  Properties of the type that allow for optimizations of collections of that type. ;  ; std::string fTypeAlias;  A typedef or using name that was used when creating the field. ;  . Private Types; using ReadCallback_t = std::function< void(void *)>;  . Private Member Functions; void CommitCluster ();  Flushes data from active columns to disk and calls CommitClusterImpl. ;  ; void Con",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:13245,Performance,cache,cached,13245,"er > GetDeleterOf (const RFieldBase &other);  ; static Internal::RColumn * GetPrincipalColumnOf (const RFieldBase &other);  Fields may need direct access to the principal column of their sub fields, e.g. in RRVecField::ReadBulk. ;  . Protected Attributes; Internal::RColumn * fAuxiliaryColumn = nullptr;  Some fields have a second column in its column representation. ;  ; std::vector< std::unique_ptr< Internal::RColumn > > fAvailableColumns;  The columns are connected either to a sink or to a source (not to both); they are owned by the field. ;  ; std::vector< std::reference_wrapper< const ColumnRepresentation_t > > fColumnRepresentatives;  Pointers into the static vector GetColumnRepresentations().GetSerializationTypes() when SetColumnRepresentatives is called. ;  ; std::uint32_t fOnDiskTypeChecksum = 0;  TClass checksum cached from the descriptor after a call to ConnectPageSource(). ;  ; std::uint32_t fOnDiskTypeVersion = kInvalidTypeVersion;  C++ type version cached from the descriptor after a call to ConnectPageSource() ;  ; RFieldBase * fParent;  Sub fields point to their mother field. ;  ; Internal::RColumn * fPrincipalColumn = nullptr;  All fields that have columns have a distinct main column. ;  ; std::vector< ReadCallback_t > fReadCallbacks;  List of functions to be called after reading a value. ;  ; std::vector< std::unique_ptr< RFieldBase > > fSubFields;  Collections and classes own sub fields. ;  ; int fTraits = 0;  Properties of the type that allow for optimizations of collections of that type. ;  ; std::string fTypeAlias;  A typedef or using name that was used when creating the field. ;  . Private Types; using ReadCallback_t = std::function< void(void *)>;  . Private Member Functions; void CommitCluster ();  Flushes data from active columns to disk and calls CommitClusterImpl. ;  ; void ConnectPageSink (Internal::RPageSink &pageSink, NTupleSize_t firstEntry=0);  Fields and their columns live in the void until connected to a physical page storage. ;  ; vo",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:13758,Performance,optimiz,optimizations,13758,"to a sink or to a source (not to both); they are owned by the field. ;  ; std::vector< std::reference_wrapper< const ColumnRepresentation_t > > fColumnRepresentatives;  Pointers into the static vector GetColumnRepresentations().GetSerializationTypes() when SetColumnRepresentatives is called. ;  ; std::uint32_t fOnDiskTypeChecksum = 0;  TClass checksum cached from the descriptor after a call to ConnectPageSource(). ;  ; std::uint32_t fOnDiskTypeVersion = kInvalidTypeVersion;  C++ type version cached from the descriptor after a call to ConnectPageSource() ;  ; RFieldBase * fParent;  Sub fields point to their mother field. ;  ; Internal::RColumn * fPrincipalColumn = nullptr;  All fields that have columns have a distinct main column. ;  ; std::vector< ReadCallback_t > fReadCallbacks;  List of functions to be called after reading a value. ;  ; std::vector< std::unique_ptr< RFieldBase > > fSubFields;  Collections and classes own sub fields. ;  ; int fTraits = 0;  Properties of the type that allow for optimizations of collections of that type. ;  ; std::string fTypeAlias;  A typedef or using name that was used when creating the field. ;  . Private Types; using ReadCallback_t = std::function< void(void *)>;  . Private Member Functions; void CommitCluster ();  Flushes data from active columns to disk and calls CommitClusterImpl. ;  ; void ConnectPageSink (Internal::RPageSink &pageSink, NTupleSize_t firstEntry=0);  Fields and their columns live in the void until connected to a physical page storage. ;  ; void ConnectPageSource (Internal::RPageSource &pageSource);  Connects the field and its sub field tree to the given page source. ;  ; NTupleSize_t EntryToColumnElementIndex (NTupleSize_t globalIndex) const;  Translate an entry index to a column element index of the principal column and viceversa. ;  ; void FlushColumns ();  Flushes data from active columns. ;  ; void InvokeReadCallbacks (void *target);  . Private Attributes; std::string fDescription;  Free text set by the use",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:48593,Performance,optimiz,optimized,48593," ). inlineprotected . Populate a single value with data from the field. ; The memory location pointed to by to needs to be of the fitting type. The fast path is conditioned by the field qualifying as simple, i.e. maps as-is to a single column and has no read callback. ; Definition at line 378 of file RFieldBase.hxx. ◆ ReadBulk(). std::size_t ROOT::Experimental::RFieldBase::ReadBulk ; (; const RBulkSpec & ; bulkSpec). protected . Returns the number of newly available values, that is the number of bools in bulkSpec.fMaskAvail that flipped from false to true. ; As a special return value, kAllSet can be used if all values are read independent from the masks. ; Definition at line 1086 of file RField.cxx. ◆ ReadBulkImpl(). std::size_t ROOT::Experimental::RFieldBase::ReadBulkImpl ; (; const RBulkSpec & ; bulkSpec). protectedvirtual . General implementation of bulk read. ; Loop over the required range and read values that are required and not already present. Derived classes may implement more optimized versions of this method. See ReadBulk() for the return value. ; Reimplemented in ROOT::Experimental::RField< RNTupleCardinality< SizeT > >, and ROOT::Experimental::RRVecField.; Definition at line 941 of file RField.cxx. ◆ ReadGlobalImpl(). void ROOT::Experimental::RFieldBase::ReadGlobalImpl ; (; NTupleSize_t ; globalIndex, . void * ; to . ). protectedvirtual . Reimplemented in ROOT::Experimental::RClassField, ROOT::Experimental::RStreamerField, ROOT::Experimental::REnumField, ROOT::Experimental::RField< RNTupleCardinality< SizeT > >, ROOT::Experimental::RField< TObject >, ROOT::Experimental::RProxiedCollectionField, ROOT::Experimental::RRecordField, ROOT::Experimental::RArrayField, ROOT::Experimental::RRVecField, ROOT::Experimental::RVectorField, ROOT::Experimental::RArrayAsRVecField, ROOT::Experimental::RAtomicField, ROOT::Experimental::RBitsetField, ROOT::Experimental::ROptionalField, ROOT::Experimental::RUniquePtrField, ROOT::Experimental::RVariantField, ROOT::Experimenta",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:55525,Performance,cache,cached,55525,"st-read callback. ; Definition at line 175 of file RFieldBase.hxx. ◆ fName. std::string ROOT::Experimental::RFieldBase::fName. private . The field name relative to its parent field. ; Definition at line 167 of file RFieldBase.hxx. ◆ fNRepetitions. std::size_t ROOT::Experimental::RFieldBase::fNRepetitions. private . For fixed sized arrays, the array length. ; Definition at line 173 of file RFieldBase.hxx. ◆ fOnDiskId. DescriptorId_t ROOT::Experimental::RFieldBase::fOnDiskId = kInvalidDescriptorId. private . When the columns are connected to a page source or page sink, the field represents a field id in the corresponding RNTuple descriptor. ; This on-disk ID is set in RPageSink::Create() for writing and by RFieldDescriptor::CreateField() when recreating a field / model from the stored descriptor. ; Definition at line 179 of file RFieldBase.hxx. ◆ fOnDiskTypeChecksum. std::uint32_t ROOT::Experimental::RFieldBase::fOnDiskTypeChecksum = 0. protected . TClass checksum cached from the descriptor after a call to ConnectPageSource(). ; Only set for classes with dictionaries. ; Definition at line 246 of file RFieldBase.hxx. ◆ fOnDiskTypeVersion. std::uint32_t ROOT::Experimental::RFieldBase::fOnDiskTypeVersion = kInvalidTypeVersion. protected . C++ type version cached from the descriptor after a call to ConnectPageSource() ; Definition at line 243 of file RFieldBase.hxx. ◆ fParent. RFieldBase* ROOT::Experimental::RFieldBase::fParent. protected . Sub fields point to their mother field. ; Definition at line 222 of file RFieldBase.hxx. ◆ fPrincipalColumn. Internal::RColumn* ROOT::Experimental::RFieldBase::fPrincipalColumn = nullptr. protected . All fields that have columns have a distinct main column. ; E.g., for simple fields (float, int, ...), the principal column corresponds to the field type. For collection fields except fixed-sized arrays, the main column is the offset field. Class fields have no column of their own. When reading, points to any column of the column team of t",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:55819,Performance,cache,cached,55819,". For fixed sized arrays, the array length. ; Definition at line 173 of file RFieldBase.hxx. ◆ fOnDiskId. DescriptorId_t ROOT::Experimental::RFieldBase::fOnDiskId = kInvalidDescriptorId. private . When the columns are connected to a page source or page sink, the field represents a field id in the corresponding RNTuple descriptor. ; This on-disk ID is set in RPageSink::Create() for writing and by RFieldDescriptor::CreateField() when recreating a field / model from the stored descriptor. ; Definition at line 179 of file RFieldBase.hxx. ◆ fOnDiskTypeChecksum. std::uint32_t ROOT::Experimental::RFieldBase::fOnDiskTypeChecksum = 0. protected . TClass checksum cached from the descriptor after a call to ConnectPageSource(). ; Only set for classes with dictionaries. ; Definition at line 246 of file RFieldBase.hxx. ◆ fOnDiskTypeVersion. std::uint32_t ROOT::Experimental::RFieldBase::fOnDiskTypeVersion = kInvalidTypeVersion. protected . C++ type version cached from the descriptor after a call to ConnectPageSource() ; Definition at line 243 of file RFieldBase.hxx. ◆ fParent. RFieldBase* ROOT::Experimental::RFieldBase::fParent. protected . Sub fields point to their mother field. ; Definition at line 222 of file RFieldBase.hxx. ◆ fPrincipalColumn. Internal::RColumn* ROOT::Experimental::RFieldBase::fPrincipalColumn = nullptr. protected . All fields that have columns have a distinct main column. ; E.g., for simple fields (float, int, ...), the principal column corresponds to the field type. For collection fields except fixed-sized arrays, the main column is the offset field. Class fields have no column of their own. When reading, points to any column of the column team of the active representation. Usually, this is just the first column. When writing, points to the first column index of the currently active (not suppressed) column representation. ; Definition at line 229 of file RFieldBase.hxx. ◆ fReadCallbacks. std::vector<ReadCallback_t> ROOT::Experimental::RFieldBase::fReadCallbac",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:57671,Performance,optimiz,optimizations,57671,"ently active (not suppressed) column representation. ; Definition at line 229 of file RFieldBase.hxx. ◆ fReadCallbacks. std::vector<ReadCallback_t> ROOT::Experimental::RFieldBase::fReadCallbacks. protected . List of functions to be called after reading a value. ; Definition at line 241 of file RFieldBase.hxx. ◆ fState. EState ROOT::Experimental::RFieldBase::fState = EState::kUnconnected. private . Changed by ConnectTo[Sink,Source], reset by Clone() ; Definition at line 183 of file RFieldBase.hxx. ◆ fStructure. ENTupleStructure ROOT::Experimental::RFieldBase::fStructure. private . The role of this field in the data model structure. ; Definition at line 171 of file RFieldBase.hxx. ◆ fSubFields. std::vector<std::unique_ptr<RFieldBase> > ROOT::Experimental::RFieldBase::fSubFields. protected . Collections and classes own sub fields. ; Definition at line 220 of file RFieldBase.hxx. ◆ fTraits. int ROOT::Experimental::RFieldBase::fTraits = 0. protected . Properties of the type that allow for optimizations of collections of that type. ; Definition at line 237 of file RFieldBase.hxx. ◆ fType. std::string ROOT::Experimental::RFieldBase::fType. private . The C++ type captured by this field. ; Definition at line 169 of file RFieldBase.hxx. ◆ fTypeAlias. std::string ROOT::Experimental::RFieldBase::fTypeAlias. protected . A typedef or using name that was used when creating the field. ; Definition at line 239 of file RFieldBase.hxx. ◆ kInvalidTypeVersion. constexpr std::uint32_t ROOT::Experimental::RFieldBase::kInvalidTypeVersion = -1U. staticconstexpr . Definition at line 111 of file RFieldBase.hxx. ◆ kTraitMappable. constexpr int ROOT::Experimental::RFieldBase::kTraitMappable = 0x04. staticconstexpr . A field of a fundamental type that can be directly mapped via RField<T>::Map(), i.e. ; maps as-is to a single column ; Definition at line 119 of file RFieldBase.hxx. ◆ kTraitTriviallyConstructible. constexpr int ROOT::Experimental::RFieldBase::kTraitTriviallyConstructible = 0x01. sta",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:59121,Performance,perform,performs,59121,"ting the field. ; Definition at line 239 of file RFieldBase.hxx. ◆ kInvalidTypeVersion. constexpr std::uint32_t ROOT::Experimental::RFieldBase::kInvalidTypeVersion = -1U. staticconstexpr . Definition at line 111 of file RFieldBase.hxx. ◆ kTraitMappable. constexpr int ROOT::Experimental::RFieldBase::kTraitMappable = 0x04. staticconstexpr . A field of a fundamental type that can be directly mapped via RField<T>::Map(), i.e. ; maps as-is to a single column ; Definition at line 119 of file RFieldBase.hxx. ◆ kTraitTriviallyConstructible. constexpr int ROOT::Experimental::RFieldBase::kTraitTriviallyConstructible = 0x01. staticconstexpr . No constructor needs to be called, i.e. ; any bit pattern in the allocated memory represents a valid type A trivially constructible field has a no-op ConstructValue() implementation ; Definition at line 114 of file RFieldBase.hxx. ◆ kTraitTriviallyDestructible. constexpr int ROOT::Experimental::RFieldBase::kTraitTriviallyDestructible = 0x02. staticconstexpr . The type is cleaned up just by freeing its memory. I.e. the destructor performs a no-op. ; Definition at line 116 of file RFieldBase.hxx. ◆ kTraitTrivialType. constexpr int ROOT::Experimental::RFieldBase::kTraitTrivialType = kTraitTriviallyConstructible | kTraitTriviallyDestructible. staticconstexpr . Shorthand for types that are both trivially constructible and destructible. ; Definition at line 123 of file RFieldBase.hxx. ◆ kTraitTypeChecksum. constexpr int ROOT::Experimental::RFieldBase::kTraitTypeChecksum = 0x08. staticconstexpr . The TClass checksum is set and valid. ; Definition at line 121 of file RFieldBase.hxx. Libraries for ROOT::Experimental::RFieldBase:. [legend]; The documentation for this class was generated from the following files:; tree/ntuple/v7/inc/ROOT/RFieldBase.hxx; tree/ntuple/v7/inc/ROOT/RField.hxx; tree/ntuple/v7/src/RField.cxx. ROOTExperimentalRFieldBase. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:09 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:747,Safety,safe,safe,747,". ROOT: ROOT::Experimental::RFieldBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::Experimental::RFieldBase Class ReferenceabstractNTuple-related classes. ; A field translates read and write calls from/to underlying columns to/from tree values. ; A field is a serializable C++ type or a container for a collection of sub fields. The RFieldBase and its type-safe descendants provide the object to column mapper. They map C++ objects to primitive columns. The mapping is trivial for simple types such as 'double'. Complex types resolve to multiple primitive columns. The field knows based on its type and the field name the type(s) and name(s) of the columns.; Note: the class hierarchy starting at RFieldBase is not meant to be extended by user-provided child classes. This is and can only be partially enforced through C++. ; Definition at line 67 of file RFieldBase.hxx. Classes; class  RBulk;  Similar to RValue but manages an array of consecutive values. More...;  ; struct  RBulkSpec;  ; struct  RCheckResult;  Used in the return value of the Check() method. More...;  ; class  RColumnRepresentations;  Some fields have multiple possible column representations, e.g. More...;  ; struct  RCreateObjectDeleter;  ; struct  RCreateObjectDeleter< void >;  ; class  RDeleter;  A functor to release the memory acquired by CreateValue (memory and constructor). More...;  ; class  RSchemaIteratorTemplate;  Iterates over the sub tree of fields in depth-first search order. More...;  ; struct  RSharedPtrDeleter;  ; class  RTypedDeleter;  A deleter for templated RFieldBase descendents where the value type is known. ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:4921,Security,checksum,checksum,4921," typename ROOT::Experimental::RFieldBase::RCreateObjectDeleter< void >::deleter > CreateObject () const;  ; RValue CreateValue ();  Generates an object of the field type and wraps the created object in a shared pointer and returns it an RValue connected to the field. ;  ; RSchemaIterator end ();  ; RConstSchemaIterator end () const;  ; virtual size_t GetAlignment () const =0;  As a rule of thumb, the alignment is equal to the size of the type. ;  ; RColumnRepresentations::Selection_t GetColumnRepresentatives () const;  Returns the fColumnRepresentative pointee or, if unset, the field's default representative. ;  ; const std::string & GetDescription () const;  Get the field's description. ;  ; const std::string & GetFieldName () const;  ; virtual std::uint32_t GetFieldVersion () const;  Indicates an evolution of the mapping scheme from C++ type to columns. ;  ; std::size_t GetNRepetitions () const;  ; DescriptorId_t GetOnDiskId () const;  ; std::uint32_t GetOnDiskTypeChecksum () const;  Return checksum stored in the field descriptor; only valid after a call to ConnectPageSource(), if the field stored a type checksum. ;  ; std::uint32_t GetOnDiskTypeVersion () const;  Return the C++ type version stored in the field descriptor; only valid after a call to ConnectPageSource() ;  ; const RFieldBase * GetParent () const;  ; std::string GetQualifiedFieldName () const;  Returns the field name and parent field names separated by dots (""grandparent.parent.child"") ;  ; EState GetState () const;  ; ENTupleStructure GetStructure () const;  ; std::vector< RFieldBase * > GetSubFields ();  ; std::vector< const RFieldBase * > GetSubFields () const;  ; int GetTraits () const;  ; const std::string & GetTypeAlias () const;  ; virtual std::uint32_t GetTypeChecksum () const;  Return the current TClass reported checksum of this class. Only valid if kTraitTypeChecksum is set. ;  ; const std::string & GetTypeName () const;  ; virtual std::uint32_t GetTypeVersion () const;  Indicates an evolu",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:5037,Security,checksum,checksum,5037," typename ROOT::Experimental::RFieldBase::RCreateObjectDeleter< void >::deleter > CreateObject () const;  ; RValue CreateValue ();  Generates an object of the field type and wraps the created object in a shared pointer and returns it an RValue connected to the field. ;  ; RSchemaIterator end ();  ; RConstSchemaIterator end () const;  ; virtual size_t GetAlignment () const =0;  As a rule of thumb, the alignment is equal to the size of the type. ;  ; RColumnRepresentations::Selection_t GetColumnRepresentatives () const;  Returns the fColumnRepresentative pointee or, if unset, the field's default representative. ;  ; const std::string & GetDescription () const;  Get the field's description. ;  ; const std::string & GetFieldName () const;  ; virtual std::uint32_t GetFieldVersion () const;  Indicates an evolution of the mapping scheme from C++ type to columns. ;  ; std::size_t GetNRepetitions () const;  ; DescriptorId_t GetOnDiskId () const;  ; std::uint32_t GetOnDiskTypeChecksum () const;  Return checksum stored in the field descriptor; only valid after a call to ConnectPageSource(), if the field stored a type checksum. ;  ; std::uint32_t GetOnDiskTypeVersion () const;  Return the C++ type version stored in the field descriptor; only valid after a call to ConnectPageSource() ;  ; const RFieldBase * GetParent () const;  ; std::string GetQualifiedFieldName () const;  Returns the field name and parent field names separated by dots (""grandparent.parent.child"") ;  ; EState GetState () const;  ; ENTupleStructure GetStructure () const;  ; std::vector< RFieldBase * > GetSubFields ();  ; std::vector< const RFieldBase * > GetSubFields () const;  ; int GetTraits () const;  ; const std::string & GetTypeAlias () const;  ; virtual std::uint32_t GetTypeChecksum () const;  Return the current TClass reported checksum of this class. Only valid if kTraitTypeChecksum is set. ;  ; const std::string & GetTypeName () const;  ; virtual std::uint32_t GetTypeVersion () const;  Indicates an evolu",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:5732,Security,checksum,checksum,5732,"n () const;  Get the field's description. ;  ; const std::string & GetFieldName () const;  ; virtual std::uint32_t GetFieldVersion () const;  Indicates an evolution of the mapping scheme from C++ type to columns. ;  ; std::size_t GetNRepetitions () const;  ; DescriptorId_t GetOnDiskId () const;  ; std::uint32_t GetOnDiskTypeChecksum () const;  Return checksum stored in the field descriptor; only valid after a call to ConnectPageSource(), if the field stored a type checksum. ;  ; std::uint32_t GetOnDiskTypeVersion () const;  Return the C++ type version stored in the field descriptor; only valid after a call to ConnectPageSource() ;  ; const RFieldBase * GetParent () const;  ; std::string GetQualifiedFieldName () const;  Returns the field name and parent field names separated by dots (""grandparent.parent.child"") ;  ; EState GetState () const;  ; ENTupleStructure GetStructure () const;  ; std::vector< RFieldBase * > GetSubFields ();  ; std::vector< const RFieldBase * > GetSubFields () const;  ; int GetTraits () const;  ; const std::string & GetTypeAlias () const;  ; virtual std::uint32_t GetTypeChecksum () const;  Return the current TClass reported checksum of this class. Only valid if kTraitTypeChecksum is set. ;  ; const std::string & GetTypeName () const;  ; virtual std::uint32_t GetTypeVersion () const;  Indicates an evolution of the C++ type itself. ;  ; virtual size_t GetValueSize () const =0;  The number of bytes taken by a value of the appropriate type. ;  ; bool HasDefaultColumnRepresentative () const;  Whether or not an explicit column representative was set. ;  ; bool HasReadCallbacks () const;  ; bool IsSimple () const;  ; RFieldBase & operator= (const RFieldBase &)=delete;  ; RFieldBase & operator= (RFieldBase &&)=default;  ; void SetColumnRepresentatives (const RColumnRepresentations::Selection_t &representatives);  Fixes a column representative. ;  ; void SetDescription (std::string_view description);  ; void SetOnDiskId (DescriptorId_t id);  ; virtual st",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:7948,Security,checksum,checksum,7948,"RFieldBase > > Create (const std::string &fieldName, const std::string &typeName);  Factory method to resurrect a field from the stored on-disk type information. ;  ; static RResult< void > EnsureValidFieldName (std::string_view fieldName);  Check whether a given string is a valid field name. ;  . Static Public Attributes; static constexpr std::uint32_t kInvalidTypeVersion = -1U;  ; static constexpr int kTraitMappable = 0x04;  A field of a fundamental type that can be directly mapped via RField<T>::Map(), i.e. ;  ; static constexpr int kTraitTriviallyConstructible = 0x01;  No constructor needs to be called, i.e. ;  ; static constexpr int kTraitTriviallyDestructible = 0x02;  The type is cleaned up just by freeing its memory. I.e. the destructor performs a no-op. ;  ; static constexpr int kTraitTrivialType = kTraitTriviallyConstructible | kTraitTriviallyDestructible;  Shorthand for types that are both trivially constructible and destructible. ;  ; static constexpr int kTraitTypeChecksum = 0x08;  The TClass checksum is set and valid. ;  . Protected Member Functions; size_t AddReadCallback (ReadCallback_t func);  Set a user-defined function to be called after reading a value, giving a chance to inspect and/or modify the value object. ;  ; std::size_t Append (const void *from);  Write the given value into columns. ;  ; virtual std::size_t AppendImpl (const void *from);  Operations on values of complex types, e.g. ;  ; void Attach (std::unique_ptr< RFieldBase > child);  Add a new subfield to the list of nested fields. ;  ; void AutoAdjustColumnTypes (const RNTupleWriteOptions &options);  When connecting a field to a page sink, the field's default column representation is subject to adjustment according to the write options. ;  ; virtual std::unique_ptr< RFieldBase > CloneImpl (std::string_view newName) const =0;  Called by Clone(), which additionally copies the on-disk ID. ;  ; virtual void CommitClusterImpl ();  ; virtual void ConstructValue (void *where) const =0;  Cons",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:12417,Security,access,access,12417,"; void RemoveReadCallback (size_t idx);  . Static Protected Member Functions; static std::size_t CallAppendOn (RFieldBase &other, const void *from);  Allow derived classes to call Append and Read on other (sub) fields. ;  ; static void CallConstructValueOn (const RFieldBase &other, void *where);  Allow derived classes to call ConstructValue(void *) and GetDeleter on other (sub) fields. ;  ; static void * CallCreateObjectRawPtrOn (RFieldBase &other);  ; static void CallReadOn (RFieldBase &other, NTupleSize_t globalIndex, void *to);  ; static void CallReadOn (RFieldBase &other, RClusterIndex clusterIndex, void *to);  ; static RResult< std::unique_ptr< RFieldBase > > Create (const std::string &fieldName, const std::string &canonicalType, const std::string &typeAlias, bool continueOnError=false);  Factory method to resurrect a field from the stored on-disk type information. ;  ; static std::unique_ptr< RDeleter > GetDeleterOf (const RFieldBase &other);  ; static Internal::RColumn * GetPrincipalColumnOf (const RFieldBase &other);  Fields may need direct access to the principal column of their sub fields, e.g. in RRVecField::ReadBulk. ;  . Protected Attributes; Internal::RColumn * fAuxiliaryColumn = nullptr;  Some fields have a second column in its column representation. ;  ; std::vector< std::unique_ptr< Internal::RColumn > > fAvailableColumns;  The columns are connected either to a sink or to a source (not to both); they are owned by the field. ;  ; std::vector< std::reference_wrapper< const ColumnRepresentation_t > > fColumnRepresentatives;  Pointers into the static vector GetColumnRepresentations().GetSerializationTypes() when SetColumnRepresentatives is called. ;  ; std::uint32_t fOnDiskTypeChecksum = 0;  TClass checksum cached from the descriptor after a call to ConnectPageSource(). ;  ; std::uint32_t fOnDiskTypeVersion = kInvalidTypeVersion;  C++ type version cached from the descriptor after a call to ConnectPageSource() ;  ; RFieldBase * fParent;  Sub fields point ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:13093,Security,checksum,checksum,13093," std::string &typeAlias, bool continueOnError=false);  Factory method to resurrect a field from the stored on-disk type information. ;  ; static std::unique_ptr< RDeleter > GetDeleterOf (const RFieldBase &other);  ; static Internal::RColumn * GetPrincipalColumnOf (const RFieldBase &other);  Fields may need direct access to the principal column of their sub fields, e.g. in RRVecField::ReadBulk. ;  . Protected Attributes; Internal::RColumn * fAuxiliaryColumn = nullptr;  Some fields have a second column in its column representation. ;  ; std::vector< std::unique_ptr< Internal::RColumn > > fAvailableColumns;  The columns are connected either to a sink or to a source (not to both); they are owned by the field. ;  ; std::vector< std::reference_wrapper< const ColumnRepresentation_t > > fColumnRepresentatives;  Pointers into the static vector GetColumnRepresentations().GetSerializationTypes() when SetColumnRepresentatives is called. ;  ; std::uint32_t fOnDiskTypeChecksum = 0;  TClass checksum cached from the descriptor after a call to ConnectPageSource(). ;  ; std::uint32_t fOnDiskTypeVersion = kInvalidTypeVersion;  C++ type version cached from the descriptor after a call to ConnectPageSource() ;  ; RFieldBase * fParent;  Sub fields point to their mother field. ;  ; Internal::RColumn * fPrincipalColumn = nullptr;  All fields that have columns have a distinct main column. ;  ; std::vector< ReadCallback_t > fReadCallbacks;  List of functions to be called after reading a value. ;  ; std::vector< std::unique_ptr< RFieldBase > > fSubFields;  Collections and classes own sub fields. ;  ; int fTraits = 0;  Properties of the type that allow for optimizations of collections of that type. ;  ; std::string fTypeAlias;  A typedef or using name that was used when creating the field. ;  . Private Types; using ReadCallback_t = std::function< void(void *)>;  . Private Member Functions; void CommitCluster ();  Flushes data from active columns to disk and calls CommitClusterImpl. ;  ; void Con",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:41430,Security,checksum,checksum,41430,"eprotectedvirtual . Reimplemented in ROOT::Experimental::RStreamerField.; Definition at line 425 of file RFieldBase.hxx. ◆ GetFieldName(). const std::string & ROOT::Experimental::RFieldBase::GetFieldName ; (; ); const. inline . Definition at line 511 of file RFieldBase.hxx. ◆ GetFieldVersion(). virtual std::uint32_t ROOT::Experimental::RFieldBase::GetFieldVersion ; (; ); const. inlinevirtual . Indicates an evolution of the mapping scheme from C++ type to columns. ; Definition at line 540 of file RFieldBase.hxx. ◆ GetNRepetitions(). std::size_t ROOT::Experimental::RFieldBase::GetNRepetitions ; (; ); const. inline . Definition at line 517 of file RFieldBase.hxx. ◆ GetOnDiskId(). DescriptorId_t ROOT::Experimental::RFieldBase::GetOnDiskId ; (; ); const. inline . Definition at line 527 of file RFieldBase.hxx. ◆ GetOnDiskTypeChecksum(). std::uint32_t ROOT::Experimental::RFieldBase::GetOnDiskTypeChecksum ; (; ); const. inline . Return checksum stored in the field descriptor; only valid after a call to ConnectPageSource(), if the field stored a type checksum. ; Definition at line 549 of file RFieldBase.hxx. ◆ GetOnDiskTypeVersion(). std::uint32_t ROOT::Experimental::RFieldBase::GetOnDiskTypeVersion ; (; ); const. inline . Return the C++ type version stored in the field descriptor; only valid after a call to ConnectPageSource() ; Definition at line 546 of file RFieldBase.hxx. ◆ GetParent(). const RFieldBase * ROOT::Experimental::RFieldBase::GetParent ; (; ); const. inline . Definition at line 518 of file RFieldBase.hxx. ◆ GetPrincipalColumnOf(). static Internal::RColumn * ROOT::Experimental::RFieldBase::GetPrincipalColumnOf ; (; const RFieldBase & ; other). inlinestaticprotected . Fields may need direct access to the principal column of their sub fields, e.g. in RRVecField::ReadBulk. ; Definition at line 408 of file RFieldBase.hxx. ◆ GetQualifiedFieldName(). std::string ROOT::Experimental::RFieldBase::GetQualifiedFieldName ; (; ); const. Returns the field name and parent fiel",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:41546,Security,checksum,checksum,41546,"eprotectedvirtual . Reimplemented in ROOT::Experimental::RStreamerField.; Definition at line 425 of file RFieldBase.hxx. ◆ GetFieldName(). const std::string & ROOT::Experimental::RFieldBase::GetFieldName ; (; ); const. inline . Definition at line 511 of file RFieldBase.hxx. ◆ GetFieldVersion(). virtual std::uint32_t ROOT::Experimental::RFieldBase::GetFieldVersion ; (; ); const. inlinevirtual . Indicates an evolution of the mapping scheme from C++ type to columns. ; Definition at line 540 of file RFieldBase.hxx. ◆ GetNRepetitions(). std::size_t ROOT::Experimental::RFieldBase::GetNRepetitions ; (; ); const. inline . Definition at line 517 of file RFieldBase.hxx. ◆ GetOnDiskId(). DescriptorId_t ROOT::Experimental::RFieldBase::GetOnDiskId ; (; ); const. inline . Definition at line 527 of file RFieldBase.hxx. ◆ GetOnDiskTypeChecksum(). std::uint32_t ROOT::Experimental::RFieldBase::GetOnDiskTypeChecksum ; (; ); const. inline . Return checksum stored in the field descriptor; only valid after a call to ConnectPageSource(), if the field stored a type checksum. ; Definition at line 549 of file RFieldBase.hxx. ◆ GetOnDiskTypeVersion(). std::uint32_t ROOT::Experimental::RFieldBase::GetOnDiskTypeVersion ; (; ); const. inline . Return the C++ type version stored in the field descriptor; only valid after a call to ConnectPageSource() ; Definition at line 546 of file RFieldBase.hxx. ◆ GetParent(). const RFieldBase * ROOT::Experimental::RFieldBase::GetParent ; (; ); const. inline . Definition at line 518 of file RFieldBase.hxx. ◆ GetPrincipalColumnOf(). static Internal::RColumn * ROOT::Experimental::RFieldBase::GetPrincipalColumnOf ; (; const RFieldBase & ; other). inlinestaticprotected . Fields may need direct access to the principal column of their sub fields, e.g. in RRVecField::ReadBulk. ; Definition at line 408 of file RFieldBase.hxx. ◆ GetQualifiedFieldName(). std::string ROOT::Experimental::RFieldBase::GetQualifiedFieldName ; (; ); const. Returns the field name and parent fiel",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:42212,Security,access,access,42212,"iskId ; (; ); const. inline . Definition at line 527 of file RFieldBase.hxx. ◆ GetOnDiskTypeChecksum(). std::uint32_t ROOT::Experimental::RFieldBase::GetOnDiskTypeChecksum ; (; ); const. inline . Return checksum stored in the field descriptor; only valid after a call to ConnectPageSource(), if the field stored a type checksum. ; Definition at line 549 of file RFieldBase.hxx. ◆ GetOnDiskTypeVersion(). std::uint32_t ROOT::Experimental::RFieldBase::GetOnDiskTypeVersion ; (; ); const. inline . Return the C++ type version stored in the field descriptor; only valid after a call to ConnectPageSource() ; Definition at line 546 of file RFieldBase.hxx. ◆ GetParent(). const RFieldBase * ROOT::Experimental::RFieldBase::GetParent ; (; ); const. inline . Definition at line 518 of file RFieldBase.hxx. ◆ GetPrincipalColumnOf(). static Internal::RColumn * ROOT::Experimental::RFieldBase::GetPrincipalColumnOf ; (; const RFieldBase & ; other). inlinestaticprotected . Fields may need direct access to the principal column of their sub fields, e.g. in RRVecField::ReadBulk. ; Definition at line 408 of file RFieldBase.hxx. ◆ GetQualifiedFieldName(). std::string ROOT::Experimental::RFieldBase::GetQualifiedFieldName ; (; ); const. Returns the field name and parent field names separated by dots (""grandparent.parent.child"") ; Definition at line 570 of file RField.cxx. ◆ GetState(). EState ROOT::Experimental::RFieldBase::GetState ; (; ); const. inline . Definition at line 525 of file RFieldBase.hxx. ◆ GetStructure(). ENTupleStructure ROOT::Experimental::RFieldBase::GetStructure ; (; ); const. inline . Definition at line 516 of file RFieldBase.hxx. ◆ GetSubFields() [1/2]. std::vector< ROOT::Experimental::RFieldBase * > ROOT::Experimental::RFieldBase::GetSubFields ; (; ). Definition at line 1004 of file RField.cxx. ◆ GetSubFields() [2/2]. std::vector< const ROOT::Experimental::RFieldBase * > ROOT::Experimental::RFieldBase::GetSubFields ; (; ); const. Definition at line 1014 of file RField.cxx. ◆ G",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:43667,Security,checksum,checksum,43667,"onst. inline . Definition at line 525 of file RFieldBase.hxx. ◆ GetStructure(). ENTupleStructure ROOT::Experimental::RFieldBase::GetStructure ; (; ); const. inline . Definition at line 516 of file RFieldBase.hxx. ◆ GetSubFields() [1/2]. std::vector< ROOT::Experimental::RFieldBase * > ROOT::Experimental::RFieldBase::GetSubFields ; (; ). Definition at line 1004 of file RField.cxx. ◆ GetSubFields() [2/2]. std::vector< const ROOT::Experimental::RFieldBase * > ROOT::Experimental::RFieldBase::GetSubFields ; (; ); const. Definition at line 1014 of file RField.cxx. ◆ GetTraits(). int ROOT::Experimental::RFieldBase::GetTraits ; (; ); const. inline . Definition at line 508 of file RFieldBase.hxx. ◆ GetTypeAlias(). const std::string & ROOT::Experimental::RFieldBase::GetTypeAlias ; (; ); const. inline . Definition at line 515 of file RFieldBase.hxx. ◆ GetTypeChecksum(). virtual std::uint32_t ROOT::Experimental::RFieldBase::GetTypeChecksum ; (; ); const. inlinevirtual . Return the current TClass reported checksum of this class. Only valid if kTraitTypeChecksum is set. ; Reimplemented in ROOT::Experimental::RClassField, ROOT::Experimental::RStreamerField, and ROOT::Experimental::RField< TObject >.; Definition at line 544 of file RFieldBase.hxx. ◆ GetTypeName(). const std::string & ROOT::Experimental::RFieldBase::GetTypeName ; (; ); const. inline . Definition at line 514 of file RFieldBase.hxx. ◆ GetTypeVersion(). virtual std::uint32_t ROOT::Experimental::RFieldBase::GetTypeVersion ; (; ); const. inlinevirtual . Indicates an evolution of the C++ type itself. ; Reimplemented in ROOT::Experimental::RClassField, ROOT::Experimental::RStreamerField, and ROOT::Experimental::RField< TObject >.; Definition at line 542 of file RFieldBase.hxx. ◆ GetValueSize(). virtual size_t ROOT::Experimental::RFieldBase::GetValueSize ; (; ); const. pure virtual . The number of bytes taken by a value of the appropriate type. ; Implemented in ROOT::Experimental::Internal::RRDFCardinalityField, ROOT::Experim",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:55516,Security,checksum,checksum,55516,"st-read callback. ; Definition at line 175 of file RFieldBase.hxx. ◆ fName. std::string ROOT::Experimental::RFieldBase::fName. private . The field name relative to its parent field. ; Definition at line 167 of file RFieldBase.hxx. ◆ fNRepetitions. std::size_t ROOT::Experimental::RFieldBase::fNRepetitions. private . For fixed sized arrays, the array length. ; Definition at line 173 of file RFieldBase.hxx. ◆ fOnDiskId. DescriptorId_t ROOT::Experimental::RFieldBase::fOnDiskId = kInvalidDescriptorId. private . When the columns are connected to a page source or page sink, the field represents a field id in the corresponding RNTuple descriptor. ; This on-disk ID is set in RPageSink::Create() for writing and by RFieldDescriptor::CreateField() when recreating a field / model from the stored descriptor. ; Definition at line 179 of file RFieldBase.hxx. ◆ fOnDiskTypeChecksum. std::uint32_t ROOT::Experimental::RFieldBase::fOnDiskTypeChecksum = 0. protected . TClass checksum cached from the descriptor after a call to ConnectPageSource(). ; Only set for classes with dictionaries. ; Definition at line 246 of file RFieldBase.hxx. ◆ fOnDiskTypeVersion. std::uint32_t ROOT::Experimental::RFieldBase::fOnDiskTypeVersion = kInvalidTypeVersion. protected . C++ type version cached from the descriptor after a call to ConnectPageSource() ; Definition at line 243 of file RFieldBase.hxx. ◆ fParent. RFieldBase* ROOT::Experimental::RFieldBase::fParent. protected . Sub fields point to their mother field. ; Definition at line 222 of file RFieldBase.hxx. ◆ fPrincipalColumn. Internal::RColumn* ROOT::Experimental::RFieldBase::fPrincipalColumn = nullptr. protected . All fields that have columns have a distinct main column. ; E.g., for simple fields (float, int, ...), the principal column corresponds to the field type. For collection fields except fixed-sized arrays, the main column is the offset field. Class fields have no column of their own. When reading, points to any column of the column team of t",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:59602,Security,checksum,checksum,59602,"ting the field. ; Definition at line 239 of file RFieldBase.hxx. ◆ kInvalidTypeVersion. constexpr std::uint32_t ROOT::Experimental::RFieldBase::kInvalidTypeVersion = -1U. staticconstexpr . Definition at line 111 of file RFieldBase.hxx. ◆ kTraitMappable. constexpr int ROOT::Experimental::RFieldBase::kTraitMappable = 0x04. staticconstexpr . A field of a fundamental type that can be directly mapped via RField<T>::Map(), i.e. ; maps as-is to a single column ; Definition at line 119 of file RFieldBase.hxx. ◆ kTraitTriviallyConstructible. constexpr int ROOT::Experimental::RFieldBase::kTraitTriviallyConstructible = 0x01. staticconstexpr . No constructor needs to be called, i.e. ; any bit pattern in the allocated memory represents a valid type A trivially constructible field has a no-op ConstructValue() implementation ; Definition at line 114 of file RFieldBase.hxx. ◆ kTraitTriviallyDestructible. constexpr int ROOT::Experimental::RFieldBase::kTraitTriviallyDestructible = 0x02. staticconstexpr . The type is cleaned up just by freeing its memory. I.e. the destructor performs a no-op. ; Definition at line 116 of file RFieldBase.hxx. ◆ kTraitTrivialType. constexpr int ROOT::Experimental::RFieldBase::kTraitTrivialType = kTraitTriviallyConstructible | kTraitTriviallyDestructible. staticconstexpr . Shorthand for types that are both trivially constructible and destructible. ; Definition at line 123 of file RFieldBase.hxx. ◆ kTraitTypeChecksum. constexpr int ROOT::Experimental::RFieldBase::kTraitTypeChecksum = 0x08. staticconstexpr . The TClass checksum is set and valid. ; Definition at line 121 of file RFieldBase.hxx. Libraries for ROOT::Experimental::RFieldBase:. [legend]; The documentation for this class was generated from the following files:; tree/ntuple/v7/inc/ROOT/RFieldBase.hxx; tree/ntuple/v7/inc/ROOT/RField.hxx; tree/ntuple/v7/src/RField.cxx. ROOTExperimentalRFieldBase. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:09 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:871,Usability,simpl,simple,871,". ROOT: ROOT::Experimental::RFieldBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::Experimental::RFieldBase Class ReferenceabstractNTuple-related classes. ; A field translates read and write calls from/to underlying columns to/from tree values. ; A field is a serializable C++ type or a container for a collection of sub fields. The RFieldBase and its type-safe descendants provide the object to column mapper. They map C++ objects to primitive columns. The mapping is trivial for simple types such as 'double'. Complex types resolve to multiple primitive columns. The field knows based on its type and the field name the type(s) and name(s) of the columns.; Note: the class hierarchy starting at RFieldBase is not meant to be extended by user-provided child classes. This is and can only be partially enforced through C++. ; Definition at line 67 of file RFieldBase.hxx. Classes; class  RBulk;  Similar to RValue but manages an array of consecutive values. More...;  ; struct  RBulkSpec;  ; struct  RCheckResult;  Used in the return value of the Check() method. More...;  ; class  RColumnRepresentations;  Some fields have multiple possible column representations, e.g. More...;  ; struct  RCreateObjectDeleter;  ; struct  RCreateObjectDeleter< void >;  ; class  RDeleter;  A functor to release the memory acquired by CreateValue (memory and constructor). More...;  ; class  RSchemaIteratorTemplate;  Iterates over the sub tree of fields in depth-first search order. More...;  ; struct  RSharedPtrDeleter;  ; class  RTypedDeleter;  A deleter for templated RFieldBase descendents where the value type is known. ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:14794,Usability,simpl,simple,14794,"  ; std::string fTypeAlias;  A typedef or using name that was used when creating the field. ;  . Private Types; using ReadCallback_t = std::function< void(void *)>;  . Private Member Functions; void CommitCluster ();  Flushes data from active columns to disk and calls CommitClusterImpl. ;  ; void ConnectPageSink (Internal::RPageSink &pageSink, NTupleSize_t firstEntry=0);  Fields and their columns live in the void until connected to a physical page storage. ;  ; void ConnectPageSource (Internal::RPageSource &pageSource);  Connects the field and its sub field tree to the given page source. ;  ; NTupleSize_t EntryToColumnElementIndex (NTupleSize_t globalIndex) const;  Translate an entry index to a column element index of the principal column and viceversa. ;  ; void FlushColumns ();  Flushes data from active columns. ;  ; void InvokeReadCallbacks (void *target);  . Private Attributes; std::string fDescription;  Free text set by the user. ;  ; bool fIsSimple;  A field qualifies as simple if it is both mappable and has no post-read callback. ;  ; std::string fName;  The field name relative to its parent field. ;  ; std::size_t fNRepetitions;  For fixed sized arrays, the array length. ;  ; DescriptorId_t fOnDiskId = kInvalidDescriptorId;  When the columns are connected to a page source or page sink, the field represents a field id in the corresponding RNTuple descriptor. ;  ; EState fState = EState::kUnconnected;  Changed by ConnectTo[Sink,Source], reset by Clone() ;  ; ENTupleStructure fStructure;  The role of this field in the data model structure. ;  ; std::string fType;  The C++ type captured by this field. ;  . Friends; void Internal::CallCommitClusterOnField (RFieldBase &);  ; void Internal::CallConnectPageSinkOnField (RFieldBase &, Internal::RPageSink &, NTupleSize_t);  ; void Internal::CallConnectPageSourceOnField (RFieldBase &, Internal::RPageSource &);  ; void Internal::CallFlushColumnsOnField (RFieldBase &);  ; struct ROOT::Experimental::Internal::RFieldCallbac",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:17606,Usability,simpl,simple,17606,"using ROOT::Experimental::RFieldBase::RSchemaIterator = RSchemaIteratorTemplate<false>. Definition at line 443 of file RFieldBase.hxx. Member Enumeration Documentation. ◆ EState. enum class ROOT::Experimental::RFieldBase::EState. strong . During its lifetime, a field undergoes the following possible state transitions: ; [*] --> Unconnected --> ConnectedToSink -— | | | | --> ConnectedToSource —> [*] . | |. EnumeratorkUnconnected ; kConnectedToSink ; kConnectedToSource . Definition at line 134 of file RFieldBase.hxx. Constructor & Destructor Documentation. ◆ RFieldBase() [1/3]. ROOT::Experimental::RFieldBase::RFieldBase ; (; std::string_view ; name, . std::string_view ; type, . ENTupleStructure ; structure, . bool ; isSimple, . std::size_t ; nRepetitions = 0 . ). The constructor creates the underlying column objects and connects them to either a sink or a source. ; If isSimple is true, the trait kTraitMappable is automatically set on construction. However, the field might be demoted to non-simple if a post-read callback is set. ; Definition at line 557 of file RField.cxx. ◆ RFieldBase() [2/3]. ROOT::Experimental::RFieldBase::RFieldBase ; (; const RFieldBase & ; ). delete . ◆ RFieldBase() [3/3]. ROOT::Experimental::RFieldBase::RFieldBase ; (; RFieldBase && ; ). default . ◆ ~RFieldBase(). virtual ROOT::Experimental::RFieldBase::~RFieldBase ; (; ). virtualdefault . Member Function Documentation. ◆ AcceptVisitor(). void ROOT::Experimental::RFieldBase::AcceptVisitor ; (; Detail::RFieldVisitor & ; visitor); const. virtual . Reimplemented in ROOT::Experimental::RFieldZero, ROOT::Experimental::RClassField, ROOT::Experimental::RStreamerField, ROOT::Experimental::REnumField, ROOT::Experimental::RCardinalityField, ROOT::Experimental::RField< TObject >, ROOT::Experimental::RField< bool >, ROOT::Experimental::RField< char >, ROOT::Experimental::RField< float >, ROOT::Experimental::RField< double >, ROOT::Experimental::RProxiedCollectionField, ROOT::Experimental::RRecordField, ROOT",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:47366,Usability,simpl,simple,47366," ◆ IsSimple(). bool ROOT::Experimental::RFieldBase::IsSimple ; (; ); const. inline . Definition at line 521 of file RFieldBase.hxx. ◆ OnConnectPageSource(). virtual void ROOT::Experimental::RFieldBase::OnConnectPageSource ; (; ). inlineprotectedvirtual . Called by ConnectPageSource() once connected; derived classes may override this as appropriate. ; Reimplemented in ROOT::Experimental::RClassField, and ROOT::Experimental::RField< TObject >.; Definition at line 431 of file RFieldBase.hxx. ◆ operator=() [1/2]. RFieldBase & ROOT::Experimental::RFieldBase::operator= ; (; const RFieldBase & ; ). delete . ◆ operator=() [2/2]. RFieldBase & ROOT::Experimental::RFieldBase::operator= ; (; RFieldBase && ; ). default . ◆ Read() [1/2]. void ROOT::Experimental::RFieldBase::Read ; (; NTupleSize_t ; globalIndex, . void * ; to . ). inlineprotected . Populate a single value with data from the field. ; The memory location pointed to by to needs to be of the fitting type. The fast path is conditioned by the field qualifying as simple, i.e. maps as-is to a single column and has no read callback. ; Definition at line 362 of file RFieldBase.hxx. ◆ Read() [2/2]. void ROOT::Experimental::RFieldBase::Read ; (; RClusterIndex ; clusterIndex, . void * ; to . ). inlineprotected . Populate a single value with data from the field. ; The memory location pointed to by to needs to be of the fitting type. The fast path is conditioned by the field qualifying as simple, i.e. maps as-is to a single column and has no read callback. ; Definition at line 378 of file RFieldBase.hxx. ◆ ReadBulk(). std::size_t ROOT::Experimental::RFieldBase::ReadBulk ; (; const RBulkSpec & ; bulkSpec). protected . Returns the number of newly available values, that is the number of bools in bulkSpec.fMaskAvail that flipped from false to true. ; As a special return value, kAllSet can be used if all values are read independent from the masks. ; Definition at line 1086 of file RField.cxx. ◆ ReadBulkImpl(). std::size_t ROOT::Experi",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:47792,Usability,simpl,simple,47792,":RField< TObject >.; Definition at line 431 of file RFieldBase.hxx. ◆ operator=() [1/2]. RFieldBase & ROOT::Experimental::RFieldBase::operator= ; (; const RFieldBase & ; ). delete . ◆ operator=() [2/2]. RFieldBase & ROOT::Experimental::RFieldBase::operator= ; (; RFieldBase && ; ). default . ◆ Read() [1/2]. void ROOT::Experimental::RFieldBase::Read ; (; NTupleSize_t ; globalIndex, . void * ; to . ). inlineprotected . Populate a single value with data from the field. ; The memory location pointed to by to needs to be of the fitting type. The fast path is conditioned by the field qualifying as simple, i.e. maps as-is to a single column and has no read callback. ; Definition at line 362 of file RFieldBase.hxx. ◆ Read() [2/2]. void ROOT::Experimental::RFieldBase::Read ; (; RClusterIndex ; clusterIndex, . void * ; to . ). inlineprotected . Populate a single value with data from the field. ; The memory location pointed to by to needs to be of the fitting type. The fast path is conditioned by the field qualifying as simple, i.e. maps as-is to a single column and has no read callback. ; Definition at line 378 of file RFieldBase.hxx. ◆ ReadBulk(). std::size_t ROOT::Experimental::RFieldBase::ReadBulk ; (; const RBulkSpec & ; bulkSpec). protected . Returns the number of newly available values, that is the number of bools in bulkSpec.fMaskAvail that flipped from false to true. ; As a special return value, kAllSet can be used if all values are read independent from the masks. ; Definition at line 1086 of file RField.cxx. ◆ ReadBulkImpl(). std::size_t ROOT::Experimental::RFieldBase::ReadBulkImpl ; (; const RBulkSpec & ; bulkSpec). protectedvirtual . General implementation of bulk read. ; Loop over the required range and read values that are required and not already present. Derived classes may implement more optimized versions of this method. See ReadBulk() for the return value. ; Reimplemented in ROOT::Experimental::RField< RNTupleCardinality< SizeT > >, and ROOT::Experimental::RR",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:54505,Usability,simpl,simple,54505,"se::fAvailableColumns. protected . The columns are connected either to a sink or to a source (not to both); they are owned by the field. ; Contains all columns of all representations in order of representation and column index. ; Definition at line 235 of file RFieldBase.hxx. ◆ fColumnRepresentatives. std::vector<std::reference_wrapper<const ColumnRepresentation_t> > ROOT::Experimental::RFieldBase::fColumnRepresentatives. protected . Pointers into the static vector GetColumnRepresentations().GetSerializationTypes() when SetColumnRepresentatives is called. ; Otherwise (if empty) GetColumnRepresentatives() returns a vector with a single element, the default representation. ; Definition at line 250 of file RFieldBase.hxx. ◆ fDescription. std::string ROOT::Experimental::RFieldBase::fDescription. private . Free text set by the user. ; Definition at line 181 of file RFieldBase.hxx. ◆ fIsSimple. bool ROOT::Experimental::RFieldBase::fIsSimple. private . A field qualifies as simple if it is both mappable and has no post-read callback. ; Definition at line 175 of file RFieldBase.hxx. ◆ fName. std::string ROOT::Experimental::RFieldBase::fName. private . The field name relative to its parent field. ; Definition at line 167 of file RFieldBase.hxx. ◆ fNRepetitions. std::size_t ROOT::Experimental::RFieldBase::fNRepetitions. private . For fixed sized arrays, the array length. ; Definition at line 173 of file RFieldBase.hxx. ◆ fOnDiskId. DescriptorId_t ROOT::Experimental::RFieldBase::fOnDiskId = kInvalidDescriptorId. private . When the columns are connected to a page source or page sink, the field represents a field id in the corresponding RNTuple descriptor. ; This on-disk ID is set in RPageSink::Create() for writing and by RFieldDescriptor::CreateField() when recreating a field / model from the stored descriptor. ; Definition at line 179 of file RFieldBase.hxx. ◆ fOnDiskTypeChecksum. std::uint32_t ROOT::Experimental::RFieldBase::fOnDiskTypeChecksum = 0. protected . TClass checksum",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:56277,Usability,simpl,simple,56277,"eld() when recreating a field / model from the stored descriptor. ; Definition at line 179 of file RFieldBase.hxx. ◆ fOnDiskTypeChecksum. std::uint32_t ROOT::Experimental::RFieldBase::fOnDiskTypeChecksum = 0. protected . TClass checksum cached from the descriptor after a call to ConnectPageSource(). ; Only set for classes with dictionaries. ; Definition at line 246 of file RFieldBase.hxx. ◆ fOnDiskTypeVersion. std::uint32_t ROOT::Experimental::RFieldBase::fOnDiskTypeVersion = kInvalidTypeVersion. protected . C++ type version cached from the descriptor after a call to ConnectPageSource() ; Definition at line 243 of file RFieldBase.hxx. ◆ fParent. RFieldBase* ROOT::Experimental::RFieldBase::fParent. protected . Sub fields point to their mother field. ; Definition at line 222 of file RFieldBase.hxx. ◆ fPrincipalColumn. Internal::RColumn* ROOT::Experimental::RFieldBase::fPrincipalColumn = nullptr. protected . All fields that have columns have a distinct main column. ; E.g., for simple fields (float, int, ...), the principal column corresponds to the field type. For collection fields except fixed-sized arrays, the main column is the offset field. Class fields have no column of their own. When reading, points to any column of the column team of the active representation. Usually, this is just the first column. When writing, points to the first column index of the currently active (not suppressed) column representation. ; Definition at line 229 of file RFieldBase.hxx. ◆ fReadCallbacks. std::vector<ReadCallback_t> ROOT::Experimental::RFieldBase::fReadCallbacks. protected . List of functions to be called after reading a value. ; Definition at line 241 of file RFieldBase.hxx. ◆ fState. EState ROOT::Experimental::RFieldBase::fState = EState::kUnconnected. private . Changed by ConnectTo[Sink,Source], reset by Clone() ; Definition at line 183 of file RFieldBase.hxx. ◆ fStructure. ENTupleStructure ROOT::Experimental::RFieldBase::fStructure. private . The role of this field in the",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFrame.html:969,Modifiability,config,configured,969,". ROOT: ROOT::Experimental::RFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Public Attributes |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::Experimental::RFrame Class ReferenceGraphics » ROOT7 Graphics » ROOT7 Pad related classes. ; Holds an area where drawing on user coordinate-system can be performed. ; AuthorsAxel Naumann axel@.nosp@m.cern.nosp@m..ch Sergey Linev s.lin.nosp@m.ev@g.nosp@m.si.de ; Date2017-09-26 ; WarningThis is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome! ; Definition at line 38 of file RFrame.hxx. Classes; class  RUserRanges;  ; class  RZoomRequest;  . Public Member Functions;  RFrame (TRootIOCtor *);  ; void GetClientRanges (unsigned connid, RUserRanges &ranges);  Return ranges configured for the client. ;  ;  Public Member Functions inherited from ROOT::Experimental::RDrawable;  RDrawable (const char *csstype);  ; virtual ~RDrawable ();  ; void ClearStyle ();  ; const std::string & GetCssClass () const;  ; const char * GetCssType () const;  ; const std::string & GetId () const;  ; void SetCssClass (const std::string &cl);  ; void SetId (const std::string &id);  ; virtual void UseStyle (const std::shared_ptr< RStyle > &style);  . Public Attributes; RAttrBorder border {this, ""border""};  ! frame border attributes ;  ; RAttrValue< bool > drawAxes {this, ""drawAxes"", false};  ! draw axes by frame ;  ; RAttrFill fill {this, ""fill""};  ! frame fill attributes ;  ; RAttrValue< bool > gridX {this, ""gridX"", false};  ! show grid for X axis ;  ; RAttrValue< bool > gridY {this, ""gridY"", false};  ! show grid for Y axis ;  ; RAttrMargins margins {this, ""margins""};  ! frame margins relative to pad ;  ; RAttrValue< bool > swapX {this, ""swapX"", false};  ! swap position of X axis ;  ; RAttrValue< bool > swapY ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFrame.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFrame.html:1026,Modifiability,inherit,inherited,1026,"|; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::Experimental::RFrame Class ReferenceGraphics » ROOT7 Graphics » ROOT7 Pad related classes. ; Holds an area where drawing on user coordinate-system can be performed. ; AuthorsAxel Naumann axel@.nosp@m.cern.nosp@m..ch Sergey Linev s.lin.nosp@m.ev@g.nosp@m.si.de ; Date2017-09-26 ; WarningThis is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome! ; Definition at line 38 of file RFrame.hxx. Classes; class  RUserRanges;  ; class  RZoomRequest;  . Public Member Functions;  RFrame (TRootIOCtor *);  ; void GetClientRanges (unsigned connid, RUserRanges &ranges);  Return ranges configured for the client. ;  ;  Public Member Functions inherited from ROOT::Experimental::RDrawable;  RDrawable (const char *csstype);  ; virtual ~RDrawable ();  ; void ClearStyle ();  ; const std::string & GetCssClass () const;  ; const char * GetCssType () const;  ; const std::string & GetId () const;  ; void SetCssClass (const std::string &cl);  ; void SetId (const std::string &id);  ; virtual void UseStyle (const std::shared_ptr< RStyle > &style);  . Public Attributes; RAttrBorder border {this, ""border""};  ! frame border attributes ;  ; RAttrValue< bool > drawAxes {this, ""drawAxes"", false};  ! draw axes by frame ;  ; RAttrFill fill {this, ""fill""};  ! frame fill attributes ;  ; RAttrValue< bool > gridX {this, ""gridX"", false};  ! show grid for X axis ;  ; RAttrValue< bool > gridY {this, ""gridY"", false};  ! show grid for Y axis ;  ; RAttrMargins margins {this, ""margins""};  ! frame margins relative to pad ;  ; RAttrValue< bool > swapX {this, ""swapX"", false};  ! swap position of X axis ;  ; RAttrValue< bool > swapY {this, ""swapY"", false};  ! swap position of Y axis ;  ; RAttrValue< int > ticksX {this, ""ticksX"", 1};  ! X ticks drawing: 0 - off, 1 - normal, 2 - both sides, 3 - both sides with labels ;  ; RAttrValue< int > ti",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFrame.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFrame.html:3063,Modifiability,inherit,inherited,3063,"lue< int > ticksY {this, ""ticksY"", 1};  ! Y ticks drawing: 0 - off, 1 - normal, 2 - both sides, 3 - both sides with labels ;  ; RAttrAxis x {this, ""x""};  ! drawing attributes for X axis ;  ; RAttrAxis x2 {this, ""x2""};  ! drawing attributes for X2 axis ;  ; RAttrAxis y {this, ""y""};  ! drawing attributes for Y axis ;  ; RAttrAxis y2 {this, ""y2""};  ! drawing attributes for Y2 axis ;  ; RAttrAxis z {this, ""z""};  ! drawing attributes for Z axis ;  . Protected Member Functions; void AssignZoomRange (unsigned ndim, RAttrAxis &axis, const RUserRanges &ranges);  Internal - assign client zoomed range to specified axis. ;  ; void GetAxisRanges (unsigned ndim, const RAttrAxis &axis, RUserRanges &ranges) const;  Internal - extract range for specified axis. ;  ; void PopulateMenu (RMenuItems &) override;  Provide context menu items. ;  ;  Protected Member Functions inherited from ROOT::Experimental::RDrawable;  RDrawable (const RDrawable &)=delete;  ; virtual void CollectShared (Internal::RIOSharedVector_t &);  ; virtual std::unique_ptr< RDisplayItem > Display (const RDisplayContext &);  Creates display item for drawable By default item contains drawable data itself. ;  ; virtual void Execute (const std::string &);  ; RAttrMap & GetAttrMap ();  ; const RAttrMap & GetAttrMap () const;  ; Version_t GetVersion () const;  ; virtual bool IsFrameRequired () const;  ; bool MatchSelector (const std::string &selector) const;  Preliminary method which checks if drawable matches with given selector Following selector are allowed: ""type"" or ""#id"" or "".class_name"" Here type is drawable kind like 'rect' or 'pad' id is drawable identifier, specified with RDrawable::SetId() method class_name is drawable class name, specified with RDrawable::SetCssClass() method. ;  ; virtual void OnDisplayItemDestroyed (RDisplayItem *) const;  ; RDrawable & operator= (const RDrawable &)=delete;  ; void SetCssType (const char *csstype);  ; virtual void SetDrawableVersion (Version_t vers);  . Private Member Functio",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFrame.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFrame.html:4640,Modifiability,inherit,inherited,4640,"ks if drawable matches with given selector Following selector are allowed: ""type"" or ""#id"" or "".class_name"" Here type is drawable kind like 'rect' or 'pad' id is drawable identifier, specified with RDrawable::SetId() method class_name is drawable class name, specified with RDrawable::SetCssClass() method. ;  ; virtual void OnDisplayItemDestroyed (RDisplayItem *) const;  ; RDrawable & operator= (const RDrawable &)=delete;  ; void SetCssType (const char *csstype);  ; virtual void SetDrawableVersion (Version_t vers);  . Private Member Functions;  RFrame ();  ;  RFrame (const RFrame &)=delete;  ; RFrame & operator= (const RFrame &)=delete;  ; void SetClientRanges (unsigned connid, const RUserRanges &ranges, bool ismainconn);  Remember client range, can be used for drawing or stats box calculations. ;  . Private Attributes; std::map< unsigned, RUserRanges > fClientRanges;  ! individual client ranges ;  . Friends; class RPadBase;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::RDrawable; using Version_t = uint64_t;  . #include <ROOT/RFrame.hxx>. Inheritance diagram for ROOT::Experimental::RFrame:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RFrame() [1/3]. ROOT::Experimental::RFrame::RFrame ; (; const RFrame & ; ). privatedelete . ◆ RFrame() [2/3]. ROOT::Experimental::RFrame::RFrame ; (; ). inlineprivate . Definition at line 153 of file RFrame.hxx. ◆ RFrame() [3/3]. ROOT::Experimental::RFrame::RFrame ; (; TRootIOCtor * ; ). inline . Definition at line 196 of file RFrame.hxx. Member Function Documentation. ◆ AssignZoomRange(). void RFrame::AssignZoomRange ; (; unsigned ; ndim, . RAttrAxis & ; axis, . const RUserRanges & ; ranges . ). protected . Internal - assign client zoomed range to specified axis. ; Definition at line 36 of file RFrame.cxx. ◆ GetAxisRanges(). void RFrame::GetAxisRanges ; (; unsigned ; ndim, . const RAttrAxis & ; axis, . RUserRa",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFrame.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFrame.html:5903,Modifiability,config,configured,5903,"Destructor Documentation. ◆ RFrame() [1/3]. ROOT::Experimental::RFrame::RFrame ; (; const RFrame & ; ). privatedelete . ◆ RFrame() [2/3]. ROOT::Experimental::RFrame::RFrame ; (; ). inlineprivate . Definition at line 153 of file RFrame.hxx. ◆ RFrame() [3/3]. ROOT::Experimental::RFrame::RFrame ; (; TRootIOCtor * ; ). inline . Definition at line 196 of file RFrame.hxx. Member Function Documentation. ◆ AssignZoomRange(). void RFrame::AssignZoomRange ; (; unsigned ; ndim, . RAttrAxis & ; axis, . const RUserRanges & ; ranges . ). protected . Internal - assign client zoomed range to specified axis. ; Definition at line 36 of file RFrame.cxx. ◆ GetAxisRanges(). void RFrame::GetAxisRanges ; (; unsigned ; ndim, . const RAttrAxis & ; axis, . RUserRanges & ; ranges . ); const. protected . Internal - extract range for specified axis. ; Definition at line 24 of file RFrame.cxx. ◆ GetClientRanges(). void RFrame::GetClientRanges ; (; unsigned ; connid, . RUserRanges & ; ranges . ). Return ranges configured for the client. ; Definition at line 94 of file RFrame.cxx. ◆ operator=(). RFrame & ROOT::Experimental::RFrame::operator= ; (; const RFrame & ; ). privatedelete . ◆ PopulateMenu(). void RFrame::PopulateMenu ; (; RMenuItems & ; ). overrideprotectedvirtual . Provide context menu items. ; Reimplemented from ROOT::Experimental::RDrawable.; Definition at line 52 of file RFrame.cxx. ◆ SetClientRanges(). void RFrame::SetClientRanges ; (; unsigned ; connid, . const RUserRanges & ; ranges, . bool ; ismainconn . ). private . Remember client range, can be used for drawing or stats box calculations. ; Definition at line 72 of file RFrame.cxx. Friends And Related Symbol Documentation. ◆ RPadBase. friend class RPadBase. friend . Definition at line 40 of file RFrame.hxx. Member Data Documentation. ◆ border. RAttrBorder ROOT::Experimental::RFrame::border {this, ""border""}. ! frame border attributes ; Definition at line 181 of file RFrame.hxx. ◆ drawAxes. RAttrValue<bool> ROOT::Experimental::RFrame",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFrame.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFrame.html:488,Performance,perform,performed,488,". ROOT: ROOT::Experimental::RFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Public Attributes |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::Experimental::RFrame Class ReferenceGraphics » ROOT7 Graphics » ROOT7 Pad related classes. ; Holds an area where drawing on user coordinate-system can be performed. ; AuthorsAxel Naumann axel@.nosp@m.cern.nosp@m..ch Sergey Linev s.lin.nosp@m.ev@g.nosp@m.si.de ; Date2017-09-26 ; WarningThis is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome! ; Definition at line 38 of file RFrame.hxx. Classes; class  RUserRanges;  ; class  RZoomRequest;  . Public Member Functions;  RFrame (TRootIOCtor *);  ; void GetClientRanges (unsigned connid, RUserRanges &ranges);  Return ranges configured for the client. ;  ;  Public Member Functions inherited from ROOT::Experimental::RDrawable;  RDrawable (const char *csstype);  ; virtual ~RDrawable ();  ; void ClearStyle ();  ; const std::string & GetCssClass () const;  ; const char * GetCssType () const;  ; const std::string & GetId () const;  ; void SetCssClass (const std::string &cl);  ; void SetId (const std::string &id);  ; virtual void UseStyle (const std::shared_ptr< RStyle > &style);  . Public Attributes; RAttrBorder border {this, ""border""};  ! frame border attributes ;  ; RAttrValue< bool > drawAxes {this, ""drawAxes"", false};  ! draw axes by frame ;  ; RAttrFill fill {this, ""fill""};  ! frame fill attributes ;  ; RAttrValue< bool > gridX {this, ""gridX"", false};  ! show grid for X axis ;  ; RAttrValue< bool > gridY {this, ""gridY"", false};  ! show grid for Y axis ;  ; RAttrMargins margins {this, ""margins""};  ! frame margins relative to pad ;  ; RAttrValue< bool > swapX {this, ""swapX"", false};  ! swap position of X axis ;  ; RAttrValue< bool > swapY ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFrame.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RLogChannel.html:1090,Availability,error,errors,1090,". ROOT: ROOT::Experimental::RLogChannel Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Experimental::RLogChannel Class Reference. ; A log configuration for a channel, e.g. ; ""RHist"". Each ROOT module has its own log, with potentially distinct verbosity. ; Definition at line 101 of file RLogger.hxx. Public Member Functions;  RLogChannel ()=default;  Construct an anonymous channel. ;  ;  RLogChannel (const std::string &name);  Construct a log channel given its name, which is part of the diagnostics. ;  ;  RLogChannel (ELogLevel verbosity);  Construct an anonymous channel with a default verbosity. ;  ; ELogLevel GetEffectiveVerbosity (const RLogManager &mgr) const;  ; const std::string & GetName () const;  ; ELogLevel GetVerbosity () const;  ; ELogLevel SetVerbosity (ELogLevel verbosity);  ;  Public Member Functions inherited from ROOT::Experimental::RLogDiagCount; long long GetNumErrors () const;  Returns the current number of errors. ;  ; long long GetNumFatalErrors () const;  Returns the current number of fatal errors. ;  ; long long GetNumWarnings () const;  Number of fatal errors. ;  ; void Increment (ELogLevel severity);  Increase warning or error count. ;  . Private Attributes; std::string fName;  Name as shown in diagnostics. ;  ; ELogLevel fVerbosity = ELogLevel::kUnset;  Verbosity of this channel. By default, use the global verbosity. ;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Experimental::RLogDiagCount; std::atomic< long long > fNumErrors {0ll};  Number of warnings. ;  ; std::atomic< long long > fNumFatalErrors {0ll};  Number of errors. ;  ; std::atomic< long long > fNumWarnings {0ll};  . #include <ROOT/RLogger.hxx>. Inheritance diagram for ROOT::Experimental::RLogChannel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constru",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RLogChannel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RLogChannel.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RLogChannel.html:1178,Availability,error,errors,1178,"t of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Experimental::RLogChannel Class Reference. ; A log configuration for a channel, e.g. ; ""RHist"". Each ROOT module has its own log, with potentially distinct verbosity. ; Definition at line 101 of file RLogger.hxx. Public Member Functions;  RLogChannel ()=default;  Construct an anonymous channel. ;  ;  RLogChannel (const std::string &name);  Construct a log channel given its name, which is part of the diagnostics. ;  ;  RLogChannel (ELogLevel verbosity);  Construct an anonymous channel with a default verbosity. ;  ; ELogLevel GetEffectiveVerbosity (const RLogManager &mgr) const;  ; const std::string & GetName () const;  ; ELogLevel GetVerbosity () const;  ; ELogLevel SetVerbosity (ELogLevel verbosity);  ;  Public Member Functions inherited from ROOT::Experimental::RLogDiagCount; long long GetNumErrors () const;  Returns the current number of errors. ;  ; long long GetNumFatalErrors () const;  Returns the current number of fatal errors. ;  ; long long GetNumWarnings () const;  Number of fatal errors. ;  ; void Increment (ELogLevel severity);  Increase warning or error count. ;  . Private Attributes; std::string fName;  Name as shown in diagnostics. ;  ; ELogLevel fVerbosity = ELogLevel::kUnset;  Verbosity of this channel. By default, use the global verbosity. ;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Experimental::RLogDiagCount; std::atomic< long long > fNumErrors {0ll};  Number of warnings. ;  ; std::atomic< long long > fNumFatalErrors {0ll};  Number of errors. ;  ; std::atomic< long long > fNumWarnings {0ll};  . #include <ROOT/RLogger.hxx>. Inheritance diagram for ROOT::Experimental::RLogChannel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RLogChannel() [1/3]. ROOT::Experimental::RLogChannel::RLogChannel ; (; ). default . Construct an anonymou",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RLogChannel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RLogChannel.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RLogChannel.html:1243,Availability,error,errors,1243," all members ; ROOT::Experimental::RLogChannel Class Reference. ; A log configuration for a channel, e.g. ; ""RHist"". Each ROOT module has its own log, with potentially distinct verbosity. ; Definition at line 101 of file RLogger.hxx. Public Member Functions;  RLogChannel ()=default;  Construct an anonymous channel. ;  ;  RLogChannel (const std::string &name);  Construct a log channel given its name, which is part of the diagnostics. ;  ;  RLogChannel (ELogLevel verbosity);  Construct an anonymous channel with a default verbosity. ;  ; ELogLevel GetEffectiveVerbosity (const RLogManager &mgr) const;  ; const std::string & GetName () const;  ; ELogLevel GetVerbosity () const;  ; ELogLevel SetVerbosity (ELogLevel verbosity);  ;  Public Member Functions inherited from ROOT::Experimental::RLogDiagCount; long long GetNumErrors () const;  Returns the current number of errors. ;  ; long long GetNumFatalErrors () const;  Returns the current number of fatal errors. ;  ; long long GetNumWarnings () const;  Number of fatal errors. ;  ; void Increment (ELogLevel severity);  Increase warning or error count. ;  . Private Attributes; std::string fName;  Name as shown in diagnostics. ;  ; ELogLevel fVerbosity = ELogLevel::kUnset;  Verbosity of this channel. By default, use the global verbosity. ;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Experimental::RLogDiagCount; std::atomic< long long > fNumErrors {0ll};  Number of warnings. ;  ; std::atomic< long long > fNumFatalErrors {0ll};  Number of errors. ;  ; std::atomic< long long > fNumWarnings {0ll};  . #include <ROOT/RLogger.hxx>. Inheritance diagram for ROOT::Experimental::RLogChannel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RLogChannel() [1/3]. ROOT::Experimental::RLogChannel::RLogChannel ; (; ). default . Construct an anonymous channel. . ◆ RLogChannel() [2/3]. ROOT::Experimental::RLogChannel::RLogChan",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RLogChannel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RLogChannel.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RLogChannel.html:1314,Availability,error,error,1314," configuration for a channel, e.g. ; ""RHist"". Each ROOT module has its own log, with potentially distinct verbosity. ; Definition at line 101 of file RLogger.hxx. Public Member Functions;  RLogChannel ()=default;  Construct an anonymous channel. ;  ;  RLogChannel (const std::string &name);  Construct a log channel given its name, which is part of the diagnostics. ;  ;  RLogChannel (ELogLevel verbosity);  Construct an anonymous channel with a default verbosity. ;  ; ELogLevel GetEffectiveVerbosity (const RLogManager &mgr) const;  ; const std::string & GetName () const;  ; ELogLevel GetVerbosity () const;  ; ELogLevel SetVerbosity (ELogLevel verbosity);  ;  Public Member Functions inherited from ROOT::Experimental::RLogDiagCount; long long GetNumErrors () const;  Returns the current number of errors. ;  ; long long GetNumFatalErrors () const;  Returns the current number of fatal errors. ;  ; long long GetNumWarnings () const;  Number of fatal errors. ;  ; void Increment (ELogLevel severity);  Increase warning or error count. ;  . Private Attributes; std::string fName;  Name as shown in diagnostics. ;  ; ELogLevel fVerbosity = ELogLevel::kUnset;  Verbosity of this channel. By default, use the global verbosity. ;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Experimental::RLogDiagCount; std::atomic< long long > fNumErrors {0ll};  Number of warnings. ;  ; std::atomic< long long > fNumFatalErrors {0ll};  Number of errors. ;  ; std::atomic< long long > fNumWarnings {0ll};  . #include <ROOT/RLogger.hxx>. Inheritance diagram for ROOT::Experimental::RLogChannel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RLogChannel() [1/3]. ROOT::Experimental::RLogChannel::RLogChannel ; (; ). default . Construct an anonymous channel. . ◆ RLogChannel() [2/3]. ROOT::Experimental::RLogChannel::RLogChannel ; (; ELogLevel ; verbosity). inlineexplicit . Construct an anonymo",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RLogChannel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RLogChannel.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RLogChannel.html:1750,Availability,error,errors,1750,"annel with a default verbosity. ;  ; ELogLevel GetEffectiveVerbosity (const RLogManager &mgr) const;  ; const std::string & GetName () const;  ; ELogLevel GetVerbosity () const;  ; ELogLevel SetVerbosity (ELogLevel verbosity);  ;  Public Member Functions inherited from ROOT::Experimental::RLogDiagCount; long long GetNumErrors () const;  Returns the current number of errors. ;  ; long long GetNumFatalErrors () const;  Returns the current number of fatal errors. ;  ; long long GetNumWarnings () const;  Number of fatal errors. ;  ; void Increment (ELogLevel severity);  Increase warning or error count. ;  . Private Attributes; std::string fName;  Name as shown in diagnostics. ;  ; ELogLevel fVerbosity = ELogLevel::kUnset;  Verbosity of this channel. By default, use the global verbosity. ;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Experimental::RLogDiagCount; std::atomic< long long > fNumErrors {0ll};  Number of warnings. ;  ; std::atomic< long long > fNumFatalErrors {0ll};  Number of errors. ;  ; std::atomic< long long > fNumWarnings {0ll};  . #include <ROOT/RLogger.hxx>. Inheritance diagram for ROOT::Experimental::RLogChannel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RLogChannel() [1/3]. ROOT::Experimental::RLogChannel::RLogChannel ; (; ). default . Construct an anonymous channel. . ◆ RLogChannel() [2/3]. ROOT::Experimental::RLogChannel::RLogChannel ; (; ELogLevel ; verbosity). inlineexplicit . Construct an anonymous channel with a default verbosity. ; Definition at line 113 of file RLogger.hxx. ◆ RLogChannel() [3/3]. ROOT::Experimental::RLogChannel::RLogChannel ; (; const std::string & ; name). inline . Construct a log channel given its name, which is part of the diagnostics. ; Definition at line 116 of file RLogger.hxx. Member Function Documentation. ◆ GetEffectiveVerbosity(). ELogLevel ROOT::Experimental::RLogChannel::GetEffectiveVerbos",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RLogChannel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RLogChannel.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RLogChannel.html:289,Deployability,configurat,configuration,289,". ROOT: ROOT::Experimental::RLogChannel Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Experimental::RLogChannel Class Reference. ; A log configuration for a channel, e.g. ; ""RHist"". Each ROOT module has its own log, with potentially distinct verbosity. ; Definition at line 101 of file RLogger.hxx. Public Member Functions;  RLogChannel ()=default;  Construct an anonymous channel. ;  ;  RLogChannel (const std::string &name);  Construct a log channel given its name, which is part of the diagnostics. ;  ;  RLogChannel (ELogLevel verbosity);  Construct an anonymous channel with a default verbosity. ;  ; ELogLevel GetEffectiveVerbosity (const RLogManager &mgr) const;  ; const std::string & GetName () const;  ; ELogLevel GetVerbosity () const;  ; ELogLevel SetVerbosity (ELogLevel verbosity);  ;  Public Member Functions inherited from ROOT::Experimental::RLogDiagCount; long long GetNumErrors () const;  Returns the current number of errors. ;  ; long long GetNumFatalErrors () const;  Returns the current number of fatal errors. ;  ; long long GetNumWarnings () const;  Number of fatal errors. ;  ; void Increment (ELogLevel severity);  Increase warning or error count. ;  . Private Attributes; std::string fName;  Name as shown in diagnostics. ;  ; ELogLevel fVerbosity = ELogLevel::kUnset;  Verbosity of this channel. By default, use the global verbosity. ;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Experimental::RLogDiagCount; std::atomic< long long > fNumErrors {0ll};  Number of warnings. ;  ; std::atomic< long long > fNumFatalErrors {0ll};  Number of errors. ;  ; std::atomic< long long > fNumWarnings {0ll};  . #include <ROOT/RLogger.hxx>. Inheritance diagram for ROOT::Experimental::RLogChannel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constru",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RLogChannel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RLogChannel.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RLogChannel.html:289,Modifiability,config,configuration,289,". ROOT: ROOT::Experimental::RLogChannel Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Experimental::RLogChannel Class Reference. ; A log configuration for a channel, e.g. ; ""RHist"". Each ROOT module has its own log, with potentially distinct verbosity. ; Definition at line 101 of file RLogger.hxx. Public Member Functions;  RLogChannel ()=default;  Construct an anonymous channel. ;  ;  RLogChannel (const std::string &name);  Construct a log channel given its name, which is part of the diagnostics. ;  ;  RLogChannel (ELogLevel verbosity);  Construct an anonymous channel with a default verbosity. ;  ; ELogLevel GetEffectiveVerbosity (const RLogManager &mgr) const;  ; const std::string & GetName () const;  ; ELogLevel GetVerbosity () const;  ; ELogLevel SetVerbosity (ELogLevel verbosity);  ;  Public Member Functions inherited from ROOT::Experimental::RLogDiagCount; long long GetNumErrors () const;  Returns the current number of errors. ;  ; long long GetNumFatalErrors () const;  Returns the current number of fatal errors. ;  ; long long GetNumWarnings () const;  Number of fatal errors. ;  ; void Increment (ELogLevel severity);  Increase warning or error count. ;  . Private Attributes; std::string fName;  Name as shown in diagnostics. ;  ; ELogLevel fVerbosity = ELogLevel::kUnset;  Verbosity of this channel. By default, use the global verbosity. ;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Experimental::RLogDiagCount; std::atomic< long long > fNumErrors {0ll};  Number of warnings. ;  ; std::atomic< long long > fNumFatalErrors {0ll};  Number of errors. ;  ; std::atomic< long long > fNumWarnings {0ll};  . #include <ROOT/RLogger.hxx>. Inheritance diagram for ROOT::Experimental::RLogChannel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constru",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RLogChannel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RLogChannel.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RLogChannel.html:976,Modifiability,inherit,inherited,976,". ROOT: ROOT::Experimental::RLogChannel Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Experimental::RLogChannel Class Reference. ; A log configuration for a channel, e.g. ; ""RHist"". Each ROOT module has its own log, with potentially distinct verbosity. ; Definition at line 101 of file RLogger.hxx. Public Member Functions;  RLogChannel ()=default;  Construct an anonymous channel. ;  ;  RLogChannel (const std::string &name);  Construct a log channel given its name, which is part of the diagnostics. ;  ;  RLogChannel (ELogLevel verbosity);  Construct an anonymous channel with a default verbosity. ;  ; ELogLevel GetEffectiveVerbosity (const RLogManager &mgr) const;  ; const std::string & GetName () const;  ; ELogLevel GetVerbosity () const;  ; ELogLevel SetVerbosity (ELogLevel verbosity);  ;  Public Member Functions inherited from ROOT::Experimental::RLogDiagCount; long long GetNumErrors () const;  Returns the current number of errors. ;  ; long long GetNumFatalErrors () const;  Returns the current number of fatal errors. ;  ; long long GetNumWarnings () const;  Number of fatal errors. ;  ; void Increment (ELogLevel severity);  Increase warning or error count. ;  . Private Attributes; std::string fName;  Name as shown in diagnostics. ;  ; ELogLevel fVerbosity = ELogLevel::kUnset;  Verbosity of this channel. By default, use the global verbosity. ;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Experimental::RLogDiagCount; std::atomic< long long > fNumErrors {0ll};  Number of warnings. ;  ; std::atomic< long long > fNumFatalErrors {0ll};  Number of errors. ;  ; std::atomic< long long > fNumWarnings {0ll};  . #include <ROOT/RLogger.hxx>. Inheritance diagram for ROOT::Experimental::RLogChannel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constru",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RLogChannel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RLogChannel.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RLogChannel.html:1572,Modifiability,inherit,inherited,1572,"l given its name, which is part of the diagnostics. ;  ;  RLogChannel (ELogLevel verbosity);  Construct an anonymous channel with a default verbosity. ;  ; ELogLevel GetEffectiveVerbosity (const RLogManager &mgr) const;  ; const std::string & GetName () const;  ; ELogLevel GetVerbosity () const;  ; ELogLevel SetVerbosity (ELogLevel verbosity);  ;  Public Member Functions inherited from ROOT::Experimental::RLogDiagCount; long long GetNumErrors () const;  Returns the current number of errors. ;  ; long long GetNumFatalErrors () const;  Returns the current number of fatal errors. ;  ; long long GetNumWarnings () const;  Number of fatal errors. ;  ; void Increment (ELogLevel severity);  Increase warning or error count. ;  . Private Attributes; std::string fName;  Name as shown in diagnostics. ;  ; ELogLevel fVerbosity = ELogLevel::kUnset;  Verbosity of this channel. By default, use the global verbosity. ;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Experimental::RLogDiagCount; std::atomic< long long > fNumErrors {0ll};  Number of warnings. ;  ; std::atomic< long long > fNumFatalErrors {0ll};  Number of errors. ;  ; std::atomic< long long > fNumWarnings {0ll};  . #include <ROOT/RLogger.hxx>. Inheritance diagram for ROOT::Experimental::RLogChannel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RLogChannel() [1/3]. ROOT::Experimental::RLogChannel::RLogChannel ; (; ). default . Construct an anonymous channel. . ◆ RLogChannel() [2/3]. ROOT::Experimental::RLogChannel::RLogChannel ; (; ELogLevel ; verbosity). inlineexplicit . Construct an anonymous channel with a default verbosity. ; Definition at line 113 of file RLogger.hxx. ◆ RLogChannel() [3/3]. ROOT::Experimental::RLogChannel::RLogChannel ; (; const std::string & ; name). inline . Construct a log channel given its name, which is part of the diagnostics. ; Definition at line 116 of file RLogger.hxx. ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RLogChannel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RLogChannel.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RLogChannel.html:285,Testability,log,log,285,". ROOT: ROOT::Experimental::RLogChannel Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Experimental::RLogChannel Class Reference. ; A log configuration for a channel, e.g. ; ""RHist"". Each ROOT module has its own log, with potentially distinct verbosity. ; Definition at line 101 of file RLogger.hxx. Public Member Functions;  RLogChannel ()=default;  Construct an anonymous channel. ;  ;  RLogChannel (const std::string &name);  Construct a log channel given its name, which is part of the diagnostics. ;  ;  RLogChannel (ELogLevel verbosity);  Construct an anonymous channel with a default verbosity. ;  ; ELogLevel GetEffectiveVerbosity (const RLogManager &mgr) const;  ; const std::string & GetName () const;  ; ELogLevel GetVerbosity () const;  ; ELogLevel SetVerbosity (ELogLevel verbosity);  ;  Public Member Functions inherited from ROOT::Experimental::RLogDiagCount; long long GetNumErrors () const;  Returns the current number of errors. ;  ; long long GetNumFatalErrors () const;  Returns the current number of fatal errors. ;  ; long long GetNumWarnings () const;  Number of fatal errors. ;  ; void Increment (ELogLevel severity);  Increase warning or error count. ;  . Private Attributes; std::string fName;  Name as shown in diagnostics. ;  ; ELogLevel fVerbosity = ELogLevel::kUnset;  Verbosity of this channel. By default, use the global verbosity. ;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Experimental::RLogDiagCount; std::atomic< long long > fNumErrors {0ll};  Number of warnings. ;  ; std::atomic< long long > fNumFatalErrors {0ll};  Number of errors. ;  ; std::atomic< long long > fNumWarnings {0ll};  . #include <ROOT/RLogger.hxx>. Inheritance diagram for ROOT::Experimental::RLogChannel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constru",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RLogChannel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RLogChannel.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RLogChannel.html:363,Testability,log,log,363,". ROOT: ROOT::Experimental::RLogChannel Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Experimental::RLogChannel Class Reference. ; A log configuration for a channel, e.g. ; ""RHist"". Each ROOT module has its own log, with potentially distinct verbosity. ; Definition at line 101 of file RLogger.hxx. Public Member Functions;  RLogChannel ()=default;  Construct an anonymous channel. ;  ;  RLogChannel (const std::string &name);  Construct a log channel given its name, which is part of the diagnostics. ;  ;  RLogChannel (ELogLevel verbosity);  Construct an anonymous channel with a default verbosity. ;  ; ELogLevel GetEffectiveVerbosity (const RLogManager &mgr) const;  ; const std::string & GetName () const;  ; ELogLevel GetVerbosity () const;  ; ELogLevel SetVerbosity (ELogLevel verbosity);  ;  Public Member Functions inherited from ROOT::Experimental::RLogDiagCount; long long GetNumErrors () const;  Returns the current number of errors. ;  ; long long GetNumFatalErrors () const;  Returns the current number of fatal errors. ;  ; long long GetNumWarnings () const;  Number of fatal errors. ;  ; void Increment (ELogLevel severity);  Increase warning or error count. ;  . Private Attributes; std::string fName;  Name as shown in diagnostics. ;  ; ELogLevel fVerbosity = ELogLevel::kUnset;  Verbosity of this channel. By default, use the global verbosity. ;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Experimental::RLogDiagCount; std::atomic< long long > fNumErrors {0ll};  Number of warnings. ;  ; std::atomic< long long > fNumFatalErrors {0ll};  Number of errors. ;  ; std::atomic< long long > fNumWarnings {0ll};  . #include <ROOT/RLogger.hxx>. Inheritance diagram for ROOT::Experimental::RLogChannel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constru",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RLogChannel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RLogChannel.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RLogChannel.html:592,Testability,log,log,592,". ROOT: ROOT::Experimental::RLogChannel Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Experimental::RLogChannel Class Reference. ; A log configuration for a channel, e.g. ; ""RHist"". Each ROOT module has its own log, with potentially distinct verbosity. ; Definition at line 101 of file RLogger.hxx. Public Member Functions;  RLogChannel ()=default;  Construct an anonymous channel. ;  ;  RLogChannel (const std::string &name);  Construct a log channel given its name, which is part of the diagnostics. ;  ;  RLogChannel (ELogLevel verbosity);  Construct an anonymous channel with a default verbosity. ;  ; ELogLevel GetEffectiveVerbosity (const RLogManager &mgr) const;  ; const std::string & GetName () const;  ; ELogLevel GetVerbosity () const;  ; ELogLevel SetVerbosity (ELogLevel verbosity);  ;  Public Member Functions inherited from ROOT::Experimental::RLogDiagCount; long long GetNumErrors () const;  Returns the current number of errors. ;  ; long long GetNumFatalErrors () const;  Returns the current number of fatal errors. ;  ; long long GetNumWarnings () const;  Number of fatal errors. ;  ; void Increment (ELogLevel severity);  Increase warning or error count. ;  . Private Attributes; std::string fName;  Name as shown in diagnostics. ;  ; ELogLevel fVerbosity = ELogLevel::kUnset;  Verbosity of this channel. By default, use the global verbosity. ;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Experimental::RLogDiagCount; std::atomic< long long > fNumErrors {0ll};  Number of warnings. ;  ; std::atomic< long long > fNumFatalErrors {0ll};  Number of errors. ;  ; std::atomic< long long > fNumWarnings {0ll};  . #include <ROOT/RLogger.hxx>. Inheritance diagram for ROOT::Experimental::RLogChannel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constru",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RLogChannel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RLogChannel.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RLogChannel.html:2494,Testability,log,log,2494,". Additional Inherited Members;  Protected Attributes inherited from ROOT::Experimental::RLogDiagCount; std::atomic< long long > fNumErrors {0ll};  Number of warnings. ;  ; std::atomic< long long > fNumFatalErrors {0ll};  Number of errors. ;  ; std::atomic< long long > fNumWarnings {0ll};  . #include <ROOT/RLogger.hxx>. Inheritance diagram for ROOT::Experimental::RLogChannel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RLogChannel() [1/3]. ROOT::Experimental::RLogChannel::RLogChannel ; (; ). default . Construct an anonymous channel. . ◆ RLogChannel() [2/3]. ROOT::Experimental::RLogChannel::RLogChannel ; (; ELogLevel ; verbosity). inlineexplicit . Construct an anonymous channel with a default verbosity. ; Definition at line 113 of file RLogger.hxx. ◆ RLogChannel() [3/3]. ROOT::Experimental::RLogChannel::RLogChannel ; (; const std::string & ; name). inline . Construct a log channel given its name, which is part of the diagnostics. ; Definition at line 116 of file RLogger.hxx. Member Function Documentation. ◆ GetEffectiveVerbosity(). ELogLevel ROOT::Experimental::RLogChannel::GetEffectiveVerbosity ; (; const RLogManager & ; mgr); const. inline . Definition at line 313 of file RLogger.hxx. ◆ GetName(). const std::string & ROOT::Experimental::RLogChannel::GetName ; (; ); const. inline . Definition at line 126 of file RLogger.hxx. ◆ GetVerbosity(). ELogLevel ROOT::Experimental::RLogChannel::GetVerbosity ; (; ); const. inline . Definition at line 123 of file RLogger.hxx. ◆ SetVerbosity(). ELogLevel ROOT::Experimental::RLogChannel::SetVerbosity ; (; ELogLevel ; verbosity). inline . Definition at line 118 of file RLogger.hxx. Member Data Documentation. ◆ fName. std::string ROOT::Experimental::RLogChannel::fName. private . Name as shown in diagnostics. ; Definition at line 103 of file RLogger.hxx. ◆ fVerbosity. ELogLevel ROOT::Experimental::RLogChannel::fVerbosity = ELogLevel::kUnse",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RLogChannel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RLogChannel.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RMenuItems.html:935,Deployability,toggle,toggle,935,". ROOT: ROOT::Experimental::RMenuItems Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; List of all members ; ROOT::Experimental::RMenuItems Class ReferenceGraphics » ROOT7 Graphics » ROOT7 Pad related classes. ; List of items for object context menu. ; AuthorSergey Linev ; Date2017-06-29 ; WarningThis is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome! ; Definition at line 157 of file RMenuItems.hxx. Public Member Functions;  RMenuItems ()=default;  ;  RMenuItems (const std::string &_id, const std::string &_specifier);  ;  ~RMenuItems () override;  destructor - pin vtable ;  ; void Add (std::unique_ptr< Detail::RMenuItem > &&item);  ; void AddChkMenuItem (const std::string &name, const std::string &title, bool checked, const std::string &toggle, const TClass *cl=nullptr);  ; void AddMenuItem (const std::string &name, const std::string &title, const std::string &exec, const TClass *cl=nullptr);  ; const std::string & GetFullId () const;  ; const std::string & GetSpecifier () const;  ; void PopulateObjectMenu (void *obj, TClass *cl);  Fill menu for provided object, using MENU as indicator in method comments. ;  ; auto Size () const;  ;  Public Member Functions inherited from ROOT::Experimental::RDrawableReply; virtual ~RDrawableReply ();  destructor, pin vtable ;  ; uint64_t GetRequestId () const;  ; void SetRequestId (uint64_t _reqid);  . Protected Attributes; std::string fId;  object identifier ;  ; std::vector< std::unique_ptr< Detail::RMenuItem > > fItems;  list of items in the menu ;  ; std::string fSpecifier;  ! extra specifier, used only on server ;  . #include <ROOT/RMenuItems.hxx>. Inheritance diagram for ROOT::Experimental::RMenuItems:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RMe",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RMenuItems.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RMenuItems.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RMenuItems.html:2734,Deployability,toggle,toggle,2734,"! extra specifier, used only on server ;  . #include <ROOT/RMenuItems.hxx>. Inheritance diagram for ROOT::Experimental::RMenuItems:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RMenuItems() [1/2]. ROOT::Experimental::RMenuItems::RMenuItems ; (; ). default . ◆ RMenuItems() [2/2]. ROOT::Experimental::RMenuItems::RMenuItems ; (; const std::string & ; _id, . const std::string & ; _specifier . ). inline . Definition at line 165 of file RMenuItems.hxx. ◆ ~RMenuItems(). RMenuItems::~RMenuItems ; (; ). overridedefault . destructor - pin vtable . Member Function Documentation. ◆ Add(). void ROOT::Experimental::RMenuItems::Add ; (; std::unique_ptr< Detail::RMenuItem > && ; item). inline . Definition at line 178 of file RMenuItems.hxx. ◆ AddChkMenuItem(). void ROOT::Experimental::RMenuItems::AddChkMenuItem ; (; const std::string & ; name, . const std::string & ; title, . bool ; checked, . const std::string & ; toggle, . const TClass * ; cl = nullptr . ). inline . Definition at line 188 of file RMenuItems.hxx. ◆ AddMenuItem(). void ROOT::Experimental::RMenuItems::AddMenuItem ; (; const std::string & ; name, . const std::string & ; title, . const std::string & ; exec, . const TClass * ; cl = nullptr . ). inline . Definition at line 180 of file RMenuItems.hxx. ◆ GetFullId(). const std::string & ROOT::Experimental::RMenuItems::GetFullId ; (; ); const. inline . Definition at line 173 of file RMenuItems.hxx. ◆ GetSpecifier(). const std::string & ROOT::Experimental::RMenuItems::GetSpecifier ; (; ); const. inline . Definition at line 174 of file RMenuItems.hxx. ◆ PopulateObjectMenu(). void RMenuItems::PopulateObjectMenu ; (; void * ; obj, . TClass * ; cl . ). Fill menu for provided object, using MENU as indicator in method comments. ; Definition at line 31 of file RMenuItems.cxx. ◆ Size(). auto ROOT::Experimental::RMenuItems::Size ; (; ); const. inline . Definition at line 176 of file RMenuIt",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RMenuItems.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RMenuItems.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RMenuItems.html:1364,Modifiability,inherit,inherited,1364,"s part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome! ; Definition at line 157 of file RMenuItems.hxx. Public Member Functions;  RMenuItems ()=default;  ;  RMenuItems (const std::string &_id, const std::string &_specifier);  ;  ~RMenuItems () override;  destructor - pin vtable ;  ; void Add (std::unique_ptr< Detail::RMenuItem > &&item);  ; void AddChkMenuItem (const std::string &name, const std::string &title, bool checked, const std::string &toggle, const TClass *cl=nullptr);  ; void AddMenuItem (const std::string &name, const std::string &title, const std::string &exec, const TClass *cl=nullptr);  ; const std::string & GetFullId () const;  ; const std::string & GetSpecifier () const;  ; void PopulateObjectMenu (void *obj, TClass *cl);  Fill menu for provided object, using MENU as indicator in method comments. ;  ; auto Size () const;  ;  Public Member Functions inherited from ROOT::Experimental::RDrawableReply; virtual ~RDrawableReply ();  destructor, pin vtable ;  ; uint64_t GetRequestId () const;  ; void SetRequestId (uint64_t _reqid);  . Protected Attributes; std::string fId;  object identifier ;  ; std::vector< std::unique_ptr< Detail::RMenuItem > > fItems;  list of items in the menu ;  ; std::string fSpecifier;  ! extra specifier, used only on server ;  . #include <ROOT/RMenuItems.hxx>. Inheritance diagram for ROOT::Experimental::RMenuItems:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RMenuItems() [1/2]. ROOT::Experimental::RMenuItems::RMenuItems ; (; ). default . ◆ RMenuItems() [2/2]. ROOT::Experimental::RMenuItems::RMenuItems ; (; const std::string & ; _id, . const std::string & ; _specifier . ). inline . Definition at line 165 of file RMenuItems.hxx. ◆ ~RMenuItems(). RMenuItems::~RMenuItems ; (; ). overridedefault . destructor - pin vtable . Member Function Documentation. ◆ Add(). void ROOT::Experimental",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RMenuItems.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RMenuItems.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html:6969,Availability,avail,available,6969,"kFooterSize () const;  ; std::uint64_t GetOnDiskHeaderSize () const;  ; std::uint64_t GetOnDiskHeaderXxHash3 () const;  ; std::string GetQualifiedFieldName (DescriptorId_t fieldId) const;  Walks up the parents of the field ID and returns a field name of the form a.b.c.d In case of invalid field ID, an empty string is returned. ;  ; RFieldDescriptorIterable GetTopLevelFields () const;  ; RFieldDescriptorIterable GetTopLevelFields (const std::function< bool(DescriptorId_t, DescriptorId_t)> &comparator) const;  ; bool HasFeature (unsigned int flag) const;  ; void IncGeneration ();  ; RNTupleDescriptor & operator= (const RNTupleDescriptor &other)=delete;  ; RNTupleDescriptor & operator= (RNTupleDescriptor &&other)=default;  ; bool operator== (const RNTupleDescriptor &other) const;  ; void PrintInfo (std::ostream &output) const;  . Static Public Attributes; static constexpr unsigned int kFeatureFlagTest = 137;  . Private Attributes; std::unordered_map< DescriptorId_t, RClusterDescriptor > fClusterDescriptors;  May contain only a subset of all the available clusters, e.g. ;  ; std::unordered_map< DescriptorId_t, RClusterGroupDescriptor > fClusterGroupDescriptors;  ; std::unordered_map< DescriptorId_t, RColumnDescriptor > fColumnDescriptors;  ; std::string fDescription;  Free text from the user. ;  ; std::vector< RExtraTypeInfoDescriptor > fExtraTypeInfoDescriptors;  ; std::set< unsigned int > fFeatureFlags;  ; std::unordered_map< DescriptorId_t, RFieldDescriptor > fFieldDescriptors;  ; DescriptorId_t fFieldZeroId = kInvalidDescriptorId;  Set by the descriptor builder. ;  ; std::uint64_t fGeneration = 0;  Once constructed by an RNTupleDescriptorBuilder, the descriptor is mostly immutable except for set of active the page locations. ;  ; std::unique_ptr< RHeaderExtension > fHeaderExtension;  ; std::string fName;  The ntuple name needs to be unique in a given storage location (file) ;  ; std::uint64_t fNClusters = 0;  Updated by the descriptor builder when the cluster groups ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html:20869,Availability,avail,available,20869,"or=() [1/2]. RNTupleDescriptor & ROOT::Experimental::RNTupleDescriptor::operator= ; (; const RNTupleDescriptor & ; other). delete . ◆ operator=() [2/2]. RNTupleDescriptor & ROOT::Experimental::RNTupleDescriptor::operator= ; (; RNTupleDescriptor && ; other). default . ◆ operator==(). bool ROOT::Experimental::RNTupleDescriptor::operator== ; (; const RNTupleDescriptor & ; other); const. Definition at line 282 of file RNTupleDescriptor.cxx. ◆ PrintInfo(). void ROOT::Experimental::RNTupleDescriptor::PrintInfo ; (; std::ostream & ; output); const. Definition at line 83 of file RNTupleDescriptorFmt.cxx. Friends And Related Symbol Documentation. ◆ Internal::RNTupleDescriptorBuilder. friend class Internal::RNTupleDescriptorBuilder. friend . Definition at line 529 of file RNTupleDescriptor.hxx. Member Data Documentation. ◆ fClusterDescriptors. std::unordered_map<DescriptorId_t, RClusterDescriptor> ROOT::Experimental::RNTupleDescriptor::fClusterDescriptors. private . May contain only a subset of all the available clusters, e.g. ; the clusters of the current file from a chain of files ; Definition at line 565 of file RNTupleDescriptor.hxx. ◆ fClusterGroupDescriptors. std::unordered_map<DescriptorId_t, RClusterGroupDescriptor> ROOT::Experimental::RNTupleDescriptor::fClusterGroupDescriptors. private . Definition at line 562 of file RNTupleDescriptor.hxx. ◆ fColumnDescriptors. std::unordered_map<DescriptorId_t, RColumnDescriptor> ROOT::Experimental::RNTupleDescriptor::fColumnDescriptors. private . Definition at line 561 of file RNTupleDescriptor.hxx. ◆ fDescription. std::string ROOT::Experimental::RNTupleDescriptor::fDescription. private . Free text from the user. ; Definition at line 538 of file RNTupleDescriptor.hxx. ◆ fExtraTypeInfoDescriptors. std::vector<RExtraTypeInfoDescriptor> ROOT::Experimental::RNTupleDescriptor::fExtraTypeInfoDescriptors. private . Definition at line 566 of file RNTupleDescriptor.hxx. ◆ fFeatureFlags. std::set<unsigned int> ROOT::Experimental::RNTupleDe",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html:970,Integrability,rout,routines,970,". ROOT: ROOT::Experimental::RNTupleDescriptor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Attributes |; Private Attributes |; Friends |; List of all members ; ROOT::Experimental::RNTupleDescriptor Class ReferenceNTuple-related classes. ; The on-storage meta-data of an ntuple. ; Represents the on-disk (on storage) information about an ntuple. The meta-data consists of a header and one or several footers. The header carries the ntuple schema, i.e. the fields and the associated columns and their relationships. The footer(s) carry information about one or several clusters. For every cluster, a footer stores its location and size, and for every column the range of element indexes as well as a list of pages and page locations.; The descriptor provide machine-independent (de-)serialization of headers and footers, and it provides lookup routines for ntuple objects (pages, clusters, ...). It is supposed to be usable by all RPageStorage implementations.; The serialization does not use standard ROOT streamers in order to not let it depend on libCore. The serialization uses the concept of frames: header, footer, and substructures have a preamble with version numbers and the size of the writte struct. This allows for forward and backward compatibility when the meta-data evolves. ; Definition at line 528 of file RNTupleDescriptor.hxx. Classes; class  RClusterDescriptorIterable;  Used to loop over all the clusters of an ntuple (in unspecified order) More...;  ; class  RClusterGroupDescriptorIterable;  Used to loop over all the cluster groups of an ntuple (in unspecified order) More...;  ; class  RColumnDescriptorIterable;  Used to loop over a field's associated columns. More...;  ; struct  RCreateModelOptions;  Modifiers passed to CreateModel More...;  ; class  RExtraTypeInfoDescriptorIterable;  Used to loop over all the extra type info record of an ntupl",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html:1166,Integrability,depend,depend,1166,"Matches. List of all members |; Classes |; Public Member Functions |; Static Public Attributes |; Private Attributes |; Friends |; List of all members ; ROOT::Experimental::RNTupleDescriptor Class ReferenceNTuple-related classes. ; The on-storage meta-data of an ntuple. ; Represents the on-disk (on storage) information about an ntuple. The meta-data consists of a header and one or several footers. The header carries the ntuple schema, i.e. the fields and the associated columns and their relationships. The footer(s) carry information about one or several clusters. For every cluster, a footer stores its location and size, and for every column the range of element indexes as well as a list of pages and page locations.; The descriptor provide machine-independent (de-)serialization of headers and footers, and it provides lookup routines for ntuple objects (pages, clusters, ...). It is supposed to be usable by all RPageStorage implementations.; The serialization does not use standard ROOT streamers in order to not let it depend on libCore. The serialization uses the concept of frames: header, footer, and substructures have a preamble with version numbers and the size of the writte struct. This allows for forward and backward compatibility when the meta-data evolves. ; Definition at line 528 of file RNTupleDescriptor.hxx. Classes; class  RClusterDescriptorIterable;  Used to loop over all the clusters of an ntuple (in unspecified order) More...;  ; class  RClusterGroupDescriptorIterable;  Used to loop over all the cluster groups of an ntuple (in unspecified order) More...;  ; class  RColumnDescriptorIterable;  Used to loop over a field's associated columns. More...;  ; struct  RCreateModelOptions;  Modifiers passed to CreateModel More...;  ; class  RExtraTypeInfoDescriptorIterable;  Used to loop over all the extra type info record of an ntuple (in unspecified order) More...;  ; class  RFieldDescriptorIterable;  Used to loop over a field's child fields. More...;  ; class  RH",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html:1407,Modifiability,evolve,evolves,1407,"torage meta-data of an ntuple. ; Represents the on-disk (on storage) information about an ntuple. The meta-data consists of a header and one or several footers. The header carries the ntuple schema, i.e. the fields and the associated columns and their relationships. The footer(s) carry information about one or several clusters. For every cluster, a footer stores its location and size, and for every column the range of element indexes as well as a list of pages and page locations.; The descriptor provide machine-independent (de-)serialization of headers and footers, and it provides lookup routines for ntuple objects (pages, clusters, ...). It is supposed to be usable by all RPageStorage implementations.; The serialization does not use standard ROOT streamers in order to not let it depend on libCore. The serialization uses the concept of frames: header, footer, and substructures have a preamble with version numbers and the size of the writte struct. This allows for forward and backward compatibility when the meta-data evolves. ; Definition at line 528 of file RNTupleDescriptor.hxx. Classes; class  RClusterDescriptorIterable;  Used to loop over all the clusters of an ntuple (in unspecified order) More...;  ; class  RClusterGroupDescriptorIterable;  Used to loop over all the cluster groups of an ntuple (in unspecified order) More...;  ; class  RColumnDescriptorIterable;  Used to loop over a field's associated columns. More...;  ; struct  RCreateModelOptions;  Modifiers passed to CreateModel More...;  ; class  RExtraTypeInfoDescriptorIterable;  Used to loop over all the extra type info record of an ntuple (in unspecified order) More...;  ; class  RFieldDescriptorIterable;  Used to loop over a field's child fields. More...;  ; class  RHeaderExtension;  Summarizes information about fields and the corresponding columns that were added after the header has been serialized. More...;  . Public Member Functions;  RNTupleDescriptor ()=default;  ;  RNTupleDescriptor (const RNTuple",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html:2598,Performance,load,load,2598,") More...;  ; class  RClusterGroupDescriptorIterable;  Used to loop over all the cluster groups of an ntuple (in unspecified order) More...;  ; class  RColumnDescriptorIterable;  Used to loop over a field's associated columns. More...;  ; struct  RCreateModelOptions;  Modifiers passed to CreateModel More...;  ; class  RExtraTypeInfoDescriptorIterable;  Used to loop over all the extra type info record of an ntuple (in unspecified order) More...;  ; class  RFieldDescriptorIterable;  Used to loop over a field's child fields. More...;  ; class  RHeaderExtension;  Summarizes information about fields and the corresponding columns that were added after the header has been serialized. More...;  . Public Member Functions;  RNTupleDescriptor ()=default;  ;  RNTupleDescriptor (const RNTupleDescriptor &other)=delete;  ;  RNTupleDescriptor (RNTupleDescriptor &&other)=default;  ; RResult< void > AddClusterGroupDetails (DescriptorId_t clusterGroupId, std::vector< RClusterDescriptor > &clusterDescs);  Methods to load and drop cluster group details (cluster IDs and page locations) ;  ; std::unique_ptr< RNTupleDescriptor > Clone () const;  ; std::unique_ptr< RNTupleModel > CreateModel (const RCreateModelOptions &options=RCreateModelOptions()) const;  Re-create the C++ model from the stored meta-data. ;  ; RResult< void > DropClusterGroupDetails (DescriptorId_t clusterGroupId);  ; DescriptorId_t FindClusterId (DescriptorId_t physicalColumnId, NTupleSize_t index) const;  ; DescriptorId_t FindFieldId (std::string_view fieldName) const;  Searches for a top-level field. ;  ; DescriptorId_t FindFieldId (std::string_view fieldName, DescriptorId_t parentId) const;  ; DescriptorId_t FindLogicalColumnId (DescriptorId_t fieldId, std::uint32_t columnIndex, std::uint16_t representationIndex) const;  ; DescriptorId_t FindNextClusterId (DescriptorId_t clusterId) const;  ; DescriptorId_t FindPhysicalColumnId (DescriptorId_t fieldId, std::uint32_t columnIndex, std::uint16_t representationIndex) const",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html:9208,Performance,load,load,9208,"4_t fOnDiskHeaderSize = 0;  Set by the descriptor builder when deserialized. ;  ; std::uint64_t fOnDiskHeaderXxHash3 = 0;  Set by the descriptor builder when deserialized. ;  . Friends; class Internal::RNTupleDescriptorBuilder;  . #include <ROOT/RNTupleDescriptor.hxx>; Constructor & Destructor Documentation. ◆ RNTupleDescriptor() [1/3]. ROOT::Experimental::RNTupleDescriptor::RNTupleDescriptor ; (; ). default . ◆ RNTupleDescriptor() [2/3]. ROOT::Experimental::RNTupleDescriptor::RNTupleDescriptor ; (; const RNTupleDescriptor & ; other). delete . ◆ RNTupleDescriptor() [3/3]. ROOT::Experimental::RNTupleDescriptor::RNTupleDescriptor ; (; RNTupleDescriptor && ; other). default . Member Function Documentation. ◆ AddClusterGroupDetails(). ROOT::Experimental::RResult< void > ROOT::Experimental::RNTupleDescriptor::AddClusterGroupDetails ; (; DescriptorId_t ; clusterGroupId, . std::vector< RClusterDescriptor > & ; clusterDescs . ). Methods to load and drop cluster group details (cluster IDs and page locations) ; Definition at line 473 of file RNTupleDescriptor.cxx. ◆ Clone(). std::unique_ptr< ROOT::Experimental::RNTupleDescriptor > ROOT::Experimental::RNTupleDescriptor::Clone ; (; ); const. Definition at line 538 of file RNTupleDescriptor.cxx. ◆ CreateModel(). std::unique_ptr< ROOT::Experimental::RNTupleModel > ROOT::Experimental::RNTupleDescriptor::CreateModel ; (; const RCreateModelOptions & ; options = RCreateModelOptions()); const. Re-create the C++ model from the stored meta-data. ; Definition at line 514 of file RNTupleDescriptor.cxx. ◆ DropClusterGroupDetails(). ROOT::Experimental::RResult< void > ROOT::Experimental::RNTupleDescriptor::DropClusterGroupDetails ; (; DescriptorId_t ; clusterGroupId). Definition at line 499 of file RNTupleDescriptor.cxx. ◆ FindClusterId(). ROOT::Experimental::DescriptorId_t ROOT::Experimental::RNTupleDescriptor::FindClusterId ; (; DescriptorId_t ; physicalColumnId, . NTupleSize_t ; index . ); const. Definition at line 373 of file RNTupleDes",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html:22937,Performance,cache,cache,22937,"riptor.hxx. ◆ fFieldDescriptors. std::unordered_map<DescriptorId_t, RFieldDescriptor> ROOT::Experimental::RNTupleDescriptor::fFieldDescriptors. private . Definition at line 560 of file RNTupleDescriptor.hxx. ◆ fFieldZeroId. DescriptorId_t ROOT::Experimental::RNTupleDescriptor::fFieldZeroId = kInvalidDescriptorId. private . Set by the descriptor builder. ; Definition at line 548 of file RNTupleDescriptor.hxx. ◆ fGeneration. std::uint64_t ROOT::Experimental::RNTupleDescriptor::fGeneration = 0. private . Once constructed by an RNTupleDescriptorBuilder, the descriptor is mostly immutable except for set of active the page locations. ; During the lifetime of the descriptor, page location information for clusters can be added or removed. When this happens, the generation should be increased, so that users of the descriptor know that the information changed. The generation is increased, e.g., by the page source's exclusive lock guard around the descriptor. It is used, e.g., by the descriptor cache in RNTupleReader. ; Definition at line 557 of file RNTupleDescriptor.hxx. ◆ fHeaderExtension. std::unique_ptr<RHeaderExtension> ROOT::Experimental::RNTupleDescriptor::fHeaderExtension. private . Definition at line 567 of file RNTupleDescriptor.hxx. ◆ fName. std::string ROOT::Experimental::RNTupleDescriptor::fName. private . The ntuple name needs to be unique in a given storage location (file) ; Definition at line 536 of file RNTupleDescriptor.hxx. ◆ fNClusters. std::uint64_t ROOT::Experimental::RNTupleDescriptor::fNClusters = 0. private . Updated by the descriptor builder when the cluster groups are added. ; Definition at line 545 of file RNTupleDescriptor.hxx. ◆ fNEntries. std::uint64_t ROOT::Experimental::RNTupleDescriptor::fNEntries = 0. private . Updated by the descriptor builder when the cluster groups are added. ; Definition at line 544 of file RNTupleDescriptor.hxx. ◆ fNPhysicalColumns. std::uint64_t ROOT::Experimental::RNTupleDescriptor::fNPhysicalColumns = 0. private . Upd",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html:5116,Testability,log,logical,5116,"escriptorId_t FindFieldId (std::string_view fieldName, DescriptorId_t parentId) const;  ; DescriptorId_t FindLogicalColumnId (DescriptorId_t fieldId, std::uint32_t columnIndex, std::uint16_t representationIndex) const;  ; DescriptorId_t FindNextClusterId (DescriptorId_t clusterId) const;  ; DescriptorId_t FindPhysicalColumnId (DescriptorId_t fieldId, std::uint32_t columnIndex, std::uint16_t representationIndex) const;  ; DescriptorId_t FindPrevClusterId (DescriptorId_t clusterId) const;  ; const RClusterDescriptor & GetClusterDescriptor (DescriptorId_t clusterId) const;  ; const RClusterGroupDescriptor & GetClusterGroupDescriptor (DescriptorId_t clusterGroupId) const;  ; RClusterGroupDescriptorIterable GetClusterGroupIterable () const;  ; RClusterDescriptorIterable GetClusterIterable () const;  ; const RColumnDescriptor & GetColumnDescriptor (DescriptorId_t columnId) const;  ; RColumnDescriptorIterable GetColumnIterable () const;  ; RColumnDescriptorIterable GetColumnIterable (const RFieldDescriptor &fieldDesc) const;  ; RColumnDescriptorIterable GetColumnIterable (DescriptorId_t fieldId) const;  ; const std::string & GetDescription () const;  ; RExtraTypeInfoDescriptorIterable GetExtraTypeInfoIterable () const;  ; std::vector< std::uint64_t > GetFeatureFlags () const;  ; const RFieldDescriptor & GetFieldDescriptor (DescriptorId_t fieldId) const;  ; RFieldDescriptorIterable GetFieldIterable (const RFieldDescriptor &fieldDesc) const;  ; RFieldDescriptorIterable GetFieldIterable (const RFieldDescriptor &fieldDesc, const std::function< bool(DescriptorId_t, DescriptorId_t)> &comparator) const;  ; RFieldDescriptorIterable GetFieldIterable (DescriptorId_t fieldId) const;  ; RFieldDescriptorIterable GetFieldIterable (DescriptorId_t fieldId, const std::function< bool(DescriptorId_t, DescriptorId_t)> &comparator) const;  ; const RFieldDescriptor & GetFieldZero () const;  ; DescriptorId_t GetFieldZeroId () const;  Returns the logical parent of all top-level NTuple data fields.",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html:15827,Testability,log,logical,15827,"ool(DescriptorId_t, DescriptorId_t)> & ; comparator . ); const. Definition at line 1165 of file RNTupleDescriptor.cxx. ◆ GetFieldIterable() [3/4]. ROOT::Experimental::RNTupleDescriptor::RFieldDescriptorIterable ROOT::Experimental::RNTupleDescriptor::GetFieldIterable ; (; DescriptorId_t ; fieldId); const. Definition at line 1172 of file RNTupleDescriptor.cxx. ◆ GetFieldIterable() [4/4]. ROOT::Experimental::RNTupleDescriptor::RFieldDescriptorIterable ROOT::Experimental::RNTupleDescriptor::GetFieldIterable ; (; DescriptorId_t ; fieldId, . const std::function< bool(DescriptorId_t, DescriptorId_t)> & ; comparator . ); const. Definition at line 1177 of file RNTupleDescriptor.cxx. ◆ GetFieldZero(). const RFieldDescriptor & ROOT::Experimental::RNTupleDescriptor::GetFieldZero ; (; ); const. inline . Definition at line 660 of file RNTupleDescriptor.hxx. ◆ GetFieldZeroId(). DescriptorId_t ROOT::Experimental::RNTupleDescriptor::GetFieldZeroId ; (; ); const. inline . Returns the logical parent of all top-level NTuple data fields. ; Definition at line 659 of file RNTupleDescriptor.hxx. ◆ GetGeneration(). std::uint64_t ROOT::Experimental::RNTupleDescriptor::GetGeneration ; (; ); const. inline . Definition at line 686 of file RNTupleDescriptor.hxx. ◆ GetHeaderExtension(). const RHeaderExtension * ROOT::Experimental::RNTupleDescriptor::GetHeaderExtension ; (; ); const. inline . Return header extension information; if the descriptor does not have a header extension, return nullptr ; Definition at line 680 of file RNTupleDescriptor.hxx. ◆ GetNActiveClusters(). std::size_t ROOT::Experimental::RNTupleDescriptor::GetNActiveClusters ; (; ); const. inline . Definition at line 651 of file RNTupleDescriptor.hxx. ◆ GetName(). const std::string & ROOT::Experimental::RNTupleDescriptor::GetName ; (; ); const. inline . Definition at line 643 of file RNTupleDescriptor.hxx. ◆ GetNClusterGroups(). std::size_t ROOT::Experimental::RNTupleDescriptor::GetNClusterGroups ; (; ); const. inline . Definition",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html:1043,Usability,usab,usable,1043,"eference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Attributes |; Private Attributes |; Friends |; List of all members ; ROOT::Experimental::RNTupleDescriptor Class ReferenceNTuple-related classes. ; The on-storage meta-data of an ntuple. ; Represents the on-disk (on storage) information about an ntuple. The meta-data consists of a header and one or several footers. The header carries the ntuple schema, i.e. the fields and the associated columns and their relationships. The footer(s) carry information about one or several clusters. For every cluster, a footer stores its location and size, and for every column the range of element indexes as well as a list of pages and page locations.; The descriptor provide machine-independent (de-)serialization of headers and footers, and it provides lookup routines for ntuple objects (pages, clusters, ...). It is supposed to be usable by all RPageStorage implementations.; The serialization does not use standard ROOT streamers in order to not let it depend on libCore. The serialization uses the concept of frames: header, footer, and substructures have a preamble with version numbers and the size of the writte struct. This allows for forward and backward compatibility when the meta-data evolves. ; Definition at line 528 of file RNTupleDescriptor.hxx. Classes; class  RClusterDescriptorIterable;  Used to loop over all the clusters of an ntuple (in unspecified order) More...;  ; class  RClusterGroupDescriptorIterable;  Used to loop over all the cluster groups of an ntuple (in unspecified order) More...;  ; class  RColumnDescriptorIterable;  Used to loop over a field's associated columns. More...;  ; struct  RCreateModelOptions;  Modifiers passed to CreateModel More...;  ; class  RExtraTypeInfoDescriptorIterable;  Used to loop over all the extra type info record of an ntuple (in unspecified order) More...;  ; class  RFieldDes",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleDirectAccessView.html:549,Security,access,access,549,". ROOT: ROOT::Experimental::RNTupleDirectAccessView< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; ROOT::Experimental::RNTupleDirectAccessView< T > Class Template ReferenceNTuple-related classes. ; template<typename T>; class ROOT::Experimental::RNTupleDirectAccessView< T >A view variant that provides direct access to the I/O buffers. ; Only works for mappable fields. ; Definition at line 293 of file RNTupleView.hxx. Public Member Functions;  RNTupleDirectAccessView (const RNTupleDirectAccessView &other)=delete;  ;  RNTupleDirectAccessView (RNTupleDirectAccessView &&other)=default;  ;  ~RNTupleDirectAccessView ()=default;  ; const RFieldBase & GetField () const;  ; RNTupleGlobalRange GetFieldRange () const;  ; const T & operator() (NTupleSize_t globalIndex);  ; const T & operator() (RClusterIndex clusterIndex);  ; RNTupleDirectAccessView & operator= (const RNTupleDirectAccessView &other)=delete;  ; RNTupleDirectAccessView & operator= (RNTupleDirectAccessView &&other)=default;  . Protected Member Functions;  RNTupleDirectAccessView (RField< T > field, RNTupleGlobalRange range);  . Static Protected Member Functions; static RField< T > CreateField (DescriptorId_t fieldId, Internal::RPageSource &pageSource);  . Protected Attributes; RField< T > fField;  ; RNTupleGlobalRange fFieldRange;  . Friends; class RNTupleCollectionView;  ; class RNTupleReader;  . #include <ROOT/RNTupleView.hxx>; Constructor & Destructor Documentation. ◆ RNTupleDirectAccessView() [1/3]. template<typename T > . ROOT::Experimental::RNTupleDirectAccessView< T >::RNTupleDirectAccessView ; (; RField< T > ; field, . RNTupleGlobalRange ; range . ). inlineprotected . Definition at line 315 of file RNTupleView.hxx. ◆ RNTupleDirectAccessView() [2/3]. template<typename T > .",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleDirectAccessView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleDirectAccessView.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleFillContext.html:841,Availability,error,errors,841,". ROOT: ROOT::Experimental::RNTupleFillContext Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::Experimental::RNTupleFillContext Class ReferenceNTuple-related classes. ; A context for filling entries (data) into clusters of an RNTuple. ; An output cluster can be filled with entries. The caller has to make sure that the data that gets filled into a cluster is not modified for the time of the Fill() call. The fill call serializes the C++ object into the column format and writes data into the corresponding column page buffers. Writing of the buffers to storage is deferred and can be triggered by FlushCluster() or by destructing the context. On I/O errors, an exception is thrown.; Instances of this class are not meant to be used in isolation and can be created from an RNTupleParallelWriter. For sequential writing, please refer to RNTupleWriter. ; Definition at line 51 of file RNTupleFillContext.hxx. Public Member Functions;  ~RNTupleFillContext ();  ; void CommitStagedClusters ();  Logically append staged clusters to the RNTuple. ;  ; std::unique_ptr< REntry > CreateEntry ();  ; void EnableMetrics ();  ; void EnableStagedClusterCommitting (bool val=true);  ; std::size_t Fill (REntry &entry);  Fill an entry into this context. ;  ; void FillNoFlush (REntry &entry, RNTupleFillStatus &status);  Fill an entry into this context, but don't commit the cluster. ;  ; void FlushCluster ();  Flush so far filled entries to storage. ;  ; void FlushColumns ();  Flush column data, preparing for CommitCluster or to reduce memory usage. ;  ; NTupleSize_t GetLastFlushed () const;  Return the entry number that was last flushed in a cluster. ;  ; const Detail::RNTupleMetrics & GetMetrics () const;  ; const RNTupleModel & GetModel () const;  ; NTupleSize_t GetNEntries () const;  Return the number of entries ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleFillContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleFillContext.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleFillContext.html:1708,Energy Efficiency,reduce,reduce,1708,"o the corresponding column page buffers. Writing of the buffers to storage is deferred and can be triggered by FlushCluster() or by destructing the context. On I/O errors, an exception is thrown.; Instances of this class are not meant to be used in isolation and can be created from an RNTupleParallelWriter. For sequential writing, please refer to RNTupleWriter. ; Definition at line 51 of file RNTupleFillContext.hxx. Public Member Functions;  ~RNTupleFillContext ();  ; void CommitStagedClusters ();  Logically append staged clusters to the RNTuple. ;  ; std::unique_ptr< REntry > CreateEntry ();  ; void EnableMetrics ();  ; void EnableStagedClusterCommitting (bool val=true);  ; std::size_t Fill (REntry &entry);  Fill an entry into this context. ;  ; void FillNoFlush (REntry &entry, RNTupleFillStatus &status);  Fill an entry into this context, but don't commit the cluster. ;  ; void FlushCluster ();  Flush so far filled entries to storage. ;  ; void FlushColumns ();  Flush column data, preparing for CommitCluster or to reduce memory usage. ;  ; NTupleSize_t GetLastFlushed () const;  Return the entry number that was last flushed in a cluster. ;  ; const Detail::RNTupleMetrics & GetMetrics () const;  ; const RNTupleModel & GetModel () const;  ; NTupleSize_t GetNEntries () const;  Return the number of entries filled so far. ;  ; bool IsStagedClusterCommittingEnabled () const;  . Private Member Functions;  RNTupleFillContext (const RNTupleFillContext &)=delete;  ;  RNTupleFillContext (std::unique_ptr< RNTupleModel > model, std::unique_ptr< Internal::RPageSink > sink);  ; RNTupleFillContext & operator= (const RNTupleFillContext &)=delete;  . Private Attributes; NTupleSize_t fLastFlushed = 0;  ; std::size_t fMaxUnzippedClusterSize;  Limit for committing cluster no matter the other tunables. ;  ; Detail::RNTupleMetrics fMetrics;  ; std::unique_ptr< RNTupleModel > fModel;  Needs to be destructed before fSink. ;  ; std::uint64_t fNBytesFilled = 0;  The total number of bytes fill",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleFillContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleFillContext.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleFillContext.html:6019,Energy Efficiency,reduce,reduce,6019,"). inline . Fill an entry into this context. ; This method will perform a light check whether the entry comes from the context's own model. ReturnsThe number of uncompressed bytes written. ; Definition at line 111 of file RNTupleFillContext.hxx. ◆ FillNoFlush(). void ROOT::Experimental::RNTupleFillContext::FillNoFlush ; (; REntry & ; entry, . RNTupleFillStatus & ; status . ). inline . Fill an entry into this context, but don't commit the cluster. ; The calling code must pass an RNTupleFillStatus and check RNTupleFillStatus::ShouldFlushCluster.; This method will perform a light check whether the entry comes from the context's own model. ; Definition at line 93 of file RNTupleFillContext.hxx. ◆ FlushCluster(). void ROOT::Experimental::RNTupleFillContext::FlushCluster ; (; ). Flush so far filled entries to storage. ; Definition at line 65 of file RNTupleFillContext.cxx. ◆ FlushColumns(). void ROOT::Experimental::RNTupleFillContext::FlushColumns ; (; ). Flush column data, preparing for CommitCluster or to reduce memory usage. ; This will trigger compression of pages, but not actually write to storage. ; Definition at line 58 of file RNTupleFillContext.cxx. ◆ GetLastFlushed(). NTupleSize_t ROOT::Experimental::RNTupleFillContext::GetLastFlushed ; (; ); const. inline . Return the entry number that was last flushed in a cluster. ; Definition at line 131 of file RNTupleFillContext.hxx. ◆ GetMetrics(). const Detail::RNTupleMetrics & ROOT::Experimental::RNTupleFillContext::GetMetrics ; (; ); const. inline . Definition at line 145 of file RNTupleFillContext.hxx. ◆ GetModel(). const RNTupleModel & ROOT::Experimental::RNTupleFillContext::GetModel ; (; ); const. inline . Definition at line 127 of file RNTupleFillContext.hxx. ◆ GetNEntries(). NTupleSize_t ROOT::Experimental::RNTupleFillContext::GetNEntries ; (; ); const. inline . Return the number of entries filled so far. ; Definition at line 133 of file RNTupleFillContext.hxx. ◆ IsStagedClusterCommittingEnabled(). bool ROOT::Expe",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleFillContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleFillContext.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleFillContext.html:5066,Performance,perform,perform,5066,"ontext ; (; ). Definition at line 44 of file RNTupleFillContext.cxx. Member Function Documentation. ◆ CommitStagedClusters(). void ROOT::Experimental::RNTupleFillContext::CommitStagedClusters ; (; ). Logically append staged clusters to the RNTuple. ; Definition at line 93 of file RNTupleFillContext.cxx. ◆ CreateEntry(). std::unique_ptr< REntry > ROOT::Experimental::RNTupleFillContext::CreateEntry ; (; ). inline . Definition at line 128 of file RNTupleFillContext.hxx. ◆ EnableMetrics(). void ROOT::Experimental::RNTupleFillContext::EnableMetrics ; (; ). inline . Definition at line 144 of file RNTupleFillContext.hxx. ◆ EnableStagedClusterCommitting(). void ROOT::Experimental::RNTupleFillContext::EnableStagedClusterCommitting ; (; bool ; val = true). inline . Definition at line 135 of file RNTupleFillContext.hxx. ◆ Fill(). std::size_t ROOT::Experimental::RNTupleFillContext::Fill ; (; REntry & ; entry). inline . Fill an entry into this context. ; This method will perform a light check whether the entry comes from the context's own model. ReturnsThe number of uncompressed bytes written. ; Definition at line 111 of file RNTupleFillContext.hxx. ◆ FillNoFlush(). void ROOT::Experimental::RNTupleFillContext::FillNoFlush ; (; REntry & ; entry, . RNTupleFillStatus & ; status . ). inline . Fill an entry into this context, but don't commit the cluster. ; The calling code must pass an RNTupleFillStatus and check RNTupleFillStatus::ShouldFlushCluster.; This method will perform a light check whether the entry comes from the context's own model. ; Definition at line 93 of file RNTupleFillContext.hxx. ◆ FlushCluster(). void ROOT::Experimental::RNTupleFillContext::FlushCluster ; (; ). Flush so far filled entries to storage. ; Definition at line 65 of file RNTupleFillContext.cxx. ◆ FlushColumns(). void ROOT::Experimental::RNTupleFillContext::FlushColumns ; (; ). Flush column data, preparing for CommitCluster or to reduce memory usage. ; This will trigger compression of pages, but not actu",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleFillContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleFillContext.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleFillContext.html:5570,Performance,perform,perform,5570,"erimental::RNTupleFillContext::EnableMetrics ; (; ). inline . Definition at line 144 of file RNTupleFillContext.hxx. ◆ EnableStagedClusterCommitting(). void ROOT::Experimental::RNTupleFillContext::EnableStagedClusterCommitting ; (; bool ; val = true). inline . Definition at line 135 of file RNTupleFillContext.hxx. ◆ Fill(). std::size_t ROOT::Experimental::RNTupleFillContext::Fill ; (; REntry & ; entry). inline . Fill an entry into this context. ; This method will perform a light check whether the entry comes from the context's own model. ReturnsThe number of uncompressed bytes written. ; Definition at line 111 of file RNTupleFillContext.hxx. ◆ FillNoFlush(). void ROOT::Experimental::RNTupleFillContext::FillNoFlush ; (; REntry & ; entry, . RNTupleFillStatus & ; status . ). inline . Fill an entry into this context, but don't commit the cluster. ; The calling code must pass an RNTupleFillStatus and check RNTupleFillStatus::ShouldFlushCluster.; This method will perform a light check whether the entry comes from the context's own model. ; Definition at line 93 of file RNTupleFillContext.hxx. ◆ FlushCluster(). void ROOT::Experimental::RNTupleFillContext::FlushCluster ; (; ). Flush so far filled entries to storage. ; Definition at line 65 of file RNTupleFillContext.cxx. ◆ FlushColumns(). void ROOT::Experimental::RNTupleFillContext::FlushColumns ; (; ). Flush column data, preparing for CommitCluster or to reduce memory usage. ; This will trigger compression of pages, but not actually write to storage. ; Definition at line 58 of file RNTupleFillContext.cxx. ◆ GetLastFlushed(). NTupleSize_t ROOT::Experimental::RNTupleFillContext::GetLastFlushed ; (; ); const. inline . Return the entry number that was last flushed in a cluster. ; Definition at line 131 of file RNTupleFillContext.hxx. ◆ GetMetrics(). const Detail::RNTupleMetrics & ROOT::Experimental::RNTupleFillContext::GetMetrics ; (; ); const. inline . Definition at line 145 of file RNTupleFillContext.hxx. ◆ GetModel(). const",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleFillContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleFillContext.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleFillContext.html:3065,Testability,log,logically,3065,") const;  Return the number of entries filled so far. ;  ; bool IsStagedClusterCommittingEnabled () const;  . Private Member Functions;  RNTupleFillContext (const RNTupleFillContext &)=delete;  ;  RNTupleFillContext (std::unique_ptr< RNTupleModel > model, std::unique_ptr< Internal::RPageSink > sink);  ; RNTupleFillContext & operator= (const RNTupleFillContext &)=delete;  . Private Attributes; NTupleSize_t fLastFlushed = 0;  ; std::size_t fMaxUnzippedClusterSize;  Limit for committing cluster no matter the other tunables. ;  ; Detail::RNTupleMetrics fMetrics;  ; std::unique_ptr< RNTupleModel > fModel;  Needs to be destructed before fSink. ;  ; std::uint64_t fNBytesFilled = 0;  The total number of bytes filled into all the so far committed clusters, i.e. ;  ; std::uint64_t fNBytesFlushed = 0;  The total number of bytes written to storage (i.e., after compression) ;  ; NTupleSize_t fNEntries = 0;  ; std::unique_ptr< Internal::RPageSink > fSink;  ; bool fStagedClusterCommitting = false;  Whether to enable staged cluster committing, where only an explicit call to CommitStagedClusters() will logically append the clusters to the RNTuple. ;  ; std::vector< Internal::RPageSink::RStagedCluster > fStagedClusters;  Vector of currently staged clusters. ;  ; std::size_t fUnzippedClusterSize = 0;  Keeps track of the number of bytes written into the current cluster. ;  ; std::size_t fUnzippedClusterSizeEst;  Estimator of uncompressed cluster size, taking into account the estimated compression ratio. ;  . Friends; class RNTupleParallelWriter;  ; class RNTupleWriter;  . #include <ROOT/RNTupleFillContext.hxx>; Constructor & Destructor Documentation. ◆ RNTupleFillContext() [1/2]. ROOT::Experimental::RNTupleFillContext::RNTupleFillContext ; (; std::unique_ptr< RNTupleModel > ; model, . std::unique_ptr< Internal::RPageSink > ; sink . ). private . Definition at line 29 of file RNTupleFillContext.cxx. ◆ RNTupleFillContext() [2/2]. ROOT::Experimental::RNTupleFillContext::RNTupleFillContext ;",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleFillContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleFillContext.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleFillContext.html:9338,Testability,log,logically,9338,"BytesFilled. std::uint64_t ROOT::Experimental::RNTupleFillContext::fNBytesFilled = 0. private . The total number of bytes filled into all the so far committed clusters, i.e. ; the uncompressed size of the written clusters ; Definition at line 70 of file RNTupleFillContext.hxx. ◆ fNBytesFlushed. std::uint64_t ROOT::Experimental::RNTupleFillContext::fNBytesFlushed = 0. private . The total number of bytes written to storage (i.e., after compression) ; Definition at line 67 of file RNTupleFillContext.hxx. ◆ fNEntries. NTupleSize_t ROOT::Experimental::RNTupleFillContext::fNEntries = 0. private . Definition at line 63 of file RNTupleFillContext.hxx. ◆ fSink. std::unique_ptr<Internal::RPageSink> ROOT::Experimental::RNTupleFillContext::fSink. private . Definition at line 56 of file RNTupleFillContext.hxx. ◆ fStagedClusterCommitting. bool ROOT::Experimental::RNTupleFillContext::fStagedClusterCommitting = false. private . Whether to enable staged cluster committing, where only an explicit call to CommitStagedClusters() will logically append the clusters to the RNTuple. ; Definition at line 78 of file RNTupleFillContext.hxx. ◆ fStagedClusters. std::vector<Internal::RPageSink::RStagedCluster> ROOT::Experimental::RNTupleFillContext::fStagedClusters. private . Vector of currently staged clusters. ; Definition at line 80 of file RNTupleFillContext.hxx. ◆ fUnzippedClusterSize. std::size_t ROOT::Experimental::RNTupleFillContext::fUnzippedClusterSize = 0. private . Keeps track of the number of bytes written into the current cluster. ; Definition at line 65 of file RNTupleFillContext.hxx. ◆ fUnzippedClusterSizeEst. std::size_t ROOT::Experimental::RNTupleFillContext::fUnzippedClusterSizeEst. private . Estimator of uncompressed cluster size, taking into account the estimated compression ratio. ; Definition at line 74 of file RNTupleFillContext.hxx. Libraries for ROOT::Experimental::RNTupleFillContext:. [legend]; The documentation for this class was generated from the following files:; t",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleFillContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleFillContext.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleImporter-members.html:243,Modifiability,inherit,inherited,243,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOT::Experimental::RNTupleImporter Member List. This is the complete list of members for ROOT::Experimental::RNTupleImporter, including all inherited members. Create(std::string_view sourceFileName, std::string_view treeName, std::string_view destFileName)ROOT::Experimental::RNTupleImporterstatic; Create(TTree *sourceTree, std::string_view destFileName)ROOT::Experimental::RNTupleImporterstatic; fConvertDotsInBranchNamesROOT::Experimental::RNTupleImporterprivate; fDestFileROOT::Experimental::RNTupleImporterprivate; fDestFileNameROOT::Experimental::RNTupleImporterprivate; fEntryROOT::Experimental::RNTupleImporterprivate; fFieldModifierROOT::Experimental::RNTupleImporterprivate; FieldModifier_t typedefROOT::Experimental::RNTupleImporter; fImportBranchesROOT::Experimental::RNTupleImporterprivate; fImportFieldsROOT::Experimental::RNTupleImporterprivate; fImportTransformationsROOT::Experimental::RNTupleImporterprivate; fIsQuietROOT::Experimental::RNTupleImporterprivate; fLeafCountCollectionsROOT::Experimental::RNTupleImporterprivate; fMaxEntriesROOT::Experimental::RNTupleImporterprivate; fModelROOT::Experimental::RNTupleImporterprivate; fNTupleNameROOT::Experimental::RNTupleImporterprivate; fProgressCallbackROOT::Experimental::RNTupleImporterprivate; fSourceFileROOT::Experimental::RNTupleImporterprivate; fSourceTreeROOT::Experimental::RNTupleImporterprivate; fWriteOptionsROOT::Experimental::RNTupleImporterprivate; GetWriteOptions() constROOT::Experimental::RNTupleImporterinline; Import()ROOT::Experimental::RNTupleImporter; InitDestination(std::string_view destFileName)ROOT::Experimental::RNTupleImporterprivate; operator=(const RNTupleImporter &other)=deleteROOT::Experimental::RNTupleImporter; operator=(RNTupleImporter &&other)=deleteROOT::Experimental::RNTupleImporter; PrepareSchema()ROOT::Experimental::RNTupleImporterprivate; ReportSchema()ROOT::Experimental::RNTupleImpo",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleImporter-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleImporter-members.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleImporter.html:3341,Availability,avail,available,3341,"d, RNTuple projects the members of these collections and its collection counter to the input branch names. For instance, the following input leafs: Int_t njets; float jet_pt[njets]; float jet_eta[njets]; int; will be converted to the following RNTuple schema: _collection0 (untyped collection); |- float jet_pt; |- float jet_eta; std::size_t (RNTupleCardinality) njets (projected from _collection0 without subfields); ROOT::RVec<float> jet_pt (projected from _collection0.jet_pt); ROOT::RVec<float> jet_eta (projected from _collection0.jet_eta); ROOT::VecOps::RVecA ""std::vector""-like collection of values implementing handy operation to analyse them.Definition RVec.hxx:1529; ROOT::RNTupleCardinalityHelper types to present an offset column as array of collection sizes.Definition RNTupleUtil.hxx:32; These projections are meta-data only operations and don't involve duplicating the data. Current limitations of the importer:; No support for trees containing TClonesArray collections; Due to RNTuple currently storing data fully split, ""don't split"" markers are ignored; Some types are not available in RNTuple. Please refer to the RNTuple specification for an overview of all types currently supported. . Definition at line 103 of file RNTupleImporter.hxx. Classes; struct  RCStringTransformation;  Transform a NULL terminated C string branch into an std::string field. More...;  ; struct  RImportBranch;  ; struct  RImportField;  ; struct  RImportGuard;  When the schema is set up and the import started, it needs to be reset before the next Import() call can start. More...;  ; struct  RImportLeafCountCollection;  Leaf count arrays require special treatment. More...;  ; struct  RImportTransformation;  Base class to perform data transformations from TTree branches to RNTuple fields if necessary. More...;  ; class  RProgressCallback;  Used to report every ~100 MB (compressed), and at the end about the status of the import. More...;  . Public Types; using FieldModifier_t = std::function< void",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleImporter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleImporter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleImporter.html:1145,Deployability,update,update,1145,"mental::RNTupleImporter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Experimental::RNTupleImporter Class ReferenceNTuple-related classes. ; Converts a TTree into an RNTuple. ; Example usage (see the ntpl008_import.C tutorial for a full example):; #include <ROOT/RNTupleImporter.hxx>; using ROOT::Experimental::RNTupleImporter;; ; auto importer = RNTupleImporter::Create(""data.root"", ""TreeName"", ""output.root"");; // As required: importer->SetNTupleName(), importer->SetWriteOptions(), ...; importer->Import();; RNTupleImporter.hxx; ROOT::Experimental::RNTupleImporterConverts a TTree into an RNTuple.Definition RNTupleImporter.hxx:103; ROOT::Experimental::RNTupleImporter::Createstatic std::unique_ptr< RNTupleImporter > Create(std::string_view sourceFileName, std::string_view treeName, std::string_view destFileName)Opens the input file for reading and the output file for writing (update).Definition RNTupleImporter.cxx:80; The output file is created if it does not exist, otherwise the ntuple is added to the existing file. Note that input file and output file can be identical if the ntuple is stored under a different name than the tree (use SetNTupleName()).; By default, the RNTuple is compressed with zstd, independent of the input compression. The compression settings (and other output parameters) can be changed by SetWriteOptions(). For example, to compress the imported RNTuple using lz4 (with compression level 4) instead:; auto writeOptions = importer->GetWriteOptions();; writeOptions.SetCompression(404);; importer->SetWriteOptions(writeOptions);; Most RNTuple fields have a type identical to the corresponding TTree input branch. Exceptions are; C string branches are translated to std::string fields; C style arrays are translated to std::a",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleImporter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleImporter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleImporter.html:5460,Deployability,update,update,5460,"mber Functions;  RNTupleImporter (const RNTupleImporter &other)=delete;  ;  RNTupleImporter (RNTupleImporter &&other)=delete;  ;  ~RNTupleImporter ()=default;  ; RNTupleWriteOptions GetWriteOptions () const;  ; void Import ();  Import works in two steps: ;  ; RNTupleImporter & operator= (const RNTupleImporter &other)=delete;  ; RNTupleImporter & operator= (RNTupleImporter &&other)=delete;  ; void SetConvertDotsInBranchNames (bool value);  Whereas branch names may contain dots, RNTuple field names may not. ;  ; void SetFieldModifier (FieldModifier_t modifier);  Add custom method to adjust column representations. ;  ; void SetIsQuiet (bool value);  Whether or not information and progress is printed to stdout. ;  ; void SetMaxEntries (std::uint64_t maxEntries);  ; void SetNTupleName (const std::string &name);  ; void SetWriteOptions (RNTupleWriteOptions options);  . Static Public Member Functions; static std::unique_ptr< RNTupleImporter > Create (std::string_view sourceFileName, std::string_view treeName, std::string_view destFileName);  Opens the input file for reading and the output file for writing (update). ;  ; static std::unique_ptr< RNTupleImporter > Create (TTree *sourceTree, std::string_view destFileName);  Directly uses the provided tree and opens the output file for writing (update). ;  . Private Member Functions;  RNTupleImporter ()=default;  ; ROOT::Experimental::RResult< void > InitDestination (std::string_view destFileName);  ; RResult< void > PrepareSchema ();  Sets up the connection from TTree branches to RNTuple fields, including initialization of the memory buffers used for reading and writing. ;  ; void ReportSchema ();  ; void ResetSchema ();  . Private Attributes; bool fConvertDotsInBranchNames = false;  Whether or not dot characters in branch names should be converted to underscores. ;  ; std::unique_ptr< TFile > fDestFile;  ; std::string fDestFileName;  ; std::unique_ptr< REntry > fEntry;  ; FieldModifier_t fFieldModifier;  ; std::vector< RImpor",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleImporter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleImporter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleImporter.html:5647,Deployability,update,update,5647,"port ();  Import works in two steps: ;  ; RNTupleImporter & operator= (const RNTupleImporter &other)=delete;  ; RNTupleImporter & operator= (RNTupleImporter &&other)=delete;  ; void SetConvertDotsInBranchNames (bool value);  Whereas branch names may contain dots, RNTuple field names may not. ;  ; void SetFieldModifier (FieldModifier_t modifier);  Add custom method to adjust column representations. ;  ; void SetIsQuiet (bool value);  Whether or not information and progress is printed to stdout. ;  ; void SetMaxEntries (std::uint64_t maxEntries);  ; void SetNTupleName (const std::string &name);  ; void SetWriteOptions (RNTupleWriteOptions options);  . Static Public Member Functions; static std::unique_ptr< RNTupleImporter > Create (std::string_view sourceFileName, std::string_view treeName, std::string_view destFileName);  Opens the input file for reading and the output file for writing (update). ;  ; static std::unique_ptr< RNTupleImporter > Create (TTree *sourceTree, std::string_view destFileName);  Directly uses the provided tree and opens the output file for writing (update). ;  . Private Member Functions;  RNTupleImporter ()=default;  ; ROOT::Experimental::RResult< void > InitDestination (std::string_view destFileName);  ; RResult< void > PrepareSchema ();  Sets up the connection from TTree branches to RNTuple fields, including initialization of the memory buffers used for reading and writing. ;  ; void ReportSchema ();  ; void ResetSchema ();  . Private Attributes; bool fConvertDotsInBranchNames = false;  Whether or not dot characters in branch names should be converted to underscores. ;  ; std::unique_ptr< TFile > fDestFile;  ; std::string fDestFileName;  ; std::unique_ptr< REntry > fEntry;  ; FieldModifier_t fFieldModifier;  ; std::vector< RImportBranch > fImportBranches;  ; std::vector< RImportField > fImportFields;  ; std::vector< std::unique_ptr< RImportTransformation > > fImportTransformations;  The list of transformations to be performed for every entry. ;",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleImporter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleImporter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleImporter.html:8334,Deployability,update,update,8334,"ng ROOT::Experimental::RNTupleImporter::FieldModifier_t = std::function<void(RFieldBase &)>. Used to make adjustments to the fields of the output model. ; Definition at line 106 of file RNTupleImporter.hxx. Constructor & Destructor Documentation. ◆ RNTupleImporter() [1/3]. ROOT::Experimental::RNTupleImporter::RNTupleImporter ; (; ). privatedefault . ◆ RNTupleImporter() [2/3]. ROOT::Experimental::RNTupleImporter::RNTupleImporter ; (; const RNTupleImporter & ; other). delete . ◆ RNTupleImporter() [3/3]. ROOT::Experimental::RNTupleImporter::RNTupleImporter ; (; RNTupleImporter && ; other). delete . ◆ ~RNTupleImporter(). ROOT::Experimental::RNTupleImporter::~RNTupleImporter ; (; ). default . Member Function Documentation. ◆ Create() [1/2]. std::unique_ptr< ROOT::Experimental::RNTupleImporter > ROOT::Experimental::RNTupleImporter::Create ; (; std::string_view ; sourceFileName, . std::string_view ; treeName, . std::string_view ; destFileName . ). static . Opens the input file for reading and the output file for writing (update). ; Definition at line 80 of file RNTupleImporter.cxx. ◆ Create() [2/2]. std::unique_ptr< ROOT::Experimental::RNTupleImporter > ROOT::Experimental::RNTupleImporter::Create ; (; TTree * ; sourceTree, . std::string_view ; destFileName . ). static . Directly uses the provided tree and opens the output file for writing (update). ; Definition at line 106 of file RNTupleImporter.cxx. ◆ GetWriteOptions(). RNTupleWriteOptions ROOT::Experimental::RNTupleImporter::GetWriteOptions ; (; ); const. inline . Definition at line 255 of file RNTupleImporter.hxx. ◆ Import(). void ROOT::Experimental::RNTupleImporter::Import ; (; ). Import works in two steps: . PrepareSchema() calls SetBranchAddress() on all the TTree branches and creates the corresponding RNTuple fields and the model; An event loop reads every entry from the TTree, applies transformations where necessary, and writes the output entry to the RNTuple. . Definition at line 371 of file RNTupleImporter.cxx. ◆",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleImporter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleImporter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleImporter.html:8659,Deployability,update,update,8659,"ter ; (; ). privatedefault . ◆ RNTupleImporter() [2/3]. ROOT::Experimental::RNTupleImporter::RNTupleImporter ; (; const RNTupleImporter & ; other). delete . ◆ RNTupleImporter() [3/3]. ROOT::Experimental::RNTupleImporter::RNTupleImporter ; (; RNTupleImporter && ; other). delete . ◆ ~RNTupleImporter(). ROOT::Experimental::RNTupleImporter::~RNTupleImporter ; (; ). default . Member Function Documentation. ◆ Create() [1/2]. std::unique_ptr< ROOT::Experimental::RNTupleImporter > ROOT::Experimental::RNTupleImporter::Create ; (; std::string_view ; sourceFileName, . std::string_view ; treeName, . std::string_view ; destFileName . ). static . Opens the input file for reading and the output file for writing (update). ; Definition at line 80 of file RNTupleImporter.cxx. ◆ Create() [2/2]. std::unique_ptr< ROOT::Experimental::RNTupleImporter > ROOT::Experimental::RNTupleImporter::Create ; (; TTree * ; sourceTree, . std::string_view ; destFileName . ). static . Directly uses the provided tree and opens the output file for writing (update). ; Definition at line 106 of file RNTupleImporter.cxx. ◆ GetWriteOptions(). RNTupleWriteOptions ROOT::Experimental::RNTupleImporter::GetWriteOptions ; (; ); const. inline . Definition at line 255 of file RNTupleImporter.hxx. ◆ Import(). void ROOT::Experimental::RNTupleImporter::Import ; (; ). Import works in two steps: . PrepareSchema() calls SetBranchAddress() on all the TTree branches and creates the corresponding RNTuple fields and the model; An event loop reads every entry from the TTree, applies transformations where necessary, and writes the output entry to the RNTuple. . Definition at line 371 of file RNTupleImporter.cxx. ◆ InitDestination(). ROOT::Experimental::RResult< void > ROOT::Experimental::RNTupleImporter::InitDestination ; (; std::string_view ; destFileName). private . Definition at line 130 of file RNTupleImporter.cxx. ◆ operator=() [1/2]. RNTupleImporter & ROOT::Experimental::RNTupleImporter::operator= ; (; const RNTupleImporter",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleImporter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleImporter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleImporter.html:3972,Performance,perform,perform,3972,"olumn as array of collection sizes.Definition RNTupleUtil.hxx:32; These projections are meta-data only operations and don't involve duplicating the data. Current limitations of the importer:; No support for trees containing TClonesArray collections; Due to RNTuple currently storing data fully split, ""don't split"" markers are ignored; Some types are not available in RNTuple. Please refer to the RNTuple specification for an overview of all types currently supported. . Definition at line 103 of file RNTupleImporter.hxx. Classes; struct  RCStringTransformation;  Transform a NULL terminated C string branch into an std::string field. More...;  ; struct  RImportBranch;  ; struct  RImportField;  ; struct  RImportGuard;  When the schema is set up and the import started, it needs to be reset before the next Import() call can start. More...;  ; struct  RImportLeafCountCollection;  Leaf count arrays require special treatment. More...;  ; struct  RImportTransformation;  Base class to perform data transformations from TTree branches to RNTuple fields if necessary. More...;  ; class  RProgressCallback;  Used to report every ~100 MB (compressed), and at the end about the status of the import. More...;  . Public Types; using FieldModifier_t = std::function< void(RFieldBase &)>;  Used to make adjustments to the fields of the output model. ;  . Public Member Functions;  RNTupleImporter (const RNTupleImporter &other)=delete;  ;  RNTupleImporter (RNTupleImporter &&other)=delete;  ;  ~RNTupleImporter ()=default;  ; RNTupleWriteOptions GetWriteOptions () const;  ; void Import ();  Import works in two steps: ;  ; RNTupleImporter & operator= (const RNTupleImporter &other)=delete;  ; RNTupleImporter & operator= (RNTupleImporter &&other)=delete;  ; void SetConvertDotsInBranchNames (bool value);  Whereas branch names may contain dots, RNTuple field names may not. ;  ; void SetFieldModifier (FieldModifier_t modifier);  Add custom method to adjust column representations. ;  ; void SetIsQuiet (boo",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleImporter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleImporter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleImporter.html:6534,Performance,perform,performed,6534,"ring_view destFileName);  Opens the input file for reading and the output file for writing (update). ;  ; static std::unique_ptr< RNTupleImporter > Create (TTree *sourceTree, std::string_view destFileName);  Directly uses the provided tree and opens the output file for writing (update). ;  . Private Member Functions;  RNTupleImporter ()=default;  ; ROOT::Experimental::RResult< void > InitDestination (std::string_view destFileName);  ; RResult< void > PrepareSchema ();  Sets up the connection from TTree branches to RNTuple fields, including initialization of the memory buffers used for reading and writing. ;  ; void ReportSchema ();  ; void ResetSchema ();  . Private Attributes; bool fConvertDotsInBranchNames = false;  Whether or not dot characters in branch names should be converted to underscores. ;  ; std::unique_ptr< TFile > fDestFile;  ; std::string fDestFileName;  ; std::unique_ptr< REntry > fEntry;  ; FieldModifier_t fFieldModifier;  ; std::vector< RImportBranch > fImportBranches;  ; std::vector< RImportField > fImportFields;  ; std::vector< std::unique_ptr< RImportTransformation > > fImportTransformations;  The list of transformations to be performed for every entry. ;  ; bool fIsQuiet = false;  No standard output, conversely if set to false, schema information and progress is printed. ;  ; std::map< std::string, RImportLeafCountCollection > fLeafCountCollections;  Maps the count leaf to the information about the corresponding untyped collection. ;  ; std::int64_t fMaxEntries = -1;  The maximum number of entries to import. When this value is -1 (default), import all entries. ;  ; std::unique_ptr< RNTupleModel > fModel;  ; std::string fNTupleName;  ; std::unique_ptr< RProgressCallback > fProgressCallback;  ; std::unique_ptr< TFile > fSourceFile;  ; TTree * fSourceTree;  ; RNTupleWriteOptions fWriteOptions;  . #include <ROOT/RNTupleImporter.hxx>; Member Typedef Documentation. ◆ FieldModifier_t. using ROOT::Experimental::RNTupleImporter::FieldModifier_t = std::fu",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleImporter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleImporter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleImporter.html:13291,Performance,perform,performed,13291,"tFile. private . Definition at line 209 of file RNTupleImporter.hxx. ◆ fDestFileName. std::string ROOT::Experimental::RNTupleImporter::fDestFileName. private . Definition at line 207 of file RNTupleImporter.hxx. ◆ fEntry. std::unique_ptr<REntry> ROOT::Experimental::RNTupleImporter::fEntry. private . Definition at line 225 of file RNTupleImporter.hxx. ◆ fFieldModifier. FieldModifier_t ROOT::Experimental::RNTupleImporter::fFieldModifier. private . Definition at line 222 of file RNTupleImporter.hxx. ◆ fImportBranches. std::vector<RImportBranch> ROOT::Experimental::RNTupleImporter::fImportBranches. private . Definition at line 226 of file RNTupleImporter.hxx. ◆ fImportFields. std::vector<RImportField> ROOT::Experimental::RNTupleImporter::fImportFields. private . Definition at line 227 of file RNTupleImporter.hxx. ◆ fImportTransformations. std::vector<std::unique_ptr<RImportTransformation> > ROOT::Experimental::RNTupleImporter::fImportTransformations. private . The list of transformations to be performed for every entry. ; Definition at line 231 of file RNTupleImporter.hxx. ◆ fIsQuiet. bool ROOT::Experimental::RNTupleImporter::fIsQuiet = false. private . No standard output, conversely if set to false, schema information and progress is printed. ; Definition at line 220 of file RNTupleImporter.hxx. ◆ fLeafCountCollections. std::map<std::string, RImportLeafCountCollection> ROOT::Experimental::RNTupleImporter::fLeafCountCollections. private . Maps the count leaf to the information about the corresponding untyped collection. ; Definition at line 229 of file RNTupleImporter.hxx. ◆ fMaxEntries. std::int64_t ROOT::Experimental::RNTupleImporter::fMaxEntries = -1. private . The maximum number of entries to import. When this value is -1 (default), import all entries. ; Definition at line 217 of file RNTupleImporter.hxx. ◆ fModel. std::unique_ptr<RNTupleModel> ROOT::Experimental::RNTupleImporter::fModel. private . Definition at line 224 of file RNTupleImporter.hxx. ◆ fNTupleName. st",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleImporter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleImporter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleModel.html:1143,Integrability,wrap,wrapper,1143,"Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::Experimental::RNTupleModel Class ReferenceNTuple-related classes. ; The RNTupleModel encapulates the schema of an ntuple. ; The ntuple model comprises a collection of hierarchically organized fields. From a model, ""entries"" can be extracted. For convenience, the model provides a default entry unless it is created as a ""bare model"". Models have a unique model identifier that faciliates checking whether entries are compatible with it (i.e.: have been extracted from that model).; A model is subject to a state transition during its lifetime: it starts in a building state, in which fields can be added and modified. Once the schema is finalized, the model gets frozen. Only frozen models can create entries. ; Definition at line 136 of file RNTupleModel.hxx. Classes; struct  NameWithDescription_t;  A wrapper over a field name and an optional description; used in AddField() and RUpdater::AddField() More...;  ; class  RUpdater;  A model is usually immutable after passing it to an RNTupleWriter. More...;  . Public Types; using FieldMappingFunc_t = std::function< std::string(const std::string &)>;  User provided function that describes the mapping of existing source fields to projected fields in terms of fully qualified field names. ;  . Public Member Functions;  RNTupleModel (const RNTupleModel &)=delete;  ;  ~RNTupleModel ()=default;  ; void AddField (std::unique_ptr< RFieldBase > field);  Adds a field whose type is not known at compile time. ;  ; RResult< void > AddProjectedField (std::unique_ptr< RFieldBase > field, FieldMappingFunc_t mapping);  Adds a top-level field based on existing fields. ;  ; std::unique_ptr< RNTupleModel > Clone () const;  ; std::unique_ptr< REntry > CreateBareEntry () const;  In a bare entry, all values point to nullptr. ;  ; RFieldBase::RBulk CreateBulk (std::string_view fieldName) con",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleModel.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleModel.html:2916,Security,access,access,2916," Adds a field whose type is not known at compile time. ;  ; RResult< void > AddProjectedField (std::unique_ptr< RFieldBase > field, FieldMappingFunc_t mapping);  Adds a top-level field based on existing fields. ;  ; std::unique_ptr< RNTupleModel > Clone () const;  ; std::unique_ptr< REntry > CreateBareEntry () const;  In a bare entry, all values point to nullptr. ;  ; RFieldBase::RBulk CreateBulk (std::string_view fieldName) const;  Calls the given field's CreateBulk() method. Throws an exception if no field with the given name exists. ;  ; std::unique_ptr< REntry > CreateEntry () const;  ; std::size_t EstimateWriteMemoryUsage (const RNTupleWriteOptions &options=RNTupleWriteOptions()) const;  Estimate the memory usage for this model during writing. ;  ; void Freeze ();  ; const RFieldBase & GetConstField (std::string_view fieldName) const;  ; const RFieldZero & GetConstFieldZero () const;  ; REntry & GetDefaultEntry ();  ; const REntry & GetDefaultEntry () const;  ; const std::string & GetDescription () const;  ; std::uint64_t GetModelId () const;  ; RFieldBase & GetMutableField (std::string_view fieldName);  ; RFieldZero & GetMutableFieldZero ();  Mutable access to the root field is used to make adjustments to the fields. ;  ; const std::unordered_set< std::string > & GetRegisteredSubfields () const;  Get the (qualified) names of subfields that have been registered to be included in entries from this model. ;  ; std::uint64_t GetSchemaId () const;  ; REntry::RFieldToken GetToken (std::string_view fieldName) const;  Creates a token to be used in REntry methods to address a field present in the entry. ;  ; bool IsBare () const;  ; bool IsFrozen () const;  ; template<typename T , typename... ArgsT> ; std::shared_ptr< T > MakeField (const NameWithDescription_t &fieldNameDesc, ArgsT &&...args);  Creates a new field given a name or {name, description} pair and a corresponding value that is managed by a shared pointer. ;  ; RNTupleModel & operator= (const RNTupleModel &)=",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleModel.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleModel.html:3847,Security,access,accessed,3847," () const;  ; RFieldBase & GetMutableField (std::string_view fieldName);  ; RFieldZero & GetMutableFieldZero ();  Mutable access to the root field is used to make adjustments to the fields. ;  ; const std::unordered_set< std::string > & GetRegisteredSubfields () const;  Get the (qualified) names of subfields that have been registered to be included in entries from this model. ;  ; std::uint64_t GetSchemaId () const;  ; REntry::RFieldToken GetToken (std::string_view fieldName) const;  Creates a token to be used in REntry methods to address a field present in the entry. ;  ; bool IsBare () const;  ; bool IsFrozen () const;  ; template<typename T , typename... ArgsT> ; std::shared_ptr< T > MakeField (const NameWithDescription_t &fieldNameDesc, ArgsT &&...args);  Creates a new field given a name or {name, description} pair and a corresponding value that is managed by a shared pointer. ;  ; RNTupleModel & operator= (const RNTupleModel &)=delete;  ; void RegisterSubfield (std::string_view qualifiedFieldName);  Register a subfield so it can be accessed directly from entries belonging to the model. ;  ; void SetDescription (std::string_view description);  ; void Unfreeze ();  . Static Public Member Functions; static std::unique_ptr< RNTupleModel > Create ();  ; static std::unique_ptr< RNTupleModel > Create (std::unique_ptr< RFieldZero > fieldZero);  ; static std::unique_ptr< RNTupleModel > CreateBare ();  A bare model has no default entry. ;  ; static std::unique_ptr< RNTupleModel > CreateBare (std::unique_ptr< RFieldZero > fieldZero);  . Private Member Functions;  RNTupleModel (std::unique_ptr< RFieldZero > fieldZero);  ; void AddSubfield (std::string_view fieldName, REntry &entry, bool initializeValue=true) const;  Add a subfield to the provided entry. ;  ; void EnsureNotBare () const;  Throws an RException if fDefaultEntry is nullptr. ;  ; void EnsureNotFrozen () const;  Throws an RException if fFrozen is true. ;  ; void EnsureValidFieldName (std::string_view fieldName);",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleModel.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleModel.html:14900,Security,access,access,14900,hxx. ◆ GetDefaultEntry() [1/2]. ROOT::Experimental::REntry & ROOT::Experimental::RNTupleModel::GetDefaultEntry ; (; ). Definition at line 426 of file RNTupleModel.cxx. ◆ GetDefaultEntry() [2/2]. const ROOT::Experimental::REntry & ROOT::Experimental::RNTupleModel::GetDefaultEntry ; (; ); const. Definition at line 432 of file RNTupleModel.cxx. ◆ GetDescription(). const std::string & ROOT::Experimental::RNTupleModel::GetDescription ; (; ); const. inline . Definition at line 386 of file RNTupleModel.hxx. ◆ GetModelId(). std::uint64_t ROOT::Experimental::RNTupleModel::GetModelId ; (; ); const. inline . Definition at line 365 of file RNTupleModel.hxx. ◆ GetMutableField(). ROOT::Experimental::RFieldBase & ROOT::Experimental::RNTupleModel::GetMutableField ; (; std::string_view ; fieldName). Definition at line 406 of file RNTupleModel.cxx. ◆ GetMutableFieldZero(). ROOT::Experimental::RFieldZero & ROOT::Experimental::RNTupleModel::GetMutableFieldZero ; (; ). Mutable access to the root field is used to make adjustments to the fields. ; Definition at line 399 of file RNTupleModel.cxx. ◆ GetRegisteredSubfields(). const std::unordered_set< std::string > & ROOT::Experimental::RNTupleModel::GetRegisteredSubfields ; (; ); const. inline . Get the (qualified) names of subfields that have been registered to be included in entries from this model. ; Definition at line 390 of file RNTupleModel.hxx. ◆ GetSchemaId(). std::uint64_t ROOT::Experimental::RNTupleModel::GetSchemaId ; (; ); const. inline . Definition at line 366 of file RNTupleModel.hxx. ◆ GetToken(). ROOT::Experimental::REntry::RFieldToken ROOT::Experimental::RNTupleModel::GetToken ; (; std::string_view ; fieldName); const. Creates a token to be used in REntry methods to address a field present in the entry. ; Definition at line 470 of file RNTupleModel.cxx. ◆ IsBare(). bool ROOT::Experimental::RNTupleModel::IsBare ; (; ); const. inline . Definition at line 364 of file RNTupleModel.hxx. ◆ IsFrozen(). bool ROOT::Experimental::RNT,MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleModel.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleModel.html:18542,Security,access,accessed,18542," the model is null.Definition RNTupleWriter.cxx:71; ptTPaveText * ptDefinition entrylist_figure1.C:7; writerDefinition writer.py:1; vecDefinition civetweb.c:1855; Example: create a field with an initial value #include <ROOT/RNTupleModel.hxx>; using ROOT::Experimental::RNTupleModel;; ; auto model = RNTupleModel::Create();; // pt's initial value is 42.0; auto pt = model->MakeField<float>(""pt"", 42.0);; Example: create a field with a description #include <ROOT/RNTupleModel.hxx>; using ROOT::Experimental::RNTupleModel;; ; auto model = RNTupleModel::Create();; auto hadronFlavour = model->MakeField<float>({; ""hadronFlavour"", ""flavour from hadron ghost clustering""; });. Definition at line 295 of file RNTupleModel.hxx. ◆ operator=(). RNTupleModel & ROOT::Experimental::RNTupleModel::operator= ; (; const RNTupleModel & ; ). delete . ◆ RegisterSubfield(). void ROOT::Experimental::RNTupleModel::RegisterSubfield ; (; std::string_view ; qualifiedFieldName). Register a subfield so it can be accessed directly from entries belonging to the model. ; Because registering a subfield does not fundamentally change the model, previously created entries will not be invalidated, nor modified in any way; a registered subfield is merely an accessor added to the default entry (if present) and any entries created afterwards.; Using models with registered subfields for writing is not allowed. Attempting to do so will result in an exception.; Throws an exception if the provided subfield could not be found in the model. ; Definition at line 335 of file RNTupleModel.cxx. ◆ SetDescription(). void ROOT::Experimental::RNTupleModel::SetDescription ; (; std::string_view ; description). Definition at line 512 of file RNTupleModel.cxx. ◆ Unfreeze(). void ROOT::Experimental::RNTupleModel::Unfreeze ; (; ). Definition at line 493 of file RNTupleModel.cxx. Friends And Related Symbol Documentation. ◆ Internal::GetFieldZeroOfModel. RFieldZero & Internal::GetFieldZeroOfModel ; (; RNTupleModel & ; ). friend . ◆ Int",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleModel.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleModel.html:18783,Security,access,accessor,18783,"a field with an initial value #include <ROOT/RNTupleModel.hxx>; using ROOT::Experimental::RNTupleModel;; ; auto model = RNTupleModel::Create();; // pt's initial value is 42.0; auto pt = model->MakeField<float>(""pt"", 42.0);; Example: create a field with a description #include <ROOT/RNTupleModel.hxx>; using ROOT::Experimental::RNTupleModel;; ; auto model = RNTupleModel::Create();; auto hadronFlavour = model->MakeField<float>({; ""hadronFlavour"", ""flavour from hadron ghost clustering""; });. Definition at line 295 of file RNTupleModel.hxx. ◆ operator=(). RNTupleModel & ROOT::Experimental::RNTupleModel::operator= ; (; const RNTupleModel & ; ). delete . ◆ RegisterSubfield(). void ROOT::Experimental::RNTupleModel::RegisterSubfield ; (; std::string_view ; qualifiedFieldName). Register a subfield so it can be accessed directly from entries belonging to the model. ; Because registering a subfield does not fundamentally change the model, previously created entries will not be invalidated, nor modified in any way; a registered subfield is merely an accessor added to the default entry (if present) and any entries created afterwards.; Using models with registered subfields for writing is not allowed. Attempting to do so will result in an exception.; Throws an exception if the provided subfield could not be found in the model. ; Definition at line 335 of file RNTupleModel.cxx. ◆ SetDescription(). void ROOT::Experimental::RNTupleModel::SetDescription ; (; std::string_view ; description). Definition at line 512 of file RNTupleModel.cxx. ◆ Unfreeze(). void ROOT::Experimental::RNTupleModel::Unfreeze ; (; ). Definition at line 493 of file RNTupleModel.cxx. Friends And Related Symbol Documentation. ◆ Internal::GetFieldZeroOfModel. RFieldZero & Internal::GetFieldZeroOfModel ; (; RNTupleModel & ; ). friend . ◆ Internal::GetProjectedFieldsOfModel. Internal::RProjectedFields & Internal::GetProjectedFieldsOfModel ; (; RNTupleModel & ; ). friend . Member Data Documentation. ◆ fDefaultEntry. std",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleModel.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleModel.html:5495,Usability,simpl,simple,5495,"lue=true) const;  Add a subfield to the provided entry. ;  ; void EnsureNotBare () const;  Throws an RException if fDefaultEntry is nullptr. ;  ; void EnsureNotFrozen () const;  Throws an RException if fFrozen is true. ;  ; void EnsureValidFieldName (std::string_view fieldName);  Checks that user-provided field names are valid in the context of this NTuple model. ;  ; RFieldBase * FindField (std::string_view fieldName) const;  The field name can be a top-level field or a nested field. Returns nullptr if the field is not in the model. ;  . Private Attributes; std::unique_ptr< REntry > fDefaultEntry;  Contains field values corresponding to the created top-level fields, as well as registered subfields. ;  ; std::string fDescription;  Free text set by the user. ;  ; std::unordered_set< std::string > fFieldNames;  Keeps track of which field names are taken, including projected field names. ;  ; std::unique_ptr< RFieldZero > fFieldZero;  Hierarchy of fields consisting of simple types and collections (sub trees) ;  ; bool fIsFrozen = false;  Changed by Freeze() / Unfreeze() and by the RUpdater. ;  ; std::uint64_t fModelId = 0;  Every model has a unique ID to distinguish it from other models. ;  ; std::unique_ptr< Internal::RProjectedFields > fProjectedFields;  The set of projected top-level fields. ;  ; std::unordered_set< std::string > fRegisteredSubfields;  Keeps track of which subfields have been registered to be included in entries belonging to this model. ;  ; std::uint64_t fSchemaId = 0;  Models have a separate schema ID to remember that the clone of a frozen model still has the same schema. ;  . Friends; RFieldZero & Internal::GetFieldZeroOfModel (RNTupleModel &);  ; Internal::RProjectedFields & Internal::GetProjectedFieldsOfModel (RNTupleModel &);  . #include <ROOT/RNTupleModel.hxx>; Member Typedef Documentation. ◆ FieldMappingFunc_t. using ROOT::Experimental::RNTupleModel::FieldMappingFunc_t = std::function<std::string(const std::string &)>. User provided function ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleModel.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleModel.html:20493,Usability,simpl,simple,20493,"NTupleModel & ; ). friend . ◆ Internal::GetProjectedFieldsOfModel. Internal::RProjectedFields & Internal::GetProjectedFieldsOfModel ; (; RNTupleModel & ; ). friend . Member Data Documentation. ◆ fDefaultEntry. std::unique_ptr<REntry> ROOT::Experimental::RNTupleModel::fDefaultEntry. private . Contains field values corresponding to the created top-level fields, as well as registered subfields. ; Definition at line 200 of file RNTupleModel.hxx. ◆ fDescription. std::string ROOT::Experimental::RNTupleModel::fDescription. private . Free text set by the user. ; Definition at line 204 of file RNTupleModel.hxx. ◆ fFieldNames. std::unordered_set<std::string> ROOT::Experimental::RNTupleModel::fFieldNames. private . Keeps track of which field names are taken, including projected field names. ; Definition at line 202 of file RNTupleModel.hxx. ◆ fFieldZero. std::unique_ptr<RFieldZero> ROOT::Experimental::RNTupleModel::fFieldZero. private . Hierarchy of fields consisting of simple types and collections (sub trees) ; Definition at line 198 of file RNTupleModel.hxx. ◆ fIsFrozen. bool ROOT::Experimental::RNTupleModel::fIsFrozen = false. private . Changed by Freeze() / Unfreeze() and by the RUpdater. ; Definition at line 215 of file RNTupleModel.hxx. ◆ fModelId. std::uint64_t ROOT::Experimental::RNTupleModel::fModelId = 0. private . Every model has a unique ID to distinguish it from other models. ; Entries are linked to models via the ID. Cloned models get a new model ID. ; Definition at line 211 of file RNTupleModel.hxx. ◆ fProjectedFields. std::unique_ptr<Internal::RProjectedFields> ROOT::Experimental::RNTupleModel::fProjectedFields. private . The set of projected top-level fields. ; Definition at line 206 of file RNTupleModel.hxx. ◆ fRegisteredSubfields. std::unordered_set<std::string> ROOT::Experimental::RNTupleModel::fRegisteredSubfields. private . Keeps track of which subfields have been registered to be included in entries belonging to this model. ; Definition at line 208 of fi",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleModel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleModel.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleModel_1_1RUpdater.html:500,Deployability,update,updates,500,". ROOT: ROOT::Experimental::RNTupleModel::RUpdater Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Experimental::RNTupleModel::RUpdater Class Reference. ; A model is usually immutable after passing it to an RNTupleWriter. ; However, for the rare cases that require changing the model after the fact, RUpdater provides limited support for incremental updates, e.g. addition of new fields.; See RNTupleWriter::CreateModelUpdater() for an example. ; Definition at line 162 of file RNTupleModel.hxx. Public Member Functions;  RUpdater (RNTupleWriter &writer);  ;  ~RUpdater ();  ; void AddField (std::unique_ptr< RFieldBase > field);  ; RResult< void > AddProjectedField (std::unique_ptr< RFieldBase > field, FieldMappingFunc_t mapping);  ; void BeginUpdate ();  Begin a new set of alterations to the underlying model. ;  ; void CommitUpdate ();  Commit changes since the last call to BeginUpdate(). ;  ; template<typename T , typename... ArgsT> ; std::shared_ptr< T > MakeField (const NameWithDescription_t &fieldNameDesc, ArgsT &&...args);  . Private Attributes; std::uint64_t fNewModelId = 0;  The model ID after committing. ;  ; Internal::RNTupleModelChangeset fOpenChangeset;  ; RNTupleWriter & fWriter;  . #include <ROOT/RNTupleModel.hxx>; Constructor & Destructor Documentation. ◆ RUpdater(). ROOT::Experimental::RNTupleModel::RUpdater::RUpdater ; (; RNTupleWriter & ; writer). explicit . Definition at line 166 of file RNTupleModel.cxx. ◆ ~RUpdater(). ROOT::Experimental::RNTupleModel::RUpdater::~RUpdater ; (; ). inline . Definition at line 170 of file RNTupleModel.hxx. Member Function Documentation. ◆ AddField(). void ROOT::Experimental::RNTupleModel::RUpdater::AddField ; (; std::unique_ptr< RFieldBase > ; field). Definition at line 191 of file RNTupleModel.cxx. ◆ AddProjectedField(). ROOT::Experimental::RResult< void > ROOT::Experimental:",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleModel_1_1RUpdater.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleModel_1_1RUpdater.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleReader-members.html:239,Modifiability,inherit,inherited,239,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOT::Experimental::RNTupleReader Member List. This is the complete list of members for ROOT::Experimental::RNTupleReader, including all inherited members. begin()ROOT::Experimental::RNTupleReaderinline; Clone()ROOT::Experimental::RNTupleReaderinline; ConnectModel(RNTupleModel &model)ROOT::Experimental::RNTupleReaderprivate; EnableMetrics()ROOT::Experimental::RNTupleReaderinline; end()ROOT::Experimental::RNTupleReaderinline; fCachedDescriptorROOT::Experimental::RNTupleReaderprivate; fDisplayReaderROOT::Experimental::RNTupleReaderprivate; fMetricsROOT::Experimental::RNTupleReaderprivate; fModelROOT::Experimental::RNTupleReaderprivate; fSourceROOT::Experimental::RNTupleReaderprivate; fUnzipTasksROOT::Experimental::RNTupleReaderprivate; GetCollectionView(std::string_view fieldName)ROOT::Experimental::RNTupleReaderinline; GetCollectionView(DescriptorId_t fieldId)ROOT::Experimental::RNTupleReaderinline; GetDescriptor()ROOT::Experimental::RNTupleReader; GetDirectAccessView(std::string_view fieldName)ROOT::Experimental::RNTupleReaderinline; GetDirectAccessView(DescriptorId_t fieldId)ROOT::Experimental::RNTupleReaderinline; GetDisplayReader()ROOT::Experimental::RNTupleReaderprivate; GetEntryRange()ROOT::Experimental::RNTupleReaderinline; GetMetrics() constROOT::Experimental::RNTupleReaderinline; GetModel()ROOT::Experimental::RNTupleReader; GetNEntries() constROOT::Experimental::RNTupleReaderinline; GetView(std::string_view fieldName)ROOT::Experimental::RNTupleReaderinline; GetView(std::string_view fieldName, std::shared_ptr< T > objPtr)ROOT::Experimental::RNTupleReaderinline; GetView(std::string_view fieldName, T *rawPtr)ROOT::Experimental::RNTupleReaderinline; GetView(DescriptorId_t fieldId)ROOT::Experimental::RNTupleReaderinline; GetView(DescriptorId_t fieldId, std::shared_ptr< T > objPtr)ROOT::Experimental::RNTupleReaderinline; GetView(DescriptorId_t fieldId, T *rawPtr)RO",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleReader-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleReader-members.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html:13344,Availability,error,errors,13344,"ntryRange()) {; std::cout << i << "": "" << pt(i) << ""\n"";; }; ptTPaveText * ptDefinition entrylist_figure1.C:7. Definition at line 269 of file RNTupleReader.hxx. ◆ GetView() [5/6]. template<typename T > . RNTupleView< T > ROOT::Experimental::RNTupleReader::GetView ; (; std::string_view ; fieldName, . std::shared_ptr< T > ; objPtr . ). inline . Definition at line 275 of file RNTupleReader.hxx. ◆ GetView() [6/6]. template<typename T > . RNTupleView< T > ROOT::Experimental::RNTupleReader::GetView ; (; std::string_view ; fieldName, . T * ; rawPtr . ). inline . Definition at line 281 of file RNTupleReader.hxx. ◆ InitPageSource(). void ROOT::Experimental::RNTupleReader::InitPageSource ; (; bool ; enableMetrics). private . Definition at line 46 of file RNTupleReader.cxx. ◆ LoadEntry() [1/2]. void ROOT::Experimental::RNTupleReader::LoadEntry ; (; NTupleSize_t ; index). inline . Analogous to Fill(), fills the default entry of the model. ; Returns false at the end of the ntuple. On I/O errors, raises an exception. ; Definition at line 219 of file RNTupleReader.hxx. ◆ LoadEntry() [2/2]. void ROOT::Experimental::RNTupleReader::LoadEntry ; (; NTupleSize_t ; index, . REntry & ; entry . ). inline . Fills a user provided entry after checking that the entry has been instantiated from the ntuple model. ; Definition at line 229 of file RNTupleReader.hxx. ◆ Open() [1/4]. std::unique_ptr< ROOT::Experimental::RNTupleReader > ROOT::Experimental::RNTupleReader::Open ; (; const RNTuple & ; ntuple, . const RNTupleReadOptions & ; options = RNTupleReadOptions() . ). static . Definition at line 102 of file RNTupleReader.cxx. ◆ Open() [2/4]. std::unique_ptr< ROOT::Experimental::RNTupleReader > ROOT::Experimental::RNTupleReader::Open ; (; std::string_view ; ntupleName, . std::string_view ; storage, . const RNTupleReadOptions & ; options = RNTupleReadOptions() . ). static . Open an RNTuple for reading. ; Throws an RException if there is no RNTuple with the given name.; Example: open an RNTuple and ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html:5870,Energy Efficiency,schedul,scheduler,5870,"Source > source, const RNTupleReadOptions &options);  The model is generated from the ntuple metadata on storage. ;  ;  RNTupleReader (std::unique_ptr< RNTupleModel > model, std::unique_ptr< Internal::RPageSource > source, const RNTupleReadOptions &options);  ; void ConnectModel (RNTupleModel &model);  ; RNTupleReader * GetDisplayReader ();  ; void InitPageSource (bool enableMetrics);  ; DescriptorId_t RetrieveFieldId (std::string_view fieldName) const;  . Private Attributes; std::unique_ptr< RNTupleDescriptor > fCachedDescriptor;  The ntuple descriptor in the page source is protected by a read-write lock. ;  ; std::unique_ptr< RNTupleReader > fDisplayReader;  We use a dedicated on-demand reader for Show() and Scan(). ;  ; Detail::RNTupleMetrics fMetrics;  ; std::unique_ptr< RNTupleModel > fModel;  Needs to be destructed before fSource. ;  ; std::unique_ptr< Internal::RPageSource > fSource;  ; std::unique_ptr< Internal::RPageStorage::RTaskScheduler > fUnzipTasks;  Set as the page source's scheduler for parallel page decompression if IMT is on Needs to be destructed after the pages source is destructed (an thus be declared before) ;  . #include <ROOT/RNTupleReader.hxx>; Constructor & Destructor Documentation. ◆ RNTupleReader() [1/2]. ROOT::Experimental::RNTupleReader::RNTupleReader ; (; std::unique_ptr< RNTupleModel > ; model, . std::unique_ptr< Internal::RPageSource > ; source, . const RNTupleReadOptions & ; options . ). private . Definition at line 61 of file RNTupleReader.cxx. ◆ RNTupleReader() [2/2]. ROOT::Experimental::RNTupleReader::RNTupleReader ; (; std::unique_ptr< Internal::RPageSource > ; source, . const RNTupleReadOptions & ; options . ). explicitprivate . The model is generated from the ntuple metadata on storage. ; Definition at line 76 of file RNTupleReader.cxx. ◆ ~RNTupleReader(). ROOT::Experimental::RNTupleReader::~RNTupleReader ; (; ). default . Member Function Documentation. ◆ begin(). RIterator ROOT::Experimental::RNTupleReader::begin ; (; ). inli",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html:19355,Energy Efficiency,schedul,scheduler,19355," protected by a read-write lock. ; We don't expose that to the users of RNTupleReader::GetDescriptor(). Instead, if descriptor information is needed, we clone the descriptor. Using the descriptor's generation number, we know if the cached descriptor is stale. Retrieving descriptor data from an RNTupleReader is supposed to be for testing and information purposes, not on a hot code path. ; Definition at line 89 of file RNTupleReader.hxx. ◆ fDisplayReader. std::unique_ptr<RNTupleReader> ROOT::Experimental::RNTupleReader::fDisplayReader. private . We use a dedicated on-demand reader for Show() and Scan(). ; Printing data uses all the fields from the full model even if the analysis code uses only a subset of fields. The display reader is a clone of the original reader. ; Definition at line 83 of file RNTupleReader.hxx. ◆ fMetrics. Detail::RNTupleMetrics ROOT::Experimental::RNTupleReader::fMetrics. private . Definition at line 90 of file RNTupleReader.hxx. ◆ fModel. std::unique_ptr<RNTupleModel> ROOT::Experimental::RNTupleReader::fModel. private . Needs to be destructed before fSource. ; Definition at line 79 of file RNTupleReader.hxx. ◆ fSource. std::unique_ptr<Internal::RPageSource> ROOT::Experimental::RNTupleReader::fSource. private . Definition at line 77 of file RNTupleReader.hxx. ◆ fUnzipTasks. std::unique_ptr<Internal::RPageStorage::RTaskScheduler> ROOT::Experimental::RNTupleReader::fUnzipTasks. private . Set as the page source's scheduler for parallel page decompression if IMT is on Needs to be destructed after the pages source is destructed (an thus be declared before) ; Definition at line 75 of file RNTupleReader.hxx. Libraries for ROOT::Experimental::RNTupleReader:. [legend]; The documentation for this class was generated from the following files:; tree/ntuple/v7/inc/ROOT/RNTupleReader.hxx; tree/ntuple/v7/src/RNTupleReader.cxx. ROOTExperimentalRNTupleReader. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html:1691,Performance,perform,performance,1691,"that covers only a subset of the fields in the ntuple. The ntuple model is used when reading complete entries. Individual fields can be read as well by instantiating a tree view.; #include <ROOT/RNTupleReader.hxx>; using ROOT::Experimental::RNTupleReader;; ; #include <iostream>; ; auto ntuple = RNTupleReader::Open(""myNTuple"", ""some/file.root"");; std::cout << ""myNTuple has "" << ntuple->GetNEntries() << "" entries\n"";; RNTupleReader.hxx; ROOT::Experimental::RNTupleReaderAn RNTuple that is used to read data from storage.Definition RNTupleReader.hxx:71; ROOT::Experimental::RNTupleReader::Openstatic std::unique_ptr< RNTupleReader > Open(std::string_view ntupleName, std::string_view storage, const RNTupleReadOptions &options=RNTupleReadOptions())Open an RNTuple for reading.Definition RNTupleReader.cxx:94. Definition at line 71 of file RNTupleReader.hxx. Classes; class  RIterator;  . Public Member Functions;  ~RNTupleReader ();  ; RIterator begin ();  ; std::unique_ptr< RNTupleReader > Clone ();  ; void EnableMetrics ();  Enable performance measurements (decompression time, bytes read from storage, etc.) ;  ; RIterator end ();  ; RNTupleCollectionView GetCollectionView (DescriptorId_t fieldId);  ; RNTupleCollectionView GetCollectionView (std::string_view fieldName);  Raises an exception if: ;  ; const RNTupleDescriptor & GetDescriptor ();  Returns a cached copy of the page source descriptor. ;  ; template<typename T > ; RNTupleDirectAccessView< T > GetDirectAccessView (DescriptorId_t fieldId);  ; template<typename T > ; RNTupleDirectAccessView< T > GetDirectAccessView (std::string_view fieldName);  ; RNTupleGlobalRange GetEntryRange ();  Returns an iterator over the entry indices of the RNTuple. ;  ; const Detail::RNTupleMetrics & GetMetrics () const;  ; const RNTupleModel & GetModel ();  ; NTupleSize_t GetNEntries () const;  ; template<typename T > ; RNTupleView< T > GetView (DescriptorId_t fieldId);  ; template<typename T > ; RNTupleView< T > GetView (DescriptorId_t field",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html:2018,Performance,cache,cached,2018,"#include <iostream>; ; auto ntuple = RNTupleReader::Open(""myNTuple"", ""some/file.root"");; std::cout << ""myNTuple has "" << ntuple->GetNEntries() << "" entries\n"";; RNTupleReader.hxx; ROOT::Experimental::RNTupleReaderAn RNTuple that is used to read data from storage.Definition RNTupleReader.hxx:71; ROOT::Experimental::RNTupleReader::Openstatic std::unique_ptr< RNTupleReader > Open(std::string_view ntupleName, std::string_view storage, const RNTupleReadOptions &options=RNTupleReadOptions())Open an RNTuple for reading.Definition RNTupleReader.cxx:94. Definition at line 71 of file RNTupleReader.hxx. Classes; class  RIterator;  . Public Member Functions;  ~RNTupleReader ();  ; RIterator begin ();  ; std::unique_ptr< RNTupleReader > Clone ();  ; void EnableMetrics ();  Enable performance measurements (decompression time, bytes read from storage, etc.) ;  ; RIterator end ();  ; RNTupleCollectionView GetCollectionView (DescriptorId_t fieldId);  ; RNTupleCollectionView GetCollectionView (std::string_view fieldName);  Raises an exception if: ;  ; const RNTupleDescriptor & GetDescriptor ();  Returns a cached copy of the page source descriptor. ;  ; template<typename T > ; RNTupleDirectAccessView< T > GetDirectAccessView (DescriptorId_t fieldId);  ; template<typename T > ; RNTupleDirectAccessView< T > GetDirectAccessView (std::string_view fieldName);  ; RNTupleGlobalRange GetEntryRange ();  Returns an iterator over the entry indices of the RNTuple. ;  ; const Detail::RNTupleMetrics & GetMetrics () const;  ; const RNTupleModel & GetModel ();  ; NTupleSize_t GetNEntries () const;  ; template<typename T > ; RNTupleView< T > GetView (DescriptorId_t fieldId);  ; template<typename T > ; RNTupleView< T > GetView (DescriptorId_t fieldId, std::shared_ptr< T > objPtr);  ; template<typename T > ; RNTupleView< T > GetView (DescriptorId_t fieldId, T *rawPtr);  ; template<typename T > ; RNTupleView< T > GetView (std::string_view fieldName);  Provides access to an individual field that can conta",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html:7330,Performance,perform,performance,7330,"r.cxx. ◆ RNTupleReader() [2/2]. ROOT::Experimental::RNTupleReader::RNTupleReader ; (; std::unique_ptr< Internal::RPageSource > ; source, . const RNTupleReadOptions & ; options . ). explicitprivate . The model is generated from the ntuple metadata on storage. ; Definition at line 76 of file RNTupleReader.cxx. ◆ ~RNTupleReader(). ROOT::Experimental::RNTupleReader::~RNTupleReader ; (; ). default . Member Function Documentation. ◆ begin(). RIterator ROOT::Experimental::RNTupleReader::begin ; (; ). inline . Definition at line 342 of file RNTupleReader.hxx. ◆ Clone(). std::unique_ptr< RNTupleReader > ROOT::Experimental::RNTupleReader::Clone ; (; ). inline . Definition at line 167 of file RNTupleReader.hxx. ◆ ConnectModel(). void ROOT::Experimental::RNTupleReader::ConnectModel ; (; RNTupleModel & ; model). private . Definition at line 28 of file RNTupleReader.cxx. ◆ EnableMetrics(). void ROOT::Experimental::RNTupleReader::EnableMetrics ; (; ). inline . Enable performance measurements (decompression time, bytes read from storage, etc.) ; Example: inspect the reader metrics after loading every entry #include <ROOT/RNTupleReader.hxx>; using ROOT::Experimental::ENTupleInfo;; using ROOT::Experimental::RNTupleReader;; ; #include <iostream>; ; auto ntuple = RNTupleReader::Open(""myNTuple"", ""some/file.root"");; // metrics must be turned on beforehand; ntuple->EnableMetrics();; ; for (auto i : ntuple->GetEntryRange()) {; ntuple->LoadEntry(i);; }; ntuple->PrintInfo(ENTupleInfo::kMetrics);; ROOT::Experimental::RNTupleReader::GetEntryRangeRNTupleGlobalRange GetEntryRange()Returns an iterator over the entry indices of the RNTuple.Definition RNTupleReader.hxx:246; ROOT::Experimental::ENTupleInfoENTupleInfoListing of the different options that can be printed by RNTupleReader::GetInfo()Definition RNTupleReader.hxx:43; ROOT::Experimental::ENTupleInfo::kMetrics@ kMetrics. Definition at line 364 of file RNTupleReader.hxx. ◆ end(). RIterator ROOT::Experimental::RNTupleReader::end ; (; ). inline ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html:7451,Performance,load,loading,7451,"::unique_ptr< Internal::RPageSource > ; source, . const RNTupleReadOptions & ; options . ). explicitprivate . The model is generated from the ntuple metadata on storage. ; Definition at line 76 of file RNTupleReader.cxx. ◆ ~RNTupleReader(). ROOT::Experimental::RNTupleReader::~RNTupleReader ; (; ). default . Member Function Documentation. ◆ begin(). RIterator ROOT::Experimental::RNTupleReader::begin ; (; ). inline . Definition at line 342 of file RNTupleReader.hxx. ◆ Clone(). std::unique_ptr< RNTupleReader > ROOT::Experimental::RNTupleReader::Clone ; (; ). inline . Definition at line 167 of file RNTupleReader.hxx. ◆ ConnectModel(). void ROOT::Experimental::RNTupleReader::ConnectModel ; (; RNTupleModel & ; model). private . Definition at line 28 of file RNTupleReader.cxx. ◆ EnableMetrics(). void ROOT::Experimental::RNTupleReader::EnableMetrics ; (; ). inline . Enable performance measurements (decompression time, bytes read from storage, etc.) ; Example: inspect the reader metrics after loading every entry #include <ROOT/RNTupleReader.hxx>; using ROOT::Experimental::ENTupleInfo;; using ROOT::Experimental::RNTupleReader;; ; #include <iostream>; ; auto ntuple = RNTupleReader::Open(""myNTuple"", ""some/file.root"");; // metrics must be turned on beforehand; ntuple->EnableMetrics();; ; for (auto i : ntuple->GetEntryRange()) {; ntuple->LoadEntry(i);; }; ntuple->PrintInfo(ENTupleInfo::kMetrics);; ROOT::Experimental::RNTupleReader::GetEntryRangeRNTupleGlobalRange GetEntryRange()Returns an iterator over the entry indices of the RNTuple.Definition RNTupleReader.hxx:246; ROOT::Experimental::ENTupleInfoENTupleInfoListing of the different options that can be printed by RNTupleReader::GetInfo()Definition RNTupleReader.hxx:43; ROOT::Experimental::ENTupleInfo::kMetrics@ kMetrics. Definition at line 364 of file RNTupleReader.hxx. ◆ end(). RIterator ROOT::Experimental::RNTupleReader::end ; (; ). inline . Definition at line 343 of file RNTupleReader.hxx. ◆ GetCollectionView() [1/2]. RNTupleC",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html:9043,Performance,cache,cached,9043,"leInfoENTupleInfoListing of the different options that can be printed by RNTupleReader::GetInfo()Definition RNTupleReader.hxx:43; ROOT::Experimental::ENTupleInfo::kMetrics@ kMetrics. Definition at line 364 of file RNTupleReader.hxx. ◆ end(). RIterator ROOT::Experimental::RNTupleReader::end ; (; ). inline . Definition at line 343 of file RNTupleReader.hxx. ◆ GetCollectionView() [1/2]. RNTupleCollectionView ROOT::Experimental::RNTupleReader::GetCollectionView ; (; DescriptorId_t ; fieldId). inline . Definition at line 337 of file RNTupleReader.hxx. ◆ GetCollectionView() [2/2]. RNTupleCollectionView ROOT::Experimental::RNTupleReader::GetCollectionView ; (; std::string_view ; fieldName). inline . Raises an exception if: . there is no field with the given name or,; the field is not a collection . Definition at line 327 of file RNTupleReader.hxx. ◆ GetDescriptor(). const ROOT::Experimental::RNTupleDescriptor & ROOT::Experimental::RNTupleReader::GetDescriptor ; (; ). Returns a cached copy of the page source descriptor. ; The returned pointer remains valid until the next call to LoadEntry or to any of the views returned from the reader. ; Definition at line 230 of file RNTupleReader.cxx. ◆ GetDirectAccessView() [1/2]. template<typename T > . RNTupleDirectAccessView< T > ROOT::Experimental::RNTupleReader::GetDirectAccessView ; (; DescriptorId_t ; fieldId). inline . Definition at line 317 of file RNTupleReader.hxx. ◆ GetDirectAccessView() [2/2]. template<typename T > . RNTupleDirectAccessView< T > ROOT::Experimental::RNTupleReader::GetDirectAccessView ; (; std::string_view ; fieldName). inline . Definition at line 311 of file RNTupleReader.hxx. ◆ GetDisplayReader(). ROOT::Experimental::RNTupleReader * ROOT::Experimental::RNTupleReader::GetDisplayReader ; (; ). private . Definition at line 201 of file RNTupleReader.cxx. ◆ GetEntryRange(). RNTupleGlobalRange ROOT::Experimental::RNTupleReader::GetEntryRange ; (; ). inline . Returns an iterator over the entry indices of the RNTupl",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html:18132,Performance,cache,cached,18132,".cxx. ◆ RetrieveFieldId(). ROOT::Experimental::DescriptorId_t ROOT::Experimental::RNTupleReader::RetrieveFieldId ; (; std::string_view ; fieldName); const. private . Definition at line 238 of file RNTupleReader.cxx. ◆ Show(). void ROOT::Experimental::RNTupleReader::Show ; (; NTupleSize_t ; index, . std::ostream & ; output = std::cout . ). Shows the values of the i-th entry/row, starting with 0 for the first entry. ; By default, prints the output in JSON format. Uses the visitor pattern to traverse through each field of the given entry. ; Definition at line 208 of file RNTupleReader.cxx. Member Data Documentation. ◆ fCachedDescriptor. std::unique_ptr<RNTupleDescriptor> ROOT::Experimental::RNTupleReader::fCachedDescriptor. private . The ntuple descriptor in the page source is protected by a read-write lock. ; We don't expose that to the users of RNTupleReader::GetDescriptor(). Instead, if descriptor information is needed, we clone the descriptor. Using the descriptor's generation number, we know if the cached descriptor is stale. Retrieving descriptor data from an RNTupleReader is supposed to be for testing and information purposes, not on a hot code path. ; Definition at line 89 of file RNTupleReader.hxx. ◆ fDisplayReader. std::unique_ptr<RNTupleReader> ROOT::Experimental::RNTupleReader::fDisplayReader. private . We use a dedicated on-demand reader for Show() and Scan(). ; Printing data uses all the fields from the full model even if the analysis code uses only a subset of fields. The display reader is a clone of the original reader. ; Definition at line 83 of file RNTupleReader.hxx. ◆ fMetrics. Detail::RNTupleMetrics ROOT::Experimental::RNTupleReader::fMetrics. private . Definition at line 90 of file RNTupleReader.hxx. ◆ fModel. std::unique_ptr<RNTupleModel> ROOT::Experimental::RNTupleReader::fModel. private . Needs to be destructed before fSource. ; Definition at line 79 of file RNTupleReader.hxx. ◆ fSource. std::unique_ptr<Internal::RPageSource> ROOT::Experimental:",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html:2869,Security,access,access,2869,"d EnableMetrics ();  Enable performance measurements (decompression time, bytes read from storage, etc.) ;  ; RIterator end ();  ; RNTupleCollectionView GetCollectionView (DescriptorId_t fieldId);  ; RNTupleCollectionView GetCollectionView (std::string_view fieldName);  Raises an exception if: ;  ; const RNTupleDescriptor & GetDescriptor ();  Returns a cached copy of the page source descriptor. ;  ; template<typename T > ; RNTupleDirectAccessView< T > GetDirectAccessView (DescriptorId_t fieldId);  ; template<typename T > ; RNTupleDirectAccessView< T > GetDirectAccessView (std::string_view fieldName);  ; RNTupleGlobalRange GetEntryRange ();  Returns an iterator over the entry indices of the RNTuple. ;  ; const Detail::RNTupleMetrics & GetMetrics () const;  ; const RNTupleModel & GetModel ();  ; NTupleSize_t GetNEntries () const;  ; template<typename T > ; RNTupleView< T > GetView (DescriptorId_t fieldId);  ; template<typename T > ; RNTupleView< T > GetView (DescriptorId_t fieldId, std::shared_ptr< T > objPtr);  ; template<typename T > ; RNTupleView< T > GetView (DescriptorId_t fieldId, T *rawPtr);  ; template<typename T > ; RNTupleView< T > GetView (std::string_view fieldName);  Provides access to an individual field that can contain either a scalar value or a collection, e.g. ;  ; template<typename T > ; RNTupleView< T > GetView (std::string_view fieldName, std::shared_ptr< T > objPtr);  ; template<typename T > ; RNTupleView< T > GetView (std::string_view fieldName, T *rawPtr);  ; void LoadEntry (NTupleSize_t index);  Analogous to Fill(), fills the default entry of the model. ;  ; void LoadEntry (NTupleSize_t index, REntry &entry);  Fills a user provided entry after checking that the entry has been instantiated from the ntuple model. ;  ; void PrintInfo (const ENTupleInfo what=ENTupleInfo::kSummary, std::ostream &output=std::cout) const;  Prints a detailed summary of the ntuple, including a list of fields. ;  ; void Show (NTupleSize_t index, std::ostream &output=std:",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html:11730,Security,access,access,11730,"upleReader.cxx. ◆ GetNEntries(). NTupleSize_t ROOT::Experimental::RNTupleReader::GetNEntries ; (; ); const. inline . Definition at line 175 of file RNTupleReader.hxx. ◆ GetView() [1/6]. template<typename T > . RNTupleView< T > ROOT::Experimental::RNTupleReader::GetView ; (; DescriptorId_t ; fieldId). inline . Definition at line 287 of file RNTupleReader.hxx. ◆ GetView() [2/6]. template<typename T > . RNTupleView< T > ROOT::Experimental::RNTupleReader::GetView ; (; DescriptorId_t ; fieldId, . std::shared_ptr< T > ; objPtr . ). inline . Definition at line 295 of file RNTupleReader.hxx. ◆ GetView() [3/6]. template<typename T > . RNTupleView< T > ROOT::Experimental::RNTupleReader::GetView ; (; DescriptorId_t ; fieldId, . T * ; rawPtr . ). inline . Definition at line 303 of file RNTupleReader.hxx. ◆ GetView() [4/6]. template<typename T > . RNTupleView< T > ROOT::Experimental::RNTupleReader::GetView ; (; std::string_view ; fieldName). inline . Provides access to an individual field that can contain either a scalar value or a collection, e.g. ; GetView<double>(""particles.pt"") or GetView<std::vector<double>>(""particle""). It can as well be the index field of a collection itself, like GetView<NTupleSize_t>(""particle"").; Raises an exception if there is no field with the given name.; Example: iterate over a field named ""pt"" of type float #include <ROOT/RNTupleReader.hxx>; using ROOT::Experimental::RNTupleReader;; ; #include <iostream>; ; auto ntuple = RNTupleReader::Open(""myNTuple"", ""some/file.root"");; auto pt = ntuple->GetView<float>(""pt"");; ; for (auto i : ntuple->GetEntryRange()) {; std::cout << i << "": "" << pt(i) << ""\n"";; }; ptTPaveText * ptDefinition entrylist_figure1.C:7. Definition at line 269 of file RNTupleReader.hxx. ◆ GetView() [5/6]. template<typename T > . RNTupleView< T > ROOT::Experimental::RNTupleReader::GetView ; (; std::string_view ; fieldName, . std::shared_ptr< T > ; objPtr . ). inline . Definition at line 275 of file RNTupleReader.hxx. ◆ GetView() [6/6]. t",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html:17944,Security,expose,expose,17944,"l::ENTupleInfo::kStorageDetails@ kStorageDetails; For use of ENTupleInfo::kMetrics, see EnableMetrics. ; Definition at line 137 of file RNTupleReader.cxx. ◆ RetrieveFieldId(). ROOT::Experimental::DescriptorId_t ROOT::Experimental::RNTupleReader::RetrieveFieldId ; (; std::string_view ; fieldName); const. private . Definition at line 238 of file RNTupleReader.cxx. ◆ Show(). void ROOT::Experimental::RNTupleReader::Show ; (; NTupleSize_t ; index, . std::ostream & ; output = std::cout . ). Shows the values of the i-th entry/row, starting with 0 for the first entry. ; By default, prints the output in JSON format. Uses the visitor pattern to traverse through each field of the given entry. ; Definition at line 208 of file RNTupleReader.cxx. Member Data Documentation. ◆ fCachedDescriptor. std::unique_ptr<RNTupleDescriptor> ROOT::Experimental::RNTupleReader::fCachedDescriptor. private . The ntuple descriptor in the page source is protected by a read-write lock. ; We don't expose that to the users of RNTupleReader::GetDescriptor(). Instead, if descriptor information is needed, we clone the descriptor. Using the descriptor's generation number, we know if the cached descriptor is stale. Retrieving descriptor data from an RNTupleReader is supposed to be for testing and information purposes, not on a hot code path. ; Definition at line 89 of file RNTupleReader.hxx. ◆ fDisplayReader. std::unique_ptr<RNTupleReader> ROOT::Experimental::RNTupleReader::fDisplayReader. private . We use a dedicated on-demand reader for Show() and Scan(). ; Printing data uses all the fields from the full model even if the analysis code uses only a subset of fields. The display reader is a clone of the original reader. ; Definition at line 83 of file RNTupleReader.hxx. ◆ fMetrics. Detail::RNTupleMetrics ROOT::Experimental::RNTupleReader::fMetrics. private . Definition at line 90 of file RNTupleReader.hxx. ◆ fModel. std::unique_ptr<RNTupleModel> ROOT::Experimental::RNTupleReader::fModel. private . Needs to b",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html:18231,Testability,test,testing,18231,"eldId ; (; std::string_view ; fieldName); const. private . Definition at line 238 of file RNTupleReader.cxx. ◆ Show(). void ROOT::Experimental::RNTupleReader::Show ; (; NTupleSize_t ; index, . std::ostream & ; output = std::cout . ). Shows the values of the i-th entry/row, starting with 0 for the first entry. ; By default, prints the output in JSON format. Uses the visitor pattern to traverse through each field of the given entry. ; Definition at line 208 of file RNTupleReader.cxx. Member Data Documentation. ◆ fCachedDescriptor. std::unique_ptr<RNTupleDescriptor> ROOT::Experimental::RNTupleReader::fCachedDescriptor. private . The ntuple descriptor in the page source is protected by a read-write lock. ; We don't expose that to the users of RNTupleReader::GetDescriptor(). Instead, if descriptor information is needed, we clone the descriptor. Using the descriptor's generation number, we know if the cached descriptor is stale. Retrieving descriptor data from an RNTupleReader is supposed to be for testing and information purposes, not on a hot code path. ; Definition at line 89 of file RNTupleReader.hxx. ◆ fDisplayReader. std::unique_ptr<RNTupleReader> ROOT::Experimental::RNTupleReader::fDisplayReader. private . We use a dedicated on-demand reader for Show() and Scan(). ; Printing data uses all the fields from the full model even if the analysis code uses only a subset of fields. The display reader is a clone of the original reader. ; Definition at line 83 of file RNTupleReader.hxx. ◆ fMetrics. Detail::RNTupleMetrics ROOT::Experimental::RNTupleReader::fMetrics. private . Definition at line 90 of file RNTupleReader.hxx. ◆ fModel. std::unique_ptr<RNTupleModel> ROOT::Experimental::RNTupleReader::fModel. private . Needs to be destructed before fSource. ; Definition at line 79 of file RNTupleReader.hxx. ◆ fSource. std::unique_ptr<Internal::RPageSource> ROOT::Experimental::RNTupleReader::fSource. private . Definition at line 77 of file RNTupleReader.hxx. ◆ fUnzipTasks. std::uni",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleReader.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleView.html:1000,Modifiability,inherit,inherited,1000,"ster. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; ROOT::Experimental::RNTupleView< T > Class Template ReferenceNTuple-related classes. ; template<typename T>; class ROOT::Experimental::RNTupleView< T >An RNTupleView for a known type. ; An RNTupleView that can be used when the type is unknown at compile time.; See RNTupleViewBase. ; Definition at line 206 of file RNTupleView.hxx. Public Member Functions;  RNTupleView (const RNTupleView &other)=delete;  ;  RNTupleView (RNTupleView &&other)=default;  ;  ~RNTupleView ()=default;  ; const T & operator() (NTupleSize_t globalIndex);  ; const T & operator() (RClusterIndex clusterIndex);  ; RNTupleView & operator= (const RNTupleView &other)=delete;  ; RNTupleView & operator= (RNTupleView &&other)=default;  ;  Public Member Functions inherited from ROOT::Experimental::RNTupleViewBase< T >;  RNTupleViewBase (const RNTupleViewBase &other)=delete;  ;  RNTupleViewBase (RNTupleViewBase &&other)=default;  ;  ~RNTupleViewBase ()=default;  ; void Bind (std::shared_ptr< T > objPtr);  ; void BindRawPtr (T *rawPtr);  ; void EmplaceNew ();  ; const RFieldBase & GetField () const;  ; RNTupleGlobalRange GetFieldRange () const;  ; const RFieldBase::RValue & GetValue () const;  ; RNTupleViewBase & operator= (const RNTupleViewBase &other)=delete;  ; RNTupleViewBase & operator= (RNTupleViewBase &&other)=default;  . Protected Member Functions;  RNTupleView (std::unique_ptr< RFieldBase > field, RNTupleGlobalRange range);  ;  RNTupleView (std::unique_ptr< RFieldBase > field, RNTupleGlobalRange range, std::shared_ptr< T > objPtr);  ;  RNTupleView (std::unique_ptr< RFieldBase > field, RNTupleGlobalRange range, T *rawPtr);  ;  Protected Member Functions inherited from ROOT::Experimental::RNTupleViewBase< T >;  RNTupleViewBase (std::unique_ptr< RFieldBase > field, RNTupleGlobalRange range);  ;  RNTupleViewBase (std::unique",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleView.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleView.html:1914,Modifiability,inherit,inherited,1914,"TupleView & operator= (RNTupleView &&other)=default;  ;  Public Member Functions inherited from ROOT::Experimental::RNTupleViewBase< T >;  RNTupleViewBase (const RNTupleViewBase &other)=delete;  ;  RNTupleViewBase (RNTupleViewBase &&other)=default;  ;  ~RNTupleViewBase ()=default;  ; void Bind (std::shared_ptr< T > objPtr);  ; void BindRawPtr (T *rawPtr);  ; void EmplaceNew ();  ; const RFieldBase & GetField () const;  ; RNTupleGlobalRange GetFieldRange () const;  ; const RFieldBase::RValue & GetValue () const;  ; RNTupleViewBase & operator= (const RNTupleViewBase &other)=delete;  ; RNTupleViewBase & operator= (RNTupleViewBase &&other)=default;  . Protected Member Functions;  RNTupleView (std::unique_ptr< RFieldBase > field, RNTupleGlobalRange range);  ;  RNTupleView (std::unique_ptr< RFieldBase > field, RNTupleGlobalRange range, std::shared_ptr< T > objPtr);  ;  RNTupleView (std::unique_ptr< RFieldBase > field, RNTupleGlobalRange range, T *rawPtr);  ;  Protected Member Functions inherited from ROOT::Experimental::RNTupleViewBase< T >;  RNTupleViewBase (std::unique_ptr< RFieldBase > field, RNTupleGlobalRange range);  ;  RNTupleViewBase (std::unique_ptr< RFieldBase > field, RNTupleGlobalRange range, std::shared_ptr< T > objPtr);  ;  RNTupleViewBase (std::unique_ptr< RFieldBase > field, RNTupleGlobalRange range, T *rawPtr);  . Friends; class RNTupleCollectionView;  ; class RNTupleReader;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::Experimental::RNTupleViewBase< T >; static std::unique_ptr< RFieldBase > CreateField (DescriptorId_t fieldId, Internal::RPageSource &pageSource);  ;  Protected Attributes inherited from ROOT::Experimental::RNTupleViewBase< T >; std::unique_ptr< RFieldBase > fField;  ; RNTupleGlobalRange fFieldRange;  ; RFieldBase::RValue fValue;  . #include <ROOT/RNTupleView.hxx>. Inheritance diagram for ROOT::Experimental::RNTupleView< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Ope",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleView.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleView.html:2396,Modifiability,inherit,inherited,2396,"TupleViewBase &&other)=default;  . Protected Member Functions;  RNTupleView (std::unique_ptr< RFieldBase > field, RNTupleGlobalRange range);  ;  RNTupleView (std::unique_ptr< RFieldBase > field, RNTupleGlobalRange range, std::shared_ptr< T > objPtr);  ;  RNTupleView (std::unique_ptr< RFieldBase > field, RNTupleGlobalRange range, T *rawPtr);  ;  Protected Member Functions inherited from ROOT::Experimental::RNTupleViewBase< T >;  RNTupleViewBase (std::unique_ptr< RFieldBase > field, RNTupleGlobalRange range);  ;  RNTupleViewBase (std::unique_ptr< RFieldBase > field, RNTupleGlobalRange range, std::shared_ptr< T > objPtr);  ;  RNTupleViewBase (std::unique_ptr< RFieldBase > field, RNTupleGlobalRange range, T *rawPtr);  . Friends; class RNTupleCollectionView;  ; class RNTupleReader;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::Experimental::RNTupleViewBase< T >; static std::unique_ptr< RFieldBase > CreateField (DescriptorId_t fieldId, Internal::RPageSource &pageSource);  ;  Protected Attributes inherited from ROOT::Experimental::RNTupleViewBase< T >; std::unique_ptr< RFieldBase > fField;  ; RNTupleGlobalRange fFieldRange;  ; RFieldBase::RValue fValue;  . #include <ROOT/RNTupleView.hxx>. Inheritance diagram for ROOT::Experimental::RNTupleView< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RNTupleView() [1/5]. template<typename T > . ROOT::Experimental::RNTupleView< T >::RNTupleView ; (; std::unique_ptr< RFieldBase > ; field, . RNTupleGlobalRange ; range . ). inlineprotected . Definition at line 211 of file RNTupleView.hxx. ◆ RNTupleView() [2/5]. template<typename T > . ROOT::Experimental::RNTupleView< T >::RNTupleView ; (; std::unique_ptr< RFieldBase > ; field, . RNTupleGlobalRange ; range, . std::shared_ptr< T > ; objPtr . ). inlineprotected . Definition at line 216 of file RNTupleView.hxx. ◆ RNTupleView() [3/5]. template<typename T",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleView.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleView.html:2588,Modifiability,inherit,inherited,2588,"TupleViewBase &&other)=default;  . Protected Member Functions;  RNTupleView (std::unique_ptr< RFieldBase > field, RNTupleGlobalRange range);  ;  RNTupleView (std::unique_ptr< RFieldBase > field, RNTupleGlobalRange range, std::shared_ptr< T > objPtr);  ;  RNTupleView (std::unique_ptr< RFieldBase > field, RNTupleGlobalRange range, T *rawPtr);  ;  Protected Member Functions inherited from ROOT::Experimental::RNTupleViewBase< T >;  RNTupleViewBase (std::unique_ptr< RFieldBase > field, RNTupleGlobalRange range);  ;  RNTupleViewBase (std::unique_ptr< RFieldBase > field, RNTupleGlobalRange range, std::shared_ptr< T > objPtr);  ;  RNTupleViewBase (std::unique_ptr< RFieldBase > field, RNTupleGlobalRange range, T *rawPtr);  . Friends; class RNTupleCollectionView;  ; class RNTupleReader;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::Experimental::RNTupleViewBase< T >; static std::unique_ptr< RFieldBase > CreateField (DescriptorId_t fieldId, Internal::RPageSource &pageSource);  ;  Protected Attributes inherited from ROOT::Experimental::RNTupleViewBase< T >; std::unique_ptr< RFieldBase > fField;  ; RNTupleGlobalRange fFieldRange;  ; RFieldBase::RValue fValue;  . #include <ROOT/RNTupleView.hxx>. Inheritance diagram for ROOT::Experimental::RNTupleView< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RNTupleView() [1/5]. template<typename T > . ROOT::Experimental::RNTupleView< T >::RNTupleView ; (; std::unique_ptr< RFieldBase > ; field, . RNTupleGlobalRange ; range . ). inlineprotected . Definition at line 211 of file RNTupleView.hxx. ◆ RNTupleView() [2/5]. template<typename T > . ROOT::Experimental::RNTupleView< T >::RNTupleView ; (; std::unique_ptr< RFieldBase > ; field, . RNTupleGlobalRange ; range, . std::shared_ptr< T > ; objPtr . ). inlineprotected . Definition at line 216 of file RNTupleView.hxx. ◆ RNTupleView() [3/5]. template<typename T",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleView.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriteOptions.html:13076,Energy Efficiency,consumption,consumption,13076,"uned for a total write memory of around 300 MB per fill context. ; Definition at line 82 of file RNTupleWriteOptions.hxx. ◆ fUseBufferedWrite. bool ROOT::Experimental::RNTupleWriteOptions::fUseBufferedWrite = true. protected . Whether to use buffered writing (with RPageSinkBuf). ; This buffers compressed pages in memory, reorders them to keep pages of the same column adjacent, and coalesces the writes when committing a cluster. ; Definition at line 85 of file RNTupleWriteOptions.hxx. ◆ fUseDirectIO. bool ROOT::Experimental::RNTupleWriteOptions::fUseDirectIO = false. protected . Whether to use Direct I/O for writing. ; Note that this introduces alignment requirements that may very between filesystems and platforms. ; Definition at line 88 of file RNTupleWriteOptions.hxx. ◆ fUseImplicitMT. EImplicitMT ROOT::Experimental::RNTupleWriteOptions::fUseImplicitMT = EImplicitMT::kDefault. protected . Whether to use implicit multi-threading to compress pages. Only has an effect if buffered writing is turned on. ; Definition at line 93 of file RNTupleWriteOptions.hxx. ◆ fWriteBufferSize. std::size_t ROOT::Experimental::RNTupleWriteOptions::fWriteBufferSize = 4 * 1024 * 1024. protected . Buffer size to use for writing to files, must be a multiple of 4096 bytes. ; Testing suggests that 4MiB gives best performance (with Direct I/O) at a reasonable memory consumption. ; Definition at line 91 of file RNTupleWriteOptions.hxx. ◆ kDefaultMaxKeySize. constexpr std::uint64_t ROOT::Experimental::RNTupleWriteOptions::kDefaultMaxKeySize = 0x4000'0000. staticconstexpr . Definition at line 56 of file RNTupleWriteOptions.hxx. Libraries for ROOT::Experimental::RNTupleWriteOptions:. [legend]; The documentation for this class was generated from the following files:; tree/ntuple/v7/inc/ROOT/RNTupleWriteOptions.hxx; tree/ntuple/v7/src/RNTupleWriteOptions.cxx. ROOTExperimentalRNTupleWriteOptions. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleWriteOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriteOptions.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriteOptions.html:1558,Performance,optimiz,optimization,1558,"ence Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Attributes |; Protected Attributes |; List of all members ; ROOT::Experimental::RNTupleWriteOptions Class ReferenceNTuple-related classes. ; Common user-tunable settings for storing ntuples. ; All page sink classes need to support the common options. ; Definition at line 48 of file RNTupleWriteOptions.hxx. Public Types; enum class  EImplicitMT { kOff; , kDefault; };  . Public Member Functions; virtual ~RNTupleWriteOptions ()=default;  ; virtual std::unique_ptr< RNTupleWriteOptions > Clone () const;  ; std::size_t GetApproxZippedClusterSize () const;  ; int GetCompression () const;  ; bool GetEnablePageChecksums () const;  ; std::size_t GetInitialNElementsPerPage () const;  ; std::uint64_t GetMaxKeySize () const;  ; std::size_t GetMaxUnzippedClusterSize () const;  ; std::size_t GetMaxUnzippedPageSize () const;  ; std::size_t GetPageBufferBudget () const;  ; bool GetUseBufferedWrite () const;  ; bool GetUseDirectIO () const;  ; EImplicitMT GetUseImplicitMT () const;  ; std::size_t GetWriteBufferSize () const;  ; void SetApproxZippedClusterSize (std::size_t val);  ; void SetCompression (int val);  ; void SetCompression (RCompressionSetting::EAlgorithm::EValues algorithm, int compressionLevel);  ; void SetEnablePageChecksums (bool val);  Note that turning off page checksums will also turn off the same page merging optimization (see tuning.md) ;  ; void SetInitialNElementsPerPage (std::size_t val);  ; void SetMaxUnzippedClusterSize (std::size_t val);  ; void SetMaxUnzippedPageSize (std::size_t val);  ; void SetPageBufferBudget (std::size_t val);  ; void SetUseBufferedWrite (bool val);  ; void SetUseDirectIO (bool val);  ; void SetUseImplicitMT (EImplicitMT val);  ; void SetWriteBufferSize (std::size_t val);  . Static Public Attributes; static constexpr std::uint64_t kDefaultMaxKeySize = 0x4000'0000;  . Protected Attributes; std::size_t f",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleWriteOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriteOptions.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriteOptions.html:3329,Performance,multi-thread,multi-threading,3329,"f set, checksums will be calculated and written for every page. ;  ; std::size_t fInitialNElementsPerPage = 64;  Initially, columns start with a page large enough to hold the given number of elements. ;  ; std::uint64_t fMaxKeySize = kDefaultMaxKeySize;  Specifies the max size of a payload storeable into a single TKey. ;  ; std::size_t fMaxUnzippedClusterSize = 1024 * 1024 * 1024;  Memory limit for committing a cluster: with very high compression ratio, we need a limit on how large the I/O buffer can grow during writing. ;  ; std::size_t fMaxUnzippedPageSize = 1024 * 1024;  Pages can grow only to the given limit in bytes. ;  ; std::size_t fPageBufferBudget = 0;  The maximum size that the sum of all page buffers used for writing into a persistent sink are allowed to use. ;  ; bool fUseBufferedWrite = true;  Whether to use buffered writing (with RPageSinkBuf). ;  ; bool fUseDirectIO = false;  Whether to use Direct I/O for writing. ;  ; EImplicitMT fUseImplicitMT = EImplicitMT::kDefault;  Whether to use implicit multi-threading to compress pages. Only has an effect if buffered writing is turned on. ;  ; std::size_t fWriteBufferSize = 4 * 1024 * 1024;  Buffer size to use for writing to files, must be a multiple of 4096 bytes. ;  . #include <ROOT/RNTupleWriteOptions.hxx>. Inheritance diagram for ROOT::Experimental::RNTupleWriteOptions:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EImplicitMT. enum class ROOT::Experimental::RNTupleWriteOptions::EImplicitMT. strong . EnumeratorkOff ; kDefault . Definition at line 50 of file RNTupleWriteOptions.hxx. Constructor & Destructor Documentation. ◆ ~RNTupleWriteOptions(). virtual ROOT::Experimental::RNTupleWriteOptions::~RNTupleWriteOptions ; (; ). virtualdefault . Member Function Documentation. ◆ Clone(). std::unique_ptr< ROOT::Experimental::RNTupleWriteOptions > ROOT::Experimental::RNTupleWriteOptions::Clone ; (; ); const. virtual . Reimplement",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleWriteOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriteOptions.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriteOptions.html:7320,Performance,optimiz,optimization,7320,"finition at line 136 of file RNTupleWriteOptions.hxx. ◆ GetWriteBufferSize(). std::size_t ROOT::Experimental::RNTupleWriteOptions::GetWriteBufferSize ; (; ); const. inline . Definition at line 133 of file RNTupleWriteOptions.hxx. ◆ SetApproxZippedClusterSize(). void ROOT::Experimental::RNTupleWriteOptions::SetApproxZippedClusterSize ; (; std::size_t ; val). Definition at line 53 of file RNTupleWriteOptions.cxx. ◆ SetCompression() [1/2]. void ROOT::Experimental::RNTupleWriteOptions::SetCompression ; (; int ; val). inline . Definition at line 106 of file RNTupleWriteOptions.hxx. ◆ SetCompression() [2/2]. void ROOT::Experimental::RNTupleWriteOptions::SetCompression ; (; RCompressionSetting::EAlgorithm::EValues ; algorithm, . int ; compressionLevel . ). inline . Definition at line 107 of file RNTupleWriteOptions.hxx. ◆ SetEnablePageChecksums(). void ROOT::Experimental::RNTupleWriteOptions::SetEnablePageChecksums ; (; bool ; val). inline . Note that turning off page checksums will also turn off the same page merging optimization (see tuning.md) ; Definition at line 141 of file RNTupleWriteOptions.hxx. ◆ SetInitialNElementsPerPage(). void ROOT::Experimental::RNTupleWriteOptions::SetInitialNElementsPerPage ; (; std::size_t ; val). Definition at line 65 of file RNTupleWriteOptions.cxx. ◆ SetMaxUnzippedClusterSize(). void ROOT::Experimental::RNTupleWriteOptions::SetMaxUnzippedClusterSize ; (; std::size_t ; val). Definition at line 59 of file RNTupleWriteOptions.cxx. ◆ SetMaxUnzippedPageSize(). void ROOT::Experimental::RNTupleWriteOptions::SetMaxUnzippedPageSize ; (; std::size_t ; val). Definition at line 71 of file RNTupleWriteOptions.cxx. ◆ SetPageBufferBudget(). void ROOT::Experimental::RNTupleWriteOptions::SetPageBufferBudget ; (; std::size_t ; val). inline . Definition at line 125 of file RNTupleWriteOptions.hxx. ◆ SetUseBufferedWrite(). void ROOT::Experimental::RNTupleWriteOptions::SetUseBufferedWrite ; (; bool ; val). inline . Definition at line 128 of file RNTupleWrit",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleWriteOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriteOptions.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriteOptions.html:11713,Performance,tune,tuned,11713,"o, we need a limit on how large the I/O buffer can grow during writing. ; Definition at line 67 of file RNTupleWriteOptions.hxx. ◆ fMaxUnzippedPageSize. std::size_t ROOT::Experimental::RNTupleWriteOptions::fMaxUnzippedPageSize = 1024 * 1024. protected . Pages can grow only to the given limit in bytes. ; Definition at line 75 of file RNTupleWriteOptions.hxx. ◆ fPageBufferBudget. std::size_t ROOT::Experimental::RNTupleWriteOptions::fPageBufferBudget = 0. protected . The maximum size that the sum of all page buffers used for writing into a persistent sink are allowed to use. ; If set to zero, RNTuple will auto-adjust the budget based on the value of fApproxZippedClusterSize. If set manually, the size needs to be large enough to hold all initial page buffers. The total amount of memory for writing is larger, e.g. for the additional compressed buffers etc. Use RNTupleModel::EstimateWriteMemoryUsage() for the total estimated memory use for writing. The default values are tuned for a total write memory of around 300 MB per fill context. ; Definition at line 82 of file RNTupleWriteOptions.hxx. ◆ fUseBufferedWrite. bool ROOT::Experimental::RNTupleWriteOptions::fUseBufferedWrite = true. protected . Whether to use buffered writing (with RPageSinkBuf). ; This buffers compressed pages in memory, reorders them to keep pages of the same column adjacent, and coalesces the writes when committing a cluster. ; Definition at line 85 of file RNTupleWriteOptions.hxx. ◆ fUseDirectIO. bool ROOT::Experimental::RNTupleWriteOptions::fUseDirectIO = false. protected . Whether to use Direct I/O for writing. ; Note that this introduces alignment requirements that may very between filesystems and platforms. ; Definition at line 88 of file RNTupleWriteOptions.hxx. ◆ fUseImplicitMT. EImplicitMT ROOT::Experimental::RNTupleWriteOptions::fUseImplicitMT = EImplicitMT::kDefault. protected . Whether to use implicit multi-threading to compress pages. Only has an effect if buffered writing is turned on. ; De",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleWriteOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriteOptions.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriteOptions.html:12642,Performance,multi-thread,multi-threading,12642,"the total estimated memory use for writing. The default values are tuned for a total write memory of around 300 MB per fill context. ; Definition at line 82 of file RNTupleWriteOptions.hxx. ◆ fUseBufferedWrite. bool ROOT::Experimental::RNTupleWriteOptions::fUseBufferedWrite = true. protected . Whether to use buffered writing (with RPageSinkBuf). ; This buffers compressed pages in memory, reorders them to keep pages of the same column adjacent, and coalesces the writes when committing a cluster. ; Definition at line 85 of file RNTupleWriteOptions.hxx. ◆ fUseDirectIO. bool ROOT::Experimental::RNTupleWriteOptions::fUseDirectIO = false. protected . Whether to use Direct I/O for writing. ; Note that this introduces alignment requirements that may very between filesystems and platforms. ; Definition at line 88 of file RNTupleWriteOptions.hxx. ◆ fUseImplicitMT. EImplicitMT ROOT::Experimental::RNTupleWriteOptions::fUseImplicitMT = EImplicitMT::kDefault. protected . Whether to use implicit multi-threading to compress pages. Only has an effect if buffered writing is turned on. ; Definition at line 93 of file RNTupleWriteOptions.hxx. ◆ fWriteBufferSize. std::size_t ROOT::Experimental::RNTupleWriteOptions::fWriteBufferSize = 4 * 1024 * 1024. protected . Buffer size to use for writing to files, must be a multiple of 4096 bytes. ; Testing suggests that 4MiB gives best performance (with Direct I/O) at a reasonable memory consumption. ; Definition at line 91 of file RNTupleWriteOptions.hxx. ◆ kDefaultMaxKeySize. constexpr std::uint64_t ROOT::Experimental::RNTupleWriteOptions::kDefaultMaxKeySize = 0x4000'0000. staticconstexpr . Definition at line 56 of file RNTupleWriteOptions.hxx. Libraries for ROOT::Experimental::RNTupleWriteOptions:. [legend]; The documentation for this class was generated from the following files:; tree/ntuple/v7/inc/ROOT/RNTupleWriteOptions.hxx; tree/ntuple/v7/src/RNTupleWriteOptions.cxx. ROOTExperimentalRNTupleWriteOptions. ROOT master - Reference Guide Generat",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleWriteOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriteOptions.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriteOptions.html:13023,Performance,perform,performance,13023,"uned for a total write memory of around 300 MB per fill context. ; Definition at line 82 of file RNTupleWriteOptions.hxx. ◆ fUseBufferedWrite. bool ROOT::Experimental::RNTupleWriteOptions::fUseBufferedWrite = true. protected . Whether to use buffered writing (with RPageSinkBuf). ; This buffers compressed pages in memory, reorders them to keep pages of the same column adjacent, and coalesces the writes when committing a cluster. ; Definition at line 85 of file RNTupleWriteOptions.hxx. ◆ fUseDirectIO. bool ROOT::Experimental::RNTupleWriteOptions::fUseDirectIO = false. protected . Whether to use Direct I/O for writing. ; Note that this introduces alignment requirements that may very between filesystems and platforms. ; Definition at line 88 of file RNTupleWriteOptions.hxx. ◆ fUseImplicitMT. EImplicitMT ROOT::Experimental::RNTupleWriteOptions::fUseImplicitMT = EImplicitMT::kDefault. protected . Whether to use implicit multi-threading to compress pages. Only has an effect if buffered writing is turned on. ; Definition at line 93 of file RNTupleWriteOptions.hxx. ◆ fWriteBufferSize. std::size_t ROOT::Experimental::RNTupleWriteOptions::fWriteBufferSize = 4 * 1024 * 1024. protected . Buffer size to use for writing to files, must be a multiple of 4096 bytes. ; Testing suggests that 4MiB gives best performance (with Direct I/O) at a reasonable memory consumption. ; Definition at line 91 of file RNTupleWriteOptions.hxx. ◆ kDefaultMaxKeySize. constexpr std::uint64_t ROOT::Experimental::RNTupleWriteOptions::kDefaultMaxKeySize = 0x4000'0000. staticconstexpr . Definition at line 56 of file RNTupleWriteOptions.hxx. Libraries for ROOT::Experimental::RNTupleWriteOptions:. [legend]; The documentation for this class was generated from the following files:; tree/ntuple/v7/inc/ROOT/RNTupleWriteOptions.hxx; tree/ntuple/v7/src/RNTupleWriteOptions.cxx. ROOTExperimentalRNTupleWriteOptions. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleWriteOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriteOptions.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriteOptions.html:1507,Security,checksum,checksums,1507,"ence Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Attributes |; Protected Attributes |; List of all members ; ROOT::Experimental::RNTupleWriteOptions Class ReferenceNTuple-related classes. ; Common user-tunable settings for storing ntuples. ; All page sink classes need to support the common options. ; Definition at line 48 of file RNTupleWriteOptions.hxx. Public Types; enum class  EImplicitMT { kOff; , kDefault; };  . Public Member Functions; virtual ~RNTupleWriteOptions ()=default;  ; virtual std::unique_ptr< RNTupleWriteOptions > Clone () const;  ; std::size_t GetApproxZippedClusterSize () const;  ; int GetCompression () const;  ; bool GetEnablePageChecksums () const;  ; std::size_t GetInitialNElementsPerPage () const;  ; std::uint64_t GetMaxKeySize () const;  ; std::size_t GetMaxUnzippedClusterSize () const;  ; std::size_t GetMaxUnzippedPageSize () const;  ; std::size_t GetPageBufferBudget () const;  ; bool GetUseBufferedWrite () const;  ; bool GetUseDirectIO () const;  ; EImplicitMT GetUseImplicitMT () const;  ; std::size_t GetWriteBufferSize () const;  ; void SetApproxZippedClusterSize (std::size_t val);  ; void SetCompression (int val);  ; void SetCompression (RCompressionSetting::EAlgorithm::EValues algorithm, int compressionLevel);  ; void SetEnablePageChecksums (bool val);  Note that turning off page checksums will also turn off the same page merging optimization (see tuning.md) ;  ; void SetInitialNElementsPerPage (std::size_t val);  ; void SetMaxUnzippedClusterSize (std::size_t val);  ; void SetMaxUnzippedPageSize (std::size_t val);  ; void SetPageBufferBudget (std::size_t val);  ; void SetUseBufferedWrite (bool val);  ; void SetUseDirectIO (bool val);  ; void SetUseImplicitMT (EImplicitMT val);  ; void SetWriteBufferSize (std::size_t val);  . Static Public Attributes; static constexpr std::uint64_t kDefaultMaxKeySize = 0x4000'0000;  . Protected Attributes; std::size_t f",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleWriteOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriteOptions.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriteOptions.html:2311,Security,checksum,checksums,2311,"erSize (std::size_t val);  ; void SetCompression (int val);  ; void SetCompression (RCompressionSetting::EAlgorithm::EValues algorithm, int compressionLevel);  ; void SetEnablePageChecksums (bool val);  Note that turning off page checksums will also turn off the same page merging optimization (see tuning.md) ;  ; void SetInitialNElementsPerPage (std::size_t val);  ; void SetMaxUnzippedClusterSize (std::size_t val);  ; void SetMaxUnzippedPageSize (std::size_t val);  ; void SetPageBufferBudget (std::size_t val);  ; void SetUseBufferedWrite (bool val);  ; void SetUseDirectIO (bool val);  ; void SetUseImplicitMT (EImplicitMT val);  ; void SetWriteBufferSize (std::size_t val);  . Static Public Attributes; static constexpr std::uint64_t kDefaultMaxKeySize = 0x4000'0000;  . Protected Attributes; std::size_t fApproxZippedClusterSize = 100 * 1000 * 1000;  Approximation of the target compressed cluster size. ;  ; int fCompression {RCompressionSetting::EDefaults::kUseGeneralPurpose};  ; bool fEnablePageChecksums = true;  If set, checksums will be calculated and written for every page. ;  ; std::size_t fInitialNElementsPerPage = 64;  Initially, columns start with a page large enough to hold the given number of elements. ;  ; std::uint64_t fMaxKeySize = kDefaultMaxKeySize;  Specifies the max size of a payload storeable into a single TKey. ;  ; std::size_t fMaxUnzippedClusterSize = 1024 * 1024 * 1024;  Memory limit for committing a cluster: with very high compression ratio, we need a limit on how large the I/O buffer can grow during writing. ;  ; std::size_t fMaxUnzippedPageSize = 1024 * 1024;  Pages can grow only to the given limit in bytes. ;  ; std::size_t fPageBufferBudget = 0;  The maximum size that the sum of all page buffers used for writing into a persistent sink are allowed to use. ;  ; bool fUseBufferedWrite = true;  Whether to use buffered writing (with RPageSinkBuf). ;  ; bool fUseDirectIO = false;  Whether to use Direct I/O for writing. ;  ; EImplicitMT fUseImplicitMT",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleWriteOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriteOptions.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriteOptions.html:7269,Security,checksum,checksums,7269,"finition at line 136 of file RNTupleWriteOptions.hxx. ◆ GetWriteBufferSize(). std::size_t ROOT::Experimental::RNTupleWriteOptions::GetWriteBufferSize ; (; ); const. inline . Definition at line 133 of file RNTupleWriteOptions.hxx. ◆ SetApproxZippedClusterSize(). void ROOT::Experimental::RNTupleWriteOptions::SetApproxZippedClusterSize ; (; std::size_t ; val). Definition at line 53 of file RNTupleWriteOptions.cxx. ◆ SetCompression() [1/2]. void ROOT::Experimental::RNTupleWriteOptions::SetCompression ; (; int ; val). inline . Definition at line 106 of file RNTupleWriteOptions.hxx. ◆ SetCompression() [2/2]. void ROOT::Experimental::RNTupleWriteOptions::SetCompression ; (; RCompressionSetting::EAlgorithm::EValues ; algorithm, . int ; compressionLevel . ). inline . Definition at line 107 of file RNTupleWriteOptions.hxx. ◆ SetEnablePageChecksums(). void ROOT::Experimental::RNTupleWriteOptions::SetEnablePageChecksums ; (; bool ; val). inline . Note that turning off page checksums will also turn off the same page merging optimization (see tuning.md) ; Definition at line 141 of file RNTupleWriteOptions.hxx. ◆ SetInitialNElementsPerPage(). void ROOT::Experimental::RNTupleWriteOptions::SetInitialNElementsPerPage ; (; std::size_t ; val). Definition at line 65 of file RNTupleWriteOptions.cxx. ◆ SetMaxUnzippedClusterSize(). void ROOT::Experimental::RNTupleWriteOptions::SetMaxUnzippedClusterSize ; (; std::size_t ; val). Definition at line 59 of file RNTupleWriteOptions.cxx. ◆ SetMaxUnzippedPageSize(). void ROOT::Experimental::RNTupleWriteOptions::SetMaxUnzippedPageSize ; (; std::size_t ; val). Definition at line 71 of file RNTupleWriteOptions.cxx. ◆ SetPageBufferBudget(). void ROOT::Experimental::RNTupleWriteOptions::SetPageBufferBudget ; (; std::size_t ; val). inline . Definition at line 125 of file RNTupleWriteOptions.hxx. ◆ SetUseBufferedWrite(). void ROOT::Experimental::RNTupleWriteOptions::SetUseBufferedWrite ; (; bool ; val). inline . Definition at line 128 of file RNTupleWrit",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleWriteOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriteOptions.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriteOptions.html:9415,Security,checksum,checksums,9415,"of file RNTupleWriteOptions.hxx. ◆ SetUseImplicitMT(). void ROOT::Experimental::RNTupleWriteOptions::SetUseImplicitMT ; (; EImplicitMT ; val). inline . Definition at line 137 of file RNTupleWriteOptions.hxx. ◆ SetWriteBufferSize(). void ROOT::Experimental::RNTupleWriteOptions::SetWriteBufferSize ; (; std::size_t ; val). inline . Definition at line 134 of file RNTupleWriteOptions.hxx. Member Data Documentation. ◆ fApproxZippedClusterSize. std::size_t ROOT::Experimental::RNTupleWriteOptions::fApproxZippedClusterSize = 100 * 1000 * 1000. protected . Approximation of the target compressed cluster size. ; Definition at line 64 of file RNTupleWriteOptions.hxx. ◆ fCompression. int ROOT::Experimental::RNTupleWriteOptions::fCompression {RCompressionSetting::EDefaults::kUseGeneralPurpose}. protected . Definition at line 62 of file RNTupleWriteOptions.hxx. ◆ fEnablePageChecksums. bool ROOT::Experimental::RNTupleWriteOptions::fEnablePageChecksums = true. protected . If set, checksums will be calculated and written for every page. ; Definition at line 95 of file RNTupleWriteOptions.hxx. ◆ fInitialNElementsPerPage. std::size_t ROOT::Experimental::RNTupleWriteOptions::fInitialNElementsPerPage = 64. protected . Initially, columns start with a page large enough to hold the given number of elements. ; The initial page size is the given number of elements multiplied by the column's element size. If more elements are needed, pages are increased up until the byte limit given by fMaxUnzippedPageSize or until the total page buffer limit is reached (as a sum of all page buffers). The total write buffer limit needs to be large enough to hold the initial pages of all columns. ; Definition at line 73 of file RNTupleWriteOptions.hxx. ◆ fMaxKeySize. std::uint64_t ROOT::Experimental::RNTupleWriteOptions::fMaxKeySize = kDefaultMaxKeySize. protected . Specifies the max size of a payload storeable into a single TKey. ; When writing an RNTuple to a ROOT file, any payload whose size exceeds this will ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleWriteOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriteOptions.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter-members.html:239,Modifiability,inherit,inherited,239,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOT::Experimental::RNTupleWriter Member List. This is the complete list of members for ROOT::Experimental::RNTupleWriter, including all inherited members. Append(std::unique_ptr< RNTupleModel > model, std::string_view ntupleName, TFile &file, const RNTupleWriteOptions &options=RNTupleWriteOptions())ROOT::Experimental::RNTupleWriterstatic; CommitCluster(bool commitClusterGroup=false)ROOT::Experimental::RNTupleWriterinline; CommitClusterGroup()ROOT::Experimental::RNTupleWriterprivate; Create(std::unique_ptr< RNTupleModel > model, std::unique_ptr< Internal::RPageSink > sink, const RNTupleWriteOptions &options)ROOT::Experimental::RNTupleWriterprivatestatic; CreateEntry()ROOT::Experimental::RNTupleWriterinline; CreateModelUpdater()ROOT::Experimental::RNTupleWriterinline; EnableMetrics()ROOT::Experimental::RNTupleWriterinline; fFillContextROOT::Experimental::RNTupleWriterprivate; Fill()ROOT::Experimental::RNTupleWriterinline; Fill(REntry &entry)ROOT::Experimental::RNTupleWriterinline; FillNoFlush(REntry &entry, RNTupleFillStatus &status)ROOT::Experimental::RNTupleWriterinline; fLastCommittedClusterGroupROOT::Experimental::RNTupleWriterprivate; FlushCluster()ROOT::Experimental::RNTupleWriterinline; FlushColumns()ROOT::Experimental::RNTupleWriterinline; fMetricsROOT::Experimental::RNTupleWriterprivate; fZipTasksROOT::Experimental::RNTupleWriterprivate; GetLastCommitted() constROOT::Experimental::RNTupleWriterinline; GetLastCommittedClusterGroup() constROOT::Experimental::RNTupleWriterinline; GetLastFlushed() constROOT::Experimental::RNTupleWriterinline; GetMetrics() constROOT::Experimental::RNTupleWriterinline; GetModel() constROOT::Experimental::RNTupleWriterinline; GetNEntries() constROOT::Experimental::RNTupleWriterinline; GetSink()ROOT::Experimental::RNTupleWriterinlineprivate; GetUpdatableModel()ROOT::Experimental::RNTupleWriterinlineprivate; Internal::CreateRNTupleWri",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleWriter-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter-members.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html:908,Availability,error,errors,908,". ROOT: ROOT::Experimental::RNTupleWriter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::Experimental::RNTupleWriter Class ReferenceNTuple-related classes. ; An RNTuple that gets filled with entries (data) and writes them to storage. ; An output ntuple can be filled with entries. The caller has to make sure that the data that gets filled into an ntuple is not modified for the time of the Fill() call. The fill call serializes the C++ object into the column format and writes data into the corresponding column page buffers. Writing of the buffers to storage is deferred and can be triggered by FlushCluster() or by destructing the writer. On I/O errors, an exception is thrown. ; Definition at line 60 of file RNTupleWriter.hxx. Public Member Functions;  RNTupleWriter (const RNTupleWriter &)=delete;  ;  ~RNTupleWriter ();  ; void CommitCluster (bool commitClusterGroup=false);  Ensure that the data from the so far seen Fill calls has been written to storage. ;  ; std::unique_ptr< REntry > CreateEntry ();  ; std::unique_ptr< RNTupleModel::RUpdater > CreateModelUpdater ();  Get a RNTupleModel::RUpdater that provides limited support for incremental updates to the underlying model, e.g. ;  ; void EnableMetrics ();  ; std::size_t Fill ();  The simplest user interface if the default entry that comes with the ntuple model is used. ;  ; std::size_t Fill (REntry &entry);  Multiple entries can have been instantiated from the ntuple model. ;  ; void FillNoFlush (REntry &entry, RNTupleFillStatus &status);  Fill an entry into this ntuple, but don't commit the cluster. ;  ; void FlushCluster ();  Flush so far filled entries to storage. ;  ; void FlushColumns ();  Flush column data, preparing for CommitCluster or to reduce memory usage",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html:1415,Deployability,update,updates,1415,"ers ; ROOT::Experimental::RNTupleWriter Class ReferenceNTuple-related classes. ; An RNTuple that gets filled with entries (data) and writes them to storage. ; An output ntuple can be filled with entries. The caller has to make sure that the data that gets filled into an ntuple is not modified for the time of the Fill() call. The fill call serializes the C++ object into the column format and writes data into the corresponding column page buffers. Writing of the buffers to storage is deferred and can be triggered by FlushCluster() or by destructing the writer. On I/O errors, an exception is thrown. ; Definition at line 60 of file RNTupleWriter.hxx. Public Member Functions;  RNTupleWriter (const RNTupleWriter &)=delete;  ;  ~RNTupleWriter ();  ; void CommitCluster (bool commitClusterGroup=false);  Ensure that the data from the so far seen Fill calls has been written to storage. ;  ; std::unique_ptr< REntry > CreateEntry ();  ; std::unique_ptr< RNTupleModel::RUpdater > CreateModelUpdater ();  Get a RNTupleModel::RUpdater that provides limited support for incremental updates to the underlying model, e.g. ;  ; void EnableMetrics ();  ; std::size_t Fill ();  The simplest user interface if the default entry that comes with the ntuple model is used. ;  ; std::size_t Fill (REntry &entry);  Multiple entries can have been instantiated from the ntuple model. ;  ; void FillNoFlush (REntry &entry, RNTupleFillStatus &status);  Fill an entry into this ntuple, but don't commit the cluster. ;  ; void FlushCluster ();  Flush so far filled entries to storage. ;  ; void FlushColumns ();  Flush column data, preparing for CommitCluster or to reduce memory usage. ;  ; NTupleSize_t GetLastCommitted () const;  Return the entry number that was last committed in a cluster. ;  ; NTupleSize_t GetLastCommittedClusterGroup () const;  Return the entry number that was last committed in a cluster group. ;  ; NTupleSize_t GetLastFlushed () const;  Return the entry number that was last flushed in a clust",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html:6412,Deployability,update,updates,6412,"he data from the so far seen Fill calls has been written to storage. ; Definition at line 119 of file RNTupleWriter.hxx. ◆ CommitClusterGroup(). void ROOT::Experimental::RNTupleWriter::CommitClusterGroup ; (; ). private . Definition at line 102 of file RNTupleWriter.cxx. ◆ Create(). std::unique_ptr< ROOT::Experimental::RNTupleWriter > ROOT::Experimental::RNTupleWriter::Create ; (; std::unique_ptr< RNTupleModel > ; model, . std::unique_ptr< Internal::RPageSink > ; sink, . const RNTupleWriteOptions & ; options . ). staticprivate . Create a writer, potentially wrapping the sink in a RPageSinkBuf. ; Definition at line 58 of file RNTupleWriter.cxx. ◆ CreateEntry(). std::unique_ptr< REntry > ROOT::Experimental::RNTupleWriter::CreateEntry ; (; ). inline . Definition at line 126 of file RNTupleWriter.hxx. ◆ CreateModelUpdater(). std::unique_ptr< RNTupleModel::RUpdater > ROOT::Experimental::RNTupleWriter::CreateModelUpdater ; (; ). inline . Get a RNTupleModel::RUpdater that provides limited support for incremental updates to the underlying model, e.g. ; addition of new fields.; Example: add a new field after the model has been used to construct a RNTupleWriter object #include <ROOT/RNTuple.hxx>; using ROOT::Experimental::RNTupleModel;; using ROOT::Experimental::RNTupleWriter;; ; auto model = RNTupleModel::Create();; auto fldFloat = model->MakeField<float>(""fldFloat"");; auto writer = RNTupleWriter::Recreate(std::move(model), ""myNTuple"", ""some/file.root"");; auto updater = writer->CreateModelUpdater();; updater->BeginUpdate();; updater->AddField(std::make_unique<RField<float>>(""pt""));; updater->CommitUpdate();; ; // ...; RNTuple.hxx; ROOT::Experimental::RFieldClasses with dictionaries that can be inspected by TClass.Definition RField.hxx:241; ROOT::Experimental::RNTupleModelThe RNTupleModel encapulates the schema of an ntuple.Definition RNTupleModel.hxx:136; ROOT::Experimental::RNTupleModel::Createstatic std::unique_ptr< RNTupleModel > Create()Definition RNTupleModel.cxx:249; RO",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html:6867,Deployability,update,updater,6867,"ter, potentially wrapping the sink in a RPageSinkBuf. ; Definition at line 58 of file RNTupleWriter.cxx. ◆ CreateEntry(). std::unique_ptr< REntry > ROOT::Experimental::RNTupleWriter::CreateEntry ; (; ). inline . Definition at line 126 of file RNTupleWriter.hxx. ◆ CreateModelUpdater(). std::unique_ptr< RNTupleModel::RUpdater > ROOT::Experimental::RNTupleWriter::CreateModelUpdater ; (; ). inline . Get a RNTupleModel::RUpdater that provides limited support for incremental updates to the underlying model, e.g. ; addition of new fields.; Example: add a new field after the model has been used to construct a RNTupleWriter object #include <ROOT/RNTuple.hxx>; using ROOT::Experimental::RNTupleModel;; using ROOT::Experimental::RNTupleWriter;; ; auto model = RNTupleModel::Create();; auto fldFloat = model->MakeField<float>(""fldFloat"");; auto writer = RNTupleWriter::Recreate(std::move(model), ""myNTuple"", ""some/file.root"");; auto updater = writer->CreateModelUpdater();; updater->BeginUpdate();; updater->AddField(std::make_unique<RField<float>>(""pt""));; updater->CommitUpdate();; ; // ...; RNTuple.hxx; ROOT::Experimental::RFieldClasses with dictionaries that can be inspected by TClass.Definition RField.hxx:241; ROOT::Experimental::RNTupleModelThe RNTupleModel encapulates the schema of an ntuple.Definition RNTupleModel.hxx:136; ROOT::Experimental::RNTupleModel::Createstatic std::unique_ptr< RNTupleModel > Create()Definition RNTupleModel.cxx:249; ROOT::Experimental::RNTupleWriterAn RNTuple that gets filled with entries (data) and writes them to storage.Definition RNTupleWriter.hxx:60; ROOT::Experimental::RNTupleWriter::Recreatestatic std::unique_ptr< RNTupleWriter > Recreate(std::unique_ptr< RNTupleModel > model, std::string_view ntupleName, std::string_view storage, const RNTupleWriteOptions &options=RNTupleWriteOptions())Throws an exception if the model is null.Definition RNTupleWriter.cxx:71; writerDefinition writer.py:1. Definition at line 161 of file RNTupleWriter.hxx. ◆ EnableMet",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html:6908,Deployability,update,updater,6908,"ter, potentially wrapping the sink in a RPageSinkBuf. ; Definition at line 58 of file RNTupleWriter.cxx. ◆ CreateEntry(). std::unique_ptr< REntry > ROOT::Experimental::RNTupleWriter::CreateEntry ; (; ). inline . Definition at line 126 of file RNTupleWriter.hxx. ◆ CreateModelUpdater(). std::unique_ptr< RNTupleModel::RUpdater > ROOT::Experimental::RNTupleWriter::CreateModelUpdater ; (; ). inline . Get a RNTupleModel::RUpdater that provides limited support for incremental updates to the underlying model, e.g. ; addition of new fields.; Example: add a new field after the model has been used to construct a RNTupleWriter object #include <ROOT/RNTuple.hxx>; using ROOT::Experimental::RNTupleModel;; using ROOT::Experimental::RNTupleWriter;; ; auto model = RNTupleModel::Create();; auto fldFloat = model->MakeField<float>(""fldFloat"");; auto writer = RNTupleWriter::Recreate(std::move(model), ""myNTuple"", ""some/file.root"");; auto updater = writer->CreateModelUpdater();; updater->BeginUpdate();; updater->AddField(std::make_unique<RField<float>>(""pt""));; updater->CommitUpdate();; ; // ...; RNTuple.hxx; ROOT::Experimental::RFieldClasses with dictionaries that can be inspected by TClass.Definition RField.hxx:241; ROOT::Experimental::RNTupleModelThe RNTupleModel encapulates the schema of an ntuple.Definition RNTupleModel.hxx:136; ROOT::Experimental::RNTupleModel::Createstatic std::unique_ptr< RNTupleModel > Create()Definition RNTupleModel.cxx:249; ROOT::Experimental::RNTupleWriterAn RNTuple that gets filled with entries (data) and writes them to storage.Definition RNTupleWriter.hxx:60; ROOT::Experimental::RNTupleWriter::Recreatestatic std::unique_ptr< RNTupleWriter > Recreate(std::unique_ptr< RNTupleModel > model, std::string_view ntupleName, std::string_view storage, const RNTupleWriteOptions &options=RNTupleWriteOptions())Throws an exception if the model is null.Definition RNTupleWriter.cxx:71; writerDefinition writer.py:1. Definition at line 161 of file RNTupleWriter.hxx. ◆ EnableMet",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html:6933,Deployability,update,updater,6933,"ter, potentially wrapping the sink in a RPageSinkBuf. ; Definition at line 58 of file RNTupleWriter.cxx. ◆ CreateEntry(). std::unique_ptr< REntry > ROOT::Experimental::RNTupleWriter::CreateEntry ; (; ). inline . Definition at line 126 of file RNTupleWriter.hxx. ◆ CreateModelUpdater(). std::unique_ptr< RNTupleModel::RUpdater > ROOT::Experimental::RNTupleWriter::CreateModelUpdater ; (; ). inline . Get a RNTupleModel::RUpdater that provides limited support for incremental updates to the underlying model, e.g. ; addition of new fields.; Example: add a new field after the model has been used to construct a RNTupleWriter object #include <ROOT/RNTuple.hxx>; using ROOT::Experimental::RNTupleModel;; using ROOT::Experimental::RNTupleWriter;; ; auto model = RNTupleModel::Create();; auto fldFloat = model->MakeField<float>(""fldFloat"");; auto writer = RNTupleWriter::Recreate(std::move(model), ""myNTuple"", ""some/file.root"");; auto updater = writer->CreateModelUpdater();; updater->BeginUpdate();; updater->AddField(std::make_unique<RField<float>>(""pt""));; updater->CommitUpdate();; ; // ...; RNTuple.hxx; ROOT::Experimental::RFieldClasses with dictionaries that can be inspected by TClass.Definition RField.hxx:241; ROOT::Experimental::RNTupleModelThe RNTupleModel encapulates the schema of an ntuple.Definition RNTupleModel.hxx:136; ROOT::Experimental::RNTupleModel::Createstatic std::unique_ptr< RNTupleModel > Create()Definition RNTupleModel.cxx:249; ROOT::Experimental::RNTupleWriterAn RNTuple that gets filled with entries (data) and writes them to storage.Definition RNTupleWriter.hxx:60; ROOT::Experimental::RNTupleWriter::Recreatestatic std::unique_ptr< RNTupleWriter > Recreate(std::unique_ptr< RNTupleModel > model, std::string_view ntupleName, std::string_view storage, const RNTupleWriteOptions &options=RNTupleWriteOptions())Throws an exception if the model is null.Definition RNTupleWriter.cxx:71; writerDefinition writer.py:1. Definition at line 161 of file RNTupleWriter.hxx. ◆ EnableMet",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html:6992,Deployability,update,updater,6992,"ter, potentially wrapping the sink in a RPageSinkBuf. ; Definition at line 58 of file RNTupleWriter.cxx. ◆ CreateEntry(). std::unique_ptr< REntry > ROOT::Experimental::RNTupleWriter::CreateEntry ; (; ). inline . Definition at line 126 of file RNTupleWriter.hxx. ◆ CreateModelUpdater(). std::unique_ptr< RNTupleModel::RUpdater > ROOT::Experimental::RNTupleWriter::CreateModelUpdater ; (; ). inline . Get a RNTupleModel::RUpdater that provides limited support for incremental updates to the underlying model, e.g. ; addition of new fields.; Example: add a new field after the model has been used to construct a RNTupleWriter object #include <ROOT/RNTuple.hxx>; using ROOT::Experimental::RNTupleModel;; using ROOT::Experimental::RNTupleWriter;; ; auto model = RNTupleModel::Create();; auto fldFloat = model->MakeField<float>(""fldFloat"");; auto writer = RNTupleWriter::Recreate(std::move(model), ""myNTuple"", ""some/file.root"");; auto updater = writer->CreateModelUpdater();; updater->BeginUpdate();; updater->AddField(std::make_unique<RField<float>>(""pt""));; updater->CommitUpdate();; ; // ...; RNTuple.hxx; ROOT::Experimental::RFieldClasses with dictionaries that can be inspected by TClass.Definition RField.hxx:241; ROOT::Experimental::RNTupleModelThe RNTupleModel encapulates the schema of an ntuple.Definition RNTupleModel.hxx:136; ROOT::Experimental::RNTupleModel::Createstatic std::unique_ptr< RNTupleModel > Create()Definition RNTupleModel.cxx:249; ROOT::Experimental::RNTupleWriterAn RNTuple that gets filled with entries (data) and writes them to storage.Definition RNTupleWriter.hxx:60; ROOT::Experimental::RNTupleWriter::Recreatestatic std::unique_ptr< RNTupleWriter > Recreate(std::unique_ptr< RNTupleModel > model, std::string_view ntupleName, std::string_view storage, const RNTupleWriteOptions &options=RNTupleWriteOptions())Throws an exception if the model is null.Definition RNTupleWriter.cxx:71; writerDefinition writer.py:1. Definition at line 161 of file RNTupleWriter.hxx. ◆ EnableMet",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html:1982,Energy Efficiency,reduce,reduce,1982,"n at line 60 of file RNTupleWriter.hxx. Public Member Functions;  RNTupleWriter (const RNTupleWriter &)=delete;  ;  ~RNTupleWriter ();  ; void CommitCluster (bool commitClusterGroup=false);  Ensure that the data from the so far seen Fill calls has been written to storage. ;  ; std::unique_ptr< REntry > CreateEntry ();  ; std::unique_ptr< RNTupleModel::RUpdater > CreateModelUpdater ();  Get a RNTupleModel::RUpdater that provides limited support for incremental updates to the underlying model, e.g. ;  ; void EnableMetrics ();  ; std::size_t Fill ();  The simplest user interface if the default entry that comes with the ntuple model is used. ;  ; std::size_t Fill (REntry &entry);  Multiple entries can have been instantiated from the ntuple model. ;  ; void FillNoFlush (REntry &entry, RNTupleFillStatus &status);  Fill an entry into this ntuple, but don't commit the cluster. ;  ; void FlushCluster ();  Flush so far filled entries to storage. ;  ; void FlushColumns ();  Flush column data, preparing for CommitCluster or to reduce memory usage. ;  ; NTupleSize_t GetLastCommitted () const;  Return the entry number that was last committed in a cluster. ;  ; NTupleSize_t GetLastCommittedClusterGroup () const;  Return the entry number that was last committed in a cluster group. ;  ; NTupleSize_t GetLastFlushed () const;  Return the entry number that was last flushed in a cluster. ;  ; const Detail::RNTupleMetrics & GetMetrics () const;  ; const RNTupleModel & GetModel () const;  ; NTupleSize_t GetNEntries () const;  Return the number of entries filled so far. ;  ; RNTupleWriter & operator= (const RNTupleWriter &)=delete;  . Static Public Member Functions; static std::unique_ptr< RNTupleWriter > Append (std::unique_ptr< RNTupleModel > model, std::string_view ntupleName, TFile &file, const RNTupleWriteOptions &options=RNTupleWriteOptions());  Throws an exception if the model is null. ;  ; static std::unique_ptr< RNTupleWriter > Recreate (std::initializer_list< std::pair< std::stri",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html:4121,Energy Efficiency,schedul,scheduler,4121,"ntupleName, std::string_view storage, const RNTupleWriteOptions &options=RNTupleWriteOptions());  ; static std::unique_ptr< RNTupleWriter > Recreate (std::unique_ptr< RNTupleModel > model, std::string_view ntupleName, std::string_view storage, const RNTupleWriteOptions &options=RNTupleWriteOptions());  Throws an exception if the model is null. ;  . Private Member Functions;  RNTupleWriter (std::unique_ptr< RNTupleModel > model, std::unique_ptr< Internal::RPageSink > sink);  ; void CommitClusterGroup ();  ; Internal::RPageSink & GetSink ();  ; RNTupleModel & GetUpdatableModel ();  . Static Private Member Functions; static std::unique_ptr< RNTupleWriter > Create (std::unique_ptr< RNTupleModel > model, std::unique_ptr< Internal::RPageSink > sink, const RNTupleWriteOptions &options);  Create a writer, potentially wrapping the sink in a RPageSinkBuf. ;  . Private Attributes; RNTupleFillContext fFillContext;  ; NTupleSize_t fLastCommittedClusterGroup = 0;  ; Detail::RNTupleMetrics fMetrics;  ; std::unique_ptr< Internal::RPageStorage::RTaskScheduler > fZipTasks;  The page sink's parallel page compression scheduler if IMT is on. ;  . Friends; std::unique_ptr< RNTupleWriter > Internal::CreateRNTupleWriter (std::unique_ptr< RNTupleModel >, std::unique_ptr< Internal::RPageSink >);  . #include <ROOT/RNTupleWriter.hxx>; Constructor & Destructor Documentation. ◆ RNTupleWriter() [1/2]. ROOT::Experimental::RNTupleWriter::RNTupleWriter ; (; std::unique_ptr< RNTupleModel > ; model, . std::unique_ptr< Internal::RPageSink > ; sink . ). private . Definition at line 32 of file RNTupleWriter.cxx. ◆ RNTupleWriter() [2/2]. ROOT::Experimental::RNTupleWriter::RNTupleWriter ; (; const RNTupleWriter & ; ). delete . ◆ ~RNTupleWriter(). ROOT::Experimental::RNTupleWriter::~RNTupleWriter ; (; ). Definition at line 47 of file RNTupleWriter.cxx. Member Function Documentation. ◆ Append(). std::unique_ptr< ROOT::Experimental::RNTupleWriter > ROOT::Experimental::RNTupleWriter::Append ; (; std::unique_pt",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html:9381,Energy Efficiency,reduce,reduce,9381,"td::size_t ROOT::Experimental::RNTupleWriter::Fill ; (; REntry & ; entry). inline . Multiple entries can have been instantiated from the ntuple model. ; This method will perform a light check whether the entry comes from the ntuple's own model. ReturnsThe number of uncompressed bytes written. ; Definition at line 109 of file RNTupleWriter.hxx. ◆ FillNoFlush(). void ROOT::Experimental::RNTupleWriter::FillNoFlush ; (; REntry & ; entry, . RNTupleFillStatus & ; status . ). inline . Fill an entry into this ntuple, but don't commit the cluster. ; The calling code must pass an RNTupleFillStatus and check RNTupleFillStatus::ShouldFlushCluster. ; Definition at line 112 of file RNTupleWriter.hxx. ◆ FlushCluster(). void ROOT::Experimental::RNTupleWriter::FlushCluster ; (; ). inline . Flush so far filled entries to storage. ; Definition at line 117 of file RNTupleWriter.hxx. ◆ FlushColumns(). void ROOT::Experimental::RNTupleWriter::FlushColumns ; (; ). inline . Flush column data, preparing for CommitCluster or to reduce memory usage. ; This will trigger compression of pages, but not actually write to storage (unless buffered writing is turned off). ; Definition at line 115 of file RNTupleWriter.hxx. ◆ GetLastCommitted(). NTupleSize_t ROOT::Experimental::RNTupleWriter::GetLastCommitted ; (; ); const. inline . Return the entry number that was last committed in a cluster. ; Definition at line 131 of file RNTupleWriter.hxx. ◆ GetLastCommittedClusterGroup(). NTupleSize_t ROOT::Experimental::RNTupleWriter::GetLastCommittedClusterGroup ; (; ); const. inline . Return the entry number that was last committed in a cluster group. ; Definition at line 133 of file RNTupleWriter.hxx. ◆ GetLastFlushed(). NTupleSize_t ROOT::Experimental::RNTupleWriter::GetLastFlushed ; (; ); const. inline . Return the entry number that was last flushed in a cluster. ; Definition at line 129 of file RNTupleWriter.hxx. ◆ GetMetrics(). const Detail::RNTupleMetrics & ROOT::Experimental::RNTupleWriter::GetMetrics ;",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html:12893,Energy Efficiency,schedul,scheduler,12893," . std::string_view ; ntupleName, . std::string_view ; storage, . const RNTupleWriteOptions & ; options = RNTupleWriteOptions() . ). static . Definition at line 79 of file RNTupleWriter.cxx. ◆ Recreate() [2/2]. std::unique_ptr< ROOT::Experimental::RNTupleWriter > ROOT::Experimental::RNTupleWriter::Recreate ; (; std::unique_ptr< RNTupleModel > ; model, . std::string_view ; ntupleName, . std::string_view ; storage, . const RNTupleWriteOptions & ; options = RNTupleWriteOptions() . ). static . Throws an exception if the model is null. ; Definition at line 71 of file RNTupleWriter.cxx. Friends And Related Symbol Documentation. ◆ Internal::CreateRNTupleWriter. std::unique_ptr< RNTupleWriter > Internal::CreateRNTupleWriter ; (; std::unique_ptr< RNTupleModel > ; , . std::unique_ptr< Internal::RPageSink > ;  . ). friend . Member Data Documentation. ◆ fFillContext. RNTupleFillContext ROOT::Experimental::RNTupleWriter::fFillContext. private . Definition at line 69 of file RNTupleWriter.hxx. ◆ fLastCommittedClusterGroup. NTupleSize_t ROOT::Experimental::RNTupleWriter::fLastCommittedClusterGroup = 0. private . Definition at line 72 of file RNTupleWriter.hxx. ◆ fMetrics. Detail::RNTupleMetrics ROOT::Experimental::RNTupleWriter::fMetrics. private . Definition at line 70 of file RNTupleWriter.hxx. ◆ fZipTasks. std::unique_ptr<Internal::RPageStorage::RTaskScheduler> ROOT::Experimental::RNTupleWriter::fZipTasks. private . The page sink's parallel page compression scheduler if IMT is on. ; Needs to be destructed after the page sink (in the fill context) is destructed and so declared before. ; Definition at line 68 of file RNTupleWriter.hxx. Libraries for ROOT::Experimental::RNTupleWriter:. [legend]; The documentation for this class was generated from the following files:; tree/ntuple/v7/inc/ROOT/RNTupleWriter.hxx; tree/ntuple/v7/src/RNTupleWriter.cxx. ROOTExperimentalRNTupleWriter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html:1524,Integrability,interface,interface,1524,"d with entries. The caller has to make sure that the data that gets filled into an ntuple is not modified for the time of the Fill() call. The fill call serializes the C++ object into the column format and writes data into the corresponding column page buffers. Writing of the buffers to storage is deferred and can be triggered by FlushCluster() or by destructing the writer. On I/O errors, an exception is thrown. ; Definition at line 60 of file RNTupleWriter.hxx. Public Member Functions;  RNTupleWriter (const RNTupleWriter &)=delete;  ;  ~RNTupleWriter ();  ; void CommitCluster (bool commitClusterGroup=false);  Ensure that the data from the so far seen Fill calls has been written to storage. ;  ; std::unique_ptr< REntry > CreateEntry ();  ; std::unique_ptr< RNTupleModel::RUpdater > CreateModelUpdater ();  Get a RNTupleModel::RUpdater that provides limited support for incremental updates to the underlying model, e.g. ;  ; void EnableMetrics ();  ; std::size_t Fill ();  The simplest user interface if the default entry that comes with the ntuple model is used. ;  ; std::size_t Fill (REntry &entry);  Multiple entries can have been instantiated from the ntuple model. ;  ; void FillNoFlush (REntry &entry, RNTupleFillStatus &status);  Fill an entry into this ntuple, but don't commit the cluster. ;  ; void FlushCluster ();  Flush so far filled entries to storage. ;  ; void FlushColumns ();  Flush column data, preparing for CommitCluster or to reduce memory usage. ;  ; NTupleSize_t GetLastCommitted () const;  Return the entry number that was last committed in a cluster. ;  ; NTupleSize_t GetLastCommittedClusterGroup () const;  Return the entry number that was last committed in a cluster group. ;  ; NTupleSize_t GetLastFlushed () const;  Return the entry number that was last flushed in a cluster. ;  ; const Detail::RNTupleMetrics & GetMetrics () const;  ; const RNTupleModel & GetModel () const;  ; NTupleSize_t GetNEntries () const;  Return the number of entries filled so far. ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html:3827,Integrability,wrap,wrapping,3827,"upleName, TFile &file, const RNTupleWriteOptions &options=RNTupleWriteOptions());  Throws an exception if the model is null. ;  ; static std::unique_ptr< RNTupleWriter > Recreate (std::initializer_list< std::pair< std::string_view, std::string_view > > fields, std::string_view ntupleName, std::string_view storage, const RNTupleWriteOptions &options=RNTupleWriteOptions());  ; static std::unique_ptr< RNTupleWriter > Recreate (std::unique_ptr< RNTupleModel > model, std::string_view ntupleName, std::string_view storage, const RNTupleWriteOptions &options=RNTupleWriteOptions());  Throws an exception if the model is null. ;  . Private Member Functions;  RNTupleWriter (std::unique_ptr< RNTupleModel > model, std::unique_ptr< Internal::RPageSink > sink);  ; void CommitClusterGroup ();  ; Internal::RPageSink & GetSink ();  ; RNTupleModel & GetUpdatableModel ();  . Static Private Member Functions; static std::unique_ptr< RNTupleWriter > Create (std::unique_ptr< RNTupleModel > model, std::unique_ptr< Internal::RPageSink > sink, const RNTupleWriteOptions &options);  Create a writer, potentially wrapping the sink in a RPageSinkBuf. ;  . Private Attributes; RNTupleFillContext fFillContext;  ; NTupleSize_t fLastCommittedClusterGroup = 0;  ; Detail::RNTupleMetrics fMetrics;  ; std::unique_ptr< Internal::RPageStorage::RTaskScheduler > fZipTasks;  The page sink's parallel page compression scheduler if IMT is on. ;  . Friends; std::unique_ptr< RNTupleWriter > Internal::CreateRNTupleWriter (std::unique_ptr< RNTupleModel >, std::unique_ptr< Internal::RPageSink >);  . #include <ROOT/RNTupleWriter.hxx>; Constructor & Destructor Documentation. ◆ RNTupleWriter() [1/2]. ROOT::Experimental::RNTupleWriter::RNTupleWriter ; (; std::unique_ptr< RNTupleModel > ; model, . std::unique_ptr< Internal::RPageSink > ; sink . ). private . Definition at line 32 of file RNTupleWriter.cxx. ◆ RNTupleWriter() [2/2]. ROOT::Experimental::RNTupleWriter::RNTupleWriter ; (; const RNTupleWriter & ; ). delete . ◆ ~RNTu",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html:5955,Integrability,wrap,wrapping,5955,"ental::RNTupleWriter::Append ; (; std::unique_ptr< RNTupleModel > ; model, . std::string_view ; ntupleName, . TFile & ; file, . const RNTupleWriteOptions & ; options = RNTupleWriteOptions() . ). static . Throws an exception if the model is null. ; Definition at line 95 of file RNTupleWriter.cxx. ◆ CommitCluster(). void ROOT::Experimental::RNTupleWriter::CommitCluster ; (; bool ; commitClusterGroup = false). inline . Ensure that the data from the so far seen Fill calls has been written to storage. ; Definition at line 119 of file RNTupleWriter.hxx. ◆ CommitClusterGroup(). void ROOT::Experimental::RNTupleWriter::CommitClusterGroup ; (; ). private . Definition at line 102 of file RNTupleWriter.cxx. ◆ Create(). std::unique_ptr< ROOT::Experimental::RNTupleWriter > ROOT::Experimental::RNTupleWriter::Create ; (; std::unique_ptr< RNTupleModel > ; model, . std::unique_ptr< Internal::RPageSink > ; sink, . const RNTupleWriteOptions & ; options . ). staticprivate . Create a writer, potentially wrapping the sink in a RPageSinkBuf. ; Definition at line 58 of file RNTupleWriter.cxx. ◆ CreateEntry(). std::unique_ptr< REntry > ROOT::Experimental::RNTupleWriter::CreateEntry ; (; ). inline . Definition at line 126 of file RNTupleWriter.hxx. ◆ CreateModelUpdater(). std::unique_ptr< RNTupleModel::RUpdater > ROOT::Experimental::RNTupleWriter::CreateModelUpdater ; (; ). inline . Get a RNTupleModel::RUpdater that provides limited support for incremental updates to the underlying model, e.g. ; addition of new fields.; Example: add a new field after the model has been used to construct a RNTupleWriter object #include <ROOT/RNTuple.hxx>; using ROOT::Experimental::RNTupleModel;; using ROOT::Experimental::RNTupleWriter;; ; auto model = RNTupleModel::Create();; auto fldFloat = model->MakeField<float>(""fldFloat"");; auto writer = RNTupleWriter::Recreate(std::move(model), ""myNTuple"", ""some/file.root"");; auto updater = writer->CreateModelUpdater();; updater->BeginUpdate();; updater->AddField(std::ma",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html:8171,Integrability,interface,interface,8171,"del encapulates the schema of an ntuple.Definition RNTupleModel.hxx:136; ROOT::Experimental::RNTupleModel::Createstatic std::unique_ptr< RNTupleModel > Create()Definition RNTupleModel.cxx:249; ROOT::Experimental::RNTupleWriterAn RNTuple that gets filled with entries (data) and writes them to storage.Definition RNTupleWriter.hxx:60; ROOT::Experimental::RNTupleWriter::Recreatestatic std::unique_ptr< RNTupleWriter > Recreate(std::unique_ptr< RNTupleModel > model, std::string_view ntupleName, std::string_view storage, const RNTupleWriteOptions &options=RNTupleWriteOptions())Throws an exception if the model is null.Definition RNTupleWriter.cxx:71; writerDefinition writer.py:1. Definition at line 161 of file RNTupleWriter.hxx. ◆ EnableMetrics(). void ROOT::Experimental::RNTupleWriter::EnableMetrics ; (; ). inline . Definition at line 137 of file RNTupleWriter.hxx. ◆ Fill() [1/2]. std::size_t ROOT::Experimental::RNTupleWriter::Fill ; (; ). inline . The simplest user interface if the default entry that comes with the ntuple model is used. ; ReturnsThe number of uncompressed bytes written. ; Definition at line 105 of file RNTupleWriter.hxx. ◆ Fill() [2/2]. std::size_t ROOT::Experimental::RNTupleWriter::Fill ; (; REntry & ; entry). inline . Multiple entries can have been instantiated from the ntuple model. ; This method will perform a light check whether the entry comes from the ntuple's own model. ReturnsThe number of uncompressed bytes written. ; Definition at line 109 of file RNTupleWriter.hxx. ◆ FillNoFlush(). void ROOT::Experimental::RNTupleWriter::FillNoFlush ; (; REntry & ; entry, . RNTupleFillStatus & ; status . ). inline . Fill an entry into this ntuple, but don't commit the cluster. ; The calling code must pass an RNTupleFillStatus and check RNTupleFillStatus::ShouldFlushCluster. ; Definition at line 112 of file RNTupleWriter.hxx. ◆ FlushCluster(). void ROOT::Experimental::RNTupleWriter::FlushCluster ; (; ). inline . Flush so far filled entries to storage. ; Definiti",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html:8534,Performance,perform,perform,8534,"ter::Recreatestatic std::unique_ptr< RNTupleWriter > Recreate(std::unique_ptr< RNTupleModel > model, std::string_view ntupleName, std::string_view storage, const RNTupleWriteOptions &options=RNTupleWriteOptions())Throws an exception if the model is null.Definition RNTupleWriter.cxx:71; writerDefinition writer.py:1. Definition at line 161 of file RNTupleWriter.hxx. ◆ EnableMetrics(). void ROOT::Experimental::RNTupleWriter::EnableMetrics ; (; ). inline . Definition at line 137 of file RNTupleWriter.hxx. ◆ Fill() [1/2]. std::size_t ROOT::Experimental::RNTupleWriter::Fill ; (; ). inline . The simplest user interface if the default entry that comes with the ntuple model is used. ; ReturnsThe number of uncompressed bytes written. ; Definition at line 105 of file RNTupleWriter.hxx. ◆ Fill() [2/2]. std::size_t ROOT::Experimental::RNTupleWriter::Fill ; (; REntry & ; entry). inline . Multiple entries can have been instantiated from the ntuple model. ; This method will perform a light check whether the entry comes from the ntuple's own model. ReturnsThe number of uncompressed bytes written. ; Definition at line 109 of file RNTupleWriter.hxx. ◆ FillNoFlush(). void ROOT::Experimental::RNTupleWriter::FillNoFlush ; (; REntry & ; entry, . RNTupleFillStatus & ; status . ). inline . Fill an entry into this ntuple, but don't commit the cluster. ; The calling code must pass an RNTupleFillStatus and check RNTupleFillStatus::ShouldFlushCluster. ; Definition at line 112 of file RNTupleWriter.hxx. ◆ FlushCluster(). void ROOT::Experimental::RNTupleWriter::FlushCluster ; (; ). inline . Flush so far filled entries to storage. ; Definition at line 117 of file RNTupleWriter.hxx. ◆ FlushColumns(). void ROOT::Experimental::RNTupleWriter::FlushColumns ; (; ). inline . Flush column data, preparing for CommitCluster or to reduce memory usage. ; This will trigger compression of pages, but not actually write to storage (unless buffered writing is turned off). ; Definition at line 115 of file RNTupleWr",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html:1510,Usability,simpl,simplest,1510,"d with entries. The caller has to make sure that the data that gets filled into an ntuple is not modified for the time of the Fill() call. The fill call serializes the C++ object into the column format and writes data into the corresponding column page buffers. Writing of the buffers to storage is deferred and can be triggered by FlushCluster() or by destructing the writer. On I/O errors, an exception is thrown. ; Definition at line 60 of file RNTupleWriter.hxx. Public Member Functions;  RNTupleWriter (const RNTupleWriter &)=delete;  ;  ~RNTupleWriter ();  ; void CommitCluster (bool commitClusterGroup=false);  Ensure that the data from the so far seen Fill calls has been written to storage. ;  ; std::unique_ptr< REntry > CreateEntry ();  ; std::unique_ptr< RNTupleModel::RUpdater > CreateModelUpdater ();  Get a RNTupleModel::RUpdater that provides limited support for incremental updates to the underlying model, e.g. ;  ; void EnableMetrics ();  ; std::size_t Fill ();  The simplest user interface if the default entry that comes with the ntuple model is used. ;  ; std::size_t Fill (REntry &entry);  Multiple entries can have been instantiated from the ntuple model. ;  ; void FillNoFlush (REntry &entry, RNTupleFillStatus &status);  Fill an entry into this ntuple, but don't commit the cluster. ;  ; void FlushCluster ();  Flush so far filled entries to storage. ;  ; void FlushColumns ();  Flush column data, preparing for CommitCluster or to reduce memory usage. ;  ; NTupleSize_t GetLastCommitted () const;  Return the entry number that was last committed in a cluster. ;  ; NTupleSize_t GetLastCommittedClusterGroup () const;  Return the entry number that was last committed in a cluster group. ;  ; NTupleSize_t GetLastFlushed () const;  Return the entry number that was last flushed in a cluster. ;  ; const Detail::RNTupleMetrics & GetMetrics () const;  ; const RNTupleModel & GetModel () const;  ; NTupleSize_t GetNEntries () const;  Return the number of entries filled so far. ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html:8157,Usability,simpl,simplest,8157,"del encapulates the schema of an ntuple.Definition RNTupleModel.hxx:136; ROOT::Experimental::RNTupleModel::Createstatic std::unique_ptr< RNTupleModel > Create()Definition RNTupleModel.cxx:249; ROOT::Experimental::RNTupleWriterAn RNTuple that gets filled with entries (data) and writes them to storage.Definition RNTupleWriter.hxx:60; ROOT::Experimental::RNTupleWriter::Recreatestatic std::unique_ptr< RNTupleWriter > Recreate(std::unique_ptr< RNTupleModel > model, std::string_view ntupleName, std::string_view storage, const RNTupleWriteOptions &options=RNTupleWriteOptions())Throws an exception if the model is null.Definition RNTupleWriter.cxx:71; writerDefinition writer.py:1. Definition at line 161 of file RNTupleWriter.hxx. ◆ EnableMetrics(). void ROOT::Experimental::RNTupleWriter::EnableMetrics ; (; ). inline . Definition at line 137 of file RNTupleWriter.hxx. ◆ Fill() [1/2]. std::size_t ROOT::Experimental::RNTupleWriter::Fill ; (; ). inline . The simplest user interface if the default entry that comes with the ntuple model is used. ; ReturnsThe number of uncompressed bytes written. ; Definition at line 105 of file RNTupleWriter.hxx. ◆ Fill() [2/2]. std::size_t ROOT::Experimental::RNTupleWriter::Fill ; (; REntry & ; entry). inline . Multiple entries can have been instantiated from the ntuple model. ; This method will perform a light check whether the entry comes from the ntuple's own model. ReturnsThe number of uncompressed bytes written. ; Definition at line 109 of file RNTupleWriter.hxx. ◆ FillNoFlush(). void ROOT::Experimental::RNTupleWriter::FillNoFlush ; (; REntry & ; entry, . RNTupleFillStatus & ; status . ). inline . Fill an entry into this ntuple, but don't commit the cluster. ; The calling code must pass an RNTupleFillStatus and check RNTupleFillStatus::ShouldFlushCluster. ; Definition at line 112 of file RNTupleWriter.hxx. ◆ FlushCluster(). void ROOT::Experimental::RNTupleWriter::FlushCluster ; (; ). inline . Flush so far filled entries to storage. ; Definiti",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPad.html:1587,Modifiability,inherit,inherited,1587," without notice. It might trigger earthquakes. Feedback is welcome! ; Definition at line 25 of file RPad.hxx. Public Member Functions;  RPad (TRootIOCtor *);  Constructor must be used only for I/O. ;  ;  ~RPad () override;  Destructor to have a vtable. ;  ; const RCanvas * GetCanvas () const override;  Access to the top-most canvas (const version). ;  ; RCanvas * GetCanvas () override;  Access to the top-most canvas (non-const version). ;  ; RPadBase * GetParent ();  Access to the parent pad (non-const version). ;  ; const RPadBase * GetParent () const;  Access to the parent pad (const version). ;  ; const RPadPos & GetPos () const;  Get the position of the pad in parent (!) coordinates. ;  ; const RPadExtent & GetSize () const;  Get the size of the pad in parent (!) coordinates. ;  ; void SetPos (const RPadPos &p);  Set position. ;  ; void SetSize (const RPadExtent &sz);  Set the size of the pad in parent (!) coordinates. ;  ;  Public Member Functions inherited from ROOT::Experimental::RPadBase;  ~RPadBase () override;  ; template<class T , class... ARGS> ; std::shared_ptr< T > Add (ARGS... args);  Add drawable of specified class T. ;  ; std::shared_ptr< RFrame > AddFrame ();  Add a frame object for the pad. ;  ; std::shared_ptr< RPad > AddPad (const RPadPos &, const RPadExtent &);  Add subpad. ;  ; std::vector< std::vector< std::shared_ptr< RPad > > > Divide (int nHoriz, int nVert, const RPadExtent &padding={});  Divide this pad into a grid of subpads with padding in between. ;  ; template<class T , class... ARGS> ; std::shared_ptr< T > Draw (ARGS... args);  Create drawable of specified class T. ;  ; template<class T , class... ARGS> ; auto Draw (const std::shared_ptr< T > &what, ARGS... args);  Add object to be painted. ;  ; std::shared_ptr< RDrawable > Draw (std::shared_ptr< RDrawable > &&drawable);  Add existing drawable instance to canvas. ;  ; const RPadBase * FindPadForPrimitiveWithDisplayId (const std::string &display_id) const;  Find subpad which contains ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RPad.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPad.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPad.html:3897,Modifiability,inherit,inherited,3897,"ists. ;  ; const std::shared_ptr< RFrame > GetFrame () const;  Get a frame object if exists. ;  ; std::shared_ptr< RDrawable > GetPrimitive (unsigned num) const;  returns primitive of given number ;  ; auto GetPrimitives () const;  Get all primitives contained in the pad. ;  ; unsigned NumPrimitives () const;  returns number of primitives in the pad ;  ; bool Remove (const std::shared_ptr< RDrawable > &drawable);  Remove drawable from list of primitives. ;  ; bool Remove (const std::string &id);  Remove an object from the list of primitives. ;  ; bool RemoveAt (unsigned indx);  Remove drawable at specified position. ;  ; void UseStyle (const std::shared_ptr< RStyle > &style) override;  Use provided style for pad and all primitives inside. ;  ; void Wipe ();  Wipe the pad by clearing the list of primitives. ;  ;  Public Member Functions inherited from ROOT::Experimental::RDrawable;  RDrawable (const char *csstype);  ; virtual ~RDrawable ();  ; void ClearStyle ();  ; const std::string & GetCssClass () const;  ; const char * GetCssType () const;  ; const std::string & GetId () const;  ; void SetCssClass (const std::string &cl);  ; void SetId (const std::string &id);  . Public Attributes; RAttrBorder border {this, ""border""};  ! border attributes ;  . Protected Member Functions; std::unique_ptr< RDisplayItem > Display (const RDisplayContext &) final;  Create pad display item. ;  ;  Protected Member Functions inherited from ROOT::Experimental::RPadBase;  RPadBase (const char *csstype);  Allow derived classes to default construct a RPadBase. ;  ; void CollectShared (Internal::RIOSharedVector_t &) override;  Collect all shared items to resolve shared_ptr after IO. ;  ; void DisplayPrimitives (RPadBaseDisplayItem &paditem, RDisplayContext &ctxt);  Create display items for all primitives in the pad Each display item gets its special id, which used later for client-server communication Second parameter is version id which already delivered to the client. ;  ; void SetDrawableVe",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RPad.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPad.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPad.html:4476,Modifiability,inherit,inherited,4476,"(const std::string &id);  Remove an object from the list of primitives. ;  ; bool RemoveAt (unsigned indx);  Remove drawable at specified position. ;  ; void UseStyle (const std::shared_ptr< RStyle > &style) override;  Use provided style for pad and all primitives inside. ;  ; void Wipe ();  Wipe the pad by clearing the list of primitives. ;  ;  Public Member Functions inherited from ROOT::Experimental::RDrawable;  RDrawable (const char *csstype);  ; virtual ~RDrawable ();  ; void ClearStyle ();  ; const std::string & GetCssClass () const;  ; const char * GetCssType () const;  ; const std::string & GetId () const;  ; void SetCssClass (const std::string &cl);  ; void SetId (const std::string &id);  . Public Attributes; RAttrBorder border {this, ""border""};  ! border attributes ;  . Protected Member Functions; std::unique_ptr< RDisplayItem > Display (const RDisplayContext &) final;  Create pad display item. ;  ;  Protected Member Functions inherited from ROOT::Experimental::RPadBase;  RPadBase (const char *csstype);  Allow derived classes to default construct a RPadBase. ;  ; void CollectShared (Internal::RIOSharedVector_t &) override;  Collect all shared items to resolve shared_ptr after IO. ;  ; void DisplayPrimitives (RPadBaseDisplayItem &paditem, RDisplayContext &ctxt);  Create display items for all primitives in the pad Each display item gets its special id, which used later for client-server communication Second parameter is version id which already delivered to the client. ;  ; void SetDrawableVersion (Version_t vers) override;  Assign drawable version - for pad itself and all primitives. ;  ;  Protected Member Functions inherited from ROOT::Experimental::RDrawable;  RDrawable (const RDrawable &)=delete;  ; virtual void Execute (const std::string &);  ; RAttrMap & GetAttrMap ();  ; const RAttrMap & GetAttrMap () const;  ; Version_t GetVersion () const;  ; virtual bool IsFrameRequired () const;  ; bool MatchSelector (const std::string &selector) const;  Preliminar",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RPad.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPad.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPad.html:5178,Modifiability,inherit,inherited,5178,"DisplayContext &) final;  Create pad display item. ;  ;  Protected Member Functions inherited from ROOT::Experimental::RPadBase;  RPadBase (const char *csstype);  Allow derived classes to default construct a RPadBase. ;  ; void CollectShared (Internal::RIOSharedVector_t &) override;  Collect all shared items to resolve shared_ptr after IO. ;  ; void DisplayPrimitives (RPadBaseDisplayItem &paditem, RDisplayContext &ctxt);  Create display items for all primitives in the pad Each display item gets its special id, which used later for client-server communication Second parameter is version id which already delivered to the client. ;  ; void SetDrawableVersion (Version_t vers) override;  Assign drawable version - for pad itself and all primitives. ;  ;  Protected Member Functions inherited from ROOT::Experimental::RDrawable;  RDrawable (const RDrawable &)=delete;  ; virtual void Execute (const std::string &);  ; RAttrMap & GetAttrMap ();  ; const RAttrMap & GetAttrMap () const;  ; Version_t GetVersion () const;  ; virtual bool IsFrameRequired () const;  ; bool MatchSelector (const std::string &selector) const;  Preliminary method which checks if drawable matches with given selector Following selector are allowed: ""type"" or ""#id"" or "".class_name"" Here type is drawable kind like 'rect' or 'pad' id is drawable identifier, specified with RDrawable::SetId() method class_name is drawable class name, specified with RDrawable::SetCssClass() method. ;  ; virtual void OnDisplayItemDestroyed (RDisplayItem *) const;  ; RDrawable & operator= (const RDrawable &)=delete;  ; virtual void PopulateMenu (RMenuItems &);  ; void SetCssType (const char *csstype);  . Private Member Functions;  RPad ();  Create default pad. ;  ;  RPad (const RPadPos &pos, const RPadExtent &size);  Create a pad. ;  ; void SetParent (RPadBase *parent);  . Private Attributes; RPadBase * fParent {nullptr};  Pad containing this pad as a sub-pad. ;  ; RPadPos fPos;  pad position ;  ; RPadExtent fSize;  pad size ;  . F",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RPad.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPad.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPad.html:6490,Modifiability,inherit,inherited,6490,"ith given selector Following selector are allowed: ""type"" or ""#id"" or "".class_name"" Here type is drawable kind like 'rect' or 'pad' id is drawable identifier, specified with RDrawable::SetId() method class_name is drawable class name, specified with RDrawable::SetCssClass() method. ;  ; virtual void OnDisplayItemDestroyed (RDisplayItem *) const;  ; RDrawable & operator= (const RDrawable &)=delete;  ; virtual void PopulateMenu (RMenuItems &);  ; void SetCssType (const char *csstype);  . Private Member Functions;  RPad ();  Create default pad. ;  ;  RPad (const RPadPos &pos, const RPadExtent &size);  Create a pad. ;  ; void SetParent (RPadBase *parent);  . Private Attributes; RPadBase * fParent {nullptr};  Pad containing this pad as a sub-pad. ;  ; RPadPos fPos;  pad position ;  ; RPadExtent fSize;  pad size ;  . Friends; class RPadBase;  required to set parent ;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::RPadBase; using Primitives_t = std::vector< std::shared_ptr< RDrawable > >;  ;  Public Types inherited from ROOT::Experimental::RDrawable; using Version_t = uint64_t;  . #include <ROOT/RPad.hxx>. Inheritance diagram for ROOT::Experimental::RPad:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RPad() [1/3]. ROOT::Experimental::RPad::RPad ; (; ). inlineprivate . Create default pad. ; Definition at line 36 of file RPad.hxx. ◆ RPad() [2/3]. ROOT::Experimental::RPad::RPad ; (; const RPadPos & ; pos, . const RPadExtent & ; size . ). inlineprivate . Create a pad. ; Definition at line 39 of file RPad.hxx. ◆ RPad() [3/3]. ROOT::Experimental::RPad::RPad ; (; TRootIOCtor * ; ). inline . Constructor must be used only for I/O. ; Definition at line 58 of file RPad.hxx. ◆ ~RPad(). ROOT::Experimental::RPad::~RPad ; (; ). overridedefault . Destructor to have a vtable. . Member Function Documentation. ◆ Display(). std::unique_ptr< RDisplayItem > RPad::Displa",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RPad.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPad.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPad.html:6618,Modifiability,inherit,inherited,6618,"ith given selector Following selector are allowed: ""type"" or ""#id"" or "".class_name"" Here type is drawable kind like 'rect' or 'pad' id is drawable identifier, specified with RDrawable::SetId() method class_name is drawable class name, specified with RDrawable::SetCssClass() method. ;  ; virtual void OnDisplayItemDestroyed (RDisplayItem *) const;  ; RDrawable & operator= (const RDrawable &)=delete;  ; virtual void PopulateMenu (RMenuItems &);  ; void SetCssType (const char *csstype);  . Private Member Functions;  RPad ();  Create default pad. ;  ;  RPad (const RPadPos &pos, const RPadExtent &size);  Create a pad. ;  ; void SetParent (RPadBase *parent);  . Private Attributes; RPadBase * fParent {nullptr};  Pad containing this pad as a sub-pad. ;  ; RPadPos fPos;  pad position ;  ; RPadExtent fSize;  pad size ;  . Friends; class RPadBase;  required to set parent ;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::RPadBase; using Primitives_t = std::vector< std::shared_ptr< RDrawable > >;  ;  Public Types inherited from ROOT::Experimental::RDrawable; using Version_t = uint64_t;  . #include <ROOT/RPad.hxx>. Inheritance diagram for ROOT::Experimental::RPad:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RPad() [1/3]. ROOT::Experimental::RPad::RPad ; (; ). inlineprivate . Create default pad. ; Definition at line 36 of file RPad.hxx. ◆ RPad() [2/3]. ROOT::Experimental::RPad::RPad ; (; const RPadPos & ; pos, . const RPadExtent & ; size . ). inlineprivate . Create a pad. ; Definition at line 39 of file RPad.hxx. ◆ RPad() [3/3]. ROOT::Experimental::RPad::RPad ; (; TRootIOCtor * ; ). inline . Constructor must be used only for I/O. ; Definition at line 58 of file RPad.hxx. ◆ ~RPad(). ROOT::Experimental::RPad::~RPad ; (; ). overridedefault . Destructor to have a vtable. . Member Function Documentation. ◆ Display(). std::unique_ptr< RDisplayItem > RPad::Displa",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RPad.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPad.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPad.html:3834,Usability,clear,clearing,3834,"t std::string &display_id) const;  Find primitive with unique id, produce for RDisplayItem Such id used for client-server identification of objects. ;  ; std::shared_ptr< RFrame > GetFrame ();  Get a frame object if exists. ;  ; const std::shared_ptr< RFrame > GetFrame () const;  Get a frame object if exists. ;  ; std::shared_ptr< RDrawable > GetPrimitive (unsigned num) const;  returns primitive of given number ;  ; auto GetPrimitives () const;  Get all primitives contained in the pad. ;  ; unsigned NumPrimitives () const;  returns number of primitives in the pad ;  ; bool Remove (const std::shared_ptr< RDrawable > &drawable);  Remove drawable from list of primitives. ;  ; bool Remove (const std::string &id);  Remove an object from the list of primitives. ;  ; bool RemoveAt (unsigned indx);  Remove drawable at specified position. ;  ; void UseStyle (const std::shared_ptr< RStyle > &style) override;  Use provided style for pad and all primitives inside. ;  ; void Wipe ();  Wipe the pad by clearing the list of primitives. ;  ;  Public Member Functions inherited from ROOT::Experimental::RDrawable;  RDrawable (const char *csstype);  ; virtual ~RDrawable ();  ; void ClearStyle ();  ; const std::string & GetCssClass () const;  ; const char * GetCssType () const;  ; const std::string & GetId () const;  ; void SetCssClass (const std::string &cl);  ; void SetId (const std::string &id);  . Public Attributes; RAttrBorder border {this, ""border""};  ! border attributes ;  . Protected Member Functions; std::unique_ptr< RDisplayItem > Display (const RDisplayContext &) final;  Create pad display item. ;  ;  Protected Member Functions inherited from ROOT::Experimental::RPadBase;  RPadBase (const char *csstype);  Allow derived classes to default construct a RPadBase. ;  ; void CollectShared (Internal::RIOSharedVector_t &) override;  Collect all shared items to resolve shared_ptr after IO. ;  ; void DisplayPrimitives (RPadBaseDisplayItem &paditem, RDisplayContext &ctxt);  Create display",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RPad.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPad.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPadBase.html:864,Modifiability,inherit,inherited,864,". ROOT: ROOT::Experimental::RPadBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Experimental::RPadBase Class ReferenceabstractGraphics » ROOT7 Graphics » ROOT7 Pad related classes. ; Base class for graphic containers for RDrawable-s. ; AuthorsAxel Naumann axel@.nosp@m.cern.nosp@m..ch Sergey Linev s.lin.nosp@m.ev@g.nosp@m.si.de ; Date2019-10-02 ; WarningThis is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome! ; Definition at line 37 of file RPadBase.hxx. Public Types; using Primitives_t = std::vector< std::shared_ptr< RDrawable > >;  ;  Public Types inherited from ROOT::Experimental::RDrawable; using Version_t = uint64_t;  . Public Member Functions;  ~RPadBase () override;  ; template<class T , class... ARGS> ; std::shared_ptr< T > Add (ARGS... args);  Add drawable of specified class T. ;  ; std::shared_ptr< RFrame > AddFrame ();  Add a frame object for the pad. ;  ; std::shared_ptr< RPad > AddPad (const RPadPos &, const RPadExtent &);  Add subpad. ;  ; std::vector< std::vector< std::shared_ptr< RPad > > > Divide (int nHoriz, int nVert, const RPadExtent &padding={});  Divide this pad into a grid of subpads with padding in between. ;  ; template<class T , class... ARGS> ; std::shared_ptr< T > Draw (ARGS... args);  Create drawable of specified class T. ;  ; template<class T , class... ARGS> ; auto Draw (const std::shared_ptr< T > &what, ARGS... args);  Add object to be painted. ;  ; std::shared_ptr< RDrawable > Draw (std::shared_ptr< RDrawable > &&drawable);  Add existing drawable instance to canvas. ;  ; const RPadBase * FindPadForPrimitiveWithDisplayId (const std::string &display_id) const;  Find subpad which contains primitive with given display id. ;  ; std::shar",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RPadBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPadBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPadBase.html:3438,Modifiability,inherit,inherited,3438,"ists. ;  ; const std::shared_ptr< RFrame > GetFrame () const;  Get a frame object if exists. ;  ; std::shared_ptr< RDrawable > GetPrimitive (unsigned num) const;  returns primitive of given number ;  ; auto GetPrimitives () const;  Get all primitives contained in the pad. ;  ; unsigned NumPrimitives () const;  returns number of primitives in the pad ;  ; bool Remove (const std::shared_ptr< RDrawable > &drawable);  Remove drawable from list of primitives. ;  ; bool Remove (const std::string &id);  Remove an object from the list of primitives. ;  ; bool RemoveAt (unsigned indx);  Remove drawable at specified position. ;  ; void UseStyle (const std::shared_ptr< RStyle > &style) override;  Use provided style for pad and all primitives inside. ;  ; void Wipe ();  Wipe the pad by clearing the list of primitives. ;  ;  Public Member Functions inherited from ROOT::Experimental::RDrawable;  RDrawable (const char *csstype);  ; virtual ~RDrawable ();  ; void ClearStyle ();  ; const std::string & GetCssClass () const;  ; const char * GetCssType () const;  ; const std::string & GetId () const;  ; void SetCssClass (const std::string &cl);  ; void SetId (const std::string &id);  . Protected Member Functions;  RPadBase (const char *csstype);  Allow derived classes to default construct a RPadBase. ;  ; void CollectShared (Internal::RIOSharedVector_t &) override;  Collect all shared items to resolve shared_ptr after IO. ;  ; void DisplayPrimitives (RPadBaseDisplayItem &paditem, RDisplayContext &ctxt);  Create display items for all primitives in the pad Each display item gets its special id, which used later for client-server communication Second parameter is version id which already delivered to the client. ;  ; void SetDrawableVersion (Version_t vers) override;  Assign drawable version - for pad itself and all primitives. ;  ;  Protected Member Functions inherited from ROOT::Experimental::RDrawable;  RDrawable (const RDrawable &)=delete;  ; virtual std::unique_ptr< RDisplayItem > Dis",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RPadBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPadBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPadBase.html:4460,Modifiability,inherit,inherited,4460,";  ; const std::string & GetCssClass () const;  ; const char * GetCssType () const;  ; const std::string & GetId () const;  ; void SetCssClass (const std::string &cl);  ; void SetId (const std::string &id);  . Protected Member Functions;  RPadBase (const char *csstype);  Allow derived classes to default construct a RPadBase. ;  ; void CollectShared (Internal::RIOSharedVector_t &) override;  Collect all shared items to resolve shared_ptr after IO. ;  ; void DisplayPrimitives (RPadBaseDisplayItem &paditem, RDisplayContext &ctxt);  Create display items for all primitives in the pad Each display item gets its special id, which used later for client-server communication Second parameter is version id which already delivered to the client. ;  ; void SetDrawableVersion (Version_t vers) override;  Assign drawable version - for pad itself and all primitives. ;  ;  Protected Member Functions inherited from ROOT::Experimental::RDrawable;  RDrawable (const RDrawable &)=delete;  ; virtual std::unique_ptr< RDisplayItem > Display (const RDisplayContext &);  Creates display item for drawable By default item contains drawable data itself. ;  ; virtual void Execute (const std::string &);  ; RAttrMap & GetAttrMap ();  ; const RAttrMap & GetAttrMap () const;  ; Version_t GetVersion () const;  ; virtual bool IsFrameRequired () const;  ; bool MatchSelector (const std::string &selector) const;  Preliminary method which checks if drawable matches with given selector Following selector are allowed: ""type"" or ""#id"" or "".class_name"" Here type is drawable kind like 'rect' or 'pad' id is drawable identifier, specified with RDrawable::SetId() method class_name is drawable class name, specified with RDrawable::SetCssClass() method. ;  ; virtual void OnDisplayItemDestroyed (RDisplayItem *) const;  ; RDrawable & operator= (const RDrawable &)=delete;  ; virtual void PopulateMenu (RMenuItems &);  ; void SetCssType (const char *csstype);  . Private Types; using Primitive_t = Internal::RIOShared< RDraw",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RPadBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPadBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPadBase.html:9144,Security,access,accessed,9144,"of file RPadBase.cxx. ◆ Divide(). std::vector< std::vector< std::shared_ptr< RPad > > > RPadBase::Divide ; (; int ; nHoriz, . int ; nVert, . const RPadExtent & ; padding = {} . ). Divide this pad into a grid of subpads with padding in between. ; Divide pad on nHoriz X nVert subpads Return array of array of pads.; Parameters. nHorizNumber of horizontal pads. ; nVertNumber of vertical pads. ; paddingPadding between pads. . Returnsvector of vector (ret[x][y]) of created pads. ; Definition at line 154 of file RPadBase.cxx. ◆ Draw() [1/3]. template<class T , class... ARGS> . std::shared_ptr< T > ROOT::Experimental::RPadBase::Draw ; (; ARGS... ; args). inline . Create drawable of specified class T. ; Definition at line 95 of file RPadBase.hxx. ◆ Draw() [2/3]. template<class T , class... ARGS> . auto ROOT::Experimental::RPadBase::Draw ; (; const std::shared_ptr< T > & ; what, . ARGS... ; args . ). inline . Add object to be painted. ; Correspondent drawable will be created via GetDrawable() function which should be defined and be accessed at calling time. If required, extra arguments for GetDrawable() function can be provided. ; Definition at line 81 of file RPadBase.hxx. ◆ Draw() [3/3]. std::shared_ptr< RDrawable > ROOT::Experimental::RPadBase::Draw ; (; std::shared_ptr< RDrawable > && ; drawable). inline . Add existing drawable instance to canvas. ; Definition at line 120 of file RPadBase.hxx. ◆ FindPadForPrimitiveWithDisplayId(). const RPadBase * RPadBase::FindPadForPrimitiveWithDisplayId ; (; const std::string & ; display_id); const. Find subpad which contains primitive with given display id. ; Definition at line 87 of file RPadBase.cxx. ◆ FindPrimitive(). std::shared_ptr< RDrawable > RPadBase::FindPrimitive ; (; const std::string & ; id); const. Find primitive with specified id. ; Definition at line 40 of file RPadBase.cxx. ◆ FindPrimitiveByDisplayId(). std::shared_ptr< RDrawable > RPadBase::FindPrimitiveByDisplayId ; (; const std::string & ; display_id); const. Find pr",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RPadBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPadBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPadBase.html:3375,Usability,clear,clearing,3375,"s to the top-most canvas, if any (const version). ;  ; virtual RCanvas * GetCanvas ()=0;  Access to the top-most canvas, if any (non-const version). ;  ; std::shared_ptr< RFrame > GetFrame ();  Get a frame object if exists. ;  ; const std::shared_ptr< RFrame > GetFrame () const;  Get a frame object if exists. ;  ; std::shared_ptr< RDrawable > GetPrimitive (unsigned num) const;  returns primitive of given number ;  ; auto GetPrimitives () const;  Get all primitives contained in the pad. ;  ; unsigned NumPrimitives () const;  returns number of primitives in the pad ;  ; bool Remove (const std::shared_ptr< RDrawable > &drawable);  Remove drawable from list of primitives. ;  ; bool Remove (const std::string &id);  Remove an object from the list of primitives. ;  ; bool RemoveAt (unsigned indx);  Remove drawable at specified position. ;  ; void UseStyle (const std::shared_ptr< RStyle > &style) override;  Use provided style for pad and all primitives inside. ;  ; void Wipe ();  Wipe the pad by clearing the list of primitives. ;  ;  Public Member Functions inherited from ROOT::Experimental::RDrawable;  RDrawable (const char *csstype);  ; virtual ~RDrawable ();  ; void ClearStyle ();  ; const std::string & GetCssClass () const;  ; const char * GetCssType () const;  ; const std::string & GetId () const;  ; void SetCssClass (const std::string &cl);  ; void SetId (const std::string &id);  . Protected Member Functions;  RPadBase (const char *csstype);  Allow derived classes to default construct a RPadBase. ;  ; void CollectShared (Internal::RIOSharedVector_t &) override;  Collect all shared items to resolve shared_ptr after IO. ;  ; void DisplayPrimitives (RPadBaseDisplayItem &paditem, RDisplayContext &ctxt);  Create display items for all primitives in the pad Each display item gets its special id, which used later for client-server communication Second parameter is version id which already delivered to the client. ;  ; void SetDrawableVersion (Version_t vers) override;  Assign ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RPadBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPadBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPadBase.html:13124,Usability,clear,clearing,13124,). privatedelete . Disable assignment. . ◆ Remove() [1/2]. bool ROOT::Experimental::RPadBase::Remove ; (; const std::shared_ptr< RDrawable > & ; drawable). inline . Remove drawable from list of primitives. ; Definition at line 169 of file RPadBase.hxx. ◆ Remove() [2/2]. bool ROOT::Experimental::RPadBase::Remove ; (; const std::string & ; id). inline . Remove an object from the list of primitives. ; Definition at line 157 of file RPadBase.hxx. ◆ RemoveAt(). bool ROOT::Experimental::RPadBase::RemoveAt ; (; unsigned ; indx). inline . Remove drawable at specified position. ; Definition at line 181 of file RPadBase.hxx. ◆ SetDrawableVersion(). void RPadBase::SetDrawableVersion ; (; Version_t ; vers). overrideprotectedvirtual . Assign drawable version - for pad itself and all primitives. ; Reimplemented from ROOT::Experimental::RDrawable.; Definition at line 238 of file RPadBase.cxx. ◆ TestIfFrameRequired(). void ROOT::Experimental::RPadBase::TestIfFrameRequired ; (; const RDrawable * ; drawable). inlineprivate . Definition at line 53 of file RPadBase.hxx. ◆ UseStyle(). void RPadBase::UseStyle ; (; const std::shared_ptr< RStyle > & ; style). overridevirtual . Use provided style for pad and all primitives inside. ; Reimplemented from ROOT::Experimental::RDrawable.; Definition at line 30 of file RPadBase.cxx. ◆ Wipe(). void ROOT::Experimental::RPadBase::Wipe ; (; ). inline . Wipe the pad by clearing the list of primitives. ; Definition at line 190 of file RPadBase.hxx. Member Data Documentation. ◆ fPrimitives. std::vector<Primitive_t> ROOT::Experimental::RPadBase::fPrimitives. private . Content of the pad. ; Definition at line 45 of file RPadBase.hxx. Libraries for ROOT::Experimental::RPadBase:. [legend]; The documentation for this class was generated from the following files:; graf2d/gpadv7/inc/ROOT/RPadBase.hxx; graf2d/gpadv7/src/RPadBase.cxx. ROOTExperimentalRPadBase. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:11 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RPadBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPadBase.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPadBaseDisplayItem.html:1193,Modifiability,inherit,inherited,1193,"Class ReferenceGraphics » ROOT7 Graphics » ROOT7 Pad related classes. ; class RPadBaseDisplayItem ; Display item for the RPadBase class, includes primitives, attributes and frame AuthorSergey Linev ; Date2017-05-31 ; WarningThis is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome! ; Definition at line 28 of file RPadDisplayItem.hxx. Public Types; using PadPrimitives_t = std::vector< std::unique_ptr< RDisplayItem > >;  . Public Member Functions;  RPadBaseDisplayItem ()=default;  ;  ~RPadBaseDisplayItem () override=default;  ; void Add (std::unique_ptr< RDisplayItem > &&item, std::shared_ptr< RStyle > &&style);  Add display item and style which should be used for it. ;  ; void SetAttributes (const RAttrMap *f);  ; void SetPadStyle (std::shared_ptr< RStyle > &&style);  Assign style for the pad. ;  ;  Public Member Functions inherited from ROOT::Experimental::RDisplayItem;  RDisplayItem ()=default;  ;  RDisplayItem (bool dummy);  ; virtual ~RDisplayItem ();  ; virtual void BuildFullId (const std::string &prefix);  Build full id, including prefix and object index. ;  ; unsigned GetIndex () const;  ; std::string GetObjectID () const;  ; void SetIndex (unsigned indx);  ; void SetObjectID (const std::string &id);  ; void SetObjectIDAsPtr (const void *ptr);  Assign id using arbitrary pointer value Typically drawable pointer should be used here. ;  ; void SetStyle (RStyle *style);  . Protected Attributes; const RAttrMap * fAttr {nullptr};  temporary pointer on attributes ;  ; PadPrimitives_t fPrimitives;  display items for all primitives in the pad ;  ; std::vector< std::shared_ptr< RStyle > > fStyles;  ! locked styles of the objects and pad until streaming is performed ;  ;  Protected Attributes inherited from ROOT::Experimental::RDisplayItem; bool fDummy {false};  if true, just placeholder for drawable which does not changed ;  ; unsigned fIndex {0};  ! index inside current pad, used to produce fully-qualified id,",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RPadBaseDisplayItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPadBaseDisplayItem.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPadBaseDisplayItem.html:2076,Modifiability,inherit,inherited,2076,"tPadStyle (std::shared_ptr< RStyle > &&style);  Assign style for the pad. ;  ;  Public Member Functions inherited from ROOT::Experimental::RDisplayItem;  RDisplayItem ()=default;  ;  RDisplayItem (bool dummy);  ; virtual ~RDisplayItem ();  ; virtual void BuildFullId (const std::string &prefix);  Build full id, including prefix and object index. ;  ; unsigned GetIndex () const;  ; std::string GetObjectID () const;  ; void SetIndex (unsigned indx);  ; void SetObjectID (const std::string &id);  ; void SetObjectIDAsPtr (const void *ptr);  Assign id using arbitrary pointer value Typically drawable pointer should be used here. ;  ; void SetStyle (RStyle *style);  . Protected Attributes; const RAttrMap * fAttr {nullptr};  temporary pointer on attributes ;  ; PadPrimitives_t fPrimitives;  display items for all primitives in the pad ;  ; std::vector< std::shared_ptr< RStyle > > fStyles;  ! locked styles of the objects and pad until streaming is performed ;  ;  Protected Attributes inherited from ROOT::Experimental::RDisplayItem; bool fDummy {false};  if true, just placeholder for drawable which does not changed ;  ; unsigned fIndex {0};  ! index inside current pad, used to produce fully-qualified id, not send to client ;  ; std::string fObjectID;  unique object identifier ;  ; RStyle * fStyle {nullptr};  style object ;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::Experimental::RDisplayItem; static std::string ObjectIDFromPtr (const void *ptr);  Construct fillid using pointer value. ;  . #include <ROOT/RPadDisplayItem.hxx>. Inheritance diagram for ROOT::Experimental::RPadBaseDisplayItem:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ PadPrimitives_t. using ROOT::Experimental::RPadBaseDisplayItem::PadPrimitives_t = std::vector<std::unique_ptr<RDisplayItem> >. Definition at line 31 of file RPadDisplayItem.hxx. Constructor & Destructor Documentation. ◆ RPadBa",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RPadBaseDisplayItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPadBaseDisplayItem.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPadBaseDisplayItem.html:2486,Modifiability,inherit,inherited,2486,"nsigned indx);  ; void SetObjectID (const std::string &id);  ; void SetObjectIDAsPtr (const void *ptr);  Assign id using arbitrary pointer value Typically drawable pointer should be used here. ;  ; void SetStyle (RStyle *style);  . Protected Attributes; const RAttrMap * fAttr {nullptr};  temporary pointer on attributes ;  ; PadPrimitives_t fPrimitives;  display items for all primitives in the pad ;  ; std::vector< std::shared_ptr< RStyle > > fStyles;  ! locked styles of the objects and pad until streaming is performed ;  ;  Protected Attributes inherited from ROOT::Experimental::RDisplayItem; bool fDummy {false};  if true, just placeholder for drawable which does not changed ;  ; unsigned fIndex {0};  ! index inside current pad, used to produce fully-qualified id, not send to client ;  ; std::string fObjectID;  unique object identifier ;  ; RStyle * fStyle {nullptr};  style object ;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::Experimental::RDisplayItem; static std::string ObjectIDFromPtr (const void *ptr);  Construct fillid using pointer value. ;  . #include <ROOT/RPadDisplayItem.hxx>. Inheritance diagram for ROOT::Experimental::RPadBaseDisplayItem:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ PadPrimitives_t. using ROOT::Experimental::RPadBaseDisplayItem::PadPrimitives_t = std::vector<std::unique_ptr<RDisplayItem> >. Definition at line 31 of file RPadDisplayItem.hxx. Constructor & Destructor Documentation. ◆ RPadBaseDisplayItem(). ROOT::Experimental::RPadBaseDisplayItem::RPadBaseDisplayItem ; (; ). default . ◆ ~RPadBaseDisplayItem(). ROOT::Experimental::RPadBaseDisplayItem::~RPadBaseDisplayItem ; (; ). overridedefault . Member Function Documentation. ◆ Add(). void ROOT::Experimental::RPadBaseDisplayItem::Add ; (; std::unique_ptr< RDisplayItem > && ; item, . std::shared_ptr< RStyle > && ; style . ). inline . Add display item and style which s",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RPadBaseDisplayItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPadBaseDisplayItem.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPadBaseDisplayItem.html:2039,Performance,perform,performed,2039,"tPadStyle (std::shared_ptr< RStyle > &&style);  Assign style for the pad. ;  ;  Public Member Functions inherited from ROOT::Experimental::RDisplayItem;  RDisplayItem ()=default;  ;  RDisplayItem (bool dummy);  ; virtual ~RDisplayItem ();  ; virtual void BuildFullId (const std::string &prefix);  Build full id, including prefix and object index. ;  ; unsigned GetIndex () const;  ; std::string GetObjectID () const;  ; void SetIndex (unsigned indx);  ; void SetObjectID (const std::string &id);  ; void SetObjectIDAsPtr (const void *ptr);  Assign id using arbitrary pointer value Typically drawable pointer should be used here. ;  ; void SetStyle (RStyle *style);  . Protected Attributes; const RAttrMap * fAttr {nullptr};  temporary pointer on attributes ;  ; PadPrimitives_t fPrimitives;  display items for all primitives in the pad ;  ; std::vector< std::shared_ptr< RStyle > > fStyles;  ! locked styles of the objects and pad until streaming is performed ;  ;  Protected Attributes inherited from ROOT::Experimental::RDisplayItem; bool fDummy {false};  if true, just placeholder for drawable which does not changed ;  ; unsigned fIndex {0};  ! index inside current pad, used to produce fully-qualified id, not send to client ;  ; std::string fObjectID;  unique object identifier ;  ; RStyle * fStyle {nullptr};  style object ;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::Experimental::RDisplayItem; static std::string ObjectIDFromPtr (const void *ptr);  Construct fillid using pointer value. ;  . #include <ROOT/RPadDisplayItem.hxx>. Inheritance diagram for ROOT::Experimental::RPadBaseDisplayItem:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ PadPrimitives_t. using ROOT::Experimental::RPadBaseDisplayItem::PadPrimitives_t = std::vector<std::unique_ptr<RDisplayItem> >. Definition at line 31 of file RPadDisplayItem.hxx. Constructor & Destructor Documentation. ◆ RPadBa",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RPadBaseDisplayItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPadBaseDisplayItem.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPadBaseDisplayItem.html:4544,Performance,perform,performed,4544,"Primitives_t = std::vector<std::unique_ptr<RDisplayItem> >. Definition at line 31 of file RPadDisplayItem.hxx. Constructor & Destructor Documentation. ◆ RPadBaseDisplayItem(). ROOT::Experimental::RPadBaseDisplayItem::RPadBaseDisplayItem ; (; ). default . ◆ ~RPadBaseDisplayItem(). ROOT::Experimental::RPadBaseDisplayItem::~RPadBaseDisplayItem ; (; ). overridedefault . Member Function Documentation. ◆ Add(). void ROOT::Experimental::RPadBaseDisplayItem::Add ; (; std::unique_ptr< RDisplayItem > && ; item, . std::shared_ptr< RStyle > && ; style . ). inline . Add display item and style which should be used for it. ; Definition at line 42 of file RPadDisplayItem.hxx. ◆ SetAttributes(). void ROOT::Experimental::RPadBaseDisplayItem::SetAttributes ; (; const RAttrMap * ; f). inline . Definition at line 40 of file RPadDisplayItem.hxx. ◆ SetPadStyle(). void ROOT::Experimental::RPadBaseDisplayItem::SetPadStyle ; (; std::shared_ptr< RStyle > && ; style). inline . Assign style for the pad. ; Definition at line 51 of file RPadDisplayItem.hxx. Member Data Documentation. ◆ fAttr. const RAttrMap* ROOT::Experimental::RPadBaseDisplayItem::fAttr {nullptr}. protected . temporary pointer on attributes ; Definition at line 34 of file RPadDisplayItem.hxx. ◆ fPrimitives. PadPrimitives_t ROOT::Experimental::RPadBaseDisplayItem::fPrimitives. protected . display items for all primitives in the pad ; Definition at line 35 of file RPadDisplayItem.hxx. ◆ fStyles. std::vector<std::shared_ptr<RStyle> > ROOT::Experimental::RPadBaseDisplayItem::fStyles. protected . ! locked styles of the objects and pad until streaming is performed ; Definition at line 36 of file RPadDisplayItem.hxx. Libraries for ROOT::Experimental::RPadBaseDisplayItem:. [legend]; The documentation for this class was generated from the following file:; graf2d/gpadv7/inc/ROOT/RPadDisplayItem.hxx. ROOTExperimentalRPadBaseDisplayItem. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RPadBaseDisplayItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPadBaseDisplayItem.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html:725,Availability,error,error,725,". ROOT: ROOT::Experimental::RResult< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Experimental::RResult< T > Class Template ReferenceCore ROOT classes » Base ROOT classes. ; template<typename T>; class ROOT::Experimental::RResult< T >The class is used as a return type for operations that can fail; wraps a value of type T or an RError. ; The RResult<T> class and their related classes are used for call chains that can throw exceptions, such as I/O code paths. Throwing of the exception is deferred to allow for if (result) style error checking where it makes sense. If an RResult in error state leaves the scope unchecked, it will throw.; A function returning an RResult might look like this:; RResult<int> MyIOFunc(); {; int rv = syscall(...);; if (rv == -1); return R__FAIL(""user-facing error message"");; if (rv == kShortcut); return 42;; return R__FORWARD_RESULT(FuncThatReturnsRResultOfInt());; }; R__FORWARD_RESULT#define R__FORWARD_RESULT(res)Short-hand to return an RResult<T> value from a subroutine to the calling stack frame.Definition RError.hxx:292; R__FAIL#define R__FAIL(msg)Short-hand to return an RResult<T> in an error state; the RError is implicitly converted into RResult...Definition RError.hxx:290; ROOT::Experimental::RResultThe class is used as a return type for operations that can fail; wraps a value of type T or an RError...Definition RError.hxx:194; Code using MyIOFunc might look like this:; auto result = MyIOOperation();; if (!result) {; // custom error handling or result.Throw(); }; switch (result.Inspect()) {; ...; }; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UI",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html:779,Availability,error,error,779,". ROOT: ROOT::Experimental::RResult< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Experimental::RResult< T > Class Template ReferenceCore ROOT classes » Base ROOT classes. ; template<typename T>; class ROOT::Experimental::RResult< T >The class is used as a return type for operations that can fail; wraps a value of type T or an RError. ; The RResult<T> class and their related classes are used for call chains that can throw exceptions, such as I/O code paths. Throwing of the exception is deferred to allow for if (result) style error checking where it makes sense. If an RResult in error state leaves the scope unchecked, it will throw.; A function returning an RResult might look like this:; RResult<int> MyIOFunc(); {; int rv = syscall(...);; if (rv == -1); return R__FAIL(""user-facing error message"");; if (rv == kShortcut); return 42;; return R__FORWARD_RESULT(FuncThatReturnsRResultOfInt());; }; R__FORWARD_RESULT#define R__FORWARD_RESULT(res)Short-hand to return an RResult<T> value from a subroutine to the calling stack frame.Definition RError.hxx:292; R__FAIL#define R__FAIL(msg)Short-hand to return an RResult<T> in an error state; the RError is implicitly converted into RResult...Definition RError.hxx:290; ROOT::Experimental::RResultThe class is used as a return type for operations that can fail; wraps a value of type T or an RError...Definition RError.hxx:194; Code using MyIOFunc might look like this:; auto result = MyIOOperation();; if (!result) {; // custom error handling or result.Throw(); }; switch (result.Inspect()) {; ...; }; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UI",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html:985,Availability,error,error,985,"r. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Experimental::RResult< T > Class Template ReferenceCore ROOT classes » Base ROOT classes. ; template<typename T>; class ROOT::Experimental::RResult< T >The class is used as a return type for operations that can fail; wraps a value of type T or an RError. ; The RResult<T> class and their related classes are used for call chains that can throw exceptions, such as I/O code paths. Throwing of the exception is deferred to allow for if (result) style error checking where it makes sense. If an RResult in error state leaves the scope unchecked, it will throw.; A function returning an RResult might look like this:; RResult<int> MyIOFunc(); {; int rv = syscall(...);; if (rv == -1); return R__FAIL(""user-facing error message"");; if (rv == kShortcut); return 42;; return R__FORWARD_RESULT(FuncThatReturnsRResultOfInt());; }; R__FORWARD_RESULT#define R__FORWARD_RESULT(res)Short-hand to return an RResult<T> value from a subroutine to the calling stack frame.Definition RError.hxx:292; R__FAIL#define R__FAIL(msg)Short-hand to return an RResult<T> in an error state; the RError is implicitly converted into RResult...Definition RError.hxx:290; ROOT::Experimental::RResultThe class is used as a return type for operations that can fail; wraps a value of type T or an RError...Definition RError.hxx:194; Code using MyIOFunc might look like this:; auto result = MyIOOperation();; if (!result) {; // custom error handling or result.Throw(); }; switch (result.Inspect()) {; ...; }; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; Note that RResult<vo",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html:1326,Availability,error,error,1326,"ReferenceCore ROOT classes » Base ROOT classes. ; template<typename T>; class ROOT::Experimental::RResult< T >The class is used as a return type for operations that can fail; wraps a value of type T or an RError. ; The RResult<T> class and their related classes are used for call chains that can throw exceptions, such as I/O code paths. Throwing of the exception is deferred to allow for if (result) style error checking where it makes sense. If an RResult in error state leaves the scope unchecked, it will throw.; A function returning an RResult might look like this:; RResult<int> MyIOFunc(); {; int rv = syscall(...);; if (rv == -1); return R__FAIL(""user-facing error message"");; if (rv == kShortcut); return 42;; return R__FORWARD_RESULT(FuncThatReturnsRResultOfInt());; }; R__FORWARD_RESULT#define R__FORWARD_RESULT(res)Short-hand to return an RResult<T> value from a subroutine to the calling stack frame.Definition RError.hxx:292; R__FAIL#define R__FAIL(msg)Short-hand to return an RResult<T> in an error state; the RError is implicitly converted into RResult...Definition RError.hxx:290; ROOT::Experimental::RResultThe class is used as a return type for operations that can fail; wraps a value of type T or an RError...Definition RError.hxx:194; Code using MyIOFunc might look like this:; auto result = MyIOOperation();; if (!result) {; // custom error handling or result.Throw(); }; switch (result.Inspect()) {; ...; }; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; Note that RResult<void> can be used for a function without return value, like this; RResult<void> DoSomething(); {; if (failure); return R__FAIL(""user-facing error messge"");; return RResult<void>::Success();; }; RResult<T>::Unwrap() can be used as a sho",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html:1675,Availability,error,error,1675,"such as I/O code paths. Throwing of the exception is deferred to allow for if (result) style error checking where it makes sense. If an RResult in error state leaves the scope unchecked, it will throw.; A function returning an RResult might look like this:; RResult<int> MyIOFunc(); {; int rv = syscall(...);; if (rv == -1); return R__FAIL(""user-facing error message"");; if (rv == kShortcut); return 42;; return R__FORWARD_RESULT(FuncThatReturnsRResultOfInt());; }; R__FORWARD_RESULT#define R__FORWARD_RESULT(res)Short-hand to return an RResult<T> value from a subroutine to the calling stack frame.Definition RError.hxx:292; R__FAIL#define R__FAIL(msg)Short-hand to return an RResult<T> in an error state; the RError is implicitly converted into RResult...Definition RError.hxx:290; ROOT::Experimental::RResultThe class is used as a return type for operations that can fail; wraps a value of type T or an RError...Definition RError.hxx:194; Code using MyIOFunc might look like this:; auto result = MyIOOperation();; if (!result) {; // custom error handling or result.Throw(); }; switch (result.Inspect()) {; ...; }; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; Note that RResult<void> can be used for a function without return value, like this; RResult<void> DoSomething(); {; if (failure); return R__FAIL(""user-facing error messge"");; return RResult<void>::Success();; }; RResult<T>::Unwrap() can be used as a short hand for ""give me the wrapped value or, in case of an error, throw"". For instance:; int value = FuncThatReturnsRResultOfInt().Unwrap(); // may throw; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html:2185,Availability,failure,failure,2185,"ck frame.Definition RError.hxx:292; R__FAIL#define R__FAIL(msg)Short-hand to return an RResult<T> in an error state; the RError is implicitly converted into RResult...Definition RError.hxx:290; ROOT::Experimental::RResultThe class is used as a return type for operations that can fail; wraps a value of type T or an RError...Definition RError.hxx:194; Code using MyIOFunc might look like this:; auto result = MyIOOperation();; if (!result) {; // custom error handling or result.Throw(); }; switch (result.Inspect()) {; ...; }; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; Note that RResult<void> can be used for a function without return value, like this; RResult<void> DoSomething(); {; if (failure); return R__FAIL(""user-facing error messge"");; return RResult<void>::Success();; }; RResult<T>::Unwrap() can be used as a short hand for ""give me the wrapped value or, in case of an error, throw"". For instance:; int value = FuncThatReturnsRResultOfInt().Unwrap(); // may throw; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; There is no implict operator that converts RResult<T> to T. This is intentional to make it clear in the calling code where an exception may be thrown. ; Definition at line 194 of file RError.hxx. Public Member Functions;  RResult (const RResult &other)=delete;  ;  RResult (const T &value);  ;  RResult (RError &&error);  ;  RResult (RResult &&other)=default;  ;  RResult (T &&value);  ;  ~RResult ()=default;  ; RResult & Forward (RError::RLocation &&sourceLocation);  Used by R__FORWARD_RESULT in order to keep track of the stack trace in cas",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html:2223,Availability,error,error,2223,"ck frame.Definition RError.hxx:292; R__FAIL#define R__FAIL(msg)Short-hand to return an RResult<T> in an error state; the RError is implicitly converted into RResult...Definition RError.hxx:290; ROOT::Experimental::RResultThe class is used as a return type for operations that can fail; wraps a value of type T or an RError...Definition RError.hxx:194; Code using MyIOFunc might look like this:; auto result = MyIOOperation();; if (!result) {; // custom error handling or result.Throw(); }; switch (result.Inspect()) {; ...; }; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; Note that RResult<void> can be used for a function without return value, like this; RResult<void> DoSomething(); {; if (failure); return R__FAIL(""user-facing error messge"");; return RResult<void>::Success();; }; RResult<T>::Unwrap() can be used as a short hand for ""give me the wrapped value or, in case of an error, throw"". For instance:; int value = FuncThatReturnsRResultOfInt().Unwrap(); // may throw; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; There is no implict operator that converts RResult<T> to T. This is intentional to make it clear in the calling code where an exception may be thrown. ; Definition at line 194 of file RError.hxx. Public Member Functions;  RResult (const RResult &other)=delete;  ;  RResult (const T &value);  ;  RResult (RError &&error);  ;  RResult (RResult &&other)=default;  ;  RResult (T &&value);  ;  ~RResult ()=default;  ; RResult & Forward (RError::RLocation &&sourceLocation);  Used by R__FORWARD_RESULT in order to keep track of the stack trace in cas",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html:2375,Availability,error,error,2375,"ck frame.Definition RError.hxx:292; R__FAIL#define R__FAIL(msg)Short-hand to return an RResult<T> in an error state; the RError is implicitly converted into RResult...Definition RError.hxx:290; ROOT::Experimental::RResultThe class is used as a return type for operations that can fail; wraps a value of type T or an RError...Definition RError.hxx:194; Code using MyIOFunc might look like this:; auto result = MyIOOperation();; if (!result) {; // custom error handling or result.Throw(); }; switch (result.Inspect()) {; ...; }; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; Note that RResult<void> can be used for a function without return value, like this; RResult<void> DoSomething(); {; if (failure); return R__FAIL(""user-facing error messge"");; return RResult<void>::Success();; }; RResult<T>::Unwrap() can be used as a short hand for ""give me the wrapped value or, in case of an error, throw"". For instance:; int value = FuncThatReturnsRResultOfInt().Unwrap(); // may throw; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; There is no implict operator that converts RResult<T> to T. This is intentional to make it clear in the calling code where an exception may be thrown. ; Definition at line 194 of file RError.hxx. Public Member Functions;  RResult (const RResult &other)=delete;  ;  RResult (const T &value);  ;  RResult (RError &&error);  ;  RResult (RResult &&other)=default;  ;  RResult (T &&value);  ;  ~RResult ()=default;  ; RResult & Forward (RError::RLocation &&sourceLocation);  Used by R__FORWARD_RESULT in order to keep track of the stack trace in cas",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html:2992,Availability,error,error,2992,"y.cxx:174; Note that RResult<void> can be used for a function without return value, like this; RResult<void> DoSomething(); {; if (failure); return R__FAIL(""user-facing error messge"");; return RResult<void>::Success();; }; RResult<T>::Unwrap() can be used as a short hand for ""give me the wrapped value or, in case of an error, throw"". For instance:; int value = FuncThatReturnsRResultOfInt().Unwrap(); // may throw; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; There is no implict operator that converts RResult<T> to T. This is intentional to make it clear in the calling code where an exception may be thrown. ; Definition at line 194 of file RError.hxx. Public Member Functions;  RResult (const RResult &other)=delete;  ;  RResult (const T &value);  ;  RResult (RError &&error);  ;  RResult (RResult &&other)=default;  ;  RResult (T &&value);  ;  ~RResult ()=default;  ; RResult & Forward (RError::RLocation &&sourceLocation);  Used by R__FORWARD_RESULT in order to keep track of the stack trace in case of errors. ;  ; const T & Inspect ();  If the operation was successful, returns a const reference to the inner type. ;  ;  operator bool ();  ; RResult & operator= (const RResult &other)=delete;  ; RResult & operator= (RResult &&other)=default;  ; T Unwrap ();  If the operation was successful, returns the inner type by value. ;  ;  Public Member Functions inherited from ROOT::Experimental::RResultBase;  RResultBase (const RResultBase &other)=delete;  ;  RResultBase (RResultBase &&other)=default;  ;  ~RResultBase () noexcept(false);  ; RError * GetError ();  ; RResultBase & operator= (const RResultBase &other)=delete;  ; RResultBase & operator= (RResultBase &&other)=default;  ; void Throw ();  Throws an RException with fError. ;  . Private Member Functions; void ThrowOnError ();  . Private Attributes; T fValue;  The res",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html:3228,Availability,error,errors,3228,"y.cxx:174; Note that RResult<void> can be used for a function without return value, like this; RResult<void> DoSomething(); {; if (failure); return R__FAIL(""user-facing error messge"");; return RResult<void>::Success();; }; RResult<T>::Unwrap() can be used as a short hand for ""give me the wrapped value or, in case of an error, throw"". For instance:; int value = FuncThatReturnsRResultOfInt().Unwrap(); // may throw; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; There is no implict operator that converts RResult<T> to T. This is intentional to make it clear in the calling code where an exception may be thrown. ; Definition at line 194 of file RError.hxx. Public Member Functions;  RResult (const RResult &other)=delete;  ;  RResult (const T &value);  ;  RResult (RError &&error);  ;  RResult (RResult &&other)=default;  ;  RResult (T &&value);  ;  ~RResult ()=default;  ; RResult & Forward (RError::RLocation &&sourceLocation);  Used by R__FORWARD_RESULT in order to keep track of the stack trace in case of errors. ;  ; const T & Inspect ();  If the operation was successful, returns a const reference to the inner type. ;  ;  operator bool ();  ; RResult & operator= (const RResult &other)=delete;  ; RResult & operator= (RResult &&other)=default;  ; T Unwrap ();  If the operation was successful, returns the inner type by value. ;  ;  Public Member Functions inherited from ROOT::Experimental::RResultBase;  RResultBase (const RResultBase &other)=delete;  ;  RResultBase (RResultBase &&other)=default;  ;  ~RResultBase () noexcept(false);  ; RError * GetError ();  ; RResultBase & operator= (const RResultBase &other)=delete;  ; RResultBase & operator= (RResultBase &&other)=default;  ; void Throw ();  Throws an RException with fError. ;  . Private Member Functions; void ThrowOnError ();  . Private Attributes; T fValue;  The res",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html:4501,Availability,error,error,4501,"lt;  ; T Unwrap ();  If the operation was successful, returns the inner type by value. ;  ;  Public Member Functions inherited from ROOT::Experimental::RResultBase;  RResultBase (const RResultBase &other)=delete;  ;  RResultBase (RResultBase &&other)=default;  ;  ~RResultBase () noexcept(false);  ; RError * GetError ();  ; RResultBase & operator= (const RResultBase &other)=delete;  ; RResultBase & operator= (RResultBase &&other)=default;  ; void Throw ();  Throws an RException with fError. ;  . Private Member Functions; void ThrowOnError ();  . Private Attributes; T fValue;  The result value in case of successful execution. ;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::Experimental::RResultBase; static RError ForwardError (RResultBase &&result, RError::RLocation &&sourceLocation);  Used by R__FORWARD_ERROR in order to keep track of the stack trace. ;  ;  Protected Member Functions inherited from ROOT::Experimental::RResultBase;  RResultBase ()=default;  ;  RResultBase (RError &&error);  ; bool Check ();  Used by the RResult<T> bool operator. ;  ;  Protected Attributes inherited from ROOT::Experimental::RResultBase; std::unique_ptr< RError > fError;  This is the nullptr for an RResult representing success. ;  ; bool fIsChecked {false};  Switches to true once the user of an RResult object checks the object status. ;  . #include <ROOT/RError.hxx>. Inheritance diagram for ROOT::Experimental::RResult< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RResult() [1/5]. template<typename T > . ROOT::Experimental::RResult< T >::RResult ; (; const T & ; value). inline . Definition at line 214 of file RError.hxx. ◆ RResult() [2/5]. template<typename T > . ROOT::Experimental::RResult< T >::RResult ; (; T && ; value). inline . Definition at line 215 of file RError.hxx. ◆ RResult() [3/5]. template<typename T > . ROOT::Experimental::RResult< T >::R",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html:5491,Availability,error,error,5491,")=default;  ;  RResultBase (RError &&error);  ; bool Check ();  Used by the RResult<T> bool operator. ;  ;  Protected Attributes inherited from ROOT::Experimental::RResultBase; std::unique_ptr< RError > fError;  This is the nullptr for an RResult representing success. ;  ; bool fIsChecked {false};  Switches to true once the user of an RResult object checks the object status. ;  . #include <ROOT/RError.hxx>. Inheritance diagram for ROOT::Experimental::RResult< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RResult() [1/5]. template<typename T > . ROOT::Experimental::RResult< T >::RResult ; (; const T & ; value). inline . Definition at line 214 of file RError.hxx. ◆ RResult() [2/5]. template<typename T > . ROOT::Experimental::RResult< T >::RResult ; (; T && ; value). inline . Definition at line 215 of file RError.hxx. ◆ RResult() [3/5]. template<typename T > . ROOT::Experimental::RResult< T >::RResult ; (; RError && ; error). inline . Definition at line 216 of file RError.hxx. ◆ RResult() [4/5]. template<typename T > . ROOT::Experimental::RResult< T >::RResult ; (; const RResult< T > & ; other). delete . ◆ RResult() [5/5]. template<typename T > . ROOT::Experimental::RResult< T >::RResult ; (; RResult< T > && ; other). default . ◆ ~RResult(). template<typename T > . ROOT::Experimental::RResult< T >::~RResult ; (; ). default . Member Function Documentation. ◆ Forward(). template<typename T > . RResult & ROOT::Experimental::RResult< T >::Forward ; (; RError::RLocation && ; sourceLocation). inline . Used by R__FORWARD_RESULT in order to keep track of the stack trace in case of errors. ; Definition at line 226 of file RError.hxx. ◆ Inspect(). template<typename T > . const T & ROOT::Experimental::RResult< T >::Inspect ; (; ). inline . If the operation was successful, returns a const reference to the inner type. ; If there was an error, Inspect() instead throws an exception. ; Def",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html:6159,Availability,error,errors,6159,"erimental::RResult< T >::RResult ; (; const T & ; value). inline . Definition at line 214 of file RError.hxx. ◆ RResult() [2/5]. template<typename T > . ROOT::Experimental::RResult< T >::RResult ; (; T && ; value). inline . Definition at line 215 of file RError.hxx. ◆ RResult() [3/5]. template<typename T > . ROOT::Experimental::RResult< T >::RResult ; (; RError && ; error). inline . Definition at line 216 of file RError.hxx. ◆ RResult() [4/5]. template<typename T > . ROOT::Experimental::RResult< T >::RResult ; (; const RResult< T > & ; other). delete . ◆ RResult() [5/5]. template<typename T > . ROOT::Experimental::RResult< T >::RResult ; (; RResult< T > && ; other). default . ◆ ~RResult(). template<typename T > . ROOT::Experimental::RResult< T >::~RResult ; (; ). default . Member Function Documentation. ◆ Forward(). template<typename T > . RResult & ROOT::Experimental::RResult< T >::Forward ; (; RError::RLocation && ; sourceLocation). inline . Used by R__FORWARD_RESULT in order to keep track of the stack trace in case of errors. ; Definition at line 226 of file RError.hxx. ◆ Inspect(). template<typename T > . const T & ROOT::Experimental::RResult< T >::Inspect ; (; ). inline . If the operation was successful, returns a const reference to the inner type. ; If there was an error, Inspect() instead throws an exception. ; Definition at line 234 of file RError.hxx. ◆ operator bool(). template<typename T > . ROOT::Experimental::RResult< T >::operator bool ; (; ). inlineexplicit . Definition at line 251 of file RError.hxx. ◆ operator=() [1/2]. template<typename T > . RResult & ROOT::Experimental::RResult< T >::operator= ; (; const RResult< T > & ; other). delete . ◆ operator=() [2/2]. template<typename T > . RResult & ROOT::Experimental::RResult< T >::operator= ; (; RResult< T > && ; other). default . ◆ ThrowOnError(). template<typename T > . void ROOT::Experimental::RResult< T >::ThrowOnError ; (; ). inlineprivate . Definition at line 200 of file RError.hxx. ◆ Unwrap(). te",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html:6414,Availability,error,error,6414," > . ROOT::Experimental::RResult< T >::RResult ; (; RError && ; error). inline . Definition at line 216 of file RError.hxx. ◆ RResult() [4/5]. template<typename T > . ROOT::Experimental::RResult< T >::RResult ; (; const RResult< T > & ; other). delete . ◆ RResult() [5/5]. template<typename T > . ROOT::Experimental::RResult< T >::RResult ; (; RResult< T > && ; other). default . ◆ ~RResult(). template<typename T > . ROOT::Experimental::RResult< T >::~RResult ; (; ). default . Member Function Documentation. ◆ Forward(). template<typename T > . RResult & ROOT::Experimental::RResult< T >::Forward ; (; RError::RLocation && ; sourceLocation). inline . Used by R__FORWARD_RESULT in order to keep track of the stack trace in case of errors. ; Definition at line 226 of file RError.hxx. ◆ Inspect(). template<typename T > . const T & ROOT::Experimental::RResult< T >::Inspect ; (; ). inline . If the operation was successful, returns a const reference to the inner type. ; If there was an error, Inspect() instead throws an exception. ; Definition at line 234 of file RError.hxx. ◆ operator bool(). template<typename T > . ROOT::Experimental::RResult< T >::operator bool ; (; ). inlineexplicit . Definition at line 251 of file RError.hxx. ◆ operator=() [1/2]. template<typename T > . RResult & ROOT::Experimental::RResult< T >::operator= ; (; const RResult< T > & ; other). delete . ◆ operator=() [2/2]. template<typename T > . RResult & ROOT::Experimental::RResult< T >::operator= ; (; RResult< T > && ; other). default . ◆ ThrowOnError(). template<typename T > . void ROOT::Experimental::RResult< T >::ThrowOnError ; (; ). inlineprivate . Definition at line 200 of file RError.hxx. ◆ Unwrap(). template<typename T > . T ROOT::Experimental::RResult< T >::Unwrap ; (; ). inline . If the operation was successful, returns the inner type by value. ; For move-only types, Unwrap can only be called once, as it yields ownership of the inner value to the caller using std::move, potentially leaving the RRes",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html:7473,Availability,error,error,7473,"ward(). template<typename T > . RResult & ROOT::Experimental::RResult< T >::Forward ; (; RError::RLocation && ; sourceLocation). inline . Used by R__FORWARD_RESULT in order to keep track of the stack trace in case of errors. ; Definition at line 226 of file RError.hxx. ◆ Inspect(). template<typename T > . const T & ROOT::Experimental::RResult< T >::Inspect ; (; ). inline . If the operation was successful, returns a const reference to the inner type. ; If there was an error, Inspect() instead throws an exception. ; Definition at line 234 of file RError.hxx. ◆ operator bool(). template<typename T > . ROOT::Experimental::RResult< T >::operator bool ; (; ). inlineexplicit . Definition at line 251 of file RError.hxx. ◆ operator=() [1/2]. template<typename T > . RResult & ROOT::Experimental::RResult< T >::operator= ; (; const RResult< T > & ; other). delete . ◆ operator=() [2/2]. template<typename T > . RResult & ROOT::Experimental::RResult< T >::operator= ; (; RResult< T > && ; other). default . ◆ ThrowOnError(). template<typename T > . void ROOT::Experimental::RResult< T >::ThrowOnError ; (; ). inlineprivate . Definition at line 200 of file RError.hxx. ◆ Unwrap(). template<typename T > . T ROOT::Experimental::RResult< T >::Unwrap ; (; ). inline . If the operation was successful, returns the inner type by value. ; For move-only types, Unwrap can only be called once, as it yields ownership of the inner value to the caller using std::move, potentially leaving the RResult in an unspecified state.; If there was an error, Unwrap() instead throws an exception. ; Definition at line 246 of file RError.hxx. Member Data Documentation. ◆ fValue. template<typename T > . T ROOT::Experimental::RResult< T >::fValue. private . The result value in case of successful execution. ; Definition at line 197 of file RError.hxx. core/foundation/v7/inc/ROOT/RError.hxx. ROOTExperimentalRResult. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:12 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html:493,Integrability,wrap,wraps,493,". ROOT: ROOT::Experimental::RResult< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Experimental::RResult< T > Class Template ReferenceCore ROOT classes » Base ROOT classes. ; template<typename T>; class ROOT::Experimental::RResult< T >The class is used as a return type for operations that can fail; wraps a value of type T or an RError. ; The RResult<T> class and their related classes are used for call chains that can throw exceptions, such as I/O code paths. Throwing of the exception is deferred to allow for if (result) style error checking where it makes sense. If an RResult in error state leaves the scope unchecked, it will throw.; A function returning an RResult might look like this:; RResult<int> MyIOFunc(); {; int rv = syscall(...);; if (rv == -1); return R__FAIL(""user-facing error message"");; if (rv == kShortcut); return 42;; return R__FORWARD_RESULT(FuncThatReturnsRResultOfInt());; }; R__FORWARD_RESULT#define R__FORWARD_RESULT(res)Short-hand to return an RResult<T> value from a subroutine to the calling stack frame.Definition RError.hxx:292; R__FAIL#define R__FAIL(msg)Short-hand to return an RResult<T> in an error state; the RError is implicitly converted into RResult...Definition RError.hxx:290; ROOT::Experimental::RResultThe class is used as a return type for operations that can fail; wraps a value of type T or an RError...Definition RError.hxx:194; Code using MyIOFunc might look like this:; auto result = MyIOOperation();; if (!result) {; // custom error handling or result.Throw(); }; switch (result.Inspect()) {; ...; }; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UI",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html:991,Integrability,message,message,991,"r. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Experimental::RResult< T > Class Template ReferenceCore ROOT classes » Base ROOT classes. ; template<typename T>; class ROOT::Experimental::RResult< T >The class is used as a return type for operations that can fail; wraps a value of type T or an RError. ; The RResult<T> class and their related classes are used for call chains that can throw exceptions, such as I/O code paths. Throwing of the exception is deferred to allow for if (result) style error checking where it makes sense. If an RResult in error state leaves the scope unchecked, it will throw.; A function returning an RResult might look like this:; RResult<int> MyIOFunc(); {; int rv = syscall(...);; if (rv == -1); return R__FAIL(""user-facing error message"");; if (rv == kShortcut); return 42;; return R__FORWARD_RESULT(FuncThatReturnsRResultOfInt());; }; R__FORWARD_RESULT#define R__FORWARD_RESULT(res)Short-hand to return an RResult<T> value from a subroutine to the calling stack frame.Definition RError.hxx:292; R__FAIL#define R__FAIL(msg)Short-hand to return an RResult<T> in an error state; the RError is implicitly converted into RResult...Definition RError.hxx:290; ROOT::Experimental::RResultThe class is used as a return type for operations that can fail; wraps a value of type T or an RError...Definition RError.hxx:194; Code using MyIOFunc might look like this:; auto result = MyIOOperation();; if (!result) {; // custom error handling or result.Throw(); }; switch (result.Inspect()) {; ...; }; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; Note that RResult<vo",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html:1508,Integrability,wrap,wraps,1508,"s that can fail; wraps a value of type T or an RError. ; The RResult<T> class and their related classes are used for call chains that can throw exceptions, such as I/O code paths. Throwing of the exception is deferred to allow for if (result) style error checking where it makes sense. If an RResult in error state leaves the scope unchecked, it will throw.; A function returning an RResult might look like this:; RResult<int> MyIOFunc(); {; int rv = syscall(...);; if (rv == -1); return R__FAIL(""user-facing error message"");; if (rv == kShortcut); return 42;; return R__FORWARD_RESULT(FuncThatReturnsRResultOfInt());; }; R__FORWARD_RESULT#define R__FORWARD_RESULT(res)Short-hand to return an RResult<T> value from a subroutine to the calling stack frame.Definition RError.hxx:292; R__FAIL#define R__FAIL(msg)Short-hand to return an RResult<T> in an error state; the RError is implicitly converted into RResult...Definition RError.hxx:290; ROOT::Experimental::RResultThe class is used as a return type for operations that can fail; wraps a value of type T or an RError...Definition RError.hxx:194; Code using MyIOFunc might look like this:; auto result = MyIOOperation();; if (!result) {; // custom error handling or result.Throw(); }; switch (result.Inspect()) {; ...; }; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; Note that RResult<void> can be used for a function without return value, like this; RResult<void> DoSomething(); {; if (failure); return R__FAIL(""user-facing error messge"");; return RResult<void>::Success();; }; RResult<T>::Unwrap() can be used as a short hand for ""give me the wrapped value or, in case of an error, throw"". For instance:; int value = FuncThatReturnsRResultOfInt().Unwrap(); // may throw; value",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html:2343,Integrability,wrap,wrapped,2343,"ck frame.Definition RError.hxx:292; R__FAIL#define R__FAIL(msg)Short-hand to return an RResult<T> in an error state; the RError is implicitly converted into RResult...Definition RError.hxx:290; ROOT::Experimental::RResultThe class is used as a return type for operations that can fail; wraps a value of type T or an RError...Definition RError.hxx:194; Code using MyIOFunc might look like this:; auto result = MyIOOperation();; if (!result) {; // custom error handling or result.Throw(); }; switch (result.Inspect()) {; ...; }; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; Note that RResult<void> can be used for a function without return value, like this; RResult<void> DoSomething(); {; if (failure); return R__FAIL(""user-facing error messge"");; return RResult<void>::Success();; }; RResult<T>::Unwrap() can be used as a short hand for ""give me the wrapped value or, in case of an error, throw"". For instance:; int value = FuncThatReturnsRResultOfInt().Unwrap(); // may throw; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; There is no implict operator that converts RResult<T> to T. This is intentional to make it clear in the calling code where an exception may be thrown. ; Definition at line 194 of file RError.hxx. Public Member Functions;  RResult (const RResult &other)=delete;  ;  RResult (const T &value);  ;  RResult (RError &&error);  ;  RResult (RResult &&other)=default;  ;  RResult (T &&value);  ;  ~RResult ()=default;  ; RResult & Forward (RError::RLocation &&sourceLocation);  Used by R__FORWARD_RESULT in order to keep track of the stack trace in cas",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html:3583,Modifiability,inherit,inherited,3583,"al to make it clear in the calling code where an exception may be thrown. ; Definition at line 194 of file RError.hxx. Public Member Functions;  RResult (const RResult &other)=delete;  ;  RResult (const T &value);  ;  RResult (RError &&error);  ;  RResult (RResult &&other)=default;  ;  RResult (T &&value);  ;  ~RResult ()=default;  ; RResult & Forward (RError::RLocation &&sourceLocation);  Used by R__FORWARD_RESULT in order to keep track of the stack trace in case of errors. ;  ; const T & Inspect ();  If the operation was successful, returns a const reference to the inner type. ;  ;  operator bool ();  ; RResult & operator= (const RResult &other)=delete;  ; RResult & operator= (RResult &&other)=default;  ; T Unwrap ();  If the operation was successful, returns the inner type by value. ;  ;  Public Member Functions inherited from ROOT::Experimental::RResultBase;  RResultBase (const RResultBase &other)=delete;  ;  RResultBase (RResultBase &&other)=default;  ;  ~RResultBase () noexcept(false);  ; RError * GetError ();  ; RResultBase & operator= (const RResultBase &other)=delete;  ; RResultBase & operator= (RResultBase &&other)=default;  ; void Throw ();  Throws an RException with fError. ;  . Private Member Functions; void ThrowOnError ();  . Private Attributes; T fValue;  The result value in case of successful execution. ;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::Experimental::RResultBase; static RError ForwardError (RResultBase &&result, RError::RLocation &&sourceLocation);  Used by R__FORWARD_ERROR in order to keep track of the stack trace. ;  ;  Protected Member Functions inherited from ROOT::Experimental::RResultBase;  RResultBase ()=default;  ;  RResultBase (RError &&error);  ; bool Check ();  Used by the RResult<T> bool operator. ;  ;  Protected Attributes inherited from ROOT::Experimental::RResultBase; std::unique_ptr< RError > fError;  This is the nullptr for an RResult representing success. ;  ; bool fIsChecked {f",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html:4165,Modifiability,inherit,inherited,4165," ;  ; const T & Inspect ();  If the operation was successful, returns a const reference to the inner type. ;  ;  operator bool ();  ; RResult & operator= (const RResult &other)=delete;  ; RResult & operator= (RResult &&other)=default;  ; T Unwrap ();  If the operation was successful, returns the inner type by value. ;  ;  Public Member Functions inherited from ROOT::Experimental::RResultBase;  RResultBase (const RResultBase &other)=delete;  ;  RResultBase (RResultBase &&other)=default;  ;  ~RResultBase () noexcept(false);  ; RError * GetError ();  ; RResultBase & operator= (const RResultBase &other)=delete;  ; RResultBase & operator= (RResultBase &&other)=default;  ; void Throw ();  Throws an RException with fError. ;  . Private Member Functions; void ThrowOnError ();  . Private Attributes; T fValue;  The result value in case of successful execution. ;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::Experimental::RResultBase; static RError ForwardError (RResultBase &&result, RError::RLocation &&sourceLocation);  Used by R__FORWARD_ERROR in order to keep track of the stack trace. ;  ;  Protected Member Functions inherited from ROOT::Experimental::RResultBase;  RResultBase ()=default;  ;  RResultBase (RError &&error);  ; bool Check ();  Used by the RResult<T> bool operator. ;  ;  Protected Attributes inherited from ROOT::Experimental::RResultBase; std::unique_ptr< RError > fError;  This is the nullptr for an RResult representing success. ;  ; bool fIsChecked {false};  Switches to true once the user of an RResult object checks the object status. ;  . #include <ROOT/RError.hxx>. Inheritance diagram for ROOT::Experimental::RResult< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RResult() [1/5]. template<typename T > . ROOT::Experimental::RResult< T >::RResult ; (; const T & ; value). inline . Definition at line 214 of file RError.hxx. ◆ R",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html:4402,Modifiability,inherit,inherited,4402,"lt;  ; T Unwrap ();  If the operation was successful, returns the inner type by value. ;  ;  Public Member Functions inherited from ROOT::Experimental::RResultBase;  RResultBase (const RResultBase &other)=delete;  ;  RResultBase (RResultBase &&other)=default;  ;  ~RResultBase () noexcept(false);  ; RError * GetError ();  ; RResultBase & operator= (const RResultBase &other)=delete;  ; RResultBase & operator= (RResultBase &&other)=default;  ; void Throw ();  Throws an RException with fError. ;  . Private Member Functions; void ThrowOnError ();  . Private Attributes; T fValue;  The result value in case of successful execution. ;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::Experimental::RResultBase; static RError ForwardError (RResultBase &&result, RError::RLocation &&sourceLocation);  Used by R__FORWARD_ERROR in order to keep track of the stack trace. ;  ;  Protected Member Functions inherited from ROOT::Experimental::RResultBase;  RResultBase ()=default;  ;  RResultBase (RError &&error);  ; bool Check ();  Used by the RResult<T> bool operator. ;  ;  Protected Attributes inherited from ROOT::Experimental::RResultBase; std::unique_ptr< RError > fError;  This is the nullptr for an RResult representing success. ;  ; bool fIsChecked {false};  Switches to true once the user of an RResult object checks the object status. ;  . #include <ROOT/RError.hxx>. Inheritance diagram for ROOT::Experimental::RResult< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RResult() [1/5]. template<typename T > . ROOT::Experimental::RResult< T >::RResult ; (; const T & ; value). inline . Definition at line 214 of file RError.hxx. ◆ RResult() [2/5]. template<typename T > . ROOT::Experimental::RResult< T >::RResult ; (; T && ; value). inline . Definition at line 215 of file RError.hxx. ◆ RResult() [3/5]. template<typename T > . ROOT::Experimental::RResult< T >::R",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html:4593,Modifiability,inherit,inherited,4593,"st RResultBase &other)=delete;  ;  RResultBase (RResultBase &&other)=default;  ;  ~RResultBase () noexcept(false);  ; RError * GetError ();  ; RResultBase & operator= (const RResultBase &other)=delete;  ; RResultBase & operator= (RResultBase &&other)=default;  ; void Throw ();  Throws an RException with fError. ;  . Private Member Functions; void ThrowOnError ();  . Private Attributes; T fValue;  The result value in case of successful execution. ;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::Experimental::RResultBase; static RError ForwardError (RResultBase &&result, RError::RLocation &&sourceLocation);  Used by R__FORWARD_ERROR in order to keep track of the stack trace. ;  ;  Protected Member Functions inherited from ROOT::Experimental::RResultBase;  RResultBase ()=default;  ;  RResultBase (RError &&error);  ; bool Check ();  Used by the RResult<T> bool operator. ;  ;  Protected Attributes inherited from ROOT::Experimental::RResultBase; std::unique_ptr< RError > fError;  This is the nullptr for an RResult representing success. ;  ; bool fIsChecked {false};  Switches to true once the user of an RResult object checks the object status. ;  . #include <ROOT/RError.hxx>. Inheritance diagram for ROOT::Experimental::RResult< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RResult() [1/5]. template<typename T > . ROOT::Experimental::RResult< T >::RResult ; (; const T & ; value). inline . Definition at line 214 of file RError.hxx. ◆ RResult() [2/5]. template<typename T > . ROOT::Experimental::RResult< T >::RResult ; (; T && ; value). inline . Definition at line 215 of file RError.hxx. ◆ RResult() [3/5]. template<typename T > . ROOT::Experimental::RResult< T >::RResult ; (; RError && ; error). inline . Definition at line 216 of file RError.hxx. ◆ RResult() [4/5]. template<typename T > . ROOT::Experimental::RResult< T >::RResult ; (; const RR",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html:2770,Usability,clear,clear,2770,"int const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; Note that RResult<void> can be used for a function without return value, like this; RResult<void> DoSomething(); {; if (failure); return R__FAIL(""user-facing error messge"");; return RResult<void>::Success();; }; RResult<T>::Unwrap() can be used as a short hand for ""give me the wrapped value or, in case of an error, throw"". For instance:; int value = FuncThatReturnsRResultOfInt().Unwrap(); // may throw; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; There is no implict operator that converts RResult<T> to T. This is intentional to make it clear in the calling code where an exception may be thrown. ; Definition at line 194 of file RError.hxx. Public Member Functions;  RResult (const RResult &other)=delete;  ;  RResult (const T &value);  ;  RResult (RError &&error);  ;  RResult (RResult &&other)=default;  ;  RResult (T &&value);  ;  ~RResult ()=default;  ; RResult & Forward (RError::RLocation &&sourceLocation);  Used by R__FORWARD_RESULT in order to keep track of the stack trace in case of errors. ;  ; const T & Inspect ();  If the operation was successful, returns a const reference to the inner type. ;  ;  operator bool ();  ; RResult & operator= (const RResult &other)=delete;  ; RResult & operator= (RResult &&other)=default;  ; T Unwrap ();  If the operation was successful, returns the inner type by value. ;  ;  Public Member Functions inherited from ROOT::Experimental::RResultBase;  RResultBase (const RResultBase &other)=delete;  ;  RResultBase (RResultBase &&other)=default;  ;  ~RResultBase () noexcept(false);  ; RError * GetError ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1RResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html:3744,Availability,error,error,3744,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html:3833,Availability,error,error,3833,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html:3988,Availability,error,error,3988,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html:4285,Availability,error,error,4285,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html:8849,Availability,error,error,8849," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html:3750,Integrability,message,message,3750,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html:4291,Integrability,message,message,4291,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html:5493,Integrability,message,message,5493,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html:8855,Integrability,message,message,8855," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html:9228,Integrability,message,message,9228," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Prote",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html:563,Modifiability,inherit,inherited,563,". ROOT: ROOT::Experimental::TTreeReaderFast Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::Experimental::TTreeReaderFast Class Reference. . Definition at line 38 of file TTreeReaderFast.hxx. Classes; class  Iterator_t;  . Public Types; typedef Iterator_t iterator;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TTreeReaderFast ();  ;  TTreeReaderFast (const char *keyname, TDirectory *dir=nullptr);  ;  TTreeReaderFast (TTree *tree);  ;  ~TTreeReaderFast () override;  Tell all value readers that the tree reader does not exist anymore. ;  ; Iterator_t begin ();  Return an iterator to the 0th TTree entry. ;  ; Iterator_t end () const;  ; TTreeReader::EEntryStatus GetEntryStatus () const;  ; TTree * GetTree () const;  ; TClass * IsA () const override;  ; TTreeReader::EEntryStatus SetEntriesRange (Long64_t first, Long64_t last);  ; TTreeReader::EEntryStatus SetEntry (Long64_t);  Set an entry to be read. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TOb",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html:1983,Modifiability,inherit,inherited,1983,"( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TTreeReaderFast ();  ;  TTreeReaderFast (const char *keyname, TDirectory *dir=nullptr);  ;  TTreeReaderFast (TTree *tree);  ;  ~TTreeReaderFast () override;  Tell all value readers that the tree reader does not exist anymore. ;  ; Iterator_t begin ();  Return an iterator to the 0th TTree entry. ;  ; Iterator_t end () const;  ; TTreeReader::EEntryStatus GetEntryStatus () const;  ; TTree * GetTree () const;  ; TClass * IsA () const override;  ; TTreeReader::EEntryStatus SetEntriesRange (Long64_t first, Long64_t last);  ; TTreeReader::EEntryStatus SetEntry (Long64_t);  Set an entry to be read. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html:3380,Modifiability,inherit,inheritance,3380,"pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html:5591,Modifiability,inherit,inherits,5591,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html:5708,Modifiability,inherit,inherits,5708,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html:9729,Modifiability,inherit,inherited,9729,"reamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void DeregisterValueReader (ROOT::Experimental::Internal::TTreeReaderValueFastBase *reader);  Remove a value reader for this tree. ;  ; Int_t & GetIndexRef ();  ; void RegisterValueReader (ROOT::Experimental::Internal::TTreeReaderValueFastBase *reader);  Add a value reader for this tree. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html:10565,Modifiability,inherit,inherited,10565," Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void DeregisterValueReader (ROOT::Experimental::Internal::TTreeReaderValueFastBase *reader);  Remove a value reader for this tree. ;  ; Int_t & GetIndexRef ();  ; void RegisterValueReader (ROOT::Experimental::Internal::TTreeReaderValueFastBase *reader);  Add a value reader for this tree. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Member Functions; Int_t GetNextRange (Int_t);  Advance to the next range in the file; returns the number of events in the range. ;  ; void Initialize ();  Initialization of the director. ;  . Private Attributes; Long64_t fBaseEvent {-1};  ; ROOT::Internal::TBranchProxyDirector * fDirector {nullptr};  proxying director, owned ;  ; TDirectory * fDirectory {nullptr};  directory (or current file for chains) ;  ; TTreeReader::EEntryStatus fEntryStatus {TTreeReader::kEntryNotLoaded};  status of most recent read request ;  ; Int_t fEvtIndex {-1};  ; Long64_t fLastEntry {-1};  ; TTree * fTree {nullptr};  tree that's read ;  ; std::deque< ROOT::Experimental::Internal::TTreeReaderValueFastBase * > fValues;  readers that use our director ;  . Friends; class ROOT::Experimental::Internal::TTreeReaderValueFastBase;  . Additional Inherited Members;  Protected Types inheri",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html:11619,Modifiability,inherit,inherited,11619,"ar *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Member Functions; Int_t GetNextRange (Int_t);  Advance to the next range in the file; returns the number of events in the range. ;  ; void Initialize ();  Initialization of the director. ;  . Private Attributes; Long64_t fBaseEvent {-1};  ; ROOT::Internal::TBranchProxyDirector * fDirector {nullptr};  proxying director, owned ;  ; TDirectory * fDirectory {nullptr};  directory (or current file for chains) ;  ; TTreeReader::EEntryStatus fEntryStatus {TTreeReader::kEntryNotLoaded};  status of most recent read request ;  ; Int_t fEvtIndex {-1};  ; Long64_t fLastEntry {-1};  ; TTree * fTree {nullptr};  tree that's read ;  ; std::deque< ROOT::Experimental::Internal::TTreeReaderValueFastBase * > fValues;  readers that use our director ;  . Friends; class ROOT::Experimental::Internal::TTreeReaderValueFastBase;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <ROOT/TTreeReaderFast.hxx>. Inheritance diagram for ROOT::Experimental::TTreeReaderFast:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ iterator. typedef Iterator_t ROOT::Experimental::TTreeReaderFast::iterator. Definition at line 122 of file TTreeReaderFast.hxx. Constructor & Destructor Documentation. ◆ TTreeReaderFast() [1/3]. ROOT::Experimental::TTreeReaderFast::TTreeReaderFast ; (; ). inline . Definition at line 124 of file TTreeReaderFast.hxx. ◆ TTreeReaderFast() [2/3]. TTreeReaderFast::TTreeReaderFast ; (; TTree * ; tree). Definition at line 22 of file TTreeReaderFast.cxx. ◆ TTreeReaderFast() [3/3]. TTreeReaderFast::TTreeReaderFast ; (; const char * ; keyname, . TDirectory * ; dir = nullptr . ). Definition at line 32 of file TTreeReaderFast.cxx. ◆ ~TTreeReaderFast(). TTreeReaderFast::~TTreeReaderFast ; (; ). override . Tell all val",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html:5222,Security,hash,hash,5222," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:446,Availability,avail,available,446,". ROOT: ROOT::Experimental::XRooFit::xRooBrowser Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::Experimental::XRooFit::xRooBrowser Class ReferenceRooFit » xRooFit. ; A version of the TBrowser that can be used to interact with RooFit models and datasets. . Also available under the ROOT::Experimental::RooBrowser alias.; To get started with the xRooBrowser, open any ROOT file containing a workspace and then create an instance of the xRooBrowser just like creating an instance of a TBrowser. A window will be displayed with a navigable tree structure on the left that lets you explore the content of the workspaces present in the loaded file. Note that additional files, including json workspace files, can be loaded through the Browser --> Open menu in the top left corner.; The context menu for each node (access by right clicking on the node) in the tree structure can be used to get more information about the node. In particular, the Draw command can be selected on many of the nodes that are part of a statistical model, which will visualize that part of the model in the browser window. A number of options are available for the Draw command, including (some options can be combined):. ""e"" : calculate and visualize propagated model uncertainty; ""auxratio"" : Draw a ratio auxiliary plot below the main plot; ""auxsignif"" : Draw a significance auxiliary plot below the main plot; ""pull"" : show panel of current parameter values, which can be dragged in order to change the values and visualize the effect on the model (very experimental feature). Once a node has been drawn, the styling of subsequent draws can be controlled through TStyle objects that will now appear in the objects folder in the workspace.; A model can be fit to a dataset from the workspace using the fitTo context menu command and specifyin",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:1303,Availability,avail,available,1303,"enceRooFit » xRooFit. ; A version of the TBrowser that can be used to interact with RooFit models and datasets. . Also available under the ROOT::Experimental::RooBrowser alias.; To get started with the xRooBrowser, open any ROOT file containing a workspace and then create an instance of the xRooBrowser just like creating an instance of a TBrowser. A window will be displayed with a navigable tree structure on the left that lets you explore the content of the workspaces present in the loaded file. Note that additional files, including json workspace files, can be loaded through the Browser --> Open menu in the top left corner.; The context menu for each node (access by right clicking on the node) in the tree structure can be used to get more information about the node. In particular, the Draw command can be selected on many of the nodes that are part of a statistical model, which will visualize that part of the model in the browser window. A number of options are available for the Draw command, including (some options can be combined):. ""e"" : calculate and visualize propagated model uncertainty; ""auxratio"" : Draw a ratio auxiliary plot below the main plot; ""auxsignif"" : Draw a significance auxiliary plot below the main plot; ""pull"" : show panel of current parameter values, which can be dragged in order to change the values and visualize the effect on the model (very experimental feature). Once a node has been drawn, the styling of subsequent draws can be controlled through TStyle objects that will now appear in the objects folder in the workspace.; A model can be fit to a dataset from the workspace using the fitTo context menu command and specifying the name of a dataset in the workspace (if no name is given, an expected dataset corresponding to the current state of the model will be used). A dialog will display the fit result status code when the fit completes and then a fits folder will be found under the workspace (the workspace may need to be collapsed and re-expan",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:2812,Availability,avail,available,2812,"yle objects that will now appear in the objects folder in the workspace.; A model can be fit to a dataset from the workspace using the fitTo context menu command and specifying the name of a dataset in the workspace (if no name is given, an expected dataset corresponding to the current state of the model will be used). A dialog will display the fit result status code when the fit completes and then a fits folder will be found under the workspace (the workspace may need to be collapsed and re-expanded to make it appear) where the fit result can be found, selected, and visualized. In multi-channel models the channels that are included in the fit can be controlled with the checkboxes in the browser. Clicking the checkbox will cycle through three states: checked, unchecked with grey-underline, and checked with grey-underline. The grey-underline indicates that channel wont be included in the fit (and will appear greyed out when the model is visualized); Many more features are available in the xRooBrowser, and further documentation and development can be found at the xRooFit repository, which is the library where the browser has been originally developed. The author (Will Buttinger) is also very happy to be contacted with questions or feedback about this new functionality. ; Definition at line 30 of file xRooBrowser.h. Public Member Functions;  xRooBrowser ();  ;  xRooBrowser (xRooNode *o);  ; void cd (const char *path);  ; xRooNode * GetSelected ();  ; void HandleMenu (Int_t id);  ; TClass * IsA () const override;  ; void ls (const char *path=nullptr) const override;  List TNamed name and title. ;  ; xRooNode * Open (const char *filename);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TBrowser;  TBrowser (const char *name, const char *title, Int_t x, Int_t y, UInt_t width, UInt_t height, TBrowserImp *extimp=nullptr, Option_t *opt="""");",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:10527,Availability,error,error,10527,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetO",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:10616,Availability,error,error,10616,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; vir",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:10771,Availability,error,error,10771,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:11068,Availability,error,error,11068,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits fr",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:14861,Availability,error,error,14861,"&rhs);  TObject assignment operator. ;  ; virtual void Paint (Option_t *option="""");  This method must be overridden if a class wants to paint itself. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TQObject;  TQObject ();  TQObject Constructor. ;  ; virtual ~TQObject ();  TQObject Destructor. ;  ; Bool_t AreSignalsBlocked () const;  ; Bool_t BlockSignals (Bool_t b);  ; virtual void ChangedBy (const char *method);  ; void CollectClassSignalLists (TList &list, TClass *cls);  Collect class s",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:10533,Integrability,message,message,10533,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetO",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:11074,Integrability,message,message,11074,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits fr",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:11955,Integrability,message,message,11955,"onding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:14867,Integrability,message,message,14867,"&rhs);  TObject assignment operator. ;  ; virtual void Paint (Option_t *option="""");  This method must be overridden if a class wants to paint itself. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TQObject;  TQObject ();  TQObject Constructor. ;  ; virtual ~TQObject ();  TQObject Destructor. ;  ; Bool_t AreSignalsBlocked () const;  ; Bool_t BlockSignals (Bool_t b);  ; virtual void ChangedBy (const char *method);  ; void CollectClassSignalLists (TList &list, TClass *cls);  Collect class s",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:15240,Integrability,message,message,15240,"Int_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TQObject;  TQObject ();  TQObject Constructor. ;  ; virtual ~TQObject ();  TQObject Destructor. ;  ; Bool_t AreSignalsBlocked () const;  ; Bool_t BlockSignals (Bool_t b);  ; virtual void ChangedBy (const char *method);  ; void CollectClassSignalLists (TList &list, TClass *cls);  Collect class signal lists from class cls and all its base-classes. ;  ; Bool_t Connect (const char *signal, const char *receiver_class, void *receiver, const char *slot);  Non-static method is used to connect from the signal of this object to the receiver slot. ;  ; virtual void Connected (const char *);  ; virtual void Destroyed ();  ; Bool_t Disconnect (const char *signal=nullptr, voi",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:3659,Modifiability,inherit,inherited,3659," (and will appear greyed out when the model is visualized); Many more features are available in the xRooBrowser, and further documentation and development can be found at the xRooFit repository, which is the library where the browser has been originally developed. The author (Will Buttinger) is also very happy to be contacted with questions or feedback about this new functionality. ; Definition at line 30 of file xRooBrowser.h. Public Member Functions;  xRooBrowser ();  ;  xRooBrowser (xRooNode *o);  ; void cd (const char *path);  ; xRooNode * GetSelected ();  ; void HandleMenu (Int_t id);  ; TClass * IsA () const override;  ; void ls (const char *path=nullptr) const override;  List TNamed name and title. ;  ; xRooNode * Open (const char *filename);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TBrowser;  TBrowser (const char *name, const char *title, Int_t x, Int_t y, UInt_t width, UInt_t height, TBrowserImp *extimp=nullptr, Option_t *opt="""");  Create a new browser with a name, title, position, width and height. ;  ;  TBrowser (const char *name, const char *title, UInt_t width, UInt_t height, TBrowserImp *extimp=nullptr, Option_t *opt="""");  Create a new browser with a name, title, width and height. ;  ;  TBrowser (const char *name, TObject *obj, const char *title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t *opt="""");  Create a new browser with a name, title, width and height for TObject *obj. ;  ;  TBrowser (const char *name, TObject *obj, const char *title, UInt_t width, UInt_t height, Option_t *opt="""");  Create a new browser with a name, title, width and height for TObject *obj. ;  ;  TBrowser (const char *name, TObject *obj, const char *title=""ROOT Object Browser"", Option_t *opt="""");  Create a new browser with a name, title, width and height for TObject *obj. ;  ;  TBrowser (const char *name, void *obj, TClass *cl,",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:7522,Modifiability,inherit,inherited,7522,"or $ROOTSYS/etc/root.mimes file). ;  ; TBrowserImp * GetBrowserImp () const;  ; TContextMenu * GetContextMenu () const;  ; Option_t * GetDrawOption () const override;  Get option used by the graphics system to draw this object. ;  ; Bool_t GetRefreshFlag () const;  ; TObject * GetSelected () const;  ; void Iconify ();  ; Bool_t IsWeb () const;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove obj from browser. ;  ; void Refresh ();  Refresh browser contents. ;  ; void RemoveCheckBox (TObject *obj);  Remove checkbox for this item. ;  ; void SetBrowserImp (TBrowserImp *i);  ; void SetDrawOption (Option_t *option="""") override;  Set drawing option for object. ;  ; void SetRefreshFlag (Bool_t flag);  ; void SetSelected (TObject *clickedObject);  Assign the last selected object. ;  ; void SetStatusText (const char *txt, Int_t col);  ; void Show ();  ; void StartEmbedding (Int_t pos, Int_t subpos);  ; void StopEmbedding (const char *name="""");  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:9070,Modifiability,inherit,inherited,9070,"ts. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:10163,Modifiability,inherit,inheritance,10163,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:12053,Modifiability,inherit,inherits,12053,"const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:12170,Modifiability,inherit,inherits,12170,"st;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:15547,Modifiability,inherit,inherited,15547,"f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TQObject;  TQObject ();  TQObject Constructor. ;  ; virtual ~TQObject ();  TQObject Destructor. ;  ; Bool_t AreSignalsBlocked () const;  ; Bool_t BlockSignals (Bool_t b);  ; virtual void ChangedBy (const char *method);  ; void CollectClassSignalLists (TList &list, TClass *cls);  Collect class signal lists from class cls and all its base-classes. ;  ; Bool_t Connect (const char *signal, const char *receiver_class, void *receiver, const char *slot);  Non-static method is used to connect from the signal of this object to the receiver slot. ;  ; virtual void Connected (const char *);  ; virtual void Destroyed ();  ; Bool_t Disconnect (const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal of this object from slot of receiver. ;  ; virtual void Disconnected (const char *);  ; void Emit (const char *signal);  Activate signal without args. ;  ; template<typename T > ; void Emit (const char *signal, const T &arg);  Activate signal with single paramet",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:17709,Modifiability,inherit,inherited,17709,"t char *signal_name) const;  Return true if there is any object connected to this signal. ;  ; virtual void HighPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void LowPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void Message (const char *msg);  ; virtual Int_t NumberOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TBrowser; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all signals. Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Nam",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:17921,Modifiability,inherit,inherited,17921,"t char *signal_name) const;  Return true if there is any object connected to this signal. ;  ; virtual void HighPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void LowPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void Message (const char *msg);  ; virtual Int_t NumberOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TBrowser; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all signals. Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Nam",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:18131,Modifiability,inherit,inherited,18131,"t char *signal_name) const;  Return true if there is any object connected to this signal. ;  ; virtual void HighPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void LowPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void Message (const char *msg);  ; virtual Int_t NumberOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TBrowser; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all signals. Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Nam",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:18649,Modifiability,inherit,inherited,18649,"ic Public Member Functions inherited from TBrowser; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all signals. Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullpt",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:19935,Modifiability,inherit,inherited,19935,"har *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Private Attributes; std::shared_ptr< xRooNode > fNode;  ; std::shared_ptr< xRooNode > fTopNode;  . Additional Inherited Members;  Public Types inherited from TBrowser; enum  EStatusBits { kNoHidden = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TBrowser; Bool_t InitGraphics ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Me",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:20029,Modifiability,inherit,inherited,20029,"har *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Private Attributes; std::shared_ptr< xRooNode > fNode;  ; std::shared_ptr< xRooNode > fTopNode;  . Additional Inherited Members;  Public Types inherited from TBrowser; enum  EStatusBits { kNoHidden = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TBrowser; Bool_t InitGraphics ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Me",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:20670,Modifiability,inherit,inherited,20670,"ptr< xRooNode > fNode;  ; std::shared_ptr< xRooNode > fTopNode;  . Additional Inherited Members;  Public Types inherited from TBrowser; enum  EStatusBits { kNoHidden = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TBrowser; Bool_t InitGraphics ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:20769,Modifiability,inherit,inherited,20769,"ptr< xRooNode > fNode;  ; std::shared_ptr< xRooNode > fTopNode;  . Additional Inherited Members;  Public Types inherited from TBrowser; enum  EStatusBits { kNoHidden = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TBrowser; Bool_t InitGraphics ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:20849,Modifiability,inherit,inherited,20849,"ptr< xRooNode > fNode;  ; std::shared_ptr< xRooNode > fTopNode;  . Additional Inherited Members;  Public Types inherited from TBrowser; enum  EStatusBits { kNoHidden = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TBrowser; Bool_t InitGraphics ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:21060,Modifiability,inherit,inherited,21060,"kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TBrowser; Bool_t InitGraphics ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TBrowser; TContextMenu * fContextMenu {nullptr};  Browser's timer. ;  ; TBrowserImp * fImp {nullptr};  ; Bool_t fNeedRefresh {kFALSE};  Context me",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:21205,Modifiability,inherit,inherited,21205,"kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TBrowser; Bool_t InitGraphics ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TBrowser; TContextMenu * fContextMenu {nullptr};  Browser's timer. ;  ; TBrowserImp * fImp {nullptr};  ; Bool_t fNeedRefresh {kFALSE};  Context me",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:22054,Modifiability,inherit,inherited,22054,"ect; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TBrowser; TContextMenu * fContextMenu {nullptr};  Browser's timer. ;  ; TBrowserImp * fImp {nullptr};  ; Bool_t fNeedRefresh {kFALSE};  Context menu pointer. ;  ; TBrowserTimer * fTimer {nullptr};  Window system specific browser implementation. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <RooFit/xRooFit/xRooBrowser.h>. Inheritance diagram for ROOT::Experimental::XRooFit::xRooBrowser:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ xRooBrowser() [1/2]. xRooBrowser::xRooBrowser ; (; ). Definition at line 153 of file xR",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:22341,Modifiability,inherit,inherited,22341," (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TBrowser; TContextMenu * fContextMenu {nullptr};  Browser's timer. ;  ; TBrowserImp * fImp {nullptr};  ; Bool_t fNeedRefresh {kFALSE};  Context menu pointer. ;  ; TBrowserTimer * fTimer {nullptr};  Window system specific browser implementation. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <RooFit/xRooFit/xRooBrowser.h>. Inheritance diagram for ROOT::Experimental::XRooFit::xRooBrowser:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ xRooBrowser() [1/2]. xRooBrowser::xRooBrowser ; (; ). Definition at line 153 of file xRooBrowser.cxx. ◆ xRooBrowser() [2/2]. BEGIN_XROOFIT_NAMESPACE xRooBrowser::xRooBrowser ; (; xRooNode * ; o). Definition at line 80 of file xRooBrowser.cxx. Member Function Documentation. ◆ cd(). void xRooBrowser::cd ; (; const char * ; path). Definition at line 186 of file xRooBrowser.cxx. ◆ Class(). static TClass * ROOT::Experimental::XRooFit::xRooBrowser::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:22423,Modifiability,inherit,inherited,22423," (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TBrowser; TContextMenu * fContextMenu {nullptr};  Browser's timer. ;  ; TBrowserImp * fImp {nullptr};  ; Bool_t fNeedRefresh {kFALSE};  Context menu pointer. ;  ; TBrowserTimer * fTimer {nullptr};  Window system specific browser implementation. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <RooFit/xRooFit/xRooBrowser.h>. Inheritance diagram for ROOT::Experimental::XRooFit::xRooBrowser:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ xRooBrowser() [1/2]. xRooBrowser::xRooBrowser ; (; ). Definition at line 153 of file xRooBrowser.cxx. ◆ xRooBrowser() [2/2]. BEGIN_XROOFIT_NAMESPACE xRooBrowser::xRooBrowser ; (; xRooNode * ; o). Definition at line 80 of file xRooBrowser.cxx. Member Function Documentation. ◆ cd(). void xRooBrowser::cd ; (; const char * ; path). Definition at line 186 of file xRooBrowser.cxx. ◆ Class(). static TClass * ROOT::Experimental::XRooFit::xRooBrowser::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:22636,Modifiability,inherit,inherited,22636," (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TBrowser; TContextMenu * fContextMenu {nullptr};  Browser's timer. ;  ; TBrowserImp * fImp {nullptr};  ; Bool_t fNeedRefresh {kFALSE};  Context menu pointer. ;  ; TBrowserTimer * fTimer {nullptr};  Window system specific browser implementation. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <RooFit/xRooFit/xRooBrowser.h>. Inheritance diagram for ROOT::Experimental::XRooFit::xRooBrowser:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ xRooBrowser() [1/2]. xRooBrowser::xRooBrowser ; (; ). Definition at line 153 of file xRooBrowser.cxx. ◆ xRooBrowser() [2/2]. BEGIN_XROOFIT_NAMESPACE xRooBrowser::xRooBrowser ; (; xRooNode * ; o). Definition at line 80 of file xRooBrowser.cxx. Member Function Documentation. ◆ cd(). void xRooBrowser::cd ; (; const char * ; path). Definition at line 186 of file xRooBrowser.cxx. ◆ Class(). static TClass * ROOT::Experimental::XRooFit::xRooBrowser::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:815,Performance,load,loaded,815,". ROOT: ROOT::Experimental::XRooFit::xRooBrowser Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::Experimental::XRooFit::xRooBrowser Class ReferenceRooFit » xRooFit. ; A version of the TBrowser that can be used to interact with RooFit models and datasets. . Also available under the ROOT::Experimental::RooBrowser alias.; To get started with the xRooBrowser, open any ROOT file containing a workspace and then create an instance of the xRooBrowser just like creating an instance of a TBrowser. A window will be displayed with a navigable tree structure on the left that lets you explore the content of the workspaces present in the loaded file. Note that additional files, including json workspace files, can be loaded through the Browser --> Open menu in the top left corner.; The context menu for each node (access by right clicking on the node) in the tree structure can be used to get more information about the node. In particular, the Draw command can be selected on many of the nodes that are part of a statistical model, which will visualize that part of the model in the browser window. A number of options are available for the Draw command, including (some options can be combined):. ""e"" : calculate and visualize propagated model uncertainty; ""auxratio"" : Draw a ratio auxiliary plot below the main plot; ""auxsignif"" : Draw a significance auxiliary plot below the main plot; ""pull"" : show panel of current parameter values, which can be dragged in order to change the values and visualize the effect on the model (very experimental feature). Once a node has been drawn, the styling of subsequent draws can be controlled through TStyle objects that will now appear in the objects folder in the workspace.; A model can be fit to a dataset from the workspace using the fitTo context menu command and specifyin",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:895,Performance,load,loaded,895,". ROOT: ROOT::Experimental::XRooFit::xRooBrowser Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::Experimental::XRooFit::xRooBrowser Class ReferenceRooFit » xRooFit. ; A version of the TBrowser that can be used to interact with RooFit models and datasets. . Also available under the ROOT::Experimental::RooBrowser alias.; To get started with the xRooBrowser, open any ROOT file containing a workspace and then create an instance of the xRooBrowser just like creating an instance of a TBrowser. A window will be displayed with a navigable tree structure on the left that lets you explore the content of the workspaces present in the loaded file. Note that additional files, including json workspace files, can be loaded through the Browser --> Open menu in the top left corner.; The context menu for each node (access by right clicking on the node) in the tree structure can be used to get more information about the node. In particular, the Draw command can be selected on many of the nodes that are part of a statistical model, which will visualize that part of the model in the browser window. A number of options are available for the Draw command, including (some options can be combined):. ""e"" : calculate and visualize propagated model uncertainty; ""auxratio"" : Draw a ratio auxiliary plot below the main plot; ""auxsignif"" : Draw a significance auxiliary plot below the main plot; ""pull"" : show panel of current parameter values, which can be dragged in order to change the values and visualize the effect on the model (very experimental feature). Once a node has been drawn, the styling of subsequent draws can be controlled through TStyle objects that will now appear in the objects folder in the workspace.; A model can be fit to a dataset from the workspace using the fitTo context menu command and specifyin",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:993,Security,access,access,993,"oFit::xRooBrowser Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::Experimental::XRooFit::xRooBrowser Class ReferenceRooFit » xRooFit. ; A version of the TBrowser that can be used to interact with RooFit models and datasets. . Also available under the ROOT::Experimental::RooBrowser alias.; To get started with the xRooBrowser, open any ROOT file containing a workspace and then create an instance of the xRooBrowser just like creating an instance of a TBrowser. A window will be displayed with a navigable tree structure on the left that lets you explore the content of the workspaces present in the loaded file. Note that additional files, including json workspace files, can be loaded through the Browser --> Open menu in the top left corner.; The context menu for each node (access by right clicking on the node) in the tree structure can be used to get more information about the node. In particular, the Draw command can be selected on many of the nodes that are part of a statistical model, which will visualize that part of the model in the browser window. A number of options are available for the Draw command, including (some options can be combined):. ""e"" : calculate and visualize propagated model uncertainty; ""auxratio"" : Draw a ratio auxiliary plot below the main plot; ""auxsignif"" : Draw a significance auxiliary plot below the main plot; ""pull"" : show panel of current parameter values, which can be dragged in order to change the values and visualize the effect on the model (very experimental feature). Once a node has been drawn, the styling of subsequent draws can be controlled through TStyle objects that will now appear in the objects folder in the workspace.; A model can be fit to a dataset from the workspace using the fitTo context menu command and specifying the name of a dataset in the ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:8390,Security,hash,hash,8390,"s);  ; void StopEmbedding (const char *name="""");  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstra",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:3075,Usability,feedback,feedback,3075," is given, an expected dataset corresponding to the current state of the model will be used). A dialog will display the fit result status code when the fit completes and then a fits folder will be found under the workspace (the workspace may need to be collapsed and re-expanded to make it appear) where the fit result can be found, selected, and visualized. In multi-channel models the channels that are included in the fit can be controlled with the checkboxes in the browser. Clicking the checkbox will cycle through three states: checked, unchecked with grey-underline, and checked with grey-underline. The grey-underline indicates that channel wont be included in the fit (and will appear greyed out when the model is visualized); Many more features are available in the xRooBrowser, and further documentation and development can be found at the xRooFit repository, which is the library where the browser has been originally developed. The author (Will Buttinger) is also very happy to be contacted with questions or feedback about this new functionality. ; Definition at line 30 of file xRooBrowser.h. Public Member Functions;  xRooBrowser ();  ;  xRooBrowser (xRooNode *o);  ; void cd (const char *path);  ; xRooNode * GetSelected ();  ; void HandleMenu (Int_t id);  ; TClass * IsA () const override;  ; void ls (const char *path=nullptr) const override;  List TNamed name and title. ;  ; xRooNode * Open (const char *filename);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TBrowser;  TBrowser (const char *name, const char *title, Int_t x, Int_t y, UInt_t width, UInt_t height, TBrowserImp *extimp=nullptr, Option_t *opt="""");  Create a new browser with a name, title, position, width and height. ;  ;  TBrowser (const char *name, const char *title, UInt_t width, UInt_t height, TBrowserImp *extimp=nullptr, Option_t *opt="""");  Create a new browser with",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html:3931,Availability,error,error,3931,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html:4020,Availability,error,error,4020,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html:4175,Availability,error,error,4175,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html:4472,Availability,error,error,4472,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html:8556,Availability,error,error,8556,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html:3937,Integrability,message,message,3937,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html:4478,Integrability,message,message,4478,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html:5468,Integrability,message,message,5468,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html:8562,Integrability,message,message,8562,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html:8935,Integrability,message,message,8935," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  G",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html:734,Modifiability,inherit,inherited,734,". ROOT: ROOT::Experimental::XRooFit::xRooFit::StoredFitResult Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; ROOT::Experimental::XRooFit::xRooFit::StoredFitResult Class Reference. . Definition at line 113 of file xRooFit.h. Public Member Functions;  StoredFitResult (const std::shared_ptr< RooFitResult > &_fr);  ;  StoredFitResult (RooFitResult *_fr);  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the nam",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html:2474,Modifiability,inherit,inherited,2474,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html:3567,Modifiability,inherit,inheritance,3567,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html:5566,Modifiability,inherit,inherits,5566,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html:5683,Modifiability,inherit,inherits,5683,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html:9436,Modifiability,inherit,inherited,9436,"stem error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; std::shared_ptr< RooFitResult > fr;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { k",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html:9646,Modifiability,inherit,inherited,9646,"stem error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; std::shared_ptr< RooFitResult > fr;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { k",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html:10234,Modifiability,inherit,inherited,10234,"* Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; std::shared_ptr< RooFitResult > fr;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <RooFit/xRooFit/xRooFit.h>. Inheritance diagram f",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html:10875,Modifiability,inherit,inherited,10875,"oid *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; std::shared_ptr< RooFitResult > fr;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <RooFit/xRooFit/xRooFit.h>. Inheritance diagram for ROOT::Experimental::XRooFit::xRooFit::StoredFitResult:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ StoredFitResult() [1/2]. xRooFit::StoredFitResult::StoredFitResult ; (; RooFitResult * ; _fr). Definition at line 711 of file xRooFit.cxx. ◆ StoredFitResult() [2/2]. xRooFit::StoredFitResult::StoredFitResult ; (; const std::shared_ptr< RooFitResult > & ; _fr). Definition at line 716 of file xRooFit.cxx. Member Function Documentation. ◆ Class(). static TClass * ROOT::Experimental::XRooFit::xRooFit::StoredFitResult::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). s",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html:10974,Modifiability,inherit,inherited,10974,"oid *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; std::shared_ptr< RooFitResult > fr;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <RooFit/xRooFit/xRooFit.h>. Inheritance diagram for ROOT::Experimental::XRooFit::xRooFit::StoredFitResult:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ StoredFitResult() [1/2]. xRooFit::StoredFitResult::StoredFitResult ; (; RooFitResult * ; _fr). Definition at line 711 of file xRooFit.cxx. ◆ StoredFitResult() [2/2]. xRooFit::StoredFitResult::StoredFitResult ; (; const std::shared_ptr< RooFitResult > & ; _fr). Definition at line 716 of file xRooFit.cxx. Member Function Documentation. ◆ Class(). static TClass * ROOT::Experimental::XRooFit::xRooFit::StoredFitResult::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). s",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html:11179,Modifiability,inherit,inherited,11179,"fr;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <RooFit/xRooFit/xRooFit.h>. Inheritance diagram for ROOT::Experimental::XRooFit::xRooFit::StoredFitResult:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ StoredFitResult() [1/2]. xRooFit::StoredFitResult::StoredFitResult ; (; RooFitResult * ; _fr). Definition at line 711 of file xRooFit.cxx. ◆ StoredFitResult() [2/2]. xRooFit::StoredFitResult::StoredFitResult ; (; const std::shared_ptr< RooFitResult > & ; _fr). Definition at line 716 of file xRooFit.cxx. Member Function Documentation. ◆ Class(). static TClass * ROOT::Experimental::XRooFit::xRooFit::StoredFitResult::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::Experimental::XRooFit::xRooFit::StoredFitResult::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::Experimenta",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html:1602,Security,hash,hash,1602,"Buffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html:5629,Availability,error,error,5629,"d graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html:5718,Availability,error,error,5718," be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html:5873,Availability,error,error,5873," then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html:6170,Availability,error,error,6170,"putes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html:10254,Availability,error,error,10254,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFil",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html:5635,Integrability,message,message,5635,"d graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html:6176,Integrability,message,message,6176,"putes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html:7166,Integrability,message,message,7166,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html:10260,Integrability,message,message,10260,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFil",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html:10633,Integrability,message,message,10633," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttribu",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html:589,Modifiability,inherit,inherited,589,". ROOT: ROOT::Experimental::XRooFit::xRooHypoSpace Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; ROOT::Experimental::XRooFit::xRooHypoSpace Class Reference. . Definition at line 27 of file xRooHypoSpace.h. Public Member Functions; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from ROOT::Experimental::XRooFit::xRooNLLVar::xRooHypoSpace;  xRooHypoSpace (const char *name="""", const char *title="""");  ;  xRooHypoSpace (const RooStats::HypoTestInverterResult *result);  ; bool AddModel (const xRooNode &pdf, const char *validity="""");  ; xRooHypoPoint & AddPoint (const char *coords="""");  ; xRooHypoPoint & AddPoint (double value);  ; int AddPoints (const char *parName, size_t nPoints, double low, double high);  ; RooArgList axes () const;  ; void Draw (Option_t *opt="""") override;  Default Draw method for all objects. ;  ; xValueWithError findlimit (const char *opt, double relUncert=std::numeric_limits< double >::infinity(), unsigned int maxTries=20);  ; std::shared_ptr< TGraphErrors > graph (const char *opt) const;  ; std::shared_ptr< TMultiGraph > graphs (const char *opt);  ; xValueWithError limit (const char *type=""cls"", double nSigma=std::numeric_limits< double >::quiet_NaN()) const;  ; std::map< std::string, xValueWithError > limits (const char *opt=""cls"", const std::vector< double > &nSigmas={0, 1, 2, -1, -2, std::numeric_limits< double >::quiet_NaN()}, double relUncert=std::numeric_limits< double >::infinity());  ; void LoadFits (const char *apath);  ; std::shared_ptr< RooArgSet > pars () const;  ; std::shared_ptr< xRooNode > pdf (const char *parValues="""") const;  ; std::shared_ptr< xRooNode > pdf (const RooAbsCollection &parValues) const;  ; RooArgList po",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html:2712,Modifiability,inherit,inherited,2712,"dFits (const char *apath);  ; std::shared_ptr< RooArgSet > pars () const;  ; std::shared_ptr< xRooNode > pdf (const char *parValues="""") const;  ; std::shared_ptr< xRooNode > pdf (const RooAbsCollection &parValues) const;  ; RooArgList poi ();  ; xRooHypoPoint & point (size_t i);  ; void Print (Option_t *opt="""") const override;  Print TNamed name and title. ;  ; RooStats::HypoTestInverterResult * result ();  ; int scan (const char *type, double nSigma, double relUncert=0.1);  ; int scan (const char *type, size_t nPoints, double low=std::numeric_limits< double >::quiet_NaN(), double high=std::numeric_limits< double >::quiet_NaN(), const std::vector< double > &nSigmas={0, 1, 2, -1, -2, std::numeric_limits< double >::quiet_NaN()}, double relUncert=0.1);  ; int scan (const char *type=""cls"", const std::vector< double > &nSigmas={0, 1, 2, -1, -2, std::numeric_limits< double >::quiet_NaN()}, double relUncert=0.1);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html:4256,Modifiability,inherit,inherited,4256,"bjects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html:5265,Modifiability,inherit,inheritance,5265,"m TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html:7264,Modifiability,inherit,inherits,7264,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html:7381,Modifiability,inherit,inherits,7381,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html:10940,Modifiability,inherit,inherited,10940,"tDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColorAlpha",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html:12195,Modifiability,inherit,inherited,12195,"his fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttMarker;  TAttMarker ();  TAttMarker default constructor. ;  ;  TAttMarker (Color_t color, Style_t style, Size_t msize);  TAttMarker normal constructor. ;  ; virtual ~TAttMarker ();  TAttMarker destructor. ;  ; void Copy (TAttMarker &attmarker) const;  Copy this marker attributes to a new TAttMarker. ;  ; virtual Color_t GetMarkerColor () const;  Return the marker color. ;  ; virtual Size_t GetMarkerSize () const;  Return the marker size. ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attrib",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html:13615,Modifiability,inherit,inherited,13615,"ize_t GetMarkerSize () const;  Return the marker size. ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ stat",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html:15314,Modifiability,inherit,inherited,15314,"efault values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName (",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html:15524,Modifiability,inherit,inherited,15524,"efault values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName (",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html:16042,Modifiability,inherit,inherited,16042,"t char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  ESta",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html:16254,Modifiability,inherit,inherited,16254,"t char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  ESta",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html:16789,Modifiability,inherit,inherited,16789,"rOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va)",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html:17013,Modifiability,inherit,inherited,17013,"Class * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttFill; Color_t fFi",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html:17654,Modifiability,inherit,inherited,17654,"lic Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . #include <RooFit/xRooFit/xRooHypoSpace.h>. Inheritance diagram for ROOT::Experimental::XRooFit::xRooHypoSpace:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Function Documentation. ◆ Class(). static TClass * ROOT::Experimental:",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html:17753,Modifiability,inherit,inherited,17753,"lic Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . #include <RooFit/xRooFit/xRooHypoSpace.h>. Inheritance diagram for ROOT::Experimental::XRooFit::xRooHypoSpace:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Function Documentation. ◆ Class(). static TClass * ROOT::Experimental:",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html:17958,Modifiability,inherit,inherited,17958,"ic Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . #include <RooFit/xRooFit/xRooHypoSpace.h>. Inheritance diagram for ROOT::Experimental::XRooFit::xRooHypoSpace:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Function Documentation. ◆ Class(). static TClass * ROOT::Experimental::XRooFit::xRooHypoSpace::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::Experimental::XRooFit::xRooHypoSpace::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Versio",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html:18040,Modifiability,inherit,inherited,18040,"ic Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . #include <RooFit/xRooFit/xRooHypoSpace.h>. Inheritance diagram for ROOT::Experimental::XRooFit::xRooHypoSpace:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Function Documentation. ◆ Class(). static TClass * ROOT::Experimental::XRooFit::xRooHypoSpace::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::Experimental::XRooFit::xRooHypoSpace::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Versio",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html:18173,Modifiability,inherit,inherited,18173,"enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . #include <RooFit/xRooFit/xRooHypoSpace.h>. Inheritance diagram for ROOT::Experimental::XRooFit::xRooHypoSpace:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Function Documentation. ◆ Class(). static TClass * ROOT::Experimental::XRooFit::xRooHypoSpace::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::Experimental::XRooFit::xRooHypoSpace::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::Experimental::XRooFit::xRooHypoSpace::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 30 of file xRo",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html:18345,Modifiability,inherit,inherited,18345,"); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . #include <RooFit/xRooFit/xRooHypoSpace.h>. Inheritance diagram for ROOT::Experimental::XRooFit::xRooHypoSpace:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Function Documentation. ◆ Class(). static TClass * ROOT::Experimental::XRooFit::xRooHypoSpace::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::Experimental::XRooFit::xRooHypoSpace::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::Experimental::XRooFit::xRooHypoSpace::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 30 of file xRooHypoSpace.h. ◆ DeclFileName(). static const char * ROOT::Experimental::XRooFit::xRooHypoSpace::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing th",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html:3580,Security,hash,hash,3580,"::vector< double > &nSigmas={0, 1, 2, -1, -2, std::numeric_limits< double >::quiet_NaN()}, double relUncert=0.1);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html:6083,Availability,error,error,6083,"d graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html:6172,Availability,error,error,6172," be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html:6327,Availability,error,error,6327," then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html:6624,Availability,error,error,6624,"putes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html:10708,Availability,error,error,10708,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; std::vector< std::tuple< int, double, double > > altToys;  ; std::shared_ptr< const RooAbsCollection > coords;  ; std::shared_ptr< const RooFitResult > fAlt_cfit;  ; std::shared_ptr< xRooHypoPoint > fAsimov;  ; std::pair< std::shared_ptr< RooAbsData >, std::shared_ptr< const RooAbsCollection > > fData;  ; std::shar",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html:6089,Integrability,message,message,6089,"d graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html:6630,Integrability,message,message,6630,"putes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html:7620,Integrability,message,message,7620,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html:10714,Integrability,message,message,10714,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; std::vector< std::tuple< int, double, double > > altToys;  ; std::shared_ptr< const RooAbsCollection > coords;  ; std::shared_ptr< const RooFitResult > fAlt_cfit;  ; std::shared_ptr< xRooHypoPoint > fAsimov;  ; std::pair< std::shared_ptr< RooAbsData >, std::shared_ptr< const RooAbsCollection > > fData;  ; std::shar",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html:11087,Integrability,message,message,11087," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; std::vector< std::tuple< int, double, double > > altToys;  ; std::shared_ptr< const RooAbsCollection > coords;  ; std::shared_ptr< const RooFitResult > fAlt_cfit;  ; std::shared_ptr< xRooHypoPoint > fAsimov;  ; std::pair< std::shared_ptr< RooAbsData >, std::shared_ptr< const RooAbsCollection > > fData;  ; std::shared_ptr< const RooFitResult > fGenFit;  ; std::shared_ptr< const RooFitResult > fLbound_cfit;  ; std::shared_ptr< const RooFitResult > fNull_cfit;  ; xRooFit::Asymptotics::PLLType fPllType = xRooFit::Asymptotics::Unknown;  ; std::shared_ptr< const RooFitResult > fUfit;  ; std::shared_ptr< RooStats::HypoTestResult > hypoTestResult = nullptr;  ; bool isExpected = false;  ; st",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html:3054,Modifiability,inherit,inherited,3054,"ithError pAlt_asymp (double nSigma=std::numeric_limits< double >::quiet_NaN());  ; xValueWithError pAlt_toys (double nSigma=std::numeric_limits< double >::quiet_NaN());  ; xValueWithError pCLs_asymp (double nSigma=std::numeric_limits< double >::quiet_NaN());  ; xValueWithError pCLs_toys (double nSigma=std::numeric_limits< double >::quiet_NaN());  ; xValueWithError pll (bool readOnly=false);  ; xValueWithError pNull_asymp (double nSigma=std::numeric_limits< double >::quiet_NaN());  ; xValueWithError pNull_toys (double nSigma=std::numeric_limits< double >::quiet_NaN());  ; RooArgList poi () const;  ; void Print (Option_t *opt="""") const override;  Print TNamed name and title. ;  ; RooStats::HypoTestResult result ();  ; std::shared_ptr< const RooFitResult > retrieveFit (int type);  ; xValueWithError sigma_mu (bool readOnly=false);  ; int status () const;  ; xValueWithError ts_asymp (double nSigma=std::numeric_limits< double >::quiet_NaN());  ; xValueWithError ts_toys (double nSigma=std::numeric_limits< double >::quiet_NaN());  ; TString tsTitle (bool inWords=false) const;  ; std::shared_ptr< const RooFitResult > ufit (bool readOnly=false);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of obj",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html:4710,Modifiability,inherit,inherited,4710,"buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html:5719,Modifiability,inherit,inheritance,5719,"m TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html:7718,Modifiability,inherit,inherits,7718,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html:7835,Modifiability,inherit,inherits,7835,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html:12689,Modifiability,inherit,inherited,12689,"hared_ptr< const RooFitResult > fLbound_cfit;  ; std::shared_ptr< const RooFitResult > fNull_cfit;  ; xRooFit::Asymptotics::PLLType fPllType = xRooFit::Asymptotics::Unknown;  ; std::shared_ptr< const RooFitResult > fUfit;  ; std::shared_ptr< RooStats::HypoTestResult > hypoTestResult = nullptr;  ; bool isExpected = false;  ; std::shared_ptr< xRooNLLVar > nllVar = nullptr;  ; std::vector< std::tuple< int, double, double > > nullToys;  . Static Public Attributes; static std::set< int > allowedStatusCodes = {0};  . Private Member Functions; size_t addToys (bool alt, int nToys, int initialSeed=0, double target=std::numeric_limits< double >::quiet_NaN(), double target_nSigma=std::numeric_limits< double >::quiet_NaN(), bool targetCLs=false, double relErrThreshold=2., size_t maxToys=10000);  ; xValueWithError pX_toys (bool alt, double nSigma=std::numeric_limits< double >::quiet_NaN());  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t G",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html:13345,Modifiability,inherit,inherited,13345,"lueWithError pX_toys (bool alt, double nSigma=std::numeric_limits< double >::quiet_NaN());  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <RooFit/xRooFit/xRooNLLVar.h>. Inheritance diagram for ROOT::Experimental::XRooFit::xRooNLLVar::xRooHypoPoint:. This bro",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html:13555,Modifiability,inherit,inherited,13555,"lueWithError pX_toys (bool alt, double nSigma=std::numeric_limits< double >::quiet_NaN());  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <RooFit/xRooFit/xRooNLLVar.h>. Inheritance diagram for ROOT::Experimental::XRooFit::xRooNLLVar::xRooHypoPoint:. This bro",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html:14058,Modifiability,inherit,inherited,14058,"UUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <RooFit/xRooFit/xRooNLLVar.h>. Inheritance diagram for ROOT::Experimental::XRooFit::xRooNLLVar::xRooHypoPoint:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ xRooHypoPoint(). xRooNLLVar::xRooHypoPoint::xRooHypoPoint ; (; std::shared_ptr< RooStats::HypoTestResult > ; htr = nullptr, . const RooAbsCollection * ; _coords = nullptr . ). Definition at line 1526 of file xRooNLLVar.cxx. Member Function Documentation. ◆ addAltToys(). void xRooNLLVar::xRooHypoPoint::addAltToys ; (; int ; nToys = 1, . int ; seed = 0, . double ; target = std::numeric_limits<double>::quiet_NaN(), . double ; target_nSigma = std::numeric_limits<double>::quiet_NaN() . ). Def",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html:14157,Modifiability,inherit,inherited,14157,"UUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <RooFit/xRooFit/xRooNLLVar.h>. Inheritance diagram for ROOT::Experimental::XRooFit::xRooNLLVar::xRooHypoPoint:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ xRooHypoPoint(). xRooNLLVar::xRooHypoPoint::xRooHypoPoint ; (; std::shared_ptr< RooStats::HypoTestResult > ; htr = nullptr, . const RooAbsCollection * ; _coords = nullptr . ). Definition at line 1526 of file xRooNLLVar.cxx. Member Function Documentation. ◆ addAltToys(). void xRooNLLVar::xRooHypoPoint::addAltToys ; (; int ; nToys = 1, . int ; seed = 0, . double ; target = std::numeric_limits<double>::quiet_NaN(), . double ; target_nSigma = std::numeric_limits<double>::quiet_NaN() . ). Def",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html:14362,Modifiability,inherit,inherited,14362,"; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <RooFit/xRooFit/xRooNLLVar.h>. Inheritance diagram for ROOT::Experimental::XRooFit::xRooNLLVar::xRooHypoPoint:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ xRooHypoPoint(). xRooNLLVar::xRooHypoPoint::xRooHypoPoint ; (; std::shared_ptr< RooStats::HypoTestResult > ; htr = nullptr, . const RooAbsCollection * ; _coords = nullptr . ). Definition at line 1526 of file xRooNLLVar.cxx. Member Function Documentation. ◆ addAltToys(). void xRooNLLVar::xRooHypoPoint::addAltToys ; (; int ; nToys = 1, . int ; seed = 0, . double ; target = std::numeric_limits<double>::quiet_NaN(), . double ; target_nSigma = std::numeric_limits<double>::quiet_NaN() . ). Definition at line 2334 of file xRooNLLVar.cxx. ◆ addCLsToys(). void xRooNLLVar::xRooHypoPoint::addCLsToys ; (; int ; nToys = 1, . int ; seed = 0, . double ; target = std::numeric_limits<double>::",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html:3922,Security,hash,hash,3922," TString tsTitle (bool inWords=false) const;  ; std::shared_ptr< const RooFitResult > ufit (bool readOnly=false);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoPoint.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html:5526,Availability,error,error,5526,"d graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html:5615,Availability,error,error,5615," be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html:5770,Availability,error,error,5770," then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html:6067,Availability,error,error,6067,"putes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html:10151,Availability,error,error,10151,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFil",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html:5532,Integrability,message,message,5532,"d graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html:6073,Integrability,message,message,6073,"putes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html:7063,Integrability,message,message,7063,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html:10157,Integrability,message,message,10157,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFil",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html:10530,Integrability,message,message,10530," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual TClass * IsA () const;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values.",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html:2497,Modifiability,inherit,inherited,2497,"dFits (const char *apath);  ; std::shared_ptr< RooArgSet > pars () const;  ; std::shared_ptr< xRooNode > pdf (const char *parValues="""") const;  ; std::shared_ptr< xRooNode > pdf (const RooAbsCollection &parValues) const;  ; RooArgList poi ();  ; xRooHypoPoint & point (size_t i);  ; void Print (Option_t *opt="""") const override;  Print TNamed name and title. ;  ; RooStats::HypoTestInverterResult * result ();  ; int scan (const char *type, double nSigma, double relUncert=0.1);  ; int scan (const char *type, size_t nPoints, double low=std::numeric_limits< double >::quiet_NaN(), double high=std::numeric_limits< double >::quiet_NaN(), const std::vector< double > &nSigmas={0, 1, 2, -1, -2, std::numeric_limits< double >::quiet_NaN()}, double relUncert=0.1);  ; int scan (const char *type=""cls"", const std::vector< double > &nSigmas={0, 1, 2, -1, -2, std::numeric_limits< double >::quiet_NaN()}, double relUncert=0.1);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ; ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html:4153,Modifiability,inherit,inherited,4153,"buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html:5162,Modifiability,inherit,inheritance,5162,"m TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html:7161,Modifiability,inherit,inherits,7161,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html:7278,Modifiability,inherit,inherits,7278,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html:10837,Modifiability,inherit,inherited,10837,"tDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual TClass * IsA () const;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html:12164,Modifiability,inherit,inherited,12164,"olor_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual TClass * IsA () const;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttMarker;  TAttMarker ();  TAttMarker default constructor. ;  ;  TAttMarker (Color_t color, Style_t style, Size_t msize);  TAttMarker normal constructor. ;  ; virtual ~TAttMarker ();  TAttMarker destructor. ;  ; void Copy (TAttMarker &attmarker) const;  Copy this marker attributes to a new TAttMarker. ;  ; virtual Color_t GetMarkerColor () const;  Return the marker color. ;  ; virtual Size_t GetMarkerSize () const;  Return the marker size. ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual TClass * IsA () const;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarker",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html:13656,Modifiability,inherit,inherited,13656,". ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual TClass * IsA () const;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual TClass * IsA () const;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html:15794,Modifiability,inherit,inherited,15794,"r. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Private Member Functions; static xValueWithError GetLimit (const TGraph &pValues, double target=std::numeric_limits< double >::quiet_NaN());  ; static RooArgList toArgs (const char *str);  . Private Attributes; std::map< std::shared_ptr< xRooNode >, std::shared_ptr< xRooNLLVar > > fNlls;  ; std::shared_ptr< RooArgSet > fPars;  ; std::set< std::pair< std::shared_ptr< RooArgList >, std::shared_ptr< xRooNode > > > fPdfs;  ; xRooFit::Asymptotics::PLLType fTestStatType = xRooFit::Asymptotics::Unknown;  . Friends; class xRooNLLVar;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t G",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html:16450,Modifiability,inherit,inherited,16450,"tics::PLLType fTestStatType = xRooFit::Asymptotics::Unknown;  . Friends; class xRooNLLVar;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that re",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html:16660,Modifiability,inherit,inherited,16660,"tics::PLLType fTestStatType = xRooFit::Asymptotics::Unknown;  . Friends; class xRooNLLVar;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that re",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html:17178,Modifiability,inherit,inherited,17178,"t char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inheri",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html:17390,Modifiability,inherit,inherited,17390,"t char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inheri",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html:17925,Modifiability,inherit,inherited,17925,"ectTable. ;  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . #include <RooFit/xRooFit/xRooNLLVar.h>. Inheritance diagram for ROOT::Experimental::XRooFit::xRooNLLVar::xRooHypoSpace:. This browser is not able to show SVG: try Firefox, Chrome,",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html:18122,Modifiability,inherit,inherited,18122,"ectTable. ;  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . #include <RooFit/xRooFit/xRooNLLVar.h>. Inheritance diagram for ROOT::Experimental::XRooFit::xRooNLLVar::xRooHypoSpace:. This browser is not able to show SVG: try Firefox, Chrome,",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html:18221,Modifiability,inherit,inherited,18221,"ectTable. ;  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . #include <RooFit/xRooFit/xRooNLLVar.h>. Inheritance diagram for ROOT::Experimental::XRooFit::xRooNLLVar::xRooHypoSpace:. This browser is not able to show SVG: try Firefox, Chrome,",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html:18426,Modifiability,inherit,inherited,18426,"Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . #include <RooFit/xRooFit/xRooNLLVar.h>. Inheritance diagram for ROOT::Experimental::XRooFit::xRooNLLVar::xRooHypoSpace:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ xRooHypoSpace() [1/2]. BEGIN_XROOFIT_NAMESPACE xRooNLLVar::xRooHypoSpace::xRooHypoSpace ; (; const char * ; name = """", . const char * ; title = """" . ). Definition at line 42 of file xRooHypoSpace.cxx. ◆ xRooHypoSpace() [2/2]. xRooNLLVar::xRooHypoSpace::xRooHypoS",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html:18508,Modifiability,inherit,inherited,18508,"Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . #include <RooFit/xRooFit/xRooNLLVar.h>. Inheritance diagram for ROOT::Experimental::XRooFit::xRooNLLVar::xRooHypoSpace:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ xRooHypoSpace() [1/2]. BEGIN_XROOFIT_NAMESPACE xRooNLLVar::xRooHypoSpace::xRooHypoSpace ; (; const char * ; name = """", . const char * ; title = """" . ). Definition at line 42 of file xRooHypoSpace.cxx. ◆ xRooHypoSpace() [2/2]. xRooNLLVar::xRooHypoSpace::xRooHypoS",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html:18641,Modifiability,inherit,inherited,18641,"rns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . #include <RooFit/xRooFit/xRooNLLVar.h>. Inheritance diagram for ROOT::Experimental::XRooFit::xRooNLLVar::xRooHypoSpace:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ xRooHypoSpace() [1/2]. BEGIN_XROOFIT_NAMESPACE xRooNLLVar::xRooHypoSpace::xRooHypoSpace ; (; const char * ; name = """", . const char * ; title = """" . ). Definition at line 42 of file xRooHypoSpace.cxx. ◆ xRooHypoSpace() [2/2]. xRooNLLVar::xRooHypoSpace::xRooHypoSpace ; (; const RooStats::HypoTestInverterResult * ; result). Definition at line 50 of file xRooHypoSpace.cxx. Member Function Documentation. ◆ AddModel(). bool xRooNLLVar::xRooHypoSpace",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html:18813,Modifiability,inherit,inherited,18813,"sponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . #include <RooFit/xRooFit/xRooNLLVar.h>. Inheritance diagram for ROOT::Experimental::XRooFit::xRooNLLVar::xRooHypoSpace:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ xRooHypoSpace() [1/2]. BEGIN_XROOFIT_NAMESPACE xRooNLLVar::xRooHypoSpace::xRooHypoSpace ; (; const char * ; name = """", . const char * ; title = """" . ). Definition at line 42 of file xRooHypoSpace.cxx. ◆ xRooHypoSpace() [2/2]. xRooNLLVar::xRooHypoSpace::xRooHypoSpace ; (; const RooStats::HypoTestInverterResult * ; result). Definition at line 50 of file xRooHypoSpace.cxx. Member Function Documentation. ◆ AddModel(). bool xRooNLLVar::xRooHypoSpace::AddModel ; (; const xRooNode & ; pdf, . const char * ; validity = """" . ). Definition at line 578 of file xRooHypoSpace.cxx. ◆ AddPoint() [1/2]. xRooNLLVar::xRooHypoPoi",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html:3365,Security,hash,hash,3365,"::vector< double > &nSigmas={0, 1, 2, -1, -2, std::numeric_limits< double >::quiet_NaN()}, double relUncert=0.1);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:2561,Availability,error,errors,2561,""""", const std::shared_ptr< TObject > &comp=nullptr, const std::shared_ptr< xRooNode > &parent=nullptr);  ;  xRooNode (const char *type, const char *name, const char *title="""");  ;  ~xRooNode () override;  ; xRooNode Add (const xRooNode &child, Option_t *opt="""");  ; RooArgList argList () const;  ; std::shared_ptr< xRooNode > at (const std::string &name, bool browseResult=true) const;  ; const std::shared_ptr< xRooNode > & at (size_t idx, bool browseResult=true) const;  ; auto begin () const -> xRooNodeIterator;  ; xRooNode bins () const;  bins of a channel or sample, or channels of a multi-channel pdf ;  ; void Browse (TBrowser *b=nullptr) override;  Browse object. May be overridden for another default action. ;  ; TGraph * BuildGraph (RooAbsLValue *v=nullptr, bool includeZeros=false, TVirtualPad *fromPad=nullptr) const;  ; TH1 * BuildHistogram (RooAbsLValue *v=nullptr, bool empty=false, bool errors=false, int binStart=1, int binEnd=0, const xRooNode &fr="""") const;  ; void Checked (TObject *obj, bool val);  ; xRooNode coefs () const;  ; xRooNode Combine (const xRooNode &rhs);  ; xRooNode components () const;  ; xRooNode Constrain (const xRooNode &child);  ; xRooNode constraints () const;  ; xRooNode consts () const;  List of parameters that are currently constant. ;  ; bool contains (const std::string &name) const;  ; std::vector< double > contents () const;  ; xRooNode coords (bool setVals=true) const;  ; TMatrixDSym covariances (const xRooNode &fr="""") const;  ; xRooNode datasets () const;  ; void Draw (Option_t *opt="""") override;  Default Draw method for all objects. ;  ; auto end () const -> xRooNodeIterator;  ; xRooNode factors () const;  ; std::shared_ptr< xRooNode > find (const std::string &name, bool browseResult=true) const;  ; xRooNode fitResult (const char *opt="""") const;  ; xRooNode floats () const;  List of parameters that are currently non-constant These parameters do not have the ""Constant"" attribute. ;  ; xRooNode generate (const xRooNode &fr="""", bool e",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:11045,Availability,error,error,11045,"hat you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ; ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:11134,Availability,error,error,11134,");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:11289,Availability,error,error,11289," then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:11586,Availability,error,error,11586,"putes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns k",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:15226,Availability,error,error,15226,"void Paint (Option_t *option="""");  This method must be overridden if a class wants to paint itself. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void Interactive_PLLPlot ();  ; static void Interactive_Pull ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Cl",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:20647,Availability,error,errors,20647,"ed_ptr< T > acquire (Args &&...args);  ; std::shared_ptr< TObject > acquire (const std::shared_ptr< TObject > &arg, bool checkFactory=false, bool mustBeNew=false);  ; template<typename T , typename T2 , typename... Args> ; std::shared_ptr< T > acquire2 (Args &&...args);  ; template<typename T , typename... Args> ; std::shared_ptr< T > acquireNew (Args &&...args);  ; xRooNode & browse ();  ; std::shared_ptr< TObject > convertForAcquisition (xRooNode &acquirer, const char *opt="""") const;  ; xRooNode filter (const xRooNode &range) const;  ; std::shared_ptr< xRooNode > getBrowsable (const char *name) const;  ; const char * GetIconName () const override;  Returns mime type name of object. ;  ; TGListTree * GetListTree (TBrowser *b) const;  ; const char * GetNodeType () const;  ; template<typename T > ; std::shared_ptr< T > getObject (const std::string &name) const;  ; std::shared_ptr< TObject > getObject (const std::string &name, const std::string &type="""") const;  ; std::string GetPath () const;  ; TGListTreeItem * GetTreeItem (TBrowser *b) const;  ; xRooNode histo (const xRooNode &vars=""x"", const xRooNode &fr="""", bool content=true, bool errors=true) const;  ; bool IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ;  operator bool () const;  ; xRooNode shallowCopy (const std::string &name, std::shared_ptr< xRooNode > parent=nullptr);  ; void sterilize () const;  ; TObject * xget () const;  . Static Private Member Functions; static bool isNull (const std::shared_ptr< xRooNode > &x);  ; static void SetAuxFunction (const char *title, const std::function< double(double, double, double)> &func, bool symmetrize=false);  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1UL",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:29749,Availability,error,errors,29749,"ion at line 147 of file xRooNode.h. ◆ begin(). auto ROOT::Experimental::XRooFit::xRooNode::begin ; (; ); const -> xRooNodeIterator . inline . Definition at line 200 of file xRooNode.h. ◆ bins(). xRooNode xRooNode::bins ; (; ); const. bins of a channel or sample, or channels of a multi-channel pdf ; Definition at line 5663 of file xRooNode.cxx. ◆ browse(). xRooNode & xRooNode::browse ; (; ). private . Definition at line 4997 of file xRooNode.cxx. ◆ Browse(). void xRooNode::Browse ; (; TBrowser * ; b = nullptr). overridevirtual . Browse object. May be overridden for another default action. ; Reimplemented from TObject.; Definition at line 558 of file xRooNode.cxx. ◆ BuildGraph(). TGraph * xRooNode::BuildGraph ; (; RooAbsLValue * ; v = nullptr, . bool ; includeZeros = false, . TVirtualPad * ; fromPad = nullptr . ); const. Definition at line 6104 of file xRooNode.cxx. ◆ BuildHistogram(). TH1 * xRooNode::BuildHistogram ; (; RooAbsLValue * ; v = nullptr, . bool ; empty = false, . bool ; errors = false, . int ; binStart = 1, . int ; binEnd = 0, . const xRooNode & ; fr = """" . ); const. Definition at line 7752 of file xRooNode.cxx. ◆ Checked(). void xRooNode::Checked ; (; TObject * ; obj, . bool ; val . ). Definition at line 482 of file xRooNode.cxx. ◆ Class(). static TClass * ROOT::Experimental::XRooFit::xRooNode::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::Experimental::XRooFit::xRooNode::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::Experimental::XRooFit::xRooNode::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 503 of file xRooNode.h. ◆ coefs(). xRooNode xRooNode::coefs ; (; ); const. Definition at line 5724 of file xRooNode.cxx. ◆ Combine(). xRooNode xRooNode::Combine ; (; const xRooNode & ; rhs). Definition at line 2242 of file xRooNode.cxx. ◆ components(). xRooNode xRooNode::components ; (; ); const. De",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:36951,Availability,error,errors,36951,"ineprivate . Definition at line 282 of file xRooNode.h. ◆ getObject() [2/2]. std::shared_ptr< TObject > xRooNode::getObject ; (; const std::string & ; name, . const std::string & ; type = """" . ); const. private . Definition at line 911 of file xRooNode.cxx. ◆ GetPath(). std::string xRooNode::GetPath ; (; ); const. private . Definition at line 2212 of file xRooNode.cxx. ◆ GetRange(). const char * xRooNode::GetRange ; (; ); const. Definition at line 6642 of file xRooNode.cxx. ◆ GetTreeItem(). TGListTreeItem * xRooNode::GetTreeItem ; (; TBrowser * ; b); const. private . Definition at line 4921 of file xRooNode.cxx. ◆ GetXaxis(). TAxis * xRooNode::GetXaxis ; (; ); const. Definition at line 984 of file xRooNode.cxx. ◆ globs(). xRooNode xRooNode::globs ; (; ); const. List of global observables of this node. ; Definition at line 5286 of file xRooNode.cxx. ◆ histo(). xRooNode xRooNode::histo ; (; const xRooNode & ; vars = ""x"", . const xRooNode & ; fr = """", . bool ; content = true, . bool ; errors = true . ); const. private . Definition at line 7504 of file xRooNode.cxx. ◆ Inspect(). void xRooNode::Inspect ; (; ); const. overridevirtual . Dump contents of this object in a graphics canvas. ; Same action as Dump but in a graphical form. In addition pointers to other objects can be followed.; The following picture is the Inspect of a histogram object: . Reimplemented from TObject.; Definition at line 8299 of file xRooNode.cxx. ◆ IntegralAndError(). std::pair< double, double > xRooNode::IntegralAndError ; (; const xRooNode & ; fr = """", . const char * ; rangeName = nullptr . ); const. Definition at line 10874 of file xRooNode.cxx. ◆ Interactive_PLLPlot(). void xRooNode::Interactive_PLLPlot ; (; ). static . Definition at line 145 of file xRooNode_interactive.cxx. ◆ Interactive_Pull(). BEGIN_XROOFIT_NAMESPACE void xRooNode::Interactive_Pull ; (; ). static . Definition at line 30 of file xRooNode_interactive.cxx. ◆ IsA(). TClass * ROOT::Experimental::XRooFit::xRooNode::IsA ; (; ); co",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:42789,Availability,avail,available,42789,"ular observables of this node. ; Definition at line 5302 of file xRooNode.cxx. ◆ SaveAs(). void xRooNode::SaveAs ; (; const char * ; filename = """", . Option_t * ; option = """" . ); const. overridevirtual . Save this object in the file specified by filename. . if ""filename"" contains "".root"" the object is saved in filename as root binary file.; if ""filename"" contains "".xml"" the object is saved in filename as a xml ascii file.; if ""filename"" contains "".cc"" the object is saved in filename as C code independant from ROOT. The code is generated via SavePrimitive(). Specific code should be implemented in each object to handle this option. Like in TF1::SavePrimitive().; otherwise the object is written to filename as a CINT/C++ script. The C++ code to rebuild this object is generated via SavePrimitive(). The ""option"" parameter is passed to SavePrimitive. By default it is an empty string. It can be used to specify the Draw option in the code generated by SavePrimitive.; The function is available via the object context menu. . Reimplemented from TObject.; Definition at line 10715 of file xRooNode.cxx. ◆ SetAuxFunction(). void xRooNode::SetAuxFunction ; (; const char * ; title, . const std::function< double(double, double, double)> & ; func, . bool ; symmetrize = false . ). staticprivate . Definition at line 216 of file xRooNode.cxx. ◆ SetBinContent(). bool xRooNode::SetBinContent ; (; int ; bin, . double ; value, . const char * ; par = nullptr, . double ; parVal = 1 . ). Definition at line 3785 of file xRooNode.cxx. ◆ SetBinData(). bool xRooNode::SetBinData ; (; int ; bin, . double ; value, . const xRooNode & ; data = ""obsData"" . ). Definition at line 4042 of file xRooNode.cxx. ◆ SetBinError(). bool xRooNode::SetBinError ; (; int ; bin, . double ; value . ). Definition at line 4070 of file xRooNode.cxx. ◆ SetChecked(). void ROOT::Experimental::XRooFit::xRooNode::SetChecked ; (; bool ; val = true). inline . Definition at line 443 of file xRooNode.h. ◆ SetContent() [1/2]. bool xR",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:5922,Energy Efficiency,reduce,reduced,5922,"eters that are not marked of interest, as well as any parameters that have been marked by the ""np"" attribute. ;  ; xRooNode obs () const;  List of observables (global and regular) of this node. ;  ; TObject * operator-> () const;  ; xRooNode & operator= (const TObject &o);  ; std::shared_ptr< xRooNode > operator[] (const std::string &name);  ; std::shared_ptr< xRooNode > operator[] (size_t idx);  ; std::shared_ptr< xRooNode > parentPdf () const;  like a parent but only for use by getObject ;  ; xRooNode pars () const;  List of parameters (non-observables) of this node. ;  ; xRooNode poi () const;  List of parameters of interest: parameters marked as ""of interest"" These parameters have the ""poi"" attribute. ;  ; xRooNode pp () const;  List of prespecified parameters: non-floatable parameters. ;  ; void Print (Option_t *opt="""") const override;  Print TNamed name and title. ;  ; xRooNode reduced (const std::string &range="""", bool invert=false) const;  ; xRooNode Remove (const xRooNode &child);  ; xRooNode Replace (const xRooNode &node);  ; xRooNode robs () const;  List of regular observables of this node. ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Save this object in the file specified by filename. ;  ; bool SetBinContent (int bin, double value, const char *par=nullptr, double parVal=1);  ; bool SetBinData (int bin, double value, const xRooNode &data=""obsData"");  ; bool SetBinError (int bin, double value);  ; void SetChecked (bool val=true);  ; bool SetContent (double value);  ; bool SetContent (double value, const char *par, double parVal=1);  ; bool SetContents (const TObject &obj);  ; bool SetContents (const TObject &obj, const char *par, double parVal);  ; bool SetData (const TObject &obj, const xRooNode &data=""obsData"");  ; void SetFitResult (const RooFitResult *fr=nullptr);  ; void SetFitResult (const std::shared_ptr< const RooFitResult > &fr);  ; void SetFitResult (const xRooNode &fr);  ; void SetHidden (bool set=true);  ; vo",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:41347,Energy Efficiency,reduce,reduced,41347,"e > ROOT::Experimental::XRooFit::xRooNode::operator[] ; (; size_t ; idx). inline . Definition at line 164 of file xRooNode.h. ◆ parentPdf(). std::shared_ptr< xRooNode > xRooNode::parentPdf ; (; ); const. like a parent but only for use by getObject ; Definition at line 6936 of file xRooNode.cxx. ◆ pars(). xRooNode xRooNode::pars ; (; ); const. List of parameters (non-observables) of this node. ; Definition at line 5318 of file xRooNode.cxx. ◆ poi(). xRooNode xRooNode::poi ; (; ); const. List of parameters of interest: parameters marked as ""of interest"" These parameters have the ""poi"" attribute. ; Definition at line 5372 of file xRooNode.cxx. ◆ pp(). xRooNode xRooNode::pp ; (; ); const. List of prespecified parameters: non-floatable parameters. ; Definition at line 5407 of file xRooNode.cxx. ◆ Print(). void xRooNode::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print TNamed name and title. ; Reimplemented from TNamed.; Definition at line 2336 of file xRooNode.cxx. ◆ reduced(). xRooNode xRooNode::reduced ; (; const std::string & ; range = """", . bool ; invert = false . ); const. Definition at line 6946 of file xRooNode.cxx. ◆ Remove(). xRooNode xRooNode::Remove ; (; const xRooNode & ; child). Definition at line 1345 of file xRooNode.cxx. ◆ Replace(). xRooNode xRooNode::Replace ; (; const xRooNode & ; node). Definition at line 3059 of file xRooNode.cxx. ◆ robs(). xRooNode xRooNode::robs ; (; ); const. List of regular observables of this node. ; Definition at line 5302 of file xRooNode.cxx. ◆ SaveAs(). void xRooNode::SaveAs ; (; const char * ; filename = """", . Option_t * ; option = """" . ); const. overridevirtual . Save this object in the file specified by filename. . if ""filename"" contains "".root"" the object is saved in filename as root binary file.; if ""filename"" contains "".xml"" the object is saved in filename as a xml ascii file.; if ""filename"" contains "".cc"" the object is saved in filename as C code independant from ROOT. The code is generated via Save",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:41377,Energy Efficiency,reduce,reduced,41377,"::operator[] ; (; size_t ; idx). inline . Definition at line 164 of file xRooNode.h. ◆ parentPdf(). std::shared_ptr< xRooNode > xRooNode::parentPdf ; (; ); const. like a parent but only for use by getObject ; Definition at line 6936 of file xRooNode.cxx. ◆ pars(). xRooNode xRooNode::pars ; (; ); const. List of parameters (non-observables) of this node. ; Definition at line 5318 of file xRooNode.cxx. ◆ poi(). xRooNode xRooNode::poi ; (; ); const. List of parameters of interest: parameters marked as ""of interest"" These parameters have the ""poi"" attribute. ; Definition at line 5372 of file xRooNode.cxx. ◆ pp(). xRooNode xRooNode::pp ; (; ); const. List of prespecified parameters: non-floatable parameters. ; Definition at line 5407 of file xRooNode.cxx. ◆ Print(). void xRooNode::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print TNamed name and title. ; Reimplemented from TNamed.; Definition at line 2336 of file xRooNode.cxx. ◆ reduced(). xRooNode xRooNode::reduced ; (; const std::string & ; range = """", . bool ; invert = false . ); const. Definition at line 6946 of file xRooNode.cxx. ◆ Remove(). xRooNode xRooNode::Remove ; (; const xRooNode & ; child). Definition at line 1345 of file xRooNode.cxx. ◆ Replace(). xRooNode xRooNode::Replace ; (; const xRooNode & ; node). Definition at line 3059 of file xRooNode.cxx. ◆ robs(). xRooNode xRooNode::robs ; (; ); const. List of regular observables of this node. ; Definition at line 5302 of file xRooNode.cxx. ◆ SaveAs(). void xRooNode::SaveAs ; (; const char * ; filename = """", . Option_t * ; option = """" . ); const. overridevirtual . Save this object in the file specified by filename. . if ""filename"" contains "".root"" the object is saved in filename as root binary file.; if ""filename"" contains "".xml"" the object is saved in filename as a xml ascii file.; if ""filename"" contains "".cc"" the object is saved in filename as C code independant from ROOT. The code is generated via SavePrimitive(). Specific code should be imp",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:480,Integrability,wrap,wrap,480,". ROOT: ROOT::Experimental::XRooFit::xRooNode Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Static Public Attributes |; Private Member Functions |; Static Private Member Functions |; List of all members ; ROOT::Experimental::XRooFit::xRooNode Class ReferenceRooFit » xRooFit. ; The xRooNode class is designed to wrap over a TObject and provide functionality to aid with interacting with that object, particularly in the case where the object is a RooFit class instance. ; It is a smart pointer to the object, so you have access to all the methods of the object too.; xRooNode is designed to work in both python and C++, but examples below are given in python because that is imagined be the most common way to use the xRooFit API. Exploring workspaces. Exploring workspaces; An existing workspace file (either a ROOT file containing a RooWorkspace, or a json HS3 file) can be opened using xRooNode like this:; from ROOT.Experimental import XRooFit; w = XRooFit.xRooNode(""workspace.root"") # or can use workspace.json for HS3; ROOT::ExperimentalDefinition RDirectory.hxx:30; You can explore the content of the workspace somewhat like you would a file system: each node contains sub-nodes, which you can interact with to explore ever deeper. The most relevant methods for navigating the workspace and exploring the content are: ; Definition at line 52 of file xRooNode.h. Classes; class  InteractiveObject;  ; class  xRooNodeIterator;  . Public Member Functions;  xRooNode (const char *name="""", const std::shared_ptr< TObject > &comp=nullptr, const std::shared_ptr< xRooNode > &parent=nullptr);  ;  xRooNode (const char *type, const char *name, const char *title="""");  ;  ~xRooNode () override;  ; xRooNode Add (const xRooNode &child, Option_t *opt="""");  ; RooArgList argList () const;  ; std::shared_ptr< xRooNode > at (const std::stri",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:11051,Integrability,message,message,11051,"hat you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ; ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:11592,Integrability,message,message,11592,"putes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns k",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:12499,Integrability,message,message,12499,"py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; void Ob",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:15232,Integrability,message,message,15232,"void Paint (Option_t *option="""");  This method must be overridden if a class wants to paint itself. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void Interactive_PLLPlot ();  ; static void Interactive_Pull ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Cl",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:15605,Integrability,message,message,15605,"his object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void Interactive_PLLPlot ();  ; static void Interactive_Pull ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnl",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:8135,Modifiability,variab,variables,8135,"ar *name) override;  Set the name of the TNamed. ;  ; void SetRange (const char *range, double low=std::numeric_limits< double >::quiet_NaN(), double high=std::numeric_limits< double >::quiet_NaN());  ; void SetTitle (const char *title) override;  Set the title of the TNamed. ;  ; bool SetXaxis (const char *name, const char *title, int nbins, const double *bins);  ; bool SetXaxis (const char *name, const char *title, int nbins, double low, double high);  ; bool SetXaxis (const char *title, int nbins, const double *bins);  ; bool SetXaxis (const char *title, int nbins, double low, double high);  ; bool SetXaxis (const RooAbsBinning &binning);  ; bool SetXaxis (int nbins, const double *bins);  ; bool SetXaxis (int nbins, double low, double high);  ; bool SetXaxis (TAxis *ax);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; std::shared_ptr< TStyle > style (TObject *initObject=nullptr, bool autoCreate=true) const;  ; xRooNode variations () const;  ; xRooNode vars () const;  List of variables (observables and parameters) of this node. ;  ; xRooNode Vary (const xRooNode &child);  ; RooWorkspace * ws () const;  The RooWorkspace this node belong to, if any. ;  ; template<typename T > ; T * xget () const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:8386,Modifiability,inherit,inherited,8386,"ol SetXaxis (const char *name, const char *title, int nbins, double low, double high);  ; bool SetXaxis (const char *title, int nbins, const double *bins);  ; bool SetXaxis (const char *title, int nbins, double low, double high);  ; bool SetXaxis (const RooAbsBinning &binning);  ; bool SetXaxis (int nbins, const double *bins);  ; bool SetXaxis (int nbins, double low, double high);  ; bool SetXaxis (TAxis *ax);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; std::shared_ptr< TStyle > style (TObject *initObject=nullptr, bool autoCreate=true) const;  ; xRooNode variations () const;  ; xRooNode vars () const;  List of variables (observables and parameters) of this node. ;  ; xRooNode Vary (const xRooNode &child);  ; RooWorkspace * ws () const;  The RooWorkspace this node belong to, if any. ;  ; template<typename T > ; T * xget () const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:9774,Modifiability,inherit,inherited,9774,"me="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual T",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:10681,Modifiability,inherit,inheritance,10681,"oid StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:12597,Modifiability,inherit,inherits,12597,"nst;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; void Obsolete (const char *method, const char *asOfVers, const char *removedFromVe",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:12714,Modifiability,inherit,inherits,12714,"derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; void Obsolete (const char *method, const char *asOfVers, const char *removedFromVers) const;  Use this method to declare a method obsolete. ;  ; void operator delete (void *ptr);  Operator delete. ;",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:16181,Modifiability,inherit,inherited,16181,"INE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void Interactive_PLLPlot ();  ; static void Interactive_Pull ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; bool fAcquirer = false;  ; int fBinNumber = -1;  ; std::vector< std::shared_ptr< xRooNode > > fBrowsables;  ; std::function< xRooNode(xRooNode *)> fBrowseOperation;  ; std::shared_ptr< TObject > fComp;  ; std::string fFolder;  ; bool fInterrupted = false;  appears that if was fXaxis then dialog box for SetXaxis will take as current value ;  ; std::shared_ptr< x",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:16391,Modifiability,inherit,inherited,16391,"INE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void Interactive_PLLPlot ();  ; static void Interactive_Pull ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; bool fAcquirer = false;  ; int fBinNumber = -1;  ; std::vector< std::shared_ptr< xRooNode > > fBrowsables;  ; std::function< xRooNode(xRooNode *)> fBrowseOperation;  ; std::shared_ptr< TObject > fComp;  ; std::string fFolder;  ; bool fInterrupted = false;  appears that if was fXaxis then dialog box for SetXaxis will take as current value ;  ; std::shared_ptr< x",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:21262,Modifiability,inherit,inherited,21262," getObject (const std::string &name) const;  ; std::shared_ptr< TObject > getObject (const std::string &name, const std::string &type="""") const;  ; std::string GetPath () const;  ; TGListTreeItem * GetTreeItem (TBrowser *b) const;  ; xRooNode histo (const xRooNode &vars=""x"", const xRooNode &fr="""", bool content=true, bool errors=true) const;  ; bool IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ;  operator bool () const;  ; xRooNode shallowCopy (const std::string &name, std::shared_ptr< xRooNode > parent=nullptr);  ; void sterilize () const;  ; TObject * xget () const;  . Static Private Member Functions; static bool isNull (const std::shared_ptr< xRooNode > &x);  ; static void SetAuxFunction (const char *title, const std::function< double(double, double, double)> &func, bool symmetrize=false);  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <RooFit/xRooFit/xRooNode.h>. Inheritance diagram ",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:21903,Modifiability,inherit,inherited,21903,"ons; static bool isNull (const std::shared_ptr< xRooNode > &x);  ; static void SetAuxFunction (const char *title, const std::function< double(double, double, double)> &func, bool symmetrize=false);  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <RooFit/xRooFit/xRooNode.h>. Inheritance diagram for ROOT::Experimental::XRooFit::xRooNode:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ xRooNode() [1/14]. ROOT::Experimental::XRooFit::xRooNode::xRooNode ; (; const char * ; type, . const char * ; name, . const char * ; title = """" . ). ◆ xRooNode() [2/14]. template<typename T > . ROOT::Experimental::XRooFit::xRooNode::xRooNode ; (; const char * ; name, . const char * ; title . ). inlineprivate . Definition at line 75 of file xRooNode.h. ◆ xRooNode() [3/14]. xRooNode::xRooNode ; (; const char * ; name = """", . const std::shared_ptr< TObject > & ; comp = nullptr, . const std::shared_ptr< xRooNo",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:22002,Modifiability,inherit,inherited,22002,"ons; static bool isNull (const std::shared_ptr< xRooNode > &x);  ; static void SetAuxFunction (const char *title, const std::function< double(double, double, double)> &func, bool symmetrize=false);  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <RooFit/xRooFit/xRooNode.h>. Inheritance diagram for ROOT::Experimental::XRooFit::xRooNode:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ xRooNode() [1/14]. ROOT::Experimental::XRooFit::xRooNode::xRooNode ; (; const char * ; type, . const char * ; name, . const char * ; title = """" . ). ◆ xRooNode() [2/14]. template<typename T > . ROOT::Experimental::XRooFit::xRooNode::xRooNode ; (; const char * ; name, . const char * ; title . ). inlineprivate . Definition at line 75 of file xRooNode.h. ◆ xRooNode() [3/14]. xRooNode::xRooNode ; (; const char * ; name = """", . const std::shared_ptr< TObject > & ; comp = nullptr, . const std::shared_ptr< xRooNo",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:22207,Modifiability,inherit,inherited,22207,"e);  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <RooFit/xRooFit/xRooNode.h>. Inheritance diagram for ROOT::Experimental::XRooFit::xRooNode:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ xRooNode() [1/14]. ROOT::Experimental::XRooFit::xRooNode::xRooNode ; (; const char * ; type, . const char * ; name, . const char * ; title = """" . ). ◆ xRooNode() [2/14]. template<typename T > . ROOT::Experimental::XRooFit::xRooNode::xRooNode ; (; const char * ; name, . const char * ; title . ). inlineprivate . Definition at line 75 of file xRooNode.h. ◆ xRooNode() [3/14]. xRooNode::xRooNode ; (; const char * ; name = """", . const std::shared_ptr< TObject > & ; comp = nullptr, . const std::shared_ptr< xRooNode > & ; parent = nullptr . ). Definition at line 258 of file xRooNode.cxx. ◆ xRooNode() [4/14]. ROOT::Experimental::XRooFit::xRooNode::xRooNode ; (; const char * ; name, . const std::shared_pt",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:48293,Modifiability,variab,variables,48293,"ooNode xRooNode::shallowCopy ; (; const std::string & ; name, . std::shared_ptr< xRooNode > ; parent = nullptr . ). private . Definition at line 2282 of file xRooNode.cxx. ◆ sterilize(). void xRooNode::sterilize ; (; ); const. private . Definition at line 7445 of file xRooNode.cxx. ◆ Streamer(). void ROOT::Experimental::XRooFit::xRooNode::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void ROOT::Experimental::XRooFit::xRooNode::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 503 of file xRooNode.h. ◆ style(). std::shared_ptr< TStyle > xRooNode::style ; (; TObject * ; initObject = nullptr, . bool ; autoCreate = true . ); const. Definition at line 4550 of file xRooNode.cxx. ◆ variations(). xRooNode xRooNode::variations ; (; ); const. Definition at line 5904 of file xRooNode.cxx. ◆ vars(). xRooNode xRooNode::vars ; (; ); const. List of variables (observables and parameters) of this node. ; Definition at line 5424 of file xRooNode.cxx. ◆ Vary(). xRooNode xRooNode::Vary ; (; const xRooNode & ; child). Definition at line 3107 of file xRooNode.cxx. ◆ ws(). RooWorkspace * xRooNode::ws ; (; ); const. The RooWorkspace this node belong to, if any. ; Definition at line 4249 of file xRooNode.cxx. ◆ xget() [1/2]. TObject * ROOT::Experimental::XRooFit::xRooNode::xget ; (; ); const. inlineprivate . Definition at line 238 of file xRooNode.h. ◆ xget() [2/2]. template<typename T > . T * ROOT::Experimental::XRooFit::xRooNode::xget ; (; ); const. inline . Definition at line 240 of file xRooNode.h. Member Data Documentation. ◆ auxFunctions. std::map< std::string, std::tuple< std::function< double(double, double, double)>, bool > > xRooNode::auxFunctions. static . Definition at line 58 of file xRooNode.h. ◆ fAcquirer. bool ROOT::Experimental::XRooFit::xRooNode::fAcquirer = false. Definition at line 489 of file xRooNode.h. ◆ fBinNumber. int ROOT::Experimental",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:689,Security,access,access,689,". ROOT: ROOT::Experimental::XRooFit::xRooNode Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Static Public Attributes |; Private Member Functions |; Static Private Member Functions |; List of all members ; ROOT::Experimental::XRooFit::xRooNode Class ReferenceRooFit » xRooFit. ; The xRooNode class is designed to wrap over a TObject and provide functionality to aid with interacting with that object, particularly in the case where the object is a RooFit class instance. ; It is a smart pointer to the object, so you have access to all the methods of the object too.; xRooNode is designed to work in both python and C++, but examples below are given in python because that is imagined be the most common way to use the xRooFit API. Exploring workspaces. Exploring workspaces; An existing workspace file (either a ROOT file containing a RooWorkspace, or a json HS3 file) can be opened using xRooNode like this:; from ROOT.Experimental import XRooFit; w = XRooFit.xRooNode(""workspace.root"") # or can use workspace.json for HS3; ROOT::ExperimentalDefinition RDirectory.hxx:30; You can explore the content of the workspace somewhat like you would a file system: each node contains sub-nodes, which you can interact with to explore ever deeper. The most relevant methods for navigating the workspace and exploring the content are: ; Definition at line 52 of file xRooNode.h. Classes; class  InteractiveObject;  ; class  xRooNodeIterator;  . Public Member Functions;  xRooNode (const char *name="""", const std::shared_ptr< TObject > &comp=nullptr, const std::shared_ptr< xRooNode > &parent=nullptr);  ;  xRooNode (const char *type, const char *name, const char *title="""");  ;  ~xRooNode () override;  ; xRooNode Add (const xRooNode &child, Option_t *opt="""");  ; RooArgList argList () const;  ; std::shared_ptr< xRooNode > at (const std::stri",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:9254,Security,hash,hash,9254,"ace * ws () const;  The RooWorkspace this node belong to, if any. ;  ; template<typename T > ; T * xget () const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode_1_1InteractiveObject.html:694,Modifiability,inherit,inherited,694,". ROOT: ROOT::Experimental::XRooFit::xRooNode::InteractiveObject Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; ROOT::Experimental::XRooFit::xRooNode::InteractiveObject Class Reference. . Definition at line 465 of file xRooNode.h. Public Member Functions; void Interactive_PLLPlot (TVirtualPad *pad, TObject *obj, Int_t x, Int_t y);  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TQObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TQObject;  TQObject ();  TQObject Constructor. ;  ; virtual ~TQObject ();  TQObject Destructor. ;  ; Bool_t AreSignalsBlocked () const;  ; Bool_t BlockSignals (Bool_t b);  ; virtual void ChangedBy (const char *method);  ; void CollectClassSignalLists (TList &list, TClass *cls);  Collect class signal lists from class cls and all its base-classes. ;  ; Bool_t Connect (const char *signal, const char *receiver_class, void *receiver, const char *slot);  Non-static method is used to connect from the signal of this object to the receiver slot. ;  ; virtual void Connected (const char *);  ; virtual void Destroyed ();  ; Bool_t Disconnect (const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal of this object from slot of receiver. ;  ; virtual void Disconnected (const char *);  ; void Emit (const char *signal);  Activate signal without args. ;  ; template<typename T > ; void Emit (const char *signal, const T &arg);  Activate signal with single parameter. ;  ; template<typename... T> ; void EmitVA (const char *signal_name, Int_t, const T &... params);  Emit a signal with a varying number of arguments. ;  ; TList * GetListOfClassSignals () const;  Returns pointer to list of signals of this class. ;  ; TList * GetListOfConnections () const;",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode_1_1InteractiveObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode_1_1InteractiveObject.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode_1_1InteractiveObject.html:2856,Modifiability,inherit,inherited,2856,"... params);  Emit a signal with a varying number of arguments. ;  ; TList * GetListOfClassSignals () const;  Returns pointer to list of signals of this class. ;  ; TList * GetListOfConnections () const;  ; TList * GetListOfSignals () const;  ; virtual Bool_t HasConnection (const char *signal_name) const;  Return true if there is any object connected to this signal. ;  ; virtual void HighPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void LowPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void Message (const char *msg);  ; virtual Int_t NumberOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all signals. Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; st",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode_1_1InteractiveObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode_1_1InteractiveObject.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode_1_1InteractiveObject.html:4057,Modifiability,inherit,inherited,4057,"onnect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Additional Inherited Members;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connecti",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode_1_1InteractiveObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode_1_1InteractiveObject.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode_1_1InteractiveObject.html:4202,Modifiability,inherit,inherited,4202,"onnect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Additional Inherited Members;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connecti",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode_1_1InteractiveObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode_1_1InteractiveObject.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode_1_1InteractiveObject.html:5051,Modifiability,inherit,inherited,5051,"ns inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <RooFit/xRooFit/xRooNode.h>. Inheritance diagram for ROOT::Experimental::XRooFit::xRooNode::InteractiveObject:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Function Documentation. ◆ Class(). static TClass * ROOT::Experimental::XRooFit::xRooNode::InteractiveObject::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::Experimental::XRooFit::xRooNode::InteractiveObject::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::Experimental::XRooFit::xRooNode::InteractiveObject::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 468 of file xRooNode.h. ◆ DeclFileName(). static const char * ROOT::Experimenta",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode_1_1InteractiveObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode_1_1InteractiveObject.html
https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode_1_1InteractiveObject.html:5264,Modifiability,inherit,inherited,5264,"ns inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <RooFit/xRooFit/xRooNode.h>. Inheritance diagram for ROOT::Experimental::XRooFit::xRooNode::InteractiveObject:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Function Documentation. ◆ Class(). static TClass * ROOT::Experimental::XRooFit::xRooNode::InteractiveObject::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::Experimental::XRooFit::xRooNode::InteractiveObject::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::Experimental::XRooFit::xRooNode::InteractiveObject::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 468 of file xRooNode.h. ◆ DeclFileName(). static const char * ROOT::Experimenta",MatchSource.WIKI,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode_1_1InteractiveObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode_1_1InteractiveObject.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BasicFCN.html:2485,Deployability,update,update,2485,"pe >;  BasicFitMethodFunction (int dim, int npoint);  ;  ~BasicFitMethodFunction () override;  Virtual Destructor (no operations) ;  ; virtual double DataElement (const double *x, unsigned int i, double *g=nullptr, double *h=nullptr, bool fullHessian=false) const=0;  method returning the data i-th contribution to the fit objective function For example the residual for the least square functions or the pdf element for the likelihood functions. ;  ; virtual bool G2 (const double *, double *) const;  Computes the Second derivatives. ;  ; virtual bool Hessian (const double *x, double *hess) const;  Computes the full Hessian. ;  ; bool IsAGradFCN ();  ; virtual unsigned int NCalls () const;  return the total number of function calls (override if needed) ;  ; unsigned int NDim () const override;  Number of dimension (parameters) . ;  ; virtual unsigned int NPoints () const;  return the number of data points used in evaluating the function ;  ; virtual void ResetNCalls ();  reset number of function calls ;  ; virtual Type_t Type () const;  return the type of method, override if needed ;  ; virtual void UpdateNCalls () const;  update number of calls ;  . Protected Types; typedef BaseObjFunction::BaseFunction BaseFunction;  ; typedef ::ROOT::Math::BasicFitMethodFunction< DerivFunType > BaseObjFunction;  ; typedef ::ROOT::Math::IParametricGradFunctionMultiDimTempl< T > IGradModelFunction;  ; typedef ::ROOT::Math::IParamMultiFunctionTempl< T > IModelFunction;  ; typedef ModelFunType::BackendType T;  . Protected Member Functions;  BasicFCN (const std::shared_ptr< DataType > &data, const std::shared_ptr< IModelFunction > &func);  Constructor from data set and model function. ;  ; virtual ~BasicFCN ();  Destructor (no operations) ;  ; void SetData (const std::shared_ptr< DataType > &data);  Set the data pointer. ;  ; void SetModelFunction (const std::shared_ptr< IModelFunction > &func);  Set the function pointer. ;  . Protected Attributes; std::shared_ptr< DataType > fData;  ; st",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BasicFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BasicFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BasicFCN.html:1287,Modifiability,inherit,inherited,1287," |; List of all members ; ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType > Class Template Reference. ; template<class DerivFunType, class ModelFunType, class DataType>; class ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >BasicFCN class: base class for the objective functions used in the fits It has a reference to the data and the model function used in the fit. ; It cannot be instantiated but constructed from the derived classes ; Definition at line 40 of file BasicFCN.h. Public Member Functions; virtual const DataType & Data () const;  access to const reference to the data ;  ; std::shared_ptr< DataType > DataPtr () const;  access to data pointer ;  ; virtual bool HasHessian () const;  flag to indicate if can compute Hessian ;  ; virtual const IModelFunction & ModelFunction () const;  access to const reference to the model function ;  ; std::shared_ptr< IModelFunction > ModelFunctionPtr () const;  access to function pointer ;  ;  Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >;  BasicFitMethodFunction (int dim, int npoint);  ;  ~BasicFitMethodFunction () override;  Virtual Destructor (no operations) ;  ; virtual double DataElement (const double *x, unsigned int i, double *g=nullptr, double *h=nullptr, bool fullHessian=false) const=0;  method returning the data i-th contribution to the fit objective function For example the residual for the least square functions or the pdf element for the likelihood functions. ;  ; virtual bool G2 (const double *, double *) const;  Computes the Second derivatives. ;  ; virtual bool Hessian (const double *x, double *hess) const;  Computes the full Hessian. ;  ; bool IsAGradFCN ();  ; virtual unsigned int NCalls () const;  return the total number of function calls (override if needed) ;  ; unsigned int NDim () const override;  Number of dimension (parameters) . ;  ; virtual unsigned int NPoints () const;  return the number of data points used in evaluating the function",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BasicFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BasicFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BasicFCN.html:3434,Modifiability,inherit,inherited,3434,"s ;  . Protected Types; typedef BaseObjFunction::BaseFunction BaseFunction;  ; typedef ::ROOT::Math::BasicFitMethodFunction< DerivFunType > BaseObjFunction;  ; typedef ::ROOT::Math::IParametricGradFunctionMultiDimTempl< T > IGradModelFunction;  ; typedef ::ROOT::Math::IParamMultiFunctionTempl< T > IModelFunction;  ; typedef ModelFunType::BackendType T;  . Protected Member Functions;  BasicFCN (const std::shared_ptr< DataType > &data, const std::shared_ptr< IModelFunction > &func);  Constructor from data set and model function. ;  ; virtual ~BasicFCN ();  Destructor (no operations) ;  ; void SetData (const std::shared_ptr< DataType > &data);  Set the data pointer. ;  ; void SetModelFunction (const std::shared_ptr< IModelFunction > &func);  Set the function pointer. ;  . Protected Attributes; std::shared_ptr< DataType > fData;  ; std::shared_ptr< IModelFunction > fFunc;  . Additional Inherited Members;  Public Types inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >; typedef FunctionType::BaseFunc BaseFunction;  ; enum  Type_t ;  enumeration specifying the possible fit method types More...;  ;  Static Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >; static bool IsAGradFCN ();  Static function to indicate if a function is supporting gradient. ;  . #include <Fit/BasicFCN.h>. Inheritance diagram for ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseFunction. template<class DerivFunType , class ModelFunType , class DataType > . typedef BaseObjFunction::BaseFunction ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >::BaseFunction. protected . Definition at line 47 of file BasicFCN.h. ◆ BaseObjFunction. template<class DerivFunType , class ModelFunType , class DataType > . typedef ::ROOT::Math::BasicFitMethodFunction<DerivFunType> ROOT::Fit::BasicFCN< DerivFunType, Mod",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BasicFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BasicFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BasicFCN.html:3662,Modifiability,inherit,inherited,3662,"l< T > IGradModelFunction;  ; typedef ::ROOT::Math::IParamMultiFunctionTempl< T > IModelFunction;  ; typedef ModelFunType::BackendType T;  . Protected Member Functions;  BasicFCN (const std::shared_ptr< DataType > &data, const std::shared_ptr< IModelFunction > &func);  Constructor from data set and model function. ;  ; virtual ~BasicFCN ();  Destructor (no operations) ;  ; void SetData (const std::shared_ptr< DataType > &data);  Set the data pointer. ;  ; void SetModelFunction (const std::shared_ptr< IModelFunction > &func);  Set the function pointer. ;  . Protected Attributes; std::shared_ptr< DataType > fData;  ; std::shared_ptr< IModelFunction > fFunc;  . Additional Inherited Members;  Public Types inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >; typedef FunctionType::BaseFunc BaseFunction;  ; enum  Type_t ;  enumeration specifying the possible fit method types More...;  ;  Static Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >; static bool IsAGradFCN ();  Static function to indicate if a function is supporting gradient. ;  . #include <Fit/BasicFCN.h>. Inheritance diagram for ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseFunction. template<class DerivFunType , class ModelFunType , class DataType > . typedef BaseObjFunction::BaseFunction ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >::BaseFunction. protected . Definition at line 47 of file BasicFCN.h. ◆ BaseObjFunction. template<class DerivFunType , class ModelFunType , class DataType > . typedef ::ROOT::Math::BasicFitMethodFunction<DerivFunType> ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >::BaseObjFunction. protected . Definition at line 46 of file BasicFCN.h. ◆ IGradModelFunction. template<class DerivFunType , class ModelFunType , class DataType > . typedef ::ROOT::Math::IParametri",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BasicFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BasicFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BasicFCN.html:861,Security,access,access,861," |; List of all members ; ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType > Class Template Reference. ; template<class DerivFunType, class ModelFunType, class DataType>; class ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >BasicFCN class: base class for the objective functions used in the fits It has a reference to the data and the model function used in the fit. ; It cannot be instantiated but constructed from the derived classes ; Definition at line 40 of file BasicFCN.h. Public Member Functions; virtual const DataType & Data () const;  access to const reference to the data ;  ; std::shared_ptr< DataType > DataPtr () const;  access to data pointer ;  ; virtual bool HasHessian () const;  flag to indicate if can compute Hessian ;  ; virtual const IModelFunction & ModelFunction () const;  access to const reference to the model function ;  ; std::shared_ptr< IModelFunction > ModelFunctionPtr () const;  access to function pointer ;  ;  Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >;  BasicFitMethodFunction (int dim, int npoint);  ;  ~BasicFitMethodFunction () override;  Virtual Destructor (no operations) ;  ; virtual double DataElement (const double *x, unsigned int i, double *g=nullptr, double *h=nullptr, bool fullHessian=false) const=0;  method returning the data i-th contribution to the fit objective function For example the residual for the least square functions or the pdf element for the likelihood functions. ;  ; virtual bool G2 (const double *, double *) const;  Computes the Second derivatives. ;  ; virtual bool Hessian (const double *x, double *hess) const;  Computes the full Hessian. ;  ; bool IsAGradFCN ();  ; virtual unsigned int NCalls () const;  return the total number of function calls (override if needed) ;  ; unsigned int NDim () const override;  Number of dimension (parameters) . ;  ; virtual unsigned int NPoints () const;  return the number of data points used in evaluating the function",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BasicFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BasicFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BasicFCN.html:951,Security,access,access,951," |; List of all members ; ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType > Class Template Reference. ; template<class DerivFunType, class ModelFunType, class DataType>; class ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >BasicFCN class: base class for the objective functions used in the fits It has a reference to the data and the model function used in the fit. ; It cannot be instantiated but constructed from the derived classes ; Definition at line 40 of file BasicFCN.h. Public Member Functions; virtual const DataType & Data () const;  access to const reference to the data ;  ; std::shared_ptr< DataType > DataPtr () const;  access to data pointer ;  ; virtual bool HasHessian () const;  flag to indicate if can compute Hessian ;  ; virtual const IModelFunction & ModelFunction () const;  access to const reference to the model function ;  ; std::shared_ptr< IModelFunction > ModelFunctionPtr () const;  access to function pointer ;  ;  Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >;  BasicFitMethodFunction (int dim, int npoint);  ;  ~BasicFitMethodFunction () override;  Virtual Destructor (no operations) ;  ; virtual double DataElement (const double *x, unsigned int i, double *g=nullptr, double *h=nullptr, bool fullHessian=false) const=0;  method returning the data i-th contribution to the fit objective function For example the residual for the least square functions or the pdf element for the likelihood functions. ;  ; virtual bool G2 (const double *, double *) const;  Computes the Second derivatives. ;  ; virtual bool Hessian (const double *x, double *hess) const;  Computes the full Hessian. ;  ; bool IsAGradFCN ();  ; virtual unsigned int NCalls () const;  return the total number of function calls (override if needed) ;  ; unsigned int NDim () const override;  Number of dimension (parameters) . ;  ; virtual unsigned int NPoints () const;  return the number of data points used in evaluating the function",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BasicFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BasicFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BasicFCN.html:1115,Security,access,access,1115," |; List of all members ; ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType > Class Template Reference. ; template<class DerivFunType, class ModelFunType, class DataType>; class ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >BasicFCN class: base class for the objective functions used in the fits It has a reference to the data and the model function used in the fit. ; It cannot be instantiated but constructed from the derived classes ; Definition at line 40 of file BasicFCN.h. Public Member Functions; virtual const DataType & Data () const;  access to const reference to the data ;  ; std::shared_ptr< DataType > DataPtr () const;  access to data pointer ;  ; virtual bool HasHessian () const;  flag to indicate if can compute Hessian ;  ; virtual const IModelFunction & ModelFunction () const;  access to const reference to the model function ;  ; std::shared_ptr< IModelFunction > ModelFunctionPtr () const;  access to function pointer ;  ;  Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >;  BasicFitMethodFunction (int dim, int npoint);  ;  ~BasicFitMethodFunction () override;  Virtual Destructor (no operations) ;  ; virtual double DataElement (const double *x, unsigned int i, double *g=nullptr, double *h=nullptr, bool fullHessian=false) const=0;  method returning the data i-th contribution to the fit objective function For example the residual for the least square functions or the pdf element for the likelihood functions. ;  ; virtual bool G2 (const double *, double *) const;  Computes the Second derivatives. ;  ; virtual bool Hessian (const double *x, double *hess) const;  Computes the full Hessian. ;  ; bool IsAGradFCN ();  ; virtual unsigned int NCalls () const;  return the total number of function calls (override if needed) ;  ; unsigned int NDim () const override;  Number of dimension (parameters) . ;  ; virtual unsigned int NPoints () const;  return the number of data points used in evaluating the function",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BasicFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BasicFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BasicFCN.html:1230,Security,access,access,1230," |; List of all members ; ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType > Class Template Reference. ; template<class DerivFunType, class ModelFunType, class DataType>; class ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >BasicFCN class: base class for the objective functions used in the fits It has a reference to the data and the model function used in the fit. ; It cannot be instantiated but constructed from the derived classes ; Definition at line 40 of file BasicFCN.h. Public Member Functions; virtual const DataType & Data () const;  access to const reference to the data ;  ; std::shared_ptr< DataType > DataPtr () const;  access to data pointer ;  ; virtual bool HasHessian () const;  flag to indicate if can compute Hessian ;  ; virtual const IModelFunction & ModelFunction () const;  access to const reference to the model function ;  ; std::shared_ptr< IModelFunction > ModelFunctionPtr () const;  access to function pointer ;  ;  Public Member Functions inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >;  BasicFitMethodFunction (int dim, int npoint);  ;  ~BasicFitMethodFunction () override;  Virtual Destructor (no operations) ;  ; virtual double DataElement (const double *x, unsigned int i, double *g=nullptr, double *h=nullptr, bool fullHessian=false) const=0;  method returning the data i-th contribution to the fit objective function For example the residual for the least square functions or the pdf element for the likelihood functions. ;  ; virtual bool G2 (const double *, double *) const;  Computes the Second derivatives. ;  ; virtual bool Hessian (const double *x, double *hess) const;  Computes the full Hessian. ;  ; bool IsAGradFCN ();  ; virtual unsigned int NCalls () const;  return the total number of function calls (override if needed) ;  ; unsigned int NDim () const override;  Number of dimension (parameters) . ;  ; virtual unsigned int NPoints () const;  return the number of data points used in evaluating the function",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BasicFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BasicFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BasicFCN.html:6293,Security,access,access,6293,"rotected . Definition at line 44 of file BasicFCN.h. Constructor & Destructor Documentation. ◆ BasicFCN(). template<class DerivFunType , class ModelFunType , class DataType > . ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >::BasicFCN ; (; const std::shared_ptr< DataType > & ; data, . const std::shared_ptr< IModelFunction > & ; func . ). inlineprotected . Constructor from data set and model function. ; Definition at line 55 of file BasicFCN.h. ◆ ~BasicFCN(). template<class DerivFunType , class ModelFunType , class DataType > . virtual ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >::~BasicFCN ; (; ). inlineprotectedvirtual . Destructor (no operations) ; Definition at line 66 of file BasicFCN.h. Member Function Documentation. ◆ Data(). template<class DerivFunType , class ModelFunType , class DataType > . virtual const DataType & ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >::Data ; (; ); const. inlinevirtual . access to const reference to the data ; Definition at line 72 of file BasicFCN.h. ◆ DataPtr(). template<class DerivFunType , class ModelFunType , class DataType > . std::shared_ptr< DataType > ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >::DataPtr ; (; ); const. inline . access to data pointer ; Definition at line 75 of file BasicFCN.h. ◆ HasHessian(). template<class DerivFunType , class ModelFunType , class DataType > . virtual bool ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >::HasHessian ; (; ); const. inlinevirtual . flag to indicate if can compute Hessian ; Reimplemented from ROOT::Math::BasicFitMethodFunction< DerivFunType >.; Definition at line 84 of file BasicFCN.h. ◆ ModelFunction(). template<class DerivFunType , class ModelFunType , class DataType > . virtual const IModelFunction & ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >::ModelFunction ; (; ); const. inlinevirtual . access to const reference to the model function ; Definition at line 78 of file BasicFCN.h. ◆ ModelFun",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BasicFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BasicFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BasicFCN.html:6579,Security,access,access,6579,"aType > & ; data, . const std::shared_ptr< IModelFunction > & ; func . ). inlineprotected . Constructor from data set and model function. ; Definition at line 55 of file BasicFCN.h. ◆ ~BasicFCN(). template<class DerivFunType , class ModelFunType , class DataType > . virtual ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >::~BasicFCN ; (; ). inlineprotectedvirtual . Destructor (no operations) ; Definition at line 66 of file BasicFCN.h. Member Function Documentation. ◆ Data(). template<class DerivFunType , class ModelFunType , class DataType > . virtual const DataType & ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >::Data ; (; ); const. inlinevirtual . access to const reference to the data ; Definition at line 72 of file BasicFCN.h. ◆ DataPtr(). template<class DerivFunType , class ModelFunType , class DataType > . std::shared_ptr< DataType > ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >::DataPtr ; (; ); const. inline . access to data pointer ; Definition at line 75 of file BasicFCN.h. ◆ HasHessian(). template<class DerivFunType , class ModelFunType , class DataType > . virtual bool ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >::HasHessian ; (; ); const. inlinevirtual . flag to indicate if can compute Hessian ; Reimplemented from ROOT::Math::BasicFitMethodFunction< DerivFunType >.; Definition at line 84 of file BasicFCN.h. ◆ ModelFunction(). template<class DerivFunType , class ModelFunType , class DataType > . virtual const IModelFunction & ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >::ModelFunction ; (; ); const. inlinevirtual . access to const reference to the model function ; Definition at line 78 of file BasicFCN.h. ◆ ModelFunctionPtr(). template<class DerivFunType , class ModelFunType , class DataType > . std::shared_ptr< IModelFunction > ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >::ModelFunctionPtr ; (; ); const. inline . access to function pointer ; Definition at line 81 of file Ba",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BasicFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BasicFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BasicFCN.html:7230,Security,access,access,7230,"t. inlinevirtual . access to const reference to the data ; Definition at line 72 of file BasicFCN.h. ◆ DataPtr(). template<class DerivFunType , class ModelFunType , class DataType > . std::shared_ptr< DataType > ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >::DataPtr ; (; ); const. inline . access to data pointer ; Definition at line 75 of file BasicFCN.h. ◆ HasHessian(). template<class DerivFunType , class ModelFunType , class DataType > . virtual bool ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >::HasHessian ; (; ); const. inlinevirtual . flag to indicate if can compute Hessian ; Reimplemented from ROOT::Math::BasicFitMethodFunction< DerivFunType >.; Definition at line 84 of file BasicFCN.h. ◆ ModelFunction(). template<class DerivFunType , class ModelFunType , class DataType > . virtual const IModelFunction & ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >::ModelFunction ; (; ); const. inlinevirtual . access to const reference to the model function ; Definition at line 78 of file BasicFCN.h. ◆ ModelFunctionPtr(). template<class DerivFunType , class ModelFunType , class DataType > . std::shared_ptr< IModelFunction > ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >::ModelFunctionPtr ; (; ); const. inline . access to function pointer ; Definition at line 81 of file BasicFCN.h. ◆ SetData(). template<class DerivFunType , class ModelFunType , class DataType > . void ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >::SetData ; (; const std::shared_ptr< DataType > & ; data). inlineprotected . Set the data pointer. ; Definition at line 98 of file BasicFCN.h. ◆ SetModelFunction(). template<class DerivFunType , class ModelFunType , class DataType > . void ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >::SetModelFunction ; (; const std::shared_ptr< IModelFunction > & ; func). inlineprotected . Set the function pointer. ; Definition at line 101 of file BasicFCN.h. Member Data Documentation. ◆ fData. templa",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BasicFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BasicFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BasicFCN.html:7550,Security,access,access,7550,"ss to data pointer ; Definition at line 75 of file BasicFCN.h. ◆ HasHessian(). template<class DerivFunType , class ModelFunType , class DataType > . virtual bool ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >::HasHessian ; (; ); const. inlinevirtual . flag to indicate if can compute Hessian ; Reimplemented from ROOT::Math::BasicFitMethodFunction< DerivFunType >.; Definition at line 84 of file BasicFCN.h. ◆ ModelFunction(). template<class DerivFunType , class ModelFunType , class DataType > . virtual const IModelFunction & ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >::ModelFunction ; (; ); const. inlinevirtual . access to const reference to the model function ; Definition at line 78 of file BasicFCN.h. ◆ ModelFunctionPtr(). template<class DerivFunType , class ModelFunType , class DataType > . std::shared_ptr< IModelFunction > ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >::ModelFunctionPtr ; (; ); const. inline . access to function pointer ; Definition at line 81 of file BasicFCN.h. ◆ SetData(). template<class DerivFunType , class ModelFunType , class DataType > . void ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >::SetData ; (; const std::shared_ptr< DataType > & ; data). inlineprotected . Set the data pointer. ; Definition at line 98 of file BasicFCN.h. ◆ SetModelFunction(). template<class DerivFunType , class ModelFunType , class DataType > . void ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >::SetModelFunction ; (; const std::shared_ptr< IModelFunction > & ; func). inlineprotected . Set the function pointer. ; Definition at line 101 of file BasicFCN.h. Member Data Documentation. ◆ fData. template<class DerivFunType , class ModelFunType , class DataType > . std::shared_ptr<DataType> ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >::fData. protected . Definition at line 104 of file BasicFCN.h. ◆ fFunc. template<class DerivFunType , class ModelFunType , class DataType > . std::shared_ptr<IM",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BasicFCN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BasicFCN.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData-members.html:209,Modifiability,inherit,inherited,209,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOT::Fit::BinData Member List. This is the complete list of members for ROOT::Fit::BinData, including all inherited members. Add(double x, double y)ROOT::Fit::BinData; Add(double x, double y, double ey)ROOT::Fit::BinData; Add(double x, double y, double ex, double ey)ROOT::Fit::BinData; Add(double x, double y, double ex, double eyl, double eyh)ROOT::Fit::BinData; Add(const double *x, double val)ROOT::Fit::BinData; Add(const double *x, double val, double eval)ROOT::Fit::BinData; Add(const double *x, double val, const double *ex, double eval)ROOT::Fit::BinData; Add(const double *x, double val, const double *ex, double elval, double ehval)ROOT::Fit::BinData; ROOT::Fit::FitData::Add(double x)ROOT::Fit::FitDatainline; ROOT::Fit::FitData::Add(const double *x)ROOT::Fit::FitDatainline; AddBinUpEdge(const double *xup)ROOT::Fit::BinData; Append(unsigned int newPoints, unsigned int dim=1, ErrorType err=kValueError)ROOT::Fit::BinData; ROOT::Fit::FitData::Append(unsigned int newPoints, unsigned int dim=1)ROOT::Fit::FitData; BinData(unsigned int maxpoints=0, unsigned int dim=1, ErrorType err=kValueError)ROOT::Fit::BinDataexplicit; BinData(const DataOptions &opt, unsigned int maxpoints=0, unsigned int dim=1, ErrorType err=kValueError)ROOT::Fit::BinDataexplicit; BinData(const DataOptions &opt, const DataRange &range, unsigned int maxpoints=0, unsigned int dim=1, ErrorType err=kValueError)ROOT::Fit::BinData; BinData(unsigned int n, const double *dataX, const double *val, const double *ex, const double *eval)ROOT::Fit::BinData; BinData(unsigned int n, const double *dataX, const double *dataY, const double *val, const double *ex, const double *ey, const double *eval)ROOT::Fit::BinData; BinData(unsigned int n, const double *dataX, const double *dataY, const double *dataZ, const double *val, const double *ex, const double *ey, const double *ez, const double *eval)ROOT::Fit::BinData; BinD",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData-members.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:462,Availability,error,error,462,". ROOT: ROOT::Fit::BinData Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Fit::BinData Class ReferenceMath » MathCore » Fitting and Parameter Estimation » Fit Data Classes. ; Class describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: . only coordinates and values (for binned likelihood fits) : kNoError; coordinate, values and error on values (for normal least square fits) : kValueError; coordinate, values, error on values and coordinates (for effective least square fits) : kCoordError; coordinate, values, error on coordinates and asymmetric error on values : kAsymError. In addition there is the option to construct Bindata copying the data in (using the DataVector class) or using pointer to external data (DataWrapper) class. In general is found to be more efficient to copy the data. In case of really large data sets for limiting memory consumption then the other option can be used Specialized constructor exists for data up to 3 dimensions.; When the data are copying in the number of points can be set later (or re-set) using Initialize and the data are inserted one by one using the Add method. It is mandatory to set the size before using the Add method. ; Definition at line 52 of file BinData.h. Public Types; enum  ErrorType { kNoError; , kValueError; , kCoordError; , kAsymError; };  . Public Member Functions;  BinData (const BinData &rhs);  copy constructors ;  ;  BinData (const DataOptions &opt, const DataRange &range, unsigned int maxpoints=0, unsigned int dim=1, ErrorType err=kValueError);  constructor from options and range default is 1D and value errors ;  ;  BinData (const DataOptions &opt, unsigned int maxpoints=0, unsigned i",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:484,Availability,error,error,484,". ROOT: ROOT::Fit::BinData Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Fit::BinData Class ReferenceMath » MathCore » Fitting and Parameter Estimation » Fit Data Classes. ; Class describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: . only coordinates and values (for binned likelihood fits) : kNoError; coordinate, values and error on values (for normal least square fits) : kValueError; coordinate, values, error on values and coordinates (for effective least square fits) : kCoordError; coordinate, values, error on coordinates and asymmetric error on values : kAsymError. In addition there is the option to construct Bindata copying the data in (using the DataVector class) or using pointer to external data (DataWrapper) class. In general is found to be more efficient to copy the data. In case of really large data sets for limiting memory consumption then the other option can be used Specialized constructor exists for data up to 3 dimensions.; When the data are copying in the number of points can be set later (or re-set) using Initialize and the data are inserted one by one using the Add method. It is mandatory to set the size before using the Add method. ; Definition at line 52 of file BinData.h. Public Types; enum  ErrorType { kNoError; , kValueError; , kCoordError; , kAsymError; };  . Public Member Functions;  BinData (const BinData &rhs);  copy constructors ;  ;  BinData (const DataOptions &opt, const DataRange &range, unsigned int maxpoints=0, unsigned int dim=1, ErrorType err=kValueError);  constructor from options and range default is 1D and value errors ;  ;  BinData (const DataOptions &opt, unsigned int maxpoints=0, unsigned i",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:670,Availability,error,error,670,". ROOT: ROOT::Fit::BinData Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Fit::BinData Class ReferenceMath » MathCore » Fitting and Parameter Estimation » Fit Data Classes. ; Class describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: . only coordinates and values (for binned likelihood fits) : kNoError; coordinate, values and error on values (for normal least square fits) : kValueError; coordinate, values, error on values and coordinates (for effective least square fits) : kCoordError; coordinate, values, error on coordinates and asymmetric error on values : kAsymError. In addition there is the option to construct Bindata copying the data in (using the DataVector class) or using pointer to external data (DataWrapper) class. In general is found to be more efficient to copy the data. In case of really large data sets for limiting memory consumption then the other option can be used Specialized constructor exists for data up to 3 dimensions.; When the data are copying in the number of points can be set later (or re-set) using Initialize and the data are inserted one by one using the Add method. It is mandatory to set the size before using the Add method. ; Definition at line 52 of file BinData.h. Public Types; enum  ErrorType { kNoError; , kValueError; , kCoordError; , kAsymError; };  . Public Member Functions;  BinData (const BinData &rhs);  copy constructors ;  ;  BinData (const DataOptions &opt, const DataRange &range, unsigned int maxpoints=0, unsigned int dim=1, ErrorType err=kValueError);  constructor from options and range default is 1D and value errors ;  ;  BinData (const DataOptions &opt, unsigned int maxpoints=0, unsigned i",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:752,Availability,error,error,752,". ROOT: ROOT::Fit::BinData Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Fit::BinData Class ReferenceMath » MathCore » Fitting and Parameter Estimation » Fit Data Classes. ; Class describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: . only coordinates and values (for binned likelihood fits) : kNoError; coordinate, values and error on values (for normal least square fits) : kValueError; coordinate, values, error on values and coordinates (for effective least square fits) : kCoordError; coordinate, values, error on coordinates and asymmetric error on values : kAsymError. In addition there is the option to construct Bindata copying the data in (using the DataVector class) or using pointer to external data (DataWrapper) class. In general is found to be more efficient to copy the data. In case of really large data sets for limiting memory consumption then the other option can be used Specialized constructor exists for data up to 3 dimensions.; When the data are copying in the number of points can be set later (or re-set) using Initialize and the data are inserted one by one using the Add method. It is mandatory to set the size before using the Add method. ; Definition at line 52 of file BinData.h. Public Types; enum  ErrorType { kNoError; , kValueError; , kCoordError; , kAsymError; };  . Public Member Functions;  BinData (const BinData &rhs);  copy constructors ;  ;  BinData (const DataOptions &opt, const DataRange &range, unsigned int maxpoints=0, unsigned int dim=1, ErrorType err=kValueError);  constructor from options and range default is 1D and value errors ;  ;  BinData (const DataOptions &opt, unsigned int maxpoints=0, unsigned i",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:853,Availability,error,error,853,". ROOT: ROOT::Fit::BinData Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Fit::BinData Class ReferenceMath » MathCore » Fitting and Parameter Estimation » Fit Data Classes. ; Class describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: . only coordinates and values (for binned likelihood fits) : kNoError; coordinate, values and error on values (for normal least square fits) : kValueError; coordinate, values, error on values and coordinates (for effective least square fits) : kCoordError; coordinate, values, error on coordinates and asymmetric error on values : kAsymError. In addition there is the option to construct Bindata copying the data in (using the DataVector class) or using pointer to external data (DataWrapper) class. In general is found to be more efficient to copy the data. In case of really large data sets for limiting memory consumption then the other option can be used Specialized constructor exists for data up to 3 dimensions.; When the data are copying in the number of points can be set later (or re-set) using Initialize and the data are inserted one by one using the Add method. It is mandatory to set the size before using the Add method. ; Definition at line 52 of file BinData.h. Public Types; enum  ErrorType { kNoError; , kValueError; , kCoordError; , kAsymError; };  . Public Member Functions;  BinData (const BinData &rhs);  copy constructors ;  ;  BinData (const DataOptions &opt, const DataRange &range, unsigned int maxpoints=0, unsigned int dim=1, ErrorType err=kValueError);  constructor from options and range default is 1D and value errors ;  ;  BinData (const DataOptions &opt, unsigned int maxpoints=0, unsigned i",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:889,Availability,error,error,889,". ROOT: ROOT::Fit::BinData Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Fit::BinData Class ReferenceMath » MathCore » Fitting and Parameter Estimation » Fit Data Classes. ; Class describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: . only coordinates and values (for binned likelihood fits) : kNoError; coordinate, values and error on values (for normal least square fits) : kValueError; coordinate, values, error on values and coordinates (for effective least square fits) : kCoordError; coordinate, values, error on coordinates and asymmetric error on values : kAsymError. In addition there is the option to construct Bindata copying the data in (using the DataVector class) or using pointer to external data (DataWrapper) class. In general is found to be more efficient to copy the data. In case of really large data sets for limiting memory consumption then the other option can be used Specialized constructor exists for data up to 3 dimensions.; When the data are copying in the number of points can be set later (or re-set) using Initialize and the data are inserted one by one using the Add method. It is mandatory to set the size before using the Add method. ; Definition at line 52 of file BinData.h. Public Types; enum  ErrorType { kNoError; , kValueError; , kCoordError; , kAsymError; };  . Public Member Functions;  BinData (const BinData &rhs);  copy constructors ;  ;  BinData (const DataOptions &opt, const DataRange &range, unsigned int maxpoints=0, unsigned int dim=1, ErrorType err=kValueError);  constructor from options and range default is 1D and value errors ;  ;  BinData (const DataOptions &opt, unsigned int maxpoints=0, unsigned i",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:1919,Availability,error,errors,1919," Public Member Functions;  BinData (const BinData &rhs);  copy constructors ;  ;  BinData (const DataOptions &opt, const DataRange &range, unsigned int maxpoints=0, unsigned int dim=1, ErrorType err=kValueError);  constructor from options and range default is 1D and value errors ;  ;  BinData (const DataOptions &opt, unsigned int maxpoints=0, unsigned i",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:2567,Availability,error,errors,2567," Public Member Functions;  BinData (const BinData &rhs);  copy constructors ;  ;  BinData (const DataOptions &opt, const DataRange &range, unsigned int maxpoints=0, unsigned int dim=1, ErrorType err=kValueError);  constructor from options and range default is 1D and value errors ;  ;  BinData (const DataOptions &opt, unsigned int maxpoints=0, unsigned i",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:2791,Availability,error,errors,2791,"int maxpoints=0, unsigned int dim=1, ErrorType err=kValueError);  constructor from options and range default is 1D and value errors ;  ;  BinData (const DataOptions &opt, unsigned int maxpoints=0, unsigned int dim=1, ErrorType err=kValueError);  constructor from option and default range ;  ;  BinData (unsigned int maxpoints=0, unsigned int dim=1, ErrorType err=kValueError);  constructor from dimension of point and max number of points (to pre-allocate vector) Give a zero value and then use Initialize later one if the size is not known ;  ;  BinData (unsigned int n, const double *dataX, const double *dataY, const double *dataZ, const double *val, const double *ex, const double *ey, const double *ez, const double *eval);  constructor from external data for 3D with errors on coordinate and value ;  ;  BinData (unsigned int n, const double *dataX, const double *dataY, const double *val, const double *ex, const double *ey, const double *eval);  constructor from external data for 2D with errors on coordinate and value ;  ;  BinData (unsigned int n, const double *dataX, const double *val, const double *ex, const double *eval);  constructors using external data ;  ;  ~BinData () override;  destructor ;  ; void Add (const double *x, double val);  add multi-dim coordinate data with only value ;  ; void Add (const double *x, double val, const double *ex, double elval, double ehval);  add multi-dim coordinate data with both error in coordinates and value ;  ; void Add (const double *x, double val, const double *ex, double eval);  add multi-dim coordinate data with both error in coordinates and value ;  ; void Add (const double *x, double val, double eval);  add multi-dim coordinate data with only error in value ;  ; void Add (double x, double y);  add one dim data with only coordinate and values ;  ; void Add (double x, double y, double ex, double ey);  add one dim data with error in the coordinate (x) in this case store the value (y) error and not the inverse ;  ; void Add (dou",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:3230,Availability,error,error,3230,"(to pre-allocate vector) Give a zero value and then use Initialize later one if the size is not known ;  ;  BinData (unsigned int n, const double *dataX, const double *dataY, const double *dataZ, const double *val, const double *ex, const double *ey, const double *ez, const double *eval);  constructor from external data for 3D with errors on coordinate and value ;  ;  BinData (unsigned int n, const double *dataX, const double *dataY, const double *val, const double *ex, const double *ey, const double *eval);  constructor from external data for 2D with errors on coordinate and value ;  ;  BinData (unsigned int n, const double *dataX, const double *val, const double *ex, const double *eval);  constructors using external data ;  ;  ~BinData () override;  destructor ;  ; void Add (const double *x, double val);  add multi-dim coordinate data with only value ;  ; void Add (const double *x, double val, const double *ex, double elval, double ehval);  add multi-dim coordinate data with both error in coordinates and value ;  ; void Add (const double *x, double val, const double *ex, double eval);  add multi-dim coordinate data with both error in coordinates and value ;  ; void Add (const double *x, double val, double eval);  add multi-dim coordinate data with only error in value ;  ; void Add (double x, double y);  add one dim data with only coordinate and values ;  ; void Add (double x, double y, double ex, double ey);  add one dim data with error in the coordinate (x) in this case store the value (y) error and not the inverse ;  ; void Add (double x, double y, double ex, double eyl, double eyh);  add one dim data with error in the coordinate (x) and asymmetric errors in the value (y) in this case store the y errors and not the inverse ;  ; void Add (double x, double y, double ey);  add one dim data with no error in the coordinate (x) in this case store the inverse of the error in the value (y) ;  ; void AddBinUpEdge (const double *xup);  add the bin width data, a pointer to",MatchSource.WIKI,doc/master/classROOT_1_1Fit_1_1BinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html
