id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Molecule.html:23621,Modifiability,variab,variables,23621,"on of atom arg0 (0-indexed including dummies in Bohr). geometry(self: psi4.core.Molecule) → psi4.core.Matrix¶; Gets the geometry [Bohr] as a (Natom X 3) matrix of coordinates (excluding dummies). get_fragment_charges(self: psi4.core.Molecule) → List[int]¶; Gets the charge of each fragment. get_fragment_multiplicities(self: psi4.core.Molecule) → List[int]¶; Gets the multiplicity of each fragment. get_fragment_types(self: psi4.core.Molecule) → List[str]¶; Returns a list describing how to handle each fragment {Real, Ghost, Absent}. get_fragments(self: psi4.core.Molecule) → List[Tuple[int, int]]¶; Returns list of pairs of atom ranges defining each fragment from parent molecule(fragments[frag_ind] = <Afirst,Alast+1>). get_full_point_group(self: psi4.core.Molecule) → str¶; Gets point group name such as C3v or S8. get_full_point_group_with_n(self: psi4.core.Molecule) → str¶; Gets point group name such as Cnv or Sn. get_variable(self: psi4.core.Molecule, arg0: str) → float¶; Returns the value of variable arg0 in the structural variables list. has_zmatrix(self: psi4.core.Molecule) → bool¶; Get whether or not this molecule has at least one zmatrix entry. inertia_tensor(self: psi4.core.Molecule) → psi4.core.Matrix¶; Returns intertial tensor. input_units_to_au(self: psi4.core.Molecule) → float¶; Returns unit conversion to [a0] for geometry. irrep_labels(self: psi4.core.Molecule) → List[str]¶; Returns Irreducible Representation symmetry labels. is_variable(self: psi4.core.Molecule, arg0: str) → bool¶; Checks if variable arg0 is in the structural variables list. label(self: psi4.core.Molecule, atom: int) → str¶; Gets the original label of the atom as given in the input file (C2, H4)(0-indexed without dummies). mass(self: psi4.core.Molecule, atom: int) → float¶; Returns mass of atom (0-indexed). mass_number(self: psi4.core.Molecule, arg0: int) → int¶; Mass number (A) of atom if known, else -1. molecular_charge(self: psi4.core.Molecule) → int¶; Gets the molecular charge. move_to_com",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Molecule.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Molecule.html:24110,Modifiability,variab,variable,24110,"ent}. get_fragments(self: psi4.core.Molecule) → List[Tuple[int, int]]¶; Returns list of pairs of atom ranges defining each fragment from parent molecule(fragments[frag_ind] = <Afirst,Alast+1>). get_full_point_group(self: psi4.core.Molecule) → str¶; Gets point group name such as C3v or S8. get_full_point_group_with_n(self: psi4.core.Molecule) → str¶; Gets point group name such as Cnv or Sn. get_variable(self: psi4.core.Molecule, arg0: str) → float¶; Returns the value of variable arg0 in the structural variables list. has_zmatrix(self: psi4.core.Molecule) → bool¶; Get whether or not this molecule has at least one zmatrix entry. inertia_tensor(self: psi4.core.Molecule) → psi4.core.Matrix¶; Returns intertial tensor. input_units_to_au(self: psi4.core.Molecule) → float¶; Returns unit conversion to [a0] for geometry. irrep_labels(self: psi4.core.Molecule) → List[str]¶; Returns Irreducible Representation symmetry labels. is_variable(self: psi4.core.Molecule, arg0: str) → bool¶; Checks if variable arg0 is in the structural variables list. label(self: psi4.core.Molecule, atom: int) → str¶; Gets the original label of the atom as given in the input file (C2, H4)(0-indexed without dummies). mass(self: psi4.core.Molecule, atom: int) → float¶; Returns mass of atom (0-indexed). mass_number(self: psi4.core.Molecule, arg0: int) → int¶; Mass number (A) of atom if known, else -1. molecular_charge(self: psi4.core.Molecule) → int¶; Gets the molecular charge. move_to_com(self: psi4.core.Molecule) → None¶; Moves molecule to center of mass. multiplicity(self: psi4.core.Molecule) → int¶; Gets the multiplicity (defined as 2Ms + 1). nallatom(self: psi4.core.Molecule) → int¶; Number of real and dummy atoms. name(self: psi4.core.Molecule) → str¶; Gets molecule name. natom(self: psi4.core.Molecule) → int¶; Number of real atoms. nfragments(self: psi4.core.Molecule) → int¶; Gets the number of fragments in the molecule. nuclear_dipole(*args, **kwargs)¶; Overloaded function. nuclear_dipole(self: psi4",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Molecule.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Molecule.html:24145,Modifiability,variab,variables,24145,"ent}. get_fragments(self: psi4.core.Molecule) → List[Tuple[int, int]]¶; Returns list of pairs of atom ranges defining each fragment from parent molecule(fragments[frag_ind] = <Afirst,Alast+1>). get_full_point_group(self: psi4.core.Molecule) → str¶; Gets point group name such as C3v or S8. get_full_point_group_with_n(self: psi4.core.Molecule) → str¶; Gets point group name such as Cnv or Sn. get_variable(self: psi4.core.Molecule, arg0: str) → float¶; Returns the value of variable arg0 in the structural variables list. has_zmatrix(self: psi4.core.Molecule) → bool¶; Get whether or not this molecule has at least one zmatrix entry. inertia_tensor(self: psi4.core.Molecule) → psi4.core.Matrix¶; Returns intertial tensor. input_units_to_au(self: psi4.core.Molecule) → float¶; Returns unit conversion to [a0] for geometry. irrep_labels(self: psi4.core.Molecule) → List[str]¶; Returns Irreducible Representation symmetry labels. is_variable(self: psi4.core.Molecule, arg0: str) → bool¶; Checks if variable arg0 is in the structural variables list. label(self: psi4.core.Molecule, atom: int) → str¶; Gets the original label of the atom as given in the input file (C2, H4)(0-indexed without dummies). mass(self: psi4.core.Molecule, atom: int) → float¶; Returns mass of atom (0-indexed). mass_number(self: psi4.core.Molecule, arg0: int) → int¶; Mass number (A) of atom if known, else -1. molecular_charge(self: psi4.core.Molecule) → int¶; Gets the molecular charge. move_to_com(self: psi4.core.Molecule) → None¶; Moves molecule to center of mass. multiplicity(self: psi4.core.Molecule) → int¶; Gets the multiplicity (defined as 2Ms + 1). nallatom(self: psi4.core.Molecule) → int¶; Number of real and dummy atoms. name(self: psi4.core.Molecule) → str¶; Gets molecule name. natom(self: psi4.core.Molecule) → int¶; Number of real atoms. nfragments(self: psi4.core.Molecule) → int¶; Gets the number of fragments in the molecule. nuclear_dipole(*args, **kwargs)¶; Overloaded function. nuclear_dipole(self: psi4",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Molecule.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Molecule.html:30612,Modifiability,extend,extending,30612,"correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in dashcoeff or “alias” or; “formal” to run.; dashparam (Optional[Dict]) – Values for the same keys as dashcoeff[dashlvl][‘default’]; used to provide custom values. Unlike run_dftd3, will not have; effect if func given. Must provide all parameters.; Extra parameters will error.; dertype (Union[int, str, None]) – Maximum derivative level at which to run DFTD3. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose (int) – Amount of printing. Returns:. energy (float) – When dertype=0, energy [Eh].; gradient (ndarray) – When dertype=1, (nat, 3) gradient [Eh/a0].; (energy, gradient) (tuple of float and ndarray) – When dertype=None, both energy [Eh] and (nat, 3) gradient [Eh/a0]. Notes; This function wraps the QCEngine dftd4 harness which wraps the internal DFTD4 Python API.; As such, the upstream convention of func trumping dashparam holds, rather than the; run_dftd3() behavior of dashparam extending or overriding func. run_gcp(func=None, dertype=None, verbose=1)[source]¶; Compute geometrical BSSE correction via Grimme’s GCP program.; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. Parameters:. func (Optional[str]) – Name of method/basis combination or composite method for which to compute the",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Molecule.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Molecule.html:31326,Modifiability,extend,extended,31326,"3) gradient [Eh/a0]. Notes; This function wraps the QCEngine dftd4 harness which wraps the internal DFTD4 Python API.; As such, the upstream convention of func trumping dashparam holds, rather than the; run_dftd3() behavior of dashparam extending or overriding func. run_gcp(func=None, dertype=None, verbose=1)[source]¶; Compute geometrical BSSE correction via Grimme’s GCP program.; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. Parameters:. func (Optional[str]) – Name of method/basis combination or composite method for which to compute the correction; (e.g., HF/cc-pVDZ, DFT/def2-SVP, HF3c, PBEh3c).; dertype (Union[int, str, None]) – Maximum derivative level at which to run GCP. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose (int) – Amount of printing. Unused at present. Returns:. energy (float) – When dertype=0, energy [Eh].; gradient (ndarray) – When dertype=1, (nat, 3) gradient [Eh/a0].; (energy, gradient) (tuple of float and ndarray) – When dertype=None, both energy [Eh] and (nat, 3) gradient [Eh/a0]. save_string_xyz(self: psi4.core.Molecule) → str¶; Saves the string of an XYZ file to arg2. save_string_xyz_file(self: psi4.core.Molecule) → str¶; Saves an XYZ file to arg2. save_xyz_file(self: psi4.core.Molecule, arg0: str, arg1: bool) → None¶; Saves",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Molecule.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Molecule.html:36975,Modifiability,variab,variable,36975,"nitial molecule string or constructor preferred. set_multiplicity(self: psi4.core.Molecule, arg0: int) → None¶; Change the multiplicity (defined as 2S + 1). Setting in initial molecule string or constructor preferred. set_name(self: psi4.core.Molecule, arg0: str) → None¶; Sets molecule name. set_nuclear_charge(self: psi4.core.Molecule, arg0: int, arg1: float) → None¶; Set the nuclear charge of the given atom arg0 to the value arg1 (primarily for ECP). set_point_group(self: psi4.core.Molecule, arg0: psi4.core.PointGroup) → None¶; Sets the molecular point group to the point group object arg0. set_provenance(self: psi4.core.Molecule, arg0: Dict[str, str]) → None¶; Sets molecule provenance. set_units(self: psi4.core.Molecule, arg0: psi4.core.GeometryUnits) → None¶; Sets units (Angstrom or Bohr) used to define the geometry. Imposes Psi4 physical constants conversion for input_units_to_au. set_variable(self: psi4.core.Molecule, arg0: str, arg1: float) → None¶; Sets the value arg1 to the variable arg0 in the list of structure variables, then calls update_geometry(). symbol(self: psi4.core.Molecule, atom: int) → str¶; Gets the cleaned up label of atom (C2 => C, H4 = H) (0-indexed without dummies). symmetrize(self: psi4.core.Molecule, arg0: float) → None¶; Finds the highest point Abelian point group within the specified tolerance, and forces the geometry to have that symmetry. symmetry_from_input(self: psi4.core.Molecule) → str¶; Returns the symmetry specified in the input. to_arrays(dummy=False, ghost_as_dummy=False)[source]¶; Exports coordinate info into NumPy arrays. Parameters:. dummy (bool) – Whether or not to include dummy atoms in returned arrays.; ghost_as_dummy (bool) – Whether or not to treat ghost atoms as dummies. Return type:; Tuple[ndarray, ndarray, ndarray, ndarray, ndarray]. Returns:. geom, mass, elem, elez, uniq (numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray) – (nat, 3) geometry [a0].; (nat,) mass [u].; (nat,) element symbol.; (nat",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Molecule.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Molecule.html:37014,Modifiability,variab,variables,37014,"nitial molecule string or constructor preferred. set_multiplicity(self: psi4.core.Molecule, arg0: int) → None¶; Change the multiplicity (defined as 2S + 1). Setting in initial molecule string or constructor preferred. set_name(self: psi4.core.Molecule, arg0: str) → None¶; Sets molecule name. set_nuclear_charge(self: psi4.core.Molecule, arg0: int, arg1: float) → None¶; Set the nuclear charge of the given atom arg0 to the value arg1 (primarily for ECP). set_point_group(self: psi4.core.Molecule, arg0: psi4.core.PointGroup) → None¶; Sets the molecular point group to the point group object arg0. set_provenance(self: psi4.core.Molecule, arg0: Dict[str, str]) → None¶; Sets molecule provenance. set_units(self: psi4.core.Molecule, arg0: psi4.core.GeometryUnits) → None¶; Sets units (Angstrom or Bohr) used to define the geometry. Imposes Psi4 physical constants conversion for input_units_to_au. set_variable(self: psi4.core.Molecule, arg0: str, arg1: float) → None¶; Sets the value arg1 to the variable arg0 in the list of structure variables, then calls update_geometry(). symbol(self: psi4.core.Molecule, atom: int) → str¶; Gets the cleaned up label of atom (C2 => C, H4 = H) (0-indexed without dummies). symmetrize(self: psi4.core.Molecule, arg0: float) → None¶; Finds the highest point Abelian point group within the specified tolerance, and forces the geometry to have that symmetry. symmetry_from_input(self: psi4.core.Molecule) → str¶; Returns the symmetry specified in the input. to_arrays(dummy=False, ghost_as_dummy=False)[source]¶; Exports coordinate info into NumPy arrays. Parameters:. dummy (bool) – Whether or not to include dummy atoms in returned arrays.; ghost_as_dummy (bool) – Whether or not to treat ghost atoms as dummies. Return type:; Tuple[ndarray, ndarray, ndarray, ndarray, ndarray]. Returns:. geom, mass, elem, elez, uniq (numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray) – (nat, 3) geometry [a0].; (nat,) mass [u].; (nat,) element symbol.; (nat",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Molecule.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Molecule.html:39023,Modifiability,variab,variable,39023,"ment symbol and mass.; Note that coordinate, orientation, and element information is; preserved but fragmentation, chgmult, and dummy/ghost is lost.; Usage; —–; geom, mass, elem, elez, uniq = molinstance.to_arrays(). to_dict(force_c1=False, force_units=False, np_out=True)[source]¶; Serializes instance into Molecule dictionary. to_schema(dtype, units='Bohr')[source]¶; Serializes instance into dictionary according to schema dtype. to_string(dtype, units=None, atom_format=None, ghost_format=None, width=17, prec=12)[source]¶; Format a string representation of QM molecule. translate(self: psi4.core.Molecule, arg0: psi4.core.Vector3) → None¶; Translates molecule by arg0. true_atomic_number(self: psi4.core.Molecule, atom: int) → int¶; Gets atomic number of atom from element (0-indexed without dummies). units(self: psi4.core.Molecule) → str¶; Returns units used to define the geometry, i.e. ‘Angstrom’ or ‘Bohr’. update_geometry(self: psi4.core.Molecule) → None¶; Reevaluates the geometry with current variable values, orientation directives, etc. by clearing the atoms list and rebuilding it. Idempotent. Use liberally.Must be called after initial Molecule definition by string. x(self: psi4.core.Molecule, arg0: int) → float¶; x position [Bohr] of atom arg0 (0-indexed without dummies). xyz(self: psi4.core.Molecule, i: int) → psi4.core.Vector3¶; Return the Vector3 for atom i (0-indexed without dummies). y(self: psi4.core.Molecule, arg0: int) → float¶; y position [Bohr] of atom arg0 (0-indexed without dummies). z(self: psi4.core.Molecule, arg0: int) → float¶; z position [Bohr] of atom arg0 (0-indexed without dummies). table of contents. Molecule; Molecule; Molecule.B787(); Molecule.BFS(); Molecule.Z(); Molecule.activate_all_fragments(); Molecule.add_atom(); Molecule.atom_at_position(); Molecule.basis_on_atom(); Molecule.center_of_mass(); Molecule.charge(); Molecule.clone(); Molecule.com_fixed(); Molecule.comment(); Molecule.connectivity(); Molecule.create_psi4_string_from_molecule(",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Molecule.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Molecule.html:506,Safety,Detect,Detect,506,"﻿. Molecule. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; Molecule. Molecule¶. class psi4.core.Molecule¶; Bases: pybind11_object; Class to store the elements, coordinates, fragmentation pattern, basis sets, charge, multiplicity, etc. of a molecule.; Methods Summary. B787(ref_mol[, do_plot, verbose, atoms_map, ...]); Finds shift, rotation, and atom reordering of concern_mol that best aligns with ref_mol. BFS([seed_atoms, bond_threshold, ...]); Detect fragments among real atoms through a breadth-first search (BFS) algorithm. Z(self, arg0); Nuclear charge of atom arg0 (0-indexed without dummies). activate_all_fragments(self); Sets all fragments in the molecule to be active. add_atom(self, Z, x, y, z, symbol, mass, ...); Adds to self Molecule an atom with atomic number Z, Cartesian coordinates in Bohr (x, y, z), atomic symbol, mass, and charge, extended atomic label, and mass number A. atom_at_position(*args, **kwargs); Overloaded function. basis_on_atom(self, arg0); Gets the label of the orbital basis set on a given atom arg0. center_of_mass(self); Computes center of mass of molecule (does not translate molecule). charge(self, atom); Gets charge of atom (0-indexed without dummies). clone(self); Returns a new Molecule identical to arg1. com_fixed(self); Gets whether or not center of mass is fixed. comment(self); Gets molecule comment. connectivity(self); Gets molecule connectivity. create_psi4_string_from_molecule(self); Gets a string re-expressing in input format the current state of the molecule.Contains Cartesian geometry info, fragmentation, charges and multiplicities, and any frame restriction. deactivate_all_fragments(self); Sets all fragments in the molecule to be inactive. distance_matrix(self); Returns Matrix of interatom distances. extract_subsets(*args, **kwargs); Overloaded function. fZ(self, arg0); Nuclear charge of atom arg1 (0-indexed including dummies). fcharge(self, atom); Gets charge of atom (0-",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Molecule.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Molecule.html:13479,Safety,Detect,Detect,13479,"sed to test worst-case timings.; run_resorting (bool) – Run the resorting machinery even if unnecessary because atoms_map=True.; uno_cutoff (float) – TODO; run_mirror (bool) – Run alternate geometries potentially allowing best match to ref_mol; from mirror image of concern_mol. Only run if system confirmed to; be nonsuperimposable upon mirror reflection.; verbose (int) – . Returns:; First item is RMSD [A] between ref_mol and the optimally aligned; geometry computed.; Second item is a AlignmentMill namedtuple with fields; (shift, rotation, atommap, mirror) that prescribe the transformation; from concern_mol and the optimally aligned geometry.; Third item is a crude charge-, multiplicity-, fragment-less Molecule; at optimally aligned (and atom-ordered) geometry. Return type; determined by concern_mol type. Return type:; float, tuple, qcdb.Molecule or psi4.core.Molecule. BFS(seed_atoms=None, bond_threshold=1.2, return_arrays=False, return_molecules=False, return_molecule=False)[source]¶; Detect fragments among real atoms through a breadth-first search (BFS) algorithm. Parameters:. self (qcdb.Molecule or psi4.core.Molecule) – ; seed_atoms (List) – List of lists of atoms (0-indexed) belonging to independent fragments.; Useful to prompt algorithm or to define intramolecular fragments through; border atoms. Example: [[1, 0], [2]]; bond_threshold (float) – Factor beyond average of covalent radii to determine bond cutoff.; return_arrays (bool) – If True, also return fragments as list of arrays.; return_molecules (bool) – If True, also return fragments as list of Molecules.; return_molecule (bool) – If True, also return one big Molecule with fragmentation encoded. Returns:. bfs_map (list of lists) – Array of atom indices (0-indexed) of detected fragments.; bfs_arrays (tuple of lists of ndarray, optional) – geom, mass, elem info per-fragment.; Only provided if return_arrays is True.; bfs_molecules (list of qcdb.Molecule or psi4.core.Molecule, optional) – List of molecules, eac",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Molecule.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Molecule.html:14235,Safety,detect,detected,14235," aligned (and atom-ordered) geometry. Return type; determined by concern_mol type. Return type:; float, tuple, qcdb.Molecule or psi4.core.Molecule. BFS(seed_atoms=None, bond_threshold=1.2, return_arrays=False, return_molecules=False, return_molecule=False)[source]¶; Detect fragments among real atoms through a breadth-first search (BFS) algorithm. Parameters:. self (qcdb.Molecule or psi4.core.Molecule) – ; seed_atoms (List) – List of lists of atoms (0-indexed) belonging to independent fragments.; Useful to prompt algorithm or to define intramolecular fragments through; border atoms. Example: [[1, 0], [2]]; bond_threshold (float) – Factor beyond average of covalent radii to determine bond cutoff.; return_arrays (bool) – If True, also return fragments as list of arrays.; return_molecules (bool) – If True, also return fragments as list of Molecules.; return_molecule (bool) – If True, also return one big Molecule with fragmentation encoded. Returns:. bfs_map (list of lists) – Array of atom indices (0-indexed) of detected fragments.; bfs_arrays (tuple of lists of ndarray, optional) – geom, mass, elem info per-fragment.; Only provided if return_arrays is True.; bfs_molecules (list of qcdb.Molecule or psi4.core.Molecule, optional) – List of molecules, each built from one fragment. Center and; orientation of fragments is fixed so orientation info from self is; not lost. Loses chgmult and ghost/dummy info from self and contains; default chgmult.; Only provided if return_molecules is True.; Returned are of same type as self.; bfs_molecule (qcdb.Molecule or psi4.core.Molecule, optional) – Single molecule with same number of real atoms as self with atoms; reordered into adjacent fragments and fragment markers inserted.; Loses ghost/dummy info from self; keeps total charge but not total mult.; Only provided if return_molecule is True.; Returned is of same type as self.; Authors; ——-; Original code from Michael S. Marshall, linear-scaling algorithm from; Trent M. Parker, revamped b",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Molecule.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Molecule.html:21277,Security,validat,validation,21277,"e, missing_enabled_return='error', tooclose=0.1, zero_ghost_fragments=False, nonphysical=False, mtol=0.001, verbose=1, return_dict=False)¶; Construct Molecule from unvalidated arrays and variables.; Light wrapper around from_arrays(); that is a full-featured constructor to dictionary representa-; tion of Molecule. This follows one step further to return; Molecule instance.; :param See from_arrays().:. Return type:; psi4.core.Molecule. static from_dict(arg0: dict) → psi4.core.Molecule¶; Returns a new Molecule constructed from python dictionary. In progress: name and capabilities should not be relied upon. classmethod from_schema(molschema, return_dict=False, nonphysical=False, verbose=1)¶; Construct Molecule from non-Psi4 schema.; Light wrapper around from_arrays(). Parameters:. molschema (Dict) – Dictionary form of Molecule following known schema.; return_dict (bool) – Additionally return Molecule dictionary intermediate.; nonphysical (bool) – Do allow masses outside an element’s natural range to pass validation?; verbose (int) – Amount of printing. Return type:; Union[Molecule, Tuple[Molecule, Dict]]. Returns:. mol (psi4.core.Molecule); molrec (dict) – Dictionary representation of instance.; Only provided if return_dict is True. classmethod from_string(molstr, dtype=None, name=None, fix_com=None, fix_orientation=None, fix_symmetry=None, return_dict=False, enable_qm=True, enable_efp=True, missing_enabled_return_qm='none', missing_enabled_return_efp='none', verbose=1)¶. fsymbol(self: psi4.core.Molecule, atom: int) → str¶; Gets the cleaned up label of atom (C2 => C, H4 = H) (0-indexed including dummies). ftrue_atomic_number(self: psi4.core.Molecule, atom: int) → int¶; Gets atomic number of atom from element (0-indexed including dummies). full_geometry(self: psi4.core.Molecule) → psi4.core.Matrix¶; Gets the geometry [Bohr] as a (Natom X 3) matrix of coordinates (including dummies). full_pg_n(self: psi4.core.Molecule) → int¶; Gets n in Cnv, etc.; If there is no n (e.g. ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Molecule.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Molecule.html:38006,Security,hash,hash,38006,"iables, then calls update_geometry(). symbol(self: psi4.core.Molecule, atom: int) → str¶; Gets the cleaned up label of atom (C2 => C, H4 = H) (0-indexed without dummies). symmetrize(self: psi4.core.Molecule, arg0: float) → None¶; Finds the highest point Abelian point group within the specified tolerance, and forces the geometry to have that symmetry. symmetry_from_input(self: psi4.core.Molecule) → str¶; Returns the symmetry specified in the input. to_arrays(dummy=False, ghost_as_dummy=False)[source]¶; Exports coordinate info into NumPy arrays. Parameters:. dummy (bool) – Whether or not to include dummy atoms in returned arrays.; ghost_as_dummy (bool) – Whether or not to treat ghost atoms as dummies. Return type:; Tuple[ndarray, ndarray, ndarray, ndarray, ndarray]. Returns:. geom, mass, elem, elez, uniq (numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray) – (nat, 3) geometry [a0].; (nat,) mass [u].; (nat,) element symbol.; (nat,) atomic number.; (nat,) hash of element symbol and mass.; Note that coordinate, orientation, and element information is; preserved but fragmentation, chgmult, and dummy/ghost is lost.; Usage; —–; geom, mass, elem, elez, uniq = molinstance.to_arrays(). to_dict(force_c1=False, force_units=False, np_out=True)[source]¶; Serializes instance into Molecule dictionary. to_schema(dtype, units='Bohr')[source]¶; Serializes instance into dictionary according to schema dtype. to_string(dtype, units=None, atom_format=None, ghost_format=None, width=17, prec=12)[source]¶; Format a string representation of QM molecule. translate(self: psi4.core.Molecule, arg0: psi4.core.Vector3) → None¶; Translates molecule by arg0. true_atomic_number(self: psi4.core.Molecule, atom: int) → int¶; Gets atomic number of atom from element (0-indexed without dummies). units(self: psi4.core.Molecule) → str¶; Returns units used to define the geometry, i.e. ‘Angstrom’ or ‘Bohr’. update_geometry(self: psi4.core.Molecule) → None¶; Reevaluates the geometry with cur",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Molecule.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Molecule.html:7844,Testability,Test,Tester,7844," Overrides symmetry from outside the molecule string. rotational_constants(self); Returns the rotational constants [cm^-1] of the molecule. rotational_symmetry_number(self); Returns number of unique orientations of the rigid molecule that only interchange identical atoms. rotor_type(self); Returns rotor type, e.g. 'RT_ATOM' or 'RT_SYMMETRIC_TOP'. run_dftd3([func, dashlvl, dashparam, ...]); Compute dispersion correction via Grimme's DFTD3 program. run_dftd4([func, dashlvl, dashparam, ...]); Compute dispersion correction via Grimme's DFTD4 program. run_gcp([func, dertype, verbose]); Compute geometrical BSSE correction via Grimme's GCP program. save_string_xyz(self); Saves the string of an XYZ file to arg2. save_string_xyz_file(self); Saves an XYZ file to arg2. save_xyz_file(self, arg0, arg1); Saves an XYZ file to arg0. schoenflies_symbol(self); Returns the Schoenflies symbol. scramble([do_shift, do_rotate, do_resort, ...]); Tester for B787 by shifting, rotating, and atom shuffling ref_mol and checking that the aligner returns the opposite transformation. set_active_fragment(self, arg0); Sets the specified fragment arg0 to be Real. set_active_fragments(self, arg0); Sets the specified list arg0 of fragments to be Real. set_basis_all_atoms(self, arg0, arg1); Sets basis set arg0 to all atoms. set_basis_by_label(self, arg0, arg1, arg2); Sets basis set arg1 to all atoms with label (e.g., H4) arg0. set_basis_by_number(self, arg0, arg1, arg2); Sets basis set arg1 to all atoms with number arg0. set_basis_by_symbol(self, arg0, arg1, arg2); Sets basis set arg1 to all atoms with symbol (e.g., H) arg0. set_comment(self, arg0); Sets molecule comment. set_connectivity(self, arg0); Sets molecule connectivity. set_full_geometry(self, arg0); Sets the geometry, given a (Natom X 3) matrix arg0 of coordinates (in Bohr) (including dummies. set_geometry(self, arg0); Sets the geometry, given a (Natom X 3) matrix arg0 of coordinates [a0] (excluding dummies). set_ghost_fragment(self, arg0); Se",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Molecule.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Molecule.html:12486,Testability,test,test,12486," qcelemental.molutil.B787() for psi4.driver.qcdb.Molecule or; psi4.core.Molecule. Employs the Kabsch, Hungarian, and; Uno algorithms to exhaustively locate the best alignment for; non-oriented, non-ordered structures. Parameters:. concern_mol (Union[Molecule, Molecule]) – Molecule of concern, to be shifted, rotated, and reordered into; best coincidence with ref_mol.; ref_mol (Union[Molecule, Molecule]) – Molecule to match.; atoms_map (bool) – Whether atom1 of ref_mol corresponds to atom1 of concern_mol, etc.; If true, specifying True can save much time.; mols_align (bool) – Whether ref_mol and concern_mol have identical geometries by eye; (barring orientation or atom mapping) and expected final RMSD = 0.; If True, procedure is truncated when RMSD condition met, saving time.; do_plot (bool) – Pops up a mpl plot showing before, after, and ref geometries.; run_to_completion (bool) – Run reorderings to completion (past RMSD = 0) even if unnecessary because; mols_align=True. Used to test worst-case timings.; run_resorting (bool) – Run the resorting machinery even if unnecessary because atoms_map=True.; uno_cutoff (float) – TODO; run_mirror (bool) – Run alternate geometries potentially allowing best match to ref_mol; from mirror image of concern_mol. Only run if system confirmed to; be nonsuperimposable upon mirror reflection.; verbose (int) – . Returns:; First item is RMSD [A] between ref_mol and the optimally aligned; geometry computed.; Second item is a AlignmentMill namedtuple with fields; (shift, rotation, atommap, mirror) that prescribe the transformation; from concern_mol and the optimally aligned geometry.; Third item is a crude charge-, multiplicity-, fragment-less Molecule; at optimally aligned (and atom-ordered) geometry. Return type; determined by concern_mol type. Return type:; float, tuple, qcdb.Molecule or psi4.core.Molecule. BFS(seed_atoms=None, bond_threshold=1.2, return_arrays=False, return_molecules=False, return_molecule=False)[source]¶; Detect fragment",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Molecule.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Molecule.html:32654,Testability,Test,Tester,32654,"m derivative level at which to run GCP. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose (int) – Amount of printing. Unused at present. Returns:. energy (float) – When dertype=0, energy [Eh].; gradient (ndarray) – When dertype=1, (nat, 3) gradient [Eh/a0].; (energy, gradient) (tuple of float and ndarray) – When dertype=None, both energy [Eh] and (nat, 3) gradient [Eh/a0]. save_string_xyz(self: psi4.core.Molecule) → str¶; Saves the string of an XYZ file to arg2. save_string_xyz_file(self: psi4.core.Molecule) → str¶; Saves an XYZ file to arg2. save_xyz_file(self: psi4.core.Molecule, arg0: str, arg1: bool) → None¶; Saves an XYZ file to arg0. schoenflies_symbol(self: psi4.core.Molecule) → str¶; Returns the Schoenflies symbol. scramble(do_shift=True, do_rotate=True, do_resort=True, deflection=1.0, do_mirror=False, do_plot=False, run_to_completion=False, run_resorting=False, verbose=1)[source]¶; Tester for B787 by shifting, rotating, and atom shuffling ref_mol and; checking that the aligner returns the opposite transformation. Parameters:. ref_mol (Molecule) – Molecule to perturb.; do_shift (Union[bool, ndarray, List]) – Whether to generate a random atom shift on interval [-3, 3) in each; dimension (True) or leave at current origin. To shift by a specified; vector, supply a 3-element list.; do_rotate (Union[bool, ndarray, List[List]]) – Whether to generate a random 3D rotation according to algorithm of Arvo.; To rotate by a specified matrix, supply a 9-element list of lists.; do_resort (Union[bool, List]) – Whether to shuffle atoms (True) or leave 1st atom 1st, etc. (False).; To specify shuffle, supply a nat-element list of indices.; deflection (float) – If do_rotate, how random a rotation: 0.0 is no change, 0.1 is small; perturbation, 1.0 is completely random.; do_mirror (bool) – Whether to construct the mirror image structure by inverting y-axis.; do_plot (bool) – Pops up a mpl plot showing",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Molecule.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Molecule.html:33972,Testability,test,test,33972,"on (True) or leave at current origin. To shift by a specified; vector, supply a 3-element list.; do_rotate (Union[bool, ndarray, List[List]]) – Whether to generate a random 3D rotation according to algorithm of Arvo.; To rotate by a specified matrix, supply a 9-element list of lists.; do_resort (Union[bool, List]) – Whether to shuffle atoms (True) or leave 1st atom 1st, etc. (False).; To specify shuffle, supply a nat-element list of indices.; deflection (float) – If do_rotate, how random a rotation: 0.0 is no change, 0.1 is small; perturbation, 1.0 is completely random.; do_mirror (bool) – Whether to construct the mirror image structure by inverting y-axis.; do_plot (bool) – Pops up a mpl plot showing before, after, and ref geometries.; run_to_completion (bool) – By construction, scrambled systems are fully alignable (final RMSD=0).; Even so, True turns off the mechanism to stop when RMSD reaches zero; and instead proceed to worst possible time.; run_resorting (bool) – Even if atoms not shuffled, test the resorting machinery.; verbose (int) – Print level. Return type:; None. set_active_fragment(self: psi4.core.Molecule, arg0: int) → None¶; Sets the specified fragment arg0 to be Real. set_active_fragments(self: psi4.core.Molecule, arg0: List[int]) → None¶; Sets the specified list arg0 of fragments to be Real. set_basis_all_atoms(self: psi4.core.Molecule, arg0: str, arg1: str) → None¶; Sets basis set arg0 to all atoms. set_basis_by_label(self: psi4.core.Molecule, arg0: str, arg1: str, arg2: str) → None¶; Sets basis set arg1 to all atoms with label (e.g., H4) arg0. set_basis_by_number(self: psi4.core.Molecule, arg0: int, arg1: str, arg2: str) → None¶; Sets basis set arg1 to all atoms with number arg0. set_basis_by_symbol(self: psi4.core.Molecule, arg0: str, arg1: str, arg2: str) → None¶; Sets basis set arg1 to all atoms with symbol (e.g., H) arg0. set_comment(self: psi4.core.Molecule, arg0: str) → None¶; Sets molecule comment. set_connectivity(self: psi4.core.Molecule,",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Molecule.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Molecule.html:39072,Usability,clear,clearing,39072,"rmation is; preserved but fragmentation, chgmult, and dummy/ghost is lost.; Usage; —–; geom, mass, elem, elez, uniq = molinstance.to_arrays(). to_dict(force_c1=False, force_units=False, np_out=True)[source]¶; Serializes instance into Molecule dictionary. to_schema(dtype, units='Bohr')[source]¶; Serializes instance into dictionary according to schema dtype. to_string(dtype, units=None, atom_format=None, ghost_format=None, width=17, prec=12)[source]¶; Format a string representation of QM molecule. translate(self: psi4.core.Molecule, arg0: psi4.core.Vector3) → None¶; Translates molecule by arg0. true_atomic_number(self: psi4.core.Molecule, atom: int) → int¶; Gets atomic number of atom from element (0-indexed without dummies). units(self: psi4.core.Molecule) → str¶; Returns units used to define the geometry, i.e. ‘Angstrom’ or ‘Bohr’. update_geometry(self: psi4.core.Molecule) → None¶; Reevaluates the geometry with current variable values, orientation directives, etc. by clearing the atoms list and rebuilding it. Idempotent. Use liberally.Must be called after initial Molecule definition by string. x(self: psi4.core.Molecule, arg0: int) → float¶; x position [Bohr] of atom arg0 (0-indexed without dummies). xyz(self: psi4.core.Molecule, i: int) → psi4.core.Vector3¶; Return the Vector3 for atom i (0-indexed without dummies). y(self: psi4.core.Molecule, arg0: int) → float¶; y position [Bohr] of atom arg0 (0-indexed without dummies). z(self: psi4.core.Molecule, arg0: int) → float¶; z position [Bohr] of atom arg0 (0-indexed without dummies). table of contents. Molecule; Molecule; Molecule.B787(); Molecule.BFS(); Molecule.Z(); Molecule.activate_all_fragments(); Molecule.add_atom(); Molecule.atom_at_position(); Molecule.basis_on_atom(); Molecule.center_of_mass(); Molecule.charge(); Molecule.clone(); Molecule.com_fixed(); Molecule.comment(); Molecule.connectivity(); Molecule.create_psi4_string_from_molecule(); Molecule.deactivate_all_fragments(); Molecule.distance_matrix(); Molecu",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Molecule.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.MOSpace.html:1614,Deployability,update,updated,1614,"﻿. MOSpace. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; MOSpace. MOSpace¶. class psi4.core.MOSpace¶; Bases: pybind11_object; Defines orbital spaces in which to transform integrals; Methods Summary. aIndex(self); Get the alpha orbital indexing array. aOrbs(self); Get the alpha orbitals. all(). bIndex(self); Get the beta orbital indexing array. bOrbs(self); Get the beta orbitals. dum(). fzc(). fzv(). label(self); Get the unique identifier for this space. nil(). occ(). vir(). Methods Documentation. aIndex(self: psi4.core.MOSpace) → List[int]¶; Get the alpha orbital indexing array. aOrbs(self: psi4.core.MOSpace) → List[int]¶; Get the alpha orbitals. static all() → psi4.core.MOSpace¶. bIndex(self: psi4.core.MOSpace) → List[int]¶; Get the beta orbital indexing array. bOrbs(self: psi4.core.MOSpace) → List[int]¶; Get the beta orbitals. static dum() → psi4.core.MOSpace¶. static fzc() → psi4.core.MOSpace¶. static fzv() → psi4.core.MOSpace¶. label(self: psi4.core.MOSpace) → str¶; Get the unique identifier for this space. static nil() → psi4.core.MOSpace¶. static occ() → psi4.core.MOSpace¶. static vir() → psi4.core.MOSpace¶. table of contents. MOSpace; MOSpace; MOSpace.aIndex(); MOSpace.aOrbs(); MOSpace.all(); MOSpace.bIndex(); MOSpace.bOrbs(); MOSpace.dum(); MOSpace.fzc(); MOSpace.fzv(); MOSpace.label(); MOSpace.nil(); MOSpace.occ(); MOSpace.vir(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; MOSpace. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.MOSpace.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.MOSpace.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.MOWriter.html:581,Deployability,update,updated,581,"﻿. MOWriter. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; MOWriter. MOWriter¶. class psi4.core.MOWriter¶; Bases: pybind11_object; Writes the MOs; Methods Summary. write(self); Write the MOs. Methods Documentation. write(self: psi4.core.MOWriter) → None¶; Write the MOs. table of contents. MOWriter; MOWriter; MOWriter.write(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; MOWriter. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.MOWriter.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.MOWriter.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.mrcc_generate_input.html:583,Deployability,update,updated,583,"﻿. mrcc_generate_input. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; mrcc_generate_input. mrcc_generate_input¶. psi4.core.mrcc_generate_input(arg0: psi4.core.Wavefunction, arg1: dict) → psi4.core.PsiReturnType¶; Generates an input for Kallay’s MRCC code. table of contents. mrcc_generate_input; mrcc_generate_input(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; mrcc_generate_input. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.mrcc_generate_input.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.mrcc_generate_input.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.mrcc_load_densities.html:595,Deployability,update,updated,595,"﻿. mrcc_load_densities. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; mrcc_load_densities. mrcc_load_densities¶. psi4.core.mrcc_load_densities(arg0: psi4.core.Wavefunction, arg1: dict) → psi4.core.PsiReturnType¶; Reads in the density matrices from Kallay’s MRCC code. table of contents. mrcc_load_densities; mrcc_load_densities(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; mrcc_load_densities. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.mrcc_load_densities.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.mrcc_load_densities.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.MultipoleInt.html:494,Deployability,update,updated,494,"﻿. MultipoleInt. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; MultipoleInt. MultipoleInt¶. class psi4.core.MultipoleInt¶; Bases: OneBodyAOInt; Computes arbitrary-order multipole integrals. table of contents. MultipoleInt; MultipoleInt. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; MultipoleInt. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.MultipoleInt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.MultipoleInt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.MultipoleSymmetry.html:714,Deployability,update,updated,714,"﻿. MultipoleSymmetry. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; MultipoleSymmetry. MultipoleSymmetry¶. class psi4.core.MultipoleSymmetry¶; Bases: pybind11_object; docstring; Methods Summary. create_matrices(self, arg0); docstring. Methods Documentation. create_matrices(self: psi4.core.MultipoleSymmetry, arg0: str) → List[psi4.core.Matrix]¶; docstring. table of contents. MultipoleSymmetry; MultipoleSymmetry; MultipoleSymmetry.create_matrices(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; MultipoleSymmetry. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.MultipoleSymmetry.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.MultipoleSymmetry.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.NablaInt.html:446,Deployability,update,updated,446,"﻿. NablaInt. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; NablaInt. NablaInt¶. class psi4.core.NablaInt¶; Bases: OneBodyAOInt; Computes nabla integrals. table of contents. NablaInt; NablaInt. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; NablaInt. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.NablaInt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.NablaInt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.NumIntHelper.html:668,Deployability,integrat,integration,668,"﻿. NumIntHelper. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; NumIntHelper. NumIntHelper¶. class psi4.core.NumIntHelper¶; Bases: pybind11_object; Computes numerical integrals using a DFT grid.; Methods Summary. dd_density_integral(self, grid_data, D); Compute an integral int rho(r) f(r) where f is a vector-valued function. density_integral(self, grid_data, D); Compute an integral int rho(r) f(r) where f is a vector-valued function. numint_grid(self). potential_integral(self, arg0); Compute an integral int chi_mu(r) chi_nu(r) f(r) where f is a scalar function represented for each block of points of the integration grid as a vector of n_points. Methods Documentation. dd_density_integral(self: psi4.core.NumIntHelper, grid_data: List[psi4.core.Matrix], D: psi4.core.Matrix) → psi4.core.Matrix¶; Compute an integral int rho(r) f(r) where f is a vector-valued function. f is represented for each block of points of the integration grid as a matrix (n_data, n_points). Return has shape (n_atoms, n_data). density_integral(self: psi4.core.NumIntHelper, grid_data: List[psi4.core.Matrix], D: psi4.core.Matrix) → psi4.core.Vector¶; Compute an integral int rho(r) f(r) where f is a vector-valued function. f is represented for each block of points of the integration grid as a matrix (n_data, n_points). Return has shape (n_data). numint_grid(self: psi4.core.NumIntHelper) → psi4.core.DFTGrid¶. potential_integral(self: psi4.core.NumIntHelper, arg0: List[psi4.core.Vector]) → psi4.core.Matrix¶; Compute an integral int chi_mu(r) chi_nu(r) f(r) where f is a scalar function represented for each block of points of the integration grid as a vector of n_points. table of contents. NumIntHelper; NumIntHelper; NumIntHelper.dd_density_integral(); NumIntHelper.density_integral(); NumIntHelper.numint_grid(); NumIntHelper.potential_integral(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. P",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.NumIntHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.NumIntHelper.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.NumIntHelper.html:982,Deployability,integrat,integration,982,"﻿. NumIntHelper. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; NumIntHelper. NumIntHelper¶. class psi4.core.NumIntHelper¶; Bases: pybind11_object; Computes numerical integrals using a DFT grid.; Methods Summary. dd_density_integral(self, grid_data, D); Compute an integral int rho(r) f(r) where f is a vector-valued function. density_integral(self, grid_data, D); Compute an integral int rho(r) f(r) where f is a vector-valued function. numint_grid(self). potential_integral(self, arg0); Compute an integral int chi_mu(r) chi_nu(r) f(r) where f is a scalar function represented for each block of points of the integration grid as a vector of n_points. Methods Documentation. dd_density_integral(self: psi4.core.NumIntHelper, grid_data: List[psi4.core.Matrix], D: psi4.core.Matrix) → psi4.core.Matrix¶; Compute an integral int rho(r) f(r) where f is a vector-valued function. f is represented for each block of points of the integration grid as a matrix (n_data, n_points). Return has shape (n_atoms, n_data). density_integral(self: psi4.core.NumIntHelper, grid_data: List[psi4.core.Matrix], D: psi4.core.Matrix) → psi4.core.Vector¶; Compute an integral int rho(r) f(r) where f is a vector-valued function. f is represented for each block of points of the integration grid as a matrix (n_data, n_points). Return has shape (n_data). numint_grid(self: psi4.core.NumIntHelper) → psi4.core.DFTGrid¶. potential_integral(self: psi4.core.NumIntHelper, arg0: List[psi4.core.Vector]) → psi4.core.Matrix¶; Compute an integral int chi_mu(r) chi_nu(r) f(r) where f is a scalar function represented for each block of points of the integration grid as a vector of n_points. table of contents. NumIntHelper; NumIntHelper; NumIntHelper.dd_density_integral(); NumIntHelper.density_integral(); NumIntHelper.numint_grid(); NumIntHelper.potential_integral(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. P",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.NumIntHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.NumIntHelper.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.NumIntHelper.html:1313,Deployability,integrat,integration,1313,"lper¶; Bases: pybind11_object; Computes numerical integrals using a DFT grid.; Methods Summary. dd_density_integral(self, grid_data, D); Compute an integral int rho(r) f(r) where f is a vector-valued function. density_integral(self, grid_data, D); Compute an integral int rho(r) f(r) where f is a vector-valued function. numint_grid(self). potential_integral(self, arg0); Compute an integral int chi_mu(r) chi_nu(r) f(r) where f is a scalar function represented for each block of points of the integration grid as a vector of n_points. Methods Documentation. dd_density_integral(self: psi4.core.NumIntHelper, grid_data: List[psi4.core.Matrix], D: psi4.core.Matrix) → psi4.core.Matrix¶; Compute an integral int rho(r) f(r) where f is a vector-valued function. f is represented for each block of points of the integration grid as a matrix (n_data, n_points). Return has shape (n_atoms, n_data). density_integral(self: psi4.core.NumIntHelper, grid_data: List[psi4.core.Matrix], D: psi4.core.Matrix) → psi4.core.Vector¶; Compute an integral int rho(r) f(r) where f is a vector-valued function. f is represented for each block of points of the integration grid as a matrix (n_data, n_points). Return has shape (n_data). numint_grid(self: psi4.core.NumIntHelper) → psi4.core.DFTGrid¶. potential_integral(self: psi4.core.NumIntHelper, arg0: List[psi4.core.Vector]) → psi4.core.Matrix¶; Compute an integral int chi_mu(r) chi_nu(r) f(r) where f is a scalar function represented for each block of points of the integration grid as a vector of n_points. table of contents. NumIntHelper; NumIntHelper; NumIntHelper.dd_density_integral(); NumIntHelper.density_integral(); NumIntHelper.numint_grid(); NumIntHelper.potential_integral(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; NumIntHelper. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.NumIntHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.NumIntHelper.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.NumIntHelper.html:1675,Deployability,integrat,integration,1675,"lper¶; Bases: pybind11_object; Computes numerical integrals using a DFT grid.; Methods Summary. dd_density_integral(self, grid_data, D); Compute an integral int rho(r) f(r) where f is a vector-valued function. density_integral(self, grid_data, D); Compute an integral int rho(r) f(r) where f is a vector-valued function. numint_grid(self). potential_integral(self, arg0); Compute an integral int chi_mu(r) chi_nu(r) f(r) where f is a scalar function represented for each block of points of the integration grid as a vector of n_points. Methods Documentation. dd_density_integral(self: psi4.core.NumIntHelper, grid_data: List[psi4.core.Matrix], D: psi4.core.Matrix) → psi4.core.Matrix¶; Compute an integral int rho(r) f(r) where f is a vector-valued function. f is represented for each block of points of the integration grid as a matrix (n_data, n_points). Return has shape (n_atoms, n_data). density_integral(self: psi4.core.NumIntHelper, grid_data: List[psi4.core.Matrix], D: psi4.core.Matrix) → psi4.core.Vector¶; Compute an integral int rho(r) f(r) where f is a vector-valued function. f is represented for each block of points of the integration grid as a matrix (n_data, n_points). Return has shape (n_data). numint_grid(self: psi4.core.NumIntHelper) → psi4.core.DFTGrid¶. potential_integral(self: psi4.core.NumIntHelper, arg0: List[psi4.core.Vector]) → psi4.core.Matrix¶; Compute an integral int chi_mu(r) chi_nu(r) f(r) where f is a scalar function represented for each block of points of the integration grid as a vector of n_points. table of contents. NumIntHelper; NumIntHelper; NumIntHelper.dd_density_integral(); NumIntHelper.density_integral(); NumIntHelper.numint_grid(); NumIntHelper.potential_integral(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; NumIntHelper. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.NumIntHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.NumIntHelper.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.NumIntHelper.html:2095,Deployability,update,updated,2095,"lper¶; Bases: pybind11_object; Computes numerical integrals using a DFT grid.; Methods Summary. dd_density_integral(self, grid_data, D); Compute an integral int rho(r) f(r) where f is a vector-valued function. density_integral(self, grid_data, D); Compute an integral int rho(r) f(r) where f is a vector-valued function. numint_grid(self). potential_integral(self, arg0); Compute an integral int chi_mu(r) chi_nu(r) f(r) where f is a scalar function represented for each block of points of the integration grid as a vector of n_points. Methods Documentation. dd_density_integral(self: psi4.core.NumIntHelper, grid_data: List[psi4.core.Matrix], D: psi4.core.Matrix) → psi4.core.Matrix¶; Compute an integral int rho(r) f(r) where f is a vector-valued function. f is represented for each block of points of the integration grid as a matrix (n_data, n_points). Return has shape (n_atoms, n_data). density_integral(self: psi4.core.NumIntHelper, grid_data: List[psi4.core.Matrix], D: psi4.core.Matrix) → psi4.core.Vector¶; Compute an integral int rho(r) f(r) where f is a vector-valued function. f is represented for each block of points of the integration grid as a matrix (n_data, n_points). Return has shape (n_data). numint_grid(self: psi4.core.NumIntHelper) → psi4.core.DFTGrid¶. potential_integral(self: psi4.core.NumIntHelper, arg0: List[psi4.core.Vector]) → psi4.core.Matrix¶; Compute an integral int chi_mu(r) chi_nu(r) f(r) where f is a scalar function represented for each block of points of the integration grid as a vector of n_points. table of contents. NumIntHelper; NumIntHelper; NumIntHelper.dd_density_integral(); NumIntHelper.density_integral(); NumIntHelper.numint_grid(); NumIntHelper.potential_integral(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; NumIntHelper. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.NumIntHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.NumIntHelper.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.NumIntHelper.html:668,Integrability,integrat,integration,668,"﻿. NumIntHelper. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; NumIntHelper. NumIntHelper¶. class psi4.core.NumIntHelper¶; Bases: pybind11_object; Computes numerical integrals using a DFT grid.; Methods Summary. dd_density_integral(self, grid_data, D); Compute an integral int rho(r) f(r) where f is a vector-valued function. density_integral(self, grid_data, D); Compute an integral int rho(r) f(r) where f is a vector-valued function. numint_grid(self). potential_integral(self, arg0); Compute an integral int chi_mu(r) chi_nu(r) f(r) where f is a scalar function represented for each block of points of the integration grid as a vector of n_points. Methods Documentation. dd_density_integral(self: psi4.core.NumIntHelper, grid_data: List[psi4.core.Matrix], D: psi4.core.Matrix) → psi4.core.Matrix¶; Compute an integral int rho(r) f(r) where f is a vector-valued function. f is represented for each block of points of the integration grid as a matrix (n_data, n_points). Return has shape (n_atoms, n_data). density_integral(self: psi4.core.NumIntHelper, grid_data: List[psi4.core.Matrix], D: psi4.core.Matrix) → psi4.core.Vector¶; Compute an integral int rho(r) f(r) where f is a vector-valued function. f is represented for each block of points of the integration grid as a matrix (n_data, n_points). Return has shape (n_data). numint_grid(self: psi4.core.NumIntHelper) → psi4.core.DFTGrid¶. potential_integral(self: psi4.core.NumIntHelper, arg0: List[psi4.core.Vector]) → psi4.core.Matrix¶; Compute an integral int chi_mu(r) chi_nu(r) f(r) where f is a scalar function represented for each block of points of the integration grid as a vector of n_points. table of contents. NumIntHelper; NumIntHelper; NumIntHelper.dd_density_integral(); NumIntHelper.density_integral(); NumIntHelper.numint_grid(); NumIntHelper.potential_integral(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. P",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.NumIntHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.NumIntHelper.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.NumIntHelper.html:982,Integrability,integrat,integration,982,"﻿. NumIntHelper. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; NumIntHelper. NumIntHelper¶. class psi4.core.NumIntHelper¶; Bases: pybind11_object; Computes numerical integrals using a DFT grid.; Methods Summary. dd_density_integral(self, grid_data, D); Compute an integral int rho(r) f(r) where f is a vector-valued function. density_integral(self, grid_data, D); Compute an integral int rho(r) f(r) where f is a vector-valued function. numint_grid(self). potential_integral(self, arg0); Compute an integral int chi_mu(r) chi_nu(r) f(r) where f is a scalar function represented for each block of points of the integration grid as a vector of n_points. Methods Documentation. dd_density_integral(self: psi4.core.NumIntHelper, grid_data: List[psi4.core.Matrix], D: psi4.core.Matrix) → psi4.core.Matrix¶; Compute an integral int rho(r) f(r) where f is a vector-valued function. f is represented for each block of points of the integration grid as a matrix (n_data, n_points). Return has shape (n_atoms, n_data). density_integral(self: psi4.core.NumIntHelper, grid_data: List[psi4.core.Matrix], D: psi4.core.Matrix) → psi4.core.Vector¶; Compute an integral int rho(r) f(r) where f is a vector-valued function. f is represented for each block of points of the integration grid as a matrix (n_data, n_points). Return has shape (n_data). numint_grid(self: psi4.core.NumIntHelper) → psi4.core.DFTGrid¶. potential_integral(self: psi4.core.NumIntHelper, arg0: List[psi4.core.Vector]) → psi4.core.Matrix¶; Compute an integral int chi_mu(r) chi_nu(r) f(r) where f is a scalar function represented for each block of points of the integration grid as a vector of n_points. table of contents. NumIntHelper; NumIntHelper; NumIntHelper.dd_density_integral(); NumIntHelper.density_integral(); NumIntHelper.numint_grid(); NumIntHelper.potential_integral(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. P",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.NumIntHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.NumIntHelper.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.NumIntHelper.html:1313,Integrability,integrat,integration,1313,"lper¶; Bases: pybind11_object; Computes numerical integrals using a DFT grid.; Methods Summary. dd_density_integral(self, grid_data, D); Compute an integral int rho(r) f(r) where f is a vector-valued function. density_integral(self, grid_data, D); Compute an integral int rho(r) f(r) where f is a vector-valued function. numint_grid(self). potential_integral(self, arg0); Compute an integral int chi_mu(r) chi_nu(r) f(r) where f is a scalar function represented for each block of points of the integration grid as a vector of n_points. Methods Documentation. dd_density_integral(self: psi4.core.NumIntHelper, grid_data: List[psi4.core.Matrix], D: psi4.core.Matrix) → psi4.core.Matrix¶; Compute an integral int rho(r) f(r) where f is a vector-valued function. f is represented for each block of points of the integration grid as a matrix (n_data, n_points). Return has shape (n_atoms, n_data). density_integral(self: psi4.core.NumIntHelper, grid_data: List[psi4.core.Matrix], D: psi4.core.Matrix) → psi4.core.Vector¶; Compute an integral int rho(r) f(r) where f is a vector-valued function. f is represented for each block of points of the integration grid as a matrix (n_data, n_points). Return has shape (n_data). numint_grid(self: psi4.core.NumIntHelper) → psi4.core.DFTGrid¶. potential_integral(self: psi4.core.NumIntHelper, arg0: List[psi4.core.Vector]) → psi4.core.Matrix¶; Compute an integral int chi_mu(r) chi_nu(r) f(r) where f is a scalar function represented for each block of points of the integration grid as a vector of n_points. table of contents. NumIntHelper; NumIntHelper; NumIntHelper.dd_density_integral(); NumIntHelper.density_integral(); NumIntHelper.numint_grid(); NumIntHelper.potential_integral(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; NumIntHelper. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.NumIntHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.NumIntHelper.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.NumIntHelper.html:1675,Integrability,integrat,integration,1675,"lper¶; Bases: pybind11_object; Computes numerical integrals using a DFT grid.; Methods Summary. dd_density_integral(self, grid_data, D); Compute an integral int rho(r) f(r) where f is a vector-valued function. density_integral(self, grid_data, D); Compute an integral int rho(r) f(r) where f is a vector-valued function. numint_grid(self). potential_integral(self, arg0); Compute an integral int chi_mu(r) chi_nu(r) f(r) where f is a scalar function represented for each block of points of the integration grid as a vector of n_points. Methods Documentation. dd_density_integral(self: psi4.core.NumIntHelper, grid_data: List[psi4.core.Matrix], D: psi4.core.Matrix) → psi4.core.Matrix¶; Compute an integral int rho(r) f(r) where f is a vector-valued function. f is represented for each block of points of the integration grid as a matrix (n_data, n_points). Return has shape (n_atoms, n_data). density_integral(self: psi4.core.NumIntHelper, grid_data: List[psi4.core.Matrix], D: psi4.core.Matrix) → psi4.core.Vector¶; Compute an integral int rho(r) f(r) where f is a vector-valued function. f is represented for each block of points of the integration grid as a matrix (n_data, n_points). Return has shape (n_data). numint_grid(self: psi4.core.NumIntHelper) → psi4.core.DFTGrid¶. potential_integral(self: psi4.core.NumIntHelper, arg0: List[psi4.core.Vector]) → psi4.core.Matrix¶; Compute an integral int chi_mu(r) chi_nu(r) f(r) where f is a scalar function represented for each block of points of the integration grid as a vector of n_points. table of contents. NumIntHelper; NumIntHelper; NumIntHelper.dd_density_integral(); NumIntHelper.density_integral(); NumIntHelper.numint_grid(); NumIntHelper.potential_integral(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; NumIntHelper. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.NumIntHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.NumIntHelper.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.occ.html:455,Deployability,update,updated,455,"﻿. occ. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; occ. occ¶. psi4.core.occ(ref_wfn: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Runs the orbital optimized CC codes. table of contents. occ; occ(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; occ. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.occ.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.occ.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.occ.html:214,Performance,optimiz,optimized,214,"﻿. occ. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; occ. occ¶. psi4.core.occ(ref_wfn: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Runs the orbital optimized CC codes. table of contents. occ; occ(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; occ. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.occ.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.occ.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.OEProp.html:3518,Deployability,update,updated,3518,"→ List[float]¶; The z component of the field (in a.u.) at each grid point. Vvals(self: psi4.core.OEProp) → List[float]¶; The electrostatic potential (in a.u.) at each grid point. add(self: psi4.core.OEProp, arg0: str) → None¶; Append the given task to the list of properties to compute. clear(self: psi4.core.OEProp) → None¶; Clear the list of properties to compute. compute(self: psi4.core.OEProp) → None¶; Compute the properties. set_Da_ao(self: psi4.core.OEProp, Da: psi4.core.Matrix, symmetry: int = 0) → None¶; docstring. set_Da_mo(self: psi4.core.OEProp, arg0: psi4.core.Matrix) → None¶; docstring. set_Da_so(self: psi4.core.OEProp, arg0: psi4.core.Matrix) → None¶; docstring. set_Db_ao(self: psi4.core.OEProp, Db: psi4.core.Matrix, symmetry: int = 0) → None¶; docstring. set_Db_mo(self: psi4.core.OEProp, arg0: psi4.core.Matrix) → None¶; docstring. set_Db_so(self: psi4.core.OEProp, arg0: psi4.core.Matrix) → None¶; docstring. set_names(self: psi4.core.OEProp, arg0: Set[str]) → None¶; Instruct OEProp to save variables under all specified names. The property name will be inserted at every occurrence of {}, like Python format strings. Wipes other names-to-save-by. set_title(self: psi4.core.OEProp, title: str) → None¶; Title OEProp for print purposes. As a side effect, saves variables as title + propertyname and only that. Follow up with side names, if the side effect is undesired,. table of contents. OEProp; OEProp; OEProp.valid_methods; OEProp.Exvals(); OEProp.Eyvals(); OEProp.Ezvals(); OEProp.Vvals(); OEProp.add(); OEProp.clear(); OEProp.compute(); OEProp.set_Da_ao(); OEProp.set_Da_mo(); OEProp.set_Da_so(); OEProp.set_Db_ao(); OEProp.set_Db_mo(); OEProp.set_Db_so(); OEProp.set_names(); OEProp.set_title(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OEProp. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.OEProp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.OEProp.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.OEProp.html:975,Modifiability,variab,variables,975,"﻿. OEProp. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OEProp. OEProp¶. class psi4.core.OEProp¶; Bases: pybind11_object; docstring; Attributes Summary. valid_methods. Methods Summary. Exvals(self); The x component of the field (in a.u.) at each grid point. Eyvals(self); The y component of the field (in a.u.) at each grid point. Ezvals(self); The z component of the field (in a.u.) at each grid point. Vvals(self); The electrostatic potential (in a.u.) at each grid point. add(self, arg0); Append the given task to the list of properties to compute. clear(self); Clear the list of properties to compute. compute(self); Compute the properties. set_Da_ao(self, Da[, symmetry]); docstring. set_Da_mo(self, arg0); docstring. set_Da_so(self, arg0); docstring. set_Db_ao(self, Db[, symmetry]); docstring. set_Db_mo(self, arg0); docstring. set_Db_so(self, arg0); docstring. set_names(self, arg0); Instruct OEProp to save variables under all specified names. set_title(self, title); Title OEProp for print purposes. Attributes Documentation. valid_methods = ['DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES', 'LOWDIN_CHARGES', 'WIBERG_LOWDIN_INDICES', 'MAYER_INDICES', 'MBIS_CHARGES', 'MBIS_VOLUME_RATIOS', 'MO_EXTENTS', 'GRID_FIELD', 'GRID_ESP', 'ESP_AT_NUCLEI', 'NO_OCCUPATIONS']¶. Methods Documentation. Exvals(self: psi4.core.OEProp) → List[float]¶; The x component of the field (in a.u.) at each grid point. Eyvals(self: psi4.core.OEProp) → List[float]¶; The y component of the field (in a.u.) at each grid point. Ezvals(self: psi4.core.OEProp) → List[float]¶; The z component of the field (in a.u.) at each grid point. Vvals(self: psi4.core.OEProp) → List[float]¶; The electrostatic potential (in a.u.) at each grid point. add(self: psi4.core.OEProp, arg0: str) → None¶; Append the given task to the list of properties to compute. clear(self: psi4.core.OEProp) → None¶; Clear the list of properties to compute. compute(self: psi4.core.OEProp) → Non",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.OEProp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.OEProp.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.OEProp.html:2614,Modifiability,variab,variables,2614,"→ List[float]¶; The z component of the field (in a.u.) at each grid point. Vvals(self: psi4.core.OEProp) → List[float]¶; The electrostatic potential (in a.u.) at each grid point. add(self: psi4.core.OEProp, arg0: str) → None¶; Append the given task to the list of properties to compute. clear(self: psi4.core.OEProp) → None¶; Clear the list of properties to compute. compute(self: psi4.core.OEProp) → None¶; Compute the properties. set_Da_ao(self: psi4.core.OEProp, Da: psi4.core.Matrix, symmetry: int = 0) → None¶; docstring. set_Da_mo(self: psi4.core.OEProp, arg0: psi4.core.Matrix) → None¶; docstring. set_Da_so(self: psi4.core.OEProp, arg0: psi4.core.Matrix) → None¶; docstring. set_Db_ao(self: psi4.core.OEProp, Db: psi4.core.Matrix, symmetry: int = 0) → None¶; docstring. set_Db_mo(self: psi4.core.OEProp, arg0: psi4.core.Matrix) → None¶; docstring. set_Db_so(self: psi4.core.OEProp, arg0: psi4.core.Matrix) → None¶; docstring. set_names(self: psi4.core.OEProp, arg0: Set[str]) → None¶; Instruct OEProp to save variables under all specified names. The property name will be inserted at every occurrence of {}, like Python format strings. Wipes other names-to-save-by. set_title(self: psi4.core.OEProp, title: str) → None¶; Title OEProp for print purposes. As a side effect, saves variables as title + propertyname and only that. Follow up with side names, if the side effect is undesired,. table of contents. OEProp; OEProp; OEProp.valid_methods; OEProp.Exvals(); OEProp.Eyvals(); OEProp.Ezvals(); OEProp.Vvals(); OEProp.add(); OEProp.clear(); OEProp.compute(); OEProp.set_Da_ao(); OEProp.set_Da_mo(); OEProp.set_Da_so(); OEProp.set_Db_ao(); OEProp.set_Db_mo(); OEProp.set_Db_so(); OEProp.set_names(); OEProp.set_title(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OEProp. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.OEProp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.OEProp.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.OEProp.html:2883,Modifiability,variab,variables,2883,"→ List[float]¶; The z component of the field (in a.u.) at each grid point. Vvals(self: psi4.core.OEProp) → List[float]¶; The electrostatic potential (in a.u.) at each grid point. add(self: psi4.core.OEProp, arg0: str) → None¶; Append the given task to the list of properties to compute. clear(self: psi4.core.OEProp) → None¶; Clear the list of properties to compute. compute(self: psi4.core.OEProp) → None¶; Compute the properties. set_Da_ao(self: psi4.core.OEProp, Da: psi4.core.Matrix, symmetry: int = 0) → None¶; docstring. set_Da_mo(self: psi4.core.OEProp, arg0: psi4.core.Matrix) → None¶; docstring. set_Da_so(self: psi4.core.OEProp, arg0: psi4.core.Matrix) → None¶; docstring. set_Db_ao(self: psi4.core.OEProp, Db: psi4.core.Matrix, symmetry: int = 0) → None¶; docstring. set_Db_mo(self: psi4.core.OEProp, arg0: psi4.core.Matrix) → None¶; docstring. set_Db_so(self: psi4.core.OEProp, arg0: psi4.core.Matrix) → None¶; docstring. set_names(self: psi4.core.OEProp, arg0: Set[str]) → None¶; Instruct OEProp to save variables under all specified names. The property name will be inserted at every occurrence of {}, like Python format strings. Wipes other names-to-save-by. set_title(self: psi4.core.OEProp, title: str) → None¶; Title OEProp for print purposes. As a side effect, saves variables as title + propertyname and only that. Follow up with side names, if the side effect is undesired,. table of contents. OEProp; OEProp; OEProp.valid_methods; OEProp.Exvals(); OEProp.Eyvals(); OEProp.Ezvals(); OEProp.Vvals(); OEProp.add(); OEProp.clear(); OEProp.compute(); OEProp.set_Da_ao(); OEProp.set_Da_mo(); OEProp.set_Da_so(); OEProp.set_Db_ao(); OEProp.set_Db_mo(); OEProp.set_Db_so(); OEProp.set_names(); OEProp.set_title(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OEProp. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.OEProp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.OEProp.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.OEProp.html:611,Usability,clear,clear,611,"﻿. OEProp. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OEProp. OEProp¶. class psi4.core.OEProp¶; Bases: pybind11_object; docstring; Attributes Summary. valid_methods. Methods Summary. Exvals(self); The x component of the field (in a.u.) at each grid point. Eyvals(self); The y component of the field (in a.u.) at each grid point. Ezvals(self); The z component of the field (in a.u.) at each grid point. Vvals(self); The electrostatic potential (in a.u.) at each grid point. add(self, arg0); Append the given task to the list of properties to compute. clear(self); Clear the list of properties to compute. compute(self); Compute the properties. set_Da_ao(self, Da[, symmetry]); docstring. set_Da_mo(self, arg0); docstring. set_Da_so(self, arg0); docstring. set_Db_ao(self, Db[, symmetry]); docstring. set_Db_mo(self, arg0); docstring. set_Db_so(self, arg0); docstring. set_names(self, arg0); Instruct OEProp to save variables under all specified names. set_title(self, title); Title OEProp for print purposes. Attributes Documentation. valid_methods = ['DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES', 'LOWDIN_CHARGES', 'WIBERG_LOWDIN_INDICES', 'MAYER_INDICES', 'MBIS_CHARGES', 'MBIS_VOLUME_RATIOS', 'MO_EXTENTS', 'GRID_FIELD', 'GRID_ESP', 'ESP_AT_NUCLEI', 'NO_OCCUPATIONS']¶. Methods Documentation. Exvals(self: psi4.core.OEProp) → List[float]¶; The x component of the field (in a.u.) at each grid point. Eyvals(self: psi4.core.OEProp) → List[float]¶; The y component of the field (in a.u.) at each grid point. Ezvals(self: psi4.core.OEProp) → List[float]¶; The z component of the field (in a.u.) at each grid point. Vvals(self: psi4.core.OEProp) → List[float]¶; The electrostatic potential (in a.u.) at each grid point. add(self: psi4.core.OEProp, arg0: str) → None¶; Append the given task to the list of properties to compute. clear(self: psi4.core.OEProp) → None¶; Clear the list of properties to compute. compute(self: psi4.core.OEProp) → Non",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.OEProp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.OEProp.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.OEProp.html:624,Usability,Clear,Clear,624,"﻿. OEProp. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OEProp. OEProp¶. class psi4.core.OEProp¶; Bases: pybind11_object; docstring; Attributes Summary. valid_methods. Methods Summary. Exvals(self); The x component of the field (in a.u.) at each grid point. Eyvals(self); The y component of the field (in a.u.) at each grid point. Ezvals(self); The z component of the field (in a.u.) at each grid point. Vvals(self); The electrostatic potential (in a.u.) at each grid point. add(self, arg0); Append the given task to the list of properties to compute. clear(self); Clear the list of properties to compute. compute(self); Compute the properties. set_Da_ao(self, Da[, symmetry]); docstring. set_Da_mo(self, arg0); docstring. set_Da_so(self, arg0); docstring. set_Db_ao(self, Db[, symmetry]); docstring. set_Db_mo(self, arg0); docstring. set_Db_so(self, arg0); docstring. set_names(self, arg0); Instruct OEProp to save variables under all specified names. set_title(self, title); Title OEProp for print purposes. Attributes Documentation. valid_methods = ['DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES', 'LOWDIN_CHARGES', 'WIBERG_LOWDIN_INDICES', 'MAYER_INDICES', 'MBIS_CHARGES', 'MBIS_VOLUME_RATIOS', 'MO_EXTENTS', 'GRID_FIELD', 'GRID_ESP', 'ESP_AT_NUCLEI', 'NO_OCCUPATIONS']¶. Methods Documentation. Exvals(self: psi4.core.OEProp) → List[float]¶; The x component of the field (in a.u.) at each grid point. Eyvals(self: psi4.core.OEProp) → List[float]¶; The y component of the field (in a.u.) at each grid point. Ezvals(self: psi4.core.OEProp) → List[float]¶; The z component of the field (in a.u.) at each grid point. Vvals(self: psi4.core.OEProp) → List[float]¶; The electrostatic potential (in a.u.) at each grid point. add(self: psi4.core.OEProp, arg0: str) → None¶; Append the given task to the list of properties to compute. clear(self: psi4.core.OEProp) → None¶; Clear the list of properties to compute. compute(self: psi4.core.OEProp) → Non",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.OEProp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.OEProp.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.OEProp.html:1884,Usability,clear,clear,1884,". set_Db_so(self, arg0); docstring. set_names(self, arg0); Instruct OEProp to save variables under all specified names. set_title(self, title); Title OEProp for print purposes. Attributes Documentation. valid_methods = ['DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES', 'LOWDIN_CHARGES', 'WIBERG_LOWDIN_INDICES', 'MAYER_INDICES', 'MBIS_CHARGES', 'MBIS_VOLUME_RATIOS', 'MO_EXTENTS', 'GRID_FIELD', 'GRID_ESP', 'ESP_AT_NUCLEI', 'NO_OCCUPATIONS']¶. Methods Documentation. Exvals(self: psi4.core.OEProp) → List[float]¶; The x component of the field (in a.u.) at each grid point. Eyvals(self: psi4.core.OEProp) → List[float]¶; The y component of the field (in a.u.) at each grid point. Ezvals(self: psi4.core.OEProp) → List[float]¶; The z component of the field (in a.u.) at each grid point. Vvals(self: psi4.core.OEProp) → List[float]¶; The electrostatic potential (in a.u.) at each grid point. add(self: psi4.core.OEProp, arg0: str) → None¶; Append the given task to the list of properties to compute. clear(self: psi4.core.OEProp) → None¶; Clear the list of properties to compute. compute(self: psi4.core.OEProp) → None¶; Compute the properties. set_Da_ao(self: psi4.core.OEProp, Da: psi4.core.Matrix, symmetry: int = 0) → None¶; docstring. set_Da_mo(self: psi4.core.OEProp, arg0: psi4.core.Matrix) → None¶; docstring. set_Da_so(self: psi4.core.OEProp, arg0: psi4.core.Matrix) → None¶; docstring. set_Db_ao(self: psi4.core.OEProp, Db: psi4.core.Matrix, symmetry: int = 0) → None¶; docstring. set_Db_mo(self: psi4.core.OEProp, arg0: psi4.core.Matrix) → None¶; docstring. set_Db_so(self: psi4.core.OEProp, arg0: psi4.core.Matrix) → None¶; docstring. set_names(self: psi4.core.OEProp, arg0: Set[str]) → None¶; Instruct OEProp to save variables under all specified names. The property name will be inserted at every occurrence of {}, like Python format strings. Wipes other names-to-save-by. set_title(self: psi4.core.OEProp, title: str) → None¶; Title OEProp for print purposes. As a side effect, saves variables",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.OEProp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.OEProp.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.OEProp.html:1923,Usability,Clear,Clear,1923,"mes(self, arg0); Instruct OEProp to save variables under all specified names. set_title(self, title); Title OEProp for print purposes. Attributes Documentation. valid_methods = ['DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES', 'LOWDIN_CHARGES', 'WIBERG_LOWDIN_INDICES', 'MAYER_INDICES', 'MBIS_CHARGES', 'MBIS_VOLUME_RATIOS', 'MO_EXTENTS', 'GRID_FIELD', 'GRID_ESP', 'ESP_AT_NUCLEI', 'NO_OCCUPATIONS']¶. Methods Documentation. Exvals(self: psi4.core.OEProp) → List[float]¶; The x component of the field (in a.u.) at each grid point. Eyvals(self: psi4.core.OEProp) → List[float]¶; The y component of the field (in a.u.) at each grid point. Ezvals(self: psi4.core.OEProp) → List[float]¶; The z component of the field (in a.u.) at each grid point. Vvals(self: psi4.core.OEProp) → List[float]¶; The electrostatic potential (in a.u.) at each grid point. add(self: psi4.core.OEProp, arg0: str) → None¶; Append the given task to the list of properties to compute. clear(self: psi4.core.OEProp) → None¶; Clear the list of properties to compute. compute(self: psi4.core.OEProp) → None¶; Compute the properties. set_Da_ao(self: psi4.core.OEProp, Da: psi4.core.Matrix, symmetry: int = 0) → None¶; docstring. set_Da_mo(self: psi4.core.OEProp, arg0: psi4.core.Matrix) → None¶; docstring. set_Da_so(self: psi4.core.OEProp, arg0: psi4.core.Matrix) → None¶; docstring. set_Db_ao(self: psi4.core.OEProp, Db: psi4.core.Matrix, symmetry: int = 0) → None¶; docstring. set_Db_mo(self: psi4.core.OEProp, arg0: psi4.core.Matrix) → None¶; docstring. set_Db_so(self: psi4.core.OEProp, arg0: psi4.core.Matrix) → None¶; docstring. set_names(self: psi4.core.OEProp, arg0: Set[str]) → None¶; Instruct OEProp to save variables under all specified names. The property name will be inserted at every occurrence of {}, like Python format strings. Wipes other names-to-save-by. set_title(self: psi4.core.OEProp, title: str) → None¶; Title OEProp for print purposes. As a side effect, saves variables as title + propertyname and only that. Fol",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.OEProp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.OEProp.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.OEProp.html:3138,Usability,clear,clear,3138,"→ List[float]¶; The z component of the field (in a.u.) at each grid point. Vvals(self: psi4.core.OEProp) → List[float]¶; The electrostatic potential (in a.u.) at each grid point. add(self: psi4.core.OEProp, arg0: str) → None¶; Append the given task to the list of properties to compute. clear(self: psi4.core.OEProp) → None¶; Clear the list of properties to compute. compute(self: psi4.core.OEProp) → None¶; Compute the properties. set_Da_ao(self: psi4.core.OEProp, Da: psi4.core.Matrix, symmetry: int = 0) → None¶; docstring. set_Da_mo(self: psi4.core.OEProp, arg0: psi4.core.Matrix) → None¶; docstring. set_Da_so(self: psi4.core.OEProp, arg0: psi4.core.Matrix) → None¶; docstring. set_Db_ao(self: psi4.core.OEProp, Db: psi4.core.Matrix, symmetry: int = 0) → None¶; docstring. set_Db_mo(self: psi4.core.OEProp, arg0: psi4.core.Matrix) → None¶; docstring. set_Db_so(self: psi4.core.OEProp, arg0: psi4.core.Matrix) → None¶; docstring. set_names(self: psi4.core.OEProp, arg0: Set[str]) → None¶; Instruct OEProp to save variables under all specified names. The property name will be inserted at every occurrence of {}, like Python format strings. Wipes other names-to-save-by. set_title(self: psi4.core.OEProp, title: str) → None¶; Title OEProp for print purposes. As a side effect, saves variables as title + propertyname and only that. Follow up with side names, if the side effect is undesired,. table of contents. OEProp; OEProp; OEProp.valid_methods; OEProp.Exvals(); OEProp.Eyvals(); OEProp.Ezvals(); OEProp.Vvals(); OEProp.add(); OEProp.clear(); OEProp.compute(); OEProp.set_Da_ao(); OEProp.set_Da_mo(); OEProp.set_Da_so(); OEProp.set_Db_ao(); OEProp.set_Db_mo(); OEProp.set_Db_so(); OEProp.set_names(); OEProp.set_title(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OEProp. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.OEProp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.OEProp.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.OneBodyAOInt.html:1586,Deployability,update,updated,1586,"﻿. OneBodyAOInt. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OneBodyAOInt. OneBodyAOInt¶. class psi4.core.OneBodyAOInt¶; Bases: pybind11_object; Basis class for all one-electron integrals; Attributes Summary. basis; The basis set on center one. basis1; The basis set on center one. basis2; The basis set on center two. origin; The origin about which the one body ints are being computed. Methods Summary. compute(self, arg0); Compute all integrals over both basis sets, and store them in the provided matrix. compute_shell(self, arg0, arg1); Compute integrals between basis functions in the given shell pair. Attributes Documentation. basis¶; The basis set on center one. basis1¶; The basis set on center one. basis2¶; The basis set on center two. origin¶; The origin about which the one body ints are being computed. Methods Documentation. compute(self: psi4.core.OneBodyAOInt, arg0: List[psi4.core.Matrix]) → None¶; Compute all integrals over both basis sets, and store them in the provided matrix. compute_shell(self: psi4.core.OneBodyAOInt, arg0: int, arg1: int) → None¶; Compute integrals between basis functions in the given shell pair. table of contents. OneBodyAOInt; OneBodyAOInt; OneBodyAOInt.basis; OneBodyAOInt.basis1; OneBodyAOInt.basis2; OneBodyAOInt.origin; OneBodyAOInt.compute(); OneBodyAOInt.compute_shell(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OneBodyAOInt. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.OneBodyAOInt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.OneBodyAOInt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.OneBodySOInt.html:782,Deployability,update,updated,782,"﻿. OneBodySOInt. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OneBodySOInt. OneBodySOInt¶. class psi4.core.OneBodySOInt¶; Bases: pybind11_object; Attributes Summary. basis; The basis set on center one. basis1; The basis set on center one. basis2; The basis set on center two. Attributes Documentation. basis¶; The basis set on center one. basis1¶; The basis set on center one. basis2¶; The basis set on center two. table of contents. OneBodySOInt; OneBodySOInt; OneBodySOInt.basis; OneBodySOInt.basis1; OneBodySOInt.basis2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OneBodySOInt. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.OneBodySOInt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.OneBodySOInt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Options.html:4247,Deployability,update,updated,4247,"on. get_str(self: psi4.core.Options, arg0: str) -> str. get string option. print_global_options(self: psi4.core.Options) → None¶; print the global, cross-module options. print_module_options(self: psi4.core.Options) → None¶; print global and local options prepared for current module. read_globals(self: psi4.core.Options) → bool¶; expert. set_array(self: psi4.core.Options, arg0: str, arg1: str) → None¶; set array option. set_bool(self: psi4.core.Options, arg0: str, arg1: str, arg2: bool) → None¶; set bool option. set_current_module(self: psi4.core.Options, arg0: str) → None¶; sets arg0 (all CAPS) as current module. set_double(self: psi4.core.Options, arg0: str, arg1: str, arg2: float) → None¶; set double option. set_int(self: psi4.core.Options, arg0: str, arg1: str, arg2: int) → None¶; set int option. set_read_globals(self: psi4.core.Options, arg0: bool) → None¶; expert. set_str(self: psi4.core.Options, arg0: str, arg1: str, arg2: str) → None¶; set string option. set_str_i(self: psi4.core.Options, arg0: str, arg1: str, arg2: str) → None¶; set string option. validate_options(self: psi4.core.Options) → None¶; validate options for arg0 module. table of contents. Options; Options; Options.add_array(); Options.add_bool(); Options.add_int(); Options.add_str(); Options.add_str_i(); Options.get_bool(); Options.get_current_module(); Options.get_double(); Options.get_int(); Options.get_int_vector(); Options.get_str(); Options.print_global_options(); Options.print_module_options(); Options.read_globals(); Options.set_array(); Options.set_bool(); Options.set_current_module(); Options.set_double(); Options.set_int(); Options.set_read_globals(); Options.set_str(); Options.set_str_i(); Options.validate_options(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; Options. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Options.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Options.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Options.html:1345,Security,validat,validate,1345,"(self, arg0, arg1, arg2); add string option. add_str_i(self, arg0, arg1, arg2); add string option. get_bool(self, arg0); get boolean option. get_current_module(self); gets current module. get_double(self, arg0); get double option. get_int(self, arg0); get integer option. get_int_vector(self, arg0); get int vector option. get_str(*args, **kwargs); Overloaded function. print_global_options(self); print the global, cross-module options. print_module_options(self); print global and local options prepared for current module. read_globals(self); expert. set_array(self, arg0, arg1); set array option. set_bool(self, arg0, arg1, arg2); set bool option. set_current_module(self, arg0); sets arg0 (all CAPS) as current module. set_double(self, arg0, arg1, arg2); set double option. set_int(self, arg0, arg1, arg2); set int option. set_read_globals(self, arg0); expert. set_str(self, arg0, arg1, arg2); set string option. set_str_i(self, arg0, arg1, arg2); set string option. validate_options(self); validate options for arg0 module. Methods Documentation. add_array(self: psi4.core.Options, arg0: str) → None¶; add array option. add_bool(self: psi4.core.Options, arg0: str, arg1: bool) → None¶; add bool option. add_int(self: psi4.core.Options, arg0: str, arg1: int) → None¶; add int option. add_str(self: psi4.core.Options, arg0: str, arg1: str, arg2: str) → None¶; add string option. add_str_i(self: psi4.core.Options, arg0: str, arg1: str, arg2: str) → None¶; add string option. get_bool(self: psi4.core.Options, arg0: str) → bool¶; get boolean option. get_current_module(self: psi4.core.Options) → str¶; gets current module. get_double(self: psi4.core.Options, arg0: str) → float¶; get double option. get_int(self: psi4.core.Options, arg0: str) → int¶; get integer option. get_int_vector(self: psi4.core.Options, arg0: str) → List[int]¶; get int vector option. get_str(*args, **kwargs)¶; Overloaded function. get_str(self: psi4.core.Options, arg0: str) -> str. get string option. get_str(self: psi4.",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Options.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Options.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Options.html:3450,Security,validat,validate,3450,"on. get_str(self: psi4.core.Options, arg0: str) -> str. get string option. print_global_options(self: psi4.core.Options) → None¶; print the global, cross-module options. print_module_options(self: psi4.core.Options) → None¶; print global and local options prepared for current module. read_globals(self: psi4.core.Options) → bool¶; expert. set_array(self: psi4.core.Options, arg0: str, arg1: str) → None¶; set array option. set_bool(self: psi4.core.Options, arg0: str, arg1: str, arg2: bool) → None¶; set bool option. set_current_module(self: psi4.core.Options, arg0: str) → None¶; sets arg0 (all CAPS) as current module. set_double(self: psi4.core.Options, arg0: str, arg1: str, arg2: float) → None¶; set double option. set_int(self: psi4.core.Options, arg0: str, arg1: str, arg2: int) → None¶; set int option. set_read_globals(self: psi4.core.Options, arg0: bool) → None¶; expert. set_str(self: psi4.core.Options, arg0: str, arg1: str, arg2: str) → None¶; set string option. set_str_i(self: psi4.core.Options, arg0: str, arg1: str, arg2: str) → None¶; set string option. validate_options(self: psi4.core.Options) → None¶; validate options for arg0 module. table of contents. Options; Options; Options.add_array(); Options.add_bool(); Options.add_int(); Options.add_str(); Options.add_str_i(); Options.get_bool(); Options.get_current_module(); Options.get_double(); Options.get_int(); Options.get_int_vector(); Options.get_str(); Options.print_global_options(); Options.print_module_options(); Options.read_globals(); Options.set_array(); Options.set_bool(); Options.set_current_module(); Options.set_double(); Options.set_int(); Options.set_read_globals(); Options.set_str(); Options.set_str_i(); Options.validate_options(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; Options. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Options.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Options.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.options_to_python.html:534,Deployability,update,updated,534,"﻿. options_to_python. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; options_to_python. options_to_python¶. psi4.core.options_to_python(arg0: str) → dict¶; Get dictionary of whether options of module have changed. table of contents. options_to_python; options_to_python(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; options_to_python. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.options_to_python.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.options_to_python.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.option_exists_in_module.html:581,Deployability,update,updated,581,"﻿. option_exists_in_module. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; option_exists_in_module. option_exists_in_module¶. psi4.core.option_exists_in_module(module: str, key: str) → bool¶; Whether keyword key is a valid keyword for module. table of contents. option_exists_in_module; option_exists_in_module(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; option_exists_in_module. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.option_exists_in_module.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.option_exists_in_module.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.OrbitalSpace.html:1776,Availability,toler,tolerance,1776,"dimensions. evals(self); Corresponding eigenvalues of the C matrix. id(self); Unique identifier. integral(self); The integral factory used to create C. name(self); Name of the orbital space. nirrep(self); Returns number of irreps. print_out(self); Print information about the orbital space to the output file. Methods Documentation. C(self: psi4.core.OrbitalSpace) → psi4.core.Matrix¶; MO coefficient matrix, AO->MO or SO->MO transformation matrix. basisset(self: psi4.core.OrbitalSpace) → psi4.core.BasisSet¶; The AO basis set used to create C. static build_cabs_space(orb_space: psi4.core.OrbitalSpace, ri_space: psi4.core.OrbitalSpace, linear_tol: float) → psi4.core.OrbitalSpace¶; Given two spaces, it projects out one space from the other and returns the new spaces The first argument (orb_space) is the space to project out. The returned space will be orthogonal to this The second argument (ri_space) is the space that is being projected on. The returned space = this space - orb_space The third argument is the tolerance for linear dependencies. static build_ri_space(molecule: psi4.core.Molecule, obs_key: str, aux_key: str, lindep_tol: float) → psi4.core.OrbitalSpace¶; Given two basis sets, it merges the basis sets and then constructs an orthogonalized space with the same span. Linearly dependent orbitals are thrown out. The first argument, molecule, is the molecule to construct the basis for The second argument, obs_key, is the option keyword for orbital basis set ‘BASIS’ The third argument, aux_key, is the option keyword for auxiliery basis set ‘DF_BASIS_MP2’ The fourth argument, lindep_tol, is the tolerance for linear dependencies. dim(self: psi4.core.OrbitalSpace) → psi4.core.Dimension¶; MO dimensions. evals(self: psi4.core.OrbitalSpace) → psi4.core.Vector¶; Corresponding eigenvalues of the C matrix. id(self: psi4.core.OrbitalSpace) → str¶; Unique identifier. integral(self: psi4.core.OrbitalSpace) → psi4.core.IntegralFactory¶; The integral factory used to create C. name(",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.OrbitalSpace.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.OrbitalSpace.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.OrbitalSpace.html:2377,Availability,toler,tolerance,2377,".core.BasisSet¶; The AO basis set used to create C. static build_cabs_space(orb_space: psi4.core.OrbitalSpace, ri_space: psi4.core.OrbitalSpace, linear_tol: float) → psi4.core.OrbitalSpace¶; Given two spaces, it projects out one space from the other and returns the new spaces The first argument (orb_space) is the space to project out. The returned space will be orthogonal to this The second argument (ri_space) is the space that is being projected on. The returned space = this space - orb_space The third argument is the tolerance for linear dependencies. static build_ri_space(molecule: psi4.core.Molecule, obs_key: str, aux_key: str, lindep_tol: float) → psi4.core.OrbitalSpace¶; Given two basis sets, it merges the basis sets and then constructs an orthogonalized space with the same span. Linearly dependent orbitals are thrown out. The first argument, molecule, is the molecule to construct the basis for The second argument, obs_key, is the option keyword for orbital basis set ‘BASIS’ The third argument, aux_key, is the option keyword for auxiliery basis set ‘DF_BASIS_MP2’ The fourth argument, lindep_tol, is the tolerance for linear dependencies. dim(self: psi4.core.OrbitalSpace) → psi4.core.Dimension¶; MO dimensions. evals(self: psi4.core.OrbitalSpace) → psi4.core.Vector¶; Corresponding eigenvalues of the C matrix. id(self: psi4.core.OrbitalSpace) → str¶; Unique identifier. integral(self: psi4.core.OrbitalSpace) → psi4.core.IntegralFactory¶; The integral factory used to create C. name(self: psi4.core.OrbitalSpace) → str¶; Name of the orbital space. nirrep(self: psi4.core.OrbitalSpace) → int¶; Returns number of irreps. print_out(self: psi4.core.OrbitalSpace) → None¶; Print information about the orbital space to the output file. table of contents. OrbitalSpace; OrbitalSpace; OrbitalSpace.C(); OrbitalSpace.basisset(); OrbitalSpace.build_cabs_space(); OrbitalSpace.build_ri_space(); OrbitalSpace.dim(); OrbitalSpace.evals(); OrbitalSpace.id(); OrbitalSpace.integral(); Orbita",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.OrbitalSpace.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.OrbitalSpace.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.OrbitalSpace.html:3514,Deployability,update,updated,3514,"eturned space will be orthogonal to this The second argument (ri_space) is the space that is being projected on. The returned space = this space - orb_space The third argument is the tolerance for linear dependencies. static build_ri_space(molecule: psi4.core.Molecule, obs_key: str, aux_key: str, lindep_tol: float) → psi4.core.OrbitalSpace¶; Given two basis sets, it merges the basis sets and then constructs an orthogonalized space with the same span. Linearly dependent orbitals are thrown out. The first argument, molecule, is the molecule to construct the basis for The second argument, obs_key, is the option keyword for orbital basis set ‘BASIS’ The third argument, aux_key, is the option keyword for auxiliery basis set ‘DF_BASIS_MP2’ The fourth argument, lindep_tol, is the tolerance for linear dependencies. dim(self: psi4.core.OrbitalSpace) → psi4.core.Dimension¶; MO dimensions. evals(self: psi4.core.OrbitalSpace) → psi4.core.Vector¶; Corresponding eigenvalues of the C matrix. id(self: psi4.core.OrbitalSpace) → str¶; Unique identifier. integral(self: psi4.core.OrbitalSpace) → psi4.core.IntegralFactory¶; The integral factory used to create C. name(self: psi4.core.OrbitalSpace) → str¶; Name of the orbital space. nirrep(self: psi4.core.OrbitalSpace) → int¶; Returns number of irreps. print_out(self: psi4.core.OrbitalSpace) → None¶; Print information about the orbital space to the output file. table of contents. OrbitalSpace; OrbitalSpace; OrbitalSpace.C(); OrbitalSpace.basisset(); OrbitalSpace.build_cabs_space(); OrbitalSpace.build_ri_space(); OrbitalSpace.dim(); OrbitalSpace.evals(); OrbitalSpace.id(); OrbitalSpace.integral(); OrbitalSpace.name(); OrbitalSpace.nirrep(); OrbitalSpace.print_out(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OrbitalSpace. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.OrbitalSpace.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.OrbitalSpace.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.OrbitalSpace.html:1797,Integrability,depend,dependencies,1797,"dimensions. evals(self); Corresponding eigenvalues of the C matrix. id(self); Unique identifier. integral(self); The integral factory used to create C. name(self); Name of the orbital space. nirrep(self); Returns number of irreps. print_out(self); Print information about the orbital space to the output file. Methods Documentation. C(self: psi4.core.OrbitalSpace) → psi4.core.Matrix¶; MO coefficient matrix, AO->MO or SO->MO transformation matrix. basisset(self: psi4.core.OrbitalSpace) → psi4.core.BasisSet¶; The AO basis set used to create C. static build_cabs_space(orb_space: psi4.core.OrbitalSpace, ri_space: psi4.core.OrbitalSpace, linear_tol: float) → psi4.core.OrbitalSpace¶; Given two spaces, it projects out one space from the other and returns the new spaces The first argument (orb_space) is the space to project out. The returned space will be orthogonal to this The second argument (ri_space) is the space that is being projected on. The returned space = this space - orb_space The third argument is the tolerance for linear dependencies. static build_ri_space(molecule: psi4.core.Molecule, obs_key: str, aux_key: str, lindep_tol: float) → psi4.core.OrbitalSpace¶; Given two basis sets, it merges the basis sets and then constructs an orthogonalized space with the same span. Linearly dependent orbitals are thrown out. The first argument, molecule, is the molecule to construct the basis for The second argument, obs_key, is the option keyword for orbital basis set ‘BASIS’ The third argument, aux_key, is the option keyword for auxiliery basis set ‘DF_BASIS_MP2’ The fourth argument, lindep_tol, is the tolerance for linear dependencies. dim(self: psi4.core.OrbitalSpace) → psi4.core.Dimension¶; MO dimensions. evals(self: psi4.core.OrbitalSpace) → psi4.core.Vector¶; Corresponding eigenvalues of the C matrix. id(self: psi4.core.OrbitalSpace) → str¶; Unique identifier. integral(self: psi4.core.OrbitalSpace) → psi4.core.IntegralFactory¶; The integral factory used to create C. name(",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.OrbitalSpace.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.OrbitalSpace.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.OrbitalSpace.html:2057,Integrability,depend,dependent,2057,"thods Documentation. C(self: psi4.core.OrbitalSpace) → psi4.core.Matrix¶; MO coefficient matrix, AO->MO or SO->MO transformation matrix. basisset(self: psi4.core.OrbitalSpace) → psi4.core.BasisSet¶; The AO basis set used to create C. static build_cabs_space(orb_space: psi4.core.OrbitalSpace, ri_space: psi4.core.OrbitalSpace, linear_tol: float) → psi4.core.OrbitalSpace¶; Given two spaces, it projects out one space from the other and returns the new spaces The first argument (orb_space) is the space to project out. The returned space will be orthogonal to this The second argument (ri_space) is the space that is being projected on. The returned space = this space - orb_space The third argument is the tolerance for linear dependencies. static build_ri_space(molecule: psi4.core.Molecule, obs_key: str, aux_key: str, lindep_tol: float) → psi4.core.OrbitalSpace¶; Given two basis sets, it merges the basis sets and then constructs an orthogonalized space with the same span. Linearly dependent orbitals are thrown out. The first argument, molecule, is the molecule to construct the basis for The second argument, obs_key, is the option keyword for orbital basis set ‘BASIS’ The third argument, aux_key, is the option keyword for auxiliery basis set ‘DF_BASIS_MP2’ The fourth argument, lindep_tol, is the tolerance for linear dependencies. dim(self: psi4.core.OrbitalSpace) → psi4.core.Dimension¶; MO dimensions. evals(self: psi4.core.OrbitalSpace) → psi4.core.Vector¶; Corresponding eigenvalues of the C matrix. id(self: psi4.core.OrbitalSpace) → str¶; Unique identifier. integral(self: psi4.core.OrbitalSpace) → psi4.core.IntegralFactory¶; The integral factory used to create C. name(self: psi4.core.OrbitalSpace) → str¶; Name of the orbital space. nirrep(self: psi4.core.OrbitalSpace) → int¶; Returns number of irreps. print_out(self: psi4.core.OrbitalSpace) → None¶; Print information about the orbital space to the output file. table of contents. OrbitalSpace; OrbitalSpace; OrbitalSpace.C();",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.OrbitalSpace.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.OrbitalSpace.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.OrbitalSpace.html:2398,Integrability,depend,dependencies,2398,".core.BasisSet¶; The AO basis set used to create C. static build_cabs_space(orb_space: psi4.core.OrbitalSpace, ri_space: psi4.core.OrbitalSpace, linear_tol: float) → psi4.core.OrbitalSpace¶; Given two spaces, it projects out one space from the other and returns the new spaces The first argument (orb_space) is the space to project out. The returned space will be orthogonal to this The second argument (ri_space) is the space that is being projected on. The returned space = this space - orb_space The third argument is the tolerance for linear dependencies. static build_ri_space(molecule: psi4.core.Molecule, obs_key: str, aux_key: str, lindep_tol: float) → psi4.core.OrbitalSpace¶; Given two basis sets, it merges the basis sets and then constructs an orthogonalized space with the same span. Linearly dependent orbitals are thrown out. The first argument, molecule, is the molecule to construct the basis for The second argument, obs_key, is the option keyword for orbital basis set ‘BASIS’ The third argument, aux_key, is the option keyword for auxiliery basis set ‘DF_BASIS_MP2’ The fourth argument, lindep_tol, is the tolerance for linear dependencies. dim(self: psi4.core.OrbitalSpace) → psi4.core.Dimension¶; MO dimensions. evals(self: psi4.core.OrbitalSpace) → psi4.core.Vector¶; Corresponding eigenvalues of the C matrix. id(self: psi4.core.OrbitalSpace) → str¶; Unique identifier. integral(self: psi4.core.OrbitalSpace) → psi4.core.IntegralFactory¶; The integral factory used to create C. name(self: psi4.core.OrbitalSpace) → str¶; Name of the orbital space. nirrep(self: psi4.core.OrbitalSpace) → int¶; Returns number of irreps. print_out(self: psi4.core.OrbitalSpace) → None¶; Print information about the orbital space to the output file. table of contents. OrbitalSpace; OrbitalSpace; OrbitalSpace.C(); OrbitalSpace.basisset(); OrbitalSpace.build_cabs_space(); OrbitalSpace.build_ri_space(); OrbitalSpace.dim(); OrbitalSpace.evals(); OrbitalSpace.id(); OrbitalSpace.integral(); Orbita",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.OrbitalSpace.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.OrbitalSpace.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.outfile_name.html:468,Deployability,update,updated,468,"﻿. outfile_name. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; outfile_name. outfile_name¶. psi4.core.outfile_name() → str¶; Returns the name of the output file. table of contents. outfile_name; outfile_name(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; outfile_name. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.outfile_name.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.outfile_name.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.OverlapInt.html:462,Deployability,update,updated,462,"﻿. OverlapInt. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OverlapInt. OverlapInt¶. class psi4.core.OverlapInt¶; Bases: OneBodyAOInt; Computes overlap integrals. table of contents. OverlapInt; OverlapInt. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OverlapInt. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.OverlapInt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.OverlapInt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.PetiteList.html:974,Deployability,update,updated,974,"﻿. PetiteList. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; PetiteList. PetiteList¶. class psi4.core.PetiteList¶; Bases: pybind11_object; Handles symmetry transformations; Methods Summary. aotoso(self); Return the AO->SO coefficient matrix. print(self, arg0); Print to outfile. sotoao(self); Return the SO->AO coefficient matrix. Methods Documentation. aotoso(self: psi4.core.PetiteList) → psi4.core.Matrix¶; Return the AO->SO coefficient matrix. print(self: psi4.core.PetiteList, arg0: str) → None¶; Print to outfile. sotoao(self: psi4.core.PetiteList) → psi4.core.Matrix¶; Return the SO->AO coefficient matrix. table of contents. PetiteList; PetiteList; PetiteList.aotoso(); PetiteList.print(); PetiteList.sotoao(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; PetiteList. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.PetiteList.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.PetiteList.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.plugin.html:509,Deployability,update,updated,509,"﻿. plugin. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plugin. plugin¶. psi4.core.plugin(arg0: str, arg1: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Call the plugin of name arg0. Returns the plugin code result. table of contents. plugin; plugin(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plugin. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.plugin.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.plugin.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.plugin.html:3,Modifiability,plugin,plugin,3,"﻿. plugin. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plugin. plugin¶. psi4.core.plugin(arg0: str, arg1: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Call the plugin of name arg0. Returns the plugin code result. table of contents. plugin; plugin(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plugin. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.plugin.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.plugin.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.plugin.html:115,Modifiability,plugin,plugin,115,"﻿. plugin. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plugin. plugin¶. psi4.core.plugin(arg0: str, arg1: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Call the plugin of name arg0. Returns the plugin code result. table of contents. plugin; plugin(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plugin. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.plugin.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.plugin.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.plugin.html:123,Modifiability,plugin,plugin,123,"﻿. plugin. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plugin. plugin¶. psi4.core.plugin(arg0: str, arg1: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Call the plugin of name arg0. Returns the plugin code result. table of contents. plugin; plugin(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plugin. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.plugin.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.plugin.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.plugin.html:142,Modifiability,plugin,plugin,142,"﻿. plugin. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plugin. plugin¶. psi4.core.plugin(arg0: str, arg1: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Call the plugin of name arg0. Returns the plugin code result. table of contents. plugin; plugin(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plugin. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.plugin.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.plugin.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.plugin.html:226,Modifiability,plugin,plugin,226,"﻿. plugin. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plugin. plugin¶. psi4.core.plugin(arg0: str, arg1: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Call the plugin of name arg0. Returns the plugin code result. table of contents. plugin; plugin(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plugin. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.plugin.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.plugin.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.plugin.html:259,Modifiability,plugin,plugin,259,"﻿. plugin. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plugin. plugin¶. psi4.core.plugin(arg0: str, arg1: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Call the plugin of name arg0. Returns the plugin code result. table of contents. plugin; plugin(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plugin. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.plugin.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.plugin.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.plugin.html:298,Modifiability,plugin,plugin,298,"﻿. plugin. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plugin. plugin¶. psi4.core.plugin(arg0: str, arg1: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Call the plugin of name arg0. Returns the plugin code result. table of contents. plugin; plugin(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plugin. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.plugin.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.plugin.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.plugin.html:306,Modifiability,plugin,plugin,306,"﻿. plugin. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plugin. plugin¶. psi4.core.plugin(arg0: str, arg1: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Call the plugin of name arg0. Returns the plugin code result. table of contents. plugin; plugin(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plugin. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.plugin.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.plugin.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.plugin.html:454,Modifiability,plugin,plugin,454,"﻿. plugin. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plugin. plugin¶. psi4.core.plugin(arg0: str, arg1: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Call the plugin of name arg0. Returns the plugin code result. table of contents. plugin; plugin(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plugin. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.plugin.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.plugin.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.plugin_close.html:472,Deployability,update,updated,472,"﻿. plugin_close. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plugin_close. plugin_close¶. psi4.core.plugin_close(arg0: str) → None¶; Close the plugin of name arg0. table of contents. plugin_close; plugin_close(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plugin_close. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.plugin_close.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.plugin_close.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.plugin_close.html:203,Modifiability,plugin,plugin,203,"﻿. plugin_close. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plugin_close. plugin_close¶. psi4.core.plugin_close(arg0: str) → None¶; Close the plugin of name arg0. table of contents. plugin_close; plugin_close(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plugin_close. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.plugin_close.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.plugin_close.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.plugin_close_all.html:484,Deployability,update,updated,484,"﻿. plugin_close_all. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plugin_close_all. plugin_close_all¶. psi4.core.plugin_close_all() → None¶; Close all open plugins. table of contents. plugin_close_all; plugin_close_all(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plugin_close_all. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.plugin_close_all.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.plugin_close_all.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.plugin_close_all.html:215,Modifiability,plugin,plugins,215,"﻿. plugin_close_all. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plugin_close_all. plugin_close_all¶. psi4.core.plugin_close_all() → None¶; Close all open plugins. table of contents. plugin_close_all; plugin_close_all(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plugin_close_all. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.plugin_close_all.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.plugin_close_all.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.plugin_load.html:522,Deployability,update,updated,522,"﻿. plugin_load. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plugin_load. plugin_load¶. psi4.core.plugin_load(arg0: str) → int¶; Load the plugin of name arg0. Returns 0 if not loaded, 1 if loaded, 2 if already loaded. table of contents. plugin_load; plugin_load(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plugin_load. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.plugin_load.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.plugin_load.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.plugin_load.html:197,Modifiability,plugin,plugin,197,"﻿. plugin_load. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plugin_load. plugin_load¶. psi4.core.plugin_load(arg0: str) → int¶; Load the plugin of name arg0. Returns 0 if not loaded, 1 if loaded, 2 if already loaded. table of contents. plugin_load; plugin_load(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plugin_load. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.plugin_load.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.plugin_load.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.plugin_load.html:188,Performance,Load,Load,188,"﻿. plugin_load. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plugin_load. plugin_load¶. psi4.core.plugin_load(arg0: str) → int¶; Load the plugin of name arg0. Returns 0 if not loaded, 1 if loaded, 2 if already loaded. table of contents. plugin_load; plugin_load(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plugin_load. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.plugin_load.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.plugin_load.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.plugin_load.html:235,Performance,load,loaded,235,"﻿. plugin_load. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plugin_load. plugin_load¶. psi4.core.plugin_load(arg0: str) → int¶; Load the plugin of name arg0. Returns 0 if not loaded, 1 if loaded, 2 if already loaded. table of contents. plugin_load; plugin_load(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plugin_load. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.plugin_load.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.plugin_load.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.plugin_load.html:248,Performance,load,loaded,248,"﻿. plugin_load. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plugin_load. plugin_load¶. psi4.core.plugin_load(arg0: str) → int¶; Load the plugin of name arg0. Returns 0 if not loaded, 1 if loaded, 2 if already loaded. table of contents. plugin_load; plugin_load(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plugin_load. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.plugin_load.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.plugin_load.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.plugin_load.html:269,Performance,load,loaded,269,"﻿. plugin_load. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plugin_load. plugin_load¶. psi4.core.plugin_load(arg0: str) → int¶; Load the plugin of name arg0. Returns 0 if not loaded, 1 if loaded, 2 if already loaded. table of contents. plugin_load; plugin_load(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plugin_load. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.plugin_load.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.plugin_load.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.PMLocalizer.html:481,Deployability,update,updated,481,"﻿. PMLocalizer. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; PMLocalizer. PMLocalizer¶. class psi4.core.PMLocalizer¶; Bases: Localizer; Performs Pipek-Mezey orbital localization. table of contents. PMLocalizer; PMLocalizer. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; PMLocalizer. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.PMLocalizer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.PMLocalizer.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.PMLocalizer.html:195,Performance,Perform,Performs,195,"﻿. PMLocalizer. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; PMLocalizer. PMLocalizer¶. class psi4.core.PMLocalizer¶; Bases: Localizer; Performs Pipek-Mezey orbital localization. table of contents. PMLocalizer; PMLocalizer. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; PMLocalizer. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.PMLocalizer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.PMLocalizer.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.PointFunctions.html:1803,Deployability,update,updated,1803,"﻿. PointFunctions. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; PointFunctions. PointFunctions¶. class psi4.core.PointFunctions¶; Bases: BasisFunctions; docstring; Methods Summary. ansatz(self); docstring. compute_points(self, block[, force_compute]); docstring. orbital_values(self); docstring. point_values(self); docstring. print_out(self[, out_fname, print]); docstring. set_ansatz(self, arg0); docstring. set_pointers(*args, **kwargs); Overloaded function. Methods Documentation. ansatz(self: psi4.core.PointFunctions) → int¶; docstring. compute_points(self: psi4.core.PointFunctions, block: psi4.core.BlockOPoints, force_compute: bool = True) → None¶; docstring. orbital_values(self: psi4.core.PointFunctions) → Dict[str, psi4.core.Matrix]¶; docstring. point_values(self: psi4.core.PointFunctions) → Dict[str, psi4.core.Vector]¶; docstring. print_out(self: psi4.core.PointFunctions, out_fname: str = 'outfile', print: int = 2) → None¶; docstring. set_ansatz(self: psi4.core.PointFunctions, arg0: int) → None¶; docstring. set_pointers(*args, **kwargs)¶; Overloaded function. set_pointers(self: psi4.core.PointFunctions, arg0: psi4.core.Matrix) -> None. docstring. set_pointers(self: psi4.core.PointFunctions, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) -> None. docstring. table of contents. PointFunctions; PointFunctions; PointFunctions.ansatz(); PointFunctions.compute_points(); PointFunctions.orbital_values(); PointFunctions.point_values(); PointFunctions.print_out(); PointFunctions.set_ansatz(); PointFunctions.set_pointers(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; PointFunctions. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.PointFunctions.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.PointFunctions.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.PointGroup.html:1390,Deployability,update,updated,1390,"﻿. PointGroup. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; PointGroup. PointGroup¶. class psi4.core.PointGroup¶; Bases: pybind11_object; Contains information about the point group; Methods Summary. bits(self); Return the bit representation of the point group. char_table(self); Return the CharacterTable of the point group. full_name(self); Return the Schoenflies symbol with direction. order(self); Return the order of the point group. symbol(self); Returns Schoenflies symbol for point group. Methods Documentation. bits(self: psi4.core.PointGroup) → int¶; Return the bit representation of the point group. char_table(self: psi4.core.PointGroup) → psi4.core.CharacterTable¶; Return the CharacterTable of the point group. full_name(self: psi4.core.PointGroup) → str¶; Return the Schoenflies symbol with direction. order(self: psi4.core.PointGroup) → int¶; Return the order of the point group. symbol(self: psi4.core.PointGroup) → str¶; Returns Schoenflies symbol for point group. table of contents. PointGroup; PointGroup; PointGroup.bits(); PointGroup.char_table(); PointGroup.full_name(); PointGroup.order(); PointGroup.symbol(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; PointGroup. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.PointGroup.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.PointGroup.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.PotentialInt.html:478,Deployability,update,updated,478,"﻿. PotentialInt. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; PotentialInt. PotentialInt¶. class psi4.core.PotentialInt¶; Bases: OneBodyAOInt; Computes potential integrals. table of contents. PotentialInt; PotentialInt. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; PotentialInt. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.PotentialInt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.PotentialInt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.prepare_options_for_module.html:637,Deployability,update,updated,637,"﻿. prepare_options_for_module. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; prepare_options_for_module. prepare_options_for_module¶. psi4.core.prepare_options_for_module(name: str) → None¶; Sets up the options library to return options pertaining to the module or plugin name (e.g. SCF). table of contents. prepare_options_for_module; prepare_options_for_module(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; prepare_options_for_module. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.prepare_options_for_module.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.prepare_options_for_module.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.prepare_options_for_module.html:323,Modifiability,plugin,plugin,323,"﻿. prepare_options_for_module. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; prepare_options_for_module. prepare_options_for_module¶. psi4.core.prepare_options_for_module(name: str) → None¶; Sets up the options library to return options pertaining to the module or plugin name (e.g. SCF). table of contents. prepare_options_for_module; prepare_options_for_module(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; prepare_options_for_module. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.prepare_options_for_module.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.prepare_options_for_module.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.PrimitiveType.html:818,Deployability,update,updated,818,"﻿. PrimitiveType. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; PrimitiveType. PrimitiveType¶. class psi4.core.PrimitiveType¶; Bases: pybind11_object; May be Normalized or Unnormalized; Members:. Normalized; Unnormalized. Attributes Summary. Normalized. Unnormalized. name. value. Attributes Documentation. Normalized = <PrimitiveType.Normalized: 0>¶. Unnormalized = <PrimitiveType.Unnormalized: 1>¶. name¶. value¶. table of contents. PrimitiveType; PrimitiveType; PrimitiveType.Normalized; PrimitiveType.Unnormalized; PrimitiveType.name; PrimitiveType.value. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; PrimitiveType. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.PrimitiveType.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.PrimitiveType.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.print_global_options.html:562,Deployability,update,updated,562,"﻿. print_global_options. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; print_global_options. print_global_options¶. psi4.core.print_global_options() → None¶; Prints the currently set global (all modules) options to the output file. table of contents. print_global_options; print_global_options(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; print_global_options. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.print_global_options.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.print_global_options.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.print_options.html:517,Deployability,update,updated,517,"﻿. print_options. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; print_options. print_options¶. psi4.core.print_options() → None¶; Prints the currently set options (to the output file) for the current module. table of contents. print_options; print_options(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; print_options. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.print_options.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.print_options.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.print_out.html:486,Deployability,update,updated,486,"﻿. print_out. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; print_out. print_out¶. psi4.core.print_out(arg0: str) → None¶; Prints a string (using sprintf-like notation) to the output file. table of contents. print_out; print_out(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; print_out. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.print_out.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.print_out.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.print_variables.html:528,Deployability,update,updated,528,"﻿. print_variables. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; print_variables. print_variables¶. psi4.core.print_variables() → None¶; Prints to output file all QCVariables that have been set in global memory. table of contents. print_variables; print_variables(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; print_variables. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.print_variables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.print_variables.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Prop.html:406,Deployability,update,updated,406,"﻿. Prop. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; Prop. Prop¶. class psi4.core.Prop¶; Bases: pybind11_object; docstring. table of contents. Prop; Prop. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; Prop. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Prop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Prop.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.ProtoIntVector.html:465,Deployability,update,updated,465,"﻿. ProtoIntVector. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ProtoIntVector. ProtoIntVector¶. class psi4.core.ProtoIntVector¶; Bases: pybind11_object. table of contents. ProtoIntVector; ProtoIntVector. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ProtoIntVector. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.ProtoIntVector.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.ProtoIntVector.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.ProtoVector.html:444,Deployability,update,updated,444,"﻿. ProtoVector. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ProtoVector. ProtoVector¶. class psi4.core.ProtoVector¶; Bases: pybind11_object. table of contents. ProtoVector; ProtoVector. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ProtoVector. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.ProtoVector.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.ProtoVector.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.psimrcc.html:489,Deployability,update,updated,489,"﻿. psimrcc. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; psimrcc. psimrcc¶. psi4.core.psimrcc(arg0: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Runs the multireference coupled cluster code. table of contents. psimrcc; psimrcc(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; psimrcc. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.psimrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.psimrcc.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.psio_entry.html:448,Deployability,update,updated,448,"﻿. psio_entry. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; psio_entry. psio_entry¶. class psi4.core.psio_entry¶; Bases: pybind11_object; docstring. table of contents. psio_entry; psio_entry. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; psio_entry. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.psio_entry.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.psio_entry.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.PsiReturnType.html:244,Availability,Failure,Failure,244,"﻿. PsiReturnType. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; PsiReturnType. PsiReturnType¶. class psi4.core.PsiReturnType¶; Bases: pybind11_object; Return status.; Members:. Success; Failure. Attributes Summary. Failure. Success. name. value. Attributes Documentation. Failure = <PsiReturnType.Failure: 1>¶. Success = <PsiReturnType.Success: 0>¶. name¶. value¶. table of contents. PsiReturnType; PsiReturnType; PsiReturnType.Failure; PsiReturnType.Success; PsiReturnType.name; PsiReturnType.value. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; PsiReturnType. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.PsiReturnType.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.PsiReturnType.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.PsiReturnType.html:273,Availability,Failure,Failure,273,"﻿. PsiReturnType. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; PsiReturnType. PsiReturnType¶. class psi4.core.PsiReturnType¶; Bases: pybind11_object; Return status.; Members:. Success; Failure. Attributes Summary. Failure. Success. name. value. Attributes Documentation. Failure = <PsiReturnType.Failure: 1>¶. Success = <PsiReturnType.Success: 0>¶. name¶. value¶. table of contents. PsiReturnType; PsiReturnType; PsiReturnType.Failure; PsiReturnType.Success; PsiReturnType.name; PsiReturnType.value. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; PsiReturnType. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.PsiReturnType.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.PsiReturnType.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.PsiReturnType.html:330,Availability,Failure,Failure,330,"﻿. PsiReturnType. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; PsiReturnType. PsiReturnType¶. class psi4.core.PsiReturnType¶; Bases: pybind11_object; Return status.; Members:. Success; Failure. Attributes Summary. Failure. Success. name. value. Attributes Documentation. Failure = <PsiReturnType.Failure: 1>¶. Success = <PsiReturnType.Success: 0>¶. name¶. value¶. table of contents. PsiReturnType; PsiReturnType; PsiReturnType.Failure; PsiReturnType.Success; PsiReturnType.name; PsiReturnType.value. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; PsiReturnType. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.PsiReturnType.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.PsiReturnType.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.PsiReturnType.html:355,Availability,Failure,Failure,355,"﻿. PsiReturnType. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; PsiReturnType. PsiReturnType¶. class psi4.core.PsiReturnType¶; Bases: pybind11_object; Return status.; Members:. Success; Failure. Attributes Summary. Failure. Success. name. value. Attributes Documentation. Failure = <PsiReturnType.Failure: 1>¶. Success = <PsiReturnType.Success: 0>¶. name¶. value¶. table of contents. PsiReturnType; PsiReturnType; PsiReturnType.Failure; PsiReturnType.Success; PsiReturnType.name; PsiReturnType.value. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; PsiReturnType. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.PsiReturnType.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.PsiReturnType.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.PsiReturnType.html:486,Availability,Failure,Failure,486,"﻿. PsiReturnType. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; PsiReturnType. PsiReturnType¶. class psi4.core.PsiReturnType¶; Bases: pybind11_object; Return status.; Members:. Success; Failure. Attributes Summary. Failure. Success. name. value. Attributes Documentation. Failure = <PsiReturnType.Failure: 1>¶. Success = <PsiReturnType.Success: 0>¶. name¶. value¶. table of contents. PsiReturnType; PsiReturnType; PsiReturnType.Failure; PsiReturnType.Success; PsiReturnType.name; PsiReturnType.value. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; PsiReturnType. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.PsiReturnType.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.PsiReturnType.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.PsiReturnType.html:759,Deployability,update,updated,759,"﻿. PsiReturnType. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; PsiReturnType. PsiReturnType¶. class psi4.core.PsiReturnType¶; Bases: pybind11_object; Return status.; Members:. Success; Failure. Attributes Summary. Failure. Success. name. value. Attributes Documentation. Failure = <PsiReturnType.Failure: 1>¶. Success = <PsiReturnType.Success: 0>¶. name¶. value¶. table of contents. PsiReturnType; PsiReturnType; PsiReturnType.Failure; PsiReturnType.Success; PsiReturnType.name; PsiReturnType.value. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; PsiReturnType. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.PsiReturnType.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.PsiReturnType.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.psi_top_srcdir.html:486,Deployability,update,updated,486,"﻿. psi_top_srcdir. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; psi_top_srcdir. psi_top_srcdir¶. psi4.core.psi_top_srcdir() → str¶; Returns the location of the source code. table of contents. psi_top_srcdir; psi_top_srcdir(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; psi_top_srcdir. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.psi_top_srcdir.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.psi_top_srcdir.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.QuadrupoleInt.html:486,Deployability,update,updated,486,"﻿. QuadrupoleInt. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; QuadrupoleInt. QuadrupoleInt¶. class psi4.core.QuadrupoleInt¶; Bases: OneBodyAOInt; Computes quadrupole integrals. table of contents. QuadrupoleInt; QuadrupoleInt. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; QuadrupoleInt. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.QuadrupoleInt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.QuadrupoleInt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.reopen_outfile.html:471,Deployability,update,updated,471,"﻿. reopen_outfile. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; reopen_outfile. reopen_outfile¶. psi4.core.reopen_outfile() → None¶; Reopens the output file. table of contents. reopen_outfile; reopen_outfile(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; reopen_outfile. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.reopen_outfile.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.reopen_outfile.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.revoke_global_option_changed.html:911,Deployability,update,updated,911,"﻿. revoke_global_option_changed. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; revoke_global_option_changed. revoke_global_option_changed¶. psi4.core.revoke_global_option_changed(key: str) → None¶; Clear the touched status for keyword key at global (all-module) scope. Sets the has_changed attribute in the global options scope to false. Used in python driver when a function sets the value of an option. Before the function exits, this command is called on the option so that has_changed reflects whether the user (not the program) has touched the option. table of contents. revoke_global_option_changed; revoke_global_option_changed(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; revoke_global_option_changed. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.revoke_global_option_changed.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.revoke_global_option_changed.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.revoke_global_option_changed.html:256,Usability,Clear,Clear,256,"﻿. revoke_global_option_changed. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; revoke_global_option_changed. revoke_global_option_changed¶. psi4.core.revoke_global_option_changed(key: str) → None¶; Clear the touched status for keyword key at global (all-module) scope. Sets the has_changed attribute in the global options scope to false. Used in python driver when a function sets the value of an option. Before the function exits, this command is called on the option so that has_changed reflects whether the user (not the program) has touched the option. table of contents. revoke_global_option_changed; revoke_global_option_changed(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; revoke_global_option_changed. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.revoke_global_option_changed.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.revoke_global_option_changed.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.revoke_local_option_changed.html:904,Deployability,update,updated,904,"﻿. revoke_local_option_changed. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; revoke_local_option_changed. revoke_local_option_changed¶. psi4.core.revoke_local_option_changed(module: str, key: str) → None¶; Clear the touched status for keyword key at module scope. Sets the has_changed attribute in the module options scope to false. Used in python driver when a function sets the value of an option. Before the function exits, this command is called on the option so that has_changed reflects whether the user (not the program) has touched the option. table of contents. revoke_local_option_changed; revoke_local_option_changed(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; revoke_local_option_changed. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.revoke_local_option_changed.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.revoke_local_option_changed.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.revoke_local_option_changed.html:265,Usability,Clear,Clear,265,"﻿. revoke_local_option_changed. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; revoke_local_option_changed. revoke_local_option_changed¶. psi4.core.revoke_local_option_changed(module: str, key: str) → None¶; Clear the touched status for keyword key at module scope. Sets the has_changed attribute in the module options scope to false. Used in python driver when a function sets the value of an option. Before the function exits, this command is called on the option so that has_changed reflects whether the user (not the program) has touched the option. table of contents. revoke_local_option_changed; revoke_local_option_changed(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; revoke_local_option_changed. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.revoke_local_option_changed.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.revoke_local_option_changed.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.RHF.html:1546,Deployability,update,updated,1546,"﻿. RHF. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; RHF. RHF¶. class psi4.core.RHF¶; Bases: HF; docstring; Methods Summary. c1_deep_copy(self, basis); Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute_orbital_gradient(save_fock, ...); docstring. diis(self, arg0); docstring. mintshelper(self); The MintsHelper object. twoel_Hx_full(self, arg0, arg1, arg2, arg3); Two-electron Hessian-vector products. Methods Documentation. c1_deep_copy(self: psi4.core.RHF, basis: psi4.core.BasisSet) → psi4.core.RHF¶; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute_orbital_gradient(save_fock, max_diis_vectors)¶; docstring. Return type:; float. Parameters:. save_fock (bool) – ; max_diis_vectors (int) – . diis(self: psi4.core.HF, arg0: float) → bool¶; docstring. mintshelper(self: psi4.core.RHF) → psi4.core.MintsHelper¶; The MintsHelper object. twoel_Hx_full(self: psi4.core.RHF, arg0: List[psi4.core.Matrix], arg1: bool, arg2: str, arg3: bool) → List[psi4.core.Matrix]¶; Two-electron Hessian-vector products. Triplet supported. table of contents. RHF; RHF; RHF.c1_deep_copy(); RHF.compute_orbital_gradient(); RHF.diis(); RHF.mintshelper(); RHF.twoel_Hx_full(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; RHF. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.RHF.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.RHF.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.RKSFunctions.html:461,Deployability,update,updated,461,"﻿. RKSFunctions. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; RKSFunctions. RKSFunctions¶. class psi4.core.RKSFunctions¶; Bases: PointFunctions; docstring. table of contents. RKSFunctions; RKSFunctions. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; RKSFunctions. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.RKSFunctions.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.RKSFunctions.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.ROHF.html:2060,Deployability,update,updated,2060,"re.ROHF¶; Bases: HF; docstring; Methods Summary. Ct(self); MO coefficients in the orthogonalized MO basis. c1_deep_copy(self, basis); Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute_orbital_gradient(save_fock, ...); docstring. diis(self, arg0); docstring. mintshelper(self); The MintsHelper object. moFa(self); docstring. moFb(self); docstring. moFeff(self); docstring. soFeff(self); Returns the effective Fock matrix in the orthogonalized SO basis. Methods Documentation. Ct(self: psi4.core.ROHF) → psi4.core.Matrix¶; MO coefficients in the orthogonalized MO basis. Differs from the standard C matrix by an orthogonalizer matrix. c1_deep_copy(self: psi4.core.ROHF, basis: psi4.core.BasisSet) → psi4.core.ROHF¶; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute_orbital_gradient(save_fock, max_diis_vectors)¶; docstring. Return type:; float. Parameters:. save_fock (bool) – ; max_diis_vectors (int) – . diis(self: psi4.core.HF, arg0: float) → bool¶; docstring. mintshelper(self: psi4.core.ROHF) → psi4.core.MintsHelper¶; The MintsHelper object. moFa(self: psi4.core.ROHF) → psi4.core.Matrix¶; docstring. moFb(self: psi4.core.ROHF) → psi4.core.Matrix¶; docstring. moFeff(self: psi4.core.ROHF) → psi4.core.Matrix¶; docstring. soFeff(self: psi4.core.ROHF) → psi4.core.Matrix¶; Returns the effective Fock matrix in the orthogonalized SO basis. See libscf_solver/rohf.cc::form_Cfor technical definition. table of contents. ROHF; ROHF; ROHF.Ct(); ROHF.c1_deep_copy(); ROHF.compute_orbital_gradient(); ROHF.diis(); ROHF.mintshelper(); ROHF.moFa(); ROHF.moFb(); ROHF.moFeff(); ROHF.soFeff(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ROHF. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.ROHF.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.ROHF.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.run_gdma.html:484,Deployability,update,updated,484,"﻿. run_gdma. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; run_gdma. run_gdma¶. psi4.core.run_gdma(ref_wfn: psi4.core.Wavefunction, datfilename: str) → float¶; Runs the GDMA interface code. table of contents. run_gdma; run_gdma(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; run_gdma. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.run_gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.run_gdma.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.run_gdma.html:232,Integrability,interface,interface,232,"﻿. run_gdma. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; run_gdma. run_gdma¶. psi4.core.run_gdma(ref_wfn: psi4.core.Wavefunction, datfilename: str) → float¶; Runs the GDMA interface code. table of contents. run_gdma; run_gdma(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; run_gdma. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.run_gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.run_gdma.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.SADGuess.html:1370,Deployability,update,updated,1370,"﻿. SADGuess. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SADGuess. SADGuess¶. class psi4.core.SADGuess¶; Bases: pybind11_object; docstring; Methods Summary. Ca(self). Cb(self). Da(self). Db(self). build_SAD(arg0, arg1). compute_guess(self). set_atomic_fit_bases(self, arg0). set_debug(self, arg0). set_print(self, arg0). Methods Documentation. Ca(self: psi4.core.SADGuess) → psi4.core.Matrix¶. Cb(self: psi4.core.SADGuess) → psi4.core.Matrix¶. Da(self: psi4.core.SADGuess) → psi4.core.Matrix¶. Db(self: psi4.core.SADGuess) → psi4.core.Matrix¶. static build_SAD(arg0: psi4.core.BasisSet, arg1: List[psi4.core.BasisSet]) → psi4.core.SADGuess¶. compute_guess(self: psi4.core.SADGuess) → None¶. set_atomic_fit_bases(self: psi4.core.SADGuess, arg0: List[psi4.core.BasisSet]) → None¶. set_debug(self: psi4.core.SADGuess, arg0: int) → None¶. set_print(self: psi4.core.SADGuess, arg0: int) → None¶. table of contents. SADGuess; SADGuess; SADGuess.Ca(); SADGuess.Cb(); SADGuess.Da(); SADGuess.Db(); SADGuess.build_SAD(); SADGuess.compute_guess(); SADGuess.set_atomic_fit_bases(); SADGuess.set_debug(); SADGuess.set_print(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SADGuess. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.SADGuess.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.SADGuess.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.SalcComponent.html:981,Deployability,update,updated,981,"﻿. SalcComponent. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SalcComponent. SalcComponent¶. class psi4.core.SalcComponent¶; Bases: pybind11_object; Component of a Cartesian displacement SALC in the basis of atomic displacements.; Attributes Summary. atom; The index of the atom being displaced. coef; The coefficient of the displacement. xyz; The direction of the displacement, given by x as 0, y as 1, z as 2. Attributes Documentation. atom¶; The index of the atom being displaced. 0-indexed. coef¶; The coefficient of the displacement. xyz¶; The direction of the displacement, given by x as 0, y as 1, z as 2. table of contents. SalcComponent; SalcComponent; SalcComponent.atom; SalcComponent.coef; SalcComponent.xyz. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SalcComponent. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.SalcComponent.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.SalcComponent.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.sapt.html:532,Deployability,update,updated,532,"﻿. sapt. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; sapt. sapt¶. psi4.core.sapt(dimer_wfn: psi4.core.Wavefunction, monoa_wfn: psi4.core.Wavefunction, monob_wfn: psi4.core.Wavefunction) → float¶; Runs the symmetry adapted perturbation theory code. table of contents. sapt; sapt(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; sapt. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.sapt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.sapt.html:274,Energy Efficiency,adapt,adapted,274,"﻿. sapt. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; sapt. sapt¶. psi4.core.sapt(dimer_wfn: psi4.core.Wavefunction, monoa_wfn: psi4.core.Wavefunction, monob_wfn: psi4.core.Wavefunction) → float¶; Runs the symmetry adapted perturbation theory code. table of contents. sapt; sapt(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; sapt. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.sapt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.sapt.html:274,Modifiability,adapt,adapted,274,"﻿. sapt. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; sapt. sapt¶. psi4.core.sapt(dimer_wfn: psi4.core.Wavefunction, monoa_wfn: psi4.core.Wavefunction, monob_wfn: psi4.core.Wavefunction) → float¶; Runs the symmetry adapted perturbation theory code. table of contents. sapt; sapt(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; sapt. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.sapt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.SaveType.html:810,Deployability,update,updated,810,"﻿. SaveType. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SaveType. SaveType¶. class psi4.core.SaveType¶; Bases: pybind11_object; The layout of the matrix for saving; Members:. Full; SubBlocks; LowerTriangle. Attributes Summary. Full. LowerTriangle. SubBlocks. name. value. Attributes Documentation. Full = <SaveType.Full: 0>¶. LowerTriangle = <SaveType.LowerTriangle: 2>¶. SubBlocks = <SaveType.SubBlocks: 1>¶. name¶. value¶. table of contents. SaveType; SaveType; SaveType.Full; SaveType.LowerTriangle; SaveType.SubBlocks; SaveType.name; SaveType.value. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SaveType. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.SaveType.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.SaveType.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.scalar_variable.html:535,Deployability,update,updated,535,"﻿. scalar_variable. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; scalar_variable. scalar_variable¶. psi4.core.scalar_variable(key: str) → float¶; Returns the double QCVariable key (case-insensitive); prefer variable(). table of contents. scalar_variable; scalar_variable(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; scalar_variable. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.scalar_variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.scalar_variable.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.scalar_variable.html:266,Modifiability,variab,variable,266,"﻿. scalar_variable. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; scalar_variable. scalar_variable¶. psi4.core.scalar_variable(key: str) → float¶; Returns the double QCVariable key (case-insensitive); prefer variable(). table of contents. scalar_variable; scalar_variable(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; scalar_variable. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.scalar_variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.scalar_variable.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.scalar_variables.html:538,Deployability,update,updated,538,"﻿. scalar_variables. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; scalar_variables. scalar_variables¶. psi4.core.scalar_variables() → Dict[str, float]¶; Returns dictionary of all double QCVariables; prefer variables(). table of contents. scalar_variables; scalar_variables(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; scalar_variables. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.scalar_variables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.scalar_variables.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.scalar_variables.html:265,Modifiability,variab,variables,265,"﻿. scalar_variables. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; scalar_variables. scalar_variables¶. psi4.core.scalar_variables() → Dict[str, float]¶; Returns dictionary of all double QCVariables; prefer variables(). table of contents. scalar_variables; scalar_variables(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; scalar_variables. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.scalar_variables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.scalar_variables.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.scatter.html:492,Deployability,update,updated,492,"﻿. scatter. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; scatter. scatter¶. psi4.core.scatter(arg0: psi4.core.Molecule, arg1: float, arg2: list, arg3: list, arg4: list) → None¶; New Scatter function. table of contents. scatter; scatter(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; scatter. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.scatter.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.scatter.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.scfgrad.html:491,Deployability,update,updated,491,"﻿. scfgrad. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; scfgrad. scfgrad¶. psi4.core.scfgrad(ref_wfn: psi4.core.HF) → psi4.core.Matrix¶; Run scfgrad, which is a specialized DF-SCF gradient program. table of contents. scfgrad; scfgrad(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; scfgrad. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.scfgrad.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.scfgrad.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.scfhess.html:490,Deployability,update,updated,490,"﻿. scfhess. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; scfhess. scfhess¶. psi4.core.scfhess(ref_wfn: psi4.core.HF) → psi4.core.Matrix¶; Run scfhess, which is a specialized DF-SCF hessian program. table of contents. scfhess; scfhess(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; scfhess. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.scfhess.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.scfhess.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.set_active_molecule.html:595,Deployability,update,updated,595,"﻿. set_active_molecule. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_active_molecule. set_active_molecule¶. psi4.core.set_active_molecule(molecule: psi4.core.Molecule) → None¶; Activates a previously defined molecule in global memory so next computations use it. table of contents. set_active_molecule; set_active_molecule(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_active_molecule. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.set_active_molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.set_active_molecule.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.set_array_variable.html:587,Deployability,update,updated,587,"﻿. set_array_variable. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_array_variable. set_array_variable¶. psi4.core.set_array_variable(key: str, value: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QCVariable; prefer set_variable(). table of contents. set_array_variable; set_array_variable(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_array_variable. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.set_array_variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.set_array_variable.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.set_datadir.html:492,Deployability,update,updated,492,"﻿. set_datadir. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_datadir. set_datadir¶. psi4.core.set_datadir(psidatadir: str) → None¶; Sets the path to shared text resources, PSIDATADIR. table of contents. set_datadir; set_datadir(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_datadir. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.set_datadir.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.set_datadir.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.set_global_option.html:895,Deployability,update,updated,895,"﻿. set_global_option. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_global_option. set_global_option¶. psi4.core.set_global_option(*args, **kwargs)¶; Overloaded function. set_global_option(key: str, value: list) -> bool. Sets value to array keyword key for all modules. set_global_option(key: str, value: int) -> bool. Sets value to integer keyword key for all modules. set_global_option(key: str, value: float) -> bool. Sets value to double keyword key for all modules. set_global_option(key: str, value: str) -> bool. Sets value to string keyword key for all modules. table of contents. set_global_option; set_global_option(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_global_option. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.set_global_option.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.set_global_option.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.set_global_option_python.html:682,Deployability,update,updated,682,"﻿. set_global_option_python. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_global_option_python. set_global_option_python¶. psi4.core.set_global_option_python(key, EXTERN)¶; This is a fairly hacky way to get around EXTERN issues. Effectively we are routing this option Python side through attributes until the general Options overhaul. table of contents. set_global_option_python; set_global_option_python(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_global_option_python. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.set_global_option_python.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.set_global_option_python.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.set_global_option_python.html:311,Integrability,rout,routing,311,"﻿. set_global_option_python. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_global_option_python. set_global_option_python¶. psi4.core.set_global_option_python(key, EXTERN)¶; This is a fairly hacky way to get around EXTERN issues. Effectively we are routing this option Python side through attributes until the general Options overhaul. table of contents. set_global_option_python; set_global_option_python(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_global_option_python. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.set_global_option_python.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.set_global_option_python.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.set_local_option.html:996,Deployability,update,updated,996,"﻿. set_local_option. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_local_option. set_local_option¶. psi4.core.set_local_option(*args, **kwargs)¶; Overloaded function. set_local_option(module: str, key: str, value: list) -> bool. Sets value to array keyword key scoped only to specific module. set_local_option(module: str, key: str, value: int) -> bool. Sets value to integer keyword key scoped only to specific module. set_local_option(module: str, key: str, value: float) -> bool. Sets value to double keyword key scoped only to specific module. set_local_option(module: str, key: str, value: str) -> bool. Sets value to string keyword key scoped only to specific module. table of contents. set_local_option; set_local_option(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_local_option. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.set_local_option.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.set_local_option.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.set_local_option_python.html:597,Deployability,update,updated,597,"﻿. set_local_option_python. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_local_option_python. set_local_option_python¶. psi4.core.set_local_option_python(key: str, value: object) → None¶; Sets value to Python keyword key scoped only to a single module. table of contents. set_local_option_python; set_local_option_python(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_local_option_python. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.set_local_option_python.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.set_local_option_python.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.set_memory_bytes.html:248,Availability,avail,available,248,"﻿. set_memory_bytes. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_memory_bytes. set_memory_bytes¶. psi4.core.set_memory_bytes(memory: int, quiet: bool = False) → None¶; Sets the memory available to Psi (in bytes); prefer psi4.driver.set_memory(). table of contents. set_memory_bytes; set_memory_bytes(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_memory_bytes. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.set_memory_bytes.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.set_memory_bytes.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.set_memory_bytes.html:570,Deployability,update,updated,570,"﻿. set_memory_bytes. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_memory_bytes. set_memory_bytes¶. psi4.core.set_memory_bytes(memory: int, quiet: bool = False) → None¶; Sets the memory available to Psi (in bytes); prefer psi4.driver.set_memory(). table of contents. set_memory_bytes; set_memory_bytes(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_memory_bytes. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.set_memory_bytes.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.set_memory_bytes.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.set_num_threads.html:550,Deployability,update,updated,550,"﻿. set_num_threads. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_num_threads. set_num_threads¶. psi4.core.set_num_threads(nthread: int, quiet: bool = False) → None¶; Sets the number of threads to use in SMP parallel computations. table of contents. set_num_threads; set_num_threads(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_num_threads. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.set_num_threads.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.set_num_threads.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.set_output_file.html:634,Deployability,update,updated,634,"﻿. set_output_file. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_output_file. set_output_file¶. psi4.core.set_output_file(*args, **kwargs)¶; Overloaded function. set_output_file(arg0: str) -> None; set_output_file(ofname: str, append: bool = False) -> None. Set the name for output file; prefer set_output_file(). table of contents. set_output_file; set_output_file(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_output_file. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.set_output_file.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.set_output_file.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.set_psi_file_prefix.html:511,Deployability,update,updated,511,"﻿. set_psi_file_prefix. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_psi_file_prefix. set_psi_file_prefix¶. psi4.core.set_psi_file_prefix() → None¶. Deprecated since version 1.4. table of contents. set_psi_file_prefix; set_psi_file_prefix(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_psi_file_prefix. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.set_psi_file_prefix.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.set_psi_file_prefix.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.set_scalar_variable.html:577,Deployability,update,updated,577,"﻿. set_scalar_variable. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_scalar_variable. set_scalar_variable¶. psi4.core.set_scalar_variable(key: str, value: float) → None¶; Sets the double QCVariable key (case-insensitive); prefer set_variable(). table of contents. set_scalar_variable; set_scalar_variable(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_scalar_variable. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.set_scalar_variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.set_scalar_variable.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.set_variable.html:1001,Deployability,update,updated,1001,"﻿. set_variable. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_variable. set_variable¶. psi4.core.set_variable(key, val)¶; Sets scalar or array QCVariable key to; val in global memory. Parameters:. key (str) – Case-insensitive key to global double or Matrix; storage maps.; val (Union[Matrix, ndarray, float]) – Scalar or array to be stored in key. If ndarray and; data key does not naturally fit in 2D Matrix (often charge and; multipole QCVariables), it will be reshaped, as all; ndarray are stored as Matrix. Raises:; ValidationError – If val is a scalar but key already exists as an array variable. Or; if val is an array but key already exists as a scalar variable. Return type:; None. table of contents. set_variable; set_variable(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_variable. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.set_variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.set_variable.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.set_variable.html:479,Energy Efficiency,charge,charge,479,"﻿. set_variable. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_variable. set_variable¶. psi4.core.set_variable(key, val)¶; Sets scalar or array QCVariable key to; val in global memory. Parameters:. key (str) – Case-insensitive key to global double or Matrix; storage maps.; val (Union[Matrix, ndarray, float]) – Scalar or array to be stored in key. If ndarray and; data key does not naturally fit in 2D Matrix (often charge and; multipole QCVariables), it will be reshaped, as all; ndarray are stored as Matrix. Raises:; ValidationError – If val is a scalar but key already exists as an array variable. Or; if val is an array but key already exists as a scalar variable. Return type:; None. table of contents. set_variable; set_variable(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_variable. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.set_variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.set_variable.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.set_variable.html:655,Modifiability,variab,variable,655,"﻿. set_variable. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_variable. set_variable¶. psi4.core.set_variable(key, val)¶; Sets scalar or array QCVariable key to; val in global memory. Parameters:. key (str) – Case-insensitive key to global double or Matrix; storage maps.; val (Union[Matrix, ndarray, float]) – Scalar or array to be stored in key. If ndarray and; data key does not naturally fit in 2D Matrix (often charge and; multipole QCVariables), it will be reshaped, as all; ndarray are stored as Matrix. Raises:; ValidationError – If val is a scalar but key already exists as an array variable. Or; if val is an array but key already exists as a scalar variable. Return type:; None. table of contents. set_variable; set_variable(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_variable. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.set_variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.set_variable.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.set_variable.html:723,Modifiability,variab,variable,723,"﻿. set_variable. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_variable. set_variable¶. psi4.core.set_variable(key, val)¶; Sets scalar or array QCVariable key to; val in global memory. Parameters:. key (str) – Case-insensitive key to global double or Matrix; storage maps.; val (Union[Matrix, ndarray, float]) – Scalar or array to be stored in key. If ndarray and; data key does not naturally fit in 2D Matrix (often charge and; multipole QCVariables), it will be reshaped, as all; ndarray are stored as Matrix. Raises:; ValidationError – If val is a scalar but key already exists as an array variable. Or; if val is an array but key already exists as a scalar variable. Return type:; None. table of contents. set_variable; set_variable(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_variable. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.set_variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.set_variable.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.set_variable.html:583,Security,Validat,ValidationError,583,"﻿. set_variable. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_variable. set_variable¶. psi4.core.set_variable(key, val)¶; Sets scalar or array QCVariable key to; val in global memory. Parameters:. key (str) – Case-insensitive key to global double or Matrix; storage maps.; val (Union[Matrix, ndarray, float]) – Scalar or array to be stored in key. If ndarray and; data key does not naturally fit in 2D Matrix (often charge and; multipole QCVariables), it will be reshaped, as all; ndarray are stored as Matrix. Raises:; ValidationError – If val is a scalar but key already exists as an array variable. Or; if val is an array but key already exists as a scalar variable. Return type:; None. table of contents. set_variable; set_variable(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_variable. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.set_variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.set_variable.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.ShellInfo.html:430,Deployability,update,updated,430,"﻿. ShellInfo. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ShellInfo. ShellInfo¶. class psi4.core.ShellInfo¶; Bases: pybind11_object. table of contents. ShellInfo; ShellInfo. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ShellInfo. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.ShellInfo.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.ShellInfo.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Slice.html:799,Deployability,update,updated,799,"﻿. Slice. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; Slice. Slice¶. class psi4.core.Slice¶; Bases: pybind11_object; Slicing for Matrix and Vector objects; Methods Summary. begin(self); Get the first element of this slice. end(self); Get the past-the-end element of this slice. Methods Documentation. begin(self: psi4.core.Slice) → psi4.core.Dimension¶; Get the first element of this slice. end(self: psi4.core.Slice) → psi4.core.Dimension¶; Get the past-the-end element of this slice. table of contents. Slice; Slice; Slice.begin(); Slice.end(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; Slice. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Slice.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Slice.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.SOBasisSet.html:815,Deployability,update,updated,815,"﻿. SOBasisSet. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SOBasisSet. SOBasisSet¶. class psi4.core.SOBasisSet¶; Bases: pybind11_object; An SOBasis object describes the transformation from an atomic orbital basis to a symmetry orbital basis.; Methods Summary. petite_list(self); Return the PetiteList object used in creating this SO basis. Methods Documentation. petite_list(self: psi4.core.SOBasisSet) → psi4.core.PetiteList¶; Return the PetiteList object used in creating this SO basis. table of contents. SOBasisSet; SOBasisSet; SOBasisSet.petite_list(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SOBasisSet. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.SOBasisSet.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.SOBasisSet.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.SOMCSCF.html:639,Deployability,update,update,639,"﻿. SOMCSCF. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SOMCSCF. SOMCSCF¶. class psi4.core.SOMCSCF¶; Bases: pybind11_object; docstring; Methods Summary. Ck(self, arg0, arg1). H_approx_diag(self). approx_solve(self). compute_AFock(self, arg0). compute_Hk(self, arg0). compute_Q(self, arg0). compute_Qk(self, arg0, arg1, arg2). current_AFock(self). current_IFock(self). current_ci_energy(self). current_docc_energy(self). current_total_energy(self). form_rotation_matrix(self, x[, order]). gradient(self). gradient_rms(self). rhf_energy(self, arg0). solve(self, arg0, arg1, arg2). update(self, arg0, arg1, arg2, arg3, arg4). zero_redundant(self, arg0). Methods Documentation. Ck(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) → psi4.core.Matrix¶. H_approx_diag(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. approx_solve(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. compute_AFock(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Hk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Q(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Qk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix) → psi4.core.Matrix¶. current_AFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. current_IFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. current_ci_energy(self: psi4.core.SOMCSCF) → float¶. current_docc_energy(self: psi4.core.SOMCSCF) → float¶. current_total_energy(self: psi4.core.SOMCSCF) → float¶. form_rotation_matrix(self: psi4.core.SOMCSCF, x: psi4.core.Matrix, order: int = 2) → psi4.core.Matrix¶. gradient(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. gradient_rms(self: psi4.core.SOMCSCF) → float¶. rhf_energy(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → float¶. solve(self: psi4.core.SOMCSCF, arg0: int, arg1: float, arg2: bool) → psi4.core.Matrix¶. update(self: psi4.core.SOMCS",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.SOMCSCF.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.SOMCSCF.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.SOMCSCF.html:1973,Deployability,update,update,1973,"si4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Hk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Q(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Qk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix) → psi4.core.Matrix¶. current_AFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. current_IFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. current_ci_energy(self: psi4.core.SOMCSCF) → float¶. current_docc_energy(self: psi4.core.SOMCSCF) → float¶. current_total_energy(self: psi4.core.SOMCSCF) → float¶. form_rotation_matrix(self: psi4.core.SOMCSCF, x: psi4.core.Matrix, order: int = 2) → psi4.core.Matrix¶. gradient(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. gradient_rms(self: psi4.core.SOMCSCF) → float¶. rhf_energy(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → float¶. solve(self: psi4.core.SOMCSCF, arg0: int, arg1: float, arg2: bool) → psi4.core.Matrix¶. update(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix, arg3: psi4.core.Matrix, arg4: psi4.core.Matrix) → None¶. zero_redundant(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → None¶. table of contents. SOMCSCF; SOMCSCF; SOMCSCF.Ck(); SOMCSCF.H_approx_diag(); SOMCSCF.approx_solve(); SOMCSCF.compute_AFock(); SOMCSCF.compute_Hk(); SOMCSCF.compute_Q(); SOMCSCF.compute_Qk(); SOMCSCF.current_AFock(); SOMCSCF.current_IFock(); SOMCSCF.current_ci_energy(); SOMCSCF.current_docc_energy(); SOMCSCF.current_total_energy(); SOMCSCF.form_rotation_matrix(); SOMCSCF.gradient(); SOMCSCF.gradient_rms(); SOMCSCF.rhf_energy(); SOMCSCF.solve(); SOMCSCF.update(); SOMCSCF.zero_redundant(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SOMCSCF. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.SOMCSCF.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.SOMCSCF.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.SOMCSCF.html:2662,Deployability,update,update,2662,"si4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Hk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Q(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Qk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix) → psi4.core.Matrix¶. current_AFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. current_IFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. current_ci_energy(self: psi4.core.SOMCSCF) → float¶. current_docc_energy(self: psi4.core.SOMCSCF) → float¶. current_total_energy(self: psi4.core.SOMCSCF) → float¶. form_rotation_matrix(self: psi4.core.SOMCSCF, x: psi4.core.Matrix, order: int = 2) → psi4.core.Matrix¶. gradient(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. gradient_rms(self: psi4.core.SOMCSCF) → float¶. rhf_energy(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → float¶. solve(self: psi4.core.SOMCSCF, arg0: int, arg1: float, arg2: bool) → psi4.core.Matrix¶. update(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix, arg3: psi4.core.Matrix, arg4: psi4.core.Matrix) → None¶. zero_redundant(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → None¶. table of contents. SOMCSCF; SOMCSCF; SOMCSCF.Ck(); SOMCSCF.H_approx_diag(); SOMCSCF.approx_solve(); SOMCSCF.compute_AFock(); SOMCSCF.compute_Hk(); SOMCSCF.compute_Q(); SOMCSCF.compute_Qk(); SOMCSCF.current_AFock(); SOMCSCF.current_IFock(); SOMCSCF.current_ci_energy(); SOMCSCF.current_docc_energy(); SOMCSCF.current_total_energy(); SOMCSCF.form_rotation_matrix(); SOMCSCF.gradient(); SOMCSCF.gradient_rms(); SOMCSCF.rhf_energy(); SOMCSCF.solve(); SOMCSCF.update(); SOMCSCF.zero_redundant(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SOMCSCF. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.SOMCSCF.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.SOMCSCF.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.SOMCSCF.html:2892,Deployability,update,updated,2892,"si4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Hk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Q(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Qk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix) → psi4.core.Matrix¶. current_AFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. current_IFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. current_ci_energy(self: psi4.core.SOMCSCF) → float¶. current_docc_energy(self: psi4.core.SOMCSCF) → float¶. current_total_energy(self: psi4.core.SOMCSCF) → float¶. form_rotation_matrix(self: psi4.core.SOMCSCF, x: psi4.core.Matrix, order: int = 2) → psi4.core.Matrix¶. gradient(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. gradient_rms(self: psi4.core.SOMCSCF) → float¶. rhf_energy(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → float¶. solve(self: psi4.core.SOMCSCF, arg0: int, arg1: float, arg2: bool) → psi4.core.Matrix¶. update(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix, arg3: psi4.core.Matrix, arg4: psi4.core.Matrix) → None¶. zero_redundant(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → None¶. table of contents. SOMCSCF; SOMCSCF; SOMCSCF.Ck(); SOMCSCF.H_approx_diag(); SOMCSCF.approx_solve(); SOMCSCF.compute_AFock(); SOMCSCF.compute_Hk(); SOMCSCF.compute_Q(); SOMCSCF.compute_Qk(); SOMCSCF.current_AFock(); SOMCSCF.current_IFock(); SOMCSCF.current_ci_energy(); SOMCSCF.current_docc_energy(); SOMCSCF.current_total_energy(); SOMCSCF.form_rotation_matrix(); SOMCSCF.gradient(); SOMCSCF.gradient_rms(); SOMCSCF.rhf_energy(); SOMCSCF.solve(); SOMCSCF.update(); SOMCSCF.zero_redundant(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SOMCSCF. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.SOMCSCF.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.SOMCSCF.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.SuperFunctional.html:13123,Deployability,update,updated,13123,"citation(); SuperFunctional.compute_functional(); SuperFunctional.density_tolerance(); SuperFunctional.deriv(); SuperFunctional.description(); SuperFunctional.grac_alpha(); SuperFunctional.grac_beta(); SuperFunctional.grac_shift(); SuperFunctional.is_c_hybrid(); SuperFunctional.is_c_lrc(); SuperFunctional.is_c_scs_hybrid(); SuperFunctional.is_gga(); SuperFunctional.is_libxc_func(); SuperFunctional.is_meta(); SuperFunctional.is_x_hybrid(); SuperFunctional.is_x_lrc(); SuperFunctional.max_points(); SuperFunctional.name(); SuperFunctional.needs_grac(); SuperFunctional.needs_vv10(); SuperFunctional.needs_xc(); SuperFunctional.print_density_threshold(); SuperFunctional.print_detail(); SuperFunctional.print_out(); SuperFunctional.set_c_alpha(); SuperFunctional.set_c_omega(); SuperFunctional.set_c_os_alpha(); SuperFunctional.set_c_ss_alpha(); SuperFunctional.set_citation(); SuperFunctional.set_density_tolerance(); SuperFunctional.set_deriv(); SuperFunctional.set_description(); SuperFunctional.set_do_vv10(); SuperFunctional.set_grac_alpha(); SuperFunctional.set_grac_beta(); SuperFunctional.set_grac_shift(); SuperFunctional.set_lock(); SuperFunctional.set_max_points(); SuperFunctional.set_name(); SuperFunctional.set_vv10_b(); SuperFunctional.set_vv10_c(); SuperFunctional.set_x_alpha(); SuperFunctional.set_x_beta(); SuperFunctional.set_x_omega(); SuperFunctional.set_xclib_description(); SuperFunctional.test_functional(); SuperFunctional.value(); SuperFunctional.values(); SuperFunctional.vv10_b(); SuperFunctional.vv10_c(); SuperFunctional.x_alpha(); SuperFunctional.x_beta(); SuperFunctional.x_functional(); SuperFunctional.x_functionals(); SuperFunctional.x_omega(); SuperFunctional.xclib_description(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SuperFunctional. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.SuperFunctional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.SuperFunctional.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.SuperFunctional.html:427,Energy Efficiency,allocate,allocate,427,"﻿. SuperFunctional. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SuperFunctional. SuperFunctional¶. class psi4.core.SuperFunctional¶; Bases: pybind11_object; docstring; Methods Summary. XC_build(arg0, arg1); Builds a SuperFunctional from a XC string. add_c_functional(self, arg0); Add a correlation Functional. add_x_functional(self, arg0); Add a exchange Functional. allocate(self); Allocates the vectors, should be called after ansatz or npoint changes. ansatz(self); SuperFunctional rung. blank(); Initialize a blank SuperFunctional. c_alpha(self); Amount of MP2 correlation. c_functional(self, arg0); Returns the desired C Functional. c_functionals(self); Returns all C Functionals. c_omega(self); Range-seperated correlation parameter. c_os_alpha(self); Amount of SS MP2 correlation. c_ss_alpha(self); Amount of OS MP2 correlation. citation(self); SuperFunctional citation. compute_functional(self, vals[, npoints, ...]); Computes the SuperFunctional. density_tolerance(self); Density threshold for LibXC. deriv(self); Maximum derivative to compute. description(self); The description of the SuperFunctional. grac_alpha(self); GRAC Alpha. grac_beta(self); GRAC Beta. grac_shift(self); Shift of the bulk potenital. is_c_hybrid(self); Requires MP2 correlation?. is_c_lrc(self); Contains range-seperated correlation?. is_c_scs_hybrid(self); Requires SCS-MP2 correlation?. is_gga(self); Is this a GGA?. is_libxc_func(self); A full SuperFunctional definition from LibXC. is_meta(self); Is this a MGGA?. is_x_hybrid(self); Requires exact exchange?. is_x_lrc(self); Contains range-seperated exchange?. max_points(self); Maximum number of grid points per block. name(self); The name of the SuperFunctional. needs_grac(self); Does this functional need GRAC. needs_vv10(self); Does this functional need VV10 dispersion. needs_xc(self); Does this functional need XC quantities. print_density_threshold(self); Queries the LibXCFunctionals for their ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.SuperFunctional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.SuperFunctional.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.SuperFunctional.html:443,Energy Efficiency,Allocate,Allocates,443,"﻿. SuperFunctional. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SuperFunctional. SuperFunctional¶. class psi4.core.SuperFunctional¶; Bases: pybind11_object; docstring; Methods Summary. XC_build(arg0, arg1); Builds a SuperFunctional from a XC string. add_c_functional(self, arg0); Add a correlation Functional. add_x_functional(self, arg0); Add a exchange Functional. allocate(self); Allocates the vectors, should be called after ansatz or npoint changes. ansatz(self); SuperFunctional rung. blank(); Initialize a blank SuperFunctional. c_alpha(self); Amount of MP2 correlation. c_functional(self, arg0); Returns the desired C Functional. c_functionals(self); Returns all C Functionals. c_omega(self); Range-seperated correlation parameter. c_os_alpha(self); Amount of SS MP2 correlation. c_ss_alpha(self); Amount of OS MP2 correlation. citation(self); SuperFunctional citation. compute_functional(self, vals[, npoints, ...]); Computes the SuperFunctional. density_tolerance(self); Density threshold for LibXC. deriv(self); Maximum derivative to compute. description(self); The description of the SuperFunctional. grac_alpha(self); GRAC Alpha. grac_beta(self); GRAC Beta. grac_shift(self); Shift of the bulk potenital. is_c_hybrid(self); Requires MP2 correlation?. is_c_lrc(self); Contains range-seperated correlation?. is_c_scs_hybrid(self); Requires SCS-MP2 correlation?. is_gga(self); Is this a GGA?. is_libxc_func(self); A full SuperFunctional definition from LibXC. is_meta(self); Is this a MGGA?. is_x_hybrid(self); Requires exact exchange?. is_x_lrc(self); Contains range-seperated exchange?. max_points(self); Maximum number of grid points per block. name(self); The name of the SuperFunctional. needs_grac(self); Does this functional need GRAC. needs_vv10(self); Does this functional need VV10 dispersion. needs_xc(self); Does this functional need XC quantities. print_density_threshold(self); Queries the LibXCFunctionals for their ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.SuperFunctional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.SuperFunctional.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.SuperFunctional.html:4400,Energy Efficiency,allocate,allocate,4400," set_xclib_description(self, arg0); Sets the LibXC version and citation string. test_functional(self, arg0, arg1, arg2, ...); Quick testing capabilities. value(self, arg0); Returns a given internal value. values(self); Return all internal values. vv10_b(self); The VV10 b parameter. vv10_c(self); The VV10 c parameter. x_alpha(self); Amount of exact HF exchange. x_beta(self); Amount of exact HF exchange. x_functional(self, arg0); Returns the desired X Functional. x_functionals(self); Returns all X Functionals. x_omega(self); Range-seperated exchange parameter. xclib_description(self); LibXC version and citation string. Methods Documentation. static XC_build(arg0: str, arg1: bool) → psi4.core.SuperFunctional¶; Builds a SuperFunctional from a XC string. add_c_functional(self: psi4.core.SuperFunctional, arg0: psi4.core.Functional) → None¶; Add a correlation Functional. add_x_functional(self: psi4.core.SuperFunctional, arg0: psi4.core.Functional) → None¶; Add a exchange Functional. allocate(self: psi4.core.SuperFunctional) → None¶; Allocates the vectors, should be called after ansatz or npoint changes. ansatz(self: psi4.core.SuperFunctional) → int¶; SuperFunctional rung. static blank() → psi4.core.SuperFunctional¶; Initialize a blank SuperFunctional. c_alpha(self: psi4.core.SuperFunctional) → float¶; Amount of MP2 correlation. c_functional(self: psi4.core.SuperFunctional, arg0: str) → psi4.core.Functional¶; Returns the desired C Functional. c_functionals(self: psi4.core.SuperFunctional) → List[psi4.core.Functional]¶; Returns all C Functionals. c_omega(self: psi4.core.SuperFunctional) → float¶; Range-seperated correlation parameter. c_os_alpha(self: psi4.core.SuperFunctional) → float¶; Amount of SS MP2 correlation. c_ss_alpha(self: psi4.core.SuperFunctional) → float¶; Amount of OS MP2 correlation. citation(self: psi4.core.SuperFunctional) → str¶; SuperFunctional citation. compute_functional(self: psi4.core.SuperFunctional, vals: Dict[str, psi4.core.Vector], npoints: int = -",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.SuperFunctional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.SuperFunctional.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.SuperFunctional.html:4451,Energy Efficiency,Allocate,Allocates,4451,"itation string. test_functional(self, arg0, arg1, arg2, ...); Quick testing capabilities. value(self, arg0); Returns a given internal value. values(self); Return all internal values. vv10_b(self); The VV10 b parameter. vv10_c(self); The VV10 c parameter. x_alpha(self); Amount of exact HF exchange. x_beta(self); Amount of exact HF exchange. x_functional(self, arg0); Returns the desired X Functional. x_functionals(self); Returns all X Functionals. x_omega(self); Range-seperated exchange parameter. xclib_description(self); LibXC version and citation string. Methods Documentation. static XC_build(arg0: str, arg1: bool) → psi4.core.SuperFunctional¶; Builds a SuperFunctional from a XC string. add_c_functional(self: psi4.core.SuperFunctional, arg0: psi4.core.Functional) → None¶; Add a correlation Functional. add_x_functional(self: psi4.core.SuperFunctional, arg0: psi4.core.Functional) → None¶; Add a exchange Functional. allocate(self: psi4.core.SuperFunctional) → None¶; Allocates the vectors, should be called after ansatz or npoint changes. ansatz(self: psi4.core.SuperFunctional) → int¶; SuperFunctional rung. static blank() → psi4.core.SuperFunctional¶; Initialize a blank SuperFunctional. c_alpha(self: psi4.core.SuperFunctional) → float¶; Amount of MP2 correlation. c_functional(self: psi4.core.SuperFunctional, arg0: str) → psi4.core.Functional¶; Returns the desired C Functional. c_functionals(self: psi4.core.SuperFunctional) → List[psi4.core.Functional]¶; Returns all C Functionals. c_omega(self: psi4.core.SuperFunctional) → float¶; Range-seperated correlation parameter. c_os_alpha(self: psi4.core.SuperFunctional) → float¶; Amount of SS MP2 correlation. c_ss_alpha(self: psi4.core.SuperFunctional) → float¶; Amount of OS MP2 correlation. citation(self: psi4.core.SuperFunctional) → str¶; SuperFunctional citation. compute_functional(self: psi4.core.SuperFunctional, vals: Dict[str, psi4.core.Vector], npoints: int = -1, singlet: bool = True) → Dict[str, psi4.core.Vector]¶; Compute",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.SuperFunctional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.SuperFunctional.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.SuperFunctional.html:10944,Energy Efficiency,allocate,allocate,10944,"rnal value. values(self: psi4.core.SuperFunctional) → Dict[str, psi4.core.Vector]¶; Return all internal values. vv10_b(self: psi4.core.SuperFunctional) → float¶; The VV10 b parameter. vv10_c(self: psi4.core.SuperFunctional) → float¶; The VV10 c parameter. x_alpha(self: psi4.core.SuperFunctional) → float¶; Amount of exact HF exchange. x_beta(self: psi4.core.SuperFunctional) → float¶; Amount of exact HF exchange. x_functional(self: psi4.core.SuperFunctional, arg0: str) → psi4.core.Functional¶; Returns the desired X Functional. x_functionals(self: psi4.core.SuperFunctional) → List[psi4.core.Functional]¶; Returns all X Functionals. x_omega(self: psi4.core.SuperFunctional) → float¶; Range-seperated exchange parameter. xclib_description(self: psi4.core.SuperFunctional) → str¶; LibXC version and citation string. table of contents. SuperFunctional; SuperFunctional; SuperFunctional.XC_build(); SuperFunctional.add_c_functional(); SuperFunctional.add_x_functional(); SuperFunctional.allocate(); SuperFunctional.ansatz(); SuperFunctional.blank(); SuperFunctional.c_alpha(); SuperFunctional.c_functional(); SuperFunctional.c_functionals(); SuperFunctional.c_omega(); SuperFunctional.c_os_alpha(); SuperFunctional.c_ss_alpha(); SuperFunctional.citation(); SuperFunctional.compute_functional(); SuperFunctional.density_tolerance(); SuperFunctional.deriv(); SuperFunctional.description(); SuperFunctional.grac_alpha(); SuperFunctional.grac_beta(); SuperFunctional.grac_shift(); SuperFunctional.is_c_hybrid(); SuperFunctional.is_c_lrc(); SuperFunctional.is_c_scs_hybrid(); SuperFunctional.is_gga(); SuperFunctional.is_libxc_func(); SuperFunctional.is_meta(); SuperFunctional.is_x_hybrid(); SuperFunctional.is_x_lrc(); SuperFunctional.max_points(); SuperFunctional.name(); SuperFunctional.needs_grac(); SuperFunctional.needs_vv10(); SuperFunctional.needs_xc(); SuperFunctional.print_density_threshold(); SuperFunctional.print_detail(); SuperFunctional.print_out(); SuperFunctional.set_c_alpha(); SuperFun",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.SuperFunctional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.SuperFunctional.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.SuperFunctional.html:3541,Testability,test,testing,3541,"_deriv(self, arg0); Sets the derivative level. set_description(self, arg0); Sets the SuperFunctional description. set_do_vv10(self, arg0); Sets whether to do VV10 correction. set_grac_alpha(self, arg0); Sets the GRAC alpha parameter. set_grac_beta(self, arg0); Sets the GRAC beta parameter. set_grac_shift(self, arg0); Sets the GRAC bulk shift value. set_lock(self, arg0); Locks the functional to prevent changes. set_max_points(self, arg0); Sets the maximum number of points. set_name(self, arg0); Sets the SuperFunctional name. set_vv10_b(self, arg0); Sets the VV10 b parameter. set_vv10_c(self, arg0); Sets the VV10 c parameter. set_x_alpha(self, arg0); Sets the amount of exact global HF exchange. set_x_beta(self, arg0); Sets how much more long-range exchange than short-range exchange. set_x_omega(self, arg0); Sets the range-seperation exchange parameter. set_xclib_description(self, arg0); Sets the LibXC version and citation string. test_functional(self, arg0, arg1, arg2, ...); Quick testing capabilities. value(self, arg0); Returns a given internal value. values(self); Return all internal values. vv10_b(self); The VV10 b parameter. vv10_c(self); The VV10 c parameter. x_alpha(self); Amount of exact HF exchange. x_beta(self); Amount of exact HF exchange. x_functional(self, arg0); Returns the desired X Functional. x_functionals(self); Returns all X Functionals. x_omega(self); Range-seperated exchange parameter. xclib_description(self); LibXC version and citation string. Methods Documentation. static XC_build(arg0: str, arg1: bool) → psi4.core.SuperFunctional¶; Builds a SuperFunctional from a XC string. add_c_functional(self: psi4.core.SuperFunctional, arg0: psi4.core.Functional) → None¶; Add a correlation Functional. add_x_functional(self: psi4.core.SuperFunctional, arg0: psi4.core.Functional) → None¶; Add a exchange Functional. allocate(self: psi4.core.SuperFunctional) → None¶; Allocates the vectors, should be called after ansatz or npoint changes. ansatz(self: psi4.core.S",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.SuperFunctional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.SuperFunctional.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.SuperFunctional.html:9845,Testability,test,testing,9845,"er of points. set_name(self: psi4.core.SuperFunctional, arg0: str) → None¶; Sets the SuperFunctional name. set_vv10_b(self: psi4.core.SuperFunctional, arg0: float) → None¶; Sets the VV10 b parameter. set_vv10_c(self: psi4.core.SuperFunctional, arg0: float) → None¶; Sets the VV10 c parameter. set_x_alpha(self: psi4.core.SuperFunctional, arg0: float) → None¶; Sets the amount of exact global HF exchange. set_x_beta(self: psi4.core.SuperFunctional, arg0: float) → None¶; Sets how much more long-range exchange than short-range exchange. set_x_omega(self: psi4.core.SuperFunctional, arg0: float) → None¶; Sets the range-seperation exchange parameter. set_xclib_description(self: psi4.core.SuperFunctional, arg0: str) → None¶; Sets the LibXC version and citation string. test_functional(self: psi4.core.SuperFunctional, arg0: psi4.core.Vector, arg1: psi4.core.Vector, arg2: psi4.core.Vector, arg3: psi4.core.Vector, arg4: psi4.core.Vector, arg5: psi4.core.Vector, arg6: psi4.core.Vector) → None¶; Quick testing capabilities. value(self: psi4.core.SuperFunctional, arg0: str) → psi4.core.Vector¶; Returns a given internal value. values(self: psi4.core.SuperFunctional) → Dict[str, psi4.core.Vector]¶; Return all internal values. vv10_b(self: psi4.core.SuperFunctional) → float¶; The VV10 b parameter. vv10_c(self: psi4.core.SuperFunctional) → float¶; The VV10 c parameter. x_alpha(self: psi4.core.SuperFunctional) → float¶; Amount of exact HF exchange. x_beta(self: psi4.core.SuperFunctional) → float¶; Amount of exact HF exchange. x_functional(self: psi4.core.SuperFunctional, arg0: str) → psi4.core.Functional¶; Returns the desired X Functional. x_functionals(self: psi4.core.SuperFunctional) → List[psi4.core.Functional]¶; Returns all X Functionals. x_omega(self: psi4.core.SuperFunctional) → float¶; Range-seperated exchange parameter. xclib_description(self: psi4.core.SuperFunctional) → str¶; LibXC version and citation string. table of contents. SuperFunctional; SuperFunctional; SuperFunctional.",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.SuperFunctional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.SuperFunctional.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.SymmetryOperation.html:3639,Deployability,update,updated,3639,"e matrix for the operation on Cartesians. operate(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation¶; Performs the operation arg2 * arg1. rotate_n(self: psi4.core.SymmetryOperation, arg0: int) → None¶; Set equal to a clockwise rotation by 2pi/n. rotate_theta(self: psi4.core.SymmetryOperation, arg0: float) → None¶; Set equal to a clockwise rotation by theta. sigma_xy(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in xy plane. sigma_xz(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in xz plane. sigma_yz(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in yz plane. trace(self: psi4.core.SymmetryOperation) → float¶; Returns trace of transformation matrix. transform(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation¶; Performs the transform arg2 * arg1 * arg2~. transpose(self: psi4.core.SymmetryOperation) → None¶; Performs transposition of matrix operation. unit(self: psi4.core.SymmetryOperation) → None¶; Set equal to a unit matrix. zero(self: psi4.core.SymmetryOperation) → None¶; Zero out the symmetry operation. table of contents. SymmetryOperation; SymmetryOperation; SymmetryOperation.E(); SymmetryOperation.c2_x(); SymmetryOperation.c2_y(); SymmetryOperation.c2_z(); SymmetryOperation.i(); SymmetryOperation.matrix(); SymmetryOperation.operate(); SymmetryOperation.rotate_n(); SymmetryOperation.rotate_theta(); SymmetryOperation.sigma_xy(); SymmetryOperation.sigma_xz(); SymmetryOperation.sigma_yz(); SymmetryOperation.trace(); SymmetryOperation.transform(); SymmetryOperation.transpose(); SymmetryOperation.unit(); SymmetryOperation.zero(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SymmetryOperation. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.SymmetryOperation.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.SymmetryOperation.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.SymmetryOperation.html:635,Performance,Perform,Performs,635,"﻿. SymmetryOperation. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SymmetryOperation. SymmetryOperation¶. class psi4.core.SymmetryOperation¶; Bases: pybind11_object; Class to provide a 3 by 3 matrix representation of a symmetry operation, such as a rotation or reflection.; Methods Summary. E(self); Set equal to E. c2_x(self); Set equal to C2 about the x axis. c2_y(self); Set equal to C2 about the y axis. c2_z(self); Set equal to C2 about the z axis. i(self); Set equal to an inversion. matrix(self); Return the matrix for the operation on Cartesians. operate(self, arg0); Performs the operation arg2 * arg1. rotate_n(self, arg0); Set equal to a clockwise rotation by 2pi/n. rotate_theta(self, arg0); Set equal to a clockwise rotation by theta. sigma_xy(self); Set equal to reflection in xy plane. sigma_xz(self); Set equal to reflection in xz plane. sigma_yz(self); Set equal to reflection in yz plane. trace(self); Returns trace of transformation matrix. transform(self, arg0); Performs the transform arg2 * arg1 * arg2~. transpose(self); Performs transposition of matrix operation. unit(self); Set equal to a unit matrix. zero(self); Zero out the symmetry operation. Methods Documentation. E(self: psi4.core.SymmetryOperation) → None¶; Set equal to E. c2_x(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the x axis. c2_y(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the y axis. c2_z(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the z axis. i(self: psi4.core.SymmetryOperation) → None¶; Set equal to an inversion. matrix(self: psi4.core.SymmetryOperation) → List[List[float[3]][3]]¶; Return the matrix for the operation on Cartesians. operate(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation¶; Performs the operation arg2 * arg1. rotate_n(self: psi4.core.SymmetryOperation, arg0: int) → None¶; Set equal to a clockwise rotati",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.SymmetryOperation.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.SymmetryOperation.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.SymmetryOperation.html:1042,Performance,Perform,Performs,1042," .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SymmetryOperation. SymmetryOperation¶. class psi4.core.SymmetryOperation¶; Bases: pybind11_object; Class to provide a 3 by 3 matrix representation of a symmetry operation, such as a rotation or reflection.; Methods Summary. E(self); Set equal to E. c2_x(self); Set equal to C2 about the x axis. c2_y(self); Set equal to C2 about the y axis. c2_z(self); Set equal to C2 about the z axis. i(self); Set equal to an inversion. matrix(self); Return the matrix for the operation on Cartesians. operate(self, arg0); Performs the operation arg2 * arg1. rotate_n(self, arg0); Set equal to a clockwise rotation by 2pi/n. rotate_theta(self, arg0); Set equal to a clockwise rotation by theta. sigma_xy(self); Set equal to reflection in xy plane. sigma_xz(self); Set equal to reflection in xz plane. sigma_yz(self); Set equal to reflection in yz plane. trace(self); Returns trace of transformation matrix. transform(self, arg0); Performs the transform arg2 * arg1 * arg2~. transpose(self); Performs transposition of matrix operation. unit(self); Set equal to a unit matrix. zero(self); Zero out the symmetry operation. Methods Documentation. E(self: psi4.core.SymmetryOperation) → None¶; Set equal to E. c2_x(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the x axis. c2_y(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the y axis. c2_z(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the z axis. i(self: psi4.core.SymmetryOperation) → None¶; Set equal to an inversion. matrix(self: psi4.core.SymmetryOperation) → List[List[float[3]][3]]¶; Return the matrix for the operation on Cartesians. operate(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation¶; Performs the operation arg2 * arg1. rotate_n(self: psi4.core.SymmetryOperation, arg0: int) → None¶; Set equal to a clockwise rotation by 2pi/n. rotate_theta(self: psi4.core.SymmetryO",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.SymmetryOperation.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.SymmetryOperation.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.SymmetryOperation.html:1103,Performance,Perform,Performs,1103,"nd Python; SymmetryOperation. SymmetryOperation¶. class psi4.core.SymmetryOperation¶; Bases: pybind11_object; Class to provide a 3 by 3 matrix representation of a symmetry operation, such as a rotation or reflection.; Methods Summary. E(self); Set equal to E. c2_x(self); Set equal to C2 about the x axis. c2_y(self); Set equal to C2 about the y axis. c2_z(self); Set equal to C2 about the z axis. i(self); Set equal to an inversion. matrix(self); Return the matrix for the operation on Cartesians. operate(self, arg0); Performs the operation arg2 * arg1. rotate_n(self, arg0); Set equal to a clockwise rotation by 2pi/n. rotate_theta(self, arg0); Set equal to a clockwise rotation by theta. sigma_xy(self); Set equal to reflection in xy plane. sigma_xz(self); Set equal to reflection in xz plane. sigma_yz(self); Set equal to reflection in yz plane. trace(self); Returns trace of transformation matrix. transform(self, arg0); Performs the transform arg2 * arg1 * arg2~. transpose(self); Performs transposition of matrix operation. unit(self); Set equal to a unit matrix. zero(self); Zero out the symmetry operation. Methods Documentation. E(self: psi4.core.SymmetryOperation) → None¶; Set equal to E. c2_x(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the x axis. c2_y(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the y axis. c2_z(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the z axis. i(self: psi4.core.SymmetryOperation) → None¶; Set equal to an inversion. matrix(self: psi4.core.SymmetryOperation) → List[List[float[3]][3]]¶; Return the matrix for the operation on Cartesians. operate(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation¶; Performs the operation arg2 * arg1. rotate_n(self: psi4.core.SymmetryOperation, arg0: int) → None¶; Set equal to a clockwise rotation by 2pi/n. rotate_theta(self: psi4.core.SymmetryOperation, arg0: float) → None¶; Set equal to a clockwise rotatio",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.SymmetryOperation.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.SymmetryOperation.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.SymmetryOperation.html:1870,Performance,Perform,Performs,1870,"et equal to reflection in xz plane. sigma_yz(self); Set equal to reflection in yz plane. trace(self); Returns trace of transformation matrix. transform(self, arg0); Performs the transform arg2 * arg1 * arg2~. transpose(self); Performs transposition of matrix operation. unit(self); Set equal to a unit matrix. zero(self); Zero out the symmetry operation. Methods Documentation. E(self: psi4.core.SymmetryOperation) → None¶; Set equal to E. c2_x(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the x axis. c2_y(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the y axis. c2_z(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the z axis. i(self: psi4.core.SymmetryOperation) → None¶; Set equal to an inversion. matrix(self: psi4.core.SymmetryOperation) → List[List[float[3]][3]]¶; Return the matrix for the operation on Cartesians. operate(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation¶; Performs the operation arg2 * arg1. rotate_n(self: psi4.core.SymmetryOperation, arg0: int) → None¶; Set equal to a clockwise rotation by 2pi/n. rotate_theta(self: psi4.core.SymmetryOperation, arg0: float) → None¶; Set equal to a clockwise rotation by theta. sigma_xy(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in xy plane. sigma_xz(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in xz plane. sigma_yz(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in yz plane. trace(self: psi4.core.SymmetryOperation) → float¶; Returns trace of transformation matrix. transform(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation¶; Performs the transform arg2 * arg1 * arg2~. transpose(self: psi4.core.SymmetryOperation) → None¶; Performs transposition of matrix operation. unit(self: psi4.core.SymmetryOperation) → None¶; Set equal to a unit matrix. zero(self: psi4.core.SymmetryOperation) → None¶; Zero out ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.SymmetryOperation.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.SymmetryOperation.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.SymmetryOperation.html:2601,Performance,Perform,Performs,2601,"Set equal to an inversion. matrix(self: psi4.core.SymmetryOperation) → List[List[float[3]][3]]¶; Return the matrix for the operation on Cartesians. operate(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation¶; Performs the operation arg2 * arg1. rotate_n(self: psi4.core.SymmetryOperation, arg0: int) → None¶; Set equal to a clockwise rotation by 2pi/n. rotate_theta(self: psi4.core.SymmetryOperation, arg0: float) → None¶; Set equal to a clockwise rotation by theta. sigma_xy(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in xy plane. sigma_xz(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in xz plane. sigma_yz(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in yz plane. trace(self: psi4.core.SymmetryOperation) → float¶; Returns trace of transformation matrix. transform(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation¶; Performs the transform arg2 * arg1 * arg2~. transpose(self: psi4.core.SymmetryOperation) → None¶; Performs transposition of matrix operation. unit(self: psi4.core.SymmetryOperation) → None¶; Set equal to a unit matrix. zero(self: psi4.core.SymmetryOperation) → None¶; Zero out the symmetry operation. table of contents. SymmetryOperation; SymmetryOperation; SymmetryOperation.E(); SymmetryOperation.c2_x(); SymmetryOperation.c2_y(); SymmetryOperation.c2_z(); SymmetryOperation.i(); SymmetryOperation.matrix(); SymmetryOperation.operate(); SymmetryOperation.rotate_n(); SymmetryOperation.rotate_theta(); SymmetryOperation.sigma_xy(); SymmetryOperation.sigma_xz(); SymmetryOperation.sigma_yz(); SymmetryOperation.trace(); SymmetryOperation.transform(); SymmetryOperation.transpose(); SymmetryOperation.unit(); SymmetryOperation.zero(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SymmetryOperation. © Copyright 2007-2023",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.SymmetryOperation.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.SymmetryOperation.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.SymmetryOperation.html:2699,Performance,Perform,Performs,2699,"¶; Return the matrix for the operation on Cartesians. operate(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation¶; Performs the operation arg2 * arg1. rotate_n(self: psi4.core.SymmetryOperation, arg0: int) → None¶; Set equal to a clockwise rotation by 2pi/n. rotate_theta(self: psi4.core.SymmetryOperation, arg0: float) → None¶; Set equal to a clockwise rotation by theta. sigma_xy(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in xy plane. sigma_xz(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in xz plane. sigma_yz(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in yz plane. trace(self: psi4.core.SymmetryOperation) → float¶; Returns trace of transformation matrix. transform(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation¶; Performs the transform arg2 * arg1 * arg2~. transpose(self: psi4.core.SymmetryOperation) → None¶; Performs transposition of matrix operation. unit(self: psi4.core.SymmetryOperation) → None¶; Set equal to a unit matrix. zero(self: psi4.core.SymmetryOperation) → None¶; Zero out the symmetry operation. table of contents. SymmetryOperation; SymmetryOperation; SymmetryOperation.E(); SymmetryOperation.c2_x(); SymmetryOperation.c2_y(); SymmetryOperation.c2_z(); SymmetryOperation.i(); SymmetryOperation.matrix(); SymmetryOperation.operate(); SymmetryOperation.rotate_n(); SymmetryOperation.rotate_theta(); SymmetryOperation.sigma_xy(); SymmetryOperation.sigma_xz(); SymmetryOperation.sigma_yz(); SymmetryOperation.trace(); SymmetryOperation.transform(); SymmetryOperation.transpose(); SymmetryOperation.unit(); SymmetryOperation.zero(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SymmetryOperation. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.SymmetryOperation.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.SymmetryOperation.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.test_matrix_dpd_interface.html:523,Deployability,update,updated,523,"﻿. test_matrix_dpd_interface. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; test_matrix_dpd_interface. test_matrix_dpd_interface¶. psi4.core.test_matrix_dpd_interface() → bool¶. table of contents. test_matrix_dpd_interface; test_matrix_dpd_interface(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; test_matrix_dpd_interface. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.test_matrix_dpd_interface.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.test_matrix_dpd_interface.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.ThreeCenterOverlapInt.html:845,Deployability,update,updated,845,"﻿. ThreeCenterOverlapInt. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ThreeCenterOverlapInt. ThreeCenterOverlapInt¶. class psi4.core.ThreeCenterOverlapInt¶; Bases: pybind11_object; Three center overlap integrals; Methods Summary. compute_shell(self, arg0, arg1, arg2); Compute the integrals of the form (a|b|c). Methods Documentation. compute_shell(self: psi4.core.ThreeCenterOverlapInt, arg0: int, arg1: int, arg2: int) → None¶; Compute the integrals of the form (a|b|c). table of contents. ThreeCenterOverlapInt; ThreeCenterOverlapInt; ThreeCenterOverlapInt.compute_shell(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ThreeCenterOverlapInt. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.ThreeCenterOverlapInt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.ThreeCenterOverlapInt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.timer_off.html:444,Deployability,update,updated,444,"﻿. timer_off. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; timer_off. timer_off¶. psi4.core.timer_off(label: str) → None¶; Stop timer with label. table of contents. timer_off; timer_off(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; timer_off. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.timer_off.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.timer_off.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.timer_on.html:485,Deployability,update,updated,485,"﻿. timer_on. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; timer_on. timer_on¶. psi4.core.timer_on(label: str) → None¶; Start timer with label. Needs to be paired with psi4.core.timer_off(). table of contents. timer_on; timer_on(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; timer_on. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.timer_on.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.timer_on.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.TLaplaceDenominator.html:1326,Deployability,update,updated,1326,"﻿. TLaplaceDenominator. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TLaplaceDenominator. TLaplaceDenominator¶. class psi4.core.TLaplaceDenominator¶; Bases: pybind11_object; Computer class for a Laplace factorization of the six-index energy denominator in coupled-cluster theory; Methods Summary. denominator_occ(self); Returns the occupied orbital Laplace weights of the factorized triples denominator (nweights * nocc). denominator_vir(self); Returns the virtual orbital Laplace weights of the factorized triples denominator (nweights * nvirt). Methods Documentation. denominator_occ(self: psi4.core.TLaplaceDenominator) → psi4.core.Matrix¶; Returns the occupied orbital Laplace weights of the factorized triples denominator (nweights * nocc). denominator_vir(self: psi4.core.TLaplaceDenominator) → psi4.core.Matrix¶; Returns the virtual orbital Laplace weights of the factorized triples denominator (nweights * nvirt). table of contents. TLaplaceDenominator; TLaplaceDenominator; TLaplaceDenominator.denominator_occ(); TLaplaceDenominator.denominator_vir(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TLaplaceDenominator. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.TLaplaceDenominator.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.TLaplaceDenominator.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.TLaplaceDenominator.html:293,Energy Efficiency,energy,energy,293,"﻿. TLaplaceDenominator. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TLaplaceDenominator. TLaplaceDenominator¶. class psi4.core.TLaplaceDenominator¶; Bases: pybind11_object; Computer class for a Laplace factorization of the six-index energy denominator in coupled-cluster theory; Methods Summary. denominator_occ(self); Returns the occupied orbital Laplace weights of the factorized triples denominator (nweights * nocc). denominator_vir(self); Returns the virtual orbital Laplace weights of the factorized triples denominator (nweights * nvirt). Methods Documentation. denominator_occ(self: psi4.core.TLaplaceDenominator) → psi4.core.Matrix¶; Returns the occupied orbital Laplace weights of the factorized triples denominator (nweights * nocc). denominator_vir(self: psi4.core.TLaplaceDenominator) → psi4.core.Matrix¶; Returns the virtual orbital Laplace weights of the factorized triples denominator (nweights * nvirt). table of contents. TLaplaceDenominator; TLaplaceDenominator; TLaplaceDenominator.denominator_occ(); TLaplaceDenominator.denominator_vir(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TLaplaceDenominator. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.TLaplaceDenominator.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.TLaplaceDenominator.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.TracelessQuadrupoleInt.html:559,Deployability,update,updated,559,"﻿. TracelessQuadrupoleInt. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TracelessQuadrupoleInt. TracelessQuadrupoleInt¶. class psi4.core.TracelessQuadrupoleInt¶; Bases: OneBodyAOInt; Computes traceless quadrupole integrals. table of contents. TracelessQuadrupoleInt; TracelessQuadrupoleInt. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TracelessQuadrupoleInt. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.TracelessQuadrupoleInt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.TracelessQuadrupoleInt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.triplet.html:1108,Deployability,update,updated,1108,"﻿. triplet. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; triplet. triplet¶. psi4.core.triplet(A: psi4.core.Matrix, B: psi4.core.Matrix, C: psi4.core.Matrix, transA: bool = False, transB: bool = False, transC: bool = False) → psi4.core.Matrix¶; Returns the multiplication of three matrices, with options to transpose each beforehand. Parameters:. A – First matrix to multiply.; B – Second matrix to multiply.; C – Third matrix to multiply.; transA – Transpose the first matrix before operations?; transB – Transpose the second matrix before operations?; transC – Transpose the third matrix before operations?. Returns:; New matrix of ABC. Return type:; Matrix. Notes. (AB)C vs. A(BC) selected by cost analysis of overall (not per-irrep) dimensions.; If A, B, C not of the the same symmetry, always computed as (AB)C. table of contents. triplet; triplet(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; triplet. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.triplet.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.triplet.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.tstart.html:441,Deployability,update,updated,441,"﻿. tstart. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; tstart. tstart¶. psi4.core.tstart() → None¶; Start module-level timer. Only one active at once. table of contents. tstart; tstart(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; tstart. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.tstart.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.tstart.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.tstop.html:457,Deployability,update,updated,457,"﻿. tstop. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; tstop. tstop¶. psi4.core.tstop() → None¶; Stop module-level timer. Prints user, system, and total times to outfile. table of contents. tstop; tstop(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; tstop. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.tstop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.tstop.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.TwoBodyAOInt.html:465,Deployability,Update,Update,465,"﻿. TwoBodyAOInt. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TwoBodyAOInt. TwoBodyAOInt¶. class psi4.core.TwoBodyAOInt¶; Bases: pybind11_object; Two body integral base class; Methods Summary. compute_shell(self, arg0, arg1, arg2, arg3); Compute ERIs between 4 shells. shell_significant(self, arg0, arg1, arg2, arg3); Determines if the P,Q,R,S shell combination is significant. update_density(self, arg0); Update density matrix (c1 symmetry) for Density-matrix based integral screening. Methods Documentation. compute_shell(self: psi4.core.TwoBodyAOInt, arg0: int, arg1: int, arg2: int, arg3: int) → int¶; Compute ERIs between 4 shells. shell_significant(self: psi4.core.TwoBodyAOInt, arg0: int, arg1: int, arg2: int, arg3: int) → bool¶; Determines if the P,Q,R,S shell combination is significant. update_density(self: psi4.core.TwoBodyAOInt, arg0: List[psi4.core.Matrix]) → None¶; Update density matrix (c1 symmetry) for Density-matrix based integral screening. table of contents. TwoBodyAOInt; TwoBodyAOInt; TwoBodyAOInt.compute_shell(); TwoBodyAOInt.shell_significant(); TwoBodyAOInt.update_density(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TwoBodyAOInt. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.TwoBodyAOInt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.TwoBodyAOInt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.TwoBodyAOInt.html:941,Deployability,Update,Update,941,"﻿. TwoBodyAOInt. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TwoBodyAOInt. TwoBodyAOInt¶. class psi4.core.TwoBodyAOInt¶; Bases: pybind11_object; Two body integral base class; Methods Summary. compute_shell(self, arg0, arg1, arg2, arg3); Compute ERIs between 4 shells. shell_significant(self, arg0, arg1, arg2, arg3); Determines if the P,Q,R,S shell combination is significant. update_density(self, arg0); Update density matrix (c1 symmetry) for Density-matrix based integral screening. Methods Documentation. compute_shell(self: psi4.core.TwoBodyAOInt, arg0: int, arg1: int, arg2: int, arg3: int) → int¶; Compute ERIs between 4 shells. shell_significant(self: psi4.core.TwoBodyAOInt, arg0: int, arg1: int, arg2: int, arg3: int) → bool¶; Determines if the P,Q,R,S shell combination is significant. update_density(self: psi4.core.TwoBodyAOInt, arg0: List[psi4.core.Matrix]) → None¶; Update density matrix (c1 symmetry) for Density-matrix based integral screening. table of contents. TwoBodyAOInt; TwoBodyAOInt; TwoBodyAOInt.compute_shell(); TwoBodyAOInt.shell_significant(); TwoBodyAOInt.update_density(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TwoBodyAOInt. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.TwoBodyAOInt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.TwoBodyAOInt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.TwoBodyAOInt.html:1363,Deployability,update,updated,1363,"﻿. TwoBodyAOInt. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TwoBodyAOInt. TwoBodyAOInt¶. class psi4.core.TwoBodyAOInt¶; Bases: pybind11_object; Two body integral base class; Methods Summary. compute_shell(self, arg0, arg1, arg2, arg3); Compute ERIs between 4 shells. shell_significant(self, arg0, arg1, arg2, arg3); Determines if the P,Q,R,S shell combination is significant. update_density(self, arg0); Update density matrix (c1 symmetry) for Density-matrix based integral screening. Methods Documentation. compute_shell(self: psi4.core.TwoBodyAOInt, arg0: int, arg1: int, arg2: int, arg3: int) → int¶; Compute ERIs between 4 shells. shell_significant(self: psi4.core.TwoBodyAOInt, arg0: int, arg1: int, arg2: int, arg3: int) → bool¶; Determines if the P,Q,R,S shell combination is significant. update_density(self: psi4.core.TwoBodyAOInt, arg0: List[psi4.core.Matrix]) → None¶; Update density matrix (c1 symmetry) for Density-matrix based integral screening. table of contents. TwoBodyAOInt; TwoBodyAOInt; TwoBodyAOInt.compute_shell(); TwoBodyAOInt.shell_significant(); TwoBodyAOInt.update_density(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TwoBodyAOInt. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.TwoBodyAOInt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.TwoBodyAOInt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.TwoElectronInt.html:1090,Deployability,update,updated,1090,"﻿. TwoElectronInt. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TwoElectronInt. TwoElectronInt¶. class psi4.core.TwoElectronInt¶; Bases: TwoBodyAOInt; Computes two-electron repulsion integrals; Methods Summary. compute_shell(self, arg0, arg1, arg2, arg3); Compute ERIs between 4 shells. shell_significant(self, arg0, arg1, arg2, arg3); Determines if the P,Q,R,S shell combination is significant. Methods Documentation. compute_shell(self: psi4.core.TwoElectronInt, arg0: int, arg1: int, arg2: int, arg3: int) → int¶; Compute ERIs between 4 shells. shell_significant(self: psi4.core.TwoElectronInt, arg0: int, arg1: int, arg2: int, arg3: int) → bool¶; Determines if the P,Q,R,S shell combination is significant. table of contents. TwoElectronInt; TwoElectronInt; TwoElectronInt.compute_shell(); TwoElectronInt.shell_significant(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TwoElectronInt. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.TwoElectronInt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.TwoElectronInt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.UHF.html:1452,Deployability,update,updated,1452,"﻿. UHF. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; UHF. UHF¶. class psi4.core.UHF¶; Bases: HF; docstring; Methods Summary. c1_deep_copy(self, basis); Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute_orbital_gradient(save_fock, ...); docstring. diis(self, arg0); docstring. mintshelper(self); The MintsHelper object. stability_analysis(self); Assess wfn stability and correct if requested. Methods Documentation. c1_deep_copy(self: psi4.core.UHF, basis: psi4.core.BasisSet) → psi4.core.UHF¶; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute_orbital_gradient(save_fock, max_diis_vectors)¶; docstring. Return type:; float. Parameters:. save_fock (bool) – ; max_diis_vectors (int) – . diis(self: psi4.core.HF, arg0: float) → bool¶; docstring. mintshelper(self: psi4.core.UHF) → psi4.core.MintsHelper¶; The MintsHelper object. stability_analysis(self: psi4.core.HF) → bool¶; Assess wfn stability and correct if requested. table of contents. UHF; UHF; UHF.c1_deep_copy(); UHF.compute_orbital_gradient(); UHF.diis(); UHF.mintshelper(); UHF.stability_analysis(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; UHF. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.UHF.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.UHF.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.UKSFunctions.html:461,Deployability,update,updated,461,"﻿. UKSFunctions. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; UKSFunctions. UKSFunctions¶. class psi4.core.UKSFunctions¶; Bases: PointFunctions; docstring. table of contents. UKSFunctions; UKSFunctions. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; UKSFunctions. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.UKSFunctions.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.UKSFunctions.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.variable.html:1370,Deployability,update,updated,1370,"﻿. variable. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variable. variable¶. psi4.core.variable(key)¶; Return copy of scalar or array QCVariable; key from global memory. Parameters:; key (str) – Case-insensitive key to global double or Matrix; storage maps. Returns:; Requested QCVariable from global memory. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> psi4.gradient(""hf/cc-pvdz""); >>> psi4.variable(""CURRENT ENERGY""); -100.00985995185668; >>> psi4.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> psi4.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> psi4.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). table of contents. variable; variable(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variable. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.variable.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.variable.html:474,Energy Efficiency,charge,charges,474,"﻿. variable. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variable. variable¶. psi4.core.variable(key)¶; Return copy of scalar or array QCVariable; key from global memory. Parameters:; key (str) – Case-insensitive key to global double or Matrix; storage maps. Returns:; Requested QCVariable from global memory. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> psi4.gradient(""hf/cc-pvdz""); >>> psi4.variable(""CURRENT ENERGY""); -100.00985995185668; >>> psi4.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> psi4.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> psi4.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). table of contents. variable; variable(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variable. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.variable.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.variable.html:796,Energy Efficiency,ENERGY,ENERGY,796,"﻿. variable. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variable. variable¶. psi4.core.variable(key)¶; Return copy of scalar or array QCVariable; key from global memory. Parameters:; key (str) – Case-insensitive key to global double or Matrix; storage maps. Returns:; Requested QCVariable from global memory. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> psi4.gradient(""hf/cc-pvdz""); >>> psi4.variable(""CURRENT ENERGY""); -100.00985995185668; >>> psi4.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> psi4.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> psi4.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). table of contents. variable; variable(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variable. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.variable.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.variable.html:3,Modifiability,variab,variable,3,"﻿. variable. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variable. variable¶. psi4.core.variable(key)¶; Return copy of scalar or array QCVariable; key from global memory. Parameters:; key (str) – Case-insensitive key to global double or Matrix; storage maps. Returns:; Requested QCVariable from global memory. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> psi4.gradient(""hf/cc-pvdz""); >>> psi4.variable(""CURRENT ENERGY""); -100.00985995185668; >>> psi4.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> psi4.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> psi4.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). table of contents. variable; variable(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variable. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.variable.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.variable.html:117,Modifiability,variab,variable,117,"﻿. variable. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variable. variable¶. psi4.core.variable(key)¶; Return copy of scalar or array QCVariable; key from global memory. Parameters:; key (str) – Case-insensitive key to global double or Matrix; storage maps. Returns:; Requested QCVariable from global memory. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> psi4.gradient(""hf/cc-pvdz""); >>> psi4.variable(""CURRENT ENERGY""); -100.00985995185668; >>> psi4.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> psi4.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> psi4.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). table of contents. variable; variable(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variable. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.variable.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.variable.html:127,Modifiability,variab,variable,127,"﻿. variable. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variable. variable¶. psi4.core.variable(key)¶; Return copy of scalar or array QCVariable; key from global memory. Parameters:; key (str) – Case-insensitive key to global double or Matrix; storage maps. Returns:; Requested QCVariable from global memory. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> psi4.gradient(""hf/cc-pvdz""); >>> psi4.variable(""CURRENT ENERGY""); -100.00985995185668; >>> psi4.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> psi4.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> psi4.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). table of contents. variable; variable(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variable. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.variable.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.variable.html:148,Modifiability,variab,variable,148,"﻿. variable. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variable. variable¶. psi4.core.variable(key)¶; Return copy of scalar or array QCVariable; key from global memory. Parameters:; key (str) – Case-insensitive key to global double or Matrix; storage maps. Returns:; Requested QCVariable from global memory. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> psi4.gradient(""hf/cc-pvdz""); >>> psi4.variable(""CURRENT ENERGY""); -100.00985995185668; >>> psi4.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> psi4.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> psi4.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). table of contents. variable; variable(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variable. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.variable.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.variable.html:377,Modifiability,variab,variables,377,"﻿. variable. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variable. variable¶. psi4.core.variable(key)¶; Return copy of scalar or array QCVariable; key from global memory. Parameters:; key (str) – Case-insensitive key to global double or Matrix; storage maps. Returns:; Requested QCVariable from global memory. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> psi4.gradient(""hf/cc-pvdz""); >>> psi4.variable(""CURRENT ENERGY""); -100.00985995185668; >>> psi4.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> psi4.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> psi4.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). table of contents. variable; variable(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variable. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.variable.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.variable.html:418,Modifiability,variab,variables,418,"﻿. variable. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variable. variable¶. psi4.core.variable(key)¶; Return copy of scalar or array QCVariable; key from global memory. Parameters:; key (str) – Case-insensitive key to global double or Matrix; storage maps. Returns:; Requested QCVariable from global memory. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> psi4.gradient(""hf/cc-pvdz""); >>> psi4.variable(""CURRENT ENERGY""); -100.00985995185668; >>> psi4.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> psi4.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> psi4.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). table of contents. variable; variable(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variable. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.variable.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.variable.html:548,Modifiability,variab,variables,548,"﻿. variable. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variable. variable¶. psi4.core.variable(key)¶; Return copy of scalar or array QCVariable; key from global memory. Parameters:; key (str) – Case-insensitive key to global double or Matrix; storage maps. Returns:; Requested QCVariable from global memory. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> psi4.gradient(""hf/cc-pvdz""); >>> psi4.variable(""CURRENT ENERGY""); -100.00985995185668; >>> psi4.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> psi4.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> psi4.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). table of contents. variable; variable(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variable. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.variable.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.variable.html:778,Modifiability,variab,variable,778,"﻿. variable. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variable. variable¶. psi4.core.variable(key)¶; Return copy of scalar or array QCVariable; key from global memory. Parameters:; key (str) – Case-insensitive key to global double or Matrix; storage maps. Returns:; Requested QCVariable from global memory. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> psi4.gradient(""hf/cc-pvdz""); >>> psi4.variable(""CURRENT ENERGY""); -100.00985995185668; >>> psi4.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> psi4.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> psi4.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). table of contents. variable; variable(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variable. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.variable.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.variable.html:836,Modifiability,variab,variable,836,"﻿. variable. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variable. variable¶. psi4.core.variable(key)¶; Return copy of scalar or array QCVariable; key from global memory. Parameters:; key (str) – Case-insensitive key to global double or Matrix; storage maps. Returns:; Requested QCVariable from global memory. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> psi4.gradient(""hf/cc-pvdz""); >>> psi4.variable(""CURRENT ENERGY""); -100.00985995185668; >>> psi4.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> psi4.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> psi4.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). table of contents. variable; variable(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variable. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.variable.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.variable.html:906,Modifiability,variab,variable,906,"﻿. variable. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variable. variable¶. psi4.core.variable(key)¶; Return copy of scalar or array QCVariable; key from global memory. Parameters:; key (str) – Case-insensitive key to global double or Matrix; storage maps. Returns:; Requested QCVariable from global memory. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> psi4.gradient(""hf/cc-pvdz""); >>> psi4.variable(""CURRENT ENERGY""); -100.00985995185668; >>> psi4.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> psi4.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> psi4.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). table of contents. variable; variable(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variable. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.variable.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.variable.html:987,Modifiability,variab,variable,987,"﻿. variable. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variable. variable¶. psi4.core.variable(key)¶; Return copy of scalar or array QCVariable; key from global memory. Parameters:; key (str) – Case-insensitive key to global double or Matrix; storage maps. Returns:; Requested QCVariable from global memory. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> psi4.gradient(""hf/cc-pvdz""); >>> psi4.variable(""CURRENT ENERGY""); -100.00985995185668; >>> psi4.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> psi4.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> psi4.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). table of contents. variable; variable(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variable. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.variable.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.variable.html:1153,Modifiability,variab,variable,1153,"﻿. variable. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variable. variable¶. psi4.core.variable(key)¶; Return copy of scalar or array QCVariable; key from global memory. Parameters:; key (str) – Case-insensitive key to global double or Matrix; storage maps. Returns:; Requested QCVariable from global memory. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> psi4.gradient(""hf/cc-pvdz""); >>> psi4.variable(""CURRENT ENERGY""); -100.00985995185668; >>> psi4.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> psi4.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> psi4.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). table of contents. variable; variable(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variable. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.variable.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.variable.html:1163,Modifiability,variab,variable,1163,"﻿. variable. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variable. variable¶. psi4.core.variable(key)¶; Return copy of scalar or array QCVariable; key from global memory. Parameters:; key (str) – Case-insensitive key to global double or Matrix; storage maps. Returns:; Requested QCVariable from global memory. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> psi4.gradient(""hf/cc-pvdz""); >>> psi4.variable(""CURRENT ENERGY""); -100.00985995185668; >>> psi4.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> psi4.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> psi4.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). table of contents. variable; variable(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variable. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.variable.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.variable.html:1313,Modifiability,variab,variable,1313,"﻿. variable. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variable. variable¶. psi4.core.variable(key)¶; Return copy of scalar or array QCVariable; key from global memory. Parameters:; key (str) – Case-insensitive key to global double or Matrix; storage maps. Returns:; Requested QCVariable from global memory. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> psi4.gradient(""hf/cc-pvdz""); >>> psi4.variable(""CURRENT ENERGY""); -100.00985995185668; >>> psi4.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> psi4.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> psi4.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). table of contents. variable; variable(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variable. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.variable.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.variables.html:985,Deployability,update,updated,985,"﻿. variables. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variables. variables¶. psi4.core.variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from global memory. Parameters:; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. table of contents. variables; variables(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variables. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.variables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.variables.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.variables.html:524,Energy Efficiency,charge,charges,524,"﻿. variables. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variables. variables¶. psi4.core.variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from global memory. Parameters:; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. table of contents. variables; variables(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variables. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.variables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.variables.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.variables.html:3,Modifiability,variab,variables,3,"﻿. variables. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variables. variables¶. psi4.core.variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from global memory. Parameters:; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. table of contents. variables; variables(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variables. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.variables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.variables.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.variables.html:118,Modifiability,variab,variables,118,"﻿. variables. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variables. variables¶. psi4.core.variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from global memory. Parameters:; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. table of contents. variables; variables(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variables. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.variables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.variables.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.variables.html:129,Modifiability,variab,variables,129,"﻿. variables. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variables. variables¶. psi4.core.variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from global memory. Parameters:; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. table of contents. variables; variables(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variables. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.variables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.variables.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.variables.html:151,Modifiability,variab,variables,151,"﻿. variables. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variables. variables¶. psi4.core.variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from global memory. Parameters:; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. table of contents. variables; variables(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variables. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.variables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.variables.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.variables.html:427,Modifiability,variab,variables,427,"﻿. variables. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variables. variables¶. psi4.core.variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from global memory. Parameters:; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. table of contents. variables; variables(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variables. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.variables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.variables.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.variables.html:468,Modifiability,variab,variables,468,"﻿. variables. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variables. variables¶. psi4.core.variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from global memory. Parameters:; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. table of contents. variables; variables(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variables. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.variables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.variables.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.variables.html:598,Modifiability,variab,variables,598,"﻿. variables. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variables. variables¶. psi4.core.variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from global memory. Parameters:; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. table of contents. variables; variables(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variables. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.variables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.variables.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.variables.html:765,Modifiability,variab,variables,765,"﻿. variables. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variables. variables¶. psi4.core.variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from global memory. Parameters:; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. table of contents. variables; variables(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variables. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.variables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.variables.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.variables.html:776,Modifiability,variab,variables,776,"﻿. variables. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variables. variables¶. psi4.core.variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from global memory. Parameters:; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. table of contents. variables; variables(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variables. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.variables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.variables.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.variables.html:927,Modifiability,variab,variables,927,"﻿. variables. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variables. variables¶. psi4.core.variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from global memory. Parameters:; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. table of contents. variables; variables(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; variables. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.variables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.variables.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.VBase.html:4412,Deployability,update,updated,4412,"l(self: psi4.core.VBase) → psi4.core.SuperFunctional¶; Returns the interal superfunctional. get_block(self: psi4.core.VBase, arg0: int) → psi4.core.BlockOPoints¶; Returns the requested BlockOPoints. get_np_xyzw()¶; Returns the x, y, z, and weights of a grid as a tuple of NumPy array objects. Parameters:; self (VBase) – VBase instance. Return type:; Tuple[ndarray, ndarray, ndarray, ndarray]. grid(self: psi4.core.VBase) → psi4.core.DFTGrid¶; Returns the grid object. initialize(*args, **kwargs)¶; Overloaded function. initialize(self: psi4.core.VBase) -> None. doctsring. initialize(self: psi4.core.VBase) -> None. Initializes the V object. nblocks(self: psi4.core.VBase) → int¶; Total number of blocks. print_header(self: psi4.core.VBase) → None¶; Prints the objects header. properties(self: psi4.core.VBase) → List[psi4.core.PointFunctions]¶; Returns the properties computer. quadrature_values(self: psi4.core.VBase) → Dict[str, float]¶; Returns the quadrature values. set_D(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None¶; Sets the internal density. set_debug(self: psi4.core.VBase, arg0: int) → None¶; Sets the debug level of the object. set_print(self: psi4.core.VBase, arg0: int) → None¶; Sets the print level of the object. table of contents. VBase; VBase; VBase.Dao(); VBase.basis(); VBase.build(); VBase.build_collocation_cache(); VBase.clear_collocation_cache(); VBase.compute_V(); VBase.compute_Vx(); VBase.compute_gradient(); VBase.compute_hessain(); VBase.finalize(); VBase.functional(); VBase.get_block(); VBase.get_np_xyzw(); VBase.grid(); VBase.initialize(); VBase.nblocks(); VBase.print_header(); VBase.properties(); VBase.quadrature_values(); VBase.set_D(); VBase.set_debug(); VBase.set_print(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; VBase. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.VBase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.VBase.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.VBase.html:383,Performance,cache,cache,383,"﻿. VBase. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; VBase. VBase¶. class psi4.core.VBase¶; Bases: pybind11_object; docstring; Methods Summary. Dao(self, arg0); Returns internal AO density. basis(self); Returns the internal basis set. build(arg0, arg1, arg2). build_collocation_cache(self, arg0); Constructs a collocation cache to prevent recomputation. clear_collocation_cache(self); Clears the collocation cache. compute_V(self, arg0); doctsring. compute_Vx(self, arg0, arg1); doctsring. compute_gradient(self); Compute the DFT nuclear gradient contribution. compute_hessain(self); Compute the DFT nuclear Hessian contribution. finalize(*args, **kwargs); Overloaded function. functional(self); Returns the interal superfunctional. get_block(self, arg0); Returns the requested BlockOPoints. get_np_xyzw(); Returns the x, y, z, and weights of a grid as a tuple of NumPy array objects. grid(self); Returns the grid object. initialize(*args, **kwargs); Overloaded function. nblocks(self); Total number of blocks. print_header(self); Prints the objects header. properties(self); Returns the properties computer. quadrature_values(self); Returns the quadrature values. set_D(self, arg0); Sets the internal density. set_debug(self, arg0); Sets the debug level of the object. set_print(self, arg0); Sets the print level of the object. Methods Documentation. Dao(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None¶; Returns internal AO density. basis(self: psi4.core.VBase) → psi4.core.BasisSet¶; Returns the internal basis set. static build(arg0: psi4.core.BasisSet, arg1: psi4.core.SuperFunctional, arg2: str) → psi4.core.VBase¶. build_collocation_cache(self: psi4.core.VBase, arg0: int) → None¶; Constructs a collocation cache to prevent recomputation. clear_collocation_cache(self: psi4.core.VBase) → None¶; Clears the collocation cache. compute_V(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None¶; doctsring. compute_Vx(se",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.VBase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.VBase.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.VBase.html:469,Performance,cache,cache,469,"﻿. VBase. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; VBase. VBase¶. class psi4.core.VBase¶; Bases: pybind11_object; docstring; Methods Summary. Dao(self, arg0); Returns internal AO density. basis(self); Returns the internal basis set. build(arg0, arg1, arg2). build_collocation_cache(self, arg0); Constructs a collocation cache to prevent recomputation. clear_collocation_cache(self); Clears the collocation cache. compute_V(self, arg0); doctsring. compute_Vx(self, arg0, arg1); doctsring. compute_gradient(self); Compute the DFT nuclear gradient contribution. compute_hessain(self); Compute the DFT nuclear Hessian contribution. finalize(*args, **kwargs); Overloaded function. functional(self); Returns the interal superfunctional. get_block(self, arg0); Returns the requested BlockOPoints. get_np_xyzw(); Returns the x, y, z, and weights of a grid as a tuple of NumPy array objects. grid(self); Returns the grid object. initialize(*args, **kwargs); Overloaded function. nblocks(self); Total number of blocks. print_header(self); Prints the objects header. properties(self); Returns the properties computer. quadrature_values(self); Returns the quadrature values. set_D(self, arg0); Sets the internal density. set_debug(self, arg0); Sets the debug level of the object. set_print(self, arg0); Sets the print level of the object. Methods Documentation. Dao(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None¶; Returns internal AO density. basis(self: psi4.core.VBase) → psi4.core.BasisSet¶; Returns the internal basis set. static build(arg0: psi4.core.BasisSet, arg1: psi4.core.SuperFunctional, arg2: str) → psi4.core.VBase¶. build_collocation_cache(self: psi4.core.VBase, arg0: int) → None¶; Constructs a collocation cache to prevent recomputation. clear_collocation_cache(self: psi4.core.VBase) → None¶; Clears the collocation cache. compute_V(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None¶; doctsring. compute_Vx(se",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.VBase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.VBase.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.VBase.html:1787,Performance,cache,cache,1787," superfunctional. get_block(self, arg0); Returns the requested BlockOPoints. get_np_xyzw(); Returns the x, y, z, and weights of a grid as a tuple of NumPy array objects. grid(self); Returns the grid object. initialize(*args, **kwargs); Overloaded function. nblocks(self); Total number of blocks. print_header(self); Prints the objects header. properties(self); Returns the properties computer. quadrature_values(self); Returns the quadrature values. set_D(self, arg0); Sets the internal density. set_debug(self, arg0); Sets the debug level of the object. set_print(self, arg0); Sets the print level of the object. Methods Documentation. Dao(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None¶; Returns internal AO density. basis(self: psi4.core.VBase) → psi4.core.BasisSet¶; Returns the internal basis set. static build(arg0: psi4.core.BasisSet, arg1: psi4.core.SuperFunctional, arg2: str) → psi4.core.VBase¶. build_collocation_cache(self: psi4.core.VBase, arg0: int) → None¶; Constructs a collocation cache to prevent recomputation. clear_collocation_cache(self: psi4.core.VBase) → None¶; Clears the collocation cache. compute_V(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None¶; doctsring. compute_Vx(self: psi4.core.VBase, arg0: List[psi4.core.Matrix], arg1: List[psi4.core.Matrix]) → None¶; doctsring. compute_gradient(self: psi4.core.VBase) → psi4.core.Matrix¶; Compute the DFT nuclear gradient contribution. compute_hessain(self: psi4.core.VBase) → psi4.core.Matrix¶; Compute the DFT nuclear Hessian contribution. finalize(*args, **kwargs)¶; Overloaded function. finalize(self: psi4.core.VBase) -> None. doctsring. finalize(self: psi4.core.VBase) -> None. Finalizes the V object. functional(self: psi4.core.VBase) → psi4.core.SuperFunctional¶; Returns the interal superfunctional. get_block(self: psi4.core.VBase, arg0: int) → psi4.core.BlockOPoints¶; Returns the requested BlockOPoints. get_np_xyzw()¶; Returns the x, y, z, and weights of a grid as a tuple of NumPy array ob",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.VBase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.VBase.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.VBase.html:1898,Performance,cache,cache,1898,", y, z, and weights of a grid as a tuple of NumPy array objects. grid(self); Returns the grid object. initialize(*args, **kwargs); Overloaded function. nblocks(self); Total number of blocks. print_header(self); Prints the objects header. properties(self); Returns the properties computer. quadrature_values(self); Returns the quadrature values. set_D(self, arg0); Sets the internal density. set_debug(self, arg0); Sets the debug level of the object. set_print(self, arg0); Sets the print level of the object. Methods Documentation. Dao(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None¶; Returns internal AO density. basis(self: psi4.core.VBase) → psi4.core.BasisSet¶; Returns the internal basis set. static build(arg0: psi4.core.BasisSet, arg1: psi4.core.SuperFunctional, arg2: str) → psi4.core.VBase¶. build_collocation_cache(self: psi4.core.VBase, arg0: int) → None¶; Constructs a collocation cache to prevent recomputation. clear_collocation_cache(self: psi4.core.VBase) → None¶; Clears the collocation cache. compute_V(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None¶; doctsring. compute_Vx(self: psi4.core.VBase, arg0: List[psi4.core.Matrix], arg1: List[psi4.core.Matrix]) → None¶; doctsring. compute_gradient(self: psi4.core.VBase) → psi4.core.Matrix¶; Compute the DFT nuclear gradient contribution. compute_hessain(self: psi4.core.VBase) → psi4.core.Matrix¶; Compute the DFT nuclear Hessian contribution. finalize(*args, **kwargs)¶; Overloaded function. finalize(self: psi4.core.VBase) -> None. doctsring. finalize(self: psi4.core.VBase) -> None. Finalizes the V object. functional(self: psi4.core.VBase) → psi4.core.SuperFunctional¶; Returns the interal superfunctional. get_block(self: psi4.core.VBase, arg0: int) → psi4.core.BlockOPoints¶; Returns the requested BlockOPoints. get_np_xyzw()¶; Returns the x, y, z, and weights of a grid as a tuple of NumPy array objects. Parameters:; self (VBase) – VBase instance. Return type:; Tuple[ndarray, ndarray, ndarray, ndarray",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.VBase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.VBase.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.VBase.html:446,Usability,Clear,Clears,446,"﻿. VBase. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; VBase. VBase¶. class psi4.core.VBase¶; Bases: pybind11_object; docstring; Methods Summary. Dao(self, arg0); Returns internal AO density. basis(self); Returns the internal basis set. build(arg0, arg1, arg2). build_collocation_cache(self, arg0); Constructs a collocation cache to prevent recomputation. clear_collocation_cache(self); Clears the collocation cache. compute_V(self, arg0); doctsring. compute_Vx(self, arg0, arg1); doctsring. compute_gradient(self); Compute the DFT nuclear gradient contribution. compute_hessain(self); Compute the DFT nuclear Hessian contribution. finalize(*args, **kwargs); Overloaded function. functional(self); Returns the interal superfunctional. get_block(self, arg0); Returns the requested BlockOPoints. get_np_xyzw(); Returns the x, y, z, and weights of a grid as a tuple of NumPy array objects. grid(self); Returns the grid object. initialize(*args, **kwargs); Overloaded function. nblocks(self); Total number of blocks. print_header(self); Prints the objects header. properties(self); Returns the properties computer. quadrature_values(self); Returns the quadrature values. set_D(self, arg0); Sets the internal density. set_debug(self, arg0); Sets the debug level of the object. set_print(self, arg0); Sets the print level of the object. Methods Documentation. Dao(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None¶; Returns internal AO density. basis(self: psi4.core.VBase) → psi4.core.BasisSet¶; Returns the internal basis set. static build(arg0: psi4.core.BasisSet, arg1: psi4.core.SuperFunctional, arg2: str) → psi4.core.VBase¶. build_collocation_cache(self: psi4.core.VBase, arg0: int) → None¶; Constructs a collocation cache to prevent recomputation. clear_collocation_cache(self: psi4.core.VBase) → None¶; Clears the collocation cache. compute_V(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None¶; doctsring. compute_Vx(se",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.VBase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.VBase.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.VBase.html:1875,Usability,Clear,Clears,1875,", y, z, and weights of a grid as a tuple of NumPy array objects. grid(self); Returns the grid object. initialize(*args, **kwargs); Overloaded function. nblocks(self); Total number of blocks. print_header(self); Prints the objects header. properties(self); Returns the properties computer. quadrature_values(self); Returns the quadrature values. set_D(self, arg0); Sets the internal density. set_debug(self, arg0); Sets the debug level of the object. set_print(self, arg0); Sets the print level of the object. Methods Documentation. Dao(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None¶; Returns internal AO density. basis(self: psi4.core.VBase) → psi4.core.BasisSet¶; Returns the internal basis set. static build(arg0: psi4.core.BasisSet, arg1: psi4.core.SuperFunctional, arg2: str) → psi4.core.VBase¶. build_collocation_cache(self: psi4.core.VBase, arg0: int) → None¶; Constructs a collocation cache to prevent recomputation. clear_collocation_cache(self: psi4.core.VBase) → None¶; Clears the collocation cache. compute_V(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None¶; doctsring. compute_Vx(self: psi4.core.VBase, arg0: List[psi4.core.Matrix], arg1: List[psi4.core.Matrix]) → None¶; doctsring. compute_gradient(self: psi4.core.VBase) → psi4.core.Matrix¶; Compute the DFT nuclear gradient contribution. compute_hessain(self: psi4.core.VBase) → psi4.core.Matrix¶; Compute the DFT nuclear Hessian contribution. finalize(*args, **kwargs)¶; Overloaded function. finalize(self: psi4.core.VBase) -> None. doctsring. finalize(self: psi4.core.VBase) -> None. Finalizes the V object. functional(self: psi4.core.VBase) → psi4.core.SuperFunctional¶; Returns the interal superfunctional. get_block(self: psi4.core.VBase, arg0: int) → psi4.core.BlockOPoints¶; Returns the requested BlockOPoints. get_np_xyzw()¶; Returns the x, y, z, and weights of a grid as a tuple of NumPy array objects. Parameters:; self (VBase) – VBase instance. Return type:; Tuple[ndarray, ndarray, ndarray, ndarray",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.VBase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.VBase.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Vector.html:8780,Deployability,update,updated,8780,"dense=False)¶; Converts a PSI4 Matrix or Vector to a NumPy array. Either copies the; data or simply constructs a view. Parameters:. matrix (Union[Matrix, Vector]) – Pointers to which Psi4 core class should be used in the construction.; copy (bool) – Copy the data if True, return a view otherwise; dense (bool) – Converts irrepped Psi4 objects to diagonally blocked dense arrays if; True. Returns a list of arrays otherwise. Returns:; Returns a single or list of NumPy arrays depending on options. Return type:; ndarray or List[ndarray]. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; >>> data = psi4.core.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. to_serial()¶; Converts an object with a .nph accessor to a serialized dictionary. Parameters:; self (Union[Matrix, Vector]) – Matrix or Vector instance. Returns:; Serialized dictionary with keys:. shape; data : List[str]; type : {‘matrix’, ‘vector’}. Return type:; Dict[str, Any]. vector_dot(self: psi4.core.Vector, other: psi4.core.Vector) → float¶; Take the dot product of two vectors. zero(self: psi4.core.Vector) → None¶; Zeros the vector. table of contents. Vector; Vector; Vector.name; Vector.np; Vector.nph; Vector.shape; Vector.add(); Vector.array_interface(); Vector.axpby(); Vector.axpy(); Vector.clone(); Vector.copy(); Vector.dim(); Vector.dimpi(); Vector.from_array(); Vector.from_list(); Vector.from_serial(); Vector.get(); Vector.get_block(); Vector.init(); Vector.load(); Vector.nirrep(); Vector.np_read(); Vector.np_write(); Vector.print_out(); Vector.save(); Vector.scale(); Vector.set(); Vector.set_block(); Vector.to_array(); Vector.to_serial(); Vector.vector_dot(); Vector.zero(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; Vector. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Vector.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Vector.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Vector.html:7335,Integrability,depend,depending,7335,"ore.IO, file: int) → None¶; Save the vector to disk. scale(self: psi4.core.Vector, sc: float) → None¶; Scales the elements of a vector by sc. set(*args, **kwargs)¶; Overloaded function. set(self: psi4.core.Vector, m: int, val: float) -> None. Sets a single element value located at m. set(self: psi4.core.Vector, h: int, m: int, val: float) -> None. Sets a single element value located at m in irrep h. set_block(self: psi4.core.Vector, slice: psi4.core.Slice, block: psi4.core.ProtoVector) → None¶; Set a vector block. to_array(copy=True, dense=False)¶; Converts a PSI4 Matrix or Vector to a NumPy array. Either copies the; data or simply constructs a view. Parameters:. matrix (Union[Matrix, Vector]) – Pointers to which Psi4 core class should be used in the construction.; copy (bool) – Copy the data if True, return a view otherwise; dense (bool) – Converts irrepped Psi4 objects to diagonally blocked dense arrays if; True. Returns a list of arrays otherwise. Returns:; Returns a single or list of NumPy arrays depending on options. Return type:; ndarray or List[ndarray]. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; >>> data = psi4.core.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. to_serial()¶; Converts an object with a .nph accessor to a serialized dictionary. Parameters:; self (Union[Matrix, Vector]) – Matrix or Vector instance. Returns:; Serialized dictionary with keys:. shape; data : List[str]; type : {‘matrix’, ‘vector’}. Return type:; Dict[str, Any]. vector_dot(self: psi4.core.Vector, other: psi4.core.Vector) → float¶; Take the dot product of two vectors. zero(self: psi4.core.Vector) → None¶; Zeros the vector. table of contents. Vector; Vector; Vector.name; Vector.np; Vector.nph; Vector.shape; Vector.add(); Vector.array_interface(); Vector.axpby(); Vector.axpy(); Vector.clone(); Vector.copy(); Vector.dim(); Vector.dimpi(); Vector.from_array(); Vector.from_list(); Vector.from_serial(); Vector.get(",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Vector.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Vector.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Vector.html:1209,Performance,load,load,1209,"Summary. name; The name of the Vector. np; View with single irrep. nph; View with irreps. shape; Shape of the Psi4 data object. Methods Summary. add(*args, **kwargs); Overloaded function. array_interface(self). axpby(self, a, b, other); Adds to this vector scaled by b another vector scaled by a; self <- a * other + b * self. axpy(self, a, other); Adds to this vector (unscaled) another vector scaled by a; self <- a * other + self. clone(self); Clone the vector. copy(self, arg0); Copy another vector into this. dim(self[, h]); Returns the dimensions of the vector per irrep h. dimpi(self); Returns the Dimension object. from_array([name, dim1, dim2]); Converts a NumPy array or list of NumPy arrays into a PSI4 Matrix or Vector (irrepped if list). from_list(x). from_serial(); Converts serialized data to the correct Psi4 data type. get(*args, **kwargs); Overloaded function. get_block(self, slice); Get a vector block. init(self, arg0); Reallocate the data of the Vector. load(self, psio, file); Load the vector from disk. nirrep(self); Returns the number of irreps. np_read([prefix]); Reads the data from a NumPy compressed or uncompressed file using numpy.load(). np_write([filename, prefix]); Writes the irrepped matrix to a NumPy uncompressed file using numpy.savez(). print_out(self); Prints the vector to the output file. save(self, psio, file); Save the vector to disk. scale(self, sc); Scales the elements of a vector by sc. set(*args, **kwargs); Overloaded function. set_block(self, slice, block); Set a vector block. to_array([copy, dense]); Converts a PSI4 Matrix or Vector to a NumPy array. to_serial(); Converts an object with a .nph accessor to a serialized dictionary. vector_dot(self, other); Take the dot product of two vectors. zero(self); Zeros the vector. Attributes Documentation. name¶; The name of the Vector. Used in printing. np¶; View with single irrep. nph¶; View with irreps. shape¶; Shape of the Psi4 data object. Methods Documentation. add(*args, **kwargs)¶; Overload",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Vector.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Vector.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Vector.html:1233,Performance,Load,Load,1233,"Summary. name; The name of the Vector. np; View with single irrep. nph; View with irreps. shape; Shape of the Psi4 data object. Methods Summary. add(*args, **kwargs); Overloaded function. array_interface(self). axpby(self, a, b, other); Adds to this vector scaled by b another vector scaled by a; self <- a * other + b * self. axpy(self, a, other); Adds to this vector (unscaled) another vector scaled by a; self <- a * other + self. clone(self); Clone the vector. copy(self, arg0); Copy another vector into this. dim(self[, h]); Returns the dimensions of the vector per irrep h. dimpi(self); Returns the Dimension object. from_array([name, dim1, dim2]); Converts a NumPy array or list of NumPy arrays into a PSI4 Matrix or Vector (irrepped if list). from_list(x). from_serial(); Converts serialized data to the correct Psi4 data type. get(*args, **kwargs); Overloaded function. get_block(self, slice); Get a vector block. init(self, arg0); Reallocate the data of the Vector. load(self, psio, file); Load the vector from disk. nirrep(self); Returns the number of irreps. np_read([prefix]); Reads the data from a NumPy compressed or uncompressed file using numpy.load(). np_write([filename, prefix]); Writes the irrepped matrix to a NumPy uncompressed file using numpy.savez(). print_out(self); Prints the vector to the output file. save(self, psio, file); Save the vector to disk. scale(self, sc); Scales the elements of a vector by sc. set(*args, **kwargs); Overloaded function. set_block(self, slice, block); Set a vector block. to_array([copy, dense]); Converts a PSI4 Matrix or Vector to a NumPy array. to_serial(); Converts an object with a .nph accessor to a serialized dictionary. vector_dot(self, other); Take the dot product of two vectors. zero(self); Zeros the vector. Attributes Documentation. name¶; The name of the Vector. Used in printing. np¶; View with single irrep. nph¶; View with irreps. shape¶; Shape of the Psi4 data object. Methods Documentation. add(*args, **kwargs)¶; Overload",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Vector.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Vector.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Vector.html:1395,Performance,load,load,1395,"; Overloaded function. array_interface(self). axpby(self, a, b, other); Adds to this vector scaled by b another vector scaled by a; self <- a * other + b * self. axpy(self, a, other); Adds to this vector (unscaled) another vector scaled by a; self <- a * other + self. clone(self); Clone the vector. copy(self, arg0); Copy another vector into this. dim(self[, h]); Returns the dimensions of the vector per irrep h. dimpi(self); Returns the Dimension object. from_array([name, dim1, dim2]); Converts a NumPy array or list of NumPy arrays into a PSI4 Matrix or Vector (irrepped if list). from_list(x). from_serial(); Converts serialized data to the correct Psi4 data type. get(*args, **kwargs); Overloaded function. get_block(self, slice); Get a vector block. init(self, arg0); Reallocate the data of the Vector. load(self, psio, file); Load the vector from disk. nirrep(self); Returns the number of irreps. np_read([prefix]); Reads the data from a NumPy compressed or uncompressed file using numpy.load(). np_write([filename, prefix]); Writes the irrepped matrix to a NumPy uncompressed file using numpy.savez(). print_out(self); Prints the vector to the output file. save(self, psio, file); Save the vector to disk. scale(self, sc); Scales the elements of a vector by sc. set(*args, **kwargs); Overloaded function. set_block(self, slice, block); Set a vector block. to_array([copy, dense]); Converts a PSI4 Matrix or Vector to a NumPy array. to_serial(); Converts an object with a .nph accessor to a serialized dictionary. vector_dot(self, other); Take the dot product of two vectors. zero(self); Zeros the vector. Attributes Documentation. name¶; The name of the Vector. Used in printing. np¶; View with single irrep. nph¶; View with irreps. shape¶; Shape of the Psi4 data object. Methods Documentation. add(*args, **kwargs)¶; Overloaded function. add(self: psi4.core.Vector, m: int, val: float) -> None. Add to a single element value located at m. add(self: psi4.core.Vector, h: int, m: int, val: fl",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Vector.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Vector.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Vector.html:5134,Performance,load,load,5134,"4.core.Matrix.from_array(data). >>> irrep_data = [np.random.rand(2, 2), np.empty(shape=(0,3)), np.random.rand(4, 4)]; >>> matrix = psi4.core.Matrix.from_array(irrep_data); >>> print(matrix.rowdim().to_tuple()); (2, 0, 4). classmethod from_list(x)¶. classmethod from_serial()¶; Converts serialized data to the correct Psi4 data type. Parameters:. self – Pointer to which class to be constructed.; json_data (Dict[str, Any]) – Serialization of class. See to_serial() for data layout. Return type:; Union[Matrix, Vector]. get(*args, **kwargs)¶; Overloaded function. get(self: psi4.core.Vector, m: int) -> float. Returns a single element value located at m. get(self: psi4.core.Vector, h: int, m: int) -> float. Returns a single element value located at m in irrep h. get_block(self: psi4.core.Vector, slice: psi4.core.Slice) → psi4.core.Vector¶; Get a vector block. init(self: psi4.core.Vector, arg0: psi4.core.Dimension) → None¶; Reallocate the data of the Vector. Consider making a new object. load(self: psi4.core.Vector, psio: psi4.core.IO, file: int) → None¶; Load the vector from disk. nirrep(self: psi4.core.Vector) → int¶; Returns the number of irreps. classmethod np_read(prefix='')¶; Reads the data from a NumPy compressed or uncompressed file using; numpy.load(). Parameters:. self – Pointer to which class to be constructed.; filename (str) – File name to read.; prefix (str) – Name under which array was saved for NumPy. Return type:; Union[Matrix, Vector]. np_write(filename=None, prefix='')¶; Writes the irrepped matrix to a NumPy uncompressed file using numpy.savez().; Can return the packed data for saving many matrices into the same file. Parameters:. self (Union[Matrix, Vector]) – Instance to be serialized.; filename (Optional[str]) – File name where the data will be saved.; prefix (str) – Name of instance prepared for NumPy. Returns:; When filename given, it and dict serialization passed to; numpy.savez(), so .npz file saved and None returned.; When filename None, dict seriali",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Vector.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Vector.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Vector.html:5203,Performance,Load,Load,5203,"d(2, 2), np.empty(shape=(0,3)), np.random.rand(4, 4)]; >>> matrix = psi4.core.Matrix.from_array(irrep_data); >>> print(matrix.rowdim().to_tuple()); (2, 0, 4). classmethod from_list(x)¶. classmethod from_serial()¶; Converts serialized data to the correct Psi4 data type. Parameters:. self – Pointer to which class to be constructed.; json_data (Dict[str, Any]) – Serialization of class. See to_serial() for data layout. Return type:; Union[Matrix, Vector]. get(*args, **kwargs)¶; Overloaded function. get(self: psi4.core.Vector, m: int) -> float. Returns a single element value located at m. get(self: psi4.core.Vector, h: int, m: int) -> float. Returns a single element value located at m in irrep h. get_block(self: psi4.core.Vector, slice: psi4.core.Slice) → psi4.core.Vector¶; Get a vector block. init(self: psi4.core.Vector, arg0: psi4.core.Dimension) → None¶; Reallocate the data of the Vector. Consider making a new object. load(self: psi4.core.Vector, psio: psi4.core.IO, file: int) → None¶; Load the vector from disk. nirrep(self: psi4.core.Vector) → int¶; Returns the number of irreps. classmethod np_read(prefix='')¶; Reads the data from a NumPy compressed or uncompressed file using; numpy.load(). Parameters:. self – Pointer to which class to be constructed.; filename (str) – File name to read.; prefix (str) – Name under which array was saved for NumPy. Return type:; Union[Matrix, Vector]. np_write(filename=None, prefix='')¶; Writes the irrepped matrix to a NumPy uncompressed file using numpy.savez().; Can return the packed data for saving many matrices into the same file. Parameters:. self (Union[Matrix, Vector]) – Instance to be serialized.; filename (Optional[str]) – File name where the data will be saved.; prefix (str) – Name of instance prepared for NumPy. Returns:; When filename given, it and dict serialization passed to; numpy.savez(), so .npz file saved and None returned.; When filename None, dict serialization returned. Return type:; None or Dict[str, Any]. print_o",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Vector.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Vector.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Vector.html:5405,Performance,load,load,5405,"erial()¶; Converts serialized data to the correct Psi4 data type. Parameters:. self – Pointer to which class to be constructed.; json_data (Dict[str, Any]) – Serialization of class. See to_serial() for data layout. Return type:; Union[Matrix, Vector]. get(*args, **kwargs)¶; Overloaded function. get(self: psi4.core.Vector, m: int) -> float. Returns a single element value located at m. get(self: psi4.core.Vector, h: int, m: int) -> float. Returns a single element value located at m in irrep h. get_block(self: psi4.core.Vector, slice: psi4.core.Slice) → psi4.core.Vector¶; Get a vector block. init(self: psi4.core.Vector, arg0: psi4.core.Dimension) → None¶; Reallocate the data of the Vector. Consider making a new object. load(self: psi4.core.Vector, psio: psi4.core.IO, file: int) → None¶; Load the vector from disk. nirrep(self: psi4.core.Vector) → int¶; Returns the number of irreps. classmethod np_read(prefix='')¶; Reads the data from a NumPy compressed or uncompressed file using; numpy.load(). Parameters:. self – Pointer to which class to be constructed.; filename (str) – File name to read.; prefix (str) – Name under which array was saved for NumPy. Return type:; Union[Matrix, Vector]. np_write(filename=None, prefix='')¶; Writes the irrepped matrix to a NumPy uncompressed file using numpy.savez().; Can return the packed data for saving many matrices into the same file. Parameters:. self (Union[Matrix, Vector]) – Instance to be serialized.; filename (Optional[str]) – File name where the data will be saved.; prefix (str) – Name of instance prepared for NumPy. Returns:; When filename given, it and dict serialization passed to; numpy.savez(), so .npz file saved and None returned.; When filename None, dict serialization returned. Return type:; None or Dict[str, Any]. print_out(self: psi4.core.Vector) → None¶; Prints the vector to the output file. save(self: psi4.core.Vector, psio: psi4.core.IO, file: int) → None¶; Save the vector to disk. scale(self: psi4.core.Vector, sc: flo",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Vector.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Vector.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Vector.html:8365,Performance,load,load,8365,"dense=False)¶; Converts a PSI4 Matrix or Vector to a NumPy array. Either copies the; data or simply constructs a view. Parameters:. matrix (Union[Matrix, Vector]) – Pointers to which Psi4 core class should be used in the construction.; copy (bool) – Copy the data if True, return a view otherwise; dense (bool) – Converts irrepped Psi4 objects to diagonally blocked dense arrays if; True. Returns a list of arrays otherwise. Returns:; Returns a single or list of NumPy arrays depending on options. Return type:; ndarray or List[ndarray]. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; >>> data = psi4.core.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. to_serial()¶; Converts an object with a .nph accessor to a serialized dictionary. Parameters:; self (Union[Matrix, Vector]) – Matrix or Vector instance. Returns:; Serialized dictionary with keys:. shape; data : List[str]; type : {‘matrix’, ‘vector’}. Return type:; Dict[str, Any]. vector_dot(self: psi4.core.Vector, other: psi4.core.Vector) → float¶; Take the dot product of two vectors. zero(self: psi4.core.Vector) → None¶; Zeros the vector. table of contents. Vector; Vector; Vector.name; Vector.np; Vector.nph; Vector.shape; Vector.add(); Vector.array_interface(); Vector.axpby(); Vector.axpy(); Vector.clone(); Vector.copy(); Vector.dim(); Vector.dimpi(); Vector.from_array(); Vector.from_list(); Vector.from_serial(); Vector.get(); Vector.get_block(); Vector.init(); Vector.load(); Vector.nirrep(); Vector.np_read(); Vector.np_write(); Vector.print_out(); Vector.save(); Vector.scale(); Vector.set(); Vector.set_block(); Vector.to_array(); Vector.to_serial(); Vector.vector_dot(); Vector.zero(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; Vector. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Vector.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Vector.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Vector.html:1884,Security,access,accessor,1884,"umPy array or list of NumPy arrays into a PSI4 Matrix or Vector (irrepped if list). from_list(x). from_serial(); Converts serialized data to the correct Psi4 data type. get(*args, **kwargs); Overloaded function. get_block(self, slice); Get a vector block. init(self, arg0); Reallocate the data of the Vector. load(self, psio, file); Load the vector from disk. nirrep(self); Returns the number of irreps. np_read([prefix]); Reads the data from a NumPy compressed or uncompressed file using numpy.load(). np_write([filename, prefix]); Writes the irrepped matrix to a NumPy uncompressed file using numpy.savez(). print_out(self); Prints the vector to the output file. save(self, psio, file); Save the vector to disk. scale(self, sc); Scales the elements of a vector by sc. set(*args, **kwargs); Overloaded function. set_block(self, slice, block); Set a vector block. to_array([copy, dense]); Converts a PSI4 Matrix or Vector to a NumPy array. to_serial(); Converts an object with a .nph accessor to a serialized dictionary. vector_dot(self, other); Take the dot product of two vectors. zero(self); Zeros the vector. Attributes Documentation. name¶; The name of the Vector. Used in printing. np¶; View with single irrep. nph¶; View with irreps. shape¶; Shape of the Psi4 data object. Methods Documentation. add(*args, **kwargs)¶; Overloaded function. add(self: psi4.core.Vector, m: int, val: float) -> None. Add to a single element value located at m. add(self: psi4.core.Vector, h: int, m: int, val: float) -> None. Add to a single element value located at m in irrep h. array_interface(self: psi4.core.Vector) → list¶. axpby(self: psi4.core.Vector, a: float, b: float, other: psi4.core.Vector) → None¶; Adds to this vector scaled by b another vector scaled by a; self <- a * other + b * self. axpy(self: psi4.core.Vector, a: float, other: psi4.core.Vector) → None¶; Adds to this vector (unscaled) another vector scaled by a; self <- a * other + self. clone(self: psi4.core.Vector) → psi4.core.Vector¶; ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Vector.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Vector.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Vector.html:7630,Security,access,accessor,7630,", val: float) -> None. Sets a single element value located at m in irrep h. set_block(self: psi4.core.Vector, slice: psi4.core.Slice, block: psi4.core.ProtoVector) → None¶; Set a vector block. to_array(copy=True, dense=False)¶; Converts a PSI4 Matrix or Vector to a NumPy array. Either copies the; data or simply constructs a view. Parameters:. matrix (Union[Matrix, Vector]) – Pointers to which Psi4 core class should be used in the construction.; copy (bool) – Copy the data if True, return a view otherwise; dense (bool) – Converts irrepped Psi4 objects to diagonally blocked dense arrays if; True. Returns a list of arrays otherwise. Returns:; Returns a single or list of NumPy arrays depending on options. Return type:; ndarray or List[ndarray]. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; >>> data = psi4.core.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. to_serial()¶; Converts an object with a .nph accessor to a serialized dictionary. Parameters:; self (Union[Matrix, Vector]) – Matrix or Vector instance. Returns:; Serialized dictionary with keys:. shape; data : List[str]; type : {‘matrix’, ‘vector’}. Return type:; Dict[str, Any]. vector_dot(self: psi4.core.Vector, other: psi4.core.Vector) → float¶; Take the dot product of two vectors. zero(self: psi4.core.Vector) → None¶; Zeros the vector. table of contents. Vector; Vector; Vector.name; Vector.np; Vector.nph; Vector.shape; Vector.add(); Vector.array_interface(); Vector.axpby(); Vector.axpy(); Vector.clone(); Vector.copy(); Vector.dim(); Vector.dimpi(); Vector.from_array(); Vector.from_list(); Vector.from_serial(); Vector.get(); Vector.get_block(); Vector.init(); Vector.load(); Vector.nirrep(); Vector.np_read(); Vector.np_write(); Vector.print_out(); Vector.save(); Vector.scale(); Vector.set(); Vector.set_block(); Vector.to_array(); Vector.to_serial(); Vector.vector_dot(); Vector.zero(). «; hide menu. menu; sidebar; »; . Navigation. Index. module",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Vector.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Vector.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Vector.html:6952,Usability,simpl,simply,6952," Name of instance prepared for NumPy. Returns:; When filename given, it and dict serialization passed to; numpy.savez(), so .npz file saved and None returned.; When filename None, dict serialization returned. Return type:; None or Dict[str, Any]. print_out(self: psi4.core.Vector) → None¶; Prints the vector to the output file. save(self: psi4.core.Vector, psio: psi4.core.IO, file: int) → None¶; Save the vector to disk. scale(self: psi4.core.Vector, sc: float) → None¶; Scales the elements of a vector by sc. set(*args, **kwargs)¶; Overloaded function. set(self: psi4.core.Vector, m: int, val: float) -> None. Sets a single element value located at m. set(self: psi4.core.Vector, h: int, m: int, val: float) -> None. Sets a single element value located at m in irrep h. set_block(self: psi4.core.Vector, slice: psi4.core.Slice, block: psi4.core.ProtoVector) → None¶; Set a vector block. to_array(copy=True, dense=False)¶; Converts a PSI4 Matrix or Vector to a NumPy array. Either copies the; data or simply constructs a view. Parameters:. matrix (Union[Matrix, Vector]) – Pointers to which Psi4 core class should be used in the construction.; copy (bool) – Copy the data if True, return a view otherwise; dense (bool) – Converts irrepped Psi4 objects to diagonally blocked dense arrays if; True. Returns a list of arrays otherwise. Returns:; Returns a single or list of NumPy arrays depending on options. Return type:; ndarray or List[ndarray]. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; >>> data = psi4.core.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. to_serial()¶; Converts an object with a .nph accessor to a serialized dictionary. Parameters:; self (Union[Matrix, Vector]) – Matrix or Vector instance. Returns:; Serialized dictionary with keys:. shape; data : List[str]; type : {‘matrix’, ‘vector’}. Return type:; Dict[str, Any]. vector_dot(self: psi4.core.Vector, other: psi4.core.Vector) → float¶; Take the dot pr",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Vector.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Vector.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Vector3.html:1479,Deployability,update,updated,1479,"﻿. Vector3. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; Vector3. Vector3¶. class psi4.core.Vector3¶; Bases: pybind11_object; Class for vectors of length three, often Cartesian coordinate vectors, and their common operations; Methods Summary. cross(self, arg0); Returns cross product of arg1 and arg2. distance(self, arg0); Returns distance between two points represented by arg1 and arg2. dot(self, arg0); Returns dot product of arg1 and arg2. norm(self); Returns Euclidean norm of arg1. normalize(self); Returns vector of unit length and arg1 direction. Methods Documentation. cross(self: psi4.core.Vector3, arg0: psi4.core.Vector3) → psi4.core.Vector3¶; Returns cross product of arg1 and arg2. distance(self: psi4.core.Vector3, arg0: psi4.core.Vector3) → float¶; Returns distance between two points represented by arg1 and arg2. dot(self: psi4.core.Vector3, arg0: psi4.core.Vector3) → float¶; Returns dot product of arg1 and arg2. norm(self: psi4.core.Vector3) → float¶; Returns Euclidean norm of arg1. normalize(self: psi4.core.Vector3) → None¶; Returns vector of unit length and arg1 direction. table of contents. Vector3; Vector3; Vector3.cross(); Vector3.distance(); Vector3.dot(); Vector3.norm(); Vector3.normalize(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; Vector3. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Vector3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Vector3.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.version.html:427,Deployability,update,updated,427,"﻿. version. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; version. version¶. psi4.core.version() → None¶. Deprecated since version 1.4. table of contents. version; version(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; version. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.version.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.version.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:32580,Deployability,update,updated,32580," Wavefunction.get_basisset(); Wavefunction.get_density(); Wavefunction.get_dipole_field_strength(); Wavefunction.get_print(); Wavefunction.get_scratch_filename(); Wavefunction.get_variable(); Wavefunction.gradient(); Wavefunction.has_array_variable(); Wavefunction.has_potential_variable(); Wavefunction.has_scalar_variable(); Wavefunction.has_variable(); Wavefunction.hessian(); Wavefunction.lagrangian(); Wavefunction.mintshelper(); Wavefunction.mo_extents(); Wavefunction.module(); Wavefunction.molecule(); Wavefunction.nalpha(); Wavefunction.nalphapi(); Wavefunction.name(); Wavefunction.nbeta(); Wavefunction.nbetapi(); Wavefunction.nfrzc(); Wavefunction.nirrep(); Wavefunction.nmo(); Wavefunction.nmopi(); Wavefunction.no_occupations(); Wavefunction.nso(); Wavefunction.nsopi(); Wavefunction.options(); Wavefunction.potential_variable(); Wavefunction.potential_variables(); Wavefunction.reference_wavefunction(); Wavefunction.same_a_b_dens(); Wavefunction.same_a_b_orbs(); Wavefunction.scalar_variable(); Wavefunction.scalar_variables(); Wavefunction.set_array(); Wavefunction.set_array_variable(); Wavefunction.set_basisset(); Wavefunction.set_energy(); Wavefunction.set_external_potential(); Wavefunction.set_gradient(); Wavefunction.set_hessian(); Wavefunction.set_lagrangian(); Wavefunction.set_module(); Wavefunction.set_name(); Wavefunction.set_potential_variable(); Wavefunction.set_print(); Wavefunction.set_reference_wavefunction(); Wavefunction.set_scalar_variable(); Wavefunction.set_variable(); Wavefunction.shallow_copy(); Wavefunction.sobasisset(); Wavefunction.soccpi(); Wavefunction.to_file(); Wavefunction.variable(); Wavefunction.variables(); Wavefunction.write_molden(); Wavefunction.write_nbo(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; Wavefunction. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:1562,Energy Efficiency,charge,charges,1562,"sted Alpha Density subset. Db(self); Returns the Beta Density Matrix. Db_subset(self, arg0); Returns the requested Beta Density subset. Fa(self); Returns the Alpha Fock Matrix. Fa_subset(self, arg0); Returns the Alpha Fock Matrix in the requested basis (AO,SO). Fb(self); Returns the Beta Fock Matrix. Fb_subset(self, arg0); Returns the Beta Fock Matrix in the requested basis (AO,SO). H(self); Returns the 'Core' Matrix (Potential + Kinetic) Integrals. PCM_enabled(self); Whether running a PCM calculation. S(self); Returns the One-electron Overlap Matrix. alpha_orbital_space(self, id, basis, subset); Creates OrbitalSpace with information about the requested alpha orbital space. aotoso(self); Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self, arg0); Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self); Returns the dictionary of all Matrix QC variables. arrays(). Deprecated since version 1.4. atomic_point_charges(self); Returns the set atomic point charges. basis_projection(self, arg0, arg1, arg2, arg3); Projects a orbital matrix from one basis to another. basisset(self); Returns the current orbital basis. beta_orbital_space(self, arg0, arg1, arg2); docstring. build(mol[, basis, quiet]); Build a wavefunction from minimal inputs, molecule and basis set. c1_deep_copy(self, basis); Returns a new wavefunction with internal data converted to \(C_1\) symmetry, using pre-c1-constructed basis. compute_energy(self); Computes the energy of the Wavefunction. compute_gradient(self); Computes the gradient of the Wavefunction. compute_hessian(self); Computes the Hessian of the Wavefunction. deep_copy(self, arg0); Deep copies the internal data. del_array_variable(self, arg0); Removes the requested (case-insensitive) Matrix QC variable. del_potential_variable(self, arg0); Removes the requested (case-insensitive) ExternalPotential QC variable. del_scalar_variable(self, arg0); Removes the requested (case-insensitive) doubl",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:2043,Energy Efficiency,energy,energy,2043,"ation. S(self); Returns the One-electron Overlap Matrix. alpha_orbital_space(self, id, basis, subset); Creates OrbitalSpace with information about the requested alpha orbital space. aotoso(self); Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self, arg0); Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self); Returns the dictionary of all Matrix QC variables. arrays(). Deprecated since version 1.4. atomic_point_charges(self); Returns the set atomic point charges. basis_projection(self, arg0, arg1, arg2, arg3); Projects a orbital matrix from one basis to another. basisset(self); Returns the current orbital basis. beta_orbital_space(self, arg0, arg1, arg2); docstring. build(mol[, basis, quiet]); Build a wavefunction from minimal inputs, molecule and basis set. c1_deep_copy(self, basis); Returns a new wavefunction with internal data converted to \(C_1\) symmetry, using pre-c1-constructed basis. compute_energy(self); Computes the energy of the Wavefunction. compute_gradient(self); Computes the gradient of the Wavefunction. compute_hessian(self); Computes the Hessian of the Wavefunction. deep_copy(self, arg0); Deep copies the internal data. del_array_variable(self, arg0); Removes the requested (case-insensitive) Matrix QC variable. del_potential_variable(self, arg0); Removes the requested (case-insensitive) ExternalPotential QC variable. del_scalar_variable(self, arg0); Removes the requested (case-insensitive) double QC variable. del_variable(key); Removes scalar or array QCVariable key from self if present. doccpi(self[, assume_socc_alpha]); Returns the number of doubly occupied orbitals per irrep. efzc(self); Returns the frozen-core energy. energy(self); Returns the Wavefunction's energy. epsilon_a(self); Returns the Alpha Eigenvalues. epsilon_a_subset(self, basis, subset); Returns the requested Alpha orbital energies subset. epsilon_b(self); Returns the Beta Eigenvalues. epsilon_b_subset(self, basis, subs",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:2761,Energy Efficiency,energy,energy,2761,", arg0, arg1, arg2); docstring. build(mol[, basis, quiet]); Build a wavefunction from minimal inputs, molecule and basis set. c1_deep_copy(self, basis); Returns a new wavefunction with internal data converted to \(C_1\) symmetry, using pre-c1-constructed basis. compute_energy(self); Computes the energy of the Wavefunction. compute_gradient(self); Computes the gradient of the Wavefunction. compute_hessian(self); Computes the Hessian of the Wavefunction. deep_copy(self, arg0); Deep copies the internal data. del_array_variable(self, arg0); Removes the requested (case-insensitive) Matrix QC variable. del_potential_variable(self, arg0); Removes the requested (case-insensitive) ExternalPotential QC variable. del_scalar_variable(self, arg0); Removes the requested (case-insensitive) double QC variable. del_variable(key); Removes scalar or array QCVariable key from self if present. doccpi(self[, assume_socc_alpha]); Returns the number of doubly occupied orbitals per irrep. efzc(self); Returns the frozen-core energy. energy(self); Returns the Wavefunction's energy. epsilon_a(self); Returns the Alpha Eigenvalues. epsilon_a_subset(self, basis, subset); Returns the requested Alpha orbital energies subset. epsilon_b(self); Returns the Beta Eigenvalues. epsilon_b_subset(self, basis, subset); Returns the requested Beta orbital energies subset. esp_at_nuclei(self); returns electrostatic potentials at nuclei. external_pot(self); Gets the requested external potential. force_occpi(self, arg0, arg1); Specialized expert use only. frequencies(); Returns the results of a frequency analysis. from_file(wfn_data); Build Wavefunction from data laid out like to_file(). frzcpi(self); Returns the number of frozen core orbitals per irrep. frzvpi(self); Returns the number of frozen virtual orbitals per irrep. get_array(key). Deprecated since version 1.4. get_basisset(self, arg0); Returns the requested auxiliary basis. get_density(self, arg0); Experimental!. get_dipole_field_strength(self); Returns ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:2769,Energy Efficiency,energy,energy,2769,"sis, quiet]); Build a wavefunction from minimal inputs, molecule and basis set. c1_deep_copy(self, basis); Returns a new wavefunction with internal data converted to \(C_1\) symmetry, using pre-c1-constructed basis. compute_energy(self); Computes the energy of the Wavefunction. compute_gradient(self); Computes the gradient of the Wavefunction. compute_hessian(self); Computes the Hessian of the Wavefunction. deep_copy(self, arg0); Deep copies the internal data. del_array_variable(self, arg0); Removes the requested (case-insensitive) Matrix QC variable. del_potential_variable(self, arg0); Removes the requested (case-insensitive) ExternalPotential QC variable. del_scalar_variable(self, arg0); Removes the requested (case-insensitive) double QC variable. del_variable(key); Removes scalar or array QCVariable key from self if present. doccpi(self[, assume_socc_alpha]); Returns the number of doubly occupied orbitals per irrep. efzc(self); Returns the frozen-core energy. energy(self); Returns the Wavefunction's energy. epsilon_a(self); Returns the Alpha Eigenvalues. epsilon_a_subset(self, basis, subset); Returns the requested Alpha orbital energies subset. epsilon_b(self); Returns the Beta Eigenvalues. epsilon_b_subset(self, basis, subset); Returns the requested Beta orbital energies subset. esp_at_nuclei(self); returns electrostatic potentials at nuclei. external_pot(self); Gets the requested external potential. force_occpi(self, arg0, arg1); Specialized expert use only. frequencies(); Returns the results of a frequency analysis. from_file(wfn_data); Build Wavefunction from data laid out like to_file(). frzcpi(self); Returns the number of frozen core orbitals per irrep. frzvpi(self); Returns the number of frozen virtual orbitals per irrep. get_array(key). Deprecated since version 1.4. get_basisset(self, arg0); Returns the requested auxiliary basis. get_density(self, arg0); Experimental!. get_dipole_field_strength(self); Returns a vector of length 3, containing the x, y, and ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:2810,Energy Efficiency,energy,energy,2810,"sis, quiet]); Build a wavefunction from minimal inputs, molecule and basis set. c1_deep_copy(self, basis); Returns a new wavefunction with internal data converted to \(C_1\) symmetry, using pre-c1-constructed basis. compute_energy(self); Computes the energy of the Wavefunction. compute_gradient(self); Computes the gradient of the Wavefunction. compute_hessian(self); Computes the Hessian of the Wavefunction. deep_copy(self, arg0); Deep copies the internal data. del_array_variable(self, arg0); Removes the requested (case-insensitive) Matrix QC variable. del_potential_variable(self, arg0); Removes the requested (case-insensitive) ExternalPotential QC variable. del_scalar_variable(self, arg0); Removes the requested (case-insensitive) double QC variable. del_variable(key); Removes scalar or array QCVariable key from self if present. doccpi(self[, assume_socc_alpha]); Returns the number of doubly occupied orbitals per irrep. efzc(self); Returns the frozen-core energy. energy(self); Returns the Wavefunction's energy. epsilon_a(self); Returns the Alpha Eigenvalues. epsilon_a_subset(self, basis, subset); Returns the requested Alpha orbital energies subset. epsilon_b(self); Returns the Beta Eigenvalues. epsilon_b_subset(self, basis, subset); Returns the requested Beta orbital energies subset. esp_at_nuclei(self); returns electrostatic potentials at nuclei. external_pot(self); Gets the requested external potential. force_occpi(self, arg0, arg1); Specialized expert use only. frequencies(); Returns the results of a frequency analysis. from_file(wfn_data); Build Wavefunction from data laid out like to_file(). frzcpi(self); Returns the number of frozen core orbitals per irrep. frzvpi(self); Returns the number of frozen virtual orbitals per irrep. get_array(key). Deprecated since version 1.4. get_basisset(self, arg0); Returns the requested auxiliary basis. get_density(self, arg0); Experimental!. get_dipole_field_strength(self); Returns a vector of length 3, containing the x, y, and ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:6513,Energy Efficiency,energy,energy,6513,". nso(self); Number of symmetry orbitals. nsopi(self); Returns the number of symmetry orbitals per irrep. options(self); Returns the Wavefunction's options object. potential_variable(self, key); Returns copy of the requested (case-insensitive) ExternalPotential QC variable key. potential_variables(self); Returns the dictionary of all ExternalPotential QC variables. reference_wavefunction(self); Returns the reference wavefunction. same_a_b_dens(self); Returns true if the alpha and beta densities are the same. same_a_b_orbs(self); Returns true if the alpha and beta orbitals are the same. scalar_variable(self, arg0); Returns the requested (case-insensitive) double QC variable. scalar_variables(self); Returns the dictionary of all double QC variables. set_array(key, val). Deprecated since version 1.4. set_array_variable(self, arg0, arg1); Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self, arg0, arg1); Sets the requested auxiliary basis. set_energy(self, arg0); Sets the Wavefunction's energy. set_external_potential(self, arg0); Sets the requested external potential. set_gradient(self, arg0); Sets the Wavefunction's gradient. set_hessian(self, arg0); Sets the Wavefunction's Hessian. set_lagrangian(self, arg0); Sets the orbital Lagrangian matrix. set_module(self, module); Sets name of the last/highest level of theory module (internal or external) touching the wavefunction. set_name(self, arg0); Sets the level of theory this wavefunction corresponds to. set_potential_variable(self, arg0, arg1); Sets the requested (case-insensitive) ExternalPotential QC variable. set_print(self, arg0); Sets the print level of the Wavefunction. set_reference_wavefunction(self, arg0); docstring. set_scalar_variable(self, arg0, arg1); Sets the requested (case-insensitive) double QC variable. set_variable(key, val); Sets scalar or array QCVariable key to val on self. shallow_copy(self, arg0); Copies the pointers to the internal data. sobasisset(self); Returns the symmet",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:11655,Energy Efficiency,charge,charges,11655,"ut the requested alpha orbital space. Parameters:. id – Unique name for the orbital space.; basis – {‘SO’, ‘AO’}; Should the subspace be of symmetry orbitals or atomic orbitals?; subset – {ALL, ACTIVE, FROZEN, OCC, VIR, FROZEN_OCC, ACTIVE_OCC, ACTIVE_VIR, FROZEN_VIR}; Which subspace of orbitals should be returned?. Returns:; Information on subset alpha orbitals. Return type:; OrbitalSpace. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns copy of the requested (case-insensitive) Matrix QC variable. Prefer variable(). array_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.Matrix]¶; Returns the dictionary of all Matrix QC variables. Prefer variables(). arrays()¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.variables() instead. atomic_point_charges(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the set atomic point charges. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None, *, quiet=False)¶; Build a wavefunction from minimal inputs, molecule and basis set. Parameters:. mol (Molecule) – Molecule for which to build the wavefunction instance.; basis (Union[None, str, BasisSet]) – Basis set for which to build the wavefunction instance. If a; BasisSet, taken as-is. If a string, taken as a name for the; primary basis. If None, name taken from BASIS.; quiet (bool) – When True, do not print to the output file. Return type:; Wavefunction. c1_deep_copy(self: psi4.core.Wavefunctio",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:12874,Energy Efficiency,energy,energy,12874," basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None, *, quiet=False)¶; Build a wavefunction from minimal inputs, molecule and basis set. Parameters:. mol (Molecule) – Molecule for which to build the wavefunction instance.; basis (Union[None, str, BasisSet]) – Basis set for which to build the wavefunction instance. If a; BasisSet, taken as-is. If a string, taken as a name for the; primary basis. If None, name taken from BASIS.; quiet (bool) – When True, do not print to the output file. Return type:; Wavefunction. c1_deep_copy(self: psi4.core.Wavefunction, basis: psi4.core.BasisSet) → psi4.core.Wavefunction¶; Returns a new wavefunction with internal data converted to \(C_1\) symmetry, using pre-c1-constructed basis. compute_energy(self: psi4.core.Wavefunction) → float¶; Computes the energy of the Wavefunction. compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. Prefer del_variable(). del_potential_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) ExternalPotential QC variable. (This function is provisional and might be removed in the future.). del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. Prefer del_variable(). del_variable(key)¶; Removes scalar or array QCVariable key; from self if present. Parameters:. self (Wavefunction) – Wav",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:14209,Energy Efficiency,energy,energy,14209,"on) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. Prefer del_variable(). del_potential_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) ExternalPotential QC variable. (This function is provisional and might be removed in the future.). del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. Prefer del_variable(). del_variable(key)¶; Removes scalar or array QCVariable key; from self if present. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or; Matrix storage maps. Return type:; None. doccpi(self: psi4.core.Wavefunction, assume_socc_alpha: bool = True) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, basis: str, subset: str) → psi4.core.Vector¶; Returns the requested Alpha orbital energies subset. Parameters:. basis – {‘AO’, ‘SO’, ‘MO’}; MO or SO select for Pitzer-ordering the return vector in the full computational point group symmetry.; AO selects for Pitzer-ordering the return vector without point group symmetry.; subset – {‘ALL’, ‘ACTIVE’, ‘FROZEN’, ‘OCC’, ‘VIR’, ‘FROZEN_OCC’, ‘ACTIVE_OCC’, ‘ACTIVE_VIR’, ‘FROZEN_VIR’}; Which subspace of orbital energies should be returned?. Returns:; A Pitzer-ordered vector of the orbitals. Return type:; Vector. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, basis: str, subset: str) → psi4.core.Vector¶; Returns",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:14217,Energy Efficiency,energy,energy,14217," data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. Prefer del_variable(). del_potential_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) ExternalPotential QC variable. (This function is provisional and might be removed in the future.). del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. Prefer del_variable(). del_variable(key)¶; Removes scalar or array QCVariable key; from self if present. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or; Matrix storage maps. Return type:; None. doccpi(self: psi4.core.Wavefunction, assume_socc_alpha: bool = True) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, basis: str, subset: str) → psi4.core.Vector¶; Returns the requested Alpha orbital energies subset. Parameters:. basis – {‘AO’, ‘SO’, ‘MO’}; MO or SO select for Pitzer-ordering the return vector in the full computational point group symmetry.; AO selects for Pitzer-ordering the return vector without point group symmetry.; subset – {‘ALL’, ‘ACTIVE’, ‘FROZEN’, ‘OCC’, ‘VIR’, ‘FROZEN_OCC’, ‘ACTIVE_OCC’, ‘ACTIVE_VIR’, ‘FROZEN_VIR’}; Which subspace of orbital energies should be returned?. Returns:; A Pitzer-ordered vector of the orbitals. Return type:; Vector. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, basis: str, subset: str) → psi4.core.Vector¶; Returns the requested Beta orbital energies ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:14291,Energy Efficiency,energy,energy,14291,"vefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. Prefer del_variable(). del_potential_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) ExternalPotential QC variable. (This function is provisional and might be removed in the future.). del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. Prefer del_variable(). del_variable(key)¶; Removes scalar or array QCVariable key; from self if present. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or; Matrix storage maps. Return type:; None. doccpi(self: psi4.core.Wavefunction, assume_socc_alpha: bool = True) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, basis: str, subset: str) → psi4.core.Vector¶; Returns the requested Alpha orbital energies subset. Parameters:. basis – {‘AO’, ‘SO’, ‘MO’}; MO or SO select for Pitzer-ordering the return vector in the full computational point group symmetry.; AO selects for Pitzer-ordering the return vector without point group symmetry.; subset – {‘ALL’, ‘ACTIVE’, ‘FROZEN’, ‘OCC’, ‘VIR’, ‘FROZEN_OCC’, ‘ACTIVE_OCC’, ‘ACTIVE_VIR’, ‘FROZEN_VIR’}; Which subspace of orbital energies should be returned?. Returns:; A Pitzer-ordered vector of the orbitals. Return type:; Vector. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, basis: str, subset: str) → psi4.core.Vector¶; Returns the requested Beta orbital energies subset. Parameters:. basis – {‘AO’, ‘SO’, ‘",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:22262,Energy Efficiency,energy,energy,22262,"l¶; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. Prefer variable(). scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. Prefer variables(). set_array(key, val)¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.set_variable() instead. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. Syncs with Wavefunction.gradient_ or hessian_ if CURRENT GRADIENT or HESSIAN. Prefer set_variable(). set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. Syncs with Wavefunction’s QC variable CURRENT ENERGY. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. Syncs with Wavefunction’s QC variable CURRENT GRADIENT. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. Syncs with Wavefunction’s QC variable CURRENT HESSIAN. set_lagrangian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the orbital Lagrangian matrix. set_module(self: psi4.core.Wavefunction, module: str) → None¶; Sets name of the last/highest level of theory module (internal or external) touching the wavefunction. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_potential_variable(self: psi4.core.Wavefuncti",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:22316,Energy Efficiency,ENERGY,ENERGY,22316,". same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. Prefer variable(). scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. Prefer variables(). set_array(key, val)¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.set_variable() instead. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. Syncs with Wavefunction.gradient_ or hessian_ if CURRENT GRADIENT or HESSIAN. Prefer set_variable(). set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. Syncs with Wavefunction’s QC variable CURRENT ENERGY. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. Syncs with Wavefunction’s QC variable CURRENT GRADIENT. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. Syncs with Wavefunction’s QC variable CURRENT HESSIAN. set_lagrangian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the orbital Lagrangian matrix. set_module(self: psi4.core.Wavefunction, module: str) → None¶; Sets name of the last/highest level of theory module (internal or external) touching the wavefunction. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_potential_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.ExternalPotential) → None¶; S",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:23825,Energy Efficiency,ENERGY,ENERGY,23825,".Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the orbital Lagrangian matrix. set_module(self: psi4.core.Wavefunction, module: str) → None¶; Sets name of the last/highest level of theory module (internal or external) touching the wavefunction. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_potential_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.ExternalPotential) → None¶; Sets the requested (case-insensitive) ExternalPotential QC variable. (This function is provisional and might be removed in the future.). set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. Syncs with Wavefunction.energy_ if CURRENT ENERGY. Prefer set_variable(). set_variable(key, val)¶; Sets scalar or array QCVariable key to; val on self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. If CURRENT ENERGY, syncs with self.energy_.; If CURRENT GRADIENT, syncs with gradient_.; If CURRENT HESSIAN, syncs with self.hessian_. val (Union[Matrix, ndarray, float]) – Scalar or array to be stored in key. If ndarray and; data key does not naturally fit in 2D Matrix (often charge and; multipole QCVariables), it will be reshaped, as all; ndarray are stored as Matrix. Raises:; ValidationError – If val is a scalar but key already exists as an array variable. Or; if val is an array but key already exists as a scalar variable. Return type:; None. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Retur",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:24083,Energy Efficiency,ENERGY,ENERGY,24083,"core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_potential_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.ExternalPotential) → None¶; Sets the requested (case-insensitive) ExternalPotential QC variable. (This function is provisional and might be removed in the future.). set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. Syncs with Wavefunction.energy_ if CURRENT ENERGY. Prefer set_variable(). set_variable(key, val)¶; Sets scalar or array QCVariable key to; val on self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. If CURRENT ENERGY, syncs with self.energy_.; If CURRENT GRADIENT, syncs with gradient_.; If CURRENT HESSIAN, syncs with self.hessian_. val (Union[Matrix, ndarray, float]) – Scalar or array to be stored in key. If ndarray and; data key does not naturally fit in 2D Matrix (often charge and; multipole QCVariables), it will be reshaped, as all; ndarray are stored as Matrix. Raises:; ValidationError – If val is a scalar but key already exists as an array variable. Or; if val is an array but key already exists as a scalar variable. Return type:; None. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction, assume_socc_alpha: bool = True) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. to_file(filename=None)¶; Serialize a Wavefunction object. Opposite of; from_file(). Par",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:24350,Energy Efficiency,charge,charge,24350,". (This function is provisional and might be removed in the future.). set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. Syncs with Wavefunction.energy_ if CURRENT ENERGY. Prefer set_variable(). set_variable(key, val)¶; Sets scalar or array QCVariable key to; val on self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. If CURRENT ENERGY, syncs with self.energy_.; If CURRENT GRADIENT, syncs with gradient_.; If CURRENT HESSIAN, syncs with self.hessian_. val (Union[Matrix, ndarray, float]) – Scalar or array to be stored in key. If ndarray and; data key does not naturally fit in 2D Matrix (often charge and; multipole QCVariables), it will be reshaped, as all; ndarray are stored as Matrix. Raises:; ValidationError – If val is a scalar but key already exists as an array variable. Or; if val is an array but key already exists as a scalar variable. Return type:; None. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction, assume_socc_alpha: bool = True) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. to_file(filename=None)¶; Serialize a Wavefunction object. Opposite of; from_file(). Parameters:. wfn (Wavefunction) – Wavefunction or inherited class instance.; filename (str) – An optional filename to which to write the data. Returns:; A dictionary and NumPy representation of the Wavefunction. Return type:; Dict[str, Dict[str, Any]]. variable(key)¶; Return c",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:25697,Energy Efficiency,charge,charges,25697,") → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction, assume_socc_alpha: bool = True) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. to_file(filename=None)¶; Serialize a Wavefunction object. Opposite of; from_file(). Parameters:. wfn (Wavefunction) – Wavefunction or inherited class instance.; filename (str) – An optional filename to which to write the data. Returns:; A dictionary and NumPy representation of the Wavefunction. Return type:; Dict[str, Dict[str, Any]]. variable(key)¶; Return copy of scalar or array QCVariable; key from self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. Returns:; Requested QCVariable from self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> g, wfn = psi4.gradient(""hf/cc-pvdz"", return_wfn=True); >>> wfn.variable(""CURRENT ENERGY""); -100.00985995185668; >>> wfn.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> wfn.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> wfn.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from self. Parameters:. self – Wavefunction instance.; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set on self. Scalar variables ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:26044,Energy Efficiency,ENERGY,ENERGY,26044,"efunction object. Opposite of; from_file(). Parameters:. wfn (Wavefunction) – Wavefunction or inherited class instance.; filename (str) – An optional filename to which to write the data. Returns:; A dictionary and NumPy representation of the Wavefunction. Return type:; Dict[str, Dict[str, Any]]. variable(key)¶; Return copy of scalar or array QCVariable; key from self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. Returns:; Requested QCVariable from self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> g, wfn = psi4.gradient(""hf/cc-pvdz"", return_wfn=True); >>> wfn.variable(""CURRENT ENERGY""); -100.00985995185668; >>> wfn.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> wfn.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> wfn.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from self. Parameters:. self – Wavefunction instance.; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set on self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. write_molden(filename=None, do_virtual=",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:26782,Energy Efficiency,charge,charges,26782," are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> g, wfn = psi4.gradient(""hf/cc-pvdz"", return_wfn=True); >>> wfn.variable(""CURRENT ENERGY""); -100.00985995185668; >>> wfn.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> wfn.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> wfn.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from self. Parameters:. self – Wavefunction instance.; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set on self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. write_molden(filename=None, do_virtual=None, use_natural=False)¶; Writes wavefunction information in wfn to filename in; molden format. Will write natural orbitals from density (MO basis) if supplied.; Warning! most post-SCF wavefunctions do not build the density as this is often; much more costly than the energy. In addition, the wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns:; None. Parameters:. filename (Optional[str]) – Destination file name for MOLDEN file. If unspecified (None), a file; name will be generated from the molecule name.; do_virtual (Optional[bool]) – Do write all the MOs to the MOLDEN file (True) or d",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:27312,Energy Efficiency,energy,energy,27312,"np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from self. Parameters:. self – Wavefunction instance.; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set on self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. write_molden(filename=None, do_virtual=None, use_natural=False)¶; Writes wavefunction information in wfn to filename in; molden format. Will write natural orbitals from density (MO basis) if supplied.; Warning! most post-SCF wavefunctions do not build the density as this is often; much more costly than the energy. In addition, the wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns:; None. Parameters:. filename (Optional[str]) – Destination file name for MOLDEN file. If unspecified (None), a file; name will be generated from the molecule name.; do_virtual (Optional[bool]) – Do write all the MOs to the MOLDEN file (True) or discard the unoccupied; MOs (False). Not valid for NO’s. If unspecified (None), value taken from; MOLDEN_WITH_VIRTUAL.; use_natural (bool) – Write natural orbitals determined from density on wavefunction.; self (Wavefunction) – . Examples:. Molden file with the Kohn-Sham orbitals of a DFT calculation.; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> wfn.molden('mycalc.molden'). Molden file with the natural orbitals of a CCSD computation. For correlated methods, an energy call",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:28096,Energy Efficiency,energy,energy,28096,"to filename in; molden format. Will write natural orbitals from density (MO basis) if supplied.; Warning! most post-SCF wavefunctions do not build the density as this is often; much more costly than the energy. In addition, the wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns:; None. Parameters:. filename (Optional[str]) – Destination file name for MOLDEN file. If unspecified (None), a file; name will be generated from the molecule name.; do_virtual (Optional[bool]) – Do write all the MOs to the MOLDEN file (True) or discard the unoccupied; MOs (False). Not valid for NO’s. If unspecified (None), value taken from; MOLDEN_WITH_VIRTUAL.; use_natural (bool) – Write natural orbitals determined from density on wavefunction.; self (Wavefunction) – . Examples:. Molden file with the Kohn-Sham orbitals of a DFT calculation.; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> wfn.molden('mycalc.molden'). Molden file with the natural orbitals of a CCSD computation. For correlated methods, an energy call will not compute the density.; “properties” or “gradient” must be called.; >>> E, wfn = properties('ccsd', return_wfn=True); >>> wfn.molden('ccsd_no.molden', use_natural=True). To supply a custom density matrix, manually set the Da and Db of the wavefunction.; This is used, for example, to write natural orbitals coming from a root computed; by a CIWavefunction computation, e.g., detci, fci, casscf.; The first two arguments of get_opdm(); can be set to n, n where n => 0 selects the root to; write out, provided these roots were computed, see NUM_ROOTS. The; third argument controls the spin (""A"", ""B"" or ""SUM"") and the final; boolean option determines whether inactive orbitals are included.; >>> E, wfn = energy('detci', return_wfn=True); >>> wfn.Da() = wfn.get_opdm(0, 0, ""A"", True); >>> wfn.Db() = wfn.get_opdm(0, 0, ""B"", True); >>> molden(",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:28251,Energy Efficiency,energy,energy,28251,"he density as this is often; much more costly than the energy. In addition, the wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns:; None. Parameters:. filename (Optional[str]) – Destination file name for MOLDEN file. If unspecified (None), a file; name will be generated from the molecule name.; do_virtual (Optional[bool]) – Do write all the MOs to the MOLDEN file (True) or discard the unoccupied; MOs (False). Not valid for NO’s. If unspecified (None), value taken from; MOLDEN_WITH_VIRTUAL.; use_natural (bool) – Write natural orbitals determined from density on wavefunction.; self (Wavefunction) – . Examples:. Molden file with the Kohn-Sham orbitals of a DFT calculation.; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> wfn.molden('mycalc.molden'). Molden file with the natural orbitals of a CCSD computation. For correlated methods, an energy call will not compute the density.; “properties” or “gradient” must be called.; >>> E, wfn = properties('ccsd', return_wfn=True); >>> wfn.molden('ccsd_no.molden', use_natural=True). To supply a custom density matrix, manually set the Da and Db of the wavefunction.; This is used, for example, to write natural orbitals coming from a root computed; by a CIWavefunction computation, e.g., detci, fci, casscf.; The first two arguments of get_opdm(); can be set to n, n where n => 0 selects the root to; write out, provided these roots were computed, see NUM_ROOTS. The; third argument controls the spin (""A"", ""B"" or ""SUM"") and the final; boolean option determines whether inactive orbitals are included.; >>> E, wfn = energy('detci', return_wfn=True); >>> wfn.Da() = wfn.get_opdm(0, 0, ""A"", True); >>> wfn.Db() = wfn.get_opdm(0, 0, ""B"", True); >>> molden(wfn, 'no_root1.molden', use_natural=True). write_nbo(name)¶; Write wavefunction information in wfn to name in NBO format. Parameters:; name (str) – ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:28973,Energy Efficiency,energy,energy,28973,"elf (Wavefunction) – . Examples:. Molden file with the Kohn-Sham orbitals of a DFT calculation.; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> wfn.molden('mycalc.molden'). Molden file with the natural orbitals of a CCSD computation. For correlated methods, an energy call will not compute the density.; “properties” or “gradient” must be called.; >>> E, wfn = properties('ccsd', return_wfn=True); >>> wfn.molden('ccsd_no.molden', use_natural=True). To supply a custom density matrix, manually set the Da and Db of the wavefunction.; This is used, for example, to write natural orbitals coming from a root computed; by a CIWavefunction computation, e.g., detci, fci, casscf.; The first two arguments of get_opdm(); can be set to n, n where n => 0 selects the root to; write out, provided these roots were computed, see NUM_ROOTS. The; third argument controls the spin (""A"", ""B"" or ""SUM"") and the final; boolean option determines whether inactive orbitals are included.; >>> E, wfn = energy('detci', return_wfn=True); >>> wfn.Da() = wfn.get_opdm(0, 0, ""A"", True); >>> wfn.Db() = wfn.get_opdm(0, 0, ""B"", True); >>> molden(wfn, 'no_root1.molden', use_natural=True). write_nbo(name)¶; Write wavefunction information in wfn to name in NBO format. Parameters:; name (str) – Destination file name for NBO file. table of contents. Wavefunction; Wavefunction; Wavefunction.Ca(); Wavefunction.Ca_subset(); Wavefunction.Cb(); Wavefunction.Cb_subset(); Wavefunction.Da(); Wavefunction.Da_subset(); Wavefunction.Db(); Wavefunction.Db_subset(); Wavefunction.Fa(); Wavefunction.Fa_subset(); Wavefunction.Fb(); Wavefunction.Fb_subset(); Wavefunction.H(); Wavefunction.PCM_enabled(); Wavefunction.S(); Wavefunction.alpha_orbital_space(); Wavefunction.aotoso(); Wavefunction.array_variable(); Wavefunction.array_variables(); Wavefunction.arrays(); Wavefunction.atomic_point_charges(); Wavefunction.basis_projection(); Wavefunction.basisset(); Wavefunction.beta_orbital_space(); Wavefunction.build(); Wavefunction.c1",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:30319,Energy Efficiency,energy,energy,30319,efunction; Wavefunction.Ca(); Wavefunction.Ca_subset(); Wavefunction.Cb(); Wavefunction.Cb_subset(); Wavefunction.Da(); Wavefunction.Da_subset(); Wavefunction.Db(); Wavefunction.Db_subset(); Wavefunction.Fa(); Wavefunction.Fa_subset(); Wavefunction.Fb(); Wavefunction.Fb_subset(); Wavefunction.H(); Wavefunction.PCM_enabled(); Wavefunction.S(); Wavefunction.alpha_orbital_space(); Wavefunction.aotoso(); Wavefunction.array_variable(); Wavefunction.array_variables(); Wavefunction.arrays(); Wavefunction.atomic_point_charges(); Wavefunction.basis_projection(); Wavefunction.basisset(); Wavefunction.beta_orbital_space(); Wavefunction.build(); Wavefunction.c1_deep_copy(); Wavefunction.compute_energy(); Wavefunction.compute_gradient(); Wavefunction.compute_hessian(); Wavefunction.deep_copy(); Wavefunction.del_array_variable(); Wavefunction.del_potential_variable(); Wavefunction.del_scalar_variable(); Wavefunction.del_variable(); Wavefunction.doccpi(); Wavefunction.efzc(); Wavefunction.energy(); Wavefunction.epsilon_a(); Wavefunction.epsilon_a_subset(); Wavefunction.epsilon_b(); Wavefunction.epsilon_b_subset(); Wavefunction.esp_at_nuclei(); Wavefunction.external_pot(); Wavefunction.force_occpi(); Wavefunction.frequencies(); Wavefunction.from_file(); Wavefunction.frzcpi(); Wavefunction.frzvpi(); Wavefunction.get_array(); Wavefunction.get_basisset(); Wavefunction.get_density(); Wavefunction.get_dipole_field_strength(); Wavefunction.get_print(); Wavefunction.get_scratch_filename(); Wavefunction.get_variable(); Wavefunction.gradient(); Wavefunction.has_array_variable(); Wavefunction.has_potential_variable(); Wavefunction.has_scalar_variable(); Wavefunction.has_variable(); Wavefunction.hessian(); Wavefunction.lagrangian(); Wavefunction.mintshelper(); Wavefunction.mo_extents(); Wavefunction.module(); Wavefunction.molecule(); Wavefunction.nalpha(); Wavefunction.nalphapi(); Wavefunction.name(); Wavefunction.nbeta(); Wavefunction.nbetapi(); Wavefunction.nfrzc(); Wavefunction.nirrep(); Wa,MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:1381,Modifiability,variab,variable,1381,"t. Cb(self); Returns the Beta Orbitals. Cb_subset(self, arg0, arg1); Returns the requested Beta orbital subset. Da(self); Returns the Alpha Density Matrix. Da_subset(self, arg0); Returns the requested Alpha Density subset. Db(self); Returns the Beta Density Matrix. Db_subset(self, arg0); Returns the requested Beta Density subset. Fa(self); Returns the Alpha Fock Matrix. Fa_subset(self, arg0); Returns the Alpha Fock Matrix in the requested basis (AO,SO). Fb(self); Returns the Beta Fock Matrix. Fb_subset(self, arg0); Returns the Beta Fock Matrix in the requested basis (AO,SO). H(self); Returns the 'Core' Matrix (Potential + Kinetic) Integrals. PCM_enabled(self); Whether running a PCM calculation. S(self); Returns the One-electron Overlap Matrix. alpha_orbital_space(self, id, basis, subset); Creates OrbitalSpace with information about the requested alpha orbital space. aotoso(self); Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self, arg0); Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self); Returns the dictionary of all Matrix QC variables. arrays(). Deprecated since version 1.4. atomic_point_charges(self); Returns the set atomic point charges. basis_projection(self, arg0, arg1, arg2, arg3); Projects a orbital matrix from one basis to another. basisset(self); Returns the current orbital basis. beta_orbital_space(self, arg0, arg1, arg2); docstring. build(mol[, basis, quiet]); Build a wavefunction from minimal inputs, molecule and basis set. c1_deep_copy(self, basis); Returns a new wavefunction with internal data converted to \(C_1\) symmetry, using pre-c1-constructed basis. compute_energy(self); Computes the energy of the Wavefunction. compute_gradient(self); Computes the gradient of the Wavefunction. compute_hessian(self); Computes the Hessian of the Wavefunction. deep_copy(self, arg0); Deep copies the internal data. del_array_variable(self, arg0); Removes the requested (case-insensitive) Matrix QC va",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:1454,Modifiability,variab,variables,1454,"sted Beta orbital subset. Da(self); Returns the Alpha Density Matrix. Da_subset(self, arg0); Returns the requested Alpha Density subset. Db(self); Returns the Beta Density Matrix. Db_subset(self, arg0); Returns the requested Beta Density subset. Fa(self); Returns the Alpha Fock Matrix. Fa_subset(self, arg0); Returns the Alpha Fock Matrix in the requested basis (AO,SO). Fb(self); Returns the Beta Fock Matrix. Fb_subset(self, arg0); Returns the Beta Fock Matrix in the requested basis (AO,SO). H(self); Returns the 'Core' Matrix (Potential + Kinetic) Integrals. PCM_enabled(self); Whether running a PCM calculation. S(self); Returns the One-electron Overlap Matrix. alpha_orbital_space(self, id, basis, subset); Creates OrbitalSpace with information about the requested alpha orbital space. aotoso(self); Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self, arg0); Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self); Returns the dictionary of all Matrix QC variables. arrays(). Deprecated since version 1.4. atomic_point_charges(self); Returns the set atomic point charges. basis_projection(self, arg0, arg1, arg2, arg3); Projects a orbital matrix from one basis to another. basisset(self); Returns the current orbital basis. beta_orbital_space(self, arg0, arg1, arg2); docstring. build(mol[, basis, quiet]); Build a wavefunction from minimal inputs, molecule and basis set. c1_deep_copy(self, basis); Returns a new wavefunction with internal data converted to \(C_1\) symmetry, using pre-c1-constructed basis. compute_energy(self); Computes the energy of the Wavefunction. compute_gradient(self); Computes the gradient of the Wavefunction. compute_hessian(self); Computes the Hessian of the Wavefunction. deep_copy(self, arg0); Deep copies the internal data. del_array_variable(self, arg0); Removes the requested (case-insensitive) Matrix QC variable. del_potential_variable(self, arg0); Removes the requested (case-insensitive) ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:2340,Modifiability,variab,variable,2340,"riable(self, arg0); Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self); Returns the dictionary of all Matrix QC variables. arrays(). Deprecated since version 1.4. atomic_point_charges(self); Returns the set atomic point charges. basis_projection(self, arg0, arg1, arg2, arg3); Projects a orbital matrix from one basis to another. basisset(self); Returns the current orbital basis. beta_orbital_space(self, arg0, arg1, arg2); docstring. build(mol[, basis, quiet]); Build a wavefunction from minimal inputs, molecule and basis set. c1_deep_copy(self, basis); Returns a new wavefunction with internal data converted to \(C_1\) symmetry, using pre-c1-constructed basis. compute_energy(self); Computes the energy of the Wavefunction. compute_gradient(self); Computes the gradient of the Wavefunction. compute_hessian(self); Computes the Hessian of the Wavefunction. deep_copy(self, arg0); Deep copies the internal data. del_array_variable(self, arg0); Removes the requested (case-insensitive) Matrix QC variable. del_potential_variable(self, arg0); Removes the requested (case-insensitive) ExternalPotential QC variable. del_scalar_variable(self, arg0); Removes the requested (case-insensitive) double QC variable. del_variable(key); Removes scalar or array QCVariable key from self if present. doccpi(self[, assume_socc_alpha]); Returns the number of doubly occupied orbitals per irrep. efzc(self); Returns the frozen-core energy. energy(self); Returns the Wavefunction's energy. epsilon_a(self); Returns the Alpha Eigenvalues. epsilon_a_subset(self, basis, subset); Returns the requested Alpha orbital energies subset. epsilon_b(self); Returns the Beta Eigenvalues. epsilon_b_subset(self, basis, subset); Returns the requested Beta orbital energies subset. esp_at_nuclei(self); returns electrostatic potentials at nuclei. external_pot(self); Gets the requested external potential. force_occpi(self, arg0, arg1); Specialized expert use only. frequencies(); Returns ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:2448,Modifiability,variab,variable,2448,"les(self); Returns the dictionary of all Matrix QC variables. arrays(). Deprecated since version 1.4. atomic_point_charges(self); Returns the set atomic point charges. basis_projection(self, arg0, arg1, arg2, arg3); Projects a orbital matrix from one basis to another. basisset(self); Returns the current orbital basis. beta_orbital_space(self, arg0, arg1, arg2); docstring. build(mol[, basis, quiet]); Build a wavefunction from minimal inputs, molecule and basis set. c1_deep_copy(self, basis); Returns a new wavefunction with internal data converted to \(C_1\) symmetry, using pre-c1-constructed basis. compute_energy(self); Computes the energy of the Wavefunction. compute_gradient(self); Computes the gradient of the Wavefunction. compute_hessian(self); Computes the Hessian of the Wavefunction. deep_copy(self, arg0); Deep copies the internal data. del_array_variable(self, arg0); Removes the requested (case-insensitive) Matrix QC variable. del_potential_variable(self, arg0); Removes the requested (case-insensitive) ExternalPotential QC variable. del_scalar_variable(self, arg0); Removes the requested (case-insensitive) double QC variable. del_variable(key); Removes scalar or array QCVariable key from self if present. doccpi(self[, assume_socc_alpha]); Returns the number of doubly occupied orbitals per irrep. efzc(self); Returns the frozen-core energy. energy(self); Returns the Wavefunction's energy. epsilon_a(self); Returns the Alpha Eigenvalues. epsilon_a_subset(self, basis, subset); Returns the requested Alpha orbital energies subset. epsilon_b(self); Returns the Beta Eigenvalues. epsilon_b_subset(self, basis, subset); Returns the requested Beta orbital energies subset. esp_at_nuclei(self); returns electrostatic potentials at nuclei. external_pot(self); Gets the requested external potential. force_occpi(self, arg0, arg1); Specialized expert use only. frequencies(); Returns the results of a frequency analysis. from_file(wfn_data); Build Wavefunction from data laid out like",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:2542,Modifiability,variab,variable,2542," atomic_point_charges(self); Returns the set atomic point charges. basis_projection(self, arg0, arg1, arg2, arg3); Projects a orbital matrix from one basis to another. basisset(self); Returns the current orbital basis. beta_orbital_space(self, arg0, arg1, arg2); docstring. build(mol[, basis, quiet]); Build a wavefunction from minimal inputs, molecule and basis set. c1_deep_copy(self, basis); Returns a new wavefunction with internal data converted to \(C_1\) symmetry, using pre-c1-constructed basis. compute_energy(self); Computes the energy of the Wavefunction. compute_gradient(self); Computes the gradient of the Wavefunction. compute_hessian(self); Computes the Hessian of the Wavefunction. deep_copy(self, arg0); Deep copies the internal data. del_array_variable(self, arg0); Removes the requested (case-insensitive) Matrix QC variable. del_potential_variable(self, arg0); Removes the requested (case-insensitive) ExternalPotential QC variable. del_scalar_variable(self, arg0); Removes the requested (case-insensitive) double QC variable. del_variable(key); Removes scalar or array QCVariable key from self if present. doccpi(self[, assume_socc_alpha]); Returns the number of doubly occupied orbitals per irrep. efzc(self); Returns the frozen-core energy. energy(self); Returns the Wavefunction's energy. epsilon_a(self); Returns the Alpha Eigenvalues. epsilon_a_subset(self, basis, subset); Returns the requested Alpha orbital energies subset. epsilon_b(self); Returns the Beta Eigenvalues. epsilon_b_subset(self, basis, subset); Returns the requested Beta orbital energies subset. esp_at_nuclei(self); returns electrostatic potentials at nuclei. external_pot(self); Gets the requested external potential. force_occpi(self, arg0, arg1); Specialized expert use only. frequencies(); Returns the results of a frequency analysis. from_file(wfn_data); Build Wavefunction from data laid out like to_file(). frzcpi(self); Returns the number of frozen core orbitals per irrep. frzvpi(self); Returns",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:4138,Modifiability,variab,variable,4138,"otentials at nuclei. external_pot(self); Gets the requested external potential. force_occpi(self, arg0, arg1); Specialized expert use only. frequencies(); Returns the results of a frequency analysis. from_file(wfn_data); Build Wavefunction from data laid out like to_file(). frzcpi(self); Returns the number of frozen core orbitals per irrep. frzvpi(self); Returns the number of frozen virtual orbitals per irrep. get_array(key). Deprecated since version 1.4. get_basisset(self, arg0); Returns the requested auxiliary basis. get_density(self, arg0); Experimental!. get_dipole_field_strength(self); Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_print(self); Get the print level of the Wavefunction. get_scratch_filename(filenumber); Return canonical path to scratch file filenumber based on molecule on self. get_variable(key). Deprecated since version 1.4. gradient(self); Returns the Wavefunction's gradient. has_array_variable(self, arg0); Is the Matrix QC variable (case-insensitive) set? Prefer has_variable(). has_potential_variable(self, arg0); Is the ExternalPotential QC variable (case-insensitive) set? (This function is provisional and might be removed in the future.). has_scalar_variable(self, arg0); Is the double QC variable (case-insensitive) set? Prefer has_variable(). has_variable(key); Whether scalar or array QCVariable key has been set on self. hessian(self); Returns the Wavefunction's Hessian. lagrangian(self); Returns the Lagrangian Matrix. mintshelper(self); Returns the current MintsHelper object. mo_extents(self); returns the wavefunction's electronic orbital extents. module(self); Name of the last/highest level of theory module (internal or external) touching the wavefunction. molecule(self); Returns the Wavefunction's molecule. nalpha(self); Number of Alpha electrons. nalphapi(self); Returns the number of alpha orbitals per irrep. name(self); The level of theory this wavefunction corresponds to. nbeta(self); Number of Beta ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:4258,Modifiability,variab,variable,4258,"only. frequencies(); Returns the results of a frequency analysis. from_file(wfn_data); Build Wavefunction from data laid out like to_file(). frzcpi(self); Returns the number of frozen core orbitals per irrep. frzvpi(self); Returns the number of frozen virtual orbitals per irrep. get_array(key). Deprecated since version 1.4. get_basisset(self, arg0); Returns the requested auxiliary basis. get_density(self, arg0); Experimental!. get_dipole_field_strength(self); Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_print(self); Get the print level of the Wavefunction. get_scratch_filename(filenumber); Return canonical path to scratch file filenumber based on molecule on self. get_variable(key). Deprecated since version 1.4. gradient(self); Returns the Wavefunction's gradient. has_array_variable(self, arg0); Is the Matrix QC variable (case-insensitive) set? Prefer has_variable(). has_potential_variable(self, arg0); Is the ExternalPotential QC variable (case-insensitive) set? (This function is provisional and might be removed in the future.). has_scalar_variable(self, arg0); Is the double QC variable (case-insensitive) set? Prefer has_variable(). has_variable(key); Whether scalar or array QCVariable key has been set on self. hessian(self); Returns the Wavefunction's Hessian. lagrangian(self); Returns the Lagrangian Matrix. mintshelper(self); Returns the current MintsHelper object. mo_extents(self); returns the wavefunction's electronic orbital extents. module(self); Name of the last/highest level of theory module (internal or external) touching the wavefunction. molecule(self); Returns the Wavefunction's molecule. nalpha(self); Number of Alpha electrons. nalphapi(self); Returns the number of alpha orbitals per irrep. name(self); The level of theory this wavefunction corresponds to. nbeta(self); Number of Beta electrons. nbetapi(self); Returns the number of beta orbitals per irrep. nfrzc(self); Number of frozen core electrons. nirrep(self); N",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:4409,Modifiability,variab,variable,4409,"(). frzcpi(self); Returns the number of frozen core orbitals per irrep. frzvpi(self); Returns the number of frozen virtual orbitals per irrep. get_array(key). Deprecated since version 1.4. get_basisset(self, arg0); Returns the requested auxiliary basis. get_density(self, arg0); Experimental!. get_dipole_field_strength(self); Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_print(self); Get the print level of the Wavefunction. get_scratch_filename(filenumber); Return canonical path to scratch file filenumber based on molecule on self. get_variable(key). Deprecated since version 1.4. gradient(self); Returns the Wavefunction's gradient. has_array_variable(self, arg0); Is the Matrix QC variable (case-insensitive) set? Prefer has_variable(). has_potential_variable(self, arg0); Is the ExternalPotential QC variable (case-insensitive) set? (This function is provisional and might be removed in the future.). has_scalar_variable(self, arg0); Is the double QC variable (case-insensitive) set? Prefer has_variable(). has_variable(key); Whether scalar or array QCVariable key has been set on self. hessian(self); Returns the Wavefunction's Hessian. lagrangian(self); Returns the Lagrangian Matrix. mintshelper(self); Returns the current MintsHelper object. mo_extents(self); returns the wavefunction's electronic orbital extents. module(self); Name of the last/highest level of theory module (internal or external) touching the wavefunction. molecule(self); Returns the Wavefunction's molecule. nalpha(self); Number of Alpha electrons. nalphapi(self); Returns the number of alpha orbitals per irrep. name(self); The level of theory this wavefunction corresponds to. nbeta(self); Number of Beta electrons. nbetapi(self); Returns the number of beta orbitals per irrep. nfrzc(self); Number of frozen core electrons. nirrep(self); Number of irreps in the system. nmo(self); Number of molecule orbitals. nmopi(self); Returns the number of molecular orbitals per irrep. ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:5757,Modifiability,variab,variable,5757,"ts(self); returns the wavefunction's electronic orbital extents. module(self); Name of the last/highest level of theory module (internal or external) touching the wavefunction. molecule(self); Returns the Wavefunction's molecule. nalpha(self); Number of Alpha electrons. nalphapi(self); Returns the number of alpha orbitals per irrep. name(self); The level of theory this wavefunction corresponds to. nbeta(self); Number of Beta electrons. nbetapi(self); Returns the number of beta orbitals per irrep. nfrzc(self); Number of frozen core electrons. nirrep(self); Number of irreps in the system. nmo(self); Number of molecule orbitals. nmopi(self); Returns the number of molecular orbitals per irrep. no_occupations(self); returns the natural orbital occupations on the wavefunction. nso(self); Number of symmetry orbitals. nsopi(self); Returns the number of symmetry orbitals per irrep. options(self); Returns the Wavefunction's options object. potential_variable(self, key); Returns copy of the requested (case-insensitive) ExternalPotential QC variable key. potential_variables(self); Returns the dictionary of all ExternalPotential QC variables. reference_wavefunction(self); Returns the reference wavefunction. same_a_b_dens(self); Returns true if the alpha and beta densities are the same. same_a_b_orbs(self); Returns true if the alpha and beta orbitals are the same. scalar_variable(self, arg0); Returns the requested (case-insensitive) double QC variable. scalar_variables(self); Returns the dictionary of all double QC variables. set_array(key, val). Deprecated since version 1.4. set_array_variable(self, arg0, arg1); Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self, arg0, arg1); Sets the requested auxiliary basis. set_energy(self, arg0); Sets the Wavefunction's energy. set_external_potential(self, arg0); Sets the requested external potential. set_gradient(self, arg0); Sets the Wavefunction's gradient. set_hessian(self, arg0); Sets the Wavefunction's Hessian.",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:5849,Modifiability,variab,variables,5849,"t level of theory module (internal or external) touching the wavefunction. molecule(self); Returns the Wavefunction's molecule. nalpha(self); Number of Alpha electrons. nalphapi(self); Returns the number of alpha orbitals per irrep. name(self); The level of theory this wavefunction corresponds to. nbeta(self); Number of Beta electrons. nbetapi(self); Returns the number of beta orbitals per irrep. nfrzc(self); Number of frozen core electrons. nirrep(self); Number of irreps in the system. nmo(self); Number of molecule orbitals. nmopi(self); Returns the number of molecular orbitals per irrep. no_occupations(self); returns the natural orbital occupations on the wavefunction. nso(self); Number of symmetry orbitals. nsopi(self); Returns the number of symmetry orbitals per irrep. options(self); Returns the Wavefunction's options object. potential_variable(self, key); Returns copy of the requested (case-insensitive) ExternalPotential QC variable key. potential_variables(self); Returns the dictionary of all ExternalPotential QC variables. reference_wavefunction(self); Returns the reference wavefunction. same_a_b_dens(self); Returns true if the alpha and beta densities are the same. same_a_b_orbs(self); Returns true if the alpha and beta orbitals are the same. scalar_variable(self, arg0); Returns the requested (case-insensitive) double QC variable. scalar_variables(self); Returns the dictionary of all double QC variables. set_array(key, val). Deprecated since version 1.4. set_array_variable(self, arg0, arg1); Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self, arg0, arg1); Sets the requested auxiliary basis. set_energy(self, arg0); Sets the Wavefunction's energy. set_external_potential(self, arg0); Sets the requested external potential. set_gradient(self, arg0); Sets the Wavefunction's gradient. set_hessian(self, arg0); Sets the Wavefunction's Hessian. set_lagrangian(self, arg0); Sets the orbital Lagrangian matrix. set_module(self, module); Sets name o",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:6165,Modifiability,variab,variable,6165,"ber of Beta electrons. nbetapi(self); Returns the number of beta orbitals per irrep. nfrzc(self); Number of frozen core electrons. nirrep(self); Number of irreps in the system. nmo(self); Number of molecule orbitals. nmopi(self); Returns the number of molecular orbitals per irrep. no_occupations(self); returns the natural orbital occupations on the wavefunction. nso(self); Number of symmetry orbitals. nsopi(self); Returns the number of symmetry orbitals per irrep. options(self); Returns the Wavefunction's options object. potential_variable(self, key); Returns copy of the requested (case-insensitive) ExternalPotential QC variable key. potential_variables(self); Returns the dictionary of all ExternalPotential QC variables. reference_wavefunction(self); Returns the reference wavefunction. same_a_b_dens(self); Returns true if the alpha and beta densities are the same. same_a_b_orbs(self); Returns true if the alpha and beta orbitals are the same. scalar_variable(self, arg0); Returns the requested (case-insensitive) double QC variable. scalar_variables(self); Returns the dictionary of all double QC variables. set_array(key, val). Deprecated since version 1.4. set_array_variable(self, arg0, arg1); Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self, arg0, arg1); Sets the requested auxiliary basis. set_energy(self, arg0); Sets the Wavefunction's energy. set_external_potential(self, arg0); Sets the requested external potential. set_gradient(self, arg0); Sets the Wavefunction's gradient. set_hessian(self, arg0); Sets the Wavefunction's Hessian. set_lagrangian(self, arg0); Sets the orbital Lagrangian matrix. set_module(self, module); Sets name of the last/highest level of theory module (internal or external) touching the wavefunction. set_name(self, arg0); Sets the level of theory this wavefunction corresponds to. set_potential_variable(self, arg0, arg1); Sets the requested (case-insensitive) ExternalPotential QC variable. set_print(self, arg0); Sets th",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:6239,Modifiability,variab,variables,6239,"p. nfrzc(self); Number of frozen core electrons. nirrep(self); Number of irreps in the system. nmo(self); Number of molecule orbitals. nmopi(self); Returns the number of molecular orbitals per irrep. no_occupations(self); returns the natural orbital occupations on the wavefunction. nso(self); Number of symmetry orbitals. nsopi(self); Returns the number of symmetry orbitals per irrep. options(self); Returns the Wavefunction's options object. potential_variable(self, key); Returns copy of the requested (case-insensitive) ExternalPotential QC variable key. potential_variables(self); Returns the dictionary of all ExternalPotential QC variables. reference_wavefunction(self); Returns the reference wavefunction. same_a_b_dens(self); Returns true if the alpha and beta densities are the same. same_a_b_orbs(self); Returns true if the alpha and beta orbitals are the same. scalar_variable(self, arg0); Returns the requested (case-insensitive) double QC variable. scalar_variables(self); Returns the dictionary of all double QC variables. set_array(key, val). Deprecated since version 1.4. set_array_variable(self, arg0, arg1); Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self, arg0, arg1); Sets the requested auxiliary basis. set_energy(self, arg0); Sets the Wavefunction's energy. set_external_potential(self, arg0); Sets the requested external potential. set_gradient(self, arg0); Sets the Wavefunction's gradient. set_hessian(self, arg0); Sets the Wavefunction's Hessian. set_lagrangian(self, arg0); Sets the orbital Lagrangian matrix. set_module(self, module); Sets name of the last/highest level of theory module (internal or external) touching the wavefunction. set_name(self, arg0); Sets the level of theory this wavefunction corresponds to. set_potential_variable(self, arg0, arg1); Sets the requested (case-insensitive) ExternalPotential QC variable. set_print(self, arg0); Sets the print level of the Wavefunction. set_reference_wavefunction(self, arg0); docstrin",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:6387,Modifiability,variab,variable,6387,"opi(self); Returns the number of molecular orbitals per irrep. no_occupations(self); returns the natural orbital occupations on the wavefunction. nso(self); Number of symmetry orbitals. nsopi(self); Returns the number of symmetry orbitals per irrep. options(self); Returns the Wavefunction's options object. potential_variable(self, key); Returns copy of the requested (case-insensitive) ExternalPotential QC variable key. potential_variables(self); Returns the dictionary of all ExternalPotential QC variables. reference_wavefunction(self); Returns the reference wavefunction. same_a_b_dens(self); Returns true if the alpha and beta densities are the same. same_a_b_orbs(self); Returns true if the alpha and beta orbitals are the same. scalar_variable(self, arg0); Returns the requested (case-insensitive) double QC variable. scalar_variables(self); Returns the dictionary of all double QC variables. set_array(key, val). Deprecated since version 1.4. set_array_variable(self, arg0, arg1); Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self, arg0, arg1); Sets the requested auxiliary basis. set_energy(self, arg0); Sets the Wavefunction's energy. set_external_potential(self, arg0); Sets the requested external potential. set_gradient(self, arg0); Sets the Wavefunction's gradient. set_hessian(self, arg0); Sets the Wavefunction's Hessian. set_lagrangian(self, arg0); Sets the orbital Lagrangian matrix. set_module(self, module); Sets name of the last/highest level of theory module (internal or external) touching the wavefunction. set_name(self, arg0); Sets the level of theory this wavefunction corresponds to. set_potential_variable(self, arg0, arg1); Sets the requested (case-insensitive) ExternalPotential QC variable. set_print(self, arg0); Sets the print level of the Wavefunction. set_reference_wavefunction(self, arg0); docstring. set_scalar_variable(self, arg0, arg1); Sets the requested (case-insensitive) double QC variable. set_variable(key, val); Sets scalar ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:7089,Modifiability,variab,variable,7089," the alpha and beta orbitals are the same. scalar_variable(self, arg0); Returns the requested (case-insensitive) double QC variable. scalar_variables(self); Returns the dictionary of all double QC variables. set_array(key, val). Deprecated since version 1.4. set_array_variable(self, arg0, arg1); Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self, arg0, arg1); Sets the requested auxiliary basis. set_energy(self, arg0); Sets the Wavefunction's energy. set_external_potential(self, arg0); Sets the requested external potential. set_gradient(self, arg0); Sets the Wavefunction's gradient. set_hessian(self, arg0); Sets the Wavefunction's Hessian. set_lagrangian(self, arg0); Sets the orbital Lagrangian matrix. set_module(self, module); Sets name of the last/highest level of theory module (internal or external) touching the wavefunction. set_name(self, arg0); Sets the level of theory this wavefunction corresponds to. set_potential_variable(self, arg0, arg1); Sets the requested (case-insensitive) ExternalPotential QC variable. set_print(self, arg0); Sets the print level of the Wavefunction. set_reference_wavefunction(self, arg0); docstring. set_scalar_variable(self, arg0, arg1); Sets the requested (case-insensitive) double QC variable. set_variable(key, val); Sets scalar or array QCVariable key to val on self. shallow_copy(self, arg0); Copies the pointers to the internal data. sobasisset(self); Returns the symmetry orbitals basis. soccpi(self[, assume_socc_alpha]); Returns the number of singly occupied orbitals per irrep. to_file([filename]); Serialize a Wavefunction object. variable(key); Return copy of scalar or array QCVariable key from self. variables([include_deprecated_keys]); Return all scalar or array QCVariables from self. write_molden([filename, do_virtual, use_natural]); Writes wavefunction information in wfn to filename in molden format. write_nbo(name); Write wavefunction information in wfn to name in NBO format. Methods Documentation. Ca(s",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:7302,Modifiability,variab,variable,7302,"y, val). Deprecated since version 1.4. set_array_variable(self, arg0, arg1); Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self, arg0, arg1); Sets the requested auxiliary basis. set_energy(self, arg0); Sets the Wavefunction's energy. set_external_potential(self, arg0); Sets the requested external potential. set_gradient(self, arg0); Sets the Wavefunction's gradient. set_hessian(self, arg0); Sets the Wavefunction's Hessian. set_lagrangian(self, arg0); Sets the orbital Lagrangian matrix. set_module(self, module); Sets name of the last/highest level of theory module (internal or external) touching the wavefunction. set_name(self, arg0); Sets the level of theory this wavefunction corresponds to. set_potential_variable(self, arg0, arg1); Sets the requested (case-insensitive) ExternalPotential QC variable. set_print(self, arg0); Sets the print level of the Wavefunction. set_reference_wavefunction(self, arg0); docstring. set_scalar_variable(self, arg0, arg1); Sets the requested (case-insensitive) double QC variable. set_variable(key, val); Sets scalar or array QCVariable key to val on self. shallow_copy(self, arg0); Copies the pointers to the internal data. sobasisset(self); Returns the symmetry orbitals basis. soccpi(self[, assume_socc_alpha]); Returns the number of singly occupied orbitals per irrep. to_file([filename]); Serialize a Wavefunction object. variable(key); Return copy of scalar or array QCVariable key from self. variables([include_deprecated_keys]); Return all scalar or array QCVariables from self. write_molden([filename, do_virtual, use_natural]); Writes wavefunction information in wfn to filename in molden format. write_nbo(name); Write wavefunction information in wfn to name in NBO format. Methods Documentation. Ca(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Alpha Orbitals. Ca_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Matrix¶; Returns the requested Alpha orbital subset. Parameters:. ba",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:7658,Modifiability,variab,variable,7658,"efunction's Hessian. set_lagrangian(self, arg0); Sets the orbital Lagrangian matrix. set_module(self, module); Sets name of the last/highest level of theory module (internal or external) touching the wavefunction. set_name(self, arg0); Sets the level of theory this wavefunction corresponds to. set_potential_variable(self, arg0, arg1); Sets the requested (case-insensitive) ExternalPotential QC variable. set_print(self, arg0); Sets the print level of the Wavefunction. set_reference_wavefunction(self, arg0); docstring. set_scalar_variable(self, arg0, arg1); Sets the requested (case-insensitive) double QC variable. set_variable(key, val); Sets scalar or array QCVariable key to val on self. shallow_copy(self, arg0); Copies the pointers to the internal data. sobasisset(self); Returns the symmetry orbitals basis. soccpi(self[, assume_socc_alpha]); Returns the number of singly occupied orbitals per irrep. to_file([filename]); Serialize a Wavefunction object. variable(key); Return copy of scalar or array QCVariable key from self. variables([include_deprecated_keys]); Return all scalar or array QCVariables from self. write_molden([filename, do_virtual, use_natural]); Writes wavefunction information in wfn to filename in molden format. write_nbo(name); Write wavefunction information in wfn to name in NBO format. Methods Documentation. Ca(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Alpha Orbitals. Ca_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Matrix¶; Returns the requested Alpha orbital subset. Parameters:. basis (str) – {‘SO’, AO’}; Should the subset be of symmetry orbitals or atomic orbitals?; subset (str) – {‘ALL’, ‘ACTIVE’, ‘FROZEN’, ‘OCC’, ‘VIR’, ‘FROZEN_OCC’, ‘ACTIVE_OCC’, ‘ACTIVE_VIR’, ‘FROZEN_VIR’}; Which subspace of orbitals should be returned?. Returns:; A Pitzer-ordered matrix of the orbitals, (# basis functions, # orbitals in the subset).; Pitzer-ordering is with respect to c1 symmetry if basis is AO. Return type:; Matr",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:7730,Modifiability,variab,variables,7730,"rix. set_module(self, module); Sets name of the last/highest level of theory module (internal or external) touching the wavefunction. set_name(self, arg0); Sets the level of theory this wavefunction corresponds to. set_potential_variable(self, arg0, arg1); Sets the requested (case-insensitive) ExternalPotential QC variable. set_print(self, arg0); Sets the print level of the Wavefunction. set_reference_wavefunction(self, arg0); docstring. set_scalar_variable(self, arg0, arg1); Sets the requested (case-insensitive) double QC variable. set_variable(key, val); Sets scalar or array QCVariable key to val on self. shallow_copy(self, arg0); Copies the pointers to the internal data. sobasisset(self); Returns the symmetry orbitals basis. soccpi(self[, assume_socc_alpha]); Returns the number of singly occupied orbitals per irrep. to_file([filename]); Serialize a Wavefunction object. variable(key); Return copy of scalar or array QCVariable key from self. variables([include_deprecated_keys]); Return all scalar or array QCVariables from self. write_molden([filename, do_virtual, use_natural]); Writes wavefunction information in wfn to filename in molden format. write_nbo(name); Write wavefunction information in wfn to name in NBO format. Methods Documentation. Ca(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Alpha Orbitals. Ca_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Matrix¶; Returns the requested Alpha orbital subset. Parameters:. basis (str) – {‘SO’, AO’}; Should the subset be of symmetry orbitals or atomic orbitals?; subset (str) – {‘ALL’, ‘ACTIVE’, ‘FROZEN’, ‘OCC’, ‘VIR’, ‘FROZEN_OCC’, ‘ACTIVE_OCC’, ‘ACTIVE_VIR’, ‘FROZEN_VIR’}; Which subspace of orbitals should be returned?. Returns:; A Pitzer-ordered matrix of the orbitals, (# basis functions, # orbitals in the subset).; Pitzer-ordering is with respect to c1 symmetry if basis is AO. Return type:; Matrix. Cb(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Beta Orbit",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:11287,Modifiability,variab,variable,11287,"the ‘Core’ Matrix (Potential + Kinetic) Integrals. PCM_enabled(self: psi4.core.Wavefunction) → bool¶; Whether running a PCM calculation. S(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the One-electron Overlap Matrix. alpha_orbital_space(self: psi4.core.Wavefunction, id: str, basis: str, subset: str) → psi4.core.OrbitalSpace¶; Creates OrbitalSpace with information about the requested alpha orbital space. Parameters:. id – Unique name for the orbital space.; basis – {‘SO’, ‘AO’}; Should the subspace be of symmetry orbitals or atomic orbitals?; subset – {ALL, ACTIVE, FROZEN, OCC, VIR, FROZEN_OCC, ACTIVE_OCC, ACTIVE_VIR, FROZEN_VIR}; Which subspace of orbitals should be returned?. Returns:; Information on subset alpha orbitals. Return type:; OrbitalSpace. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns copy of the requested (case-insensitive) Matrix QC variable. Prefer variable(). array_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.Matrix]¶; Returns the dictionary of all Matrix QC variables. Prefer variables(). arrays()¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.variables() instead. atomic_point_charges(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the set atomic point charges. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None, *, quiet=False)¶; Build a wavefunction from minimal inputs, molecule and basis set. Parameters:. mol (Molecule) – Molecule ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:11304,Modifiability,variab,variable,11304,"s. PCM_enabled(self: psi4.core.Wavefunction) → bool¶; Whether running a PCM calculation. S(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the One-electron Overlap Matrix. alpha_orbital_space(self: psi4.core.Wavefunction, id: str, basis: str, subset: str) → psi4.core.OrbitalSpace¶; Creates OrbitalSpace with information about the requested alpha orbital space. Parameters:. id – Unique name for the orbital space.; basis – {‘SO’, ‘AO’}; Should the subspace be of symmetry orbitals or atomic orbitals?; subset – {ALL, ACTIVE, FROZEN, OCC, VIR, FROZEN_OCC, ACTIVE_OCC, ACTIVE_VIR, FROZEN_VIR}; Which subspace of orbitals should be returned?. Returns:; Information on subset alpha orbitals. Return type:; OrbitalSpace. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns copy of the requested (case-insensitive) Matrix QC variable. Prefer variable(). array_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.Matrix]¶; Returns the dictionary of all Matrix QC variables. Prefer variables(). arrays()¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.variables() instead. atomic_point_charges(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the set atomic point charges. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None, *, quiet=False)¶; Build a wavefunction from minimal inputs, molecule and basis set. Parameters:. mol (Molecule) – Molecule for which to build the wavefunction instance.; b",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:11434,Modifiability,variab,variables,11434,"vefunction) → psi4.core.Matrix¶; Returns the One-electron Overlap Matrix. alpha_orbital_space(self: psi4.core.Wavefunction, id: str, basis: str, subset: str) → psi4.core.OrbitalSpace¶; Creates OrbitalSpace with information about the requested alpha orbital space. Parameters:. id – Unique name for the orbital space.; basis – {‘SO’, ‘AO’}; Should the subspace be of symmetry orbitals or atomic orbitals?; subset – {ALL, ACTIVE, FROZEN, OCC, VIR, FROZEN_OCC, ACTIVE_OCC, ACTIVE_VIR, FROZEN_VIR}; Which subspace of orbitals should be returned?. Returns:; Information on subset alpha orbitals. Return type:; OrbitalSpace. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns copy of the requested (case-insensitive) Matrix QC variable. Prefer variable(). array_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.Matrix]¶; Returns the dictionary of all Matrix QC variables. Prefer variables(). arrays()¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.variables() instead. atomic_point_charges(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the set atomic point charges. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None, *, quiet=False)¶; Build a wavefunction from minimal inputs, molecule and basis set. Parameters:. mol (Molecule) – Molecule for which to build the wavefunction instance.; basis (Union[None, str, BasisSet]) – Basis set for which to build the wavefunction instance. If a; BasisSet, ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:11452,Modifiability,variab,variables,11452," the One-electron Overlap Matrix. alpha_orbital_space(self: psi4.core.Wavefunction, id: str, basis: str, subset: str) → psi4.core.OrbitalSpace¶; Creates OrbitalSpace with information about the requested alpha orbital space. Parameters:. id – Unique name for the orbital space.; basis – {‘SO’, ‘AO’}; Should the subspace be of symmetry orbitals or atomic orbitals?; subset – {ALL, ACTIVE, FROZEN, OCC, VIR, FROZEN_OCC, ACTIVE_OCC, ACTIVE_VIR, FROZEN_VIR}; Which subspace of orbitals should be returned?. Returns:; Information on subset alpha orbitals. Return type:; OrbitalSpace. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns copy of the requested (case-insensitive) Matrix QC variable. Prefer variable(). array_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.Matrix]¶; Returns the dictionary of all Matrix QC variables. Prefer variables(). arrays()¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.variables() instead. atomic_point_charges(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the set atomic point charges. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None, *, quiet=False)¶; Build a wavefunction from minimal inputs, molecule and basis set. Parameters:. mol (Molecule) – Molecule for which to build the wavefunction instance.; basis (Union[None, str, BasisSet]) – Basis set for which to build the wavefunction instance. If a; BasisSet, taken as-is. If a string, taken as a nam",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:11533,Modifiability,variab,variables,11533,"tr, basis: str, subset: str) → psi4.core.OrbitalSpace¶; Creates OrbitalSpace with information about the requested alpha orbital space. Parameters:. id – Unique name for the orbital space.; basis – {‘SO’, ‘AO’}; Should the subspace be of symmetry orbitals or atomic orbitals?; subset – {ALL, ACTIVE, FROZEN, OCC, VIR, FROZEN_OCC, ACTIVE_OCC, ACTIVE_VIR, FROZEN_VIR}; Which subspace of orbitals should be returned?. Returns:; Information on subset alpha orbitals. Return type:; OrbitalSpace. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns copy of the requested (case-insensitive) Matrix QC variable. Prefer variable(). array_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.Matrix]¶; Returns the dictionary of all Matrix QC variables. Prefer variables(). arrays()¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.variables() instead. atomic_point_charges(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the set atomic point charges. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None, *, quiet=False)¶; Build a wavefunction from minimal inputs, molecule and basis set. Parameters:. mol (Molecule) – Molecule for which to build the wavefunction instance.; basis (Union[None, str, BasisSet]) – Basis set for which to build the wavefunction instance. If a; BasisSet, taken as-is. If a string, taken as a name for the; primary basis. If None, name taken from BASIS.; quiet (bool) – When True, do n",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:13351,Modifiability,variab,variable,13351,"nion[None, str, BasisSet]) – Basis set for which to build the wavefunction instance. If a; BasisSet, taken as-is. If a string, taken as a name for the; primary basis. If None, name taken from BASIS.; quiet (bool) – When True, do not print to the output file. Return type:; Wavefunction. c1_deep_copy(self: psi4.core.Wavefunction, basis: psi4.core.BasisSet) → psi4.core.Wavefunction¶; Returns a new wavefunction with internal data converted to \(C_1\) symmetry, using pre-c1-constructed basis. compute_energy(self: psi4.core.Wavefunction) → float¶; Computes the energy of the Wavefunction. compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. Prefer del_variable(). del_potential_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) ExternalPotential QC variable. (This function is provisional and might be removed in the future.). del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. Prefer del_variable(). del_variable(key)¶; Removes scalar or array QCVariable key; from self if present. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or; Matrix storage maps. Return type:; None. doccpi(self: psi4.core.Wavefunction, assume_socc_alpha: bool = True) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self:",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:13518,Modifiability,variab,variable,13518,"sis. If None, name taken from BASIS.; quiet (bool) – When True, do not print to the output file. Return type:; Wavefunction. c1_deep_copy(self: psi4.core.Wavefunction, basis: psi4.core.BasisSet) → psi4.core.Wavefunction¶; Returns a new wavefunction with internal data converted to \(C_1\) symmetry, using pre-c1-constructed basis. compute_energy(self: psi4.core.Wavefunction) → float¶; Computes the energy of the Wavefunction. compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. Prefer del_variable(). del_potential_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) ExternalPotential QC variable. (This function is provisional and might be removed in the future.). del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. Prefer del_variable(). del_variable(key)¶; Removes scalar or array QCVariable key; from self if present. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or; Matrix storage maps. Return type:; None. doccpi(self: psi4.core.Wavefunction, assume_socc_alpha: bool = True) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, basis: str, subset: str) → psi4.core.",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:13716,Modifiability,variab,variable,13716,"ore.Wavefunction¶; Returns a new wavefunction with internal data converted to \(C_1\) symmetry, using pre-c1-constructed basis. compute_energy(self: psi4.core.Wavefunction) → float¶; Computes the energy of the Wavefunction. compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. Prefer del_variable(). del_potential_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) ExternalPotential QC variable. (This function is provisional and might be removed in the future.). del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. Prefer del_variable(). del_variable(key)¶; Removes scalar or array QCVariable key; from self if present. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or; Matrix storage maps. Return type:; None. doccpi(self: psi4.core.Wavefunction, assume_socc_alpha: bool = True) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, basis: str, subset: str) → psi4.core.Vector¶; Returns the requested Alpha orbital energies subset. Parameters:. basis – {‘AO’, ‘SO’, ‘MO’}; MO or SO select for Pitzer-ordering the return vector in the full computational point group symmetry.",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:17063,Modifiability,variab,variable,17063,"oubly and singly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. frequencies()¶; Returns the results of a frequency analysis. Parameters:; self – Wavefunction instance. Returns:; A dictionary of vibrational information. See psi4.driver.qcdb.vib.harmonic_analysis(). Return type:; Optional[Dict[str, ndarray]]. static from_file(wfn_data)¶; Build Wavefunction from data laid out like; to_file(). Parameters:; wfn_data (Union[str, Dict, Path]) – If a dict, use data directly. Otherwise, path-like passed to; numpy.load() to read from disk. Returns:; A deserialized Wavefunction object. Return type:; Wavefunction. frzcpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of frozen core orbitals per irrep. frzvpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of frozen virtual orbitals per irrep. get_array(key)¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.variable() instead. get_basisset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.BasisSet¶; Returns the requested auxiliary basis. get_density(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Experimental!. get_dipole_field_strength(self: psi4.core.Wavefunction) → List[float[3]]¶; Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_print(self: psi4.core.Wavefunction) → int¶; Get the print level of the Wavefunction. get_scratch_filename(filenumber)¶; Return canonical path to scratch file filenumber based on molecule on self. Parameters:. self (Wavefunction) – Wavefunction instance.; filenumber (int) – Scratch file number from psi4/psi4/include/psi4/psifiles.h. Return type:; str. get_variable(key)¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.variable() instead. gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s gradient. has_array_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the Ma",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:17878,Modifiability,variab,variable,17878,"4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of frozen virtual orbitals per irrep. get_array(key)¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.variable() instead. get_basisset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.BasisSet¶; Returns the requested auxiliary basis. get_density(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Experimental!. get_dipole_field_strength(self: psi4.core.Wavefunction) → List[float[3]]¶; Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_print(self: psi4.core.Wavefunction) → int¶; Get the print level of the Wavefunction. get_scratch_filename(filenumber)¶; Return canonical path to scratch file filenumber based on molecule on self. Parameters:. self (Wavefunction) – Wavefunction instance.; filenumber (int) – Scratch file number from psi4/psi4/include/psi4/psifiles.h. Return type:; str. get_variable(key)¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.variable() instead. gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s gradient. has_array_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the Matrix QC variable (case-insensitive) set? Prefer has_variable(). has_potential_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the ExternalPotential QC variable (case-insensitive) set? (This function is provisional and might be removed in the future.). has_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the double QC variable (case-insensitive) set? Prefer has_variable(). has_variable(key)¶; Whether scalar or array QCVariable key; has been set on self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or; Matrix storage maps. Return type:; bool. hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s Hessian. lagrangian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns t",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:18081,Modifiability,variab,variable,18081,"get_basisset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.BasisSet¶; Returns the requested auxiliary basis. get_density(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Experimental!. get_dipole_field_strength(self: psi4.core.Wavefunction) → List[float[3]]¶; Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_print(self: psi4.core.Wavefunction) → int¶; Get the print level of the Wavefunction. get_scratch_filename(filenumber)¶; Return canonical path to scratch file filenumber based on molecule on self. Parameters:. self (Wavefunction) – Wavefunction instance.; filenumber (int) – Scratch file number from psi4/psi4/include/psi4/psifiles.h. Return type:; str. get_variable(key)¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.variable() instead. gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s gradient. has_array_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the Matrix QC variable (case-insensitive) set? Prefer has_variable(). has_potential_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the ExternalPotential QC variable (case-insensitive) set? (This function is provisional and might be removed in the future.). has_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the double QC variable (case-insensitive) set? Prefer has_variable(). has_variable(key)¶; Whether scalar or array QCVariable key; has been set on self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or; Matrix storage maps. Return type:; bool. hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s Hessian. lagrangian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Lagrangian Matrix. mintshelper(self: psi4.core.Wavefunction) → psi4.core.MintsHelper¶; Returns the current MintsHelper object. mo_extents(self: psi4.core.Wavefunction) → List[psi4.core.Vector]",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:18238,Modifiability,variab,variable,18238,"i4.core.Matrix¶; Experimental!. get_dipole_field_strength(self: psi4.core.Wavefunction) → List[float[3]]¶; Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_print(self: psi4.core.Wavefunction) → int¶; Get the print level of the Wavefunction. get_scratch_filename(filenumber)¶; Return canonical path to scratch file filenumber based on molecule on self. Parameters:. self (Wavefunction) – Wavefunction instance.; filenumber (int) – Scratch file number from psi4/psi4/include/psi4/psifiles.h. Return type:; str. get_variable(key)¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.variable() instead. gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s gradient. has_array_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the Matrix QC variable (case-insensitive) set? Prefer has_variable(). has_potential_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the ExternalPotential QC variable (case-insensitive) set? (This function is provisional and might be removed in the future.). has_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the double QC variable (case-insensitive) set? Prefer has_variable(). has_variable(key)¶; Whether scalar or array QCVariable key; has been set on self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or; Matrix storage maps. Return type:; bool. hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s Hessian. lagrangian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Lagrangian Matrix. mintshelper(self: psi4.core.Wavefunction) → psi4.core.MintsHelper¶; Returns the current MintsHelper object. mo_extents(self: psi4.core.Wavefunction) → List[psi4.core.Vector]¶; returns the wavefunction’s electronic orbital extents. module(self: psi4.core.Wavefunction) → str¶; Name of the last/highest level of theory module (internal or external)",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:18426,Modifiability,variab,variable,18426,"ield strengths. get_print(self: psi4.core.Wavefunction) → int¶; Get the print level of the Wavefunction. get_scratch_filename(filenumber)¶; Return canonical path to scratch file filenumber based on molecule on self. Parameters:. self (Wavefunction) – Wavefunction instance.; filenumber (int) – Scratch file number from psi4/psi4/include/psi4/psifiles.h. Return type:; str. get_variable(key)¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.variable() instead. gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s gradient. has_array_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the Matrix QC variable (case-insensitive) set? Prefer has_variable(). has_potential_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the ExternalPotential QC variable (case-insensitive) set? (This function is provisional and might be removed in the future.). has_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the double QC variable (case-insensitive) set? Prefer has_variable(). has_variable(key)¶; Whether scalar or array QCVariable key; has been set on self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or; Matrix storage maps. Return type:; bool. hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s Hessian. lagrangian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Lagrangian Matrix. mintshelper(self: psi4.core.Wavefunction) → psi4.core.MintsHelper¶; Returns the current MintsHelper object. mo_extents(self: psi4.core.Wavefunction) → List[psi4.core.Vector]¶; returns the wavefunction’s electronic orbital extents. module(self: psi4.core.Wavefunction) → str¶; Name of the last/highest level of theory module (internal or external) touching the wavefunction. molecule(self: psi4.core.Wavefunction) → psi4.core.Molecule¶; Returns the Wavefunction’s molecule. nalpha(self: psi4.core.Wavefunction) → int¶; ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:20765,Modifiability,variab,variable,20765,"trons. nbetapi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of beta orbitals per irrep. nfrzc(self: psi4.core.Wavefunction) → int¶; Number of frozen core electrons. nirrep(self: psi4.core.Wavefunction) → int¶; Number of irreps in the system. nmo(self: psi4.core.Wavefunction) → int¶; Number of molecule orbitals. nmopi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of molecular orbitals per irrep. no_occupations(self: psi4.core.Wavefunction) → List[List[Tuple[float, int, int]]]¶; returns the natural orbital occupations on the wavefunction. nso(self: psi4.core.Wavefunction) → int¶; Number of symmetry orbitals. nsopi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of symmetry orbitals per irrep. options(self: psi4.core.Wavefunction) → psi::Options¶; Returns the Wavefunction’s options object. potential_variable(self: psi4.core.Wavefunction, key: str) → psi4.core.ExternalPotential¶; Returns copy of the requested (case-insensitive) ExternalPotential QC variable key. (This function is provisional and might be removed in the future.). potential_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.ExternalPotential]¶; Returns the dictionary of all ExternalPotential QC variables. (This function is provisional and might be removed in the future.). reference_wavefunction(self: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Returns the reference wavefunction. same_a_b_dens(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. Prefer variable(). scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. Prefer variables(). set_array(key, val)¶. Deprecated",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:20991,Modifiability,variab,variables,20991,"t¶; Number of irreps in the system. nmo(self: psi4.core.Wavefunction) → int¶; Number of molecule orbitals. nmopi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of molecular orbitals per irrep. no_occupations(self: psi4.core.Wavefunction) → List[List[Tuple[float, int, int]]]¶; returns the natural orbital occupations on the wavefunction. nso(self: psi4.core.Wavefunction) → int¶; Number of symmetry orbitals. nsopi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of symmetry orbitals per irrep. options(self: psi4.core.Wavefunction) → psi::Options¶; Returns the Wavefunction’s options object. potential_variable(self: psi4.core.Wavefunction, key: str) → psi4.core.ExternalPotential¶; Returns copy of the requested (case-insensitive) ExternalPotential QC variable key. (This function is provisional and might be removed in the future.). potential_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.ExternalPotential]¶; Returns the dictionary of all ExternalPotential QC variables. (This function is provisional and might be removed in the future.). reference_wavefunction(self: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Returns the reference wavefunction. same_a_b_dens(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. Prefer variable(). scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. Prefer variables(). set_array(key, val)¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.set_variable() instead. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. Syncs with ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:21527,Modifiability,variab,variable,21527,"bitals per irrep. options(self: psi4.core.Wavefunction) → psi::Options¶; Returns the Wavefunction’s options object. potential_variable(self: psi4.core.Wavefunction, key: str) → psi4.core.ExternalPotential¶; Returns copy of the requested (case-insensitive) ExternalPotential QC variable key. (This function is provisional and might be removed in the future.). potential_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.ExternalPotential]¶; Returns the dictionary of all ExternalPotential QC variables. (This function is provisional and might be removed in the future.). reference_wavefunction(self: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Returns the reference wavefunction. same_a_b_dens(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. Prefer variable(). scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. Prefer variables(). set_array(key, val)¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.set_variable() instead. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. Syncs with Wavefunction.gradient_ or hessian_ if CURRENT GRADIENT or HESSIAN. Prefer set_variable(). set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. Syncs with Wavefunction’s QC variable CURRENT ENERGY. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_gradient(self: psi4.core.",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:21544,Modifiability,variab,variable,21544," psi::Options¶; Returns the Wavefunction’s options object. potential_variable(self: psi4.core.Wavefunction, key: str) → psi4.core.ExternalPotential¶; Returns copy of the requested (case-insensitive) ExternalPotential QC variable key. (This function is provisional and might be removed in the future.). potential_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.ExternalPotential]¶; Returns the dictionary of all ExternalPotential QC variables. (This function is provisional and might be removed in the future.). reference_wavefunction(self: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Returns the reference wavefunction. same_a_b_dens(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. Prefer variable(). scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. Prefer variables(). set_array(key, val)¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.set_variable() instead. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. Syncs with Wavefunction.gradient_ or hessian_ if CURRENT GRADIENT or HESSIAN. Prefer set_variable(). set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. Syncs with Wavefunction’s QC variable CURRENT ENERGY. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the W",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:21664,Modifiability,variab,variables,21664,"i4.core.Wavefunction, key: str) → psi4.core.ExternalPotential¶; Returns copy of the requested (case-insensitive) ExternalPotential QC variable key. (This function is provisional and might be removed in the future.). potential_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.ExternalPotential]¶; Returns the dictionary of all ExternalPotential QC variables. (This function is provisional and might be removed in the future.). reference_wavefunction(self: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Returns the reference wavefunction. same_a_b_dens(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. Prefer variable(). scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. Prefer variables(). set_array(key, val)¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.set_variable() instead. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. Syncs with Wavefunction.gradient_ or hessian_ if CURRENT GRADIENT or HESSIAN. Prefer set_variable(). set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. Syncs with Wavefunction’s QC variable CURRENT ENERGY. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. Syncs with Wavefunction’s QC variable CURRENT GRADIENT. set_he",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:21682,Modifiability,variab,variables,21682,"otential¶; Returns copy of the requested (case-insensitive) ExternalPotential QC variable key. (This function is provisional and might be removed in the future.). potential_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.ExternalPotential]¶; Returns the dictionary of all ExternalPotential QC variables. (This function is provisional and might be removed in the future.). reference_wavefunction(self: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Returns the reference wavefunction. same_a_b_dens(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. Prefer variable(). scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. Prefer variables(). set_array(key, val)¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.set_variable() instead. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. Syncs with Wavefunction.gradient_ or hessian_ if CURRENT GRADIENT or HESSIAN. Prefer set_variable(). set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. Syncs with Wavefunction’s QC variable CURRENT ENERGY. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. Syncs with Wavefunction’s QC variable CURRENT GRADIENT. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:21939,Modifiability,variab,variable,21939,"i4.core.ExternalPotential]¶; Returns the dictionary of all ExternalPotential QC variables. (This function is provisional and might be removed in the future.). reference_wavefunction(self: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Returns the reference wavefunction. same_a_b_dens(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. Prefer variable(). scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. Prefer variables(). set_array(key, val)¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.set_variable() instead. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. Syncs with Wavefunction.gradient_ or hessian_ if CURRENT GRADIENT or HESSIAN. Prefer set_variable(). set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. Syncs with Wavefunction’s QC variable CURRENT ENERGY. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. Syncs with Wavefunction’s QC variable CURRENT GRADIENT. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. Syncs with Wavefunction’s QC variable CURRENT HESSIAN. set_lagrangian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the orbital Lagrangian matrix. set_modu",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:22299,Modifiability,variab,variable,22299,". same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. Prefer variable(). scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. Prefer variables(). set_array(key, val)¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.set_variable() instead. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. Syncs with Wavefunction.gradient_ or hessian_ if CURRENT GRADIENT or HESSIAN. Prefer set_variable(). set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. Syncs with Wavefunction’s QC variable CURRENT ENERGY. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. Syncs with Wavefunction’s QC variable CURRENT GRADIENT. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. Syncs with Wavefunction’s QC variable CURRENT HESSIAN. set_lagrangian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the orbital Lagrangian matrix. set_module(self: psi4.core.Wavefunction, module: str) → None¶; Sets name of the last/highest level of theory module (internal or external) touching the wavefunction. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_potential_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.ExternalPotential) → None¶; S",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:22599,Modifiability,variab,variable,22599,"tion) → Dict[str, float]¶; Returns the dictionary of all double QC variables. Prefer variables(). set_array(key, val)¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.set_variable() instead. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. Syncs with Wavefunction.gradient_ or hessian_ if CURRENT GRADIENT or HESSIAN. Prefer set_variable(). set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. Syncs with Wavefunction’s QC variable CURRENT ENERGY. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. Syncs with Wavefunction’s QC variable CURRENT GRADIENT. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. Syncs with Wavefunction’s QC variable CURRENT HESSIAN. set_lagrangian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the orbital Lagrangian matrix. set_module(self: psi4.core.Wavefunction, module: str) → None¶; Sets name of the last/highest level of theory module (internal or external) touching the wavefunction. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_potential_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.ExternalPotential) → None¶; Sets the requested (case-insensitive) ExternalPotential QC variable. (This function is provisional and might be removed in the future.). set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:22763,Modifiability,variab,variable,22763,".Wavefunction.set_variable() instead. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. Syncs with Wavefunction.gradient_ or hessian_ if CURRENT GRADIENT or HESSIAN. Prefer set_variable(). set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. Syncs with Wavefunction’s QC variable CURRENT ENERGY. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. Syncs with Wavefunction’s QC variable CURRENT GRADIENT. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. Syncs with Wavefunction’s QC variable CURRENT HESSIAN. set_lagrangian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the orbital Lagrangian matrix. set_module(self: psi4.core.Wavefunction, module: str) → None¶; Sets name of the last/highest level of theory module (internal or external) touching the wavefunction. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_potential_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.ExternalPotential) → None¶; Sets the requested (case-insensitive) ExternalPotential QC variable. (This function is provisional and might be removed in the future.). set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive)",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:23354,Modifiability,variab,variable,23354," ENERGY. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. Syncs with Wavefunction’s QC variable CURRENT GRADIENT. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. Syncs with Wavefunction’s QC variable CURRENT HESSIAN. set_lagrangian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the orbital Lagrangian matrix. set_module(self: psi4.core.Wavefunction, module: str) → None¶; Sets name of the last/highest level of theory module (internal or external) touching the wavefunction. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_potential_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.ExternalPotential) → None¶; Sets the requested (case-insensitive) ExternalPotential QC variable. (This function is provisional and might be removed in the future.). set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. Syncs with Wavefunction.energy_ if CURRENT ENERGY. Prefer set_variable(). set_variable(key, val)¶; Sets scalar or array QCVariable key to; val on self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. If CURRENT ENERGY, syncs with self.energy_.; If CURRENT GRADIENT, syncs with gradient_.; If CURRENT HESSIAN, syncs with self.hessian_. val (Union[Matrix, ndarray, float]) – Scalar or array to be stored in key. If ndarray and; data key does not",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:23772,Modifiability,variab,variable,23772,"ian. Syncs with Wavefunction’s QC variable CURRENT HESSIAN. set_lagrangian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the orbital Lagrangian matrix. set_module(self: psi4.core.Wavefunction, module: str) → None¶; Sets name of the last/highest level of theory module (internal or external) touching the wavefunction. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_potential_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.ExternalPotential) → None¶; Sets the requested (case-insensitive) ExternalPotential QC variable. (This function is provisional and might be removed in the future.). set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. Syncs with Wavefunction.energy_ if CURRENT ENERGY. Prefer set_variable(). set_variable(key, val)¶; Sets scalar or array QCVariable key to; val on self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. If CURRENT ENERGY, syncs with self.energy_.; If CURRENT GRADIENT, syncs with gradient_.; If CURRENT HESSIAN, syncs with self.hessian_. val (Union[Matrix, ndarray, float]) – Scalar or array to be stored in key. If ndarray and; data key does not naturally fit in 2D Matrix (often charge and; multipole QCVariables), it will be reshaped, as all; ndarray are stored as Matrix. Raises:; ValidationError – If val is a scalar but key already exists as an array variable. Or; if val is an array but key already exists as a scalar variable. Return type:; None. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:24526,Modifiability,variab,variable,24526,"¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. Syncs with Wavefunction.energy_ if CURRENT ENERGY. Prefer set_variable(). set_variable(key, val)¶; Sets scalar or array QCVariable key to; val on self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. If CURRENT ENERGY, syncs with self.energy_.; If CURRENT GRADIENT, syncs with gradient_.; If CURRENT HESSIAN, syncs with self.hessian_. val (Union[Matrix, ndarray, float]) – Scalar or array to be stored in key. If ndarray and; data key does not naturally fit in 2D Matrix (often charge and; multipole QCVariables), it will be reshaped, as all; ndarray are stored as Matrix. Raises:; ValidationError – If val is a scalar but key already exists as an array variable. Or; if val is an array but key already exists as a scalar variable. Return type:; None. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction, assume_socc_alpha: bool = True) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. to_file(filename=None)¶; Serialize a Wavefunction object. Opposite of; from_file(). Parameters:. wfn (Wavefunction) – Wavefunction or inherited class instance.; filename (str) – An optional filename to which to write the data. Returns:; A dictionary and NumPy representation of the Wavefunction. Return type:; Dict[str, Dict[str, Any]]. variable(key)¶; Return copy of scalar or array QCVariable; key from self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-i",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:24594,Modifiability,variab,variable,24594,"i4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. Syncs with Wavefunction.energy_ if CURRENT ENERGY. Prefer set_variable(). set_variable(key, val)¶; Sets scalar or array QCVariable key to; val on self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. If CURRENT ENERGY, syncs with self.energy_.; If CURRENT GRADIENT, syncs with gradient_.; If CURRENT HESSIAN, syncs with self.hessian_. val (Union[Matrix, ndarray, float]) – Scalar or array to be stored in key. If ndarray and; data key does not naturally fit in 2D Matrix (often charge and; multipole QCVariables), it will be reshaped, as all; ndarray are stored as Matrix. Raises:; ValidationError – If val is a scalar but key already exists as an array variable. Or; if val is an array but key already exists as a scalar variable. Return type:; None. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction, assume_socc_alpha: bool = True) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. to_file(filename=None)¶; Serialize a Wavefunction object. Opposite of; from_file(). Parameters:. wfn (Wavefunction) – Wavefunction or inherited class instance.; filename (str) – An optional filename to which to write the data. Returns:; A dictionary and NumPy representation of the Wavefunction. Return type:; Dict[str, Dict[str, Any]]. variable(key)¶; Return copy of scalar or array QCVariable; key from self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. Returns:; Requeste",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:25136,Modifiability,inherit,inherited,25136,"RADIENT, syncs with gradient_.; If CURRENT HESSIAN, syncs with self.hessian_. val (Union[Matrix, ndarray, float]) – Scalar or array to be stored in key. If ndarray and; data key does not naturally fit in 2D Matrix (often charge and; multipole QCVariables), it will be reshaped, as all; ndarray are stored as Matrix. Raises:; ValidationError – If val is a scalar but key already exists as an array variable. Or; if val is an array but key already exists as a scalar variable. Return type:; None. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction, assume_socc_alpha: bool = True) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. to_file(filename=None)¶; Serialize a Wavefunction object. Opposite of; from_file(). Parameters:. wfn (Wavefunction) – Wavefunction or inherited class instance.; filename (str) – An optional filename to which to write the data. Returns:; A dictionary and NumPy representation of the Wavefunction. Return type:; Dict[str, Dict[str, Any]]. variable(key)¶; Return copy of scalar or array QCVariable; key from self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. Returns:; Requested QCVariable from self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> g, wfn = psi4.gradient(""hf/cc-pvdz"", return_wfn=True); >>> wfn.variable(""CURRENT ENERGY""); -100.00985995185668; >>> wfn.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:25339,Modifiability,variab,variable,25339,"ariables), it will be reshaped, as all; ndarray are stored as Matrix. Raises:; ValidationError – If val is a scalar but key already exists as an array variable. Or; if val is an array but key already exists as a scalar variable. Return type:; None. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction, assume_socc_alpha: bool = True) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. to_file(filename=None)¶; Serialize a Wavefunction object. Opposite of; from_file(). Parameters:. wfn (Wavefunction) – Wavefunction or inherited class instance.; filename (str) – An optional filename to which to write the data. Returns:; A dictionary and NumPy representation of the Wavefunction. Return type:; Dict[str, Dict[str, Any]]. variable(key)¶; Return copy of scalar or array QCVariable; key from self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. Returns:; Requested QCVariable from self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> g, wfn = psi4.gradient(""hf/cc-pvdz"", return_wfn=True); >>> wfn.variable(""CURRENT ENERGY""); -100.00985995185668; >>> wfn.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> wfn.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> wfn.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:25600,Modifiability,variab,variables,25600,"ype:; None. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction, assume_socc_alpha: bool = True) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. to_file(filename=None)¶; Serialize a Wavefunction object. Opposite of; from_file(). Parameters:. wfn (Wavefunction) – Wavefunction or inherited class instance.; filename (str) – An optional filename to which to write the data. Returns:; A dictionary and NumPy representation of the Wavefunction. Return type:; Dict[str, Dict[str, Any]]. variable(key)¶; Return copy of scalar or array QCVariable; key from self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. Returns:; Requested QCVariable from self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> g, wfn = psi4.gradient(""hf/cc-pvdz"", return_wfn=True); >>> wfn.variable(""CURRENT ENERGY""); -100.00985995185668; >>> wfn.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> wfn.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> wfn.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from self. Parameters:. self – Wavefunction instance.; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecat",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:25641,Modifiability,variab,variables,25641,") → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction, assume_socc_alpha: bool = True) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. to_file(filename=None)¶; Serialize a Wavefunction object. Opposite of; from_file(). Parameters:. wfn (Wavefunction) – Wavefunction or inherited class instance.; filename (str) – An optional filename to which to write the data. Returns:; A dictionary and NumPy representation of the Wavefunction. Return type:; Dict[str, Dict[str, Any]]. variable(key)¶; Return copy of scalar or array QCVariable; key from self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. Returns:; Requested QCVariable from self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> g, wfn = psi4.gradient(""hf/cc-pvdz"", return_wfn=True); >>> wfn.variable(""CURRENT ENERGY""); -100.00985995185668; >>> wfn.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> wfn.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> wfn.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from self. Parameters:. self – Wavefunction instance.; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set on self. Scalar variables ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:25771,Modifiability,variab,variables,25771,"t¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction, assume_socc_alpha: bool = True) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. to_file(filename=None)¶; Serialize a Wavefunction object. Opposite of; from_file(). Parameters:. wfn (Wavefunction) – Wavefunction or inherited class instance.; filename (str) – An optional filename to which to write the data. Returns:; A dictionary and NumPy representation of the Wavefunction. Return type:; Dict[str, Dict[str, Any]]. variable(key)¶; Return copy of scalar or array QCVariable; key from self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. Returns:; Requested QCVariable from self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> g, wfn = psi4.gradient(""hf/cc-pvdz"", return_wfn=True); >>> wfn.variable(""CURRENT ENERGY""); -100.00985995185668; >>> wfn.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> wfn.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> wfn.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from self. Parameters:. self – Wavefunction instance.; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set on self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as nd",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:26026,Modifiability,variab,variable,26026,"efunction object. Opposite of; from_file(). Parameters:. wfn (Wavefunction) – Wavefunction or inherited class instance.; filename (str) – An optional filename to which to write the data. Returns:; A dictionary and NumPy representation of the Wavefunction. Return type:; Dict[str, Dict[str, Any]]. variable(key)¶; Return copy of scalar or array QCVariable; key from self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. Returns:; Requested QCVariable from self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> g, wfn = psi4.gradient(""hf/cc-pvdz"", return_wfn=True); >>> wfn.variable(""CURRENT ENERGY""); -100.00985995185668; >>> wfn.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> wfn.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> wfn.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from self. Parameters:. self – Wavefunction instance.; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set on self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. write_molden(filename=None, do_virtual=",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:26083,Modifiability,variab,variable,26083," (Wavefunction) – Wavefunction or inherited class instance.; filename (str) – An optional filename to which to write the data. Returns:; A dictionary and NumPy representation of the Wavefunction. Return type:; Dict[str, Dict[str, Any]]. variable(key)¶; Return copy of scalar or array QCVariable; key from self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. Returns:; Requested QCVariable from self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> g, wfn = psi4.gradient(""hf/cc-pvdz"", return_wfn=True); >>> wfn.variable(""CURRENT ENERGY""); -100.00985995185668; >>> wfn.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> wfn.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> wfn.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from self. Parameters:. self – Wavefunction instance.; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set on self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. write_molden(filename=None, do_virtual=None, use_natural=False)¶; Writes wavefunction information ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:26152,Modifiability,variab,variable,26152,"e (str) – An optional filename to which to write the data. Returns:; A dictionary and NumPy representation of the Wavefunction. Return type:; Dict[str, Dict[str, Any]]. variable(key)¶; Return copy of scalar or array QCVariable; key from self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. Returns:; Requested QCVariable from self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> g, wfn = psi4.gradient(""hf/cc-pvdz"", return_wfn=True); >>> wfn.variable(""CURRENT ENERGY""); -100.00985995185668; >>> wfn.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> wfn.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> wfn.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from self. Parameters:. self – Wavefunction instance.; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set on self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. write_molden(filename=None, do_virtual=None, use_natural=False)¶; Writes wavefunction information in wfn to filename in; molden format. Will write natural orbitals fr",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:26232,Modifiability,variab,variable,26232,"onary and NumPy representation of the Wavefunction. Return type:; Dict[str, Dict[str, Any]]. variable(key)¶; Return copy of scalar or array QCVariable; key from self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. Returns:; Requested QCVariable from self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> g, wfn = psi4.gradient(""hf/cc-pvdz"", return_wfn=True); >>> wfn.variable(""CURRENT ENERGY""); -100.00985995185668; >>> wfn.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> wfn.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> wfn.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from self. Parameters:. self – Wavefunction instance.; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set on self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. write_molden(filename=None, do_virtual=None, use_natural=False)¶; Writes wavefunction information in wfn to filename in; molden format. Will write natural orbitals from density (MO basis) if supplied.; Warning! most post-SCF wavefunctions do n",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:26379,Modifiability,variab,variables,26379," self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. Returns:; Requested QCVariable from self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> g, wfn = psi4.gradient(""hf/cc-pvdz"", return_wfn=True); >>> wfn.variable(""CURRENT ENERGY""); -100.00985995185668; >>> wfn.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> wfn.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> wfn.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from self. Parameters:. self – Wavefunction instance.; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set on self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. write_molden(filename=None, do_virtual=None, use_natural=False)¶; Writes wavefunction information in wfn to filename in; molden format. Will write natural orbitals from density (MO basis) if supplied.; Warning! most post-SCF wavefunctions do not build the density as this is often; much more costly than the energy. In addition, the wavefunction density attributes; (Da and Db) return the SO density and must be transform",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:26685,Modifiability,variab,variables,26685,"charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> g, wfn = psi4.gradient(""hf/cc-pvdz"", return_wfn=True); >>> wfn.variable(""CURRENT ENERGY""); -100.00985995185668; >>> wfn.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> wfn.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> wfn.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from self. Parameters:. self – Wavefunction instance.; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set on self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. write_molden(filename=None, do_virtual=None, use_natural=False)¶; Writes wavefunction information in wfn to filename in; molden format. Will write natural orbitals from density (MO basis) if supplied.; Warning! most post-SCF wavefunctions do not build the density as this is often; much more costly than the energy. In addition, the wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns:; None. Parameters:. filename (Optional[str]) – Destination file name for MOLDEN file. If unspecified (None), a file; name will be generated from the molecule name.;",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:26726,Modifiability,variab,variables,26726," are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> g, wfn = psi4.gradient(""hf/cc-pvdz"", return_wfn=True); >>> wfn.variable(""CURRENT ENERGY""); -100.00985995185668; >>> wfn.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> wfn.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> wfn.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from self. Parameters:. self – Wavefunction instance.; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set on self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. write_molden(filename=None, do_virtual=None, use_natural=False)¶; Writes wavefunction information in wfn to filename in; molden format. Will write natural orbitals from density (MO basis) if supplied.; Warning! most post-SCF wavefunctions do not build the density as this is often; much more costly than the energy. In addition, the wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns:; None. Parameters:. filename (Optional[str]) – Destination file name for MOLDEN file. If unspecified (None), a file; name will be generated from the molecule name.; do_virtual (Optional[bool]) – Do write all the MOs to the MOLDEN file (True) or d",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:26856,Modifiability,variab,variables,26856,"or Matrix. Raises:; KeyError – If key not set on self. Example; >>> g, wfn = psi4.gradient(""hf/cc-pvdz"", return_wfn=True); >>> wfn.variable(""CURRENT ENERGY""); -100.00985995185668; >>> wfn.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> wfn.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> wfn.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from self. Parameters:. self – Wavefunction instance.; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set on self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. write_molden(filename=None, do_virtual=None, use_natural=False)¶; Writes wavefunction information in wfn to filename in; molden format. Will write natural orbitals from density (MO basis) if supplied.; Warning! most post-SCF wavefunctions do not build the density as this is often; much more costly than the energy. In addition, the wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns:; None. Parameters:. filename (Optional[str]) – Destination file name for MOLDEN file. If unspecified (None), a file; name will be generated from the molecule name.; do_virtual (Optional[bool]) – Do write all the MOs to the MOLDEN file (True) or discard the unoccupied; MOs (False). Not valid for NO’s. If unspecified (None), value taken from; MOLDEN_WITH_VIRTUA",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:32288,Modifiability,variab,variable,32288," Wavefunction.get_basisset(); Wavefunction.get_density(); Wavefunction.get_dipole_field_strength(); Wavefunction.get_print(); Wavefunction.get_scratch_filename(); Wavefunction.get_variable(); Wavefunction.gradient(); Wavefunction.has_array_variable(); Wavefunction.has_potential_variable(); Wavefunction.has_scalar_variable(); Wavefunction.has_variable(); Wavefunction.hessian(); Wavefunction.lagrangian(); Wavefunction.mintshelper(); Wavefunction.mo_extents(); Wavefunction.module(); Wavefunction.molecule(); Wavefunction.nalpha(); Wavefunction.nalphapi(); Wavefunction.name(); Wavefunction.nbeta(); Wavefunction.nbetapi(); Wavefunction.nfrzc(); Wavefunction.nirrep(); Wavefunction.nmo(); Wavefunction.nmopi(); Wavefunction.no_occupations(); Wavefunction.nso(); Wavefunction.nsopi(); Wavefunction.options(); Wavefunction.potential_variable(); Wavefunction.potential_variables(); Wavefunction.reference_wavefunction(); Wavefunction.same_a_b_dens(); Wavefunction.same_a_b_orbs(); Wavefunction.scalar_variable(); Wavefunction.scalar_variables(); Wavefunction.set_array(); Wavefunction.set_array_variable(); Wavefunction.set_basisset(); Wavefunction.set_energy(); Wavefunction.set_external_potential(); Wavefunction.set_gradient(); Wavefunction.set_hessian(); Wavefunction.set_lagrangian(); Wavefunction.set_module(); Wavefunction.set_name(); Wavefunction.set_potential_variable(); Wavefunction.set_print(); Wavefunction.set_reference_wavefunction(); Wavefunction.set_scalar_variable(); Wavefunction.set_variable(); Wavefunction.shallow_copy(); Wavefunction.sobasisset(); Wavefunction.soccpi(); Wavefunction.to_file(); Wavefunction.variable(); Wavefunction.variables(); Wavefunction.write_molden(); Wavefunction.write_nbo(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; Wavefunction. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:32313,Modifiability,variab,variables,32313," Wavefunction.get_basisset(); Wavefunction.get_density(); Wavefunction.get_dipole_field_strength(); Wavefunction.get_print(); Wavefunction.get_scratch_filename(); Wavefunction.get_variable(); Wavefunction.gradient(); Wavefunction.has_array_variable(); Wavefunction.has_potential_variable(); Wavefunction.has_scalar_variable(); Wavefunction.has_variable(); Wavefunction.hessian(); Wavefunction.lagrangian(); Wavefunction.mintshelper(); Wavefunction.mo_extents(); Wavefunction.module(); Wavefunction.molecule(); Wavefunction.nalpha(); Wavefunction.nalphapi(); Wavefunction.name(); Wavefunction.nbeta(); Wavefunction.nbetapi(); Wavefunction.nfrzc(); Wavefunction.nirrep(); Wavefunction.nmo(); Wavefunction.nmopi(); Wavefunction.no_occupations(); Wavefunction.nso(); Wavefunction.nsopi(); Wavefunction.options(); Wavefunction.potential_variable(); Wavefunction.potential_variables(); Wavefunction.reference_wavefunction(); Wavefunction.same_a_b_dens(); Wavefunction.same_a_b_orbs(); Wavefunction.scalar_variable(); Wavefunction.scalar_variables(); Wavefunction.set_array(); Wavefunction.set_array_variable(); Wavefunction.set_basisset(); Wavefunction.set_energy(); Wavefunction.set_external_potential(); Wavefunction.set_gradient(); Wavefunction.set_hessian(); Wavefunction.set_lagrangian(); Wavefunction.set_module(); Wavefunction.set_name(); Wavefunction.set_potential_variable(); Wavefunction.set_print(); Wavefunction.set_reference_wavefunction(); Wavefunction.set_scalar_variable(); Wavefunction.set_variable(); Wavefunction.shallow_copy(); Wavefunction.sobasisset(); Wavefunction.soccpi(); Wavefunction.to_file(); Wavefunction.variable(); Wavefunction.variables(); Wavefunction.write_molden(); Wavefunction.write_nbo(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; Wavefunction. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:16656,Performance,load,load,16656,"als. Return type:; Vector. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector¶; returns electrostatic potentials at nuclei. external_pot(self: psi4.core.Wavefunction) → psi4.core.ExternalPotential¶; Gets the requested external potential. force_occpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension, arg1: psi4.core.Dimension) → None¶; Specialized expert use only. Sets the number of doubly and singly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. frequencies()¶; Returns the results of a frequency analysis. Parameters:; self – Wavefunction instance. Returns:; A dictionary of vibrational information. See psi4.driver.qcdb.vib.harmonic_analysis(). Return type:; Optional[Dict[str, ndarray]]. static from_file(wfn_data)¶; Build Wavefunction from data laid out like; to_file(). Parameters:; wfn_data (Union[str, Dict, Path]) – If a dict, use data directly. Otherwise, path-like passed to; numpy.load() to read from disk. Returns:; A deserialized Wavefunction object. Return type:; Wavefunction. frzcpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of frozen core orbitals per irrep. frzvpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of frozen virtual orbitals per irrep. get_array(key)¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.variable() instead. get_basisset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.BasisSet¶; Returns the requested auxiliary basis. get_density(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Experimental!. get_dipole_field_strength(self: psi4.core.Wavefunction) → List[float[3]]¶; Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_print(self: psi4.core.Wavefunction) → int¶; Get the print level of the Wavefunction. get_scratch_filename(filenumber)¶; Return canonical path to scratch file filenumber based on molecule on self. Parameters:. self (Wavefu",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html:24454,Security,Validat,ValidationError,24454,"¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. Syncs with Wavefunction.energy_ if CURRENT ENERGY. Prefer set_variable(). set_variable(key, val)¶; Sets scalar or array QCVariable key to; val on self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. If CURRENT ENERGY, syncs with self.energy_.; If CURRENT GRADIENT, syncs with gradient_.; If CURRENT HESSIAN, syncs with self.hessian_. val (Union[Matrix, ndarray, float]) – Scalar or array to be stored in key. If ndarray and; data key does not naturally fit in 2D Matrix (often charge and; multipole QCVariables), it will be reshaped, as all; ndarray are stored as Matrix. Raises:; ValidationError – If val is a scalar but key already exists as an array variable. Or; if val is an array but key already exists as a scalar variable. Return type:; None. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction, assume_socc_alpha: bool = True) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. to_file(filename=None)¶; Serialize a Wavefunction object. Opposite of; from_file(). Parameters:. wfn (Wavefunction) – Wavefunction or inherited class instance.; filename (str) – An optional filename to which to write the data. Returns:; A dictionary and NumPy representation of the Wavefunction. Return type:; Dict[str, Dict[str, Any]]. variable(key)¶; Return copy of scalar or array QCVariable; key from self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-i",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.activate.html:599,Deployability,update,updated,599,"﻿. activate. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; activate. activate¶. psi4.driver.activate(mol)[source]¶; Function to set molecule object mol as the current active molecule.; Permitted for user use but deprecated in driver in favor of explicit; molecule-passing. Parameters:; mol (Molecule) – . table of contents. activate; activate(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; activate. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.activate.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.activate.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html:2674,Availability,Error,ErrorCorrectionProtocol,2674,"efault"": false,; ""type"": ""boolean""; },; ""result"": {; ""title"": ""Result"",; ""description"": "":py:class:`~qcelemental.models.AtomicResult` return.""; },; ""result_id"": {; ""title"": ""Result Id"",; ""description"": ""The optional ID for the computation."",; ""type"": ""string""; }; },; ""required"": [; ""molecule"",; ""basis"",; ""method"",; ""driver""; ],; ""definitions"": {; ""DriverEnum"": {; ""title"": ""DriverEnum"",; ""description"": ""Allowed computation driver values."",; ""enum"": [; ""energy"",; ""gradient"",; ""hessian"",; ""properties""; ],; ""type"": ""string""; },; ""WavefunctionProtocolEnum"": {; ""title"": ""WavefunctionProtocolEnum"",; ""description"": ""Wavefunction to keep from a computation."",; ""enum"": [; ""all"",; ""orbitals_and_eigenvalues"",; ""return_results"",; ""none""; ],; ""type"": ""string""; },; ""ErrorCorrectionProtocol"": {; ""title"": ""ErrorCorrectionProtocol"",; ""description"": ""Configuration for how QCEngine handles error correction\n\nWARNING: These protocols are currently experimental and only supported by NWChem tasks"",; ""type"": ""object"",; ""properties"": {; ""default_policy"": {; ""title"": ""Default Policy"",; ""description"": ""Whether to allow error corrections to be used if not directly specified in `policies`"",; ""default"": true,; ""type"": ""boolean""; },; ""policies"": {; ""title"": ""Policies"",; ""description"": ""Settings that define whether specific error corrections are allowed. Keys are the name of a known error and values are whether it is allowed to be used."",; ""type"": ""object"",; ""additionalProperties"": {; ""type"": ""boolean""; }; }; },; ""additionalProperties"": false; },; ""NativeFilesProtocolEnum"": {; ""title"": ""NativeFilesProtocolEnum"",; ""description"": ""CMS program files to keep from a computation."",; ""enum"": [; ""all"",; ""input"",; ""none""; ],; ""type"": ""string""; },; ""AtomicResultProtocols"": {; ""title"": ""AtomicResultProtocols"",; ""description"": ""Protocols regarding the manipulation of computational result data."",; ""type"": ""object"",; ""properties"": {; ""wavefunction"": {; ""description"": ""Wavefunction to keep from a computation."",;",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html:2713,Availability,Error,ErrorCorrectionProtocol,2713,"efault"": false,; ""type"": ""boolean""; },; ""result"": {; ""title"": ""Result"",; ""description"": "":py:class:`~qcelemental.models.AtomicResult` return.""; },; ""result_id"": {; ""title"": ""Result Id"",; ""description"": ""The optional ID for the computation."",; ""type"": ""string""; }; },; ""required"": [; ""molecule"",; ""basis"",; ""method"",; ""driver""; ],; ""definitions"": {; ""DriverEnum"": {; ""title"": ""DriverEnum"",; ""description"": ""Allowed computation driver values."",; ""enum"": [; ""energy"",; ""gradient"",; ""hessian"",; ""properties""; ],; ""type"": ""string""; },; ""WavefunctionProtocolEnum"": {; ""title"": ""WavefunctionProtocolEnum"",; ""description"": ""Wavefunction to keep from a computation."",; ""enum"": [; ""all"",; ""orbitals_and_eigenvalues"",; ""return_results"",; ""none""; ],; ""type"": ""string""; },; ""ErrorCorrectionProtocol"": {; ""title"": ""ErrorCorrectionProtocol"",; ""description"": ""Configuration for how QCEngine handles error correction\n\nWARNING: These protocols are currently experimental and only supported by NWChem tasks"",; ""type"": ""object"",; ""properties"": {; ""default_policy"": {; ""title"": ""Default Policy"",; ""description"": ""Whether to allow error corrections to be used if not directly specified in `policies`"",; ""default"": true,; ""type"": ""boolean""; },; ""policies"": {; ""title"": ""Policies"",; ""description"": ""Settings that define whether specific error corrections are allowed. Keys are the name of a known error and values are whether it is allowed to be used."",; ""type"": ""object"",; ""additionalProperties"": {; ""type"": ""boolean""; }; }; },; ""additionalProperties"": false; },; ""NativeFilesProtocolEnum"": {; ""title"": ""NativeFilesProtocolEnum"",; ""description"": ""CMS program files to keep from a computation."",; ""enum"": [; ""all"",; ""input"",; ""none""; ],; ""type"": ""string""; },; ""AtomicResultProtocols"": {; ""title"": ""AtomicResultProtocols"",; ""description"": ""Protocols regarding the manipulation of computational result data."",; ""type"": ""object"",; ""properties"": {; ""wavefunction"": {; ""description"": ""Wavefunction to keep from a computation."",;",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html:2795,Availability,error,error,2795,"efault"": false,; ""type"": ""boolean""; },; ""result"": {; ""title"": ""Result"",; ""description"": "":py:class:`~qcelemental.models.AtomicResult` return.""; },; ""result_id"": {; ""title"": ""Result Id"",; ""description"": ""The optional ID for the computation."",; ""type"": ""string""; }; },; ""required"": [; ""molecule"",; ""basis"",; ""method"",; ""driver""; ],; ""definitions"": {; ""DriverEnum"": {; ""title"": ""DriverEnum"",; ""description"": ""Allowed computation driver values."",; ""enum"": [; ""energy"",; ""gradient"",; ""hessian"",; ""properties""; ],; ""type"": ""string""; },; ""WavefunctionProtocolEnum"": {; ""title"": ""WavefunctionProtocolEnum"",; ""description"": ""Wavefunction to keep from a computation."",; ""enum"": [; ""all"",; ""orbitals_and_eigenvalues"",; ""return_results"",; ""none""; ],; ""type"": ""string""; },; ""ErrorCorrectionProtocol"": {; ""title"": ""ErrorCorrectionProtocol"",; ""description"": ""Configuration for how QCEngine handles error correction\n\nWARNING: These protocols are currently experimental and only supported by NWChem tasks"",; ""type"": ""object"",; ""properties"": {; ""default_policy"": {; ""title"": ""Default Policy"",; ""description"": ""Whether to allow error corrections to be used if not directly specified in `policies`"",; ""default"": true,; ""type"": ""boolean""; },; ""policies"": {; ""title"": ""Policies"",; ""description"": ""Settings that define whether specific error corrections are allowed. Keys are the name of a known error and values are whether it is allowed to be used."",; ""type"": ""object"",; ""additionalProperties"": {; ""type"": ""boolean""; }; }; },; ""additionalProperties"": false; },; ""NativeFilesProtocolEnum"": {; ""title"": ""NativeFilesProtocolEnum"",; ""description"": ""CMS program files to keep from a computation."",; ""enum"": [; ""all"",; ""input"",; ""none""; ],; ""type"": ""string""; },; ""AtomicResultProtocols"": {; ""title"": ""AtomicResultProtocols"",; ""description"": ""Protocols regarding the manipulation of computational result data."",; ""type"": ""object"",; ""properties"": {; ""wavefunction"": {; ""description"": ""Wavefunction to keep from a computation."",;",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html:3023,Availability,error,error,3023,"efault"": false,; ""type"": ""boolean""; },; ""result"": {; ""title"": ""Result"",; ""description"": "":py:class:`~qcelemental.models.AtomicResult` return.""; },; ""result_id"": {; ""title"": ""Result Id"",; ""description"": ""The optional ID for the computation."",; ""type"": ""string""; }; },; ""required"": [; ""molecule"",; ""basis"",; ""method"",; ""driver""; ],; ""definitions"": {; ""DriverEnum"": {; ""title"": ""DriverEnum"",; ""description"": ""Allowed computation driver values."",; ""enum"": [; ""energy"",; ""gradient"",; ""hessian"",; ""properties""; ],; ""type"": ""string""; },; ""WavefunctionProtocolEnum"": {; ""title"": ""WavefunctionProtocolEnum"",; ""description"": ""Wavefunction to keep from a computation."",; ""enum"": [; ""all"",; ""orbitals_and_eigenvalues"",; ""return_results"",; ""none""; ],; ""type"": ""string""; },; ""ErrorCorrectionProtocol"": {; ""title"": ""ErrorCorrectionProtocol"",; ""description"": ""Configuration for how QCEngine handles error correction\n\nWARNING: These protocols are currently experimental and only supported by NWChem tasks"",; ""type"": ""object"",; ""properties"": {; ""default_policy"": {; ""title"": ""Default Policy"",; ""description"": ""Whether to allow error corrections to be used if not directly specified in `policies`"",; ""default"": true,; ""type"": ""boolean""; },; ""policies"": {; ""title"": ""Policies"",; ""description"": ""Settings that define whether specific error corrections are allowed. Keys are the name of a known error and values are whether it is allowed to be used."",; ""type"": ""object"",; ""additionalProperties"": {; ""type"": ""boolean""; }; }; },; ""additionalProperties"": false; },; ""NativeFilesProtocolEnum"": {; ""title"": ""NativeFilesProtocolEnum"",; ""description"": ""CMS program files to keep from a computation."",; ""enum"": [; ""all"",; ""input"",; ""none""; ],; ""type"": ""string""; },; ""AtomicResultProtocols"": {; ""title"": ""AtomicResultProtocols"",; ""description"": ""Protocols regarding the manipulation of computational result data."",; ""type"": ""object"",; ""properties"": {; ""wavefunction"": {; ""description"": ""Wavefunction to keep from a computation."",;",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html:3227,Availability,error,error,3227,"efault"": false,; ""type"": ""boolean""; },; ""result"": {; ""title"": ""Result"",; ""description"": "":py:class:`~qcelemental.models.AtomicResult` return.""; },; ""result_id"": {; ""title"": ""Result Id"",; ""description"": ""The optional ID for the computation."",; ""type"": ""string""; }; },; ""required"": [; ""molecule"",; ""basis"",; ""method"",; ""driver""; ],; ""definitions"": {; ""DriverEnum"": {; ""title"": ""DriverEnum"",; ""description"": ""Allowed computation driver values."",; ""enum"": [; ""energy"",; ""gradient"",; ""hessian"",; ""properties""; ],; ""type"": ""string""; },; ""WavefunctionProtocolEnum"": {; ""title"": ""WavefunctionProtocolEnum"",; ""description"": ""Wavefunction to keep from a computation."",; ""enum"": [; ""all"",; ""orbitals_and_eigenvalues"",; ""return_results"",; ""none""; ],; ""type"": ""string""; },; ""ErrorCorrectionProtocol"": {; ""title"": ""ErrorCorrectionProtocol"",; ""description"": ""Configuration for how QCEngine handles error correction\n\nWARNING: These protocols are currently experimental and only supported by NWChem tasks"",; ""type"": ""object"",; ""properties"": {; ""default_policy"": {; ""title"": ""Default Policy"",; ""description"": ""Whether to allow error corrections to be used if not directly specified in `policies`"",; ""default"": true,; ""type"": ""boolean""; },; ""policies"": {; ""title"": ""Policies"",; ""description"": ""Settings that define whether specific error corrections are allowed. Keys are the name of a known error and values are whether it is allowed to be used."",; ""type"": ""object"",; ""additionalProperties"": {; ""type"": ""boolean""; }; }; },; ""additionalProperties"": false; },; ""NativeFilesProtocolEnum"": {; ""title"": ""NativeFilesProtocolEnum"",; ""description"": ""CMS program files to keep from a computation."",; ""enum"": [; ""all"",; ""input"",; ""none""; ],; ""type"": ""string""; },; ""AtomicResultProtocols"": {; ""title"": ""AtomicResultProtocols"",; ""description"": ""Protocols regarding the manipulation of computational result data."",; ""type"": ""object"",; ""properties"": {; ""wavefunction"": {; ""description"": ""Wavefunction to keep from a computation."",;",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html:3287,Availability,error,error,3287,",; ""description"": ""Allowed computation driver values."",; ""enum"": [; ""energy"",; ""gradient"",; ""hessian"",; ""properties""; ],; ""type"": ""string""; },; ""WavefunctionProtocolEnum"": {; ""title"": ""WavefunctionProtocolEnum"",; ""description"": ""Wavefunction to keep from a computation."",; ""enum"": [; ""all"",; ""orbitals_and_eigenvalues"",; ""return_results"",; ""none""; ],; ""type"": ""string""; },; ""ErrorCorrectionProtocol"": {; ""title"": ""ErrorCorrectionProtocol"",; ""description"": ""Configuration for how QCEngine handles error correction\n\nWARNING: These protocols are currently experimental and only supported by NWChem tasks"",; ""type"": ""object"",; ""properties"": {; ""default_policy"": {; ""title"": ""Default Policy"",; ""description"": ""Whether to allow error corrections to be used if not directly specified in `policies`"",; ""default"": true,; ""type"": ""boolean""; },; ""policies"": {; ""title"": ""Policies"",; ""description"": ""Settings that define whether specific error corrections are allowed. Keys are the name of a known error and values are whether it is allowed to be used."",; ""type"": ""object"",; ""additionalProperties"": {; ""type"": ""boolean""; }; }; },; ""additionalProperties"": false; },; ""NativeFilesProtocolEnum"": {; ""title"": ""NativeFilesProtocolEnum"",; ""description"": ""CMS program files to keep from a computation."",; ""enum"": [; ""all"",; ""input"",; ""none""; ],; ""type"": ""string""; },; ""AtomicResultProtocols"": {; ""title"": ""AtomicResultProtocols"",; ""description"": ""Protocols regarding the manipulation of computational result data."",; ""type"": ""object"",; ""properties"": {; ""wavefunction"": {; ""description"": ""Wavefunction to keep from a computation."",; ""default"": ""none"",; ""allOf"": [; {; ""$ref"": ""#/definitions/WavefunctionProtocolEnum""; }; ]; },; ""stdout"": {; ""title"": ""Stdout"",; ""description"": ""Primary output file to keep from the computation"",; ""default"": true,; ""type"": ""boolean""; },; ""error_correction"": {; ""title"": ""Error Correction"",; ""description"": ""Policies for error correction"",; ""allOf"": [; {; ""$ref"": ""#/definitions/ErrorCor",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html:4184,Availability,Error,Error,4184,"orrections are allowed. Keys are the name of a known error and values are whether it is allowed to be used."",; ""type"": ""object"",; ""additionalProperties"": {; ""type"": ""boolean""; }; }; },; ""additionalProperties"": false; },; ""NativeFilesProtocolEnum"": {; ""title"": ""NativeFilesProtocolEnum"",; ""description"": ""CMS program files to keep from a computation."",; ""enum"": [; ""all"",; ""input"",; ""none""; ],; ""type"": ""string""; },; ""AtomicResultProtocols"": {; ""title"": ""AtomicResultProtocols"",; ""description"": ""Protocols regarding the manipulation of computational result data."",; ""type"": ""object"",; ""properties"": {; ""wavefunction"": {; ""description"": ""Wavefunction to keep from a computation."",; ""default"": ""none"",; ""allOf"": [; {; ""$ref"": ""#/definitions/WavefunctionProtocolEnum""; }; ]; },; ""stdout"": {; ""title"": ""Stdout"",; ""description"": ""Primary output file to keep from the computation"",; ""default"": true,; ""type"": ""boolean""; },; ""error_correction"": {; ""title"": ""Error Correction"",; ""description"": ""Policies for error correction"",; ""allOf"": [; {; ""$ref"": ""#/definitions/ErrorCorrectionProtocol""; }; ]; },; ""native_files"": {; ""description"": ""Policies for keeping processed files from the computation"",; ""default"": ""none"",; ""allOf"": [; {; ""$ref"": ""#/definitions/NativeFilesProtocolEnum""; }; ]; }; },; ""additionalProperties"": false; }; }; }. Fields:. basis (str); computed (bool); driver (qcelemental.models.common_models.DriverEnum); keywords (Dict[str, Any]); method (str); molecule (Any); owner_group (str | None); priority (str); protocols (qcelemental.models.results.AtomicResultProtocols | Dict[str, Any] | None); result (Any); result_id (str | None); tag (str). Validators:. set_basis » basis; set_keywords » keywords; set_method » method. field basis: str [Required]¶; The quantum chemistry basis set to evaluate (e.g., 6-31g, cc-pVDZ, …). Validated by:. set_basis. field computed: bool = False¶; Whether quantum chemistry has been run on this task. field driver: DriverEnum [Required]¶; The resulting type of",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html:4233,Availability,error,error,4233,"orrections are allowed. Keys are the name of a known error and values are whether it is allowed to be used."",; ""type"": ""object"",; ""additionalProperties"": {; ""type"": ""boolean""; }; }; },; ""additionalProperties"": false; },; ""NativeFilesProtocolEnum"": {; ""title"": ""NativeFilesProtocolEnum"",; ""description"": ""CMS program files to keep from a computation."",; ""enum"": [; ""all"",; ""input"",; ""none""; ],; ""type"": ""string""; },; ""AtomicResultProtocols"": {; ""title"": ""AtomicResultProtocols"",; ""description"": ""Protocols regarding the manipulation of computational result data."",; ""type"": ""object"",; ""properties"": {; ""wavefunction"": {; ""description"": ""Wavefunction to keep from a computation."",; ""default"": ""none"",; ""allOf"": [; {; ""$ref"": ""#/definitions/WavefunctionProtocolEnum""; }; ]; },; ""stdout"": {; ""title"": ""Stdout"",; ""description"": ""Primary output file to keep from the computation"",; ""default"": true,; ""type"": ""boolean""; },; ""error_correction"": {; ""title"": ""Error Correction"",; ""description"": ""Policies for error correction"",; ""allOf"": [; {; ""$ref"": ""#/definitions/ErrorCorrectionProtocol""; }; ]; },; ""native_files"": {; ""description"": ""Policies for keeping processed files from the computation"",; ""default"": ""none"",; ""allOf"": [; {; ""$ref"": ""#/definitions/NativeFilesProtocolEnum""; }; ]; }; },; ""additionalProperties"": false; }; }; }. Fields:. basis (str); computed (bool); driver (qcelemental.models.common_models.DriverEnum); keywords (Dict[str, Any]); method (str); molecule (Any); owner_group (str | None); priority (str); protocols (qcelemental.models.results.AtomicResultProtocols | Dict[str, Any] | None); result (Any); result_id (str | None); tag (str). Validators:. set_basis » basis; set_keywords » keywords; set_method » method. field basis: str [Required]¶; The quantum chemistry basis set to evaluate (e.g., 6-31g, cc-pVDZ, …). Validated by:. set_basis. field computed: bool = False¶; Whether quantum chemistry has been run on this task. field driver: DriverEnum [Required]¶; The resulting type of",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html:4291,Availability,Error,ErrorCorrectionProtocol,4291,"orrections are allowed. Keys are the name of a known error and values are whether it is allowed to be used."",; ""type"": ""object"",; ""additionalProperties"": {; ""type"": ""boolean""; }; }; },; ""additionalProperties"": false; },; ""NativeFilesProtocolEnum"": {; ""title"": ""NativeFilesProtocolEnum"",; ""description"": ""CMS program files to keep from a computation."",; ""enum"": [; ""all"",; ""input"",; ""none""; ],; ""type"": ""string""; },; ""AtomicResultProtocols"": {; ""title"": ""AtomicResultProtocols"",; ""description"": ""Protocols regarding the manipulation of computational result data."",; ""type"": ""object"",; ""properties"": {; ""wavefunction"": {; ""description"": ""Wavefunction to keep from a computation."",; ""default"": ""none"",; ""allOf"": [; {; ""$ref"": ""#/definitions/WavefunctionProtocolEnum""; }; ]; },; ""stdout"": {; ""title"": ""Stdout"",; ""description"": ""Primary output file to keep from the computation"",; ""default"": true,; ""type"": ""boolean""; },; ""error_correction"": {; ""title"": ""Error Correction"",; ""description"": ""Policies for error correction"",; ""allOf"": [; {; ""$ref"": ""#/definitions/ErrorCorrectionProtocol""; }; ]; },; ""native_files"": {; ""description"": ""Policies for keeping processed files from the computation"",; ""default"": ""none"",; ""allOf"": [; {; ""$ref"": ""#/definitions/NativeFilesProtocolEnum""; }; ]; }; },; ""additionalProperties"": false; }; }; }. Fields:. basis (str); computed (bool); driver (qcelemental.models.common_models.DriverEnum); keywords (Dict[str, Any]); method (str); molecule (Any); owner_group (str | None); priority (str); protocols (qcelemental.models.results.AtomicResultProtocols | Dict[str, Any] | None); result (Any); result_id (str | None); tag (str). Validators:. set_basis » basis; set_keywords » keywords; set_method » method. field basis: str [Required]¶; The quantum chemistry basis set to evaluate (e.g., 6-31g, cc-pVDZ, …). Validated by:. set_basis. field computed: bool = False¶; Whether quantum chemistry has been run on this task. field driver: DriverEnum [Required]¶; The resulting type of",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html:2756,Deployability,Configurat,Configuration,2756,"efault"": false,; ""type"": ""boolean""; },; ""result"": {; ""title"": ""Result"",; ""description"": "":py:class:`~qcelemental.models.AtomicResult` return.""; },; ""result_id"": {; ""title"": ""Result Id"",; ""description"": ""The optional ID for the computation."",; ""type"": ""string""; }; },; ""required"": [; ""molecule"",; ""basis"",; ""method"",; ""driver""; ],; ""definitions"": {; ""DriverEnum"": {; ""title"": ""DriverEnum"",; ""description"": ""Allowed computation driver values."",; ""enum"": [; ""energy"",; ""gradient"",; ""hessian"",; ""properties""; ],; ""type"": ""string""; },; ""WavefunctionProtocolEnum"": {; ""title"": ""WavefunctionProtocolEnum"",; ""description"": ""Wavefunction to keep from a computation."",; ""enum"": [; ""all"",; ""orbitals_and_eigenvalues"",; ""return_results"",; ""none""; ],; ""type"": ""string""; },; ""ErrorCorrectionProtocol"": {; ""title"": ""ErrorCorrectionProtocol"",; ""description"": ""Configuration for how QCEngine handles error correction\n\nWARNING: These protocols are currently experimental and only supported by NWChem tasks"",; ""type"": ""object"",; ""properties"": {; ""default_policy"": {; ""title"": ""Default Policy"",; ""description"": ""Whether to allow error corrections to be used if not directly specified in `policies`"",; ""default"": true,; ""type"": ""boolean""; },; ""policies"": {; ""title"": ""Policies"",; ""description"": ""Settings that define whether specific error corrections are allowed. Keys are the name of a known error and values are whether it is allowed to be used."",; ""type"": ""object"",; ""additionalProperties"": {; ""type"": ""boolean""; }; }; },; ""additionalProperties"": false; },; ""NativeFilesProtocolEnum"": {; ""title"": ""NativeFilesProtocolEnum"",; ""description"": ""CMS program files to keep from a computation."",; ""enum"": [; ""all"",; ""input"",; ""none""; ],; ""type"": ""string""; },; ""AtomicResultProtocols"": {; ""title"": ""AtomicResultProtocols"",; ""description"": ""Protocols regarding the manipulation of computational result data."",; ""type"": ""object"",; ""properties"": {; ""wavefunction"": {; ""description"": ""Wavefunction to keep from a computation."",;",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html:7448,Deployability,update,updated,7448,"tum chemistry method to evaluate (e.g., B3LYP, MP2, …). Validated by:. set_method. field molecule: Any [Required]¶; The molecule to use in the computation. field owner_group: Optional[str] = None¶; group in the chown sense. field priority: str = 1¶; The priority of a Task; higher priority will be pulled first. {high:2, normal:1, low:0}. field protocols: Union[AtomicResultProtocols, Dict[str, Any], None] = {'stdout': True}¶; Output modifications. field result: Any [Optional]¶; AtomicResult return. field result_id: Optional[str] = None¶; The optional ID for the computation. field tag: str = '*'¶; The tags to pass along to compute managers. compute(client=None)[source]¶; Run quantum chemistry. Parameters:; client (qcportal.client.FractalClient | None) – . get_results(client=None)[source]¶; Return results as Atomic-flavored QCSchema. Parameters:; client (qcportal.FractalClient | None) – . Return type:; AtomicResult. plan()[source]¶; Form QCSchema input from member data. Return type:; AtomicInput. validator set_basis  »  psi4.driver.AtomicComputer.basis[source]¶. validator set_keywords  »  psi4.driver.AtomicComputer.keywords[source]¶. validator set_method  »  psi4.driver.AtomicComputer.method[source]¶. table of contents. AtomicComputer; AtomicComputer; AtomicComputer.basis; AtomicComputer.computed; AtomicComputer.driver; AtomicComputer.keywords; AtomicComputer.method; AtomicComputer.molecule; AtomicComputer.owner_group; AtomicComputer.priority; AtomicComputer.protocols; AtomicComputer.result; AtomicComputer.result_id; AtomicComputer.tag; AtomicComputer.compute(); AtomicComputer.get_results(); AtomicComputer.plan(); AtomicComputer.set_basis; AtomicComputer.set_keywords; AtomicComputer.set_method. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; AtomicComputer. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html:862,Energy Efficiency,energy,energy,862,"﻿. AtomicComputer. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; AtomicComputer. AtomicComputer¶. pydantic model psi4.driver.AtomicComputer[source]¶; Computer for analytic single-geometry computations. Show JSON schema{; ""title"": ""AtomicComputer"",; ""description"": ""Computer for analytic single-geometry computations."",; ""type"": ""object"",; ""properties"": {; ""molecule"": {; ""title"": ""Molecule"",; ""description"": ""The molecule to use in the computation.""; },; ""basis"": {; ""title"": ""Basis"",; ""description"": ""The quantum chemistry basis set to evaluate (e.g., 6-31g, cc-pVDZ, ...)."",; ""type"": ""string""; },; ""method"": {; ""title"": ""Method"",; ""description"": ""The quantum chemistry method to evaluate (e.g., B3LYP, MP2, ...)."",; ""type"": ""string""; },; ""driver"": {; ""description"": ""The resulting type of computation: energy, gradient, hessian, properties.Note for finite difference that this should be the target driver, not the means driver."",; ""allOf"": [; {; ""$ref"": ""#/definitions/DriverEnum""; }; ]; },; ""keywords"": {; ""title"": ""Keywords"",; ""description"": ""The keywords to use in the computation."",; ""type"": ""object""; },; ""protocols"": {; ""title"": ""Protocols"",; ""description"": ""Output modifications."",; ""default"": {; ""stdout"": true; },; ""anyOf"": [; {; ""$ref"": ""#/definitions/AtomicResultProtocols""; },; {; ""type"": ""object""; }; ]; },; ""tag"": {; ""title"": ""Tag"",; ""description"": ""The tags to pass along to compute managers."",; ""default"": ""*"",; ""type"": ""string""; },; ""priority"": {; ""title"": ""Priority"",; ""description"": ""The priority of a Task; higher priority will be pulled first. {high:2, normal:1, low:0}"",; ""default"": 1,; ""type"": ""string""; },; ""owner_group"": {; ""title"": ""Owner Group"",; ""description"": ""group in the chown sense."",; ""type"": ""string""; },; ""computed"": {; ""title"": ""Computed"",; ""description"": ""Whether quantum chemistry has been run on this task."",; ""default"": false,; ""type"": ""boolean""; },; ""result"": {; ""title"": ""Result"",; ""description"": """,MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html:2368,Energy Efficiency,energy,energy,2368,"nagers."",; ""default"": ""*"",; ""type"": ""string""; },; ""priority"": {; ""title"": ""Priority"",; ""description"": ""The priority of a Task; higher priority will be pulled first. {high:2, normal:1, low:0}"",; ""default"": 1,; ""type"": ""string""; },; ""owner_group"": {; ""title"": ""Owner Group"",; ""description"": ""group in the chown sense."",; ""type"": ""string""; },; ""computed"": {; ""title"": ""Computed"",; ""description"": ""Whether quantum chemistry has been run on this task."",; ""default"": false,; ""type"": ""boolean""; },; ""result"": {; ""title"": ""Result"",; ""description"": "":py:class:`~qcelemental.models.AtomicResult` return.""; },; ""result_id"": {; ""title"": ""Result Id"",; ""description"": ""The optional ID for the computation."",; ""type"": ""string""; }; },; ""required"": [; ""molecule"",; ""basis"",; ""method"",; ""driver""; ],; ""definitions"": {; ""DriverEnum"": {; ""title"": ""DriverEnum"",; ""description"": ""Allowed computation driver values."",; ""enum"": [; ""energy"",; ""gradient"",; ""hessian"",; ""properties""; ],; ""type"": ""string""; },; ""WavefunctionProtocolEnum"": {; ""title"": ""WavefunctionProtocolEnum"",; ""description"": ""Wavefunction to keep from a computation."",; ""enum"": [; ""all"",; ""orbitals_and_eigenvalues"",; ""return_results"",; ""none""; ],; ""type"": ""string""; },; ""ErrorCorrectionProtocol"": {; ""title"": ""ErrorCorrectionProtocol"",; ""description"": ""Configuration for how QCEngine handles error correction\n\nWARNING: These protocols are currently experimental and only supported by NWChem tasks"",; ""type"": ""object"",; ""properties"": {; ""default_policy"": {; ""title"": ""Default Policy"",; ""description"": ""Whether to allow error corrections to be used if not directly specified in `policies`"",; ""default"": true,; ""type"": ""boolean""; },; ""policies"": {; ""title"": ""Policies"",; ""description"": ""Settings that define whether specific error corrections are allowed. Keys are the name of a known error and values are whether it is allowed to be used."",; ""type"": ""object"",; ""additionalProperties"": {; ""type"": ""boolean""; }; }; },; ""additionalProperties"": false; },; ""Nati",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html:5249,Energy Efficiency,energy,energy,5249,"r error correction"",; ""allOf"": [; {; ""$ref"": ""#/definitions/ErrorCorrectionProtocol""; }; ]; },; ""native_files"": {; ""description"": ""Policies for keeping processed files from the computation"",; ""default"": ""none"",; ""allOf"": [; {; ""$ref"": ""#/definitions/NativeFilesProtocolEnum""; }; ]; }; },; ""additionalProperties"": false; }; }; }. Fields:. basis (str); computed (bool); driver (qcelemental.models.common_models.DriverEnum); keywords (Dict[str, Any]); method (str); molecule (Any); owner_group (str | None); priority (str); protocols (qcelemental.models.results.AtomicResultProtocols | Dict[str, Any] | None); result (Any); result_id (str | None); tag (str). Validators:. set_basis » basis; set_keywords » keywords; set_method » method. field basis: str [Required]¶; The quantum chemistry basis set to evaluate (e.g., 6-31g, cc-pVDZ, …). Validated by:. set_basis. field computed: bool = False¶; Whether quantum chemistry has been run on this task. field driver: DriverEnum [Required]¶; The resulting type of computation: energy, gradient, hessian, properties.Note for finite difference that this should be the target driver, not the means driver. field keywords: Dict[str, Any] [Optional]¶; The keywords to use in the computation. Validated by:. set_keywords. field method: str [Required]¶; The quantum chemistry method to evaluate (e.g., B3LYP, MP2, …). Validated by:. set_method. field molecule: Any [Required]¶; The molecule to use in the computation. field owner_group: Optional[str] = None¶; group in the chown sense. field priority: str = 1¶; The priority of a Task; higher priority will be pulled first. {high:2, normal:1, low:0}. field protocols: Union[AtomicResultProtocols, Dict[str, Any], None] = {'stdout': True}¶; Output modifications. field result: Any [Optional]¶; AtomicResult return. field result_id: Optional[str] = None¶; The optional ID for the computation. field tag: str = '*'¶; The tags to pass along to compute managers. compute(client=None)[source]¶; Run quantum chemistry. Para",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html:1171,Integrability,protocol,protocols,1171,"er[source]¶; Computer for analytic single-geometry computations. Show JSON schema{; ""title"": ""AtomicComputer"",; ""description"": ""Computer for analytic single-geometry computations."",; ""type"": ""object"",; ""properties"": {; ""molecule"": {; ""title"": ""Molecule"",; ""description"": ""The molecule to use in the computation.""; },; ""basis"": {; ""title"": ""Basis"",; ""description"": ""The quantum chemistry basis set to evaluate (e.g., 6-31g, cc-pVDZ, ...)."",; ""type"": ""string""; },; ""method"": {; ""title"": ""Method"",; ""description"": ""The quantum chemistry method to evaluate (e.g., B3LYP, MP2, ...)."",; ""type"": ""string""; },; ""driver"": {; ""description"": ""The resulting type of computation: energy, gradient, hessian, properties.Note for finite difference that this should be the target driver, not the means driver."",; ""allOf"": [; {; ""$ref"": ""#/definitions/DriverEnum""; }; ]; },; ""keywords"": {; ""title"": ""Keywords"",; ""description"": ""The keywords to use in the computation."",; ""type"": ""object""; },; ""protocols"": {; ""title"": ""Protocols"",; ""description"": ""Output modifications."",; ""default"": {; ""stdout"": true; },; ""anyOf"": [; {; ""$ref"": ""#/definitions/AtomicResultProtocols""; },; {; ""type"": ""object""; }; ]; },; ""tag"": {; ""title"": ""Tag"",; ""description"": ""The tags to pass along to compute managers."",; ""default"": ""*"",; ""type"": ""string""; },; ""priority"": {; ""title"": ""Priority"",; ""description"": ""The priority of a Task; higher priority will be pulled first. {high:2, normal:1, low:0}"",; ""default"": 1,; ""type"": ""string""; },; ""owner_group"": {; ""title"": ""Owner Group"",; ""description"": ""group in the chown sense."",; ""type"": ""string""; },; ""computed"": {; ""title"": ""Computed"",; ""description"": ""Whether quantum chemistry has been run on this task."",; ""default"": false,; ""type"": ""boolean""; },; ""result"": {; ""title"": ""Result"",; ""description"": "":py:class:`~qcelemental.models.AtomicResult` return.""; },; ""result_id"": {; ""title"": ""Result Id"",; ""description"": ""The optional ID for the computation."",; ""type"": ""string""; }; },; ""required"": [; ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html:1196,Integrability,Protocol,Protocols,1196,"er[source]¶; Computer for analytic single-geometry computations. Show JSON schema{; ""title"": ""AtomicComputer"",; ""description"": ""Computer for analytic single-geometry computations."",; ""type"": ""object"",; ""properties"": {; ""molecule"": {; ""title"": ""Molecule"",; ""description"": ""The molecule to use in the computation.""; },; ""basis"": {; ""title"": ""Basis"",; ""description"": ""The quantum chemistry basis set to evaluate (e.g., 6-31g, cc-pVDZ, ...)."",; ""type"": ""string""; },; ""method"": {; ""title"": ""Method"",; ""description"": ""The quantum chemistry method to evaluate (e.g., B3LYP, MP2, ...)."",; ""type"": ""string""; },; ""driver"": {; ""description"": ""The resulting type of computation: energy, gradient, hessian, properties.Note for finite difference that this should be the target driver, not the means driver."",; ""allOf"": [; {; ""$ref"": ""#/definitions/DriverEnum""; }; ]; },; ""keywords"": {; ""title"": ""Keywords"",; ""description"": ""The keywords to use in the computation."",; ""type"": ""object""; },; ""protocols"": {; ""title"": ""Protocols"",; ""description"": ""Output modifications."",; ""default"": {; ""stdout"": true; },; ""anyOf"": [; {; ""$ref"": ""#/definitions/AtomicResultProtocols""; },; {; ""type"": ""object""; }; ]; },; ""tag"": {; ""title"": ""Tag"",; ""description"": ""The tags to pass along to compute managers."",; ""default"": ""*"",; ""type"": ""string""; },; ""priority"": {; ""title"": ""Priority"",; ""description"": ""The priority of a Task; higher priority will be pulled first. {high:2, normal:1, low:0}"",; ""default"": 1,; ""type"": ""string""; },; ""owner_group"": {; ""title"": ""Owner Group"",; ""description"": ""group in the chown sense."",; ""type"": ""string""; },; ""computed"": {; ""title"": ""Computed"",; ""description"": ""Whether quantum chemistry has been run on this task."",; ""default"": false,; ""type"": ""boolean""; },; ""result"": {; ""title"": ""Result"",; ""description"": "":py:class:`~qcelemental.models.AtomicResult` return.""; },; ""result_id"": {; ""title"": ""Result Id"",; ""description"": ""The optional ID for the computation."",; ""type"": ""string""; }; },; ""required"": [; ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html:2830,Integrability,protocol,protocols,2830,"efault"": false,; ""type"": ""boolean""; },; ""result"": {; ""title"": ""Result"",; ""description"": "":py:class:`~qcelemental.models.AtomicResult` return.""; },; ""result_id"": {; ""title"": ""Result Id"",; ""description"": ""The optional ID for the computation."",; ""type"": ""string""; }; },; ""required"": [; ""molecule"",; ""basis"",; ""method"",; ""driver""; ],; ""definitions"": {; ""DriverEnum"": {; ""title"": ""DriverEnum"",; ""description"": ""Allowed computation driver values."",; ""enum"": [; ""energy"",; ""gradient"",; ""hessian"",; ""properties""; ],; ""type"": ""string""; },; ""WavefunctionProtocolEnum"": {; ""title"": ""WavefunctionProtocolEnum"",; ""description"": ""Wavefunction to keep from a computation."",; ""enum"": [; ""all"",; ""orbitals_and_eigenvalues"",; ""return_results"",; ""none""; ],; ""type"": ""string""; },; ""ErrorCorrectionProtocol"": {; ""title"": ""ErrorCorrectionProtocol"",; ""description"": ""Configuration for how QCEngine handles error correction\n\nWARNING: These protocols are currently experimental and only supported by NWChem tasks"",; ""type"": ""object"",; ""properties"": {; ""default_policy"": {; ""title"": ""Default Policy"",; ""description"": ""Whether to allow error corrections to be used if not directly specified in `policies`"",; ""default"": true,; ""type"": ""boolean""; },; ""policies"": {; ""title"": ""Policies"",; ""description"": ""Settings that define whether specific error corrections are allowed. Keys are the name of a known error and values are whether it is allowed to be used."",; ""type"": ""object"",; ""additionalProperties"": {; ""type"": ""boolean""; }; }; },; ""additionalProperties"": false; },; ""NativeFilesProtocolEnum"": {; ""title"": ""NativeFilesProtocolEnum"",; ""description"": ""CMS program files to keep from a computation."",; ""enum"": [; ""all"",; ""input"",; ""none""; ],; ""type"": ""string""; },; ""AtomicResultProtocols"": {; ""title"": ""AtomicResultProtocols"",; ""description"": ""Protocols regarding the manipulation of computational result data."",; ""type"": ""object"",; ""properties"": {; ""wavefunction"": {; ""description"": ""Wavefunction to keep from a computation."",;",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html:3729,Integrability,Protocol,Protocols,3729,"Protocol"": {; ""title"": ""ErrorCorrectionProtocol"",; ""description"": ""Configuration for how QCEngine handles error correction\n\nWARNING: These protocols are currently experimental and only supported by NWChem tasks"",; ""type"": ""object"",; ""properties"": {; ""default_policy"": {; ""title"": ""Default Policy"",; ""description"": ""Whether to allow error corrections to be used if not directly specified in `policies`"",; ""default"": true,; ""type"": ""boolean""; },; ""policies"": {; ""title"": ""Policies"",; ""description"": ""Settings that define whether specific error corrections are allowed. Keys are the name of a known error and values are whether it is allowed to be used."",; ""type"": ""object"",; ""additionalProperties"": {; ""type"": ""boolean""; }; }; },; ""additionalProperties"": false; },; ""NativeFilesProtocolEnum"": {; ""title"": ""NativeFilesProtocolEnum"",; ""description"": ""CMS program files to keep from a computation."",; ""enum"": [; ""all"",; ""input"",; ""none""; ],; ""type"": ""string""; },; ""AtomicResultProtocols"": {; ""title"": ""AtomicResultProtocols"",; ""description"": ""Protocols regarding the manipulation of computational result data."",; ""type"": ""object"",; ""properties"": {; ""wavefunction"": {; ""description"": ""Wavefunction to keep from a computation."",; ""default"": ""none"",; ""allOf"": [; {; ""$ref"": ""#/definitions/WavefunctionProtocolEnum""; }; ]; },; ""stdout"": {; ""title"": ""Stdout"",; ""description"": ""Primary output file to keep from the computation"",; ""default"": true,; ""type"": ""boolean""; },; ""error_correction"": {; ""title"": ""Error Correction"",; ""description"": ""Policies for error correction"",; ""allOf"": [; {; ""$ref"": ""#/definitions/ErrorCorrectionProtocol""; }; ]; },; ""native_files"": {; ""description"": ""Policies for keeping processed files from the computation"",; ""default"": ""none"",; ""allOf"": [; {; ""$ref"": ""#/definitions/NativeFilesProtocolEnum""; }; ]; }; },; ""additionalProperties"": false; }; }; }. Fields:. basis (str); computed (bool); driver (qcelemental.models.common_models.DriverEnum); keywords (Dict[str, Any]); method (s",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html:4752,Integrability,protocol,protocols,4752,"ls"",; ""description"": ""Protocols regarding the manipulation of computational result data."",; ""type"": ""object"",; ""properties"": {; ""wavefunction"": {; ""description"": ""Wavefunction to keep from a computation."",; ""default"": ""none"",; ""allOf"": [; {; ""$ref"": ""#/definitions/WavefunctionProtocolEnum""; }; ]; },; ""stdout"": {; ""title"": ""Stdout"",; ""description"": ""Primary output file to keep from the computation"",; ""default"": true,; ""type"": ""boolean""; },; ""error_correction"": {; ""title"": ""Error Correction"",; ""description"": ""Policies for error correction"",; ""allOf"": [; {; ""$ref"": ""#/definitions/ErrorCorrectionProtocol""; }; ]; },; ""native_files"": {; ""description"": ""Policies for keeping processed files from the computation"",; ""default"": ""none"",; ""allOf"": [; {; ""$ref"": ""#/definitions/NativeFilesProtocolEnum""; }; ]; }; },; ""additionalProperties"": false; }; }; }. Fields:. basis (str); computed (bool); driver (qcelemental.models.common_models.DriverEnum); keywords (Dict[str, Any]); method (str); molecule (Any); owner_group (str | None); priority (str); protocols (qcelemental.models.results.AtomicResultProtocols | Dict[str, Any] | None); result (Any); result_id (str | None); tag (str). Validators:. set_basis » basis; set_keywords » keywords; set_method » method. field basis: str [Required]¶; The quantum chemistry basis set to evaluate (e.g., 6-31g, cc-pVDZ, …). Validated by:. set_basis. field computed: bool = False¶; Whether quantum chemistry has been run on this task. field driver: DriverEnum [Required]¶; The resulting type of computation: energy, gradient, hessian, properties.Note for finite difference that this should be the target driver, not the means driver. field keywords: Dict[str, Any] [Optional]¶; The keywords to use in the computation. Validated by:. set_keywords. field method: str [Required]¶; The quantum chemistry method to evaluate (e.g., B3LYP, MP2, …). Validated by:. set_method. field molecule: Any [Required]¶; The molecule to use in the computation. field owner_group: Option",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html:5872,Integrability,protocol,protocols,5872,"et_keywords » keywords; set_method » method. field basis: str [Required]¶; The quantum chemistry basis set to evaluate (e.g., 6-31g, cc-pVDZ, …). Validated by:. set_basis. field computed: bool = False¶; Whether quantum chemistry has been run on this task. field driver: DriverEnum [Required]¶; The resulting type of computation: energy, gradient, hessian, properties.Note for finite difference that this should be the target driver, not the means driver. field keywords: Dict[str, Any] [Optional]¶; The keywords to use in the computation. Validated by:. set_keywords. field method: str [Required]¶; The quantum chemistry method to evaluate (e.g., B3LYP, MP2, …). Validated by:. set_method. field molecule: Any [Required]¶; The molecule to use in the computation. field owner_group: Optional[str] = None¶; group in the chown sense. field priority: str = 1¶; The priority of a Task; higher priority will be pulled first. {high:2, normal:1, low:0}. field protocols: Union[AtomicResultProtocols, Dict[str, Any], None] = {'stdout': True}¶; Output modifications. field result: Any [Optional]¶; AtomicResult return. field result_id: Optional[str] = None¶; The optional ID for the computation. field tag: str = '*'¶; The tags to pass along to compute managers. compute(client=None)[source]¶; Run quantum chemistry. Parameters:; client (qcportal.client.FractalClient | None) – . get_results(client=None)[source]¶; Return results as Atomic-flavored QCSchema. Parameters:; client (qcportal.FractalClient | None) – . Return type:; AtomicResult. plan()[source]¶; Form QCSchema input from member data. Return type:; AtomicInput. validator set_basis  »  psi4.driver.AtomicComputer.basis[source]¶. validator set_keywords  »  psi4.driver.AtomicComputer.keywords[source]¶. validator set_method  »  psi4.driver.AtomicComputer.method[source]¶. table of contents. AtomicComputer; AtomicComputer; AtomicComputer.basis; AtomicComputer.computed; AtomicComputer.driver; AtomicComputer.keywords; AtomicComputer.method; AtomicCo",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html:7006,Integrability,protocol,protocols,7006,"tum chemistry method to evaluate (e.g., B3LYP, MP2, …). Validated by:. set_method. field molecule: Any [Required]¶; The molecule to use in the computation. field owner_group: Optional[str] = None¶; group in the chown sense. field priority: str = 1¶; The priority of a Task; higher priority will be pulled first. {high:2, normal:1, low:0}. field protocols: Union[AtomicResultProtocols, Dict[str, Any], None] = {'stdout': True}¶; Output modifications. field result: Any [Optional]¶; AtomicResult return. field result_id: Optional[str] = None¶; The optional ID for the computation. field tag: str = '*'¶; The tags to pass along to compute managers. compute(client=None)[source]¶; Run quantum chemistry. Parameters:; client (qcportal.client.FractalClient | None) – . get_results(client=None)[source]¶; Return results as Atomic-flavored QCSchema. Parameters:; client (qcportal.FractalClient | None) – . Return type:; AtomicResult. plan()[source]¶; Form QCSchema input from member data. Return type:; AtomicInput. validator set_basis  »  psi4.driver.AtomicComputer.basis[source]¶. validator set_keywords  »  psi4.driver.AtomicComputer.keywords[source]¶. validator set_method  »  psi4.driver.AtomicComputer.method[source]¶. table of contents. AtomicComputer; AtomicComputer; AtomicComputer.basis; AtomicComputer.computed; AtomicComputer.driver; AtomicComputer.keywords; AtomicComputer.method; AtomicComputer.molecule; AtomicComputer.owner_group; AtomicComputer.priority; AtomicComputer.protocols; AtomicComputer.result; AtomicComputer.result_id; AtomicComputer.tag; AtomicComputer.compute(); AtomicComputer.get_results(); AtomicComputer.plan(); AtomicComputer.set_basis; AtomicComputer.set_keywords; AtomicComputer.set_method. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; AtomicComputer. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html:2756,Modifiability,Config,Configuration,2756,"efault"": false,; ""type"": ""boolean""; },; ""result"": {; ""title"": ""Result"",; ""description"": "":py:class:`~qcelemental.models.AtomicResult` return.""; },; ""result_id"": {; ""title"": ""Result Id"",; ""description"": ""The optional ID for the computation."",; ""type"": ""string""; }; },; ""required"": [; ""molecule"",; ""basis"",; ""method"",; ""driver""; ],; ""definitions"": {; ""DriverEnum"": {; ""title"": ""DriverEnum"",; ""description"": ""Allowed computation driver values."",; ""enum"": [; ""energy"",; ""gradient"",; ""hessian"",; ""properties""; ],; ""type"": ""string""; },; ""WavefunctionProtocolEnum"": {; ""title"": ""WavefunctionProtocolEnum"",; ""description"": ""Wavefunction to keep from a computation."",; ""enum"": [; ""all"",; ""orbitals_and_eigenvalues"",; ""return_results"",; ""none""; ],; ""type"": ""string""; },; ""ErrorCorrectionProtocol"": {; ""title"": ""ErrorCorrectionProtocol"",; ""description"": ""Configuration for how QCEngine handles error correction\n\nWARNING: These protocols are currently experimental and only supported by NWChem tasks"",; ""type"": ""object"",; ""properties"": {; ""default_policy"": {; ""title"": ""Default Policy"",; ""description"": ""Whether to allow error corrections to be used if not directly specified in `policies`"",; ""default"": true,; ""type"": ""boolean""; },; ""policies"": {; ""title"": ""Policies"",; ""description"": ""Settings that define whether specific error corrections are allowed. Keys are the name of a known error and values are whether it is allowed to be used."",; ""type"": ""object"",; ""additionalProperties"": {; ""type"": ""boolean""; }; }; },; ""additionalProperties"": false; },; ""NativeFilesProtocolEnum"": {; ""title"": ""NativeFilesProtocolEnum"",; ""description"": ""CMS program files to keep from a computation."",; ""enum"": [; ""all"",; ""input"",; ""none""; ],; ""type"": ""string""; },; ""AtomicResultProtocols"": {; ""title"": ""AtomicResultProtocols"",; ""description"": ""Protocols regarding the manipulation of computational result data."",; ""type"": ""object"",; ""properties"": {; ""wavefunction"": {; ""description"": ""Wavefunction to keep from a computation."",;",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html:4887,Security,Validat,Validators,4887,"rom a computation."",; ""default"": ""none"",; ""allOf"": [; {; ""$ref"": ""#/definitions/WavefunctionProtocolEnum""; }; ]; },; ""stdout"": {; ""title"": ""Stdout"",; ""description"": ""Primary output file to keep from the computation"",; ""default"": true,; ""type"": ""boolean""; },; ""error_correction"": {; ""title"": ""Error Correction"",; ""description"": ""Policies for error correction"",; ""allOf"": [; {; ""$ref"": ""#/definitions/ErrorCorrectionProtocol""; }; ]; },; ""native_files"": {; ""description"": ""Policies for keeping processed files from the computation"",; ""default"": ""none"",; ""allOf"": [; {; ""$ref"": ""#/definitions/NativeFilesProtocolEnum""; }; ]; }; },; ""additionalProperties"": false; }; }; }. Fields:. basis (str); computed (bool); driver (qcelemental.models.common_models.DriverEnum); keywords (Dict[str, Any]); method (str); molecule (Any); owner_group (str | None); priority (str); protocols (qcelemental.models.results.AtomicResultProtocols | Dict[str, Any] | None); result (Any); result_id (str | None); tag (str). Validators:. set_basis » basis; set_keywords » keywords; set_method » method. field basis: str [Required]¶; The quantum chemistry basis set to evaluate (e.g., 6-31g, cc-pVDZ, …). Validated by:. set_basis. field computed: bool = False¶; Whether quantum chemistry has been run on this task. field driver: DriverEnum [Required]¶; The resulting type of computation: energy, gradient, hessian, properties.Note for finite difference that this should be the target driver, not the means driver. field keywords: Dict[str, Any] [Optional]¶; The keywords to use in the computation. Validated by:. set_keywords. field method: str [Required]¶; The quantum chemistry method to evaluate (e.g., B3LYP, MP2, …). Validated by:. set_method. field molecule: Any [Required]¶; The molecule to use in the computation. field owner_group: Optional[str] = None¶; group in the chown sense. field priority: str = 1¶; The priority of a Task; higher priority will be pulled first. {high:2, normal:1, low:0}. field protocols: Union[Atom",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html:5066,Security,Validat,Validated,5066," file to keep from the computation"",; ""default"": true,; ""type"": ""boolean""; },; ""error_correction"": {; ""title"": ""Error Correction"",; ""description"": ""Policies for error correction"",; ""allOf"": [; {; ""$ref"": ""#/definitions/ErrorCorrectionProtocol""; }; ]; },; ""native_files"": {; ""description"": ""Policies for keeping processed files from the computation"",; ""default"": ""none"",; ""allOf"": [; {; ""$ref"": ""#/definitions/NativeFilesProtocolEnum""; }; ]; }; },; ""additionalProperties"": false; }; }; }. Fields:. basis (str); computed (bool); driver (qcelemental.models.common_models.DriverEnum); keywords (Dict[str, Any]); method (str); molecule (Any); owner_group (str | None); priority (str); protocols (qcelemental.models.results.AtomicResultProtocols | Dict[str, Any] | None); result (Any); result_id (str | None); tag (str). Validators:. set_basis » basis; set_keywords » keywords; set_method » method. field basis: str [Required]¶; The quantum chemistry basis set to evaluate (e.g., 6-31g, cc-pVDZ, …). Validated by:. set_basis. field computed: bool = False¶; Whether quantum chemistry has been run on this task. field driver: DriverEnum [Required]¶; The resulting type of computation: energy, gradient, hessian, properties.Note for finite difference that this should be the target driver, not the means driver. field keywords: Dict[str, Any] [Optional]¶; The keywords to use in the computation. Validated by:. set_keywords. field method: str [Required]¶; The quantum chemistry method to evaluate (e.g., B3LYP, MP2, …). Validated by:. set_method. field molecule: Any [Required]¶; The molecule to use in the computation. field owner_group: Optional[str] = None¶; group in the chown sense. field priority: str = 1¶; The priority of a Task; higher priority will be pulled first. {high:2, normal:1, low:0}. field protocols: Union[AtomicResultProtocols, Dict[str, Any], None] = {'stdout': True}¶; Output modifications. field result: Any [Optional]¶; AtomicResult return. field result_id: Optional[str] = None¶; The ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html:5459,Security,Validat,Validated,5459," ""#/definitions/NativeFilesProtocolEnum""; }; ]; }; },; ""additionalProperties"": false; }; }; }. Fields:. basis (str); computed (bool); driver (qcelemental.models.common_models.DriverEnum); keywords (Dict[str, Any]); method (str); molecule (Any); owner_group (str | None); priority (str); protocols (qcelemental.models.results.AtomicResultProtocols | Dict[str, Any] | None); result (Any); result_id (str | None); tag (str). Validators:. set_basis » basis; set_keywords » keywords; set_method » method. field basis: str [Required]¶; The quantum chemistry basis set to evaluate (e.g., 6-31g, cc-pVDZ, …). Validated by:. set_basis. field computed: bool = False¶; Whether quantum chemistry has been run on this task. field driver: DriverEnum [Required]¶; The resulting type of computation: energy, gradient, hessian, properties.Note for finite difference that this should be the target driver, not the means driver. field keywords: Dict[str, Any] [Optional]¶; The keywords to use in the computation. Validated by:. set_keywords. field method: str [Required]¶; The quantum chemistry method to evaluate (e.g., B3LYP, MP2, …). Validated by:. set_method. field molecule: Any [Required]¶; The molecule to use in the computation. field owner_group: Optional[str] = None¶; group in the chown sense. field priority: str = 1¶; The priority of a Task; higher priority will be pulled first. {high:2, normal:1, low:0}. field protocols: Union[AtomicResultProtocols, Dict[str, Any], None] = {'stdout': True}¶; Output modifications. field result: Any [Optional]¶; AtomicResult return. field result_id: Optional[str] = None¶; The optional ID for the computation. field tag: str = '*'¶; The tags to pass along to compute managers. compute(client=None)[source]¶; Run quantum chemistry. Parameters:; client (qcportal.client.FractalClient | None) – . get_results(client=None)[source]¶; Return results as Atomic-flavored QCSchema. Parameters:; client (qcportal.FractalClient | None) – . Return type:; AtomicResult. plan()[source",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html:5583,Security,Validat,Validated,5583,"d (bool); driver (qcelemental.models.common_models.DriverEnum); keywords (Dict[str, Any]); method (str); molecule (Any); owner_group (str | None); priority (str); protocols (qcelemental.models.results.AtomicResultProtocols | Dict[str, Any] | None); result (Any); result_id (str | None); tag (str). Validators:. set_basis » basis; set_keywords » keywords; set_method » method. field basis: str [Required]¶; The quantum chemistry basis set to evaluate (e.g., 6-31g, cc-pVDZ, …). Validated by:. set_basis. field computed: bool = False¶; Whether quantum chemistry has been run on this task. field driver: DriverEnum [Required]¶; The resulting type of computation: energy, gradient, hessian, properties.Note for finite difference that this should be the target driver, not the means driver. field keywords: Dict[str, Any] [Optional]¶; The keywords to use in the computation. Validated by:. set_keywords. field method: str [Required]¶; The quantum chemistry method to evaluate (e.g., B3LYP, MP2, …). Validated by:. set_method. field molecule: Any [Required]¶; The molecule to use in the computation. field owner_group: Optional[str] = None¶; group in the chown sense. field priority: str = 1¶; The priority of a Task; higher priority will be pulled first. {high:2, normal:1, low:0}. field protocols: Union[AtomicResultProtocols, Dict[str, Any], None] = {'stdout': True}¶; Output modifications. field result: Any [Optional]¶; AtomicResult return. field result_id: Optional[str] = None¶; The optional ID for the computation. field tag: str = '*'¶; The tags to pass along to compute managers. compute(client=None)[source]¶; Run quantum chemistry. Parameters:; client (qcportal.client.FractalClient | None) – . get_results(client=None)[source]¶; Return results as Atomic-flavored QCSchema. Parameters:; client (qcportal.FractalClient | None) – . Return type:; AtomicResult. plan()[source]¶; Form QCSchema input from member data. Return type:; AtomicInput. validator set_basis  »  psi4.driver.AtomicComputer.basi",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html:6535,Security,validat,validator,6535,"tum chemistry method to evaluate (e.g., B3LYP, MP2, …). Validated by:. set_method. field molecule: Any [Required]¶; The molecule to use in the computation. field owner_group: Optional[str] = None¶; group in the chown sense. field priority: str = 1¶; The priority of a Task; higher priority will be pulled first. {high:2, normal:1, low:0}. field protocols: Union[AtomicResultProtocols, Dict[str, Any], None] = {'stdout': True}¶; Output modifications. field result: Any [Optional]¶; AtomicResult return. field result_id: Optional[str] = None¶; The optional ID for the computation. field tag: str = '*'¶; The tags to pass along to compute managers. compute(client=None)[source]¶; Run quantum chemistry. Parameters:; client (qcportal.client.FractalClient | None) – . get_results(client=None)[source]¶; Return results as Atomic-flavored QCSchema. Parameters:; client (qcportal.FractalClient | None) – . Return type:; AtomicResult. plan()[source]¶; Form QCSchema input from member data. Return type:; AtomicInput. validator set_basis  »  psi4.driver.AtomicComputer.basis[source]¶. validator set_keywords  »  psi4.driver.AtomicComputer.keywords[source]¶. validator set_method  »  psi4.driver.AtomicComputer.method[source]¶. table of contents. AtomicComputer; AtomicComputer; AtomicComputer.basis; AtomicComputer.computed; AtomicComputer.driver; AtomicComputer.keywords; AtomicComputer.method; AtomicComputer.molecule; AtomicComputer.owner_group; AtomicComputer.priority; AtomicComputer.protocols; AtomicComputer.result; AtomicComputer.result_id; AtomicComputer.tag; AtomicComputer.compute(); AtomicComputer.get_results(); AtomicComputer.plan(); AtomicComputer.set_basis; AtomicComputer.set_keywords; AtomicComputer.set_method. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; AtomicComputer. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html:6602,Security,validat,validator,6602,"tum chemistry method to evaluate (e.g., B3LYP, MP2, …). Validated by:. set_method. field molecule: Any [Required]¶; The molecule to use in the computation. field owner_group: Optional[str] = None¶; group in the chown sense. field priority: str = 1¶; The priority of a Task; higher priority will be pulled first. {high:2, normal:1, low:0}. field protocols: Union[AtomicResultProtocols, Dict[str, Any], None] = {'stdout': True}¶; Output modifications. field result: Any [Optional]¶; AtomicResult return. field result_id: Optional[str] = None¶; The optional ID for the computation. field tag: str = '*'¶; The tags to pass along to compute managers. compute(client=None)[source]¶; Run quantum chemistry. Parameters:; client (qcportal.client.FractalClient | None) – . get_results(client=None)[source]¶; Return results as Atomic-flavored QCSchema. Parameters:; client (qcportal.FractalClient | None) – . Return type:; AtomicResult. plan()[source]¶; Form QCSchema input from member data. Return type:; AtomicInput. validator set_basis  »  psi4.driver.AtomicComputer.basis[source]¶. validator set_keywords  »  psi4.driver.AtomicComputer.keywords[source]¶. validator set_method  »  psi4.driver.AtomicComputer.method[source]¶. table of contents. AtomicComputer; AtomicComputer; AtomicComputer.basis; AtomicComputer.computed; AtomicComputer.driver; AtomicComputer.keywords; AtomicComputer.method; AtomicComputer.molecule; AtomicComputer.owner_group; AtomicComputer.priority; AtomicComputer.protocols; AtomicComputer.result; AtomicComputer.result_id; AtomicComputer.tag; AtomicComputer.compute(); AtomicComputer.get_results(); AtomicComputer.plan(); AtomicComputer.set_basis; AtomicComputer.set_keywords; AtomicComputer.set_method. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; AtomicComputer. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html:6675,Security,validat,validator,6675,"tum chemistry method to evaluate (e.g., B3LYP, MP2, …). Validated by:. set_method. field molecule: Any [Required]¶; The molecule to use in the computation. field owner_group: Optional[str] = None¶; group in the chown sense. field priority: str = 1¶; The priority of a Task; higher priority will be pulled first. {high:2, normal:1, low:0}. field protocols: Union[AtomicResultProtocols, Dict[str, Any], None] = {'stdout': True}¶; Output modifications. field result: Any [Optional]¶; AtomicResult return. field result_id: Optional[str] = None¶; The optional ID for the computation. field tag: str = '*'¶; The tags to pass along to compute managers. compute(client=None)[source]¶; Run quantum chemistry. Parameters:; client (qcportal.client.FractalClient | None) – . get_results(client=None)[source]¶; Return results as Atomic-flavored QCSchema. Parameters:; client (qcportal.FractalClient | None) – . Return type:; AtomicResult. plan()[source]¶; Form QCSchema input from member data. Return type:; AtomicInput. validator set_basis  »  psi4.driver.AtomicComputer.basis[source]¶. validator set_keywords  »  psi4.driver.AtomicComputer.keywords[source]¶. validator set_method  »  psi4.driver.AtomicComputer.method[source]¶. table of contents. AtomicComputer; AtomicComputer; AtomicComputer.basis; AtomicComputer.computed; AtomicComputer.driver; AtomicComputer.keywords; AtomicComputer.method; AtomicComputer.molecule; AtomicComputer.owner_group; AtomicComputer.priority; AtomicComputer.protocols; AtomicComputer.result; AtomicComputer.result_id; AtomicComputer.tag; AtomicComputer.compute(); AtomicComputer.get_results(); AtomicComputer.plan(); AtomicComputer.set_basis; AtomicComputer.set_keywords; AtomicComputer.set_method. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; AtomicComputer. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.banner.html:878,Deployability,update,updated,878,"﻿. banner. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; banner. banner¶. psi4.driver.banner(text, type=1, width=35, strNotOutfile=False)[source]¶; Format text into a banner style and print or return it. Parameters:. text (str) – String to be emphasized.; type (int) – Style 1 has minimum three-line height. Style 2 has minimum one-light; height.; width (int) – Minimum length of banner string.; strNotOutfile (bool) – Controls mode of return. Return type:; Optional[str]. Returns:. str – If strNotOutfile is True, return string.; None – If strNotOutfile is False, print it to output file. table of contents. banner; banner(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; banner. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.banner.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.banner.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.basis_helper.html:1111,Deployability,update,updated,1111,"﻿. basis_helper. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; basis_helper. basis_helper¶. psi4.driver.basis_helper(block, name='', key='BASIS', set_option=True)[source]¶; Helper to specify a custom basis set in PsiAPI mode.; This function forms a basis specification function from block; and associates it with keyword key under handle name. Registers; the basis spec with Psi4 so that it can be applied again to future; molecules. For usage, see mints2, mints9, and; cc54 test cases. Parameters:. block (str) – Text that goes in a PSIthon basis {...} block.; name (str) – Name label to associated with basis specified by block.; key (str) – Basis keyword specified by block.; set_option (bool) – When True, execute the equivalent of set key name or set_option({key: name}). When False, skip execution. table of contents. basis_helper; basis_helper(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; basis_helper. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.basis_helper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.basis_helper.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.basis_helper.html:533,Testability,test,test,533,"﻿. basis_helper. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; basis_helper. basis_helper¶. psi4.driver.basis_helper(block, name='', key='BASIS', set_option=True)[source]¶; Helper to specify a custom basis set in PsiAPI mode.; This function forms a basis specification function from block; and associates it with keyword key under handle name. Registers; the basis spec with Psi4 so that it can be applied again to future; molecules. For usage, see mints2, mints9, and; cc54 test cases. Parameters:. block (str) – Text that goes in a PSIthon basis {...} block.; name (str) – Name label to associated with basis specified by block.; key (str) – Basis keyword specified by block.; set_option (bool) – When True, execute the equivalent of set key name or set_option({key: name}). When False, skip execution. table of contents. basis_helper; basis_helper(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; basis_helper. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.basis_helper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.basis_helper.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:7742,Availability,avail,available,7742,"]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. SchemesTransformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See Extrapolation Schemes for all available schemes. Parameters:. scf_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'scf_xtpl_helgaker_3' || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in psi4.driver.driver_cbs.scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1(); scf_xtpl_helgaker_3(); scf_xtpl_helgaker_2(); scf_xtpl_truhlar_2(); scf_xtpl_karton_2(). corl_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'corl_xtpl_helgaker_2' || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. xtpl_highest_1(); corl_xtpl_helgaker_2(). delta_scheme (str) – \(\Rightarrow\) 'xtpl",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:7787,Availability,avail,available,7787," basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. SchemesTransformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See Extrapolation Schemes for all available schemes. Parameters:. scf_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'scf_xtpl_helgaker_3' || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in psi4.driver.driver_cbs.scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1(); scf_xtpl_helgaker_3(); scf_xtpl_helgaker_2(); scf_xtpl_truhlar_2(); scf_xtpl_karton_2(). corl_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'corl_xtpl_helgaker_2' || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. xtpl_highest_1(); corl_xtpl_helgaker_2(). delta_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'corl_xtpl_helgaker_2' || etc.; Indicates ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:11944,Availability,avail,available,11944," default it is worked out from the number of basis sets (1 - 3) supplied as `basis`.; `alpha`: alpha for the above scheme, if the default is to be overriden; `options`: if special options are required for a step, they should be entered as a dict here. If some options should be used for both parts of the stage, they should be entered in both `options` and `options_lo`. This is helpful for calculating all electron corrections in otherwise frozen core calculations, or relativistic (DKH) Hamiltionian corrections for otherwise nonrelativistic.; `options_lo`: special options for lower method in a given stage. This is useful to calculate a direct stage in an otherwise density-fitted calculation, or similar.; `treatment`: treat extrapolation stage as `scf` or `corl`, by default only the first stage is `scf` and every later one is `corl`.; `stage`: tag for the stage used in tables. The next items in the `cbs_metadata` array extrapolate correlation. All of the above parameters are available, with only the `wfn` and `basis` keywords required. Other supported parameters are:. `wfn_lo`: the lower method from which the delta correction is to be calculated. By default, it is set to `wfn` from the previous field in the `cbs_metadata` array.; `basis_lo`: basis set to be used for the delta correction. By default, it is the same as the `basis` specified above. Others. Parameters:; molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3'). >>> # [4] DT-zeta extrapolated mp2 co",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:14933,Deployability,update,updated,14933,"cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2'). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2', delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""freeze_core"": ""False""}}]). >>> # [8] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='sto-3g'). >>> # [9] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme='corl_xtpl_helgaker_2', func=cbs). table of contents. cbs; cbs(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; cbs. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:204,Energy Efficiency,energy,energy,204,"﻿. cbs. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; cbs. cbs¶. psi4.driver.cbs(func, label, **kwargs)[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:; complete_basis_set(). Returns:; (float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \tex",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:424,Energy Efficiency,energy,energy,424,"﻿. cbs. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; cbs. cbs¶. psi4.driver.cbs(func, label, **kwargs)[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:; complete_basis_set(). Returns:; (float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \tex",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:470,Energy Efficiency,ENERGY,ENERGY,470,"﻿. cbs. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; cbs. cbs¶. psi4.driver.cbs(func, label, **kwargs)[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:; complete_basis_set(). Returns:; (float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \tex",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:492,Energy Efficiency,ENERGY,ENERGY,492,"﻿. cbs. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; cbs. cbs¶. psi4.driver.cbs(func, label, **kwargs)[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:; complete_basis_set(). Returns:; (float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \tex",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:516,Energy Efficiency,ENERGY,ENERGY,516,"﻿. cbs. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; cbs. cbs¶. psi4.driver.cbs(func, label, **kwargs)[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:; complete_basis_set(). Returns:; (float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \tex",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:532,Energy Efficiency,ENERGY,ENERGY,532,"﻿. cbs. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; cbs. cbs¶. psi4.driver.cbs(func, label, **kwargs)[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:; complete_basis_set(). Returns:; (float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \tex",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:558,Energy Efficiency,ENERGY,ENERGY,558,"﻿. cbs. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; cbs. cbs¶. psi4.driver.cbs(func, label, **kwargs)[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:; complete_basis_set(). Returns:; (float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \tex",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:586,Energy Efficiency,ENERGY,ENERGY,586,"﻿. cbs. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; cbs. cbs¶. psi4.driver.cbs(func, label, **kwargs)[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:; complete_basis_set(). Returns:; (float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \tex",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:827,Energy Efficiency,energy,energy,827,"﻿. cbs. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; cbs. cbs¶. psi4.driver.cbs(func, label, **kwargs)[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:; complete_basis_set(). Returns:; (float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \tex",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:957,Energy Efficiency,energy,energy,957,"﻿. cbs. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; cbs. cbs¶. psi4.driver.cbs(func, label, **kwargs)[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:; complete_basis_set(). Returns:; (float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \tex",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:981,Energy Efficiency,energy,energy,981,"﻿. cbs. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; cbs. cbs¶. psi4.driver.cbs(func, label, **kwargs)[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:; complete_basis_set(). Returns:; (float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \tex",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:1028,Energy Efficiency,energy,energy,1028,"﻿. cbs. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; cbs. cbs¶. psi4.driver.cbs(func, label, **kwargs)[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:; complete_basis_set(). Returns:; (float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \tex",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:1806,Energy Efficiency,energy,energy,1806,"ENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta_wfn}}^{\textbf{delta_basis}}\right) - \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta_wfn_lesser}}^{\textbf{delta_basis}}\right)\]. \[\delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; = \mathcal{F}_{\textbf{delta2_scheme}} \left(E_{\text{corl},\; \textbf{delta2_wfn}}^{\textbf{delta2_basis}}\right) - \mathcal{F}_{\textbf{delta2_scheme}} \left(E_{\text{corl},\; \textbf{delta2_wfn_lesser}}^{\textbf{delta2_basis}}\right)\]. \[\delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; = \mathcal",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:1816,Energy Efficiency,energy,energy,1816,"ENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta_wfn}}^{\textbf{delta_basis}}\right) - \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta_wfn_lesser}}^{\textbf{delta_basis}}\right)\]. \[\delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; = \mathcal{F}_{\textbf{delta2_scheme}} \left(E_{\text{corl},\; \textbf{delta2_wfn}}^{\textbf{delta2_basis}}\right) - \mathcal{F}_{\textbf{delta2_scheme}} \left(E_{\text{corl},\; \textbf{delta2_wfn_lesser}}^{\textbf{delta2_basis}}\right)\]. \[\delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; = \mathcal",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:3669,Energy Efficiency,energy,energy,3669,"orl},\; \textbf{delta3_wfn}}^{\textbf{delta3_basis}}\right) - \mathcal{F}_{\textbf{delta3_scheme}} \left(E_{\text{corl},\; \textbf{delta3_wfn_lesser}}^{\textbf{delta3_basis}}\right)\]. \[\delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; = \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn}}^{\textbf{delta4_basis}}\right) - \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn_lesser}}^{\textbf{delta4_basis}}\right)\]. \[\delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}} \; = \mathcal{F}_{\textbf{delta5_scheme}} \left(E_{\text{corl},\; \textbf{delta5_wfn}}^{\textbf{delta5_basis}}\right) - \mathcal{F}_{\textbf{delta5_scheme}} \left(E_{\text{corl},\; \textbf{delta5_wfn_lesser}}^{\textbf{delta5_basis}}\right)\]; A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\text{highest_1}} \left(E_{\text{total},\; \text{SCF}}^{\text{aug-cc-pVQZ}}\right) \; + \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}}\right) \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\]. \[\delta_{\text{MP2}}^{\text{CCSD(T)}} \; = \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{CCSD(T)}}^{\text{aug-cc-pV[DT]Z}}\right) - \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[DT]Z}}\right)\]. Energy MethodsThe presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step onl",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:3717,Energy Efficiency,energy,energy,3717,"orl},\; \textbf{delta3_wfn}}^{\textbf{delta3_basis}}\right) - \mathcal{F}_{\textbf{delta3_scheme}} \left(E_{\text{corl},\; \textbf{delta3_wfn_lesser}}^{\textbf{delta3_basis}}\right)\]. \[\delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; = \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn}}^{\textbf{delta4_basis}}\right) - \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn_lesser}}^{\textbf{delta4_basis}}\right)\]. \[\delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}} \; = \mathcal{F}_{\textbf{delta5_scheme}} \left(E_{\text{corl},\; \textbf{delta5_wfn}}^{\textbf{delta5_basis}}\right) - \mathcal{F}_{\textbf{delta5_scheme}} \left(E_{\text{corl},\; \textbf{delta5_wfn_lesser}}^{\textbf{delta5_basis}}\right)\]; A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\text{highest_1}} \left(E_{\text{total},\; \text{SCF}}^{\text{aug-cc-pVQZ}}\right) \; + \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}}\right) \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\]. \[\delta_{\text{MP2}}^{\text{CCSD(T)}} \; = \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{CCSD(T)}}^{\text{aug-cc-pV[DT]Z}}\right) - \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[DT]Z}}\right)\]. Energy MethodsThe presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step onl",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:4285,Energy Efficiency,Energy,Energy,4285,"]; A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\text{highest_1}} \left(E_{\text{total},\; \text{SCF}}^{\text{aug-cc-pVQZ}}\right) \; + \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}}\right) \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\]. \[\delta_{\text{MP2}}^{\text{CCSD(T)}} \; = \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{CCSD(T)}}^{\text{aug-cc-pV[DT]Z}}\right) - \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[DT]Z}}\right)\]. Energy MethodsThe presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:. name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the referenc",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:4466,Energy Efficiency,energy,energy,4466,"]; A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\text{highest_1}} \left(E_{\text{total},\; \text{SCF}}^{\text{aug-cc-pVQZ}}\right) \; + \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}}\right) \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\]. \[\delta_{\text{MP2}}^{\text{CCSD(T)}} \; = \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{CCSD(T)}}^{\text{aug-cc-pV[DT]Z}}\right) - \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[DT]Z}}\right)\]. Energy MethodsThe presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:. name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the referenc",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:4668,Energy Efficiency,energy,energy,4668,"ded to a SCF/aug-cc-pVQZ; reference energy. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\text{highest_1}} \left(E_{\text{total},\; \text{SCF}}^{\text{aug-cc-pVQZ}}\right) \; + \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}}\right) \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\]. \[\delta_{\text{MP2}}^{\text{CCSD(T)}} \; = \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{CCSD(T)}}^{\text{aug-cc-pV[DT]Z}}\right) - \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[DT]Z}}\right)\]. Energy MethodsThe presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:. name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to b",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:5129,Energy Efficiency,energy,energy,5129,"text{aug-cc-pV[DT]Z}}\right) - \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[DT]Z}}\right)\]. Energy MethodsThe presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:. name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:5343,Energy Efficiency,energy,energy,5343," (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:. name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarro",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:5381,Energy Efficiency,energy,energy,5381," (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:. name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarro",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:5627,Energy Efficiency,energy,energy,5627,"; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:. name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis SetsCurrently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:. scf_basis (basis string) –",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:5667,Energy Efficiency,energy,energy,5667,"; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:. name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis SetsCurrently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:. scf_basis (basis string) –",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:5851,Energy Efficiency,energy,energy,5851,"t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:. name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis SetsCurrently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:. scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can de",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:5914,Energy Efficiency,energy,energy,5914,"t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:. name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis SetsCurrently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:. scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can de",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:6046,Energy Efficiency,energy,energy,6046,"cates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis SetsCurrently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:. scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basi",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:6109,Energy Efficiency,energy,energy,6109,"cates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis SetsCurrently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:. scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basi",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:6208,Energy Efficiency,energy,energy,6208,"ds supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis SetsCurrently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:. scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:6278,Energy Efficiency,energy,energy,6278,"ds supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis SetsCurrently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:. scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:6416,Energy Efficiency,energy,energy,6416,"in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis SetsCurrently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:. scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. SchemesTransform",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:6486,Energy Efficiency,energy,energy,6486,"in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis SetsCurrently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:. scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. SchemesTransform",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:6817,Energy Efficiency,energy,energy,6817,"n (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis SetsCurrently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:. scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. SchemesTransformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See Extrapolation Schemes for all a",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:7053,Energy Efficiency,energy,energy,7053," Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis SetsCurrently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:. scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. SchemesTransformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See Extrapolation Schemes for all available schemes. Parameters:. scf_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'scf_xtpl_helgaker_3' || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xt",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:7236,Energy Efficiency,energy,energy,7236,"the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis SetsCurrently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:. scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. SchemesTransformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See Extrapolation Schemes for all available schemes. Parameters:. scf_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'scf_xtpl_helgaker_3' || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in psi4.driver.driver_cbs.scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_high",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:7427,Energy Efficiency,energy,energy,7427,"t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis SetsCurrently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:. scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. SchemesTransformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See Extrapolation Schemes for all available schemes. Parameters:. scf_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'scf_xtpl_helgaker_3' || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in psi4.driver.driver_cbs.scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1(); scf_xtpl_helgaker_3(); scf_xtpl_helgaker_2(); scf_xtpl_truhlar_2(); scf_xtpl_karton_2(). corl_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftar",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:7465,Energy Efficiency,energy,energy,7465,"ergy is to be obtained. Basis SetsCurrently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:. scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. SchemesTransformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See Extrapolation Schemes for all available schemes. Parameters:. scf_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'scf_xtpl_helgaker_3' || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in psi4.driver.driver_cbs.scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1(); scf_xtpl_helgaker_3(); scf_xtpl_helgaker_2(); scf_xtpl_truhlar_2(); scf_xtpl_karton_2(). corl_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'corl_xtpl_helgaker_2' || etc.; Indicates the basis set extrapolation scheme to be applied to the ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:7996,Energy Efficiency,energy,energy,7996,"q5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. SchemesTransformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See Extrapolation Schemes for all available schemes. Parameters:. scf_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'scf_xtpl_helgaker_3' || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in psi4.driver.driver_cbs.scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1(); scf_xtpl_helgaker_3(); scf_xtpl_helgaker_2(); scf_xtpl_truhlar_2(); scf_xtpl_karton_2(). corl_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'corl_xtpl_helgaker_2' || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. xtpl_highest_1(); corl_xtpl_helgaker_2(). delta_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'corl_xtpl_helgaker_2' || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_bas",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:8500,Energy Efficiency,energy,energy,8500,"e energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See Extrapolation Schemes for all available schemes. Parameters:. scf_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'scf_xtpl_helgaker_3' || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in psi4.driver.driver_cbs.scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1(); scf_xtpl_helgaker_3(); scf_xtpl_helgaker_2(); scf_xtpl_truhlar_2(); scf_xtpl_karton_2(). corl_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'corl_xtpl_helgaker_2' || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. xtpl_highest_1(); corl_xtpl_helgaker_2(). delta_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'corl_xtpl_helgaker_2' || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. xtpl_highest_1(); corl_xtpl_helgaker_2(). delta2_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'corl_xtpl_helgaker_2' || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1(); corl_xtpl_helgaker_2(). scf_alpha (float) – \(\Rightarrow\) 1.63 \(\",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:8872,Energy Efficiency,energy,energy,8872,"scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'scf_xtpl_helgaker_3' || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in psi4.driver.driver_cbs.scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1(); scf_xtpl_helgaker_3(); scf_xtpl_helgaker_2(); scf_xtpl_truhlar_2(); scf_xtpl_karton_2(). corl_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'corl_xtpl_helgaker_2' || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. xtpl_highest_1(); corl_xtpl_helgaker_2(). delta_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'corl_xtpl_helgaker_2' || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. xtpl_highest_1(); corl_xtpl_helgaker_2(). delta2_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'corl_xtpl_helgaker_2' || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1(); corl_xtpl_helgaker_2(). scf_alpha (float) – \(\Rightarrow\) 1.63 \(\Leftarrow\); Overrides the default alpha parameter used in the listed SCF extrapolation procedures.; Has no effect on others, including xtpl_highest_1() and scf_xtpl_helgaker_3(). scf_xtpl_helgaker_2(); scf_xtpl_truhlar_2(); scf_xtpl_karton_2(). corl_alpha (float) – \(\Rightarrow\) 3.00 \(\Leftarrow\); Overrides the default alpha parameter used in the liste",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:9253,Energy Efficiency,energy,energy,9253," otherwise. xtpl_highest_1(); scf_xtpl_helgaker_3(); scf_xtpl_helgaker_2(); scf_xtpl_truhlar_2(); scf_xtpl_karton_2(). corl_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'corl_xtpl_helgaker_2' || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. xtpl_highest_1(); corl_xtpl_helgaker_2(). delta_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'corl_xtpl_helgaker_2' || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. xtpl_highest_1(); corl_xtpl_helgaker_2(). delta2_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'corl_xtpl_helgaker_2' || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1(); corl_xtpl_helgaker_2(). scf_alpha (float) – \(\Rightarrow\) 1.63 \(\Leftarrow\); Overrides the default alpha parameter used in the listed SCF extrapolation procedures.; Has no effect on others, including xtpl_highest_1() and scf_xtpl_helgaker_3(). scf_xtpl_helgaker_2(); scf_xtpl_truhlar_2(); scf_xtpl_karton_2(). corl_alpha (float) – \(\Rightarrow\) 3.00 \(\Leftarrow\); Overrides the default alpha parameter used in the listed corl_xtpl_helgaker_2() correlation; extrapolation to the corl stage. The supplied alpha does not impact delta or any further stages. corl_xtpl_helgaker_2(). delta_alpha (float) – \(\Rightarrow\) 3.00 \(\Leftarrow\); Overrides the default alpha parameter used in the listed; corl_xtpl_helgaker_2() correlation extrapolation for the delta correction. Useful when; delta correcti",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:10663,Energy Efficiency,energy,energy,10663,"xtpl_helgaker_3(). scf_xtpl_helgaker_2(); scf_xtpl_truhlar_2(); scf_xtpl_karton_2(). corl_alpha (float) – \(\Rightarrow\) 3.00 \(\Leftarrow\); Overrides the default alpha parameter used in the listed corl_xtpl_helgaker_2() correlation; extrapolation to the corl stage. The supplied alpha does not impact delta or any further stages. corl_xtpl_helgaker_2(). delta_alpha (float) – \(\Rightarrow\) 3.00 \(\Leftarrow\); Overrides the default alpha parameter used in the listed; corl_xtpl_helgaker_2() correlation extrapolation for the delta correction. Useful when; delta correction is performed using smaller basis sets for which a different alpha might; be more appropriate. corl_xtpl_helgaker_2(). Combined interface. Parameters:; cbs_metadata (List[Dict]) – \(\Rightarrow\) autogenerated from above keywords \(\Leftarrow\) || [{""wfn"": ""hf"", ""basis"": ""cc-pv[TQ5]z""}] || etc.; This is the interface to which all of the above calls are internally translated. The first item in; the array is always defining the SCF contribution to the total energy. The required items in the; dictionary are:. `wfn`: typically `HF`, which is subsumed in correlated methods anyway.; `basis`: basis set, can be in a bracketed form (eg. `cc-pv[tq]z`). Other supported arguments for the first dictionary are:. `scheme`: scf extrapolation scheme function, by default it is worked out from the number of basis sets (1 - 3) supplied as `basis`.; `alpha`: alpha for the above scheme, if the default is to be overriden; `options`: if special options are required for a step, they should be entered as a dict here. If some options should be used for both parts of the stage, they should be entered in both `options` and `options_lo`. This is helpful for calculating all electron corrections in otherwise frozen core calculations, or relativistic (DKH) Hamiltionian corrections for otherwise nonrelativistic.; `options_lo`: special options for lower method in a given stage. This is useful to calculate a direct stage in an otherwi",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:12534,Energy Efficiency,energy,energy,12534,"ial options for lower method in a given stage. This is useful to calculate a direct stage in an otherwise density-fitted calculation, or similar.; `treatment`: treat extrapolation stage as `scf` or `corl`, by default only the first stage is `scf` and every later one is `corl`.; `stage`: tag for the stage used in tables. The next items in the `cbs_metadata` array extrapolate correlation. All of the above parameters are available, with only the `wfn` and `basis` keywords required. Other supported parameters are:. `wfn_lo`: the lower method from which the delta correction is to be calculated. By default, it is set to `wfn` from the previous field in the `cbs_metadata` array.; `basis_lo`: basis set to be used for the delta correction. By default, it is the same as the `basis` specified above. Others. Parameters:; molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3'). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_s",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:12553,Energy Efficiency,energy,energy,12553,"ial options for lower method in a given stage. This is useful to calculate a direct stage in an otherwise density-fitted calculation, or similar.; `treatment`: treat extrapolation stage as `scf` or `corl`, by default only the first stage is `scf` and every later one is `corl`.; `stage`: tag for the stage used in tables. The next items in the `cbs_metadata` array extrapolate correlation. All of the above parameters are available, with only the `wfn` and `basis` keywords required. Other supported parameters are:. `wfn_lo`: the lower method from which the delta correction is to be calculated. By default, it is set to `wfn` from the previous field in the `cbs_metadata` array.; `basis_lo`: basis set to be used for the delta correction. By default, it is the same as the `basis` specified above. Others. Parameters:; molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3'). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_s",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:12700,Energy Efficiency,energy,energy,12700," extrapolation stage as `scf` or `corl`, by default only the first stage is `scf` and every later one is `corl`.; `stage`: tag for the stage used in tables. The next items in the `cbs_metadata` array extrapolate correlation. All of the above parameters are available, with only the `wfn` and `basis` keywords required. Other supported parameters are:. `wfn_lo`: the lower method from which the delta correction is to be calculated. By default, it is set to `wfn` from the previous field in the `cbs_metadata` array.; `basis_lo`: basis set to be used for the delta correction. By default, it is the same as the `basis` specified above. Others. Parameters:; molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3'). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2'). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:12719,Energy Efficiency,energy,energy,12719," extrapolation stage as `scf` or `corl`, by default only the first stage is `scf` and every later one is `corl`.; `stage`: tag for the stage used in tables. The next items in the `cbs_metadata` array extrapolate correlation. All of the above parameters are available, with only the `wfn` and `basis` keywords required. Other supported parameters are:. `wfn_lo`: the lower method from which the delta correction is to be calculated. By default, it is set to `wfn` from the previous field in the `cbs_metadata` array.; `basis_lo`: basis set to be used for the delta correction. By default, it is the same as the `basis` specified above. Others. Parameters:; molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3'). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2'). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:12820,Energy Efficiency,energy,energy,12820,"e next items in the `cbs_metadata` array extrapolate correlation. All of the above parameters are available, with only the `wfn` and `basis` keywords required. Other supported parameters are:. `wfn_lo`: the lower method from which the delta correction is to be calculated. By default, it is set to `wfn` from the previous field in the `cbs_metadata` array.; `basis_lo`: basis set to be used for the delta correction. By default, it is the same as the `basis` specified above. Others. Parameters:; molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3'). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2'). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:12832,Energy Efficiency,energy,energy,12832,"e next items in the `cbs_metadata` array extrapolate correlation. All of the above parameters are available, with only the `wfn` and `basis` keywords required. Other supported parameters are:. `wfn_lo`: the lower method from which the delta correction is to be calculated. By default, it is set to `wfn` from the previous field in the `cbs_metadata` array.; `basis_lo`: basis set to be used for the delta correction. By default, it is the same as the `basis` specified above. Others. Parameters:; molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3'). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2'). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:12968,Energy Efficiency,energy,energy,12968,"ther supported parameters are:. `wfn_lo`: the lower method from which the delta correction is to be calculated. By default, it is set to `wfn` from the previous field in the `cbs_metadata` array.; `basis_lo`: basis set to be used for the delta correction. By default, it is the same as the `basis` specified above. Others. Parameters:; molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3'). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2'). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2', delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calcul",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:13004,Energy Efficiency,energy,energy,13004,"ther supported parameters are:. `wfn_lo`: the lower method from which the delta correction is to be calculated. By default, it is set to `wfn` from the previous field in the `cbs_metadata` array.; `basis_lo`: basis set to be used for the delta correction. By default, it is the same as the `basis` specified above. Others. Parameters:; molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3'). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2'). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2', delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calcul",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:13200,Energy Efficiency,energy,energy,13200,"thers. Parameters:; molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3'). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2'). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2', delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:13254,Energy Efficiency,energy,energy,13254,"thers. Parameters:; molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3'). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2'). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2', delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:13369,Energy Efficiency,energy,energy,13369,"thers. Parameters:; molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3'). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2'). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2', delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:13687,Energy Efficiency,energy,energy,13687,"c-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3'). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2'). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2', delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""freeze_core"": ""False""}}]). >>> # [8] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='sto-3g'). >>> # [9] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme='corl_xtpl_helgaker_2', func=cbs). table of contents. cbs; cbs(). «; hide menu. menu; si",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:13723,Energy Efficiency,energy,energy,13723,"c-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3'). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2'). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2', delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""freeze_core"": ""False""}}]). >>> # [8] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='sto-3g'). >>> # [9] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme='corl_xtpl_helgaker_2', func=cbs). table of contents. cbs; cbs(). «; hide menu. menu; si",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:14129,Energy Efficiency,energy,energy,14129,"cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2'). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2', delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""freeze_core"": ""False""}}]). >>> # [8] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='sto-3g'). >>> # [9] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme='corl_xtpl_helgaker_2', func=cbs). table of contents. cbs; cbs(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; cbs. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:10331,Integrability,interface,interface,10331,"n delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1(); corl_xtpl_helgaker_2(). scf_alpha (float) – \(\Rightarrow\) 1.63 \(\Leftarrow\); Overrides the default alpha parameter used in the listed SCF extrapolation procedures.; Has no effect on others, including xtpl_highest_1() and scf_xtpl_helgaker_3(). scf_xtpl_helgaker_2(); scf_xtpl_truhlar_2(); scf_xtpl_karton_2(). corl_alpha (float) – \(\Rightarrow\) 3.00 \(\Leftarrow\); Overrides the default alpha parameter used in the listed corl_xtpl_helgaker_2() correlation; extrapolation to the corl stage. The supplied alpha does not impact delta or any further stages. corl_xtpl_helgaker_2(). delta_alpha (float) – \(\Rightarrow\) 3.00 \(\Leftarrow\); Overrides the default alpha parameter used in the listed; corl_xtpl_helgaker_2() correlation extrapolation for the delta correction. Useful when; delta correction is performed using smaller basis sets for which a different alpha might; be more appropriate. corl_xtpl_helgaker_2(). Combined interface. Parameters:; cbs_metadata (List[Dict]) – \(\Rightarrow\) autogenerated from above keywords \(\Leftarrow\) || [{""wfn"": ""hf"", ""basis"": ""cc-pv[TQ5]z""}] || etc.; This is the interface to which all of the above calls are internally translated. The first item in; the array is always defining the SCF contribution to the total energy. The required items in the; dictionary are:. `wfn`: typically `HF`, which is subsumed in correlated methods anyway.; `basis`: basis set, can be in a bracketed form (eg. `cc-pv[tq]z`). Other supported arguments for the first dictionary are:. `scheme`: scf extrapolation scheme function, by default it is worked out from the number of basis sets (1 - 3) supplied as `basis`.; `alpha`: alpha for the above scheme, if the default is to be overriden; `options`: if special options are required for a step, they should be entered as a dict here. If some options should be used for both parts of the stage, they should be entered in both `options` and `options_lo`. Th",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:10512,Integrability,interface,interface,10512,"xtrapolation procedures.; Has no effect on others, including xtpl_highest_1() and scf_xtpl_helgaker_3(). scf_xtpl_helgaker_2(); scf_xtpl_truhlar_2(); scf_xtpl_karton_2(). corl_alpha (float) – \(\Rightarrow\) 3.00 \(\Leftarrow\); Overrides the default alpha parameter used in the listed corl_xtpl_helgaker_2() correlation; extrapolation to the corl stage. The supplied alpha does not impact delta or any further stages. corl_xtpl_helgaker_2(). delta_alpha (float) – \(\Rightarrow\) 3.00 \(\Leftarrow\); Overrides the default alpha parameter used in the listed; corl_xtpl_helgaker_2() correlation extrapolation for the delta correction. Useful when; delta correction is performed using smaller basis sets for which a different alpha might; be more appropriate. corl_xtpl_helgaker_2(). Combined interface. Parameters:; cbs_metadata (List[Dict]) – \(\Rightarrow\) autogenerated from above keywords \(\Leftarrow\) || [{""wfn"": ""hf"", ""basis"": ""cc-pv[TQ5]z""}] || etc.; This is the interface to which all of the above calls are internally translated. The first item in; the array is always defining the SCF contribution to the total energy. The required items in the; dictionary are:. `wfn`: typically `HF`, which is subsumed in correlated methods anyway.; `basis`: basis set, can be in a bracketed form (eg. `cc-pv[tq]z`). Other supported arguments for the first dictionary are:. `scheme`: scf extrapolation scheme function, by default it is worked out from the number of basis sets (1 - 3) supplied as `basis`.; `alpha`: alpha for the above scheme, if the default is to be overriden; `options`: if special options are required for a step, they should be entered as a dict here. If some options should be used for both parts of the stage, they should be entered in both `options` and `options_lo`. This is helpful for calculating all electron corrections in otherwise frozen core calculations, or relativistic (DKH) Hamiltionian corrections for otherwise nonrelativistic.; `options_lo`: special options for l",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:448,Modifiability,variab,variables,448,"﻿. cbs. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; cbs. cbs¶. psi4.driver.cbs(func, label, **kwargs)[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:; complete_basis_set(). Returns:; (float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \tex",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:5170,Performance,perform,performed,5170,"text{aug-cc-pV[DT]Z}}\right) - \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[DT]Z}}\right)\]. Energy MethodsThe presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:. name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:10207,Performance,perform,performed,10207,"o the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1(); corl_xtpl_helgaker_2(). scf_alpha (float) – \(\Rightarrow\) 1.63 \(\Leftarrow\); Overrides the default alpha parameter used in the listed SCF extrapolation procedures.; Has no effect on others, including xtpl_highest_1() and scf_xtpl_helgaker_3(). scf_xtpl_helgaker_2(); scf_xtpl_truhlar_2(); scf_xtpl_karton_2(). corl_alpha (float) – \(\Rightarrow\) 3.00 \(\Leftarrow\); Overrides the default alpha parameter used in the listed corl_xtpl_helgaker_2() correlation; extrapolation to the corl stage. The supplied alpha does not impact delta or any further stages. corl_xtpl_helgaker_2(). delta_alpha (float) – \(\Rightarrow\) 3.00 \(\Leftarrow\); Overrides the default alpha parameter used in the listed; corl_xtpl_helgaker_2() correlation extrapolation for the delta correction. Useful when; delta correction is performed using smaller basis sets for which a different alpha might; be more appropriate. corl_xtpl_helgaker_2(). Combined interface. Parameters:; cbs_metadata (List[Dict]) – \(\Rightarrow\) autogenerated from above keywords \(\Leftarrow\) || [{""wfn"": ""hf"", ""basis"": ""cc-pv[TQ5]z""}] || etc.; This is the interface to which all of the above calls are internally translated. The first item in; the array is always defining the SCF contribution to the total energy. The required items in the; dictionary are:. `wfn`: typically `HF`, which is subsumed in correlated methods anyway.; `basis`: basis set, can be in a bracketed form (eg. `cc-pv[tq]z`). Other supported arguments for the first dictionary are:. `scheme`: scf extrapolation scheme function, by default it is worked out from the number of basis sets (1 - 3) supplied as `basis`.; `alpha`: alpha for the above scheme, if the default is to be overriden; `options`: if special options are required for a step, they should be entered as a dict here. If some options should be",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:14603,Performance,optimiz,optimize,14603,"cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2'). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2', delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""freeze_core"": ""False""}}]). >>> # [8] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='sto-3g'). >>> # [9] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme='corl_xtpl_helgaker_2', func=cbs). table of contents. cbs; cbs(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; cbs. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:14624,Performance,optimiz,optimize,14624,"cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2'). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2', delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""freeze_core"": ""False""}}]). >>> # [8] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='sto-3g'). >>> # [9] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme='corl_xtpl_helgaker_2', func=cbs). table of contents. cbs; cbs(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; cbs. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:12480,Usability,simpl,simple,12480,"ial options for lower method in a given stage. This is useful to calculate a direct stage in an otherwise density-fitted calculation, or similar.; `treatment`: treat extrapolation stage as `scf` or `corl`, by default only the first stage is `scf` and every later one is `corl`.; `stage`: tag for the stage used in tables. The next items in the `cbs_metadata` array extrapolate correlation. All of the above parameters are available, with only the `wfn` and `basis` keywords required. Other supported parameters are:. `wfn_lo`: the lower method from which the delta correction is to be calculated. By default, it is set to `wfn` from the previous field in the `cbs_metadata` array.; `basis_lo`: basis set to be used for the delta correction. By default, it is the same as the `basis` specified above. Others. Parameters:; molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3'). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_s",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:12638,Usability,simpl,simple,12638," extrapolation stage as `scf` or `corl`, by default only the first stage is `scf` and every later one is `corl`.; `stage`: tag for the stage used in tables. The next items in the `cbs_metadata` array extrapolate correlation. All of the above parameters are available, with only the `wfn` and `basis` keywords required. Other supported parameters are:. `wfn_lo`: the lower method from which the delta correction is to be calculated. By default, it is set to `wfn` from the previous field in the `cbs_metadata` array.; `basis_lo`: basis set to be used for the delta correction. By default, it is the same as the `basis` specified above. Others. Parameters:; molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3'). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2'). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_fchkfiles.html:302,Availability,checkpoint,checkpoint,302,"﻿. compare_fchkfiles. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. compare_fchkfiles¶. psi4.driver.compare_fchkfiles(expected, computed, atol_exponent, label)[source]¶; Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4’s FCHK files. Parameters:. expected (str) – Path to reference FCHK file against which computed is compared.; computed (str) – Path to input FCHK file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. table of contents. compare_fchkfiles; compare_fchkfiles(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.compare_fchkfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_fchkfiles.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_fchkfiles.html:532,Availability,avail,available,532,"﻿. compare_fchkfiles. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. compare_fchkfiles¶. psi4.driver.compare_fchkfiles(expected, computed, atol_exponent, label)[source]¶; Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4’s FCHK files. Parameters:. expected (str) – Path to reference FCHK file against which computed is compared.; computed (str) – Path to input FCHK file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. table of contents. compare_fchkfiles; compare_fchkfiles(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.compare_fchkfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_fchkfiles.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_fchkfiles.html:1069,Availability,toler,tolerance,1069,"﻿. compare_fchkfiles. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. compare_fchkfiles¶. psi4.driver.compare_fchkfiles(expected, computed, atol_exponent, label)[source]¶; Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4’s FCHK files. Parameters:. expected (str) – Path to reference FCHK file against which computed is compared.; computed (str) – Path to input FCHK file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. table of contents. compare_fchkfiles; compare_fchkfiles(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.compare_fchkfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_fchkfiles.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_fchkfiles.html:1401,Availability,error,error,1401,"﻿. compare_fchkfiles. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. compare_fchkfiles¶. psi4.driver.compare_fchkfiles(expected, computed, atol_exponent, label)[source]¶; Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4’s FCHK files. Parameters:. expected (str) – Path to reference FCHK file against which computed is compared.; computed (str) – Path to input FCHK file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. table of contents. compare_fchkfiles; compare_fchkfiles(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.compare_fchkfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_fchkfiles.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_fchkfiles.html:1680,Deployability,update,updated,1680,"﻿. compare_fchkfiles. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. compare_fchkfiles¶. psi4.driver.compare_fchkfiles(expected, computed, atol_exponent, label)[source]¶; Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4’s FCHK files. Parameters:. expected (str) – Path to reference FCHK file against which computed is compared.; computed (str) – Path to input FCHK file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. table of contents. compare_fchkfiles; compare_fchkfiles(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.compare_fchkfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_fchkfiles.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_fchkfiles.html:1407,Integrability,message,messages,1407,"﻿. compare_fchkfiles. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. compare_fchkfiles¶. psi4.driver.compare_fchkfiles(expected, computed, atol_exponent, label)[source]¶; Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4’s FCHK files. Parameters:. expected (str) – Path to reference FCHK file against which computed is compared.; computed (str) – Path to input FCHK file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. table of contents. compare_fchkfiles; compare_fchkfiles(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.compare_fchkfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_fchkfiles.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_fchkfiles.html:682,Testability,log,logical,682,"﻿. compare_fchkfiles. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. compare_fchkfiles¶. psi4.driver.compare_fchkfiles(expected, computed, atol_exponent, label)[source]¶; Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4’s FCHK files. Parameters:. expected (str) – Path to reference FCHK file against which computed is compared.; computed (str) – Path to input FCHK file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. table of contents. compare_fchkfiles; compare_fchkfiles(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.compare_fchkfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_fchkfiles.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_fchkfiles.html:733,Testability,test,test,733,"﻿. compare_fchkfiles. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. compare_fchkfiles¶. psi4.driver.compare_fchkfiles(expected, computed, atol_exponent, label)[source]¶; Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4’s FCHK files. Parameters:. expected (str) – Path to reference FCHK file against which computed is compared.; computed (str) – Path to input FCHK file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. table of contents. compare_fchkfiles; compare_fchkfiles(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.compare_fchkfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_fchkfiles.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_fcidumps.html:1267,Deployability,update,updated,1267,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. compare_fcidumps¶. psi4.driver.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. table of contents. compare_fcidumps; compare_fcidumps(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_fcidumps.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_fcidumps.html:637,Energy Efficiency,ENERGY,ENERGY,637,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. compare_fcidumps¶. psi4.driver.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. table of contents. compare_fcidumps; compare_fcidumps(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_fcidumps.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_fcidumps.html:664,Energy Efficiency,energy,energy,664,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. compare_fcidumps¶. psi4.driver.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. table of contents. compare_fcidumps; compare_fcidumps(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_fcidumps.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_fcidumps.html:686,Energy Efficiency,ENERGY,ENERGY,686,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. compare_fcidumps¶. psi4.driver.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. table of contents. compare_fcidumps; compare_fcidumps(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_fcidumps.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_fcidumps.html:713,Energy Efficiency,energy,energy,713,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. compare_fcidumps¶. psi4.driver.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. table of contents. compare_fcidumps; compare_fcidumps(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_fcidumps.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_fcidumps.html:732,Energy Efficiency,ENERGY,ENERGY,732,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. compare_fcidumps¶. psi4.driver.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. table of contents. compare_fcidumps; compare_fcidumps(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_fcidumps.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_fcidumps.html:752,Energy Efficiency,energy,energy,752,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. compare_fcidumps¶. psi4.driver.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. table of contents. compare_fcidumps; compare_fcidumps(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_fcidumps.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_fcidumps.html:777,Energy Efficiency,ENERGY,ENERGY,777,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. compare_fcidumps¶. psi4.driver.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. table of contents. compare_fcidumps; compare_fcidumps(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_fcidumps.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_fcidumps.html:803,Energy Efficiency,energy,energy,803,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. compare_fcidumps¶. psi4.driver.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. table of contents. compare_fcidumps; compare_fcidumps(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_fcidumps.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_fcidumps.html:1001,Testability,test,test,1001,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. compare_fcidumps¶. psi4.driver.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. table of contents. compare_fcidumps; compare_fcidumps(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_fcidumps.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_moldenfiles.html:502,Availability,avail,available,502,"﻿. compare_moldenfiles. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_moldenfiles. compare_moldenfiles¶. psi4.driver.compare_moldenfiles(expected, computed, atol_exponent=1e-07, label='Compare Molden')[source]¶; Comparison function for output data in Molden file format.; Compares many fields including geometry, basis set, occupations, symmetries, energies.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; A format description is found https://www3.cmbi.umcn.nl/molden/molden_format.html. Parameters:. expected (str) – Path to reference Molden file against which computed is compared.; computed (str) – Path to input Molden file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. table of contents. compare_moldenfiles; compare_moldenfiles(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_moldenfiles. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.compare_moldenfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_moldenfiles.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_moldenfiles.html:812,Availability,toler,tolerance,812,"﻿. compare_moldenfiles. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_moldenfiles. compare_moldenfiles¶. psi4.driver.compare_moldenfiles(expected, computed, atol_exponent=1e-07, label='Compare Molden')[source]¶; Comparison function for output data in Molden file format.; Compares many fields including geometry, basis set, occupations, symmetries, energies.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; A format description is found https://www3.cmbi.umcn.nl/molden/molden_format.html. Parameters:. expected (str) – Path to reference Molden file against which computed is compared.; computed (str) – Path to input Molden file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. table of contents. compare_moldenfiles; compare_moldenfiles(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_moldenfiles. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.compare_moldenfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_moldenfiles.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_moldenfiles.html:1144,Availability,error,error,1144,"﻿. compare_moldenfiles. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_moldenfiles. compare_moldenfiles¶. psi4.driver.compare_moldenfiles(expected, computed, atol_exponent=1e-07, label='Compare Molden')[source]¶; Comparison function for output data in Molden file format.; Compares many fields including geometry, basis set, occupations, symmetries, energies.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; A format description is found https://www3.cmbi.umcn.nl/molden/molden_format.html. Parameters:. expected (str) – Path to reference Molden file against which computed is compared.; computed (str) – Path to input Molden file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. table of contents. compare_moldenfiles; compare_moldenfiles(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_moldenfiles. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.compare_moldenfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_moldenfiles.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_moldenfiles.html:1429,Deployability,update,updated,1429,"﻿. compare_moldenfiles. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_moldenfiles. compare_moldenfiles¶. psi4.driver.compare_moldenfiles(expected, computed, atol_exponent=1e-07, label='Compare Molden')[source]¶; Comparison function for output data in Molden file format.; Compares many fields including geometry, basis set, occupations, symmetries, energies.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; A format description is found https://www3.cmbi.umcn.nl/molden/molden_format.html. Parameters:. expected (str) – Path to reference Molden file against which computed is compared.; computed (str) – Path to input Molden file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. table of contents. compare_moldenfiles; compare_moldenfiles(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_moldenfiles. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.compare_moldenfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_moldenfiles.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_moldenfiles.html:1150,Integrability,message,messages,1150,"﻿. compare_moldenfiles. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_moldenfiles. compare_moldenfiles¶. psi4.driver.compare_moldenfiles(expected, computed, atol_exponent=1e-07, label='Compare Molden')[source]¶; Comparison function for output data in Molden file format.; Compares many fields including geometry, basis set, occupations, symmetries, energies.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; A format description is found https://www3.cmbi.umcn.nl/molden/molden_format.html. Parameters:. expected (str) – Path to reference Molden file against which computed is compared.; computed (str) – Path to input Molden file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. table of contents. compare_moldenfiles; compare_moldenfiles(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_moldenfiles. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.compare_moldenfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.compare_moldenfiles.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ConvergenceError.html:261,Availability,Error,Error,261,"﻿. ConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ConvergenceError. ConvergenceError¶. exception psi4.driver.ConvergenceError(eqn_description, iteration, additional_info=None)[source]¶; Error called for problems with converging an iterative method. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., SCF, optimization).; iteration (int) – Iteration number on which routine failed.; additional_info (Optional[str]) – Any additional message to convey. message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. table of contents. ConvergenceError; ConvergenceError; ConvergenceError.message; ConvergenceError.iteration. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.ConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ConvergenceError.html:977,Deployability,update,updated,977,"﻿. ConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ConvergenceError. ConvergenceError¶. exception psi4.driver.ConvergenceError(eqn_description, iteration, additional_info=None)[source]¶; Error called for problems with converging an iterative method. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., SCF, optimization).; iteration (int) – Iteration number on which routine failed.; additional_info (Optional[str]) – Any additional message to convey. message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. table of contents. ConvergenceError; ConvergenceError; ConvergenceError.message; ConvergenceError.iteration. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.ConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ConvergenceError.html:372,Integrability,rout,routine,372,"﻿. ConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ConvergenceError. ConvergenceError¶. exception psi4.driver.ConvergenceError(eqn_description, iteration, additional_info=None)[source]¶; Error called for problems with converging an iterative method. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., SCF, optimization).; iteration (int) – Iteration number on which routine failed.; additional_info (Optional[str]) – Any additional message to convey. message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. table of contents. ConvergenceError; ConvergenceError; ConvergenceError.message; ConvergenceError.iteration. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.ConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ConvergenceError.html:468,Integrability,rout,routine,468,"﻿. ConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ConvergenceError. ConvergenceError¶. exception psi4.driver.ConvergenceError(eqn_description, iteration, additional_info=None)[source]¶; Error called for problems with converging an iterative method. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., SCF, optimization).; iteration (int) – Iteration number on which routine failed.; additional_info (Optional[str]) – Any additional message to convey. message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. table of contents. ConvergenceError; ConvergenceError; ConvergenceError.message; ConvergenceError.iteration. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.ConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ConvergenceError.html:534,Integrability,message,message,534,"﻿. ConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ConvergenceError. ConvergenceError¶. exception psi4.driver.ConvergenceError(eqn_description, iteration, additional_info=None)[source]¶; Error called for problems with converging an iterative method. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., SCF, optimization).; iteration (int) – Iteration number on which routine failed.; additional_info (Optional[str]) – Any additional message to convey. message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. table of contents. ConvergenceError; ConvergenceError; ConvergenceError.message; ConvergenceError.iteration. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.ConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ConvergenceError.html:553,Integrability,message,message,553,"﻿. ConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ConvergenceError. ConvergenceError¶. exception psi4.driver.ConvergenceError(eqn_description, iteration, additional_info=None)[source]¶; Error called for problems with converging an iterative method. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., SCF, optimization).; iteration (int) – Iteration number on which routine failed.; additional_info (Optional[str]) – Any additional message to convey. message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. table of contents. ConvergenceError; ConvergenceError; ConvergenceError.message; ConvergenceError.iteration. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.ConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ConvergenceError.html:649,Integrability,rout,routine,649,"﻿. ConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ConvergenceError. ConvergenceError¶. exception psi4.driver.ConvergenceError(eqn_description, iteration, additional_info=None)[source]¶; Error called for problems with converging an iterative method. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., SCF, optimization).; iteration (int) – Iteration number on which routine failed.; additional_info (Optional[str]) – Any additional message to convey. message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. table of contents. ConvergenceError; ConvergenceError; ConvergenceError.message; ConvergenceError.iteration. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.ConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ConvergenceError.html:737,Integrability,message,message,737,"﻿. ConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ConvergenceError. ConvergenceError¶. exception psi4.driver.ConvergenceError(eqn_description, iteration, additional_info=None)[source]¶; Error called for problems with converging an iterative method. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., SCF, optimization).; iteration (int) – Iteration number on which routine failed.; additional_info (Optional[str]) – Any additional message to convey. message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. table of contents. ConvergenceError; ConvergenceError; ConvergenceError.message; ConvergenceError.iteration. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.ConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ConvergenceError.html:408,Performance,optimiz,optimization,408,"﻿. ConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ConvergenceError. ConvergenceError¶. exception psi4.driver.ConvergenceError(eqn_description, iteration, additional_info=None)[source]¶; Error called for problems with converging an iterative method. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., SCF, optimization).; iteration (int) – Iteration number on which routine failed.; additional_info (Optional[str]) – Any additional message to convey. message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. table of contents. ConvergenceError; ConvergenceError; ConvergenceError.message; ConvergenceError.iteration. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.ConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.copy_file_from_scratch.html:1377,Deployability,update,updated,1377,"﻿. copy_file_from_scratch. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; copy_file_from_scratch. copy_file_from_scratch¶. psi4.driver.copy_file_from_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Move a file out of scratch following the naming convention. Parameters:. filename (str) – Full path to target file.; prefix (str) – Computation prefix, usually ‘psi’.; namespace (str) – Context namespace, usually molecule name.; unit (int) – Unit number, e.g. 32; move (bool) – Whether to copy (default) or move?. Examples; >>> # Assume PID is 12345 and SCRATCH is /scratch/parrish/; >>> copy_file_to_scratch('temp', 'psi', 'h2o', 32):; Out[1]: -cp /scratch/parrish/psi.12345.h2o.32 .temp; >>> copy_file_to_scratch('/tmp/temp', 'psi', 'h2o', 32):; Out[2]: -cp /scratch/parrish/psi.12345.h2o.32 /tmp/temp; >>> copy_file_to_scratch('/tmp/temp', 'psi', '', 32):; Out[3]: -cp /scratch/parrish/psi.12345.32 /tmp/temp; >>> copy_file_to_scratch('/tmp/temp', 'psi', '', 32, True):; Out[4]: -mv /scratch/parrish/psi.12345.32 /tmp/temp. table of contents. copy_file_from_scratch; copy_file_from_scratch(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; copy_file_from_scratch. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.copy_file_from_scratch.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.copy_file_from_scratch.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.copy_file_to_scratch.html:1356,Deployability,update,updated,1356,"﻿. copy_file_to_scratch. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; copy_file_to_scratch. copy_file_to_scratch¶. psi4.driver.copy_file_to_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Move a file into scratch following the naming convention. Parameters:. filename (str) – Full path to file.; prefix (str) – Computation prefix, usually ‘psi’.; namespace (str) – Context namespace, usually molecule name.; unit (int) – Unit number, e.g. 32.; move (bool) – Whether to copy (default) or move?. Examples; >>> # Assume PID is 12345 and SCRATCH is /scratch/parrish/; >>> copy_file_to_scratch('temp', 'psi', 'h2o', 32):; Out[1]: -cp ./temp /scratch/parrish/psi.12345.h2o.32; >>> copy_file_to_scratch('/tmp/temp', 'psi', 'h2o', 32):; Out[2]: -cp /tmp/temp /scratch/parrish/psi.12345.h2o.32; >>> copy_file_to_scratch('/tmp/temp', 'psi', '', 32):; Out[3]: -cp /tmp/temp /scratch/parrish/psi.12345.32; >>> copy_file_to_scratch('/tmp/temp', 'psi', '', 32, True):; Out[4]: -mv /tmp/temp /scratch/parrish/psi.12345.32. table of contents. copy_file_to_scratch; copy_file_to_scratch(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; copy_file_to_scratch. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.copy_file_to_scratch.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.copy_file_to_scratch.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.create_plugin.html:523,Deployability,update,updated,523,"﻿. create_plugin. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; create_plugin. create_plugin¶. psi4.driver.create_plugin(name, template)[source]¶. Return type:; None. Parameters:. name (str) – ; template (str) – . table of contents. create_plugin; create_plugin(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; create_plugin. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.create_plugin.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.create_plugin.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cubeprop.html:1024,Deployability,update,updated,1024,"﻿. cubeprop. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; cubeprop. cubeprop¶. psi4.driver.cubeprop(wfn, **kwargs)[source]¶; Evaluate properties on a grid and generate cube files. New in version 0.5: wfn parameter passed explicitly. Returns:; None. Parameters:; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files. Examples:. >>> # [1] Cube files for all orbitals; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> cubeprop(wfn). >>> # [2] Cube files for density (alpha, beta, total, spin) and four orbitals; >>> # (two alpha, two beta); >>> set cubeprop_tasks ['orbitals', 'density']; >>> set cubeprop_orbitals [5, 6, -5, -6]; >>> E, wfn = energy('scf', return_wfn=True); >>> cubeprop(wfn). table of contents. cubeprop; cubeprop(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; cubeprop. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cubeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cubeprop.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cubeprop.html:473,Energy Efficiency,energy,energy,473,"﻿. cubeprop. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; cubeprop. cubeprop¶. psi4.driver.cubeprop(wfn, **kwargs)[source]¶; Evaluate properties on a grid and generate cube files. New in version 0.5: wfn parameter passed explicitly. Returns:; None. Parameters:; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files. Examples:. >>> # [1] Cube files for all orbitals; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> cubeprop(wfn). >>> # [2] Cube files for density (alpha, beta, total, spin) and four orbitals; >>> # (two alpha, two beta); >>> set cubeprop_tasks ['orbitals', 'density']; >>> set cubeprop_orbitals [5, 6, -5, -6]; >>> E, wfn = energy('scf', return_wfn=True); >>> cubeprop(wfn). table of contents. cubeprop; cubeprop(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; cubeprop. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cubeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cubeprop.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cubeprop.html:737,Energy Efficiency,energy,energy,737,"﻿. cubeprop. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; cubeprop. cubeprop¶. psi4.driver.cubeprop(wfn, **kwargs)[source]¶; Evaluate properties on a grid and generate cube files. New in version 0.5: wfn parameter passed explicitly. Returns:; None. Parameters:; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files. Examples:. >>> # [1] Cube files for all orbitals; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> cubeprop(wfn). >>> # [2] Cube files for density (alpha, beta, total, spin) and four orbitals; >>> # (two alpha, two beta); >>> set cubeprop_tasks ['orbitals', 'density']; >>> set cubeprop_orbitals [5, 6, -5, -6]; >>> E, wfn = energy('scf', return_wfn=True); >>> cubeprop(wfn). table of contents. cubeprop; cubeprop(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; cubeprop. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.cubeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cubeprop.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.docs_table_link.html:753,Deployability,update,updated,753,"﻿. docs_table_link. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; docs_table_link. docs_table_link¶. psi4.driver.docs_table_link(name, mode)[source]¶; Compose a link to mode documentation table.; For modes {“summary”, “details”}, link will be anchored at the table row for method name. (Method row not guaranteed to exist.); For other modes, link will be to table in general. Return type:; str. Parameters:. name (str) – ; mode (str) – . table of contents. docs_table_link; docs_table_link(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; docs_table_link. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.docs_table_link.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.docs_table_link.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.dynamic_variable_bind.html:572,Deployability,update,updated,572,"﻿. dynamic_variable_bind. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; dynamic_variable_bind. dynamic_variable_bind¶. psi4.driver.dynamic_variable_bind(cls)[source]¶; Function to dynamically add extra members to; the core.Molecule class. table of contents. dynamic_variable_bind; dynamic_variable_bind(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; dynamic_variable_bind. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.dynamic_variable_bind.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.dynamic_variable_bind.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.EmpiricalDispersion.html:3179,Availability,error,error,3179,"nl. Type:; str. disp¶; Only present for engine =libdisp. Psi4 class instance prepared; to compute dispersion. Type:; Dispersion. ordered_params¶; Fixed-order list of relevant parameters for dashlevel. Matches; DISPERSION CORRECTION ENERGY ordering. Used for printing. Type:; list. Parameters:. name_hint (str) – Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Any or all parameters initialized from; dashcoeff[dashlevel][functional-without-dashlevel] or; dashcoeff_supplement[dashlevel][functional-with-dashlevel]; can be overwritten via param_tweaks.; level_hint (str) – Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in dashcoeff or “alias” or; “formal” to one.; param_tweaks (Union[Dict, List]) – Values for the same keys as dashcoeff[dashlevel][‘default’]; (and same order if list) used to override any or all values; initialized by name_hint. Extra parameters will error.; engine (str) – Override which code computes dispersion. See above for allowed; values. Formerly (pre Nov 2022) only relevant for -D2, which can be computed by; libdisp or dftd3. Now (post Nov 2022) also relevant for -D3 variants,; which can be computed by dftd3 executable or simple-dftd3 Python module.; gcp_engine (str) – Override which code computes the gcp correction. Now can use; classic gcp or mctc-gcp executables.; save_pairwise_disp (bool) – Whether to request atomic pairwise analysis. Methods Summary. compute_energy(molecule[, wfn]); Compute dispersion energy based on engine, dispersion level, and parameters in self. compute_gradient(molecule[, wfn]); Compute dispersion gradient based on engine, dispersion level, and parameters in self. compute_hessian(molecule[, wfn]); Compute dispersion Hessian based on engine, dispersion level, and parameters in self. print_out(); Format dispersion parameters of self for output file. Methods Documentation. compute_energy(molec",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.EmpiricalDispersion.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.EmpiricalDispersion.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.EmpiricalDispersion.html:6289,Deployability,update,updated,6289,"rection.; wfn (Wavefunction) – Location to set QCVariables. Returns:; Dispersion energy [Eh]. Return type:; float. Notes. DISPERSION CORRECTION ENERGYDisp always set. Overridden in SCF finalization, but that only changes for “-3C” methods. fctl DISPERSION CORRECTION ENERGYSet if fctldash nonempty. compute_gradient(molecule, wfn=None)[source]¶; Compute dispersion gradient based on engine, dispersion level, and parameters in self. Parameters:. molecule (Molecule) – System for which to compute empirical dispersion correction.; wfn (Wavefunction) – Location to set QCVariables. Returns:; (nat, 3) dispersion gradient [Eh/a0]. Return type:; Matrix. compute_hessian(molecule, wfn=None)[source]¶; Compute dispersion Hessian based on engine, dispersion level, and parameters in self.; Uses finite difference, as no dispersion engine has analytic second derivatives. Parameters:. molecule (Molecule) – System for which to compute empirical dispersion correction.; wfn (Wavefunction) – Location to set QCVariables. Returns:; (3*nat, 3*nat) dispersion Hessian [Eh/a0/a0]. Return type:; Matrix. print_out()[source]¶; Format dispersion parameters of self for output file. table of contents. EmpiricalDispersion; EmpiricalDispersion; EmpiricalDispersion.dashlevel; EmpiricalDispersion.dashparams; EmpiricalDispersion.fctldash; EmpiricalDispersion.description; EmpiricalDispersion.dashlevel_citation; EmpiricalDispersion.dashparams_citation; EmpiricalDispersion.dashcoeff_supplement; EmpiricalDispersion.engine; EmpiricalDispersion.disp; EmpiricalDispersion.ordered_params; EmpiricalDispersion.compute_energy(); EmpiricalDispersion.compute_gradient(); EmpiricalDispersion.compute_hessian(); EmpiricalDispersion.print_out(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; EmpiricalDispersion. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.EmpiricalDispersion.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.EmpiricalDispersion.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.EmpiricalDispersion.html:2402,Energy Efficiency,ENERGY,ENERGY,2402,"dashparams_citation¶; Literature reference for dispersion parameters, if dashparams; corresponds to a defined, named, untweaked “functional-dashlevel”; set with a citation. Otherwise, empty string. Type:; str. dashcoeff_supplement¶; See description in qcengine.programs.empirical_dispersion_resources.from_arrays. Used; here to “bless” the dispersion definitions attached to; the procedures/dft/<rung>_functionals-defined dictionaries; as legit, non-custom, and of equal validity to; qcengine.programs.empirical_dispersion_resources.dashcoeff itself for purposes of; validating fctldash. Type:; dict. engine¶; {‘libdisp’, “s-dftd3”, ‘dftd3’, ‘nl’, ‘mp2d’, “dftd4”}; Compute engine for dispersion. One of Psi4’s internal libdisp; library, external Grimme or Beran projects, or nl. Type:; str. disp¶; Only present for engine =libdisp. Psi4 class instance prepared; to compute dispersion. Type:; Dispersion. ordered_params¶; Fixed-order list of relevant parameters for dashlevel. Matches; DISPERSION CORRECTION ENERGY ordering. Used for printing. Type:; list. Parameters:. name_hint (str) – Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Any or all parameters initialized from; dashcoeff[dashlevel][functional-without-dashlevel] or; dashcoeff_supplement[dashlevel][functional-with-dashlevel]; can be overwritten via param_tweaks.; level_hint (str) – Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in dashcoeff or “alias” or; “formal” to one.; param_tweaks (Union[Dict, List]) – Values for the same keys as dashcoeff[dashlevel][‘default’]; (and same order if list) used to override any or all values; initialized by name_hint. Extra parameters will error.; engine (str) – Override which code computes dispersion. See above for allowed; values. Formerly (pre Nov 2022) only relevant for -D2, which can be computed by; libdisp or dftd3. Now (post Nov 2022) also rele",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.EmpiricalDispersion.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.EmpiricalDispersion.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.EmpiricalDispersion.html:3753,Energy Efficiency,energy,energy,3753,"ional-with-dashlevel]; can be overwritten via param_tweaks.; level_hint (str) – Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in dashcoeff or “alias” or; “formal” to one.; param_tweaks (Union[Dict, List]) – Values for the same keys as dashcoeff[dashlevel][‘default’]; (and same order if list) used to override any or all values; initialized by name_hint. Extra parameters will error.; engine (str) – Override which code computes dispersion. See above for allowed; values. Formerly (pre Nov 2022) only relevant for -D2, which can be computed by; libdisp or dftd3. Now (post Nov 2022) also relevant for -D3 variants,; which can be computed by dftd3 executable or simple-dftd3 Python module.; gcp_engine (str) – Override which code computes the gcp correction. Now can use; classic gcp or mctc-gcp executables.; save_pairwise_disp (bool) – Whether to request atomic pairwise analysis. Methods Summary. compute_energy(molecule[, wfn]); Compute dispersion energy based on engine, dispersion level, and parameters in self. compute_gradient(molecule[, wfn]); Compute dispersion gradient based on engine, dispersion level, and parameters in self. compute_hessian(molecule[, wfn]); Compute dispersion Hessian based on engine, dispersion level, and parameters in self. print_out(); Format dispersion parameters of self for output file. Methods Documentation. compute_energy(molecule, wfn=None)[source]¶; Compute dispersion energy based on engine, dispersion level, and parameters in self. Parameters:. molecule (Molecule) – System for which to compute empirical dispersion correction.; wfn (Wavefunction) – Location to set QCVariables. Returns:; Dispersion energy [Eh]. Return type:; float. Notes. DISPERSION CORRECTION ENERGYDisp always set. Overridden in SCF finalization, but that only changes for “-3C” methods. fctl DISPERSION CORRECTION ENERGYSet if fctldash nonempty. compute_gradient(molecule, wfn=None)[source]¶; Compute dispersion gradient based on engine, ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.EmpiricalDispersion.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.EmpiricalDispersion.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.EmpiricalDispersion.html:4215,Energy Efficiency,energy,energy,4215,"h code computes dispersion. See above for allowed; values. Formerly (pre Nov 2022) only relevant for -D2, which can be computed by; libdisp or dftd3. Now (post Nov 2022) also relevant for -D3 variants,; which can be computed by dftd3 executable or simple-dftd3 Python module.; gcp_engine (str) – Override which code computes the gcp correction. Now can use; classic gcp or mctc-gcp executables.; save_pairwise_disp (bool) – Whether to request atomic pairwise analysis. Methods Summary. compute_energy(molecule[, wfn]); Compute dispersion energy based on engine, dispersion level, and parameters in self. compute_gradient(molecule[, wfn]); Compute dispersion gradient based on engine, dispersion level, and parameters in self. compute_hessian(molecule[, wfn]); Compute dispersion Hessian based on engine, dispersion level, and parameters in self. print_out(); Format dispersion parameters of self for output file. Methods Documentation. compute_energy(molecule, wfn=None)[source]¶; Compute dispersion energy based on engine, dispersion level, and parameters in self. Parameters:. molecule (Molecule) – System for which to compute empirical dispersion correction.; wfn (Wavefunction) – Location to set QCVariables. Returns:; Dispersion energy [Eh]. Return type:; float. Notes. DISPERSION CORRECTION ENERGYDisp always set. Overridden in SCF finalization, but that only changes for “-3C” methods. fctl DISPERSION CORRECTION ENERGYSet if fctldash nonempty. compute_gradient(molecule, wfn=None)[source]¶; Compute dispersion gradient based on engine, dispersion level, and parameters in self. Parameters:. molecule (Molecule) – System for which to compute empirical dispersion correction.; wfn (Wavefunction) – Location to set QCVariables. Returns:; (nat, 3) dispersion gradient [Eh/a0]. Return type:; Matrix. compute_hessian(molecule, wfn=None)[source]¶; Compute dispersion Hessian based on engine, dispersion level, and parameters in self.; Uses finite difference, as no dispersion engine has analytic sec",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.EmpiricalDispersion.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.EmpiricalDispersion.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.EmpiricalDispersion.html:4449,Energy Efficiency,energy,energy,4449,"ftd3 executable or simple-dftd3 Python module.; gcp_engine (str) – Override which code computes the gcp correction. Now can use; classic gcp or mctc-gcp executables.; save_pairwise_disp (bool) – Whether to request atomic pairwise analysis. Methods Summary. compute_energy(molecule[, wfn]); Compute dispersion energy based on engine, dispersion level, and parameters in self. compute_gradient(molecule[, wfn]); Compute dispersion gradient based on engine, dispersion level, and parameters in self. compute_hessian(molecule[, wfn]); Compute dispersion Hessian based on engine, dispersion level, and parameters in self. print_out(); Format dispersion parameters of self for output file. Methods Documentation. compute_energy(molecule, wfn=None)[source]¶; Compute dispersion energy based on engine, dispersion level, and parameters in self. Parameters:. molecule (Molecule) – System for which to compute empirical dispersion correction.; wfn (Wavefunction) – Location to set QCVariables. Returns:; Dispersion energy [Eh]. Return type:; float. Notes. DISPERSION CORRECTION ENERGYDisp always set. Overridden in SCF finalization, but that only changes for “-3C” methods. fctl DISPERSION CORRECTION ENERGYSet if fctldash nonempty. compute_gradient(molecule, wfn=None)[source]¶; Compute dispersion gradient based on engine, dispersion level, and parameters in self. Parameters:. molecule (Molecule) – System for which to compute empirical dispersion correction.; wfn (Wavefunction) – Location to set QCVariables. Returns:; (nat, 3) dispersion gradient [Eh/a0]. Return type:; Matrix. compute_hessian(molecule, wfn=None)[source]¶; Compute dispersion Hessian based on engine, dispersion level, and parameters in self.; Uses finite difference, as no dispersion engine has analytic second derivatives. Parameters:. molecule (Molecule) – System for which to compute empirical dispersion correction.; wfn (Wavefunction) – Location to set QCVariables. Returns:; (3*nat, 3*nat) dispersion Hessian [Eh/a0/a0]. Return ty",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.EmpiricalDispersion.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.EmpiricalDispersion.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.EmpiricalDispersion.html:4512,Energy Efficiency,ENERGY,ENERGYDisp,4512,"Override which code computes the gcp correction. Now can use; classic gcp or mctc-gcp executables.; save_pairwise_disp (bool) – Whether to request atomic pairwise analysis. Methods Summary. compute_energy(molecule[, wfn]); Compute dispersion energy based on engine, dispersion level, and parameters in self. compute_gradient(molecule[, wfn]); Compute dispersion gradient based on engine, dispersion level, and parameters in self. compute_hessian(molecule[, wfn]); Compute dispersion Hessian based on engine, dispersion level, and parameters in self. print_out(); Format dispersion parameters of self for output file. Methods Documentation. compute_energy(molecule, wfn=None)[source]¶; Compute dispersion energy based on engine, dispersion level, and parameters in self. Parameters:. molecule (Molecule) – System for which to compute empirical dispersion correction.; wfn (Wavefunction) – Location to set QCVariables. Returns:; Dispersion energy [Eh]. Return type:; float. Notes. DISPERSION CORRECTION ENERGYDisp always set. Overridden in SCF finalization, but that only changes for “-3C” methods. fctl DISPERSION CORRECTION ENERGYSet if fctldash nonempty. compute_gradient(molecule, wfn=None)[source]¶; Compute dispersion gradient based on engine, dispersion level, and parameters in self. Parameters:. molecule (Molecule) – System for which to compute empirical dispersion correction.; wfn (Wavefunction) – Location to set QCVariables. Returns:; (nat, 3) dispersion gradient [Eh/a0]. Return type:; Matrix. compute_hessian(molecule, wfn=None)[source]¶; Compute dispersion Hessian based on engine, dispersion level, and parameters in self.; Uses finite difference, as no dispersion engine has analytic second derivatives. Parameters:. molecule (Molecule) – System for which to compute empirical dispersion correction.; wfn (Wavefunction) – Location to set QCVariables. Returns:; (3*nat, 3*nat) dispersion Hessian [Eh/a0/a0]. Return type:; Matrix. print_out()[source]¶; Format dispersion parameters of s",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.EmpiricalDispersion.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.EmpiricalDispersion.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.EmpiricalDispersion.html:4635,Energy Efficiency,ENERGY,ENERGYSet,4635," – Whether to request atomic pairwise analysis. Methods Summary. compute_energy(molecule[, wfn]); Compute dispersion energy based on engine, dispersion level, and parameters in self. compute_gradient(molecule[, wfn]); Compute dispersion gradient based on engine, dispersion level, and parameters in self. compute_hessian(molecule[, wfn]); Compute dispersion Hessian based on engine, dispersion level, and parameters in self. print_out(); Format dispersion parameters of self for output file. Methods Documentation. compute_energy(molecule, wfn=None)[source]¶; Compute dispersion energy based on engine, dispersion level, and parameters in self. Parameters:. molecule (Molecule) – System for which to compute empirical dispersion correction.; wfn (Wavefunction) – Location to set QCVariables. Returns:; Dispersion energy [Eh]. Return type:; float. Notes. DISPERSION CORRECTION ENERGYDisp always set. Overridden in SCF finalization, but that only changes for “-3C” methods. fctl DISPERSION CORRECTION ENERGYSet if fctldash nonempty. compute_gradient(molecule, wfn=None)[source]¶; Compute dispersion gradient based on engine, dispersion level, and parameters in self. Parameters:. molecule (Molecule) – System for which to compute empirical dispersion correction.; wfn (Wavefunction) – Location to set QCVariables. Returns:; (nat, 3) dispersion gradient [Eh/a0]. Return type:; Matrix. compute_hessian(molecule, wfn=None)[source]¶; Compute dispersion Hessian based on engine, dispersion level, and parameters in self.; Uses finite difference, as no dispersion engine has analytic second derivatives. Parameters:. molecule (Molecule) – System for which to compute empirical dispersion correction.; wfn (Wavefunction) – Location to set QCVariables. Returns:; (3*nat, 3*nat) dispersion Hessian [Eh/a0/a0]. Return type:; Matrix. print_out()[source]¶; Format dispersion parameters of self for output file. table of contents. EmpiricalDispersion; EmpiricalDispersion; EmpiricalDispersion.dashlevel; EmpiricalDis",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.EmpiricalDispersion.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.EmpiricalDispersion.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.EmpiricalDispersion.html:807,Modifiability,flexible,flexible,807,"﻿. EmpiricalDispersion. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; EmpiricalDispersion. EmpiricalDispersion¶. class psi4.driver.EmpiricalDispersion(*, name_hint=None, level_hint=None, param_tweaks=None, engine=None, gcp_engine=None, save_pairwise_disp=False)[source]¶; Bases: object; Lightweight unification of empirical dispersion calculation modes. dashlevel¶; {“d1”, “d2”, “chg”, “das2009”, “das2010”, “nl”, “dmp2”, “d3zero2b”, “d3bj2b”, “d3mzero2b”, “d3mbj2b”, “d3zeroatm”, “d3bjatm”, “d3mzeroatm”, “d3mbjatm”, “d4bjeeqatm”}; Name of dispersion correction to be applied. Resolved; from name_hint and/or level_hint into a key of; empirical_dispersion_resources.dashcoeff. Type:; str. dashparams¶; Complete set of parameter values defining the flexible parts; of dashlevel. Number and parameter names vary by; dashlevel. Resolved into a complete set (keys of; dashcoeff[dashlevel][‘default’]) from name_hint and/or; dashcoeff_supplement and/or user param_tweaks. Type:; dict. fctldash¶; If dashparams for dashlevel corresponds to a defined,; named, untweaked “functional-dashlevel” set, then that; functional. Otherwise, empty string. Type:; str. description¶; Tagline for dispersion dashlevel. Type:; str. dashlevel_citation¶; Literature reference for dispersion dashlevel in general,; not necessarily for dashparams. Type:; str. dashparams_citation¶; Literature reference for dispersion parameters, if dashparams; corresponds to a defined, named, untweaked “functional-dashlevel”; set with a citation. Otherwise, empty string. Type:; str. dashcoeff_supplement¶; See description in qcengine.programs.empirical_dispersion_resources.from_arrays. Used; here to “bless” the dispersion definitions attached to; the procedures/dft/<rung>_functionals-defined dictionaries; as legit, non-custom, and of equal validity to; qcengine.programs.empirical_dispersion_resources.dashcoeff itself for purposes of; validating fctldash. Type:; dict. engine",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.EmpiricalDispersion.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.EmpiricalDispersion.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.EmpiricalDispersion.html:1961,Security,validat,validating,1961,") from name_hint and/or; dashcoeff_supplement and/or user param_tweaks. Type:; dict. fctldash¶; If dashparams for dashlevel corresponds to a defined,; named, untweaked “functional-dashlevel” set, then that; functional. Otherwise, empty string. Type:; str. description¶; Tagline for dispersion dashlevel. Type:; str. dashlevel_citation¶; Literature reference for dispersion dashlevel in general,; not necessarily for dashparams. Type:; str. dashparams_citation¶; Literature reference for dispersion parameters, if dashparams; corresponds to a defined, named, untweaked “functional-dashlevel”; set with a citation. Otherwise, empty string. Type:; str. dashcoeff_supplement¶; See description in qcengine.programs.empirical_dispersion_resources.from_arrays. Used; here to “bless” the dispersion definitions attached to; the procedures/dft/<rung>_functionals-defined dictionaries; as legit, non-custom, and of equal validity to; qcengine.programs.empirical_dispersion_resources.dashcoeff itself for purposes of; validating fctldash. Type:; dict. engine¶; {‘libdisp’, “s-dftd3”, ‘dftd3’, ‘nl’, ‘mp2d’, “dftd4”}; Compute engine for dispersion. One of Psi4’s internal libdisp; library, external Grimme or Beran projects, or nl. Type:; str. disp¶; Only present for engine =libdisp. Psi4 class instance prepared; to compute dispersion. Type:; Dispersion. ordered_params¶; Fixed-order list of relevant parameters for dashlevel. Matches; DISPERSION CORRECTION ENERGY ordering. Used for printing. Type:; list. Parameters:. name_hint (str) – Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Any or all parameters initialized from; dashcoeff[dashlevel][functional-without-dashlevel] or; dashcoeff_supplement[dashlevel][functional-with-dashlevel]; can be overwritten via param_tweaks.; level_hint (str) – Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in dashcoeff or “alias” or",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.EmpiricalDispersion.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.EmpiricalDispersion.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.EmpiricalDispersion.html:3463,Usability,simpl,simple-,3463," printing. Type:; list. Parameters:. name_hint (str) – Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Any or all parameters initialized from; dashcoeff[dashlevel][functional-without-dashlevel] or; dashcoeff_supplement[dashlevel][functional-with-dashlevel]; can be overwritten via param_tweaks.; level_hint (str) – Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in dashcoeff or “alias” or; “formal” to one.; param_tweaks (Union[Dict, List]) – Values for the same keys as dashcoeff[dashlevel][‘default’]; (and same order if list) used to override any or all values; initialized by name_hint. Extra parameters will error.; engine (str) – Override which code computes dispersion. See above for allowed; values. Formerly (pre Nov 2022) only relevant for -D2, which can be computed by; libdisp or dftd3. Now (post Nov 2022) also relevant for -D3 variants,; which can be computed by dftd3 executable or simple-dftd3 Python module.; gcp_engine (str) – Override which code computes the gcp correction. Now can use; classic gcp or mctc-gcp executables.; save_pairwise_disp (bool) – Whether to request atomic pairwise analysis. Methods Summary. compute_energy(molecule[, wfn]); Compute dispersion energy based on engine, dispersion level, and parameters in self. compute_gradient(molecule[, wfn]); Compute dispersion gradient based on engine, dispersion level, and parameters in self. compute_hessian(molecule[, wfn]); Compute dispersion Hessian based on engine, dispersion level, and parameters in self. print_out(); Format dispersion parameters of self for output file. Methods Documentation. compute_energy(molecule, wfn=None)[source]¶; Compute dispersion energy based on engine, dispersion level, and parameters in self. Parameters:. molecule (Molecule) – System for which to compute empirical dispersion correction.; wfn (Wavefunction) – Location to set QCVariables.",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.EmpiricalDispersion.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.EmpiricalDispersion.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energies_from_fcidump.html:776,Deployability,update,updated,776,"﻿. energies_from_fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. energies_from_fcidump¶. psi4.driver.energies_from_fcidump(intdump)[source]¶; From integrals dictionary generated from fcidump_from_file(),; compute energies. Return type:; Dict[str, float]. Returns:; a dictionary with energies. ’NUCLEAR REPULSION ENERGY’; ’ONE-ELECTRON ENERGY’; ’TWO-ELECTRON ENERGY’; ’SCF TOTAL ENERGY’; ’MP2 CORRELATION ENERGY’. table of contents. energies_from_fcidump; energies_from_fcidump(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energies_from_fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energies_from_fcidump.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energies_from_fcidump.html:400,Energy Efficiency,ENERGY,ENERGY,400,"﻿. energies_from_fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. energies_from_fcidump¶. psi4.driver.energies_from_fcidump(intdump)[source]¶; From integrals dictionary generated from fcidump_from_file(),; compute energies. Return type:; Dict[str, float]. Returns:; a dictionary with energies. ’NUCLEAR REPULSION ENERGY’; ’ONE-ELECTRON ENERGY’; ’TWO-ELECTRON ENERGY’; ’SCF TOTAL ENERGY’; ’MP2 CORRELATION ENERGY’. table of contents. energies_from_fcidump; energies_from_fcidump(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energies_from_fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energies_from_fcidump.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energies_from_fcidump.html:423,Energy Efficiency,ENERGY,ENERGY,423,"﻿. energies_from_fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. energies_from_fcidump¶. psi4.driver.energies_from_fcidump(intdump)[source]¶; From integrals dictionary generated from fcidump_from_file(),; compute energies. Return type:; Dict[str, float]. Returns:; a dictionary with energies. ’NUCLEAR REPULSION ENERGY’; ’ONE-ELECTRON ENERGY’; ’TWO-ELECTRON ENERGY’; ’SCF TOTAL ENERGY’; ’MP2 CORRELATION ENERGY’. table of contents. energies_from_fcidump; energies_from_fcidump(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energies_from_fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energies_from_fcidump.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energies_from_fcidump.html:446,Energy Efficiency,ENERGY,ENERGY,446,"﻿. energies_from_fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. energies_from_fcidump¶. psi4.driver.energies_from_fcidump(intdump)[source]¶; From integrals dictionary generated from fcidump_from_file(),; compute energies. Return type:; Dict[str, float]. Returns:; a dictionary with energies. ’NUCLEAR REPULSION ENERGY’; ’ONE-ELECTRON ENERGY’; ’TWO-ELECTRON ENERGY’; ’SCF TOTAL ENERGY’; ’MP2 CORRELATION ENERGY’. table of contents. energies_from_fcidump; energies_from_fcidump(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energies_from_fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energies_from_fcidump.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energies_from_fcidump.html:466,Energy Efficiency,ENERGY,ENERGY,466,"﻿. energies_from_fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. energies_from_fcidump¶. psi4.driver.energies_from_fcidump(intdump)[source]¶; From integrals dictionary generated from fcidump_from_file(),; compute energies. Return type:; Dict[str, float]. Returns:; a dictionary with energies. ’NUCLEAR REPULSION ENERGY’; ’ONE-ELECTRON ENERGY’; ’TWO-ELECTRON ENERGY’; ’SCF TOTAL ENERGY’; ’MP2 CORRELATION ENERGY’. table of contents. energies_from_fcidump; energies_from_fcidump(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energies_from_fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energies_from_fcidump.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energies_from_fcidump.html:492,Energy Efficiency,ENERGY,ENERGY,492,"﻿. energies_from_fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. energies_from_fcidump¶. psi4.driver.energies_from_fcidump(intdump)[source]¶; From integrals dictionary generated from fcidump_from_file(),; compute energies. Return type:; Dict[str, float]. Returns:; a dictionary with energies. ’NUCLEAR REPULSION ENERGY’; ’ONE-ELECTRON ENERGY’; ’TWO-ELECTRON ENERGY’; ’SCF TOTAL ENERGY’; ’MP2 CORRELATION ENERGY’. table of contents. energies_from_fcidump; energies_from_fcidump(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energies_from_fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energies_from_fcidump.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:5359,Deployability,configurat,configuration,5359,"s]. fno-lccd; LCCD with frozen natural orbitals [manual]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. bccd; Brueckner coupled cluster doubles (BCCD) [manual] [details]. fno-ccsd; CCSD with frozen natural orbitals [manual]. qcisd(t); QCISD with perturbative triples [manual] [details]. fno-qcisd(t); QCISD(T) with frozen natural orbitals [manual]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. a-ccsd(t); CCSD with asymmetric perturbative triples (A-CCSD(T)) [manual] [details]. bccd(t); BCCD with perturbative triples [manual] [details]. fno-ccsd(t); CCSD(T) with frozen natural orbitals [manual]. cc3; approximate CC singles, doubles, and triples (CC3) [manual] [details]. ccenergy; expert full control over ccenergy module. cisd; configuration interaction (CI) singles and doubles (CISD) [manual] [details]. fno-cisd; CISD with frozen natural orbitals [manual]. cisdt; CI singles, doubles, and triples (CISDT) [manual]. cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ) [manual]. cin; nth-order CI [manual] [details]. fci; full configuration interaction (FCI) [manual] [details]. detci; expert full control over detci module. gaussian-2, g2; Gaussian-2 composite method [manual]. casscf; complete active space self consistent field (CASSCF) [manual]. rasscf; restricted active space self consistent field (RASSCF) [manual]. mcscf; multiconfigurational self consistent field (SCF) [manual]. psimrcc; Mukherjee multireference coupled cluster (Mk-MRCC) [manual]. psimrcc_scf; Mk-MRCC with regular SCF module (convenience function) [manual]. dmrg-scf; (with CheMPS2) density matrix renormalization group SCF [manual]. dmrg-caspt2; (with CheMPS2) density matrix renormalization group CASPT2 [manual]. dmrg-ci; (with CheMPS2) density matrix renormalization gr",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:5669,Deployability,configurat,configuration,5669,"ual] [details]. bccd; Brueckner coupled cluster doubles (BCCD) [manual] [details]. fno-ccsd; CCSD with frozen natural orbitals [manual]. qcisd(t); QCISD with perturbative triples [manual] [details]. fno-qcisd(t); QCISD(T) with frozen natural orbitals [manual]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. a-ccsd(t); CCSD with asymmetric perturbative triples (A-CCSD(T)) [manual] [details]. bccd(t); BCCD with perturbative triples [manual] [details]. fno-ccsd(t); CCSD(T) with frozen natural orbitals [manual]. cc3; approximate CC singles, doubles, and triples (CC3) [manual] [details]. ccenergy; expert full control over ccenergy module. cisd; configuration interaction (CI) singles and doubles (CISD) [manual] [details]. fno-cisd; CISD with frozen natural orbitals [manual]. cisdt; CI singles, doubles, and triples (CISDT) [manual]. cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ) [manual]. cin; nth-order CI [manual] [details]. fci; full configuration interaction (FCI) [manual] [details]. detci; expert full control over detci module. gaussian-2, g2; Gaussian-2 composite method [manual]. casscf; complete active space self consistent field (CASSCF) [manual]. rasscf; restricted active space self consistent field (RASSCF) [manual]. mcscf; multiconfigurational self consistent field (SCF) [manual]. psimrcc; Mukherjee multireference coupled cluster (Mk-MRCC) [manual]. psimrcc_scf; Mk-MRCC with regular SCF module (convenience function) [manual]. dmrg-scf; (with CheMPS2) density matrix renormalization group SCF [manual]. dmrg-caspt2; (with CheMPS2) density matrix renormalization group CASPT2 [manual]. dmrg-ci; (with CheMPS2) density matrix renormalization group CI [manual]. sapt0; 0th-order symmetry adapted perturbation theory (SAPT) [manual]. ssapt0; 0th-order SAPT with special exchange scaling [manual]. fisapt0; 0th-order functional and/or intramolecular SAPT [manual]. sf-sapt; 0th-order spin-flip SAPT [manual]. sapt(dft); 0th-order SAPT upon KS",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:38022,Deployability,update,updated,38022,"C singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). table of contents. energy; energy(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energy. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:3,Energy Efficiency,energy,energy,3,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energy. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:; float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. write_orbitals (str, boolean) – filename || \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; (str) Save wfn containing current orbitals to the given file name after each SCF iteration; and retain after PSI4 finishes.; (boolean) Turns writing the orbitals after the converged SCF on/off.; Orbital file will be deleted unless PSI4 is called with -m flag. restart_file (str) – ['file.1, file.32] || ./file || etc.; Existing files to be renamed and copied for calculation restart, e.g. a serialized wfn or module-specific binary data. name; calls method. efp; (with LibEFP) effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. qchf; quadratically-convergent HF. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. scs-mp2; spin-",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:115,Energy Efficiency,energy,energy,115,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energy. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:; float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. write_orbitals (str, boolean) – filename || \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; (str) Save wfn containing current orbitals to the given file name after each SCF iteration; and retain after PSI4 finishes.; (boolean) Turns writing the orbitals after the converged SCF on/off.; Orbital file will be deleted unless PSI4 is called with -m flag. restart_file (str) – ['file.1, file.32] || ./file || etc.; Existing files to be renamed and copied for calculation restart, e.g. a serialized wfn or module-specific binary data. name; calls method. efp; (with LibEFP) effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. qchf; quadratically-convergent HF. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. scs-mp2; spin-",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:123,Energy Efficiency,energy,energy,123,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energy. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:; float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. write_orbitals (str, boolean) – filename || \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; (str) Save wfn containing current orbitals to the given file name after each SCF iteration; and retain after PSI4 finishes.; (boolean) Turns writing the orbitals after the converged SCF on/off.; Orbital file will be deleted unless PSI4 is called with -m flag. restart_file (str) – ['file.1, file.32] || ./file || etc.; Existing files to be renamed and copied for calculation restart, e.g. a serialized wfn or module-specific binary data. name; calls method. efp; (with LibEFP) effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. qchf; quadratically-convergent HF. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. scs-mp2; spin-",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:144,Energy Efficiency,energy,energy,144,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energy. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:; float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. write_orbitals (str, boolean) – filename || \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; (str) Save wfn containing current orbitals to the given file name after each SCF iteration; and retain after PSI4 finishes.; (boolean) Turns writing the orbitals after the converged SCF on/off.; Orbital file will be deleted unless PSI4 is called with -m flag. restart_file (str) – ['file.1, file.32] || ./file || etc.; Existing files to be renamed and copied for calculation restart, e.g. a serialized wfn or module-specific binary data. name; calls method. efp; (with LibEFP) effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. qchf; quadratically-convergent HF. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. scs-mp2; spin-",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:225,Energy Efficiency,energy,energy,225,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energy. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:; float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. write_orbitals (str, boolean) – filename || \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; (str) Save wfn containing current orbitals to the given file name after each SCF iteration; and retain after PSI4 finishes.; (boolean) Turns writing the orbitals after the converged SCF on/off.; Orbital file will be deleted unless PSI4 is called with -m flag. restart_file (str) – ['file.1, file.32] || ./file || etc.; Existing files to be renamed and copied for calculation restart, e.g. a serialized wfn or module-specific binary data. name; calls method. efp; (with LibEFP) effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. qchf; quadratically-convergent HF. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. scs-mp2; spin-",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:268,Energy Efficiency,energy,energy,268,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energy. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:; float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. write_orbitals (str, boolean) – filename || \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; (str) Save wfn containing current orbitals to the given file name after each SCF iteration; and retain after PSI4 finishes.; (boolean) Turns writing the orbitals after the converged SCF on/off.; Orbital file will be deleted unless PSI4 is called with -m flag. restart_file (str) – ['file.1, file.32] || ./file || etc.; Existing files to be renamed and copied for calculation restart, e.g. a serialized wfn or module-specific binary data. name; calls method. efp; (with LibEFP) effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. qchf; quadratically-convergent HF. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. scs-mp2; spin-",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:318,Energy Efficiency,energy,energy,318,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energy. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:; float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. write_orbitals (str, boolean) – filename || \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; (str) Save wfn containing current orbitals to the given file name after each SCF iteration; and retain after PSI4 finishes.; (boolean) Turns writing the orbitals after the converged SCF on/off.; Orbital file will be deleted unless PSI4 is called with -m flag. restart_file (str) – ['file.1, file.32] || ./file || etc.; Existing files to be renamed and copied for calculation restart, e.g. a serialized wfn or module-specific binary data. name; calls method. efp; (with LibEFP) effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. qchf; quadratically-convergent HF. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. scs-mp2; spin-",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:360,Energy Efficiency,energy,energy,360,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energy. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:; float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. write_orbitals (str, boolean) – filename || \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; (str) Save wfn containing current orbitals to the given file name after each SCF iteration; and retain after PSI4 finishes.; (boolean) Turns writing the orbitals after the converged SCF on/off.; Orbital file will be deleted unless PSI4 is called with -m flag. restart_file (str) – ['file.1, file.32] || ./file || etc.; Existing files to be renamed and copied for calculation restart, e.g. a serialized wfn or module-specific binary data. name; calls method. efp; (with LibEFP) effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. qchf; quadratically-convergent HF. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. scs-mp2; spin-",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:435,Energy Efficiency,ENERGY,ENERGY,435,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energy. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:; float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. write_orbitals (str, boolean) – filename || \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; (str) Save wfn containing current orbitals to the given file name after each SCF iteration; and retain after PSI4 finishes.; (boolean) Turns writing the orbitals after the converged SCF on/off.; Orbital file will be deleted unless PSI4 is called with -m flag. restart_file (str) – ['file.1, file.32] || ./file || etc.; Existing files to be renamed and copied for calculation restart, e.g. a serialized wfn or module-specific binary data. name; calls method. efp; (with LibEFP) effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. qchf; quadratically-convergent HF. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. scs-mp2; spin-",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:461,Energy Efficiency,ENERGY,ENERGY,461,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energy. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:; float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. write_orbitals (str, boolean) – filename || \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; (str) Save wfn containing current orbitals to the given file name after each SCF iteration; and retain after PSI4 finishes.; (boolean) Turns writing the orbitals after the converged SCF on/off.; Orbital file will be deleted unless PSI4 is called with -m flag. restart_file (str) – ['file.1, file.32] || ./file || etc.; Existing files to be renamed and copied for calculation restart, e.g. a serialized wfn or module-specific binary data. name; calls method. efp; (with LibEFP) effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. qchf; quadratically-convergent HF. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. scs-mp2; spin-",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:489,Energy Efficiency,ENERGY,ENERGY,489,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energy. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:; float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. write_orbitals (str, boolean) – filename || \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; (str) Save wfn containing current orbitals to the given file name after each SCF iteration; and retain after PSI4 finishes.; (boolean) Turns writing the orbitals after the converged SCF on/off.; Orbital file will be deleted unless PSI4 is called with -m flag. restart_file (str) – ['file.1, file.32] || ./file || etc.; Existing files to be renamed and copied for calculation restart, e.g. a serialized wfn or module-specific binary data. name; calls method. efp; (with LibEFP) effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. qchf; quadratically-convergent HF. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. scs-mp2; spin-",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:919,Energy Efficiency,energy,energy,919,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energy. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:; float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. write_orbitals (str, boolean) – filename || \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; (str) Save wfn containing current orbitals to the given file name after each SCF iteration; and retain after PSI4 finishes.; (boolean) Turns writing the orbitals after the converged SCF on/off.; Orbital file will be deleted unless PSI4 is called with -m flag. restart_file (str) – ['file.1, file.32] || ./file || etc.; Existing files to be renamed and copied for calculation restart, e.g. a serialized wfn or module-specific binary data. name; calls method. efp; (with LibEFP) effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. qchf; quadratically-convergent HF. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. scs-mp2; spin-",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:6437,Energy Efficiency,adapt,adapted,6437,"; CISD with frozen natural orbitals [manual]. cisdt; CI singles, doubles, and triples (CISDT) [manual]. cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ) [manual]. cin; nth-order CI [manual] [details]. fci; full configuration interaction (FCI) [manual] [details]. detci; expert full control over detci module. gaussian-2, g2; Gaussian-2 composite method [manual]. casscf; complete active space self consistent field (CASSCF) [manual]. rasscf; restricted active space self consistent field (RASSCF) [manual]. mcscf; multiconfigurational self consistent field (SCF) [manual]. psimrcc; Mukherjee multireference coupled cluster (Mk-MRCC) [manual]. psimrcc_scf; Mk-MRCC with regular SCF module (convenience function) [manual]. dmrg-scf; (with CheMPS2) density matrix renormalization group SCF [manual]. dmrg-caspt2; (with CheMPS2) density matrix renormalization group CASPT2 [manual]. dmrg-ci; (with CheMPS2) density matrix renormalization group CI [manual]. sapt0; 0th-order symmetry adapted perturbation theory (SAPT) [manual]. ssapt0; 0th-order SAPT with special exchange scaling [manual]. fisapt0; 0th-order functional and/or intramolecular SAPT [manual]. sf-sapt; 0th-order spin-flip SAPT [manual]. sapt(dft); 0th-order SAPT upon KS reference [manual]. sapt2; 2nd-order SAPT, traditional definition [manual]. sapt2+; SAPT including all 2nd-order terms [manual]. sapt2+(3); SAPT including perturbative triples [manual]. sapt2+3; SAPT including all 3rd-order terms [manual]. sapt2+(ccd); SAPT2+ with CC-based dispersion [manual]. sapt2+(3)(ccd); SAPT2+(3) with CC-based dispersion [manual]. sapt2+3(ccd); SAPT2+3 with CC-based dispersion [manual]. sapt2+dmp2; SAPT including all 2nd-order terms and MP2 correction [manual]. sapt2+(3)dmp2; SAPT including perturbative triples and MP2 correction [manual]. sapt2+3dmp2; SAPT including all 3rd-order terms and MP2 correction [manual]. sapt2+(ccd)dmp2; SAPT2+ with CC-based dispersion and MP2 correction [manual]. sapt2+(3)(ccd)dmp2; SAPT2+(3) wi",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:7608,Energy Efficiency,charge,charge,7608,"f-sapt; 0th-order spin-flip SAPT [manual]. sapt(dft); 0th-order SAPT upon KS reference [manual]. sapt2; 2nd-order SAPT, traditional definition [manual]. sapt2+; SAPT including all 2nd-order terms [manual]. sapt2+(3); SAPT including perturbative triples [manual]. sapt2+3; SAPT including all 3rd-order terms [manual]. sapt2+(ccd); SAPT2+ with CC-based dispersion [manual]. sapt2+(3)(ccd); SAPT2+(3) with CC-based dispersion [manual]. sapt2+3(ccd); SAPT2+3 with CC-based dispersion [manual]. sapt2+dmp2; SAPT including all 2nd-order terms and MP2 correction [manual]. sapt2+(3)dmp2; SAPT including perturbative triples and MP2 correction [manual]. sapt2+3dmp2; SAPT including all 3rd-order terms and MP2 correction [manual]. sapt2+(ccd)dmp2; SAPT2+ with CC-based dispersion and MP2 correction [manual]. sapt2+(3)(ccd)dmp2; SAPT2+(3) with CC-based dispersion and MP2 correction [manual]. sapt2+3(ccd)dmp2; SAPT2+3 with CC-based dispersion and MP2 correction [manual]. sapt0-ct; 0th-order SAPT plus charge transfer (CT) calculation [manual]. sapt2-ct; SAPT2 plus CT [manual]. sapt2+-ct; SAPT2+ plus CT [manual]. sapt2+(3)-ct; SAPT2+(3) plus CT [manual]. sapt2+3-ct; SAPT2+3 plus CT [manual]. sapt2+(ccd)-ct; SAPT2+(CCD) plus CT [manual]. sapt2+(3)(ccd)-ct; SAPT2+(3)(CCD) plus CT [manual]. sapt2+3(ccd)-ct; SAPT2+3(CCD) plus CT [manual]. adc; 2nd-order algebraic diagrammatic construction (ADC), deprecated [manual]. adc(1); (with ADCC) 1st-order algebraic diagrammatic construction (ADC) [manual]. adc(2); (with ADCC) 2nd-order ADC [manual]. adc(2)-x; (with ADCC) extended 2nd-order ADC [manual]. adc(3); (with ADCC) 3rd-order ADC [manual]. cvs-adc(1); (with ADCC) core-valence separation (CVS) 1st-order ADC [manual]. cvs-adc(2); (with ADCC) CVS 2nd-order ADC [manual]. cvs-adc(2)-x; (with ADCC) CVS extended 2nd-order ADC [manual]. cvs-adc(3); (with ADCC) CVS 3rd-order ADC [manual]. ep2; 2nd-order electron propagator theory. eom-cc2; equation of motion (EOM) CC2 [manual]. eom-ccsd; EOM-CCSD [manual]",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:36394,Energy Efficiency,energy,energy,36394,". ccsdtq-3; CC through triples with iterative quadruples (all but the most expensive terms). ccsdtqp-3; CC through quadruples with iterative quintuples (all but the most expensive terms). ccsdtqph-3; CC through quintuples with iterative sextuples (all but the most expensive terms). name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:36420,Energy Efficiency,Charge,Charge-transfer,36420,"most expensive terms). ccsdtqph-3; CC through quintuples with iterative sextuples (all but the most expensive terms). name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:36626,Energy Efficiency,energy,energy,36626,"most expensive terms). ccsdtqph-3; CC through quintuples with iterative sextuples (all but the most expensive terms). name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:36693,Energy Efficiency,energy,energy,36693,"nd Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for mo",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:37010,Energy Efficiency,energy,energy,37010,"cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). table of contents. energy; energy(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energy. © Copyright 2007-",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:37128,Energy Efficiency,energy,energy,37128,"C singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). table of contents. energy; energy(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energy. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:37320,Energy Efficiency,energy,energy,37320,"C singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). table of contents. energy; energy(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energy. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:37357,Energy Efficiency,energy,energy,37357,"C singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). table of contents. energy; energy(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energy. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:37465,Energy Efficiency,energy,energy,37465,"C singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). table of contents. energy; energy(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energy. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:37713,Energy Efficiency,energy,energy,37713,"C singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). table of contents. energy; energy(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energy. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:37811,Energy Efficiency,energy,energy,37811,"C singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). table of contents. energy; energy(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energy. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:37819,Energy Efficiency,energy,energy,37819,"C singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). table of contents. energy; energy(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energy. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:37967,Energy Efficiency,energy,energy,37967,"C singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). table of contents. energy; energy(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energy. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:415,Modifiability,variab,variables,415,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energy. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:; float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. write_orbitals (str, boolean) – filename || \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; (str) Save wfn containing current orbitals to the given file name after each SCF iteration; and retain after PSI4 finishes.; (boolean) Turns writing the orbitals after the converged SCF on/off.; Orbital file will be deleted unless PSI4 is called with -m flag. restart_file (str) – ['file.1, file.32] || ./file || etc.; Existing files to be renamed and copied for calculation restart, e.g. a serialized wfn or module-specific binary data. name; calls method. efp; (with LibEFP) effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. qchf; quadratically-convergent HF. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. scs-mp2; spin-",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:5359,Modifiability,config,configuration,5359,"s]. fno-lccd; LCCD with frozen natural orbitals [manual]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. bccd; Brueckner coupled cluster doubles (BCCD) [manual] [details]. fno-ccsd; CCSD with frozen natural orbitals [manual]. qcisd(t); QCISD with perturbative triples [manual] [details]. fno-qcisd(t); QCISD(T) with frozen natural orbitals [manual]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. a-ccsd(t); CCSD with asymmetric perturbative triples (A-CCSD(T)) [manual] [details]. bccd(t); BCCD with perturbative triples [manual] [details]. fno-ccsd(t); CCSD(T) with frozen natural orbitals [manual]. cc3; approximate CC singles, doubles, and triples (CC3) [manual] [details]. ccenergy; expert full control over ccenergy module. cisd; configuration interaction (CI) singles and doubles (CISD) [manual] [details]. fno-cisd; CISD with frozen natural orbitals [manual]. cisdt; CI singles, doubles, and triples (CISDT) [manual]. cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ) [manual]. cin; nth-order CI [manual] [details]. fci; full configuration interaction (FCI) [manual] [details]. detci; expert full control over detci module. gaussian-2, g2; Gaussian-2 composite method [manual]. casscf; complete active space self consistent field (CASSCF) [manual]. rasscf; restricted active space self consistent field (RASSCF) [manual]. mcscf; multiconfigurational self consistent field (SCF) [manual]. psimrcc; Mukherjee multireference coupled cluster (Mk-MRCC) [manual]. psimrcc_scf; Mk-MRCC with regular SCF module (convenience function) [manual]. dmrg-scf; (with CheMPS2) density matrix renormalization group SCF [manual]. dmrg-caspt2; (with CheMPS2) density matrix renormalization group CASPT2 [manual]. dmrg-ci; (with CheMPS2) density matrix renormalization gr",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:5669,Modifiability,config,configuration,5669,"ual] [details]. bccd; Brueckner coupled cluster doubles (BCCD) [manual] [details]. fno-ccsd; CCSD with frozen natural orbitals [manual]. qcisd(t); QCISD with perturbative triples [manual] [details]. fno-qcisd(t); QCISD(T) with frozen natural orbitals [manual]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. a-ccsd(t); CCSD with asymmetric perturbative triples (A-CCSD(T)) [manual] [details]. bccd(t); BCCD with perturbative triples [manual] [details]. fno-ccsd(t); CCSD(T) with frozen natural orbitals [manual]. cc3; approximate CC singles, doubles, and triples (CC3) [manual] [details]. ccenergy; expert full control over ccenergy module. cisd; configuration interaction (CI) singles and doubles (CISD) [manual] [details]. fno-cisd; CISD with frozen natural orbitals [manual]. cisdt; CI singles, doubles, and triples (CISDT) [manual]. cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ) [manual]. cin; nth-order CI [manual] [details]. fci; full configuration interaction (FCI) [manual] [details]. detci; expert full control over detci module. gaussian-2, g2; Gaussian-2 composite method [manual]. casscf; complete active space self consistent field (CASSCF) [manual]. rasscf; restricted active space self consistent field (RASSCF) [manual]. mcscf; multiconfigurational self consistent field (SCF) [manual]. psimrcc; Mukherjee multireference coupled cluster (Mk-MRCC) [manual]. psimrcc_scf; Mk-MRCC with regular SCF module (convenience function) [manual]. dmrg-scf; (with CheMPS2) density matrix renormalization group SCF [manual]. dmrg-caspt2; (with CheMPS2) density matrix renormalization group CASPT2 [manual]. dmrg-ci; (with CheMPS2) density matrix renormalization group CI [manual]. sapt0; 0th-order symmetry adapted perturbation theory (SAPT) [manual]. ssapt0; 0th-order SAPT with special exchange scaling [manual]. fisapt0; 0th-order functional and/or intramolecular SAPT [manual]. sf-sapt; 0th-order spin-flip SAPT [manual]. sapt(dft); 0th-order SAPT upon KS",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:6437,Modifiability,adapt,adapted,6437,"; CISD with frozen natural orbitals [manual]. cisdt; CI singles, doubles, and triples (CISDT) [manual]. cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ) [manual]. cin; nth-order CI [manual] [details]. fci; full configuration interaction (FCI) [manual] [details]. detci; expert full control over detci module. gaussian-2, g2; Gaussian-2 composite method [manual]. casscf; complete active space self consistent field (CASSCF) [manual]. rasscf; restricted active space self consistent field (RASSCF) [manual]. mcscf; multiconfigurational self consistent field (SCF) [manual]. psimrcc; Mukherjee multireference coupled cluster (Mk-MRCC) [manual]. psimrcc_scf; Mk-MRCC with regular SCF module (convenience function) [manual]. dmrg-scf; (with CheMPS2) density matrix renormalization group SCF [manual]. dmrg-caspt2; (with CheMPS2) density matrix renormalization group CASPT2 [manual]. dmrg-ci; (with CheMPS2) density matrix renormalization group CI [manual]. sapt0; 0th-order symmetry adapted perturbation theory (SAPT) [manual]. ssapt0; 0th-order SAPT with special exchange scaling [manual]. fisapt0; 0th-order functional and/or intramolecular SAPT [manual]. sf-sapt; 0th-order spin-flip SAPT [manual]. sapt(dft); 0th-order SAPT upon KS reference [manual]. sapt2; 2nd-order SAPT, traditional definition [manual]. sapt2+; SAPT including all 2nd-order terms [manual]. sapt2+(3); SAPT including perturbative triples [manual]. sapt2+3; SAPT including all 3rd-order terms [manual]. sapt2+(ccd); SAPT2+ with CC-based dispersion [manual]. sapt2+(3)(ccd); SAPT2+(3) with CC-based dispersion [manual]. sapt2+3(ccd); SAPT2+3 with CC-based dispersion [manual]. sapt2+dmp2; SAPT including all 2nd-order terms and MP2 correction [manual]. sapt2+(3)dmp2; SAPT including perturbative triples and MP2 correction [manual]. sapt2+3dmp2; SAPT including all 3rd-order terms and MP2 correction [manual]. sapt2+(ccd)dmp2; SAPT2+ with CC-based dispersion and MP2 correction [manual]. sapt2+(3)(ccd)dmp2; SAPT2+(3) wi",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:8174,Modifiability,extend,extended,8174," sapt2+(3)dmp2; SAPT including perturbative triples and MP2 correction [manual]. sapt2+3dmp2; SAPT including all 3rd-order terms and MP2 correction [manual]. sapt2+(ccd)dmp2; SAPT2+ with CC-based dispersion and MP2 correction [manual]. sapt2+(3)(ccd)dmp2; SAPT2+(3) with CC-based dispersion and MP2 correction [manual]. sapt2+3(ccd)dmp2; SAPT2+3 with CC-based dispersion and MP2 correction [manual]. sapt0-ct; 0th-order SAPT plus charge transfer (CT) calculation [manual]. sapt2-ct; SAPT2 plus CT [manual]. sapt2+-ct; SAPT2+ plus CT [manual]. sapt2+(3)-ct; SAPT2+(3) plus CT [manual]. sapt2+3-ct; SAPT2+3 plus CT [manual]. sapt2+(ccd)-ct; SAPT2+(CCD) plus CT [manual]. sapt2+(3)(ccd)-ct; SAPT2+(3)(CCD) plus CT [manual]. sapt2+3(ccd)-ct; SAPT2+3(CCD) plus CT [manual]. adc; 2nd-order algebraic diagrammatic construction (ADC), deprecated [manual]. adc(1); (with ADCC) 1st-order algebraic diagrammatic construction (ADC) [manual]. adc(2); (with ADCC) 2nd-order ADC [manual]. adc(2)-x; (with ADCC) extended 2nd-order ADC [manual]. adc(3); (with ADCC) 3rd-order ADC [manual]. cvs-adc(1); (with ADCC) core-valence separation (CVS) 1st-order ADC [manual]. cvs-adc(2); (with ADCC) CVS 2nd-order ADC [manual]. cvs-adc(2)-x; (with ADCC) CVS extended 2nd-order ADC [manual]. cvs-adc(3); (with ADCC) CVS 3rd-order ADC [manual]. ep2; 2nd-order electron propagator theory. eom-cc2; equation of motion (EOM) CC2 [manual]. eom-ccsd; EOM-CCSD [manual]. eom-cc3; EOM-CC3 [manual]. name; calls method DFT [manual]. b1lyp; B1LYP Hyb-GGA Exchange-Correlation Functional. td-b1lyp; TDDFT B1LYP Hyb-GGA Exchange-Correlation Functional. b1lyp-d3bj2b. b1lyp-d3bjatm. b1lyp-d3zero2b. b1lyp-d3zeroatm. b1pw91; B1PW91 Hyb-GGA Exchange-Correlation Functional. td-b1pw91; TDDFT B1PW91 Hyb-GGA Exchange-Correlation Functional. b1wc; B1WC Hyb-GGA Exchange-Correlation Functional. td-b1wc; TDDFT B1WC Hyb-GGA Exchange-Correlation Functional. b2gpplyp; B2GPPLYP Double Hybrid Exchange-Correlation Functional. b2gpplyp-d3bj2b. b2gpply",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:8411,Modifiability,extend,extended,8411,"]. sapt2+(3)(ccd)dmp2; SAPT2+(3) with CC-based dispersion and MP2 correction [manual]. sapt2+3(ccd)dmp2; SAPT2+3 with CC-based dispersion and MP2 correction [manual]. sapt0-ct; 0th-order SAPT plus charge transfer (CT) calculation [manual]. sapt2-ct; SAPT2 plus CT [manual]. sapt2+-ct; SAPT2+ plus CT [manual]. sapt2+(3)-ct; SAPT2+(3) plus CT [manual]. sapt2+3-ct; SAPT2+3 plus CT [manual]. sapt2+(ccd)-ct; SAPT2+(CCD) plus CT [manual]. sapt2+(3)(ccd)-ct; SAPT2+(3)(CCD) plus CT [manual]. sapt2+3(ccd)-ct; SAPT2+3(CCD) plus CT [manual]. adc; 2nd-order algebraic diagrammatic construction (ADC), deprecated [manual]. adc(1); (with ADCC) 1st-order algebraic diagrammatic construction (ADC) [manual]. adc(2); (with ADCC) 2nd-order ADC [manual]. adc(2)-x; (with ADCC) extended 2nd-order ADC [manual]. adc(3); (with ADCC) 3rd-order ADC [manual]. cvs-adc(1); (with ADCC) core-valence separation (CVS) 1st-order ADC [manual]. cvs-adc(2); (with ADCC) CVS 2nd-order ADC [manual]. cvs-adc(2)-x; (with ADCC) CVS extended 2nd-order ADC [manual]. cvs-adc(3); (with ADCC) CVS 3rd-order ADC [manual]. ep2; 2nd-order electron propagator theory. eom-cc2; equation of motion (EOM) CC2 [manual]. eom-ccsd; EOM-CCSD [manual]. eom-cc3; EOM-CC3 [manual]. name; calls method DFT [manual]. b1lyp; B1LYP Hyb-GGA Exchange-Correlation Functional. td-b1lyp; TDDFT B1LYP Hyb-GGA Exchange-Correlation Functional. b1lyp-d3bj2b. b1lyp-d3bjatm. b1lyp-d3zero2b. b1lyp-d3zeroatm. b1pw91; B1PW91 Hyb-GGA Exchange-Correlation Functional. td-b1pw91; TDDFT B1PW91 Hyb-GGA Exchange-Correlation Functional. b1wc; B1WC Hyb-GGA Exchange-Correlation Functional. td-b1wc; TDDFT B1WC Hyb-GGA Exchange-Correlation Functional. b2gpplyp; B2GPPLYP Double Hybrid Exchange-Correlation Functional. b2gpplyp-d3bj2b. b2gpplyp-d3bjatm. b2gpplyp-d3zero2b. b2gpplyp-d3zeroatm. b2gpplyp-nl; B2GPPLYP Double Hybrid Exchange-Correlation Functional. b2plyp; B2PLYP Double Hybrid Exchange-Correlation Functional. b2plyp-d3bj2b. b2plyp-d3bjatm. b2plyp-d3mbj2b. b2ply",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:19008,Modifiability,Parameteriz,Parameterized,19008,p; KMLYP Hyb-GGA Exchange-Correlation Functional. td-kmlyp; TDDFT KMLYP Hyb-GGA Exchange-Correlation Functional. ksdt; KSDT Exchange-Correlation Functional. td-ksdt; TDDFT KSDT Exchange-Correlation Functional. kt2; KT2 GGA Exchange-Correlation Functional. td-kt2; TDDFT KT2 GGA Exchange-Correlation Functional. lc-bop; LC-BOP GGA Exchange-Correlation Functional. td-lc-bop; TDDFT LC-BOP GGA Exchange-Correlation Functional. lc-vv10; LC-VV10 GGA Exchange-Correlation Functional. td-lc-vv10; TDDFT LC-VV10 GGA Exchange-Correlation Functional. lda0; LDA0 Exchange-Correlation Functional. td-lda0; TDDFT LDA0 Exchange-Correlation Functional. lrc-wpbe; LRC-WPBE GGA Exchange-Correlation Functional. td-lrc-wpbe; TDDFT LRC-WPBE GGA Exchange-Correlation Functional. lrc-wpbeh; LRC-wPBEh Hyb-GGA Exchange-Correlation Functional. td-lrc-wpbeh; TDDFT LRC-wPBEh Hyb-GGA Exchange-Correlation Functional. m05; M05 Meta-GGA XC Functional. td-m05; TDDFT M05 Meta-GGA XC Functional. m05-2x; Heavily Parameterized Hybrid M05-2X Meta-GGA XC Functional. td-m05-2x; TDDFT Heavily Parameterized Hybrid M05-2X Meta-GGA XC Functional. m05-2x-d3zero2b. m05-2x-d3zeroatm. m05-d3zero2b. m05-d3zeroatm. m06; M06 Meta-GGA XC Functional. td-m06; TDDFT M06 Meta-GGA XC Functional. m06-2x; Hybrid M06-2X Meta-GGA XC Functional. td-m06-2x; TDDFT Hybrid M06-2X Meta-GGA XC Functional. m06-2x-d3zero2b. m06-2x-d3zeroatm. m06-d3zero2b. m06-d3zeroatm. m06-hf; Minnesota M06-HF Hybrid XC Functional. td-m06-hf; TDDFT Minnesota M06-HF Hybrid XC Functional. m06-hf-d3zero2b. m06-hf-d3zeroatm. m06-l; M06-L Meta-GGA XC Functional. td-m06-l; TDDFT M06-L Meta-GGA XC Functional. m06-l-d3zero2b. m06-l-d3zeroatm. m08-hx; Minnesota M08-HX Hybrid XC Functional. td-m08-hx; TDDFT Minnesota M08-HX Hybrid XC Functional. m08-hx-d3zero2b. m08-hx-d3zeroatm. m08-so; Minnesota M08-SO Hybrid XC Functional. td-m08-so; TDDFT Minnesota M08-SO Hybrid XC Functional. m11; M11 Meta-GGA XC Functional. td-m11; TDDFT M11 Meta-GGA XC Functional. m11-d3bj2b. m1,MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:19085,Modifiability,Parameteriz,Parameterized,19085,Hyb-GGA Exchange-Correlation Functional. ksdt; KSDT Exchange-Correlation Functional. td-ksdt; TDDFT KSDT Exchange-Correlation Functional. kt2; KT2 GGA Exchange-Correlation Functional. td-kt2; TDDFT KT2 GGA Exchange-Correlation Functional. lc-bop; LC-BOP GGA Exchange-Correlation Functional. td-lc-bop; TDDFT LC-BOP GGA Exchange-Correlation Functional. lc-vv10; LC-VV10 GGA Exchange-Correlation Functional. td-lc-vv10; TDDFT LC-VV10 GGA Exchange-Correlation Functional. lda0; LDA0 Exchange-Correlation Functional. td-lda0; TDDFT LDA0 Exchange-Correlation Functional. lrc-wpbe; LRC-WPBE GGA Exchange-Correlation Functional. td-lrc-wpbe; TDDFT LRC-WPBE GGA Exchange-Correlation Functional. lrc-wpbeh; LRC-wPBEh Hyb-GGA Exchange-Correlation Functional. td-lrc-wpbeh; TDDFT LRC-wPBEh Hyb-GGA Exchange-Correlation Functional. m05; M05 Meta-GGA XC Functional. td-m05; TDDFT M05 Meta-GGA XC Functional. m05-2x; Heavily Parameterized Hybrid M05-2X Meta-GGA XC Functional. td-m05-2x; TDDFT Heavily Parameterized Hybrid M05-2X Meta-GGA XC Functional. m05-2x-d3zero2b. m05-2x-d3zeroatm. m05-d3zero2b. m05-d3zeroatm. m06; M06 Meta-GGA XC Functional. td-m06; TDDFT M06 Meta-GGA XC Functional. m06-2x; Hybrid M06-2X Meta-GGA XC Functional. td-m06-2x; TDDFT Hybrid M06-2X Meta-GGA XC Functional. m06-2x-d3zero2b. m06-2x-d3zeroatm. m06-d3zero2b. m06-d3zeroatm. m06-hf; Minnesota M06-HF Hybrid XC Functional. td-m06-hf; TDDFT Minnesota M06-HF Hybrid XC Functional. m06-hf-d3zero2b. m06-hf-d3zeroatm. m06-l; M06-L Meta-GGA XC Functional. td-m06-l; TDDFT M06-L Meta-GGA XC Functional. m06-l-d3zero2b. m06-l-d3zeroatm. m08-hx; Minnesota M08-HX Hybrid XC Functional. td-m08-hx; TDDFT Minnesota M08-HX Hybrid XC Functional. m08-hx-d3zero2b. m08-hx-d3zeroatm. m08-so; Minnesota M08-SO Hybrid XC Functional. td-m08-so; TDDFT Minnesota M08-SO Hybrid XC Functional. m11; M11 Meta-GGA XC Functional. td-m11; TDDFT M11 Meta-GGA XC Functional. m11-d3bj2b. m11-d3bjatm. m11-d3zero2b. m11-d3zeroatm. m11-l; M11-L Meta-GGA XC Function,MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:3056,Performance,optimiz,optimized,3056,"eobase interactions [manual]. scs-mp2-vdw; a special version of SCS-MP2 (from ethene dimers) [manual]. sos-mp2; spin-opposite scaled MP2 [manual]. dlpno-mp2; local MP2 with pair natural orbital domains (DLPNO) [manual]. scs-dlpno-mp2; spin-component-scaled DLPNO MP2 [manual]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. fno-mp3; MP3 with frozen natural orbitals [manual]. scs-mp3; spin-component scaled MP3 [manual]. sos-pi-mp2; A special version of SOS-MP2 for pi systems [manual]. mp2.5; average of MP2 and MP3 [manual] [details]. mp4(sdq); 4th-order MP perturbation theory (MP4) less triples [manual] [details]. fno-mp4(sdq); MP4 (less triples) with frozen natural orbitals [manual]. mp4; full MP4 [manual] [details]. fno-mp4; full MP4 with frozen natural orbitals [manual]. mpn; nth-order Møller–Plesset (MP) perturbation theory [manual] [details]. zaptn; nth-order z-averaged perturbation theory (ZAPT) [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. scs-omp2; spin-component scaled OMP2 [manual]. sos-omp2; spin-opposite scaled OMP2 [manual]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. scs-omp3; spin-component scaled OMP3 [manual]. sos-omp3; spin-opposite scaled OMP3 [manual]. omp2.5; orbital-optimized MP2.5 [manual] [details]. lccsd, cepa(0); coupled electron pair approximation variant 0 [manual] [details]. fno-lccsd, fno-cepa(0); CEPA(0) with frozen natural orbitals [manual]. cepa(1); coupled electron pair approximation variant 1 [manual] [details]. fno-cepa(1); CEPA(1) with frozen natural orbitals [manual]. cepa(3); coupled electron pair approximation variant 3 [manual] [details]. fno-cepa(3); CEPA(3) with frozen natural orbitals [manual]. acpf; averaged coupled-pair functional [manual] [details]. fno-acpf; ACPF with frozen natural orbitals [manual]. aqcc; averaged quadratic coupled cluster [manual] [details]. fno-aqcc; AQCC with frozen natural orbitals [",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:3229,Performance,optimiz,optimized,3229," pair natural orbital domains (DLPNO) [manual]. scs-dlpno-mp2; spin-component-scaled DLPNO MP2 [manual]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. fno-mp3; MP3 with frozen natural orbitals [manual]. scs-mp3; spin-component scaled MP3 [manual]. sos-pi-mp2; A special version of SOS-MP2 for pi systems [manual]. mp2.5; average of MP2 and MP3 [manual] [details]. mp4(sdq); 4th-order MP perturbation theory (MP4) less triples [manual] [details]. fno-mp4(sdq); MP4 (less triples) with frozen natural orbitals [manual]. mp4; full MP4 [manual] [details]. fno-mp4; full MP4 with frozen natural orbitals [manual]. mpn; nth-order Møller–Plesset (MP) perturbation theory [manual] [details]. zaptn; nth-order z-averaged perturbation theory (ZAPT) [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. scs-omp2; spin-component scaled OMP2 [manual]. sos-omp2; spin-opposite scaled OMP2 [manual]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. scs-omp3; spin-component scaled OMP3 [manual]. sos-omp3; spin-opposite scaled OMP3 [manual]. omp2.5; orbital-optimized MP2.5 [manual] [details]. lccsd, cepa(0); coupled electron pair approximation variant 0 [manual] [details]. fno-lccsd, fno-cepa(0); CEPA(0) with frozen natural orbitals [manual]. cepa(1); coupled electron pair approximation variant 1 [manual] [details]. fno-cepa(1); CEPA(1) with frozen natural orbitals [manual]. cepa(3); coupled electron pair approximation variant 3 [manual] [details]. fno-cepa(3); CEPA(3) with frozen natural orbitals [manual]. acpf; averaged coupled-pair functional [manual] [details]. fno-acpf; ACPF with frozen natural orbitals [manual]. aqcc; averaged quadratic coupled cluster [manual] [details]. fno-aqcc; AQCC with frozen natural orbitals [manual]. qcisd; quadratic CI singles doubles (QCISD) [manual] [details]. fno-qcisd; QCISD with frozen natural orbitals [manual]. remp2; 2nd-order retaining-the-excitation-de",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:3403,Performance,optimiz,optimized,3403,"ory (MP3) [manual] [details]. fno-mp3; MP3 with frozen natural orbitals [manual]. scs-mp3; spin-component scaled MP3 [manual]. sos-pi-mp2; A special version of SOS-MP2 for pi systems [manual]. mp2.5; average of MP2 and MP3 [manual] [details]. mp4(sdq); 4th-order MP perturbation theory (MP4) less triples [manual] [details]. fno-mp4(sdq); MP4 (less triples) with frozen natural orbitals [manual]. mp4; full MP4 [manual] [details]. fno-mp4; full MP4 with frozen natural orbitals [manual]. mpn; nth-order Møller–Plesset (MP) perturbation theory [manual] [details]. zaptn; nth-order z-averaged perturbation theory (ZAPT) [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. scs-omp2; spin-component scaled OMP2 [manual]. sos-omp2; spin-opposite scaled OMP2 [manual]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. scs-omp3; spin-component scaled OMP3 [manual]. sos-omp3; spin-opposite scaled OMP3 [manual]. omp2.5; orbital-optimized MP2.5 [manual] [details]. lccsd, cepa(0); coupled electron pair approximation variant 0 [manual] [details]. fno-lccsd, fno-cepa(0); CEPA(0) with frozen natural orbitals [manual]. cepa(1); coupled electron pair approximation variant 1 [manual] [details]. fno-cepa(1); CEPA(1) with frozen natural orbitals [manual]. cepa(3); coupled electron pair approximation variant 3 [manual] [details]. fno-cepa(3); CEPA(3) with frozen natural orbitals [manual]. acpf; averaged coupled-pair functional [manual] [details]. fno-acpf; ACPF with frozen natural orbitals [manual]. aqcc; averaged quadratic coupled cluster [manual] [details]. fno-aqcc; AQCC with frozen natural orbitals [manual]. qcisd; quadratic CI singles doubles (QCISD) [manual] [details]. fno-qcisd; QCISD with frozen natural orbitals [manual]. remp2; 2nd-order retaining-the-excitation-degree MP hybrid perturbation theory [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. fno-lcc",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:4325,Performance,optimiz,optimized,4325,"nual]. sos-omp3; spin-opposite scaled OMP3 [manual]. omp2.5; orbital-optimized MP2.5 [manual] [details]. lccsd, cepa(0); coupled electron pair approximation variant 0 [manual] [details]. fno-lccsd, fno-cepa(0); CEPA(0) with frozen natural orbitals [manual]. cepa(1); coupled electron pair approximation variant 1 [manual] [details]. fno-cepa(1); CEPA(1) with frozen natural orbitals [manual]. cepa(3); coupled electron pair approximation variant 3 [manual] [details]. fno-cepa(3); CEPA(3) with frozen natural orbitals [manual]. acpf; averaged coupled-pair functional [manual] [details]. fno-acpf; ACPF with frozen natural orbitals [manual]. aqcc; averaged quadratic coupled cluster [manual] [details]. fno-aqcc; AQCC with frozen natural orbitals [manual]. qcisd; quadratic CI singles doubles (QCISD) [manual] [details]. fno-qcisd; QCISD with frozen natural orbitals [manual]. remp2; 2nd-order retaining-the-excitation-degree MP hybrid perturbation theory [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. fno-lccd; LCCD with frozen natural orbitals [manual]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. bccd; Brueckner coupled cluster doubles (BCCD) [manual] [details]. fno-ccsd; CCSD with frozen natural orbitals [manual]. qcisd(t); QCISD with perturbative triples [manual] [details]. fno-qcisd(t); QCISD(T) with frozen natural orbitals [manual]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. a-ccsd(t); CCSD with asymmetric perturbative triples (A-CCSD(T)) [manual] [details]. bccd(t); BCCD with perturbative triples [manual] [details]. fno-ccsd(t); CCSD(T) with frozen natural orbitals [manual]. cc3; approximate CC singles, doubles, and triples (CC3) [manual] [details]. ccenergy; expert full control ove",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:4467,Performance,optimiz,optimized,4467," approximation variant 0 [manual] [details]. fno-lccsd, fno-cepa(0); CEPA(0) with frozen natural orbitals [manual]. cepa(1); coupled electron pair approximation variant 1 [manual] [details]. fno-cepa(1); CEPA(1) with frozen natural orbitals [manual]. cepa(3); coupled electron pair approximation variant 3 [manual] [details]. fno-cepa(3); CEPA(3) with frozen natural orbitals [manual]. acpf; averaged coupled-pair functional [manual] [details]. fno-acpf; ACPF with frozen natural orbitals [manual]. aqcc; averaged quadratic coupled cluster [manual] [details]. fno-aqcc; AQCC with frozen natural orbitals [manual]. qcisd; quadratic CI singles doubles (QCISD) [manual] [details]. fno-qcisd; QCISD with frozen natural orbitals [manual]. remp2; 2nd-order retaining-the-excitation-degree MP hybrid perturbation theory [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. fno-lccd; LCCD with frozen natural orbitals [manual]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. bccd; Brueckner coupled cluster doubles (BCCD) [manual] [details]. fno-ccsd; CCSD with frozen natural orbitals [manual]. qcisd(t); QCISD with perturbative triples [manual] [details]. fno-qcisd(t); QCISD(T) with frozen natural orbitals [manual]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. a-ccsd(t); CCSD with asymmetric perturbative triples (A-CCSD(T)) [manual] [details]. bccd(t); BCCD with perturbative triples [manual] [details]. fno-ccsd(t); CCSD(T) with frozen natural orbitals [manual]. cc3; approximate CC singles, doubles, and triples (CC3) [manual] [details]. ccenergy; expert full control over ccenergy module. cisd; configuration interaction (CI) singles and doubles (CISD) [manual] [details]. fno-cisd; CISD with frozen natural orbi",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:31811,Performance,tune,tuned-cam-,31811, GGA Exchange-Correlation Functional. td-th1; TDDFT TH1 GGA Exchange-Correlation Functional. th2; TH2 GGA Exchange-Correlation Functional. td-th2; TDDFT TH2 GGA Exchange-Correlation Functional. th3; TH3 GGA Exchange-Correlation Functional. td-th3; TDDFT TH3 GGA Exchange-Correlation Functional. th4; TH4 GGA Exchange-Correlation Functional. td-th4; TDDFT TH4 GGA Exchange-Correlation Functional. tpss; TPSS Meta-GGA XC Functional. td-tpss; TDDFT TPSS Meta-GGA XC Functional. tpss-d3bj2b. tpss-d3bjatm. tpss-d3opatm. tpss-d3zero2b. tpss-d3zeroatm. tpss-nl; TPSS Meta-GGA XC Functional. tpssh; TPSSh Hyb-GGA Exchange-Correlation Functional. td-tpssh; TDDFT TPSSh Hyb-GGA Exchange-Correlation Functional. tpssh-d3bj2b. tpssh-d3bjatm. tpssh-d3opatm. tpssh-d3zero2b. tpssh-d3zeroatm. tpssh-nl; TPSSh-nl Hyb-GGA Exchange-Correlation Functional. tpsslyp1w; TPSSLYP1W GGA Exchange-Correlation Functional. td-tpsslyp1w; TDDFT TPSSLYP1W GGA Exchange-Correlation Functional. tuned-cam-b3lyp; TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional. td-tuned-cam-b3lyp; TDDFT TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional. vsxc; VSXC Meta-GGA XC Functional. td-vsxc; TDDFT VSXC Meta-GGA XC Functional. vv10; VV10 GGA Exchange-Correlation Functional. td-vv10; TDDFT VV10 GGA Exchange-Correlation Functional. wb97; wB97 GGA Exchange-Correlation Functional. td-wb97; TDDFT wB97 GGA Exchange-Correlation Functional. wb97m-d3bj. wb97m-v; wB97M-V Hyb-GGA Exchange-Correlation Functional. td-wb97m-v; TDDFT wB97M-V Hyb-GGA Exchange-Correlation Functional. wb97x; wB97X Hyb-GGA Exchange-Correlation Functional. td-wb97x; TDDFT wB97X Hyb-GGA Exchange-Correlation Functional. wb97x-d. wb97x-d3. wb97x-d3bj. wb97x-d3bjatm. wb97x-d3zero2b. wb97x-d3zeroatm. wb97x-v; wB97X-V Hyb-GGA Exchange-Correlation Functional. td-wb97x-v; TDDFT wB97X-V Hyb-GGA Exchange-Correlation Functional. wpbe; PBE SR-XC Functional (HJS Model). td-wpbe; TDDFT PBE SR-XC Functional (HJS Model). wpbe-d3bj2b. wpbe-d3bjatm. wpbe-d3mbj2b. wp,MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:31828,Performance,TUNE,TUNED-CAM-,31828, GGA Exchange-Correlation Functional. td-th1; TDDFT TH1 GGA Exchange-Correlation Functional. th2; TH2 GGA Exchange-Correlation Functional. td-th2; TDDFT TH2 GGA Exchange-Correlation Functional. th3; TH3 GGA Exchange-Correlation Functional. td-th3; TDDFT TH3 GGA Exchange-Correlation Functional. th4; TH4 GGA Exchange-Correlation Functional. td-th4; TDDFT TH4 GGA Exchange-Correlation Functional. tpss; TPSS Meta-GGA XC Functional. td-tpss; TDDFT TPSS Meta-GGA XC Functional. tpss-d3bj2b. tpss-d3bjatm. tpss-d3opatm. tpss-d3zero2b. tpss-d3zeroatm. tpss-nl; TPSS Meta-GGA XC Functional. tpssh; TPSSh Hyb-GGA Exchange-Correlation Functional. td-tpssh; TDDFT TPSSh Hyb-GGA Exchange-Correlation Functional. tpssh-d3bj2b. tpssh-d3bjatm. tpssh-d3opatm. tpssh-d3zero2b. tpssh-d3zeroatm. tpssh-nl; TPSSh-nl Hyb-GGA Exchange-Correlation Functional. tpsslyp1w; TPSSLYP1W GGA Exchange-Correlation Functional. td-tpsslyp1w; TDDFT TPSSLYP1W GGA Exchange-Correlation Functional. tuned-cam-b3lyp; TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional. td-tuned-cam-b3lyp; TDDFT TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional. vsxc; VSXC Meta-GGA XC Functional. td-vsxc; TDDFT VSXC Meta-GGA XC Functional. vv10; VV10 GGA Exchange-Correlation Functional. td-vv10; TDDFT VV10 GGA Exchange-Correlation Functional. wb97; wB97 GGA Exchange-Correlation Functional. td-wb97; TDDFT wB97 GGA Exchange-Correlation Functional. wb97m-d3bj. wb97m-v; wB97M-V Hyb-GGA Exchange-Correlation Functional. td-wb97m-v; TDDFT wB97M-V Hyb-GGA Exchange-Correlation Functional. wb97x; wB97X Hyb-GGA Exchange-Correlation Functional. td-wb97x; TDDFT wB97X Hyb-GGA Exchange-Correlation Functional. wb97x-d. wb97x-d3. wb97x-d3bj. wb97x-d3bjatm. wb97x-d3zero2b. wb97x-d3zeroatm. wb97x-v; wB97X-V Hyb-GGA Exchange-Correlation Functional. td-wb97x-v; TDDFT wB97X-V Hyb-GGA Exchange-Correlation Functional. wpbe; PBE SR-XC Functional (HJS Model). td-wpbe; TDDFT PBE SR-XC Functional (HJS Model). wpbe-d3bj2b. wpbe-d3bjatm. wpbe-d3mbj2b. wp,MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:31888,Performance,tune,tuned-cam-,31888,on Functional. th2; TH2 GGA Exchange-Correlation Functional. td-th2; TDDFT TH2 GGA Exchange-Correlation Functional. th3; TH3 GGA Exchange-Correlation Functional. td-th3; TDDFT TH3 GGA Exchange-Correlation Functional. th4; TH4 GGA Exchange-Correlation Functional. td-th4; TDDFT TH4 GGA Exchange-Correlation Functional. tpss; TPSS Meta-GGA XC Functional. td-tpss; TDDFT TPSS Meta-GGA XC Functional. tpss-d3bj2b. tpss-d3bjatm. tpss-d3opatm. tpss-d3zero2b. tpss-d3zeroatm. tpss-nl; TPSS Meta-GGA XC Functional. tpssh; TPSSh Hyb-GGA Exchange-Correlation Functional. td-tpssh; TDDFT TPSSh Hyb-GGA Exchange-Correlation Functional. tpssh-d3bj2b. tpssh-d3bjatm. tpssh-d3opatm. tpssh-d3zero2b. tpssh-d3zeroatm. tpssh-nl; TPSSh-nl Hyb-GGA Exchange-Correlation Functional. tpsslyp1w; TPSSLYP1W GGA Exchange-Correlation Functional. td-tpsslyp1w; TDDFT TPSSLYP1W GGA Exchange-Correlation Functional. tuned-cam-b3lyp; TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional. td-tuned-cam-b3lyp; TDDFT TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional. vsxc; VSXC Meta-GGA XC Functional. td-vsxc; TDDFT VSXC Meta-GGA XC Functional. vv10; VV10 GGA Exchange-Correlation Functional. td-vv10; TDDFT VV10 GGA Exchange-Correlation Functional. wb97; wB97 GGA Exchange-Correlation Functional. td-wb97; TDDFT wB97 GGA Exchange-Correlation Functional. wb97m-d3bj. wb97m-v; wB97M-V Hyb-GGA Exchange-Correlation Functional. td-wb97m-v; TDDFT wB97M-V Hyb-GGA Exchange-Correlation Functional. wb97x; wB97X Hyb-GGA Exchange-Correlation Functional. td-wb97x; TDDFT wB97X Hyb-GGA Exchange-Correlation Functional. wb97x-d. wb97x-d3. wb97x-d3bj. wb97x-d3bjatm. wb97x-d3zero2b. wb97x-d3zeroatm. wb97x-v; wB97X-V Hyb-GGA Exchange-Correlation Functional. td-wb97x-v; TDDFT wB97X-V Hyb-GGA Exchange-Correlation Functional. wpbe; PBE SR-XC Functional (HJS Model). td-wpbe; TDDFT PBE SR-XC Functional (HJS Model). wpbe-d3bj2b. wpbe-d3bjatm. wpbe-d3mbj2b. wpbe-d3mbjatm. wpbe-d3mzero2b. wpbe-d3mzeroatm. wpbe-d3zero2b. wpbe-d3zeroatm. wp,MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:31911,Performance,TUNE,TUNED-CAM-,31911,on Functional. th2; TH2 GGA Exchange-Correlation Functional. td-th2; TDDFT TH2 GGA Exchange-Correlation Functional. th3; TH3 GGA Exchange-Correlation Functional. td-th3; TDDFT TH3 GGA Exchange-Correlation Functional. th4; TH4 GGA Exchange-Correlation Functional. td-th4; TDDFT TH4 GGA Exchange-Correlation Functional. tpss; TPSS Meta-GGA XC Functional. td-tpss; TDDFT TPSS Meta-GGA XC Functional. tpss-d3bj2b. tpss-d3bjatm. tpss-d3opatm. tpss-d3zero2b. tpss-d3zeroatm. tpss-nl; TPSS Meta-GGA XC Functional. tpssh; TPSSh Hyb-GGA Exchange-Correlation Functional. td-tpssh; TDDFT TPSSh Hyb-GGA Exchange-Correlation Functional. tpssh-d3bj2b. tpssh-d3bjatm. tpssh-d3opatm. tpssh-d3zero2b. tpssh-d3zeroatm. tpssh-nl; TPSSh-nl Hyb-GGA Exchange-Correlation Functional. tpsslyp1w; TPSSLYP1W GGA Exchange-Correlation Functional. td-tpsslyp1w; TDDFT TPSSLYP1W GGA Exchange-Correlation Functional. tuned-cam-b3lyp; TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional. td-tuned-cam-b3lyp; TDDFT TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional. vsxc; VSXC Meta-GGA XC Functional. td-vsxc; TDDFT VSXC Meta-GGA XC Functional. vv10; VV10 GGA Exchange-Correlation Functional. td-vv10; TDDFT VV10 GGA Exchange-Correlation Functional. wb97; wB97 GGA Exchange-Correlation Functional. td-wb97; TDDFT wB97 GGA Exchange-Correlation Functional. wb97m-d3bj. wb97m-v; wB97M-V Hyb-GGA Exchange-Correlation Functional. td-wb97m-v; TDDFT wB97M-V Hyb-GGA Exchange-Correlation Functional. wb97x; wB97X Hyb-GGA Exchange-Correlation Functional. td-wb97x; TDDFT wB97X Hyb-GGA Exchange-Correlation Functional. wb97x-d. wb97x-d3. wb97x-d3bj. wb97x-d3bjatm. wb97x-d3zero2b. wb97x-d3zeroatm. wb97x-v; wB97X-V Hyb-GGA Exchange-Correlation Functional. td-wb97x-v; TDDFT wB97X-V Hyb-GGA Exchange-Correlation Functional. wpbe; PBE SR-XC Functional (HJS Model). td-wpbe; TDDFT PBE SR-XC Functional (HJS Model). wpbe-d3bj2b. wpbe-d3bjatm. wpbe-d3mbj2b. wpbe-d3mbjatm. wpbe-d3mzero2b. wpbe-d3mzeroatm. wpbe-d3zero2b. wpbe-d3zeroatm. wp,MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:37418,Performance,perform,perform,37418,"C singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). table of contents. energy; energy(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energy. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html:37520,Performance,perform,perform,37520,"C singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). table of contents. energy; energy(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energy. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.fchk.html:2062,Deployability,update,updated,2062,"k(wfn, filename, *, debug=False, strict_label=True)[source]¶; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. New in version 0.6. Returns:; None. Parameters:. wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file; filename (str) – destination file name for FCHK file; debug (bool) – returns a dictionary to aid with debugging; strict_label (bool) – If true set a density label compliant with what Gaussian would write. A warning will be printed if this is not possible.; Otherwise set the density label according to the method name. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods are general and limited, i.e., “Total SCF|MP2|CI|CC Density”,; PSI4 will try to find the right one for the current calculation. If strict_label=False the PSI4 method name will be used as label.; Not all theory modules in PSI4 are compatible with the FCHK writer.; A warning will be printed if a theory module is not supported.; Caution! For orbital-optimized correlated methods (e.g. DCT, OMP2) the ‘Orbital Energy’ field contains ambiguous data. Examples:. Parameters:. wfn (Wavefunction) – ; filename (str) – ; debug (bool) – ; strict_label (bool) – . >>> # [1] FCHK file for DFT calculation; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk'). >>> # [2] FCHK file for correlated densities; >>> E, wfn = gradient('ccsd', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk'). >>> # [2] Write FCHK file with non-standard label.; >>> E, wfn = gradient('mp2.5', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk', strict_label=False). table of contents. fchk; fchk(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; fchk. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.fchk.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.fchk.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.fchk.html:1299,Energy Efficiency,Energy,Energy,1299,"k(wfn, filename, *, debug=False, strict_label=True)[source]¶; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. New in version 0.6. Returns:; None. Parameters:. wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file; filename (str) – destination file name for FCHK file; debug (bool) – returns a dictionary to aid with debugging; strict_label (bool) – If true set a density label compliant with what Gaussian would write. A warning will be printed if this is not possible.; Otherwise set the density label according to the method name. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods are general and limited, i.e., “Total SCF|MP2|CI|CC Density”,; PSI4 will try to find the right one for the current calculation. If strict_label=False the PSI4 method name will be used as label.; Not all theory modules in PSI4 are compatible with the FCHK writer.; A warning will be printed if a theory module is not supported.; Caution! For orbital-optimized correlated methods (e.g. DCT, OMP2) the ‘Orbital Energy’ field contains ambiguous data. Examples:. Parameters:. wfn (Wavefunction) – ; filename (str) – ; debug (bool) – ; strict_label (bool) – . >>> # [1] FCHK file for DFT calculation; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk'). >>> # [2] FCHK file for correlated densities; >>> E, wfn = gradient('ccsd', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk'). >>> # [2] Write FCHK file with non-standard label.; >>> E, wfn = gradient('mp2.5', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk', strict_label=False). table of contents. fchk; fchk(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; fchk. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.fchk.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.fchk.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.fchk.html:1499,Energy Efficiency,energy,energy,1499,"k(wfn, filename, *, debug=False, strict_label=True)[source]¶; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. New in version 0.6. Returns:; None. Parameters:. wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file; filename (str) – destination file name for FCHK file; debug (bool) – returns a dictionary to aid with debugging; strict_label (bool) – If true set a density label compliant with what Gaussian would write. A warning will be printed if this is not possible.; Otherwise set the density label according to the method name. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods are general and limited, i.e., “Total SCF|MP2|CI|CC Density”,; PSI4 will try to find the right one for the current calculation. If strict_label=False the PSI4 method name will be used as label.; Not all theory modules in PSI4 are compatible with the FCHK writer.; A warning will be printed if a theory module is not supported.; Caution! For orbital-optimized correlated methods (e.g. DCT, OMP2) the ‘Orbital Energy’ field contains ambiguous data. Examples:. Parameters:. wfn (Wavefunction) – ; filename (str) – ; debug (bool) – ; strict_label (bool) – . >>> # [1] FCHK file for DFT calculation; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk'). >>> # [2] FCHK file for correlated densities; >>> E, wfn = gradient('ccsd', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk'). >>> # [2] Write FCHK file with non-standard label.; >>> E, wfn = gradient('mp2.5', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk', strict_label=False). table of contents. fchk; fchk(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; fchk. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.fchk.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.fchk.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.fchk.html:1240,Performance,optimiz,optimized,1240,"k(wfn, filename, *, debug=False, strict_label=True)[source]¶; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. New in version 0.6. Returns:; None. Parameters:. wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file; filename (str) – destination file name for FCHK file; debug (bool) – returns a dictionary to aid with debugging; strict_label (bool) – If true set a density label compliant with what Gaussian would write. A warning will be printed if this is not possible.; Otherwise set the density label according to the method name. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods are general and limited, i.e., “Total SCF|MP2|CI|CC Density”,; PSI4 will try to find the right one for the current calculation. If strict_label=False the PSI4 method name will be used as label.; Not all theory modules in PSI4 are compatible with the FCHK writer.; A warning will be printed if a theory module is not supported.; Caution! For orbital-optimized correlated methods (e.g. DCT, OMP2) the ‘Orbital Energy’ field contains ambiguous data. Examples:. Parameters:. wfn (Wavefunction) – ; filename (str) – ; debug (bool) – ; strict_label (bool) – . >>> # [1] FCHK file for DFT calculation; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk'). >>> # [2] FCHK file for correlated densities; >>> E, wfn = gradient('ccsd', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk'). >>> # [2] Write FCHK file with non-standard label.; >>> E, wfn = gradient('mp2.5', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk', strict_label=False). table of contents. fchk; fchk(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; fchk. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.fchk.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.fchk.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.fcidump.html:1394,Deployability,update,updated,1394,"﻿. fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump. fcidump¶. psi4.driver.fcidump(wfn, fname='INTDUMP', oe_ints=None)[source]¶; Save integrals to file in FCIDUMP format as defined in Comp. Phys. Commun. 54 75 (1989),; https://doi.org/10.1016/0010-4655(89)90033-7 .; Additional one-electron integrals, including orbital energies, can also be saved.; This latter format can be used with the HANDE QMC code but is not standard. Parameters:. wfn (Wavefunction) – Set of molecule, basis, orbitals from which to generate FCIDUMP file.; fname (str) – Name of the integrals file, defaults to INTDUMP.; oe_ints (Optional[List]) – List of additional one-electron integrals to save to file. So far only; EIGENVALUES is a valid option. Raises:; ValidationError – When SCF wavefunction is not RHF. Examples; >>> # [1] Save one- and two-electron integrals to standard FCIDUMP format; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn). >>> # [2] Save orbital energies, one- and two-electron integrals.; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn, oe_ints=['EIGENVALUES']). table of contents. fcidump; fcidump(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.fcidump.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.fcidump.html:956,Energy Efficiency,energy,energy,956,"﻿. fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump. fcidump¶. psi4.driver.fcidump(wfn, fname='INTDUMP', oe_ints=None)[source]¶; Save integrals to file in FCIDUMP format as defined in Comp. Phys. Commun. 54 75 (1989),; https://doi.org/10.1016/0010-4655(89)90033-7 .; Additional one-electron integrals, including orbital energies, can also be saved.; This latter format can be used with the HANDE QMC code but is not standard. Parameters:. wfn (Wavefunction) – Set of molecule, basis, orbitals from which to generate FCIDUMP file.; fname (str) – Name of the integrals file, defaults to INTDUMP.; oe_ints (Optional[List]) – List of additional one-electron integrals to save to file. So far only; EIGENVALUES is a valid option. Raises:; ValidationError – When SCF wavefunction is not RHF. Examples; >>> # [1] Save one- and two-electron integrals to standard FCIDUMP format; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn). >>> # [2] Save orbital energies, one- and two-electron integrals.; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn, oe_ints=['EIGENVALUES']). table of contents. fcidump; fcidump(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.fcidump.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.fcidump.html:1086,Energy Efficiency,energy,energy,1086,"﻿. fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump. fcidump¶. psi4.driver.fcidump(wfn, fname='INTDUMP', oe_ints=None)[source]¶; Save integrals to file in FCIDUMP format as defined in Comp. Phys. Commun. 54 75 (1989),; https://doi.org/10.1016/0010-4655(89)90033-7 .; Additional one-electron integrals, including orbital energies, can also be saved.; This latter format can be used with the HANDE QMC code but is not standard. Parameters:. wfn (Wavefunction) – Set of molecule, basis, orbitals from which to generate FCIDUMP file.; fname (str) – Name of the integrals file, defaults to INTDUMP.; oe_ints (Optional[List]) – List of additional one-electron integrals to save to file. So far only; EIGENVALUES is a valid option. Raises:; ValidationError – When SCF wavefunction is not RHF. Examples; >>> # [1] Save one- and two-electron integrals to standard FCIDUMP format; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn). >>> # [2] Save orbital energies, one- and two-electron integrals.; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn, oe_ints=['EIGENVALUES']). table of contents. fcidump; fcidump(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.fcidump.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.fcidump.html:806,Security,Validat,ValidationError,806,"﻿. fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump. fcidump¶. psi4.driver.fcidump(wfn, fname='INTDUMP', oe_ints=None)[source]¶; Save integrals to file in FCIDUMP format as defined in Comp. Phys. Commun. 54 75 (1989),; https://doi.org/10.1016/0010-4655(89)90033-7 .; Additional one-electron integrals, including orbital energies, can also be saved.; This latter format can be used with the HANDE QMC code but is not standard. Parameters:. wfn (Wavefunction) – Set of molecule, basis, orbitals from which to generate FCIDUMP file.; fname (str) – Name of the integrals file, defaults to INTDUMP.; oe_ints (Optional[List]) – List of additional one-electron integrals to save to file. So far only; EIGENVALUES is a valid option. Raises:; ValidationError – When SCF wavefunction is not RHF. Examples; >>> # [1] Save one- and two-electron integrals to standard FCIDUMP format; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn). >>> # [2] Save orbital energies, one- and two-electron integrals.; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn, oe_ints=['EIGENVALUES']). table of contents. fcidump; fcidump(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.fcidump.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.fcidump_from_file.html:1049,Deployability,update,updated,1049,"﻿. fcidump_from_file. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump_from_file. fcidump_from_file¶. psi4.driver.fcidump_from_file(fname)[source]¶; Function to read in a FCIDUMP file. Return type:; Dict[str, Any]. Returns:; a dictionary with FCIDUMP header and integrals. ’norb’ : number of basis functions; ’nelec’ : number of electrons; ’ms2’ : spin polarization of the system; ’isym’ : symmetry of state (if present in FCIDUMP); ’orbsym’ : list of symmetry labels of each orbital; ’uhf’ : whether restricted or unrestricted; ’enuc’ : nuclear repulsion plus frozen core energy; ’epsilon’ : orbital energies; ’hcore’ : core Hamiltonian; ’eri’ : electron-repulsion integrals. Parameters:; fname (str) – FCIDUMP file name. table of contents. fcidump_from_file; fcidump_from_file(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump_from_file. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.fcidump_from_file.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.fcidump_from_file.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.fcidump_from_file.html:636,Energy Efficiency,energy,energy,636,"﻿. fcidump_from_file. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump_from_file. fcidump_from_file¶. psi4.driver.fcidump_from_file(fname)[source]¶; Function to read in a FCIDUMP file. Return type:; Dict[str, Any]. Returns:; a dictionary with FCIDUMP header and integrals. ’norb’ : number of basis functions; ’nelec’ : number of electrons; ’ms2’ : spin polarization of the system; ’isym’ : symmetry of state (if present in FCIDUMP); ’orbsym’ : list of symmetry labels of each orbital; ’uhf’ : whether restricted or unrestricted; ’enuc’ : nuclear repulsion plus frozen core energy; ’epsilon’ : orbital energies; ’hcore’ : core Hamiltonian; ’eri’ : electron-repulsion integrals. Parameters:; fname (str) – FCIDUMP file name. table of contents. fcidump_from_file; fcidump_from_file(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump_from_file. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.fcidump_from_file.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.fcidump_from_file.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.find_approximate_string_matches.html:928,Deployability,update,updated,928,"﻿. find_approximate_string_matches. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; find_approximate_string_matches. find_approximate_string_matches¶. psi4.driver.find_approximate_string_matches(seq1, options, max_distance)[source]¶; Find list of approximate (within max_distance) matches to string seq1 among options. Parameters:. seq1 (str) – Target string to look for near matches to.; options (List[str]) – Alternatives among which to look for near matches to seq1.; max_distance (int) – Maximum Levenshtein distance from seq1 to return. Return type:; List[str]. table of contents. find_approximate_string_matches; find_approximate_string_matches(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; find_approximate_string_matches. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.find_approximate_string_matches.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.find_approximate_string_matches.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.freq.html:1412,Availability,avail,available,1412,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.freq.html:1473,Availability,avail,available,1473,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.freq.html:1876,Availability,avail,available,1876," be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> f",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.freq.html:1992,Availability,avail,availability,1992,"\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). table of contents. freq; freq(). «; hide menu. ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.freq.html:2207,Availability,avail,available,2207,"ython functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). table of contents. freq; freq(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; freq. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.freq.html:3143,Deployability,update,updated,3143,"ded (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). table of contents. freq; freq(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; freq. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.freq.html:283,Energy Efficiency,energy,energy,283,"﻿. freq. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; freq. freq¶. psi4.driver.freq(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availabil",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.freq.html:337,Energy Efficiency,energy,energy,337,"﻿. freq. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; freq. freq¶. psi4.driver.freq(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availabil",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.freq.html:810,Energy Efficiency,energy,energy,810,"﻿. freq. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; freq. freq¶. psi4.driver.freq(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availabil",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.freq.html:972,Energy Efficiency,energy,energy,972,"﻿. freq. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; freq. freq¶. psi4.driver.freq(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availabil",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.freq.html:1099,Energy Efficiency,energy,energy,1099,"freq. freq¶. psi4.driver.freq(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT)",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.freq.html:1372,Energy Efficiency,energy,energy,1372,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.freq.html:1027,Performance,perform,performed,1027,"﻿. freq. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; freq. freq¶. psi4.driver.freq(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availabil",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.freq.html:1121,Performance,perform,performs,1121,"freq. freq¶. psi4.driver.freq(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT)",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.freq.html:1527,Performance,perform,performed,1527,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.freq.html:2834,Performance,optimiz,optimize,2834,"ded (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). table of contents. freq; freq(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; freq. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.freq.html:876,Security,access,accessed,876,"﻿. freq. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; freq. freq¶. psi4.driver.freq(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availabil",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.freq.html:1075,Security,access,accesses,1075,"freq. freq¶. psi4.driver.freq(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT)",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequencies.html:1440,Availability,avail,available,1440,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequencies.html:1501,Availability,avail,available,1501,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequencies.html:1904,Availability,avail,available,1904," be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> f",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequencies.html:2020,Availability,avail,availability,2020,"\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). table of contents. frequencies; frequencies(). ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequencies.html:2235,Availability,avail,available,2235,"ython functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). table of contents. frequencies; frequencies(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; frequencies. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequencies.html:3192,Deployability,update,updated,3192,"ercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). table of contents. frequencies; frequencies(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; frequencies. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequencies.html:311,Energy Efficiency,energy,energy,311,"﻿. frequencies. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; frequencies. frequencies¶. psi4.driver.frequencies(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequencies.html:365,Energy Efficiency,energy,energy,365,"﻿. frequencies. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; frequencies. frequencies¶. psi4.driver.frequencies(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequencies.html:838,Energy Efficiency,energy,energy,838,"﻿. frequencies. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; frequencies. frequencies¶. psi4.driver.frequencies(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequencies.html:1000,Energy Efficiency,energy,energy,1000,"ncies. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; frequencies. frequencies¶. psi4.driver.frequencies(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences acc",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequencies.html:1127,Energy Efficiency,energy,energy,1127,"ies¶. psi4.driver.frequencies(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT)",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequencies.html:1400,Energy Efficiency,energy,energy,1400,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequencies.html:1055,Performance,perform,performed,1055,"ncies. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; frequencies. frequencies¶. psi4.driver.frequencies(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences acc",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequencies.html:1149,Performance,perform,performs,1149,"ies¶. psi4.driver.frequencies(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT)",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequencies.html:1555,Performance,perform,performed,1555,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequencies.html:2862,Performance,optimiz,optimize,2862,"ercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). table of contents. frequencies; frequencies(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; frequencies. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequencies.html:904,Security,access,accessed,904,"﻿. frequencies. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; frequencies. frequencies¶. psi4.driver.frequencies(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequencies.html:1103,Security,access,accesses,1103,"ies¶. psi4.driver.frequencies(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT)",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequency.html:1440,Availability,avail,available,1440,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequency.html:1501,Availability,avail,available,1501,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequency.html:1904,Availability,avail,available,1904," be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> f",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequency.html:2020,Availability,avail,availability,2020,"\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). table of contents. frequency; frequency(). «; h",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequency.html:2235,Availability,avail,available,2235,"ython functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). table of contents. frequency; frequency(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; frequency. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequency.html:3186,Deployability,update,updated,3186,"on Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). table of contents. frequency; frequency(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; frequency. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequency.html:311,Energy Efficiency,energy,energy,311,"﻿. frequency. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; frequency. frequency¶. psi4.driver.frequency(name, **kwargs)[source]¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequency.html:365,Energy Efficiency,energy,energy,365,"﻿. frequency. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; frequency. frequency¶. psi4.driver.frequency(name, **kwargs)[source]¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequency.html:838,Energy Efficiency,energy,energy,838,"﻿. frequency. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; frequency. frequency¶. psi4.driver.frequency(name, **kwargs)[source]¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequency.html:1000,Energy Efficiency,energy,energy,1000,"ncy. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; frequency. frequency¶. psi4.driver.frequency(name, **kwargs)[source]¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences acc",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequency.html:1127,Energy Efficiency,energy,energy,1127,"psi4.driver.frequency(name, **kwargs)[source]¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT)",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequency.html:1400,Energy Efficiency,energy,energy,1400,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequency.html:1055,Performance,perform,performed,1055,"ncy. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; frequency. frequency¶. psi4.driver.frequency(name, **kwargs)[source]¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences acc",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequency.html:1149,Performance,perform,performs,1149,"psi4.driver.frequency(name, **kwargs)[source]¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT)",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequency.html:1555,Performance,perform,performed,1555,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequency.html:2862,Performance,optimiz,optimize,2862,"on Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). table of contents. frequency; frequency(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; frequency. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequency.html:904,Security,access,accessed,904,"﻿. frequency. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; frequency. frequency¶. psi4.driver.frequency(name, **kwargs)[source]¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequency.html:1103,Security,access,accesses,1103,"psi4.driver.frequency(name, **kwargs)[source]¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT)",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.gdma.html:1065,Deployability,update,updated,1065,"﻿. gdma. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; gdma. gdma¶. psi4.driver.gdma(wfn, datafile='')[source]¶; Function to use wavefunction information in wfn and, if specified,; additional commands in filename to run GDMA analysis. New in version 0.6. Returns:; None. Parameters:. wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate DMA analysis; datafile (str) – optional control file (see GDMA manual) to peform more complicated DMA; analyses. If this option is used, the File keyword must be set to read; a filename.fchk, where filename is provided by WRITER_FILE_LABEL . Examples:. >>> # [1] DMA analysis from MP2 wavefunction. N.B. gradient must be requested to generate MP2 density.; >>> grad, wfn = gradient('mp2', return_wfn=True); >>> gdma(wfn). table of contents. gdma; gdma(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; gdma. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.gdma.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.geometry.html:709,Deployability,update,updated,709,"﻿. geometry. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; geometry. geometry¶. psi4.driver.geometry(geom, name='default')[source]¶; Function to create a molecule object of name name from the; geometry in string geom. Permitted for user use but deprecated; in driver in favor of explicit molecule-passing. Comments within; the string are filtered. Return type:; Molecule. Parameters:. geom (str) – ; name (str) – . table of contents. geometry; geometry(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; geometry. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.geometry.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.geometry.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.get_memory.html:485,Deployability,update,updated,485,"﻿. get_memory. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; get_memory. get_memory¶. psi4.driver.get_memory()[source]¶; Return the total memory allocation in bytes. Return type:; int. table of contents. get_memory; get_memory(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; get_memory. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.get_memory.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.get_memory.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.gradient.html:926,Deployability,update,updated,926,"﻿. gradient. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; gradient. gradient¶. psi4.driver.gradient(name, **kwargs)[source]¶; Function complementary to optimize(). Carries out one gradient pass,; deciding analytic or finite difference. Returns:; Matrix – Total electronic gradient in Hartrees/Bohr. Returns:; (Matrix, Wavefunction) – gradient and wavefunction when return_wfn specified. Examples:. >>> # [1] Single-point dft gradient getting the gradient; >>> # in file, core.Matrix, and np.array forms; >>> set gradient_write on; >>> G, wfn = gradient('b3lyp-d', return_wfn=True); >>> wfn.gradient().print_out(); >>> np.array(G). table of contents. gradient; gradient(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; gradient. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.gradient.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.gradient.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.gradient.html:211,Performance,optimiz,optimize,211,"﻿. gradient. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; gradient. gradient¶. psi4.driver.gradient(name, **kwargs)[source]¶; Function complementary to optimize(). Carries out one gradient pass,; deciding analytic or finite difference. Returns:; Matrix – Total electronic gradient in Hartrees/Bohr. Returns:; (Matrix, Wavefunction) – gradient and wavefunction when return_wfn specified. Examples:. >>> # [1] Single-point dft gradient getting the gradient; >>> # in file, core.Matrix, and np.array forms; >>> set gradient_write on; >>> G, wfn = gradient('b3lyp-d', return_wfn=True); >>> wfn.gradient().print_out(); >>> np.array(G). table of contents. gradient; gradient(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; gradient. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.gradient.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.gradient.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.hessian.html:1069,Deployability,update,updated,1069,"﻿. hessian. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; hessian. hessian¶. psi4.driver.hessian(name, **kwargs)[source]¶; Function complementary to frequency(). Computes force; constants, deciding analytic, finite difference of gradients, or; finite difference of energies. Returns:; Matrix – Total non-mass-weighted electronic Hessian in Hartrees/Bohr/Bohr. Returns:; (Matrix, Wavefunction) – Hessian and wavefunction when return_wfn specified. Examples:. >>> # [1] Frequency calculation without thermochemical analysis; >>> hessian('mp3'). >>> # [2] Frequency calc w/o thermo analysis getting the Hessian; >>> # in file, core.Matrix, and np.array forms; >>> set hessian_write on; >>> H, wfn = hessian('ccsd', return_wfn=True); >>> wfn.hessian().print_out(); >>> np.array(H). table of contents. hessian; hessian(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; hessian. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.hessian.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.hessian.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ipi_broker.html:412,Deployability,Configurat,Configuration,412,"﻿. ipi_broker. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ipi_broker. ipi_broker¶. psi4.driver.ipi_broker(LOT, molecule=None, serverdata=False, options=None)[source]¶; Runs IPIBroker to connect to i-PI (https://ipi-code.org/). Parameters:. LOT (str) – level of theory; molecule (Optional[Molecule]) – Initial molecule; serverdata (Union[str, bool]) – Configuration where to connect to ipi; options (Optional[Dict]) – any additional Psi4 options. Return type:; IPIBroker. table of contents. ipi_broker; ipi_broker(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ipi_broker. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.ipi_broker.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ipi_broker.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ipi_broker.html:774,Deployability,update,updated,774,"﻿. ipi_broker. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ipi_broker. ipi_broker¶. psi4.driver.ipi_broker(LOT, molecule=None, serverdata=False, options=None)[source]¶; Runs IPIBroker to connect to i-PI (https://ipi-code.org/). Parameters:. LOT (str) – level of theory; molecule (Optional[Molecule]) – Initial molecule; serverdata (Union[str, bool]) – Configuration where to connect to ipi; options (Optional[Dict]) – any additional Psi4 options. Return type:; IPIBroker. table of contents. ipi_broker; ipi_broker(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ipi_broker. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.ipi_broker.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ipi_broker.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ipi_broker.html:412,Modifiability,Config,Configuration,412,"﻿. ipi_broker. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ipi_broker. ipi_broker¶. psi4.driver.ipi_broker(LOT, molecule=None, serverdata=False, options=None)[source]¶; Runs IPIBroker to connect to i-PI (https://ipi-code.org/). Parameters:. LOT (str) – level of theory; molecule (Optional[Molecule]) – Initial molecule; serverdata (Union[str, bool]) – Configuration where to connect to ipi; options (Optional[Dict]) – any additional Psi4 options. Return type:; IPIBroker. table of contents. ipi_broker; ipi_broker(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ipi_broker. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.ipi_broker.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ipi_broker.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.levenshtein.html:580,Deployability,update,updated,580,"﻿. levenshtein. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; levenshtein. levenshtein¶. psi4.driver.levenshtein(seq1, seq2)[source]¶; Compute the Levenshtein distance between two strings. Parameters:. seq1 (str) – First string.; seq2 (str) – Second string. Return type:; int. table of contents. levenshtein; levenshtein(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; levenshtein. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.levenshtein.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.levenshtein.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.libint2_configuration.html:467,Deployability,configurat,configuration,467,"﻿. libint2_configuration. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; libint2_configuration. libint2_configuration¶. psi4.driver.libint2_configuration()[source]¶; Returns information on integral classes, derivatives, and AM from currently linked Libint2. Return type:; Dict[str, List[int]]. Returns:. Dictionary of integrals classes with values an array of max angular momentum per derivative level.; Usual configuration returns – {‘eri’: [5, 4, 3], ‘eri2’: [6, 5, 4], ‘eri3’: [6, 5, 4], ‘onebody’: [6, 5, 4]}. table of contents. libint2_configuration; libint2_configuration(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; libint2_configuration. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.libint2_configuration.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.libint2_configuration.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.libint2_configuration.html:846,Deployability,update,updated,846,"﻿. libint2_configuration. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; libint2_configuration. libint2_configuration¶. psi4.driver.libint2_configuration()[source]¶; Returns information on integral classes, derivatives, and AM from currently linked Libint2. Return type:; Dict[str, List[int]]. Returns:. Dictionary of integrals classes with values an array of max angular momentum per derivative level.; Usual configuration returns – {‘eri’: [5, 4, 3], ‘eri2’: [6, 5, 4], ‘eri3’: [6, 5, 4], ‘onebody’: [6, 5, 4]}. table of contents. libint2_configuration; libint2_configuration(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; libint2_configuration. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.libint2_configuration.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.libint2_configuration.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.libint2_configuration.html:467,Modifiability,config,configuration,467,"﻿. libint2_configuration. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; libint2_configuration. libint2_configuration¶. psi4.driver.libint2_configuration()[source]¶; Returns information on integral classes, derivatives, and AM from currently linked Libint2. Return type:; Dict[str, List[int]]. Returns:. Dictionary of integrals classes with values an array of max angular momentum per derivative level.; Usual configuration returns – {‘eri’: [5, 4, 3], ‘eri2’: [6, 5, 4], ‘eri3’: [6, 5, 4], ‘onebody’: [6, 5, 4]}. table of contents. libint2_configuration; libint2_configuration(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; libint2_configuration. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.libint2_configuration.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.libint2_configuration.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.libint2_print_out.html:490,Deployability,update,updated,490,"﻿. libint2_print_out. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; libint2_print_out. libint2_print_out¶. psi4.driver.libint2_print_out()[source]¶. Return type:; None. table of contents. libint2_print_out; libint2_print_out(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; libint2_print_out. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.libint2_print_out.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.libint2_print_out.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ManagedMethodError.html:226,Availability,Error,Error,226,"﻿. ManagedMethodError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ManagedMethodError. ManagedMethodError¶. exception psi4.driver.ManagedMethodError(circs)[source]¶; Error called when a requested level of theory and derivative level are; nominally available but not for the particular conditions (e.g., reference,; algorithm, active orbitals, QC module, etc.) requested. Parameters:; circs (List[str]) – List providing calling function name, level of theory, algorithm,; reference, QC module, and frozen-core/all-electron requested conditions. message¶; Human readable string describing the exception. stats¶; Dictionary of conditions for which method request was made.; Keys are:. driver : {“energy”, “gradient”, “hessian”, “properties”}; derivative_int : {0, 1, 2, “prop”}, integer representation of driver; method : str, model/method/level-of-theory; link : str, link address to table in docs; method_type : (str, str), raw value and str repr of governing variable and algorithm; reference : (str, str), raw value and str repr of reference type; qc_module : (str, str), raw value and str repr of targeted implementation; fcae : (str, str), raw value and str repr of all-electron/frozen-core status. table of contents. ManagedMethodError; ManagedMethodError; ManagedMethodError.message; ManagedMethodError.stats. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ManagedMethodError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.ManagedMethodError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ManagedMethodError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ManagedMethodError.html:308,Availability,avail,available,308,"﻿. ManagedMethodError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ManagedMethodError. ManagedMethodError¶. exception psi4.driver.ManagedMethodError(circs)[source]¶; Error called when a requested level of theory and derivative level are; nominally available but not for the particular conditions (e.g., reference,; algorithm, active orbitals, QC module, etc.) requested. Parameters:; circs (List[str]) – List providing calling function name, level of theory, algorithm,; reference, QC module, and frozen-core/all-electron requested conditions. message¶; Human readable string describing the exception. stats¶; Dictionary of conditions for which method request was made.; Keys are:. driver : {“energy”, “gradient”, “hessian”, “properties”}; derivative_int : {0, 1, 2, “prop”}, integer representation of driver; method : str, model/method/level-of-theory; link : str, link address to table in docs; method_type : (str, str), raw value and str repr of governing variable and algorithm; reference : (str, str), raw value and str repr of reference type; qc_module : (str, str), raw value and str repr of targeted implementation; fcae : (str, str), raw value and str repr of all-electron/frozen-core status. table of contents. ManagedMethodError; ManagedMethodError; ManagedMethodError.message; ManagedMethodError.stats. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ManagedMethodError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.ManagedMethodError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ManagedMethodError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ManagedMethodError.html:1580,Deployability,update,updated,1580,"﻿. ManagedMethodError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ManagedMethodError. ManagedMethodError¶. exception psi4.driver.ManagedMethodError(circs)[source]¶; Error called when a requested level of theory and derivative level are; nominally available but not for the particular conditions (e.g., reference,; algorithm, active orbitals, QC module, etc.) requested. Parameters:; circs (List[str]) – List providing calling function name, level of theory, algorithm,; reference, QC module, and frozen-core/all-electron requested conditions. message¶; Human readable string describing the exception. stats¶; Dictionary of conditions for which method request was made.; Keys are:. driver : {“energy”, “gradient”, “hessian”, “properties”}; derivative_int : {0, 1, 2, “prop”}, integer representation of driver; method : str, model/method/level-of-theory; link : str, link address to table in docs; method_type : (str, str), raw value and str repr of governing variable and algorithm; reference : (str, str), raw value and str repr of reference type; qc_module : (str, str), raw value and str repr of targeted implementation; fcae : (str, str), raw value and str repr of all-electron/frozen-core status. table of contents. ManagedMethodError; ManagedMethodError; ManagedMethodError.message; ManagedMethodError.stats. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ManagedMethodError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.ManagedMethodError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ManagedMethodError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ManagedMethodError.html:753,Energy Efficiency,energy,energy,753,"﻿. ManagedMethodError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ManagedMethodError. ManagedMethodError¶. exception psi4.driver.ManagedMethodError(circs)[source]¶; Error called when a requested level of theory and derivative level are; nominally available but not for the particular conditions (e.g., reference,; algorithm, active orbitals, QC module, etc.) requested. Parameters:; circs (List[str]) – List providing calling function name, level of theory, algorithm,; reference, QC module, and frozen-core/all-electron requested conditions. message¶; Human readable string describing the exception. stats¶; Dictionary of conditions for which method request was made.; Keys are:. driver : {“energy”, “gradient”, “hessian”, “properties”}; derivative_int : {0, 1, 2, “prop”}, integer representation of driver; method : str, model/method/level-of-theory; link : str, link address to table in docs; method_type : (str, str), raw value and str repr of governing variable and algorithm; reference : (str, str), raw value and str repr of reference type; qc_module : (str, str), raw value and str repr of targeted implementation; fcae : (str, str), raw value and str repr of all-electron/frozen-core status. table of contents. ManagedMethodError; ManagedMethodError; ManagedMethodError.message; ManagedMethodError.stats. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ManagedMethodError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.ManagedMethodError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ManagedMethodError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ManagedMethodError.html:604,Integrability,message,message,604,"﻿. ManagedMethodError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ManagedMethodError. ManagedMethodError¶. exception psi4.driver.ManagedMethodError(circs)[source]¶; Error called when a requested level of theory and derivative level are; nominally available but not for the particular conditions (e.g., reference,; algorithm, active orbitals, QC module, etc.) requested. Parameters:; circs (List[str]) – List providing calling function name, level of theory, algorithm,; reference, QC module, and frozen-core/all-electron requested conditions. message¶; Human readable string describing the exception. stats¶; Dictionary of conditions for which method request was made.; Keys are:. driver : {“energy”, “gradient”, “hessian”, “properties”}; derivative_int : {0, 1, 2, “prop”}, integer representation of driver; method : str, model/method/level-of-theory; link : str, link address to table in docs; method_type : (str, str), raw value and str repr of governing variable and algorithm; reference : (str, str), raw value and str repr of reference type; qc_module : (str, str), raw value and str repr of targeted implementation; fcae : (str, str), raw value and str repr of all-electron/frozen-core status. table of contents. ManagedMethodError; ManagedMethodError; ManagedMethodError.message; ManagedMethodError.stats. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ManagedMethodError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.ManagedMethodError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ManagedMethodError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ManagedMethodError.html:1340,Integrability,message,message,1340,"﻿. ManagedMethodError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ManagedMethodError. ManagedMethodError¶. exception psi4.driver.ManagedMethodError(circs)[source]¶; Error called when a requested level of theory and derivative level are; nominally available but not for the particular conditions (e.g., reference,; algorithm, active orbitals, QC module, etc.) requested. Parameters:; circs (List[str]) – List providing calling function name, level of theory, algorithm,; reference, QC module, and frozen-core/all-electron requested conditions. message¶; Human readable string describing the exception. stats¶; Dictionary of conditions for which method request was made.; Keys are:. driver : {“energy”, “gradient”, “hessian”, “properties”}; derivative_int : {0, 1, 2, “prop”}, integer representation of driver; method : str, model/method/level-of-theory; link : str, link address to table in docs; method_type : (str, str), raw value and str repr of governing variable and algorithm; reference : (str, str), raw value and str repr of reference type; qc_module : (str, str), raw value and str repr of targeted implementation; fcae : (str, str), raw value and str repr of all-electron/frozen-core status. table of contents. ManagedMethodError; ManagedMethodError; ManagedMethodError.message; ManagedMethodError.stats. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ManagedMethodError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.ManagedMethodError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ManagedMethodError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ManagedMethodError.html:1019,Modifiability,variab,variable,1019,"﻿. ManagedMethodError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ManagedMethodError. ManagedMethodError¶. exception psi4.driver.ManagedMethodError(circs)[source]¶; Error called when a requested level of theory and derivative level are; nominally available but not for the particular conditions (e.g., reference,; algorithm, active orbitals, QC module, etc.) requested. Parameters:; circs (List[str]) – List providing calling function name, level of theory, algorithm,; reference, QC module, and frozen-core/all-electron requested conditions. message¶; Human readable string describing the exception. stats¶; Dictionary of conditions for which method request was made.; Keys are:. driver : {“energy”, “gradient”, “hessian”, “properties”}; derivative_int : {0, 1, 2, “prop”}, integer representation of driver; method : str, model/method/level-of-theory; link : str, link address to table in docs; method_type : (str, str), raw value and str repr of governing variable and algorithm; reference : (str, str), raw value and str repr of reference type; qc_module : (str, str), raw value and str repr of targeted implementation; fcae : (str, str), raw value and str repr of all-electron/frozen-core status. table of contents. ManagedMethodError; ManagedMethodError; ManagedMethodError.message; ManagedMethodError.stats. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ManagedMethodError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.ManagedMethodError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ManagedMethodError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.mdi_run.html:758,Deployability,update,updated,758,"﻿. mdi_run. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; mdi_run. mdi_run¶. psi4.driver.mdi_run(scf_method, **kwargs)[source]¶; Begin functioning as an MDI (MolSSI driver interface) engine. Parameters:. scf_method (str) – Method (SCF or post-SCF) used when calculating energies or gradients.; molecule – The target molecule, if not the last molecule defined.; kwargs – Any additional arguments to pass to psi4.driver.energy() or; psi4.driver.gradient() computation. table of contents. mdi_run; mdi_run(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; mdi_run. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.mdi_run.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.mdi_run.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.mdi_run.html:476,Energy Efficiency,energy,energy,476,"﻿. mdi_run. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; mdi_run. mdi_run¶. psi4.driver.mdi_run(scf_method, **kwargs)[source]¶; Begin functioning as an MDI (MolSSI driver interface) engine. Parameters:. scf_method (str) – Method (SCF or post-SCF) used when calculating energies or gradients.; molecule – The target molecule, if not the last molecule defined.; kwargs – Any additional arguments to pass to psi4.driver.energy() or; psi4.driver.gradient() computation. table of contents. mdi_run; mdi_run(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; mdi_run. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.mdi_run.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.mdi_run.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.mdi_run.html:230,Integrability,interface,interface,230,"﻿. mdi_run. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; mdi_run. mdi_run¶. psi4.driver.mdi_run(scf_method, **kwargs)[source]¶; Begin functioning as an MDI (MolSSI driver interface) engine. Parameters:. scf_method (str) – Method (SCF or post-SCF) used when calculating energies or gradients.; molecule – The target molecule, if not the last molecule defined.; kwargs – Any additional arguments to pass to psi4.driver.energy() or; psi4.driver.gradient() computation. table of contents. mdi_run; mdi_run(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; mdi_run. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.mdi_run.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.mdi_run.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.message_box.html:762,Deployability,update,updated,762,"﻿. message_box. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. message_box¶. psi4.driver.message_box(message, max_width=80, min_width=30)[source]¶; Put a message string into a box for extra attention. Parameters:. message (str) – Message string to be boxed.; max_width (int) – Maximal character width of the box.; min_width (int) – Minimal character width of the box. Returns:; Box containing the message as a multiline string. Return type:; str. table of contents. message_box; message_box(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.message_box.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.message_box.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.message_box.html:171,Integrability,message,message,171,"﻿. message_box. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. message_box¶. psi4.driver.message_box(message, max_width=80, min_width=30)[source]¶; Put a message string into a box for extra attention. Parameters:. message (str) – Message string to be boxed.; max_width (int) – Maximal character width of the box.; min_width (int) – Minimal character width of the box. Returns:; Box containing the message as a multiline string. Return type:; str. table of contents. message_box; message_box(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.message_box.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.message_box.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.message_box.html:224,Integrability,message,message,224,"﻿. message_box. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. message_box¶. psi4.driver.message_box(message, max_width=80, min_width=30)[source]¶; Put a message string into a box for extra attention. Parameters:. message (str) – Message string to be boxed.; max_width (int) – Maximal character width of the box.; min_width (int) – Minimal character width of the box. Returns:; Box containing the message as a multiline string. Return type:; str. table of contents. message_box; message_box(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.message_box.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.message_box.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.message_box.html:284,Integrability,message,message,284,"﻿. message_box. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. message_box¶. psi4.driver.message_box(message, max_width=80, min_width=30)[source]¶; Put a message string into a box for extra attention. Parameters:. message (str) – Message string to be boxed.; max_width (int) – Maximal character width of the box.; min_width (int) – Minimal character width of the box. Returns:; Box containing the message as a multiline string. Return type:; str. table of contents. message_box; message_box(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.message_box.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.message_box.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.message_box.html:300,Integrability,Message,Message,300,"﻿. message_box. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. message_box¶. psi4.driver.message_box(message, max_width=80, min_width=30)[source]¶; Put a message string into a box for extra attention. Parameters:. message (str) – Message string to be boxed.; max_width (int) – Maximal character width of the box.; min_width (int) – Minimal character width of the box. Returns:; Box containing the message as a multiline string. Return type:; str. table of contents. message_box; message_box(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.message_box.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.message_box.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.message_box.html:467,Integrability,message,message,467,"﻿. message_box. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. message_box¶. psi4.driver.message_box(message, max_width=80, min_width=30)[source]¶; Put a message string into a box for extra attention. Parameters:. message (str) – Message string to be boxed.; max_width (int) – Maximal character width of the box.; min_width (int) – Minimal character width of the box. Returns:; Box containing the message as a multiline string. Return type:; str. table of contents. message_box; message_box(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.message_box.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.message_box.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.MissingMethodError.html:224,Availability,Error,Error,224,"﻿. MissingMethodError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; MissingMethodError. MissingMethodError¶. exception psi4.driver.MissingMethodError(msg)[source]¶; Error called when requested level or theory or derivative level are not; available. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. table of contents. MissingMethodError; MissingMethodError; MissingMethodError.message. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; MissingMethodError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.MissingMethodError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.MissingMethodError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.MissingMethodError.html:297,Availability,avail,available,297,"﻿. MissingMethodError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; MissingMethodError. MissingMethodError¶. exception psi4.driver.MissingMethodError(msg)[source]¶; Error called when requested level or theory or derivative level are not; available. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. table of contents. MissingMethodError; MissingMethodError; MissingMethodError.message. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; MissingMethodError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.MissingMethodError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.MissingMethodError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.MissingMethodError.html:731,Deployability,update,updated,731,"﻿. MissingMethodError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; MissingMethodError. MissingMethodError¶. exception psi4.driver.MissingMethodError(msg)[source]¶; Error called when requested level or theory or derivative level are not; available. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. table of contents. MissingMethodError; MissingMethodError; MissingMethodError.message. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; MissingMethodError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.MissingMethodError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.MissingMethodError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.MissingMethodError.html:381,Integrability,message,message,381,"﻿. MissingMethodError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; MissingMethodError. MissingMethodError¶. exception psi4.driver.MissingMethodError(msg)[source]¶; Error called when requested level or theory or derivative level are not; available. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. table of contents. MissingMethodError; MissingMethodError; MissingMethodError.message. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; MissingMethodError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.MissingMethodError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.MissingMethodError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.MissingMethodError.html:517,Integrability,message,message,517,"﻿. MissingMethodError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; MissingMethodError. MissingMethodError¶. exception psi4.driver.MissingMethodError(msg)[source]¶; Error called when requested level or theory or derivative level are not; available. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. table of contents. MissingMethodError; MissingMethodError; MissingMethodError.message. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; MissingMethodError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.MissingMethodError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.MissingMethodError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.molden.html:2876,Deployability,update,updated,2876,"onal); density_b (Matrix) – density in the MO basis to build beta NO’s from, assumes restricted if not supplied (optional); dovirtual (bool) – do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO’s (false) (optional). Examples:. Molden file with the Kohn-Sham orbitals of a DFT calculation.; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> molden(wfn, 'mycalc.molden'). Molden file for CI/MCSCF computation using NO roots.; Any method returning a CIWavefunction object will work: detci,; fci, casscf, etc. The first two arguments of get_opdm can be; set to n, n where n => 0 selects the root to write out, provided; these roots were computed, see NUM_ROOTS. The; third argument controls the spin (""A"", ""B"" or ""SUM"") and the final; boolean option determines whether inactive orbitals are included.; >>> E, wfn = energy('detci', return_wfn=True); >>> molden(wfn, 'no_root1.molden', density_a=wfn.get_opdm(0, 0, ""A"", True)). The following produces an INCORRECT Molden file, because the; molden function needs orbitals in the MO basis (which are internally; converted and written to the Molden file in the AO basis). The correct; usage is given in the next point.; >>> E, wfn = energy('ccsd', return_wfn=True); >>> molden(wfn, 'ccsd_no.molden', density_a=wfn.Da()). Molden file with the natural orbitals of the ground-state 1RDM of a; Post-HF calculation. Note the required transformation of Da (SO->MO).; >>> E, wfn = properties('ccsd', return_wfn=True); >>> Da_so = wfn.Da(); >>> SCa = core.doublet(wfn.S(), wfn.Ca(), False, False); >>> Da_mo = core.triplet(SCa, Da_so, SCa, True, False, False); >>> molden(wfn, 'ccsd_no.molden', density_a=Da_mo). table of contents. molden; molden(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; molden. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.molden.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.molden.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.molden.html:482,Energy Efficiency,energy,energy,482,"﻿. molden. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; molden. molden¶. psi4.driver.molden(wfn, filename=None, density_a=None, density_b=None, dovirtual=None)[source]¶; Function to write wavefunction information in wfn to filename in; molden format. Will write natural orbitals from density (MO basis) if supplied.; Warning! Most post-SCF Wavefunctions do not build the density as this is often; much more costly than the energy. In addition, the Wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns:; None. Parameters:. wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files; filename (str) – destination file name for MOLDEN file (optional); density_a (Matrix) – density in the MO basis to build alpha NO’s from (optional); density_b (Matrix) – density in the MO basis to build beta NO’s from, assumes restricted if not supplied (optional); dovirtual (bool) – do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO’s (false) (optional). Examples:. Molden file with the Kohn-Sham orbitals of a DFT calculation.; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> molden(wfn, 'mycalc.molden'). Molden file for CI/MCSCF computation using NO roots.; Any method returning a CIWavefunction object will work: detci,; fci, casscf, etc. The first two arguments of get_opdm can be; set to n, n where n => 0 selects the root to write out, provided; these roots were computed, see NUM_ROOTS. The; third argument controls the spin (""A"", ""B"" or ""SUM"") and the final; boolean option determines whether inactive orbitals are included.; >>> E, wfn = energy('detci', return_wfn=True); >>> molden(wfn, 'no_root1.molden', density_a=wfn.get_opdm(0, 0, ""A"", True)). The following produces an INCORRECT Molden file, because the; molden function n",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.molden.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.molden.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.molden.html:1302,Energy Efficiency,energy,energy,1302,"tural orbitals from density (MO basis) if supplied.; Warning! Most post-SCF Wavefunctions do not build the density as this is often; much more costly than the energy. In addition, the Wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns:; None. Parameters:. wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files; filename (str) – destination file name for MOLDEN file (optional); density_a (Matrix) – density in the MO basis to build alpha NO’s from (optional); density_b (Matrix) – density in the MO basis to build beta NO’s from, assumes restricted if not supplied (optional); dovirtual (bool) – do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO’s (false) (optional). Examples:. Molden file with the Kohn-Sham orbitals of a DFT calculation.; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> molden(wfn, 'mycalc.molden'). Molden file for CI/MCSCF computation using NO roots.; Any method returning a CIWavefunction object will work: detci,; fci, casscf, etc. The first two arguments of get_opdm can be; set to n, n where n => 0 selects the root to write out, provided; these roots were computed, see NUM_ROOTS. The; third argument controls the spin (""A"", ""B"" or ""SUM"") and the final; boolean option determines whether inactive orbitals are included.; >>> E, wfn = energy('detci', return_wfn=True); >>> molden(wfn, 'no_root1.molden', density_a=wfn.get_opdm(0, 0, ""A"", True)). The following produces an INCORRECT Molden file, because the; molden function needs orbitals in the MO basis (which are internally; converted and written to the Molden file in the AO basis). The correct; usage is given in the next point.; >>> E, wfn = energy('ccsd', return_wfn=True); >>> molden(wfn, 'ccsd_no.molden', density_a=wfn.Da()). Molden file with the natural orbitals of the ground-state 1RDM",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.molden.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.molden.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.molden.html:1811,Energy Efficiency,energy,energy,1811,"tination file name for MOLDEN file (optional); density_a (Matrix) – density in the MO basis to build alpha NO’s from (optional); density_b (Matrix) – density in the MO basis to build beta NO’s from, assumes restricted if not supplied (optional); dovirtual (bool) – do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO’s (false) (optional). Examples:. Molden file with the Kohn-Sham orbitals of a DFT calculation.; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> molden(wfn, 'mycalc.molden'). Molden file for CI/MCSCF computation using NO roots.; Any method returning a CIWavefunction object will work: detci,; fci, casscf, etc. The first two arguments of get_opdm can be; set to n, n where n => 0 selects the root to write out, provided; these roots were computed, see NUM_ROOTS. The; third argument controls the spin (""A"", ""B"" or ""SUM"") and the final; boolean option determines whether inactive orbitals are included.; >>> E, wfn = energy('detci', return_wfn=True); >>> molden(wfn, 'no_root1.molden', density_a=wfn.get_opdm(0, 0, ""A"", True)). The following produces an INCORRECT Molden file, because the; molden function needs orbitals in the MO basis (which are internally; converted and written to the Molden file in the AO basis). The correct; usage is given in the next point.; >>> E, wfn = energy('ccsd', return_wfn=True); >>> molden(wfn, 'ccsd_no.molden', density_a=wfn.Da()). Molden file with the natural orbitals of the ground-state 1RDM of a; Post-HF calculation. Note the required transformation of Da (SO->MO).; >>> E, wfn = properties('ccsd', return_wfn=True); >>> Da_so = wfn.Da(); >>> SCa = core.doublet(wfn.S(), wfn.Ca(), False, False); >>> Da_mo = core.triplet(SCa, Da_so, SCa, True, False, False); >>> molden(wfn, 'ccsd_no.molden', density_a=Da_mo). table of contents. molden; molden(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; molden. © Cop",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.molden.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.molden.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.molden.html:2174,Energy Efficiency,energy,energy,2174,"onal); density_b (Matrix) – density in the MO basis to build beta NO’s from, assumes restricted if not supplied (optional); dovirtual (bool) – do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO’s (false) (optional). Examples:. Molden file with the Kohn-Sham orbitals of a DFT calculation.; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> molden(wfn, 'mycalc.molden'). Molden file for CI/MCSCF computation using NO roots.; Any method returning a CIWavefunction object will work: detci,; fci, casscf, etc. The first two arguments of get_opdm can be; set to n, n where n => 0 selects the root to write out, provided; these roots were computed, see NUM_ROOTS. The; third argument controls the spin (""A"", ""B"" or ""SUM"") and the final; boolean option determines whether inactive orbitals are included.; >>> E, wfn = energy('detci', return_wfn=True); >>> molden(wfn, 'no_root1.molden', density_a=wfn.get_opdm(0, 0, ""A"", True)). The following produces an INCORRECT Molden file, because the; molden function needs orbitals in the MO basis (which are internally; converted and written to the Molden file in the AO basis). The correct; usage is given in the next point.; >>> E, wfn = energy('ccsd', return_wfn=True); >>> molden(wfn, 'ccsd_no.molden', density_a=wfn.Da()). Molden file with the natural orbitals of the ground-state 1RDM of a; Post-HF calculation. Note the required transformation of Da (SO->MO).; >>> E, wfn = properties('ccsd', return_wfn=True); >>> Da_so = wfn.Da(); >>> SCa = core.doublet(wfn.S(), wfn.Ca(), False, False); >>> Da_mo = core.triplet(SCa, Da_so, SCa, True, False, False); >>> molden(wfn, 'ccsd_no.molden', density_a=Da_mo). table of contents. molden; molden(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; molden. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.molden.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.molden.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.molecule_get_attr.html:539,Deployability,update,updated,539,"﻿. molecule_get_attr. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; molecule_get_attr. molecule_get_attr¶. psi4.driver.molecule_get_attr(self, name)[source]¶; Function to redefine __getattr__ method of molecule class. table of contents. molecule_get_attr; molecule_get_attr(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; molecule_get_attr. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.molecule_get_attr.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.molecule_get_attr.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.molecule_set_attr.html:546,Deployability,update,updated,546,"﻿. molecule_set_attr. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; molecule_set_attr. molecule_set_attr¶. psi4.driver.molecule_set_attr(self, name, value)[source]¶; Function to redefine __setattr__ method of molecule class. table of contents. molecule_set_attr; molecule_set_attr(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; molecule_set_attr. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.molecule_set_attr.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.molecule_set_attr.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.oeprop.html:414,Availability,Avail,Available,414,"﻿. oeprop. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; oeprop. oeprop¶. psi4.driver.oeprop(wfn, *args, **kwargs)[source]¶; Evaluate one-electron properties. Returns:; None. Parameters:. wfn (Wavefunction) – set of molecule, basis, orbitals from which to compute properties; args (List[str]) – Arbitrary-number of properties to be computed from wfn.; See Available One-Electron Properties.; title (str) – label prepended to all psivars computed. Examples:. >>> # [1] Moments with specific label; >>> E, wfn = energy('hf', return_wfn=True); >>> oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', title='H3O+ SCF'). table of contents. oeprop; oeprop(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; oeprop. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.oeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.oeprop.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.oeprop.html:888,Deployability,update,updated,888,"﻿. oeprop. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; oeprop. oeprop¶. psi4.driver.oeprop(wfn, *args, **kwargs)[source]¶; Evaluate one-electron properties. Returns:; None. Parameters:. wfn (Wavefunction) – set of molecule, basis, orbitals from which to compute properties; args (List[str]) – Arbitrary-number of properties to be computed from wfn.; See Available One-Electron Properties.; title (str) – label prepended to all psivars computed. Examples:. >>> # [1] Moments with specific label; >>> E, wfn = energy('hf', return_wfn=True); >>> oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', title='H3O+ SCF'). table of contents. oeprop; oeprop(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; oeprop. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.oeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.oeprop.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.oeprop.html:568,Energy Efficiency,energy,energy,568,"﻿. oeprop. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; oeprop. oeprop¶. psi4.driver.oeprop(wfn, *args, **kwargs)[source]¶; Evaluate one-electron properties. Returns:; None. Parameters:. wfn (Wavefunction) – set of molecule, basis, orbitals from which to compute properties; args (List[str]) – Arbitrary-number of properties to be computed from wfn.; See Available One-Electron Properties.; title (str) – label prepended to all psivars computed. Examples:. >>> # [1] Moments with specific label; >>> E, wfn = energy('hf', return_wfn=True); >>> oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', title='H3O+ SCF'). table of contents. oeprop; oeprop(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; oeprop. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.oeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.oeprop.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:2163,Availability,avail,available,2163,"tries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:2584,Availability,avail,available,2584," optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; couple",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:17220,Deployability,update,updated,17220,"ss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). table of contents. opt; opt(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; opt. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:254,Energy Efficiency,energy,energy,254,"﻿. opt. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; opt. opt¶. psi4.driver.opt(name, **kwargs)¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python f",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:331,Energy Efficiency,energy,energy,331,"﻿. opt. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; opt. opt¶. psi4.driver.opt(name, **kwargs)¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python f",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:520,Energy Efficiency,ENERGY,ENERGY,520,"﻿. opt. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; opt. opt¶. psi4.driver.opt(name, **kwargs)¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python f",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:731,Energy Efficiency,energy,energy,731,"﻿. opt. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; opt. opt¶. psi4.driver.opt(name, **kwargs)¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python f",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:1004,Energy Efficiency,energy,energy,1004,"﻿. opt. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; opt. opt¶. psi4.driver.opt(name, **kwargs)¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python f",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:1768,Energy Efficiency,energy,energy,1768,"he target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:1895,Energy Efficiency,energy,energy,1895,"to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; densit",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:2123,Energy Efficiency,energy,energy,2123,"tries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:2671,Energy Efficiency,energy,energy,2671," not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and dou",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:16609,Energy Efficiency,energy,energy,16609,"ss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). table of contents. opt; opt(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; opt. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:16671,Energy Efficiency,energy,energy,16671,"ss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). table of contents. opt; opt(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; opt. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:500,Modifiability,variab,variables,500,"﻿. opt. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; opt. opt¶. psi4.driver.opt(name, **kwargs)¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python f",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:8033,Modifiability,Parameteriz,Parameterized,8033,"d3bjatm. hcth120-d3zero2b. hcth120-d3zeroatm. hcth147; HCTH147 GGA Exchange-Correlation Functional. hcth407; HCTH407 GGA Exchange-Correlation Functional. hcth407-d3bj2b. hcth407-d3bjatm. hcth407-d3zero2b. hcth407-d3zeroatm. hcth407p; HCTH407P GGA Exchange-Correlation Functional. hcth93; HCTH93 GGA Exchange-Correlation Functional. hcthp14; HCTHP14 GGA Exchange-Correlation Functional. hcthp76; HCTHP76 GGA Exchange-Correlation Functional. hf; Hartree–Fock theory. hf+d. hf-d3bj2b. hf-d3bjatm. hf-d3mbj2b. hf-d3mbjatm. hf-d3mzero2b. hf-d3mzeroatm. hf-d3zero2b. hf-d3zeroatm. hf-nl; Hartree–Fock theory. hf3c; Hartree Fock based 3C composite method with minimal basis set, gCP and D3(BJ). hpbeint; HPBEINT Hyb-GGA Exchange-Correlation Functional. kmlyp; KMLYP Hyb-GGA Exchange-Correlation Functional. ksdt; KSDT Exchange-Correlation Functional. kt2; KT2 GGA Exchange-Correlation Functional. lda0; LDA0 Exchange-Correlation Functional. m05; M05 Meta-GGA XC Functional. m05-2x; Heavily Parameterized Hybrid M05-2X Meta-GGA XC Functional. m05-2x-d3zero2b. m05-2x-d3zeroatm. m05-d3zero2b. m05-d3zeroatm. m06; M06 Meta-GGA XC Functional. m06-2x; Hybrid M06-2X Meta-GGA XC Functional. m06-2x-d3zero2b. m06-2x-d3zeroatm. m06-d3zero2b. m06-d3zeroatm. m06-hf; Minnesota M06-HF Hybrid XC Functional. m06-hf-d3zero2b. m06-hf-d3zeroatm. m06-l; M06-L Meta-GGA XC Functional. m06-l-d3zero2b. m06-l-d3zeroatm. m08-hx; Minnesota M08-HX Hybrid XC Functional. m08-hx-d3zero2b. m08-hx-d3zeroatm. m08-so; Minnesota M08-SO Hybrid XC Functional. m11-l; M11-L Meta-GGA XC Functional. m11-l-d3bj2b. m11-l-d3bjatm. m11-l-d3zero2b. m11-l-d3zeroatm. mb3lyp-rc04; MB3LYP-RC04 Hyb-GGA Exchange-Correlation Functional. mgga_ms0; MGGA_MS0 Meta-GGA XC Functional. mgga_ms1; MGGA_MS1 Meta-GGA XC Functional. mgga_ms2; MGGA_MS2 Meta-GGA XC Functional. mgga_ms2h; MGGA_MS2h Hybrid Meta-GGA XC Functional. mgga_ms2h-d3opatm. mgga_mvs; MGGA_MVS Meta-GGA XC Functional. mgga_mvsh; MGGA_MV2h Hybrid Meta-GGA XC Functional. mn12-l; MN12-L Me",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:169,Performance,perform,perform,169,"﻿. opt. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; opt. opt¶. psi4.driver.opt(name, **kwargs)¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python f",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:188,Performance,optimiz,optimization,188,"﻿. opt. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; opt. opt¶. psi4.driver.opt(name, **kwargs)¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python f",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:264,Performance,optimiz,optimized,264,"﻿. opt. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; opt. opt¶. psi4.driver.opt(name, **kwargs)¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python f",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:403,Performance,Optimiz,OptimizationConvergenceError,403,"﻿. opt. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; opt. opt¶. psi4.driver.opt(name, **kwargs)¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python f",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:1209,Performance,optimiz,optimization,1209," psi4.driver.opt(name, **kwargs)¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || '",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:1309,Performance,optimiz,optimization,1309,"efunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:1380,Performance,optimiz,optimizer,1380,"efunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:1493,Performance,optimiz,optimizers,1493,"URRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being c",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:1564,Performance,optimiz,optimizer,1564,"URRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being c",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:1592,Performance,optimiz,optimization,1592,"URRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being c",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:1823,Performance,perform,performed,1823,"he target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:1917,Performance,perform,performs,1917,"to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; densit",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:2196,Performance,optimiz,optimization,2196,"tries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:2218,Performance,perform,performed,2218,"tries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:2323,Performance,perform,perform,2323,"to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-op",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:2373,Performance,optimiz,optimization,2373,"to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-op",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:2396,Performance,Optimiz,Optimizations,2396,"he GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital opt",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:2631,Performance,Optimiz,Optimizations,2631," not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and dou",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:2750,Performance,optimiz,optimizations,2750," \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. ccsd(t); CCSD with perturbative triples (CCSD",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:3166,Performance,optimiz,optimized,3166,nce; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. eom-ccsd; equation of motion (EOM) CCSD [manual]. name; calls method DFT [manual]. b1lyp; B1LYP Hyb-GGA Exchange-Correlation Functional. b1lyp-d3bj2b. b1lyp-d3bjatm. b1lyp-d3zero2b. b1lyp-d3zeroatm. b1pw91; B1PW91 Hyb-GGA Exchange-Correlation Functional. b1wc; B1WC Hyb-GGA Exchange-Correlation Functional. b3lyp; B3LYP Hyb-GGA Exchange-Correlation Functional. b3lyp-d3bj2b. b3lyp-d3bjatm. b3lyp-d3mbj2b. b3lyp-d3mbj,MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:3246,Performance,optimiz,optimized,3246,c.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. eom-ccsd; equation of motion (EOM) CCSD [manual]. name; calls method DFT [manual]. b1lyp; B1LYP Hyb-GGA Exchange-Correlation Functional. b1lyp-d3bj2b. b1lyp-d3bjatm. b1lyp-d3zero2b. b1lyp-d3zeroatm. b1pw91; B1PW91 Hyb-GGA Exchange-Correlation Functional. b1wc; B1WC Hyb-GGA Exchange-Correlation Functional. b3lyp; B3LYP Hyb-GGA Exchange-Correlation Functional. b3lyp-d3bj2b. b3lyp-d3bjatm. b3lyp-d3mbj2b. b3lyp-d3mbjatm. b3lyp-d3mzero2b. b3lyp-d3mzeroatm. b3lyp-d3opatm. b3lyp-d3zero2b. b3lyp-d3z,MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:3327,Performance,optimiz,optimized,3327,rm a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. eom-ccsd; equation of motion (EOM) CCSD [manual]. name; calls method DFT [manual]. b1lyp; B1LYP Hyb-GGA Exchange-Correlation Functional. b1lyp-d3bj2b. b1lyp-d3bjatm. b1lyp-d3zero2b. b1lyp-d3zeroatm. b1pw91; B1PW91 Hyb-GGA Exchange-Correlation Functional. b1wc; B1WC Hyb-GGA Exchange-Correlation Functional. b3lyp; B3LYP Hyb-GGA Exchange-Correlation Functional. b3lyp-d3bj2b. b3lyp-d3bjatm. b3lyp-d3mbj2b. b3lyp-d3mbjatm. b3lyp-d3mzero2b. b3lyp-d3mzeroatm. b3lyp-d3opatm. b3lyp-d3zero2b. b3lyp-d3zeroatm. b3lyp-nl; B3LYP-nl Hyb-GGA Exchange-Correlation Fu,MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:3379,Performance,optimiz,optimized,3379,arning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. eom-ccsd; equation of motion (EOM) CCSD [manual]. name; calls method DFT [manual]. b1lyp; B1LYP Hyb-GGA Exchange-Correlation Functional. b1lyp-d3bj2b. b1lyp-d3bjatm. b1lyp-d3zero2b. b1lyp-d3zeroatm. b1pw91; B1PW91 Hyb-GGA Exchange-Correlation Functional. b1wc; B1WC Hyb-GGA Exchange-Correlation Functional. b3lyp; B3LYP Hyb-GGA Exchange-Correlation Functional. b3lyp-d3bj2b. b3lyp-d3bjatm. b3lyp-d3mbj2b. b3lyp-d3mbjatm. b3lyp-d3mzero2b. b3lyp-d3mzeroatm. b3lyp-d3opatm. b3lyp-d3zero2b. b3lyp-d3zeroatm. b3lyp-nl; B3LYP-nl Hyb-GGA Exchange-Correlation Functional. b3lyp5; B3LYP5 Hyb-GGA Exchange-Correlation Funct,MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:3467,Performance,optimiz,optimized,3467,ms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. eom-ccsd; equation of motion (EOM) CCSD [manual]. name; calls method DFT [manual]. b1lyp; B1LYP Hyb-GGA Exchange-Correlation Functional. b1lyp-d3bj2b. b1lyp-d3bjatm. b1lyp-d3zero2b. b1lyp-d3zeroatm. b1pw91; B1PW91 Hyb-GGA Exchange-Correlation Functional. b1wc; B1WC Hyb-GGA Exchange-Correlation Functional. b3lyp; B3LYP Hyb-GGA Exchange-Correlation Functional. b3lyp-d3bj2b. b3lyp-d3bjatm. b3lyp-d3mbj2b. b3lyp-d3mbjatm. b3lyp-d3mzero2b. b3lyp-d3mzeroatm. b3lyp-d3opatm. b3lyp-d3zero2b. b3lyp-d3zeroatm. b3lyp-nl; B3LYP-nl Hyb-GGA Exchange-Correlation Functional. b3lyp5; B3LYP5 Hyb-GGA Exchange-Correlation Functional. b3lyps; B3LYPs Hyb-GGA Exchange-Correlation Functional. b3p86; B3P86 Hyb-GGA Exch,MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:15956,Performance,optimiz,optimization,15956,"A Exchange-Correlation Functional. x3lyp-d3bj2b. x3lyp-d3bjatm. x3lyp-d3zero2b. x3lyp-d3zeroatm. xb1k; XB1K Hyb-GGA Exchange-Correlation Functional. xlyp; XLYP GGA Exchange-Correlation Functional. xlyp-d3bj2b. xlyp-d3bjatm. xlyp-d3zero2b. xlyp-d3zeroatm. zlp; ZLP GGA Exchange-Correlation Functional. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.a",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:15974,Performance,optimiz,optimize,15974,"A Exchange-Correlation Functional. x3lyp-d3bj2b. x3lyp-d3bjatm. x3lyp-d3zero2b. x3lyp-d3zeroatm. xb1k; XB1K Hyb-GGA Exchange-Correlation Functional. xlyp; XLYP GGA Exchange-Correlation Functional. xlyp-d3bj2b. xlyp-d3bjatm. xlyp-d3zero2b. xlyp-d3zeroatm. zlp; ZLP GGA Exchange-Correlation Functional. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.a",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:16022,Performance,optimiz,optimization,16022,"1k; XB1K Hyb-GGA Exchange-Correlation Functional. xlyp; XLYP GGA Exchange-Correlation Functional. xlyp-d3bj2b. xlyp-d3bjatm. xlyp-d3zero2b. xlyp-d3zeroatm. zlp; ZLP GGA Exchange-Correlation Functional. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). table of contents. opt; opt(). «; hide menu. menu; sidebar; »",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:16183,Performance,perform,perform,16183,"eroatm. zlp; ZLP GGA Exchange-Correlation Functional. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). table of contents. opt; opt(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; opt. © Copyright 2007-2023, The Psi4 Pro",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:16230,Performance,optimiz,optimize,16230,"eroatm. zlp; ZLP GGA Exchange-Correlation Functional. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). table of contents. opt; opt(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; opt. © Copyright 2007-2023, The Psi4 Pro",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:16291,Performance,perform,perform,16291,"ss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). table of contents. opt; opt(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; opt. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:16484,Performance,optimiz,optimize,16484,"ss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). table of contents. opt; opt(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; opt. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:16637,Performance,optimiz,optimization,16637,"ss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). table of contents. opt; opt(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; opt. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:16721,Performance,optimiz,optimization,16721,"ss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). table of contents. opt; opt(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; opt. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:16808,Performance,optimiz,optimization,16808,"ss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). table of contents. opt; opt(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; opt. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:16842,Performance,optimiz,optimize,16842,"ss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). table of contents. opt; opt(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; opt. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:16882,Performance,Optimiz,OptimizationConvergenceError,16882,"ss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). table of contents. opt; opt(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; opt. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:1871,Security,access,accesses,1871,"to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; densit",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:2354,Usability,guid,guide,2354,"to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-op",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html:292,Availability,Error,Error,292,"﻿. OptimizationConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. OptimizationConvergenceError¶. exception psi4.driver.OptimizationConvergenceError(eqn_description, iteration, wfn)[source]¶; Error called for problems with geometry optimizer. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., geometry optimization).; iteration (int) – Iteration number on which routine failed.; wfn (Wavefunction) – Wavefunction at time of exception. message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. wfn¶; Wavefunction at time of exception. table of contents. OptimizationConvergenceError; OptimizationConvergenceError; OptimizationConvergenceError.message; OptimizationConvergenceError.iteration; OptimizationConvergenceError.wfn. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html:1123,Deployability,update,updated,1123,"﻿. OptimizationConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. OptimizationConvergenceError¶. exception psi4.driver.OptimizationConvergenceError(eqn_description, iteration, wfn)[source]¶; Error called for problems with geometry optimizer. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., geometry optimization).; iteration (int) – Iteration number on which routine failed.; wfn (Wavefunction) – Wavefunction at time of exception. message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. wfn¶; Wavefunction at time of exception. table of contents. OptimizationConvergenceError; OptimizationConvergenceError; OptimizationConvergenceError.message; OptimizationConvergenceError.iteration; OptimizationConvergenceError.wfn. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html:391,Integrability,rout,routine,391,"﻿. OptimizationConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. OptimizationConvergenceError¶. exception psi4.driver.OptimizationConvergenceError(eqn_description, iteration, wfn)[source]¶; Error called for problems with geometry optimizer. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., geometry optimization).; iteration (int) – Iteration number on which routine failed.; wfn (Wavefunction) – Wavefunction at time of exception. message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. wfn¶; Wavefunction at time of exception. table of contents. OptimizationConvergenceError; OptimizationConvergenceError; OptimizationConvergenceError.message; OptimizationConvergenceError.iteration; OptimizationConvergenceError.wfn. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html:491,Integrability,rout,routine,491,"﻿. OptimizationConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. OptimizationConvergenceError¶. exception psi4.driver.OptimizationConvergenceError(eqn_description, iteration, wfn)[source]¶; Error called for problems with geometry optimizer. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., geometry optimization).; iteration (int) – Iteration number on which routine failed.; wfn (Wavefunction) – Wavefunction at time of exception. message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. wfn¶; Wavefunction at time of exception. table of contents. OptimizationConvergenceError; OptimizationConvergenceError; OptimizationConvergenceError.message; OptimizationConvergenceError.iteration; OptimizationConvergenceError.wfn. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html:564,Integrability,message,message,564,"﻿. OptimizationConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. OptimizationConvergenceError¶. exception psi4.driver.OptimizationConvergenceError(eqn_description, iteration, wfn)[source]¶; Error called for problems with geometry optimizer. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., geometry optimization).; iteration (int) – Iteration number on which routine failed.; wfn (Wavefunction) – Wavefunction at time of exception. message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. wfn¶; Wavefunction at time of exception. table of contents. OptimizationConvergenceError; OptimizationConvergenceError; OptimizationConvergenceError.message; OptimizationConvergenceError.iteration; OptimizationConvergenceError.wfn. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html:660,Integrability,rout,routine,660,"﻿. OptimizationConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. OptimizationConvergenceError¶. exception psi4.driver.OptimizationConvergenceError(eqn_description, iteration, wfn)[source]¶; Error called for problems with geometry optimizer. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., geometry optimization).; iteration (int) – Iteration number on which routine failed.; wfn (Wavefunction) – Wavefunction at time of exception. message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. wfn¶; Wavefunction at time of exception. table of contents. OptimizationConvergenceError; OptimizationConvergenceError; OptimizationConvergenceError.message; OptimizationConvergenceError.iteration; OptimizationConvergenceError.wfn. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html:825,Integrability,message,message,825,"﻿. OptimizationConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. OptimizationConvergenceError¶. exception psi4.driver.OptimizationConvergenceError(eqn_description, iteration, wfn)[source]¶; Error called for problems with geometry optimizer. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., geometry optimization).; iteration (int) – Iteration number on which routine failed.; wfn (Wavefunction) – Wavefunction at time of exception. message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. wfn¶; Wavefunction at time of exception. table of contents. OptimizationConvergenceError; OptimizationConvergenceError; OptimizationConvergenceError.message; OptimizationConvergenceError.iteration; OptimizationConvergenceError.wfn. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html:3,Performance,Optimiz,OptimizationConvergenceError,3,"﻿. OptimizationConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. OptimizationConvergenceError¶. exception psi4.driver.OptimizationConvergenceError(eqn_description, iteration, wfn)[source]¶; Error called for problems with geometry optimizer. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., geometry optimization).; iteration (int) – Iteration number on which routine failed.; wfn (Wavefunction) – Wavefunction at time of exception. message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. wfn¶; Wavefunction at time of exception. table of contents. OptimizationConvergenceError; OptimizationConvergenceError; OptimizationConvergenceError.message; OptimizationConvergenceError.iteration; OptimizationConvergenceError.wfn. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html:137,Performance,Optimiz,OptimizationConvergenceError,137,"﻿. OptimizationConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. OptimizationConvergenceError¶. exception psi4.driver.OptimizationConvergenceError(eqn_description, iteration, wfn)[source]¶; Error called for problems with geometry optimizer. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., geometry optimization).; iteration (int) – Iteration number on which routine failed.; wfn (Wavefunction) – Wavefunction at time of exception. message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. wfn¶; Wavefunction at time of exception. table of contents. OptimizationConvergenceError; OptimizationConvergenceError; OptimizationConvergenceError.message; OptimizationConvergenceError.iteration; OptimizationConvergenceError.wfn. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html:167,Performance,Optimiz,OptimizationConvergenceError,167,"﻿. OptimizationConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. OptimizationConvergenceError¶. exception psi4.driver.OptimizationConvergenceError(eqn_description, iteration, wfn)[source]¶; Error called for problems with geometry optimizer. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., geometry optimization).; iteration (int) – Iteration number on which routine failed.; wfn (Wavefunction) – Wavefunction at time of exception. message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. wfn¶; Wavefunction at time of exception. table of contents. OptimizationConvergenceError; OptimizationConvergenceError; OptimizationConvergenceError.message; OptimizationConvergenceError.iteration; OptimizationConvergenceError.wfn. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html:220,Performance,Optimiz,OptimizationConvergenceError,220,"﻿. OptimizationConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. OptimizationConvergenceError¶. exception psi4.driver.OptimizationConvergenceError(eqn_description, iteration, wfn)[source]¶; Error called for problems with geometry optimizer. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., geometry optimization).; iteration (int) – Iteration number on which routine failed.; wfn (Wavefunction) – Wavefunction at time of exception. message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. wfn¶; Wavefunction at time of exception. table of contents. OptimizationConvergenceError; OptimizationConvergenceError; OptimizationConvergenceError.message; OptimizationConvergenceError.iteration; OptimizationConvergenceError.wfn. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html:332,Performance,optimiz,optimizer,332,"﻿. OptimizationConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. OptimizationConvergenceError¶. exception psi4.driver.OptimizationConvergenceError(eqn_description, iteration, wfn)[source]¶; Error called for problems with geometry optimizer. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., geometry optimization).; iteration (int) – Iteration number on which routine failed.; wfn (Wavefunction) – Wavefunction at time of exception. message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. wfn¶; Wavefunction at time of exception. table of contents. OptimizationConvergenceError; OptimizationConvergenceError; OptimizationConvergenceError.message; OptimizationConvergenceError.iteration; OptimizationConvergenceError.wfn. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html:431,Performance,optimiz,optimization,431,"﻿. OptimizationConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. OptimizationConvergenceError¶. exception psi4.driver.OptimizationConvergenceError(eqn_description, iteration, wfn)[source]¶; Error called for problems with geometry optimizer. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., geometry optimization).; iteration (int) – Iteration number on which routine failed.; wfn (Wavefunction) – Wavefunction at time of exception. message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. wfn¶; Wavefunction at time of exception. table of contents. OptimizationConvergenceError; OptimizationConvergenceError; OptimizationConvergenceError.message; OptimizationConvergenceError.iteration; OptimizationConvergenceError.wfn. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html:736,Performance,Optimiz,OptimizationConvergenceError,736,"﻿. OptimizationConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. OptimizationConvergenceError¶. exception psi4.driver.OptimizationConvergenceError(eqn_description, iteration, wfn)[source]¶; Error called for problems with geometry optimizer. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., geometry optimization).; iteration (int) – Iteration number on which routine failed.; wfn (Wavefunction) – Wavefunction at time of exception. message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. wfn¶; Wavefunction at time of exception. table of contents. OptimizationConvergenceError; OptimizationConvergenceError; OptimizationConvergenceError.message; OptimizationConvergenceError.iteration; OptimizationConvergenceError.wfn. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html:766,Performance,Optimiz,OptimizationConvergenceError,766,"﻿. OptimizationConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. OptimizationConvergenceError¶. exception psi4.driver.OptimizationConvergenceError(eqn_description, iteration, wfn)[source]¶; Error called for problems with geometry optimizer. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., geometry optimization).; iteration (int) – Iteration number on which routine failed.; wfn (Wavefunction) – Wavefunction at time of exception. message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. wfn¶; Wavefunction at time of exception. table of contents. OptimizationConvergenceError; OptimizationConvergenceError; OptimizationConvergenceError.message; OptimizationConvergenceError.iteration; OptimizationConvergenceError.wfn. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html:796,Performance,Optimiz,OptimizationConvergenceError,796,"﻿. OptimizationConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. OptimizationConvergenceError¶. exception psi4.driver.OptimizationConvergenceError(eqn_description, iteration, wfn)[source]¶; Error called for problems with geometry optimizer. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., geometry optimization).; iteration (int) – Iteration number on which routine failed.; wfn (Wavefunction) – Wavefunction at time of exception. message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. wfn¶; Wavefunction at time of exception. table of contents. OptimizationConvergenceError; OptimizationConvergenceError; OptimizationConvergenceError.message; OptimizationConvergenceError.iteration; OptimizationConvergenceError.wfn. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html:834,Performance,Optimiz,OptimizationConvergenceError,834,"﻿. OptimizationConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. OptimizationConvergenceError¶. exception psi4.driver.OptimizationConvergenceError(eqn_description, iteration, wfn)[source]¶; Error called for problems with geometry optimizer. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., geometry optimization).; iteration (int) – Iteration number on which routine failed.; wfn (Wavefunction) – Wavefunction at time of exception. message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. wfn¶; Wavefunction at time of exception. table of contents. OptimizationConvergenceError; OptimizationConvergenceError; OptimizationConvergenceError.message; OptimizationConvergenceError.iteration; OptimizationConvergenceError.wfn. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html:874,Performance,Optimiz,OptimizationConvergenceError,874,"﻿. OptimizationConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. OptimizationConvergenceError¶. exception psi4.driver.OptimizationConvergenceError(eqn_description, iteration, wfn)[source]¶; Error called for problems with geometry optimizer. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., geometry optimization).; iteration (int) – Iteration number on which routine failed.; wfn (Wavefunction) – Wavefunction at time of exception. message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. wfn¶; Wavefunction at time of exception. table of contents. OptimizationConvergenceError; OptimizationConvergenceError; OptimizationConvergenceError.message; OptimizationConvergenceError.iteration; OptimizationConvergenceError.wfn. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html:1046,Performance,Optimiz,OptimizationConvergenceError,1046,"﻿. OptimizationConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. OptimizationConvergenceError¶. exception psi4.driver.OptimizationConvergenceError(eqn_description, iteration, wfn)[source]¶; Error called for problems with geometry optimizer. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., geometry optimization).; iteration (int) – Iteration number on which routine failed.; wfn (Wavefunction) – Wavefunction at time of exception. message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. wfn¶; Wavefunction at time of exception. table of contents. OptimizationConvergenceError; OptimizationConvergenceError; OptimizationConvergenceError.message; OptimizationConvergenceError.iteration; OptimizationConvergenceError.wfn. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.OptimizationConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:2191,Availability,avail,available,2191,"tries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:2612,Availability,avail,available,2612," optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; couple",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:17263,Deployability,update,updated,17263,"ram [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). table of contents. optimize; optimize(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:282,Energy Efficiency,energy,energy,282,"﻿. optimize. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. optimize¶. psi4.driver.optimize(name, **kwargs)[source]¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:359,Energy Efficiency,energy,energy,359,"﻿. optimize. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. optimize¶. psi4.driver.optimize(name, **kwargs)[source]¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:548,Energy Efficiency,ENERGY,ENERGY,548,"﻿. optimize. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. optimize¶. psi4.driver.optimize(name, **kwargs)[source]¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:759,Energy Efficiency,energy,energy,759,"﻿. optimize. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. optimize¶. psi4.driver.optimize(name, **kwargs)[source]¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:1032,Energy Efficiency,energy,energy,1032,"﻿. optimize. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. optimize¶. psi4.driver.optimize(name, **kwargs)[source]¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:1796,Energy Efficiency,energy,energy,1796,"he target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:1923,Energy Efficiency,energy,energy,1923,"to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; densit",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:2151,Energy Efficiency,energy,energy,2151,"tries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:2699,Energy Efficiency,energy,energy,2699," not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and dou",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:16637,Energy Efficiency,energy,energy,16637,"ram [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). table of contents. optimize; optimize(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:16699,Energy Efficiency,energy,energy,16699,"ram [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). table of contents. optimize; optimize(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:528,Modifiability,variab,variables,528,"﻿. optimize. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. optimize¶. psi4.driver.optimize(name, **kwargs)[source]¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:8061,Modifiability,Parameteriz,Parameterized,8061,"d3bjatm. hcth120-d3zero2b. hcth120-d3zeroatm. hcth147; HCTH147 GGA Exchange-Correlation Functional. hcth407; HCTH407 GGA Exchange-Correlation Functional. hcth407-d3bj2b. hcth407-d3bjatm. hcth407-d3zero2b. hcth407-d3zeroatm. hcth407p; HCTH407P GGA Exchange-Correlation Functional. hcth93; HCTH93 GGA Exchange-Correlation Functional. hcthp14; HCTHP14 GGA Exchange-Correlation Functional. hcthp76; HCTHP76 GGA Exchange-Correlation Functional. hf; Hartree–Fock theory. hf+d. hf-d3bj2b. hf-d3bjatm. hf-d3mbj2b. hf-d3mbjatm. hf-d3mzero2b. hf-d3mzeroatm. hf-d3zero2b. hf-d3zeroatm. hf-nl; Hartree–Fock theory. hf3c; Hartree Fock based 3C composite method with minimal basis set, gCP and D3(BJ). hpbeint; HPBEINT Hyb-GGA Exchange-Correlation Functional. kmlyp; KMLYP Hyb-GGA Exchange-Correlation Functional. ksdt; KSDT Exchange-Correlation Functional. kt2; KT2 GGA Exchange-Correlation Functional. lda0; LDA0 Exchange-Correlation Functional. m05; M05 Meta-GGA XC Functional. m05-2x; Heavily Parameterized Hybrid M05-2X Meta-GGA XC Functional. m05-2x-d3zero2b. m05-2x-d3zeroatm. m05-d3zero2b. m05-d3zeroatm. m06; M06 Meta-GGA XC Functional. m06-2x; Hybrid M06-2X Meta-GGA XC Functional. m06-2x-d3zero2b. m06-2x-d3zeroatm. m06-d3zero2b. m06-d3zeroatm. m06-hf; Minnesota M06-HF Hybrid XC Functional. m06-hf-d3zero2b. m06-hf-d3zeroatm. m06-l; M06-L Meta-GGA XC Functional. m06-l-d3zero2b. m06-l-d3zeroatm. m08-hx; Minnesota M08-HX Hybrid XC Functional. m08-hx-d3zero2b. m08-hx-d3zeroatm. m08-so; Minnesota M08-SO Hybrid XC Functional. m11-l; M11-L Meta-GGA XC Functional. m11-l-d3bj2b. m11-l-d3bjatm. m11-l-d3zero2b. m11-l-d3zeroatm. mb3lyp-rc04; MB3LYP-RC04 Hyb-GGA Exchange-Correlation Functional. mgga_ms0; MGGA_MS0 Meta-GGA XC Functional. mgga_ms1; MGGA_MS1 Meta-GGA XC Functional. mgga_ms2; MGGA_MS2 Meta-GGA XC Functional. mgga_ms2h; MGGA_MS2h Hybrid Meta-GGA XC Functional. mgga_ms2h-d3opatm. mgga_mvs; MGGA_MVS Meta-GGA XC Functional. mgga_mvsh; MGGA_MV2h Hybrid Meta-GGA XC Functional. mn12-l; MN12-L Me",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:3,Performance,optimiz,optimize,3,"﻿. optimize. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. optimize¶. psi4.driver.optimize(name, **kwargs)[source]¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:117,Performance,optimiz,optimize,117,"﻿. optimize. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. optimize¶. psi4.driver.optimize(name, **kwargs)[source]¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:127,Performance,optimiz,optimize,127,"﻿. optimize. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. optimize¶. psi4.driver.optimize(name, **kwargs)[source]¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:150,Performance,optimiz,optimize,150,"﻿. optimize. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. optimize¶. psi4.driver.optimize(name, **kwargs)[source]¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:197,Performance,perform,perform,197,"﻿. optimize. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. optimize¶. psi4.driver.optimize(name, **kwargs)[source]¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:216,Performance,optimiz,optimization,216,"﻿. optimize. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. optimize¶. psi4.driver.optimize(name, **kwargs)[source]¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:292,Performance,optimiz,optimized,292,"﻿. optimize. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. optimize¶. psi4.driver.optimize(name, **kwargs)[source]¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:431,Performance,Optimiz,OptimizationConvergenceError,431,"﻿. optimize. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. optimize¶. psi4.driver.optimize(name, **kwargs)[source]¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:1237,Performance,optimiz,optimization,1237,"optimize(name, **kwargs)[source]¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || '",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:1337,Performance,optimiz,optimization,1337,"efunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:1408,Performance,optimiz,optimizer,1408,"efunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:1521,Performance,optimiz,optimizers,1521,"URRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being c",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:1592,Performance,optimiz,optimizer,1592,"URRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being c",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:1620,Performance,optimiz,optimization,1620,"URRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being c",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:1851,Performance,perform,performed,1851,"he target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:1945,Performance,perform,performs,1945,"to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; densit",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:2224,Performance,optimiz,optimization,2224,"tries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:2246,Performance,perform,performed,2246,"tries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:2351,Performance,perform,perform,2351,"to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-op",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:2401,Performance,optimiz,optimization,2401,"to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-op",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:2424,Performance,Optimiz,Optimizations,2424,"he GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital opt",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:2659,Performance,Optimiz,Optimizations,2659," not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and dou",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:2778,Performance,optimiz,optimizations,2778," \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. ccsd(t); CCSD with perturbative triples (CCSD",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:3194,Performance,optimiz,optimized,3194,nce; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. eom-ccsd; equation of motion (EOM) CCSD [manual]. name; calls method DFT [manual]. b1lyp; B1LYP Hyb-GGA Exchange-Correlation Functional. b1lyp-d3bj2b. b1lyp-d3bjatm. b1lyp-d3zero2b. b1lyp-d3zeroatm. b1pw91; B1PW91 Hyb-GGA Exchange-Correlation Functional. b1wc; B1WC Hyb-GGA Exchange-Correlation Functional. b3lyp; B3LYP Hyb-GGA Exchange-Correlation Functional. b3lyp-d3bj2b. b3lyp-d3bjatm. b3lyp-d3mbj2b. b3lyp-d3mbj,MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:3274,Performance,optimiz,optimized,3274,c.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. eom-ccsd; equation of motion (EOM) CCSD [manual]. name; calls method DFT [manual]. b1lyp; B1LYP Hyb-GGA Exchange-Correlation Functional. b1lyp-d3bj2b. b1lyp-d3bjatm. b1lyp-d3zero2b. b1lyp-d3zeroatm. b1pw91; B1PW91 Hyb-GGA Exchange-Correlation Functional. b1wc; B1WC Hyb-GGA Exchange-Correlation Functional. b3lyp; B3LYP Hyb-GGA Exchange-Correlation Functional. b3lyp-d3bj2b. b3lyp-d3bjatm. b3lyp-d3mbj2b. b3lyp-d3mbjatm. b3lyp-d3mzero2b. b3lyp-d3mzeroatm. b3lyp-d3opatm. b3lyp-d3zero2b. b3lyp-d3z,MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:3355,Performance,optimiz,optimized,3355,rm a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. eom-ccsd; equation of motion (EOM) CCSD [manual]. name; calls method DFT [manual]. b1lyp; B1LYP Hyb-GGA Exchange-Correlation Functional. b1lyp-d3bj2b. b1lyp-d3bjatm. b1lyp-d3zero2b. b1lyp-d3zeroatm. b1pw91; B1PW91 Hyb-GGA Exchange-Correlation Functional. b1wc; B1WC Hyb-GGA Exchange-Correlation Functional. b3lyp; B3LYP Hyb-GGA Exchange-Correlation Functional. b3lyp-d3bj2b. b3lyp-d3bjatm. b3lyp-d3mbj2b. b3lyp-d3mbjatm. b3lyp-d3mzero2b. b3lyp-d3mzeroatm. b3lyp-d3opatm. b3lyp-d3zero2b. b3lyp-d3zeroatm. b3lyp-nl; B3LYP-nl Hyb-GGA Exchange-Correlation Fu,MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:3407,Performance,optimiz,optimized,3407,arning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. eom-ccsd; equation of motion (EOM) CCSD [manual]. name; calls method DFT [manual]. b1lyp; B1LYP Hyb-GGA Exchange-Correlation Functional. b1lyp-d3bj2b. b1lyp-d3bjatm. b1lyp-d3zero2b. b1lyp-d3zeroatm. b1pw91; B1PW91 Hyb-GGA Exchange-Correlation Functional. b1wc; B1WC Hyb-GGA Exchange-Correlation Functional. b3lyp; B3LYP Hyb-GGA Exchange-Correlation Functional. b3lyp-d3bj2b. b3lyp-d3bjatm. b3lyp-d3mbj2b. b3lyp-d3mbjatm. b3lyp-d3mzero2b. b3lyp-d3mzeroatm. b3lyp-d3opatm. b3lyp-d3zero2b. b3lyp-d3zeroatm. b3lyp-nl; B3LYP-nl Hyb-GGA Exchange-Correlation Functional. b3lyp5; B3LYP5 Hyb-GGA Exchange-Correlation Funct,MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:3495,Performance,optimiz,optimized,3495,ms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. eom-ccsd; equation of motion (EOM) CCSD [manual]. name; calls method DFT [manual]. b1lyp; B1LYP Hyb-GGA Exchange-Correlation Functional. b1lyp-d3bj2b. b1lyp-d3bjatm. b1lyp-d3zero2b. b1lyp-d3zeroatm. b1pw91; B1PW91 Hyb-GGA Exchange-Correlation Functional. b1wc; B1WC Hyb-GGA Exchange-Correlation Functional. b3lyp; B3LYP Hyb-GGA Exchange-Correlation Functional. b3lyp-d3bj2b. b3lyp-d3bjatm. b3lyp-d3mbj2b. b3lyp-d3mbjatm. b3lyp-d3mzero2b. b3lyp-d3mzeroatm. b3lyp-d3opatm. b3lyp-d3zero2b. b3lyp-d3zeroatm. b3lyp-nl; B3LYP-nl Hyb-GGA Exchange-Correlation Functional. b3lyp5; B3LYP5 Hyb-GGA Exchange-Correlation Functional. b3lyps; B3LYPs Hyb-GGA Exchange-Correlation Functional. b3p86; B3P86 Hyb-GGA Exch,MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:15984,Performance,optimiz,optimization,15984,"A Exchange-Correlation Functional. x3lyp-d3bj2b. x3lyp-d3bjatm. x3lyp-d3zero2b. x3lyp-d3zeroatm. xb1k; XB1K Hyb-GGA Exchange-Correlation Functional. xlyp; XLYP GGA Exchange-Correlation Functional. xlyp-d3bj2b. xlyp-d3bjatm. xlyp-d3zero2b. xlyp-d3zeroatm. zlp; ZLP GGA Exchange-Correlation Functional. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.a",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:16002,Performance,optimiz,optimize,16002,"A Exchange-Correlation Functional. x3lyp-d3bj2b. x3lyp-d3bjatm. x3lyp-d3zero2b. x3lyp-d3zeroatm. xb1k; XB1K Hyb-GGA Exchange-Correlation Functional. xlyp; XLYP GGA Exchange-Correlation Functional. xlyp-d3bj2b. xlyp-d3bjatm. xlyp-d3zero2b. xlyp-d3zeroatm. zlp; ZLP GGA Exchange-Correlation Functional. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.a",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:16050,Performance,optimiz,optimization,16050,"1k; XB1K Hyb-GGA Exchange-Correlation Functional. xlyp; XLYP GGA Exchange-Correlation Functional. xlyp-d3bj2b. xlyp-d3bjatm. xlyp-d3zero2b. xlyp-d3zeroatm. zlp; ZLP GGA Exchange-Correlation Functional. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). table of contents. optimize; optimize(). «; hide menu. menu; ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:16211,Performance,perform,perform,16211,"eroatm. zlp; ZLP GGA Exchange-Correlation Functional. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). table of contents. optimize; optimize(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. © Copyright 2007-202",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:16258,Performance,optimiz,optimize,16258,"eroatm. zlp; ZLP GGA Exchange-Correlation Functional. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). table of contents. optimize; optimize(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. © Copyright 2007-202",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:16319,Performance,perform,perform,16319,"ram [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). table of contents. optimize; optimize(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:16512,Performance,optimiz,optimize,16512,"ram [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). table of contents. optimize; optimize(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:16665,Performance,optimiz,optimization,16665,"ram [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). table of contents. optimize; optimize(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:16749,Performance,optimiz,optimization,16749,"ram [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). table of contents. optimize; optimize(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:16836,Performance,optimiz,optimization,16836,"ram [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). table of contents. optimize; optimize(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:16870,Performance,optimiz,optimize,16870,"ram [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). table of contents. optimize; optimize(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:16910,Performance,Optimiz,OptimizationConvergenceError,16910,"ram [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). table of contents. optimize; optimize(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:17046,Performance,optimiz,optimize,17046,"ram [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). table of contents. optimize; optimize(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:17056,Performance,optimiz,optimize,17056,"ram [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). table of contents. optimize; optimize(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:17206,Performance,optimiz,optimize,17206,"ram [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). table of contents. optimize; optimize(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:1899,Security,access,accesses,1899,"to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; densit",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html:2382,Usability,guid,guide,2382,"to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-op",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize_geometric.html:491,Deployability,update,updated,491,"﻿. optimize_geometric. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; optimize_geometric. optimize_geometric¶. psi4.driver.optimize_geometric(name, **kwargs)[source]¶. table of contents. optimize_geometric; optimize_geometric(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; optimize_geometric. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.optimize_geometric.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.optimize_geometric.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.all_casings.html:614,Deployability,update,updated,614,"﻿. all_casings. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; all_casings. all_casings¶. psi4.driver.p4util.all_casings(input_string)[source]¶; Return a generator of all lettercase permutations of input_string. Parameters:; input_string (str) – String of which to permute the case. Return type:; Iterator[str]. table of contents. all_casings; all_casings(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; all_casings. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.all_casings.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.all_casings.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.array_to_matrix.html:1636,Deployability,update,updated,1636,"﻿. array_to_matrix. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; array_to_matrix. array_to_matrix¶. psi4.driver.p4util.array_to_matrix(self, arr, name='New Matrix', dim1=None, dim2=None)[source]¶; Converts a NumPy array or list of; NumPy arrays into a PSI4 Matrix or; Vector (irrepped if list). Parameters:. self (Union[Matrix, Vector]) – Matrix or Vector class.; arr (Union[ndarray, List[ndarray]]) – NumPy array or list of arrays to use as the data for a new; Matrix or Vector.; name (str) – Name to give the new Matrix.; dim1 (Union[List, Tuple, Dimension, None]) – If a single dense NumPy array is given, a dimension can be supplied to; apply irreps to this array. Note that this discards all extra information; given in the matrix besides the diagonal blocks determined by the passed; dimension.; dim2 (Optional[Dimension]) – Same as dim1 only if using a Dimension object. Returns:; Returns the given (self) Psi4 object. Return type:; Matrix or Vector. Notes; This is a generalized function to convert a NumPy array to a Psi4 object; Examples; >>> data = np.random.rand(20,1); >>> vector = psi4.core.Matrix.from_array(data). >>> irrep_data = [np.random.rand(2, 2), np.empty(shape=(0,3)), np.random.rand(4, 4)]; >>> matrix = psi4.core.Matrix.from_array(irrep_data); >>> print(matrix.rowdim().to_tuple()); (2, 0, 4). table of contents. array_to_matrix; array_to_matrix(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; array_to_matrix. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.array_to_matrix.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.array_to_matrix.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.banner.html:885,Deployability,update,updated,885,"﻿. banner. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; banner. banner¶. psi4.driver.p4util.banner(text, type=1, width=35, strNotOutfile=False)[source]¶; Format text into a banner style and print or return it. Parameters:. text (str) – String to be emphasized.; type (int) – Style 1 has minimum three-line height. Style 2 has minimum one-light; height.; width (int) – Minimum length of banner string.; strNotOutfile (bool) – Controls mode of return. Return type:; Optional[str]. Returns:. str – If strNotOutfile is True, return string.; None – If strNotOutfile is False, print it to output file. table of contents. banner; banner(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; banner. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.banner.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.banner.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.basis_helper.html:1118,Deployability,update,updated,1118,"﻿. basis_helper. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; basis_helper. basis_helper¶. psi4.driver.p4util.basis_helper(block, name='', key='BASIS', set_option=True)[source]¶; Helper to specify a custom basis set in PsiAPI mode.; This function forms a basis specification function from block; and associates it with keyword key under handle name. Registers; the basis spec with Psi4 so that it can be applied again to future; molecules. For usage, see mints2, mints9, and; cc54 test cases. Parameters:. block (str) – Text that goes in a PSIthon basis {...} block.; name (str) – Name label to associated with basis specified by block.; key (str) – Basis keyword specified by block.; set_option (bool) – When True, execute the equivalent of set key name or set_option({key: name}). When False, skip execution. table of contents. basis_helper; basis_helper(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; basis_helper. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.basis_helper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.basis_helper.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.basis_helper.html:540,Testability,test,test,540,"﻿. basis_helper. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; basis_helper. basis_helper¶. psi4.driver.p4util.basis_helper(block, name='', key='BASIS', set_option=True)[source]¶; Helper to specify a custom basis set in PsiAPI mode.; This function forms a basis specification function from block; and associates it with keyword key under handle name. Registers; the basis spec with Psi4 so that it can be applied again to future; molecules. For usage, see mints2, mints9, and; cc54 test cases. Parameters:. block (str) – Text that goes in a PSIthon basis {...} block.; name (str) – Name label to associated with basis specified by block.; key (str) – Basis keyword specified by block.; set_option (bool) – When True, execute the equivalent of set key name or set_option({key: name}). When False, skip execution. table of contents. basis_helper; basis_helper(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; basis_helper. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.basis_helper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.basis_helper.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.block_diagonal_array.html:703,Deployability,update,updated,703,"﻿. block_diagonal_array. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; block_diagonal_array. block_diagonal_array¶. psi4.driver.p4util.block_diagonal_array(*args)[source]¶; Convert square NumPy array to a single block diagonal array.; Mimic of SciPy’s scipy.linalg.block_diag(). Parameters:; args (List[ndarray]) – Arbitrary number of square arrays. Return type:; ndarray. table of contents. block_diagonal_array; block_diagonal_array(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; block_diagonal_array. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.block_diagonal_array.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.block_diagonal_array.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.cg_solver.html:545,Availability,mask,mask,545,"﻿. cg_solver. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; cg_solver. cg_solver¶. psi4.driver.p4util.cg_solver(rhs_vec, hx_function, preconditioner, guess=None, printer=None, printlvl=1, maxiter=20, rcond=1e-06)[source]¶; Solves the \(Ax = b\) linear equations via Conjugate Gradient. The A matrix must be a hermitian, positive definite matrix. Parameters:. rhs_vec (List[Matrix]) – The RHS vector in the Ax=b equation.; hx_function (Callable) – Takes in a list of Matrix objects and a mask of active indices. Returns the Hessian-vector product.; preconditioner (Callable) – Takes in a list of Matrix objects and a mask of active indices. Returns the preconditioned value.; guess (Optional[List[Matrix]]) – Starting vectors. If None, use a preconditioner (rhs) guess; printer (Optional[Callable]) – Takes in a list of current x and residual vectors and provides a print function. This function can also; return a value that represents the current residual.; printlvl (int) – The level of printing provided by this function.; maxiter (int) – The maximum number of iterations this function will take.; rcond (float) – The residual norm for convergence. Returns:; ret – Solved x vectors and r vectors. Return type:; List[Matrix]. Notes; This is a generalized cg solver that can also take advantage of solving multiple RHS’s simultaneously when; it is advantageous to do so. table of contents. cg_solver; cg_solver(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; cg_solver. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.cg_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.cg_solver.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.cg_solver.html:674,Availability,mask,mask,674,"﻿. cg_solver. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; cg_solver. cg_solver¶. psi4.driver.p4util.cg_solver(rhs_vec, hx_function, preconditioner, guess=None, printer=None, printlvl=1, maxiter=20, rcond=1e-06)[source]¶; Solves the \(Ax = b\) linear equations via Conjugate Gradient. The A matrix must be a hermitian, positive definite matrix. Parameters:. rhs_vec (List[Matrix]) – The RHS vector in the Ax=b equation.; hx_function (Callable) – Takes in a list of Matrix objects and a mask of active indices. Returns the Hessian-vector product.; preconditioner (Callable) – Takes in a list of Matrix objects and a mask of active indices. Returns the preconditioned value.; guess (Optional[List[Matrix]]) – Starting vectors. If None, use a preconditioner (rhs) guess; printer (Optional[Callable]) – Takes in a list of current x and residual vectors and provides a print function. This function can also; return a value that represents the current residual.; printlvl (int) – The level of printing provided by this function.; maxiter (int) – The maximum number of iterations this function will take.; rcond (float) – The residual norm for convergence. Returns:; ret – Solved x vectors and r vectors. Return type:; List[Matrix]. Notes; This is a generalized cg solver that can also take advantage of solving multiple RHS’s simultaneously when; it is advantageous to do so. table of contents. cg_solver; cg_solver(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; cg_solver. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.cg_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.cg_solver.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.cg_solver.html:1669,Deployability,update,updated,1669,"﻿. cg_solver. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; cg_solver. cg_solver¶. psi4.driver.p4util.cg_solver(rhs_vec, hx_function, preconditioner, guess=None, printer=None, printlvl=1, maxiter=20, rcond=1e-06)[source]¶; Solves the \(Ax = b\) linear equations via Conjugate Gradient. The A matrix must be a hermitian, positive definite matrix. Parameters:. rhs_vec (List[Matrix]) – The RHS vector in the Ax=b equation.; hx_function (Callable) – Takes in a list of Matrix objects and a mask of active indices. Returns the Hessian-vector product.; preconditioner (Callable) – Takes in a list of Matrix objects and a mask of active indices. Returns the preconditioned value.; guess (Optional[List[Matrix]]) – Starting vectors. If None, use a preconditioner (rhs) guess; printer (Optional[Callable]) – Takes in a list of current x and residual vectors and provides a print function. This function can also; return a value that represents the current residual.; printlvl (int) – The level of printing provided by this function.; maxiter (int) – The maximum number of iterations this function will take.; rcond (float) – The residual norm for convergence. Returns:; ret – Solved x vectors and r vectors. Return type:; List[Matrix]. Notes; This is a generalized cg solver that can also take advantage of solving multiple RHS’s simultaneously when; it is advantageous to do so. table of contents. cg_solver; cg_solver(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; cg_solver. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.cg_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.cg_solver.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_fchkfiles.html:309,Availability,checkpoint,checkpoint,309,"﻿. compare_fchkfiles. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. compare_fchkfiles¶. psi4.driver.p4util.compare_fchkfiles(expected, computed, atol_exponent, label)[source]¶; Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4’s FCHK files. Parameters:. expected (str) – Path to reference FCHK file against which computed is compared.; computed (str) – Path to input FCHK file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. table of contents. compare_fchkfiles; compare_fchkfiles(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.compare_fchkfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_fchkfiles.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_fchkfiles.html:539,Availability,avail,available,539,"﻿. compare_fchkfiles. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. compare_fchkfiles¶. psi4.driver.p4util.compare_fchkfiles(expected, computed, atol_exponent, label)[source]¶; Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4’s FCHK files. Parameters:. expected (str) – Path to reference FCHK file against which computed is compared.; computed (str) – Path to input FCHK file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. table of contents. compare_fchkfiles; compare_fchkfiles(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.compare_fchkfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_fchkfiles.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_fchkfiles.html:1076,Availability,toler,tolerance,1076,"﻿. compare_fchkfiles. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. compare_fchkfiles¶. psi4.driver.p4util.compare_fchkfiles(expected, computed, atol_exponent, label)[source]¶; Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4’s FCHK files. Parameters:. expected (str) – Path to reference FCHK file against which computed is compared.; computed (str) – Path to input FCHK file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. table of contents. compare_fchkfiles; compare_fchkfiles(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.compare_fchkfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_fchkfiles.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_fchkfiles.html:1408,Availability,error,error,1408,"﻿. compare_fchkfiles. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. compare_fchkfiles¶. psi4.driver.p4util.compare_fchkfiles(expected, computed, atol_exponent, label)[source]¶; Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4’s FCHK files. Parameters:. expected (str) – Path to reference FCHK file against which computed is compared.; computed (str) – Path to input FCHK file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. table of contents. compare_fchkfiles; compare_fchkfiles(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.compare_fchkfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_fchkfiles.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_fchkfiles.html:1687,Deployability,update,updated,1687,"﻿. compare_fchkfiles. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. compare_fchkfiles¶. psi4.driver.p4util.compare_fchkfiles(expected, computed, atol_exponent, label)[source]¶; Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4’s FCHK files. Parameters:. expected (str) – Path to reference FCHK file against which computed is compared.; computed (str) – Path to input FCHK file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. table of contents. compare_fchkfiles; compare_fchkfiles(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.compare_fchkfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_fchkfiles.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_fchkfiles.html:1414,Integrability,message,messages,1414,"﻿. compare_fchkfiles. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. compare_fchkfiles¶. psi4.driver.p4util.compare_fchkfiles(expected, computed, atol_exponent, label)[source]¶; Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4’s FCHK files. Parameters:. expected (str) – Path to reference FCHK file against which computed is compared.; computed (str) – Path to input FCHK file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. table of contents. compare_fchkfiles; compare_fchkfiles(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.compare_fchkfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_fchkfiles.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_fchkfiles.html:689,Testability,log,logical,689,"﻿. compare_fchkfiles. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. compare_fchkfiles¶. psi4.driver.p4util.compare_fchkfiles(expected, computed, atol_exponent, label)[source]¶; Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4’s FCHK files. Parameters:. expected (str) – Path to reference FCHK file against which computed is compared.; computed (str) – Path to input FCHK file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. table of contents. compare_fchkfiles; compare_fchkfiles(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.compare_fchkfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_fchkfiles.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_fchkfiles.html:740,Testability,test,test,740,"﻿. compare_fchkfiles. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. compare_fchkfiles¶. psi4.driver.p4util.compare_fchkfiles(expected, computed, atol_exponent, label)[source]¶; Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4’s FCHK files. Parameters:. expected (str) – Path to reference FCHK file against which computed is compared.; computed (str) – Path to input FCHK file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. table of contents. compare_fchkfiles; compare_fchkfiles(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.compare_fchkfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_fchkfiles.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_fcidumps.html:1274,Deployability,update,updated,1274,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. compare_fcidumps¶. psi4.driver.p4util.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. table of contents. compare_fcidumps; compare_fcidumps(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_fcidumps.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_fcidumps.html:644,Energy Efficiency,ENERGY,ENERGY,644,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. compare_fcidumps¶. psi4.driver.p4util.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. table of contents. compare_fcidumps; compare_fcidumps(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_fcidumps.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_fcidumps.html:671,Energy Efficiency,energy,energy,671,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. compare_fcidumps¶. psi4.driver.p4util.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. table of contents. compare_fcidumps; compare_fcidumps(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_fcidumps.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_fcidumps.html:693,Energy Efficiency,ENERGY,ENERGY,693,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. compare_fcidumps¶. psi4.driver.p4util.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. table of contents. compare_fcidumps; compare_fcidumps(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_fcidumps.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_fcidumps.html:720,Energy Efficiency,energy,energy,720,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. compare_fcidumps¶. psi4.driver.p4util.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. table of contents. compare_fcidumps; compare_fcidumps(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_fcidumps.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_fcidumps.html:739,Energy Efficiency,ENERGY,ENERGY,739,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. compare_fcidumps¶. psi4.driver.p4util.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. table of contents. compare_fcidumps; compare_fcidumps(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_fcidumps.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_fcidumps.html:759,Energy Efficiency,energy,energy,759,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. compare_fcidumps¶. psi4.driver.p4util.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. table of contents. compare_fcidumps; compare_fcidumps(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_fcidumps.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_fcidumps.html:784,Energy Efficiency,ENERGY,ENERGY,784,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. compare_fcidumps¶. psi4.driver.p4util.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. table of contents. compare_fcidumps; compare_fcidumps(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_fcidumps.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_fcidumps.html:810,Energy Efficiency,energy,energy,810,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. compare_fcidumps¶. psi4.driver.p4util.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. table of contents. compare_fcidumps; compare_fcidumps(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_fcidumps.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_fcidumps.html:1008,Testability,test,test,1008,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. compare_fcidumps¶. psi4.driver.p4util.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. table of contents. compare_fcidumps; compare_fcidumps(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_fcidumps.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_moldenfiles.html:509,Availability,avail,available,509,"﻿. compare_moldenfiles. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_moldenfiles. compare_moldenfiles¶. psi4.driver.p4util.compare_moldenfiles(expected, computed, atol_exponent=1e-07, label='Compare Molden')[source]¶; Comparison function for output data in Molden file format.; Compares many fields including geometry, basis set, occupations, symmetries, energies.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; A format description is found https://www3.cmbi.umcn.nl/molden/molden_format.html. Parameters:. expected (str) – Path to reference Molden file against which computed is compared.; computed (str) – Path to input Molden file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. table of contents. compare_moldenfiles; compare_moldenfiles(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_moldenfiles. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.compare_moldenfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_moldenfiles.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_moldenfiles.html:819,Availability,toler,tolerance,819,"﻿. compare_moldenfiles. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_moldenfiles. compare_moldenfiles¶. psi4.driver.p4util.compare_moldenfiles(expected, computed, atol_exponent=1e-07, label='Compare Molden')[source]¶; Comparison function for output data in Molden file format.; Compares many fields including geometry, basis set, occupations, symmetries, energies.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; A format description is found https://www3.cmbi.umcn.nl/molden/molden_format.html. Parameters:. expected (str) – Path to reference Molden file against which computed is compared.; computed (str) – Path to input Molden file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. table of contents. compare_moldenfiles; compare_moldenfiles(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_moldenfiles. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.compare_moldenfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_moldenfiles.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_moldenfiles.html:1151,Availability,error,error,1151,"﻿. compare_moldenfiles. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_moldenfiles. compare_moldenfiles¶. psi4.driver.p4util.compare_moldenfiles(expected, computed, atol_exponent=1e-07, label='Compare Molden')[source]¶; Comparison function for output data in Molden file format.; Compares many fields including geometry, basis set, occupations, symmetries, energies.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; A format description is found https://www3.cmbi.umcn.nl/molden/molden_format.html. Parameters:. expected (str) – Path to reference Molden file against which computed is compared.; computed (str) – Path to input Molden file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. table of contents. compare_moldenfiles; compare_moldenfiles(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_moldenfiles. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.compare_moldenfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_moldenfiles.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_moldenfiles.html:1436,Deployability,update,updated,1436,"﻿. compare_moldenfiles. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_moldenfiles. compare_moldenfiles¶. psi4.driver.p4util.compare_moldenfiles(expected, computed, atol_exponent=1e-07, label='Compare Molden')[source]¶; Comparison function for output data in Molden file format.; Compares many fields including geometry, basis set, occupations, symmetries, energies.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; A format description is found https://www3.cmbi.umcn.nl/molden/molden_format.html. Parameters:. expected (str) – Path to reference Molden file against which computed is compared.; computed (str) – Path to input Molden file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. table of contents. compare_moldenfiles; compare_moldenfiles(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_moldenfiles. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.compare_moldenfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_moldenfiles.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_moldenfiles.html:1157,Integrability,message,messages,1157,"﻿. compare_moldenfiles. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_moldenfiles. compare_moldenfiles¶. psi4.driver.p4util.compare_moldenfiles(expected, computed, atol_exponent=1e-07, label='Compare Molden')[source]¶; Comparison function for output data in Molden file format.; Compares many fields including geometry, basis set, occupations, symmetries, energies.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; A format description is found https://www3.cmbi.umcn.nl/molden/molden_format.html. Parameters:. expected (str) – Path to reference Molden file against which computed is compared.; computed (str) – Path to input Molden file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. table of contents. compare_moldenfiles; compare_moldenfiles(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; compare_moldenfiles. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.compare_moldenfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.compare_moldenfiles.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.copy_file_from_scratch.html:1384,Deployability,update,updated,1384,"﻿. copy_file_from_scratch. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; copy_file_from_scratch. copy_file_from_scratch¶. psi4.driver.p4util.copy_file_from_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Move a file out of scratch following the naming convention. Parameters:. filename (str) – Full path to target file.; prefix (str) – Computation prefix, usually ‘psi’.; namespace (str) – Context namespace, usually molecule name.; unit (int) – Unit number, e.g. 32; move (bool) – Whether to copy (default) or move?. Examples; >>> # Assume PID is 12345 and SCRATCH is /scratch/parrish/; >>> copy_file_to_scratch('temp', 'psi', 'h2o', 32):; Out[1]: -cp /scratch/parrish/psi.12345.h2o.32 .temp; >>> copy_file_to_scratch('/tmp/temp', 'psi', 'h2o', 32):; Out[2]: -cp /scratch/parrish/psi.12345.h2o.32 /tmp/temp; >>> copy_file_to_scratch('/tmp/temp', 'psi', '', 32):; Out[3]: -cp /scratch/parrish/psi.12345.32 /tmp/temp; >>> copy_file_to_scratch('/tmp/temp', 'psi', '', 32, True):; Out[4]: -mv /scratch/parrish/psi.12345.32 /tmp/temp. table of contents. copy_file_from_scratch; copy_file_from_scratch(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; copy_file_from_scratch. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.copy_file_from_scratch.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.copy_file_from_scratch.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.copy_file_to_scratch.html:1363,Deployability,update,updated,1363,"﻿. copy_file_to_scratch. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; copy_file_to_scratch. copy_file_to_scratch¶. psi4.driver.p4util.copy_file_to_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Move a file into scratch following the naming convention. Parameters:. filename (str) – Full path to file.; prefix (str) – Computation prefix, usually ‘psi’.; namespace (str) – Context namespace, usually molecule name.; unit (int) – Unit number, e.g. 32.; move (bool) – Whether to copy (default) or move?. Examples; >>> # Assume PID is 12345 and SCRATCH is /scratch/parrish/; >>> copy_file_to_scratch('temp', 'psi', 'h2o', 32):; Out[1]: -cp ./temp /scratch/parrish/psi.12345.h2o.32; >>> copy_file_to_scratch('/tmp/temp', 'psi', 'h2o', 32):; Out[2]: -cp /tmp/temp /scratch/parrish/psi.12345.h2o.32; >>> copy_file_to_scratch('/tmp/temp', 'psi', '', 32):; Out[3]: -cp /tmp/temp /scratch/parrish/psi.12345.32; >>> copy_file_to_scratch('/tmp/temp', 'psi', '', 32, True):; Out[4]: -mv /tmp/temp /scratch/parrish/psi.12345.32. table of contents. copy_file_to_scratch; copy_file_to_scratch(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; copy_file_to_scratch. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.copy_file_to_scratch.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.copy_file_to_scratch.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.cubeprop.html:1031,Deployability,update,updated,1031,"﻿. cubeprop. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; cubeprop. cubeprop¶. psi4.driver.p4util.cubeprop(wfn, **kwargs)[source]¶; Evaluate properties on a grid and generate cube files. New in version 0.5: wfn parameter passed explicitly. Returns:; None. Parameters:; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files. Examples:. >>> # [1] Cube files for all orbitals; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> cubeprop(wfn). >>> # [2] Cube files for density (alpha, beta, total, spin) and four orbitals; >>> # (two alpha, two beta); >>> set cubeprop_tasks ['orbitals', 'density']; >>> set cubeprop_orbitals [5, 6, -5, -6]; >>> E, wfn = energy('scf', return_wfn=True); >>> cubeprop(wfn). table of contents. cubeprop; cubeprop(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; cubeprop. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.cubeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.cubeprop.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.cubeprop.html:480,Energy Efficiency,energy,energy,480,"﻿. cubeprop. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; cubeprop. cubeprop¶. psi4.driver.p4util.cubeprop(wfn, **kwargs)[source]¶; Evaluate properties on a grid and generate cube files. New in version 0.5: wfn parameter passed explicitly. Returns:; None. Parameters:; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files. Examples:. >>> # [1] Cube files for all orbitals; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> cubeprop(wfn). >>> # [2] Cube files for density (alpha, beta, total, spin) and four orbitals; >>> # (two alpha, two beta); >>> set cubeprop_tasks ['orbitals', 'density']; >>> set cubeprop_orbitals [5, 6, -5, -6]; >>> E, wfn = energy('scf', return_wfn=True); >>> cubeprop(wfn). table of contents. cubeprop; cubeprop(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; cubeprop. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.cubeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.cubeprop.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.cubeprop.html:744,Energy Efficiency,energy,energy,744,"﻿. cubeprop. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; cubeprop. cubeprop¶. psi4.driver.p4util.cubeprop(wfn, **kwargs)[source]¶; Evaluate properties on a grid and generate cube files. New in version 0.5: wfn parameter passed explicitly. Returns:; None. Parameters:; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files. Examples:. >>> # [1] Cube files for all orbitals; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> cubeprop(wfn). >>> # [2] Cube files for density (alpha, beta, total, spin) and four orbitals; >>> # (two alpha, two beta); >>> set cubeprop_tasks ['orbitals', 'density']; >>> set cubeprop_orbitals [5, 6, -5, -6]; >>> E, wfn = energy('scf', return_wfn=True); >>> cubeprop(wfn). table of contents. cubeprop; cubeprop(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; cubeprop. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.cubeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.cubeprop.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.davidson_solver.html:747,Availability,down,down,747,"﻿. davidson_solver. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; davidson_solver. davidson_solver¶. psi4.driver.p4util.davidson_solver(engine, guess, *, nroot, r_convergence=0.0001, max_ss_size=100, maxiter=60, verbose=1, nonneg_only=False)[source]¶; Solves for the lowest few eigenvalues and eigenvectors of a large problem emulated through an engine.; If the large matrix A has dimension {NxN} and N is very large, and only; a small number of roots, k are desired this algorithm is preferable to; standard methods as uses on the order of N * k memory. One only needs to; have the ability to compute the product of a times a vector.; For non-hermitan A the basis of the algorithm breaks down. However in; practice, for strongly diagonally-dominant A such as the; similarity-transformed Hamiltonian in EOM-CC this algorithm is commonly still; used. Parameters:. engine (Type[SolverEngine]) – The engine drive all operations involving data structures that have at; least one “large” dimension. See SolverEngine for requirements; guess (List) – list {engine dependent}; At least nroot initial expansion vectors; nroot (int) – Number of roots desired; r_convergence (float) – Convergence tolerance for residual vectors; max_ss_size (int) – The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, >1 -> everything); nonneg_only (bool) – Should eigenpairs with eigenvalue < 0 be ignored?. Return type:; Dict[str, Any]. Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of A, computed on the last iteration of the solver; best_vectors (List[vector]) – (nroots) The best approximation of the eigenvectors of A, computed on the last iteration of the solver; stats (List[Dict]) – Statistics collected on each iteration. count : ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.davidson_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.davidson_solver.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.davidson_solver.html:1244,Availability,toler,tolerance,1244,"ence=0.0001, max_ss_size=100, maxiter=60, verbose=1, nonneg_only=False)[source]¶; Solves for the lowest few eigenvalues and eigenvectors of a large problem emulated through an engine.; If the large matrix A has dimension {NxN} and N is very large, and only; a small number of roots, k are desired this algorithm is preferable to; standard methods as uses on the order of N * k memory. One only needs to; have the ability to compute the product of a times a vector.; For non-hermitan A the basis of the algorithm breaks down. However in; practice, for strongly diagonally-dominant A such as the; similarity-transformed Hamiltonian in EOM-CC this algorithm is commonly still; used. Parameters:. engine (Type[SolverEngine]) – The engine drive all operations involving data structures that have at; least one “large” dimension. See SolverEngine for requirements; guess (List) – list {engine dependent}; At least nroot initial expansion vectors; nroot (int) – Number of roots desired; r_convergence (float) – Convergence tolerance for residual vectors; max_ss_size (int) – The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, >1 -> everything); nonneg_only (bool) – Should eigenpairs with eigenvalue < 0 be ignored?. Return type:; Dict[str, Any]. Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of A, computed on the last iteration of the solver; best_vectors (List[vector]) – (nroots) The best approximation of the eigenvectors of A, computed on the last iteration of the solver; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigen",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.davidson_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.davidson_solver.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.davidson_solver.html:2632,Availability,failure,failure,2632,"hat have at; least one “large” dimension. See SolverEngine for requirements; guess (List) – list {engine dependent}; At least nroot initial expansion vectors; nroot (int) – Number of roots desired; r_convergence (float) – Convergence tolerance for residual vectors; max_ss_size (int) – The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, >1 -> everything); nonneg_only (bool) – Should eigenpairs with eigenvalue < 0 be ignored?. Return type:; Dict[str, Any]. Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of A, computed on the last iteration of the solver; best_vectors (List[vector]) – (nroots) The best approximation of the eigenvectors of A, computed on the last iteration of the solver; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. Notes; The solution vector is normalized to 1/2; The solver will return even when maxiter iterations are performed without convergence.; The caller must check stats[-1]['done'] for failure and handle each case accordingly. table of contents. davidson_solver; davidson_solver(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; davidson_solver. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.davidson_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.davidson_solver.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.davidson_solver.html:2931,Deployability,update,updated,2931,"hat have at; least one “large” dimension. See SolverEngine for requirements; guess (List) – list {engine dependent}; At least nroot initial expansion vectors; nroot (int) – Number of roots desired; r_convergence (float) – Convergence tolerance for residual vectors; max_ss_size (int) – The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, >1 -> everything); nonneg_only (bool) – Should eigenpairs with eigenvalue < 0 be ignored?. Return type:; Dict[str, Any]. Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of A, computed on the last iteration of the solver; best_vectors (List[vector]) – (nroots) The best approximation of the eigenvectors of A, computed on the last iteration of the solver; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. Notes; The solution vector is normalized to 1/2; The solver will return even when maxiter iterations are performed without convergence.; The caller must check stats[-1]['done'] for failure and handle each case accordingly. table of contents. davidson_solver; davidson_solver(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; davidson_solver. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.davidson_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.davidson_solver.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.davidson_solver.html:1115,Integrability,depend,dependent,1115,"ence=0.0001, max_ss_size=100, maxiter=60, verbose=1, nonneg_only=False)[source]¶; Solves for the lowest few eigenvalues and eigenvectors of a large problem emulated through an engine.; If the large matrix A has dimension {NxN} and N is very large, and only; a small number of roots, k are desired this algorithm is preferable to; standard methods as uses on the order of N * k memory. One only needs to; have the ability to compute the product of a times a vector.; For non-hermitan A the basis of the algorithm breaks down. However in; practice, for strongly diagonally-dominant A such as the; similarity-transformed Hamiltonian in EOM-CC this algorithm is commonly still; used. Parameters:. engine (Type[SolverEngine]) – The engine drive all operations involving data structures that have at; least one “large” dimension. See SolverEngine for requirements; guess (List) – list {engine dependent}; At least nroot initial expansion vectors; nroot (int) – Number of roots desired; r_convergence (float) – Convergence tolerance for residual vectors; max_ss_size (int) – The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, >1 -> everything); nonneg_only (bool) – Should eigenpairs with eigenvalue < 0 be ignored?. Return type:; Dict[str, Any]. Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of A, computed on the last iteration of the solver; best_vectors (List[vector]) – (nroots) The best approximation of the eigenvectors of A, computed on the last iteration of the solver; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigen",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.davidson_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.davidson_solver.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.davidson_solver.html:2316,Performance,perform,performed,2316,"hat have at; least one “large” dimension. See SolverEngine for requirements; guess (List) – list {engine dependent}; At least nroot initial expansion vectors; nroot (int) – Number of roots desired; r_convergence (float) – Convergence tolerance for residual vectors; max_ss_size (int) – The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, >1 -> everything); nonneg_only (bool) – Should eigenpairs with eigenvalue < 0 be ignored?. Return type:; Dict[str, Any]. Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of A, computed on the last iteration of the solver; best_vectors (List[vector]) – (nroots) The best approximation of the eigenvectors of A, computed on the last iteration of the solver; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. Notes; The solution vector is normalized to 1/2; The solver will return even when maxiter iterations are performed without convergence.; The caller must check stats[-1]['done'] for failure and handle each case accordingly. table of contents. davidson_solver; davidson_solver(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; davidson_solver. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.davidson_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.davidson_solver.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.davidson_solver.html:2398,Performance,perform,performed,2398,"hat have at; least one “large” dimension. See SolverEngine for requirements; guess (List) – list {engine dependent}; At least nroot initial expansion vectors; nroot (int) – Number of roots desired; r_convergence (float) – Convergence tolerance for residual vectors; max_ss_size (int) – The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, >1 -> everything); nonneg_only (bool) – Should eigenpairs with eigenvalue < 0 be ignored?. Return type:; Dict[str, Any]. Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of A, computed on the last iteration of the solver; best_vectors (List[vector]) – (nroots) The best approximation of the eigenvectors of A, computed on the last iteration of the solver; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. Notes; The solution vector is normalized to 1/2; The solver will return even when maxiter iterations are performed without convergence.; The caller must check stats[-1]['done'] for failure and handle each case accordingly. table of contents. davidson_solver; davidson_solver(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; davidson_solver. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.davidson_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.davidson_solver.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.davidson_solver.html:2556,Performance,perform,performed,2556,"hat have at; least one “large” dimension. See SolverEngine for requirements; guess (List) – list {engine dependent}; At least nroot initial expansion vectors; nroot (int) – Number of roots desired; r_convergence (float) – Convergence tolerance for residual vectors; max_ss_size (int) – The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, >1 -> everything); nonneg_only (bool) – Should eigenpairs with eigenvalue < 0 be ignored?. Return type:; Dict[str, Any]. Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of A, computed on the last iteration of the solver; best_vectors (List[vector]) – (nroots) The best approximation of the eigenvectors of A, computed on the last iteration of the solver; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. Notes; The solution vector is normalized to 1/2; The solver will return even when maxiter iterations are performed without convergence.; The caller must check stats[-1]['done'] for failure and handle each case accordingly. table of contents. davidson_solver; davidson_solver(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; davidson_solver. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.davidson_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.davidson_solver.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.davidson_solver.html:1487,Testability,log,logging,1487,"are desired this algorithm is preferable to; standard methods as uses on the order of N * k memory. One only needs to; have the ability to compute the product of a times a vector.; For non-hermitan A the basis of the algorithm breaks down. However in; practice, for strongly diagonally-dominant A such as the; similarity-transformed Hamiltonian in EOM-CC this algorithm is commonly still; used. Parameters:. engine (Type[SolverEngine]) – The engine drive all operations involving data structures that have at; least one “large” dimension. See SolverEngine for requirements; guess (List) – list {engine dependent}; At least nroot initial expansion vectors; nroot (int) – Number of roots desired; r_convergence (float) – Convergence tolerance for residual vectors; max_ss_size (int) – The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, >1 -> everything); nonneg_only (bool) – Should eigenpairs with eigenvalue < 0 be ignored?. Return type:; Dict[str, Any]. Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of A, computed on the last iteration of the solver; best_vectors (List[vector]) – (nroots) The best approximation of the eigenvectors of A, computed on the last iteration of the solver; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. Notes; The solution vector is normalized to 1/2; The solver wil",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.davidson_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.davidson_solver.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.DIIS.html:324,Availability,error,error,324,"﻿. DIIS. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. DIIS¶. class psi4.driver.p4util.DIIS(max_vec=6, removal_policy='OLDEST')[source]¶; Bases: object; An object to assist in the DIIS extrpolation procedure. Parameters:. max_vec (int) – The maximum number of error and state vectors to hold. These are pruned based off the removal policy.; removal_policy (str) – {“OLDEST”, “LARGEST”}; How the state and error vectors are removed once at the maximum. OLDEST will remove the oldest vector while; largest will remove the residual with the largest RMS value. Methods Summary. add(state, error); Adds a DIIS state and error vector to the DIIS object. extrapolate([out]); Extrapolates next state vector from the current set of state and error vectors. Methods Documentation. add(state, error)[source]¶; Adds a DIIS state and error vector to the DIIS object. Parameters:. state (Matrix) – The current state vector.; error (Matrix) – The current error vector. extrapolate(out=None)[source]¶; Extrapolates next state vector from the current set of state and error vectors. Parameters:; out (Optional[Matrix]) – A array in which to place the next state vector. Returns:; ret – Returns the next state vector. Return type:; Matrix. table of contents. DIIS; DIIS; DIIS.add(); DIIS.extrapolate(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.DIIS.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.DIIS.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.DIIS.html:469,Availability,error,error,469,"﻿. DIIS. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. DIIS¶. class psi4.driver.p4util.DIIS(max_vec=6, removal_policy='OLDEST')[source]¶; Bases: object; An object to assist in the DIIS extrpolation procedure. Parameters:. max_vec (int) – The maximum number of error and state vectors to hold. These are pruned based off the removal policy.; removal_policy (str) – {“OLDEST”, “LARGEST”}; How the state and error vectors are removed once at the maximum. OLDEST will remove the oldest vector while; largest will remove the residual with the largest RMS value. Methods Summary. add(state, error); Adds a DIIS state and error vector to the DIIS object. extrapolate([out]); Extrapolates next state vector from the current set of state and error vectors. Methods Documentation. add(state, error)[source]¶; Adds a DIIS state and error vector to the DIIS object. Parameters:. state (Matrix) – The current state vector.; error (Matrix) – The current error vector. extrapolate(out=None)[source]¶; Extrapolates next state vector from the current set of state and error vectors. Parameters:; out (Optional[Matrix]) – A array in which to place the next state vector. Returns:; ret – Returns the next state vector. Return type:; Matrix. table of contents. DIIS; DIIS; DIIS.add(); DIIS.extrapolate(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.DIIS.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.DIIS.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.DIIS.html:649,Availability,error,error,649,"﻿. DIIS. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. DIIS¶. class psi4.driver.p4util.DIIS(max_vec=6, removal_policy='OLDEST')[source]¶; Bases: object; An object to assist in the DIIS extrpolation procedure. Parameters:. max_vec (int) – The maximum number of error and state vectors to hold. These are pruned based off the removal policy.; removal_policy (str) – {“OLDEST”, “LARGEST”}; How the state and error vectors are removed once at the maximum. OLDEST will remove the oldest vector while; largest will remove the residual with the largest RMS value. Methods Summary. add(state, error); Adds a DIIS state and error vector to the DIIS object. extrapolate([out]); Extrapolates next state vector from the current set of state and error vectors. Methods Documentation. add(state, error)[source]¶; Adds a DIIS state and error vector to the DIIS object. Parameters:. state (Matrix) – The current state vector.; error (Matrix) – The current error vector. extrapolate(out=None)[source]¶; Extrapolates next state vector from the current set of state and error vectors. Parameters:; out (Optional[Matrix]) – A array in which to place the next state vector. Returns:; ret – Returns the next state vector. Return type:; Matrix. table of contents. DIIS; DIIS; DIIS.add(); DIIS.extrapolate(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.DIIS.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.DIIS.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.DIIS.html:679,Availability,error,error,679,"﻿. DIIS. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. DIIS¶. class psi4.driver.p4util.DIIS(max_vec=6, removal_policy='OLDEST')[source]¶; Bases: object; An object to assist in the DIIS extrpolation procedure. Parameters:. max_vec (int) – The maximum number of error and state vectors to hold. These are pruned based off the removal policy.; removal_policy (str) – {“OLDEST”, “LARGEST”}; How the state and error vectors are removed once at the maximum. OLDEST will remove the oldest vector while; largest will remove the residual with the largest RMS value. Methods Summary. add(state, error); Adds a DIIS state and error vector to the DIIS object. extrapolate([out]); Extrapolates next state vector from the current set of state and error vectors. Methods Documentation. add(state, error)[source]¶; Adds a DIIS state and error vector to the DIIS object. Parameters:. state (Matrix) – The current state vector.; error (Matrix) – The current error vector. extrapolate(out=None)[source]¶; Extrapolates next state vector from the current set of state and error vectors. Parameters:; out (Optional[Matrix]) – A array in which to place the next state vector. Returns:; ret – Returns the next state vector. Return type:; Matrix. table of contents. DIIS; DIIS; DIIS.add(); DIIS.extrapolate(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.DIIS.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.DIIS.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.DIIS.html:797,Availability,error,error,797,"﻿. DIIS. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. DIIS¶. class psi4.driver.p4util.DIIS(max_vec=6, removal_policy='OLDEST')[source]¶; Bases: object; An object to assist in the DIIS extrpolation procedure. Parameters:. max_vec (int) – The maximum number of error and state vectors to hold. These are pruned based off the removal policy.; removal_policy (str) – {“OLDEST”, “LARGEST”}; How the state and error vectors are removed once at the maximum. OLDEST will remove the oldest vector while; largest will remove the residual with the largest RMS value. Methods Summary. add(state, error); Adds a DIIS state and error vector to the DIIS object. extrapolate([out]); Extrapolates next state vector from the current set of state and error vectors. Methods Documentation. add(state, error)[source]¶; Adds a DIIS state and error vector to the DIIS object. Parameters:. state (Matrix) – The current state vector.; error (Matrix) – The current error vector. extrapolate(out=None)[source]¶; Extrapolates next state vector from the current set of state and error vectors. Parameters:; out (Optional[Matrix]) – A array in which to place the next state vector. Returns:; ret – Returns the next state vector. Return type:; Matrix. table of contents. DIIS; DIIS; DIIS.add(); DIIS.extrapolate(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.DIIS.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.DIIS.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.DIIS.html:846,Availability,error,error,846,"﻿. DIIS. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. DIIS¶. class psi4.driver.p4util.DIIS(max_vec=6, removal_policy='OLDEST')[source]¶; Bases: object; An object to assist in the DIIS extrpolation procedure. Parameters:. max_vec (int) – The maximum number of error and state vectors to hold. These are pruned based off the removal policy.; removal_policy (str) – {“OLDEST”, “LARGEST”}; How the state and error vectors are removed once at the maximum. OLDEST will remove the oldest vector while; largest will remove the residual with the largest RMS value. Methods Summary. add(state, error); Adds a DIIS state and error vector to the DIIS object. extrapolate([out]); Extrapolates next state vector from the current set of state and error vectors. Methods Documentation. add(state, error)[source]¶; Adds a DIIS state and error vector to the DIIS object. Parameters:. state (Matrix) – The current state vector.; error (Matrix) – The current error vector. extrapolate(out=None)[source]¶; Extrapolates next state vector from the current set of state and error vectors. Parameters:; out (Optional[Matrix]) – A array in which to place the next state vector. Returns:; ret – Returns the next state vector. Return type:; Matrix. table of contents. DIIS; DIIS; DIIS.add(); DIIS.extrapolate(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.DIIS.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.DIIS.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.DIIS.html:885,Availability,error,error,885,"﻿. DIIS. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. DIIS¶. class psi4.driver.p4util.DIIS(max_vec=6, removal_policy='OLDEST')[source]¶; Bases: object; An object to assist in the DIIS extrpolation procedure. Parameters:. max_vec (int) – The maximum number of error and state vectors to hold. These are pruned based off the removal policy.; removal_policy (str) – {“OLDEST”, “LARGEST”}; How the state and error vectors are removed once at the maximum. OLDEST will remove the oldest vector while; largest will remove the residual with the largest RMS value. Methods Summary. add(state, error); Adds a DIIS state and error vector to the DIIS object. extrapolate([out]); Extrapolates next state vector from the current set of state and error vectors. Methods Documentation. add(state, error)[source]¶; Adds a DIIS state and error vector to the DIIS object. Parameters:. state (Matrix) – The current state vector.; error (Matrix) – The current error vector. extrapolate(out=None)[source]¶; Extrapolates next state vector from the current set of state and error vectors. Parameters:; out (Optional[Matrix]) – A array in which to place the next state vector. Returns:; ret – Returns the next state vector. Return type:; Matrix. table of contents. DIIS; DIIS; DIIS.add(); DIIS.extrapolate(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.DIIS.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.DIIS.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.DIIS.html:975,Availability,error,error,975,"﻿. DIIS. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. DIIS¶. class psi4.driver.p4util.DIIS(max_vec=6, removal_policy='OLDEST')[source]¶; Bases: object; An object to assist in the DIIS extrpolation procedure. Parameters:. max_vec (int) – The maximum number of error and state vectors to hold. These are pruned based off the removal policy.; removal_policy (str) – {“OLDEST”, “LARGEST”}; How the state and error vectors are removed once at the maximum. OLDEST will remove the oldest vector while; largest will remove the residual with the largest RMS value. Methods Summary. add(state, error); Adds a DIIS state and error vector to the DIIS object. extrapolate([out]); Extrapolates next state vector from the current set of state and error vectors. Methods Documentation. add(state, error)[source]¶; Adds a DIIS state and error vector to the DIIS object. Parameters:. state (Matrix) – The current state vector.; error (Matrix) – The current error vector. extrapolate(out=None)[source]¶; Extrapolates next state vector from the current set of state and error vectors. Parameters:; out (Optional[Matrix]) – A array in which to place the next state vector. Returns:; ret – Returns the next state vector. Return type:; Matrix. table of contents. DIIS; DIIS; DIIS.add(); DIIS.extrapolate(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.DIIS.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.DIIS.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.DIIS.html:1004,Availability,error,error,1004,"﻿. DIIS. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. DIIS¶. class psi4.driver.p4util.DIIS(max_vec=6, removal_policy='OLDEST')[source]¶; Bases: object; An object to assist in the DIIS extrpolation procedure. Parameters:. max_vec (int) – The maximum number of error and state vectors to hold. These are pruned based off the removal policy.; removal_policy (str) – {“OLDEST”, “LARGEST”}; How the state and error vectors are removed once at the maximum. OLDEST will remove the oldest vector while; largest will remove the residual with the largest RMS value. Methods Summary. add(state, error); Adds a DIIS state and error vector to the DIIS object. extrapolate([out]); Extrapolates next state vector from the current set of state and error vectors. Methods Documentation. add(state, error)[source]¶; Adds a DIIS state and error vector to the DIIS object. Parameters:. state (Matrix) – The current state vector.; error (Matrix) – The current error vector. extrapolate(out=None)[source]¶; Extrapolates next state vector from the current set of state and error vectors. Parameters:; out (Optional[Matrix]) – A array in which to place the next state vector. Returns:; ret – Returns the next state vector. Return type:; Matrix. table of contents. DIIS; DIIS; DIIS.add(); DIIS.extrapolate(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.DIIS.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.DIIS.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.DIIS.html:1115,Availability,error,error,1115,"﻿. DIIS. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. DIIS¶. class psi4.driver.p4util.DIIS(max_vec=6, removal_policy='OLDEST')[source]¶; Bases: object; An object to assist in the DIIS extrpolation procedure. Parameters:. max_vec (int) – The maximum number of error and state vectors to hold. These are pruned based off the removal policy.; removal_policy (str) – {“OLDEST”, “LARGEST”}; How the state and error vectors are removed once at the maximum. OLDEST will remove the oldest vector while; largest will remove the residual with the largest RMS value. Methods Summary. add(state, error); Adds a DIIS state and error vector to the DIIS object. extrapolate([out]); Extrapolates next state vector from the current set of state and error vectors. Methods Documentation. add(state, error)[source]¶; Adds a DIIS state and error vector to the DIIS object. Parameters:. state (Matrix) – The current state vector.; error (Matrix) – The current error vector. extrapolate(out=None)[source]¶; Extrapolates next state vector from the current set of state and error vectors. Parameters:; out (Optional[Matrix]) – A array in which to place the next state vector. Returns:; ret – Returns the next state vector. Return type:; Matrix. table of contents. DIIS; DIIS; DIIS.add(); DIIS.extrapolate(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.DIIS.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.DIIS.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.DIIS.html:1540,Deployability,update,updated,1540,"﻿. DIIS. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. DIIS¶. class psi4.driver.p4util.DIIS(max_vec=6, removal_policy='OLDEST')[source]¶; Bases: object; An object to assist in the DIIS extrpolation procedure. Parameters:. max_vec (int) – The maximum number of error and state vectors to hold. These are pruned based off the removal policy.; removal_policy (str) – {“OLDEST”, “LARGEST”}; How the state and error vectors are removed once at the maximum. OLDEST will remove the oldest vector while; largest will remove the residual with the largest RMS value. Methods Summary. add(state, error); Adds a DIIS state and error vector to the DIIS object. extrapolate([out]); Extrapolates next state vector from the current set of state and error vectors. Methods Documentation. add(state, error)[source]¶; Adds a DIIS state and error vector to the DIIS object. Parameters:. state (Matrix) – The current state vector.; error (Matrix) – The current error vector. extrapolate(out=None)[source]¶; Extrapolates next state vector from the current set of state and error vectors. Parameters:; out (Optional[Matrix]) – A array in which to place the next state vector. Returns:; ret – Returns the next state vector. Return type:; Matrix. table of contents. DIIS; DIIS; DIIS.add(); DIIS.extrapolate(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.DIIS.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.DIIS.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.docs_table_link.html:760,Deployability,update,updated,760,"﻿. docs_table_link. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; docs_table_link. docs_table_link¶. psi4.driver.p4util.docs_table_link(name, mode)[source]¶; Compose a link to mode documentation table.; For modes {“summary”, “details”}, link will be anchored at the table row for method name. (Method row not guaranteed to exist.); For other modes, link will be to table in general. Return type:; str. Parameters:. name (str) – ; mode (str) – . table of contents. docs_table_link; docs_table_link(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; docs_table_link. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.docs_table_link.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.docs_table_link.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.drop_duplicates.html:671,Deployability,update,updated,671,"﻿. drop_duplicates. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; drop_duplicates. drop_duplicates¶. psi4.driver.p4util.drop_duplicates(seq)[source]¶; Return a copy of collection seq without any duplicate entries. Parameters:; seq (Iterable) – Collection to be de-duplicated. There is no guarantee of which; duplicate entry is dropped. Return type:; List. table of contents. drop_duplicates; drop_duplicates(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; drop_duplicates. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.drop_duplicates.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.drop_duplicates.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.energies_from_fcidump.html:783,Deployability,update,updated,783,"﻿. energies_from_fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. energies_from_fcidump¶. psi4.driver.p4util.energies_from_fcidump(intdump)[source]¶; From integrals dictionary generated from fcidump_from_file(),; compute energies. Return type:; Dict[str, float]. Returns:; a dictionary with energies. ’NUCLEAR REPULSION ENERGY’; ’ONE-ELECTRON ENERGY’; ’TWO-ELECTRON ENERGY’; ’SCF TOTAL ENERGY’; ’MP2 CORRELATION ENERGY’. table of contents. energies_from_fcidump; energies_from_fcidump(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.energies_from_fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.energies_from_fcidump.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.energies_from_fcidump.html:407,Energy Efficiency,ENERGY,ENERGY,407,"﻿. energies_from_fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. energies_from_fcidump¶. psi4.driver.p4util.energies_from_fcidump(intdump)[source]¶; From integrals dictionary generated from fcidump_from_file(),; compute energies. Return type:; Dict[str, float]. Returns:; a dictionary with energies. ’NUCLEAR REPULSION ENERGY’; ’ONE-ELECTRON ENERGY’; ’TWO-ELECTRON ENERGY’; ’SCF TOTAL ENERGY’; ’MP2 CORRELATION ENERGY’. table of contents. energies_from_fcidump; energies_from_fcidump(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.energies_from_fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.energies_from_fcidump.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.energies_from_fcidump.html:430,Energy Efficiency,ENERGY,ENERGY,430,"﻿. energies_from_fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. energies_from_fcidump¶. psi4.driver.p4util.energies_from_fcidump(intdump)[source]¶; From integrals dictionary generated from fcidump_from_file(),; compute energies. Return type:; Dict[str, float]. Returns:; a dictionary with energies. ’NUCLEAR REPULSION ENERGY’; ’ONE-ELECTRON ENERGY’; ’TWO-ELECTRON ENERGY’; ’SCF TOTAL ENERGY’; ’MP2 CORRELATION ENERGY’. table of contents. energies_from_fcidump; energies_from_fcidump(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.energies_from_fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.energies_from_fcidump.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.energies_from_fcidump.html:453,Energy Efficiency,ENERGY,ENERGY,453,"﻿. energies_from_fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. energies_from_fcidump¶. psi4.driver.p4util.energies_from_fcidump(intdump)[source]¶; From integrals dictionary generated from fcidump_from_file(),; compute energies. Return type:; Dict[str, float]. Returns:; a dictionary with energies. ’NUCLEAR REPULSION ENERGY’; ’ONE-ELECTRON ENERGY’; ’TWO-ELECTRON ENERGY’; ’SCF TOTAL ENERGY’; ’MP2 CORRELATION ENERGY’. table of contents. energies_from_fcidump; energies_from_fcidump(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.energies_from_fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.energies_from_fcidump.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.energies_from_fcidump.html:473,Energy Efficiency,ENERGY,ENERGY,473,"﻿. energies_from_fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. energies_from_fcidump¶. psi4.driver.p4util.energies_from_fcidump(intdump)[source]¶; From integrals dictionary generated from fcidump_from_file(),; compute energies. Return type:; Dict[str, float]. Returns:; a dictionary with energies. ’NUCLEAR REPULSION ENERGY’; ’ONE-ELECTRON ENERGY’; ’TWO-ELECTRON ENERGY’; ’SCF TOTAL ENERGY’; ’MP2 CORRELATION ENERGY’. table of contents. energies_from_fcidump; energies_from_fcidump(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.energies_from_fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.energies_from_fcidump.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.energies_from_fcidump.html:499,Energy Efficiency,ENERGY,ENERGY,499,"﻿. energies_from_fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. energies_from_fcidump¶. psi4.driver.p4util.energies_from_fcidump(intdump)[source]¶; From integrals dictionary generated from fcidump_from_file(),; compute energies. Return type:; Dict[str, float]. Returns:; a dictionary with energies. ’NUCLEAR REPULSION ENERGY’; ’ONE-ELECTRON ENERGY’; ’TWO-ELECTRON ENERGY’; ’SCF TOTAL ENERGY’; ’MP2 CORRELATION ENERGY’. table of contents. energies_from_fcidump; energies_from_fcidump(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.energies_from_fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.energies_from_fcidump.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.expand_psivars.html:325,Availability,avail,available,325,"﻿. expand_psivars. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; expand_psivars. expand_psivars¶. psi4.driver.p4util.expand_psivars(pvdefs, verbose=None)[source]¶; From rules on building QCVariables from others, set new variables to; P::e if all the contributors are available. Parameters:. pvdefs (Dict[str, Dict[str, Union[List[str], Callable]]]) – Dictionary with keys with names of QCVariables to be created and values; with dictionary of two keys: ‘args’, the QCVariables that contribute to; the key and ‘func’, a function (or lambda) to combine them.; verbose (Optional[int]) – Control print level. If unspecified (None), value taken from; PRINT. Status printing when verbose > 2. Examples; >>> pv1 = dict(); >>> pv1['SAPT CCD DISP'] = {'func': lambda x: x[0] * x[1] + x[2] + x[3] + x[4],; 'args': ['SAPT EXCHSCAL', 'SAPT EXCH-DISP20 ENERGY', 'SAPT DISP2(CCD) ENERGY',; 'SAPT DISP22(S)(CCD) ENERGY', 'SAPT EST.DISP22(T)(CCD) ENERGY']}; >>> pv1['SAPT0 ELST ENERGY'] = {'func': sum, 'args': ['SAPT ELST10,R ENERGY']}; >>> expand_psivars(pv1). table of contents. expand_psivars; expand_psivars(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; expand_psivars. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.expand_psivars.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.expand_psivars.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.expand_psivars.html:1359,Deployability,update,updated,1359,"﻿. expand_psivars. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; expand_psivars. expand_psivars¶. psi4.driver.p4util.expand_psivars(pvdefs, verbose=None)[source]¶; From rules on building QCVariables from others, set new variables to; P::e if all the contributors are available. Parameters:. pvdefs (Dict[str, Dict[str, Union[List[str], Callable]]]) – Dictionary with keys with names of QCVariables to be created and values; with dictionary of two keys: ‘args’, the QCVariables that contribute to; the key and ‘func’, a function (or lambda) to combine them.; verbose (Optional[int]) – Control print level. If unspecified (None), value taken from; PRINT. Status printing when verbose > 2. Examples; >>> pv1 = dict(); >>> pv1['SAPT CCD DISP'] = {'func': lambda x: x[0] * x[1] + x[2] + x[3] + x[4],; 'args': ['SAPT EXCHSCAL', 'SAPT EXCH-DISP20 ENERGY', 'SAPT DISP2(CCD) ENERGY',; 'SAPT DISP22(S)(CCD) ENERGY', 'SAPT EST.DISP22(T)(CCD) ENERGY']}; >>> pv1['SAPT0 ELST ENERGY'] = {'func': sum, 'args': ['SAPT ELST10,R ENERGY']}; >>> expand_psivars(pv1). table of contents. expand_psivars; expand_psivars(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; expand_psivars. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.expand_psivars.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.expand_psivars.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.expand_psivars.html:898,Energy Efficiency,ENERGY,ENERGY,898,"﻿. expand_psivars. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; expand_psivars. expand_psivars¶. psi4.driver.p4util.expand_psivars(pvdefs, verbose=None)[source]¶; From rules on building QCVariables from others, set new variables to; P::e if all the contributors are available. Parameters:. pvdefs (Dict[str, Dict[str, Union[List[str], Callable]]]) – Dictionary with keys with names of QCVariables to be created and values; with dictionary of two keys: ‘args’, the QCVariables that contribute to; the key and ‘func’, a function (or lambda) to combine them.; verbose (Optional[int]) – Control print level. If unspecified (None), value taken from; PRINT. Status printing when verbose > 2. Examples; >>> pv1 = dict(); >>> pv1['SAPT CCD DISP'] = {'func': lambda x: x[0] * x[1] + x[2] + x[3] + x[4],; 'args': ['SAPT EXCHSCAL', 'SAPT EXCH-DISP20 ENERGY', 'SAPT DISP2(CCD) ENERGY',; 'SAPT DISP22(S)(CCD) ENERGY', 'SAPT EST.DISP22(T)(CCD) ENERGY']}; >>> pv1['SAPT0 ELST ENERGY'] = {'func': sum, 'args': ['SAPT ELST10,R ENERGY']}; >>> expand_psivars(pv1). table of contents. expand_psivars; expand_psivars(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; expand_psivars. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.expand_psivars.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.expand_psivars.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.expand_psivars.html:924,Energy Efficiency,ENERGY,ENERGY,924,"﻿. expand_psivars. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; expand_psivars. expand_psivars¶. psi4.driver.p4util.expand_psivars(pvdefs, verbose=None)[source]¶; From rules on building QCVariables from others, set new variables to; P::e if all the contributors are available. Parameters:. pvdefs (Dict[str, Dict[str, Union[List[str], Callable]]]) – Dictionary with keys with names of QCVariables to be created and values; with dictionary of two keys: ‘args’, the QCVariables that contribute to; the key and ‘func’, a function (or lambda) to combine them.; verbose (Optional[int]) – Control print level. If unspecified (None), value taken from; PRINT. Status printing when verbose > 2. Examples; >>> pv1 = dict(); >>> pv1['SAPT CCD DISP'] = {'func': lambda x: x[0] * x[1] + x[2] + x[3] + x[4],; 'args': ['SAPT EXCHSCAL', 'SAPT EXCH-DISP20 ENERGY', 'SAPT DISP2(CCD) ENERGY',; 'SAPT DISP22(S)(CCD) ENERGY', 'SAPT EST.DISP22(T)(CCD) ENERGY']}; >>> pv1['SAPT0 ELST ENERGY'] = {'func': sum, 'args': ['SAPT ELST10,R ENERGY']}; >>> expand_psivars(pv1). table of contents. expand_psivars; expand_psivars(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; expand_psivars. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.expand_psivars.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.expand_psivars.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.expand_psivars.html:955,Energy Efficiency,ENERGY,ENERGY,955,"﻿. expand_psivars. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; expand_psivars. expand_psivars¶. psi4.driver.p4util.expand_psivars(pvdefs, verbose=None)[source]¶; From rules on building QCVariables from others, set new variables to; P::e if all the contributors are available. Parameters:. pvdefs (Dict[str, Dict[str, Union[List[str], Callable]]]) – Dictionary with keys with names of QCVariables to be created and values; with dictionary of two keys: ‘args’, the QCVariables that contribute to; the key and ‘func’, a function (or lambda) to combine them.; verbose (Optional[int]) – Control print level. If unspecified (None), value taken from; PRINT. Status printing when verbose > 2. Examples; >>> pv1 = dict(); >>> pv1['SAPT CCD DISP'] = {'func': lambda x: x[0] * x[1] + x[2] + x[3] + x[4],; 'args': ['SAPT EXCHSCAL', 'SAPT EXCH-DISP20 ENERGY', 'SAPT DISP2(CCD) ENERGY',; 'SAPT DISP22(S)(CCD) ENERGY', 'SAPT EST.DISP22(T)(CCD) ENERGY']}; >>> pv1['SAPT0 ELST ENERGY'] = {'func': sum, 'args': ['SAPT ELST10,R ENERGY']}; >>> expand_psivars(pv1). table of contents. expand_psivars; expand_psivars(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; expand_psivars. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.expand_psivars.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.expand_psivars.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.expand_psivars.html:989,Energy Efficiency,ENERGY,ENERGY,989,"﻿. expand_psivars. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; expand_psivars. expand_psivars¶. psi4.driver.p4util.expand_psivars(pvdefs, verbose=None)[source]¶; From rules on building QCVariables from others, set new variables to; P::e if all the contributors are available. Parameters:. pvdefs (Dict[str, Dict[str, Union[List[str], Callable]]]) – Dictionary with keys with names of QCVariables to be created and values; with dictionary of two keys: ‘args’, the QCVariables that contribute to; the key and ‘func’, a function (or lambda) to combine them.; verbose (Optional[int]) – Control print level. If unspecified (None), value taken from; PRINT. Status printing when verbose > 2. Examples; >>> pv1 = dict(); >>> pv1['SAPT CCD DISP'] = {'func': lambda x: x[0] * x[1] + x[2] + x[3] + x[4],; 'args': ['SAPT EXCHSCAL', 'SAPT EXCH-DISP20 ENERGY', 'SAPT DISP2(CCD) ENERGY',; 'SAPT DISP22(S)(CCD) ENERGY', 'SAPT EST.DISP22(T)(CCD) ENERGY']}; >>> pv1['SAPT0 ELST ENERGY'] = {'func': sum, 'args': ['SAPT ELST10,R ENERGY']}; >>> expand_psivars(pv1). table of contents. expand_psivars; expand_psivars(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; expand_psivars. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.expand_psivars.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.expand_psivars.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.expand_psivars.html:1020,Energy Efficiency,ENERGY,ENERGY,1020,"﻿. expand_psivars. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; expand_psivars. expand_psivars¶. psi4.driver.p4util.expand_psivars(pvdefs, verbose=None)[source]¶; From rules on building QCVariables from others, set new variables to; P::e if all the contributors are available. Parameters:. pvdefs (Dict[str, Dict[str, Union[List[str], Callable]]]) – Dictionary with keys with names of QCVariables to be created and values; with dictionary of two keys: ‘args’, the QCVariables that contribute to; the key and ‘func’, a function (or lambda) to combine them.; verbose (Optional[int]) – Control print level. If unspecified (None), value taken from; PRINT. Status printing when verbose > 2. Examples; >>> pv1 = dict(); >>> pv1['SAPT CCD DISP'] = {'func': lambda x: x[0] * x[1] + x[2] + x[3] + x[4],; 'args': ['SAPT EXCHSCAL', 'SAPT EXCH-DISP20 ENERGY', 'SAPT DISP2(CCD) ENERGY',; 'SAPT DISP22(S)(CCD) ENERGY', 'SAPT EST.DISP22(T)(CCD) ENERGY']}; >>> pv1['SAPT0 ELST ENERGY'] = {'func': sum, 'args': ['SAPT ELST10,R ENERGY']}; >>> expand_psivars(pv1). table of contents. expand_psivars; expand_psivars(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; expand_psivars. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.expand_psivars.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.expand_psivars.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.expand_psivars.html:1069,Energy Efficiency,ENERGY,ENERGY,1069,"﻿. expand_psivars. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; expand_psivars. expand_psivars¶. psi4.driver.p4util.expand_psivars(pvdefs, verbose=None)[source]¶; From rules on building QCVariables from others, set new variables to; P::e if all the contributors are available. Parameters:. pvdefs (Dict[str, Dict[str, Union[List[str], Callable]]]) – Dictionary with keys with names of QCVariables to be created and values; with dictionary of two keys: ‘args’, the QCVariables that contribute to; the key and ‘func’, a function (or lambda) to combine them.; verbose (Optional[int]) – Control print level. If unspecified (None), value taken from; PRINT. Status printing when verbose > 2. Examples; >>> pv1 = dict(); >>> pv1['SAPT CCD DISP'] = {'func': lambda x: x[0] * x[1] + x[2] + x[3] + x[4],; 'args': ['SAPT EXCHSCAL', 'SAPT EXCH-DISP20 ENERGY', 'SAPT DISP2(CCD) ENERGY',; 'SAPT DISP22(S)(CCD) ENERGY', 'SAPT EST.DISP22(T)(CCD) ENERGY']}; >>> pv1['SAPT0 ELST ENERGY'] = {'func': sum, 'args': ['SAPT ELST10,R ENERGY']}; >>> expand_psivars(pv1). table of contents. expand_psivars; expand_psivars(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; expand_psivars. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.expand_psivars.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.expand_psivars.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.expand_psivars.html:278,Modifiability,variab,variables,278,"﻿. expand_psivars. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; expand_psivars. expand_psivars¶. psi4.driver.p4util.expand_psivars(pvdefs, verbose=None)[source]¶; From rules on building QCVariables from others, set new variables to; P::e if all the contributors are available. Parameters:. pvdefs (Dict[str, Dict[str, Union[List[str], Callable]]]) – Dictionary with keys with names of QCVariables to be created and values; with dictionary of two keys: ‘args’, the QCVariables that contribute to; the key and ‘func’, a function (or lambda) to combine them.; verbose (Optional[int]) – Control print level. If unspecified (None), value taken from; PRINT. Status printing when verbose > 2. Examples; >>> pv1 = dict(); >>> pv1['SAPT CCD DISP'] = {'func': lambda x: x[0] * x[1] + x[2] + x[3] + x[4],; 'args': ['SAPT EXCHSCAL', 'SAPT EXCH-DISP20 ENERGY', 'SAPT DISP2(CCD) ENERGY',; 'SAPT DISP22(S)(CCD) ENERGY', 'SAPT EST.DISP22(T)(CCD) ENERGY']}; >>> pv1['SAPT0 ELST ENERGY'] = {'func': sum, 'args': ['SAPT ELST10,R ENERGY']}; >>> expand_psivars(pv1). table of contents. expand_psivars; expand_psivars(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; expand_psivars. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.expand_psivars.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.expand_psivars.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.fcidump.html:1401,Deployability,update,updated,1401,"﻿. fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump. fcidump¶. psi4.driver.p4util.fcidump(wfn, fname='INTDUMP', oe_ints=None)[source]¶; Save integrals to file in FCIDUMP format as defined in Comp. Phys. Commun. 54 75 (1989),; https://doi.org/10.1016/0010-4655(89)90033-7 .; Additional one-electron integrals, including orbital energies, can also be saved.; This latter format can be used with the HANDE QMC code but is not standard. Parameters:. wfn (Wavefunction) – Set of molecule, basis, orbitals from which to generate FCIDUMP file.; fname (str) – Name of the integrals file, defaults to INTDUMP.; oe_ints (Optional[List]) – List of additional one-electron integrals to save to file. So far only; EIGENVALUES is a valid option. Raises:; ValidationError – When SCF wavefunction is not RHF. Examples; >>> # [1] Save one- and two-electron integrals to standard FCIDUMP format; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn). >>> # [2] Save orbital energies, one- and two-electron integrals.; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn, oe_ints=['EIGENVALUES']). table of contents. fcidump; fcidump(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.fcidump.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.fcidump.html:963,Energy Efficiency,energy,energy,963,"﻿. fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump. fcidump¶. psi4.driver.p4util.fcidump(wfn, fname='INTDUMP', oe_ints=None)[source]¶; Save integrals to file in FCIDUMP format as defined in Comp. Phys. Commun. 54 75 (1989),; https://doi.org/10.1016/0010-4655(89)90033-7 .; Additional one-electron integrals, including orbital energies, can also be saved.; This latter format can be used with the HANDE QMC code but is not standard. Parameters:. wfn (Wavefunction) – Set of molecule, basis, orbitals from which to generate FCIDUMP file.; fname (str) – Name of the integrals file, defaults to INTDUMP.; oe_ints (Optional[List]) – List of additional one-electron integrals to save to file. So far only; EIGENVALUES is a valid option. Raises:; ValidationError – When SCF wavefunction is not RHF. Examples; >>> # [1] Save one- and two-electron integrals to standard FCIDUMP format; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn). >>> # [2] Save orbital energies, one- and two-electron integrals.; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn, oe_ints=['EIGENVALUES']). table of contents. fcidump; fcidump(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.fcidump.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.fcidump.html:1093,Energy Efficiency,energy,energy,1093,"﻿. fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump. fcidump¶. psi4.driver.p4util.fcidump(wfn, fname='INTDUMP', oe_ints=None)[source]¶; Save integrals to file in FCIDUMP format as defined in Comp. Phys. Commun. 54 75 (1989),; https://doi.org/10.1016/0010-4655(89)90033-7 .; Additional one-electron integrals, including orbital energies, can also be saved.; This latter format can be used with the HANDE QMC code but is not standard. Parameters:. wfn (Wavefunction) – Set of molecule, basis, orbitals from which to generate FCIDUMP file.; fname (str) – Name of the integrals file, defaults to INTDUMP.; oe_ints (Optional[List]) – List of additional one-electron integrals to save to file. So far only; EIGENVALUES is a valid option. Raises:; ValidationError – When SCF wavefunction is not RHF. Examples; >>> # [1] Save one- and two-electron integrals to standard FCIDUMP format; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn). >>> # [2] Save orbital energies, one- and two-electron integrals.; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn, oe_ints=['EIGENVALUES']). table of contents. fcidump; fcidump(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.fcidump.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.fcidump.html:813,Security,Validat,ValidationError,813,"﻿. fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump. fcidump¶. psi4.driver.p4util.fcidump(wfn, fname='INTDUMP', oe_ints=None)[source]¶; Save integrals to file in FCIDUMP format as defined in Comp. Phys. Commun. 54 75 (1989),; https://doi.org/10.1016/0010-4655(89)90033-7 .; Additional one-electron integrals, including orbital energies, can also be saved.; This latter format can be used with the HANDE QMC code but is not standard. Parameters:. wfn (Wavefunction) – Set of molecule, basis, orbitals from which to generate FCIDUMP file.; fname (str) – Name of the integrals file, defaults to INTDUMP.; oe_ints (Optional[List]) – List of additional one-electron integrals to save to file. So far only; EIGENVALUES is a valid option. Raises:; ValidationError – When SCF wavefunction is not RHF. Examples; >>> # [1] Save one- and two-electron integrals to standard FCIDUMP format; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn). >>> # [2] Save orbital energies, one- and two-electron integrals.; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn, oe_ints=['EIGENVALUES']). table of contents. fcidump; fcidump(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.fcidump.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.fcidump_from_file.html:1056,Deployability,update,updated,1056,"﻿. fcidump_from_file. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump_from_file. fcidump_from_file¶. psi4.driver.p4util.fcidump_from_file(fname)[source]¶; Function to read in a FCIDUMP file. Return type:; Dict[str, Any]. Returns:; a dictionary with FCIDUMP header and integrals. ’norb’ : number of basis functions; ’nelec’ : number of electrons; ’ms2’ : spin polarization of the system; ’isym’ : symmetry of state (if present in FCIDUMP); ’orbsym’ : list of symmetry labels of each orbital; ’uhf’ : whether restricted or unrestricted; ’enuc’ : nuclear repulsion plus frozen core energy; ’epsilon’ : orbital energies; ’hcore’ : core Hamiltonian; ’eri’ : electron-repulsion integrals. Parameters:; fname (str) – FCIDUMP file name. table of contents. fcidump_from_file; fcidump_from_file(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump_from_file. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.fcidump_from_file.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.fcidump_from_file.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.fcidump_from_file.html:643,Energy Efficiency,energy,energy,643,"﻿. fcidump_from_file. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump_from_file. fcidump_from_file¶. psi4.driver.p4util.fcidump_from_file(fname)[source]¶; Function to read in a FCIDUMP file. Return type:; Dict[str, Any]. Returns:; a dictionary with FCIDUMP header and integrals. ’norb’ : number of basis functions; ’nelec’ : number of electrons; ’ms2’ : spin polarization of the system; ’isym’ : symmetry of state (if present in FCIDUMP); ’orbsym’ : list of symmetry labels of each orbital; ’uhf’ : whether restricted or unrestricted; ’enuc’ : nuclear repulsion plus frozen core energy; ’epsilon’ : orbital energies; ’hcore’ : core Hamiltonian; ’eri’ : electron-repulsion integrals. Parameters:; fname (str) – FCIDUMP file name. table of contents. fcidump_from_file; fcidump_from_file(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump_from_file. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.fcidump_from_file.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.fcidump_from_file.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.find_approximate_string_matches.html:935,Deployability,update,updated,935,"﻿. find_approximate_string_matches. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; find_approximate_string_matches. find_approximate_string_matches¶. psi4.driver.p4util.find_approximate_string_matches(seq1, options, max_distance)[source]¶; Find list of approximate (within max_distance) matches to string seq1 among options. Parameters:. seq1 (str) – Target string to look for near matches to.; options (List[str]) – Alternatives among which to look for near matches to seq1.; max_distance (int) – Maximum Levenshtein distance from seq1 to return. Return type:; List[str]. table of contents. find_approximate_string_matches; find_approximate_string_matches(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; find_approximate_string_matches. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.find_approximate_string_matches.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.find_approximate_string_matches.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.format_molecule_for_input.html:1102,Deployability,update,updated,1102,"﻿. format_molecule_for_input. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; format_molecule_for_input. format_molecule_for_input¶. psi4.driver.p4util.format_molecule_for_input(mol, name='', forcexyz=False)[source]¶; Function to return a string of the output of; process_input() applied to the XYZ; format of molecule, passed as either fragmented; geometry string mol or molecule instance mol.; Used to capture molecule information from database; modules and for distributed (sow/reap) input files.; For the reverse, see geometry(). Parameters:. mol (Union[str, Molecule]) – Fragmented geometry string or molecule instance.; name (str) – Name to call the resulting molecule.; forcexyz (bool) – Use Cartesians, even for Z-Matrix molecules. Return type:; str. table of contents. format_molecule_for_input; format_molecule_for_input(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; format_molecule_for_input. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.format_molecule_for_input.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.format_molecule_for_input.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.format_options_for_input.html:932,Deployability,update,updated,932,"﻿. format_options_for_input. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; format_options_for_input. format_options_for_input¶. psi4.driver.p4util.format_options_for_input(molecule=None, **kwargs)[source]¶; Function to return a string of commands to replicate the; current state of user-modified options. Used to capture C++; options information for distributed (sow/reap) input files.; :rtype: str. Caution; Some features are not yet implemented. Buy a developer a coffee. Does not cover local (as opposed to global) options. Parameters:; molecule (Molecule | None) – . Return type:; str. table of contents. format_options_for_input; format_options_for_input(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; format_options_for_input. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.format_options_for_input.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.format_options_for_input.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.free_atom_volumes.html:1071,Deployability,update,updated,1071,"﻿. free_atom_volumes. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; free_atom_volumes. free_atom_volumes¶. psi4.driver.p4util.free_atom_volumes(wfn, **kwargs)[source]¶; Computes free-atom volumes using MBIS density partitioning.; The free-atom volumes are computed for all unique (inc. basis set); atoms in a molecule and stored as wavefunction variables, MBIS FREE ATOM n VOLUME.; Free-atom densities are computed at the same level of theory as the molecule,; and we use unrestricted references as needed in computing the ground-state.; The free-atom volumes are used to compute volume ratios in routine MBIS computations. Parameters:; wfn (Wavefunction) – The wave function associated with the molecule, method, and basis for; atomic computations. table of contents. free_atom_volumes; free_atom_volumes(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; free_atom_volumes. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.free_atom_volumes.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.free_atom_volumes.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.free_atom_volumes.html:655,Integrability,rout,routine,655,"﻿. free_atom_volumes. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; free_atom_volumes. free_atom_volumes¶. psi4.driver.p4util.free_atom_volumes(wfn, **kwargs)[source]¶; Computes free-atom volumes using MBIS density partitioning.; The free-atom volumes are computed for all unique (inc. basis set); atoms in a molecule and stored as wavefunction variables, MBIS FREE ATOM n VOLUME.; Free-atom densities are computed at the same level of theory as the molecule,; and we use unrestricted references as needed in computing the ground-state.; The free-atom volumes are used to compute volume ratios in routine MBIS computations. Parameters:; wfn (Wavefunction) – The wave function associated with the molecule, method, and basis for; atomic computations. table of contents. free_atom_volumes; free_atom_volumes(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; free_atom_volumes. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.free_atom_volumes.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.free_atom_volumes.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.free_atom_volumes.html:403,Modifiability,variab,variables,403,"﻿. free_atom_volumes. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; free_atom_volumes. free_atom_volumes¶. psi4.driver.p4util.free_atom_volumes(wfn, **kwargs)[source]¶; Computes free-atom volumes using MBIS density partitioning.; The free-atom volumes are computed for all unique (inc. basis set); atoms in a molecule and stored as wavefunction variables, MBIS FREE ATOM n VOLUME.; Free-atom densities are computed at the same level of theory as the molecule,; and we use unrestricted references as needed in computing the ground-state.; The free-atom volumes are used to compute volume ratios in routine MBIS computations. Parameters:; wfn (Wavefunction) – The wave function associated with the molecule, method, and basis for; atomic computations. table of contents. free_atom_volumes; free_atom_volumes(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; free_atom_volumes. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.free_atom_volumes.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.free_atom_volumes.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.Gaussian.html:1478,Deployability,update,updated,1478,"﻿. Gaussian. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; Gaussian. Gaussian¶. class psi4.driver.p4util.Gaussian(domain, gamma)[source]¶; Bases: Lineshape; Gaussian function on domain, centered at x_0 with broadening gamma. Parameters:. domain (Union[ndarray, List[float]]) – The domain of the Gaussian profile.; gamma (Callable[[float], float]) – Broadening parameter.; This is related to the full width at half maximum as \(\mathrm{FWHM} = \gamma \sqrt{2\ln 2}\). Notes; Use this profile to model inhomegenous broadening.; Methods Summary. lineshape(x_0); Gaussian function on Lineshape.domain, centered at x_0 with broadening Lineshape.gamma. maximum(x_0); Maximum value of Gaussian profile centered at x_0. Methods Documentation. lineshape(x_0)[source]¶; Gaussian function on Lineshape.domain, centered at x_0 with broadening Lineshape.gamma. Parameters:; x_0 (float) – Center of the Gaussian, i.e. its maximum. Returns:; The Gaussian profile. Return type:; numpy.ndarray. maximum(x_0)[source]¶; Maximum value of Gaussian profile centered at x_0. Parameters:; x_0 (float) – Center of the Lorentzian, i.e. its maximum. Return type:; float. table of contents. Gaussian; Gaussian; Gaussian.lineshape(); Gaussian.maximum(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; Gaussian. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.Gaussian.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.Gaussian.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.getattr_ignorecase.html:277,Availability,avail,available,277,"﻿. getattr_ignorecase. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; getattr_ignorecase. getattr_ignorecase¶. psi4.driver.p4util.getattr_ignorecase(module, attr)[source]¶; Extract attribute attr from module if attr; is available in any possible lettercase permutation. Parameters:. module (str) – Object on which to seek attr.; attr (str) – Name of attribute with uncertain case. Returns:; attribute – Module attribute returned if available. None if not. Return type:; Any. table of contents. getattr_ignorecase; getattr_ignorecase(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; getattr_ignorecase. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.getattr_ignorecase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.getattr_ignorecase.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.getattr_ignorecase.html:489,Availability,avail,available,489,"﻿. getattr_ignorecase. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; getattr_ignorecase. getattr_ignorecase¶. psi4.driver.p4util.getattr_ignorecase(module, attr)[source]¶; Extract attribute attr from module if attr; is available in any possible lettercase permutation. Parameters:. module (str) – Object on which to seek attr.; attr (str) – Name of attribute with uncertain case. Returns:; attribute – Module attribute returned if available. None if not. Return type:; Any. table of contents. getattr_ignorecase; getattr_ignorecase(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; getattr_ignorecase. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.getattr_ignorecase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.getattr_ignorecase.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.getattr_ignorecase.html:798,Deployability,update,updated,798,"﻿. getattr_ignorecase. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; getattr_ignorecase. getattr_ignorecase¶. psi4.driver.p4util.getattr_ignorecase(module, attr)[source]¶; Extract attribute attr from module if attr; is available in any possible lettercase permutation. Parameters:. module (str) – Object on which to seek attr.; attr (str) – Name of attribute with uncertain case. Returns:; attribute – Module attribute returned if available. None if not. Return type:; Any. table of contents. getattr_ignorecase; getattr_ignorecase(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; getattr_ignorecase. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.getattr_ignorecase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.getattr_ignorecase.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.get_memory.html:492,Deployability,update,updated,492,"﻿. get_memory. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; get_memory. get_memory¶. psi4.driver.p4util.get_memory()[source]¶; Return the total memory allocation in bytes. Return type:; int. table of contents. get_memory; get_memory(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; get_memory. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.get_memory.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.get_memory.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.get_psifile.html:697,Deployability,update,updated,697,"﻿. get_psifile. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; get_psifile. get_psifile¶. psi4.driver.p4util.get_psifile(fileno, pidspace='3588')[source]¶; Form full path and filename for psi scratch file. Parameters:. fileno (int) – Psi file, e.g., psi.32.; pidspace (str) – Current namespace. Defaults to os.getpid(). Returns:; flpath – Full path and filename for psi file. Return type:; str. table of contents. get_psifile; get_psifile(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; get_psifile. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.get_psifile.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.get_psifile.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.hamiltonian_solver.html:1843,Availability,toler,tolerance,1843,")\) is positive definite, we can transform the problem to arrive at the hermitian NxN EVP:; \((A-B)^{1/2}(A+B)(A-B)^{1/2} = w^2 T\); Where \(T = (A-B)^{-1/2}(X+Y)\).; We use a Davidson like iteration where we transform \((A+B)\) (H1) and \((A-B)\); (H2) in to the subspace defined by the trial vectors.; The subspace analog of the NxN hermitian EVP is diagonalized and left \((X-Y)\); and right \((X+Y)\) eigenvectors of the NxN non-hermitian EVP are approximated.; Residual vectors are formed for both and the guess space is augmented with; two correction vectors per iteration. The advantages and properties of this; algorithm are described in the literature [stratmann:1998] . Parameters:. engine (Type[SolverEngine]) – The engine drive all operations involving data structures that have at; least one “large” dimension. See SolverEngine for requirements; guess (List) – list {engine dependent}; At least nroot initial expansion vectors; nroot (int) – Number of roots desired; r_convergence (float) – Convergence tolerance for residual vectors; max_ss_size (int) – The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, 2 -> all but matrices, >2 -> everything). Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of w, computed on the last iteration of the solver; best_R (List[vector]) – (nroots) The best approximation of the right hand eigenvectors, \(X+Y\), computed on the last iteration of the solver.; best_L (List[vector]) – (nroots) The best approximation of the left hand eigenvectors, \(X-Y\), computed on the last iteration of the solver.; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue correspo",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.hamiltonian_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.hamiltonian_solver.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.hamiltonian_solver.html:3305,Availability,failure,failure,3305,"n the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, 2 -> all but matrices, >2 -> everything). Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of w, computed on the last iteration of the solver; best_R (List[vector]) – (nroots) The best approximation of the right hand eigenvectors, \(X+Y\), computed on the last iteration of the solver.; best_L (List[vector]) – (nroots) The best approximation of the left hand eigenvectors, \(X-Y\), computed on the last iteration of the solver.; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. Notes; The solution vector is normalized to 1/2; The solver will return even when maxiter iterations are performed without convergence.; The caller must check stats[-1]['done'] for failure and handle each case accordingly.; References; R. Eric Stratmann, G. E. Scuseria, and M. J. Frisch, “An efficient; implementation of time-dependent density-functional theory for the; calculation of excitation energies of large molecules.” J. Chem. Phys.,; 109, 8218 (1998). table of contents. hamiltonian_solver; hamiltonian_solver(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; hamiltonian_solver. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.hamiltonian_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.hamiltonian_solver.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.hamiltonian_solver.html:3853,Deployability,update,updated,3853,"n the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, 2 -> all but matrices, >2 -> everything). Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of w, computed on the last iteration of the solver; best_R (List[vector]) – (nroots) The best approximation of the right hand eigenvectors, \(X+Y\), computed on the last iteration of the solver.; best_L (List[vector]) – (nroots) The best approximation of the left hand eigenvectors, \(X-Y\), computed on the last iteration of the solver.; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. Notes; The solution vector is normalized to 1/2; The solver will return even when maxiter iterations are performed without convergence.; The caller must check stats[-1]['done'] for failure and handle each case accordingly.; References; R. Eric Stratmann, G. E. Scuseria, and M. J. Frisch, “An efficient; implementation of time-dependent density-functional theory for the; calculation of excitation energies of large molecules.” J. Chem. Phys.,; 109, 8218 (1998). table of contents. hamiltonian_solver; hamiltonian_solver(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; hamiltonian_solver. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.hamiltonian_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.hamiltonian_solver.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.hamiltonian_solver.html:3417,Energy Efficiency,efficient,efficient,3417,"n the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, 2 -> all but matrices, >2 -> everything). Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of w, computed on the last iteration of the solver; best_R (List[vector]) – (nroots) The best approximation of the right hand eigenvectors, \(X+Y\), computed on the last iteration of the solver.; best_L (List[vector]) – (nroots) The best approximation of the left hand eigenvectors, \(X-Y\), computed on the last iteration of the solver.; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. Notes; The solution vector is normalized to 1/2; The solver will return even when maxiter iterations are performed without convergence.; The caller must check stats[-1]['done'] for failure and handle each case accordingly.; References; R. Eric Stratmann, G. E. Scuseria, and M. J. Frisch, “An efficient; implementation of time-dependent density-functional theory for the; calculation of excitation energies of large molecules.” J. Chem. Phys.,; 109, 8218 (1998). table of contents. hamiltonian_solver; hamiltonian_solver(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; hamiltonian_solver. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.hamiltonian_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.hamiltonian_solver.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.hamiltonian_solver.html:1714,Integrability,depend,dependent,1714,")\) is positive definite, we can transform the problem to arrive at the hermitian NxN EVP:; \((A-B)^{1/2}(A+B)(A-B)^{1/2} = w^2 T\); Where \(T = (A-B)^{-1/2}(X+Y)\).; We use a Davidson like iteration where we transform \((A+B)\) (H1) and \((A-B)\); (H2) in to the subspace defined by the trial vectors.; The subspace analog of the NxN hermitian EVP is diagonalized and left \((X-Y)\); and right \((X+Y)\) eigenvectors of the NxN non-hermitian EVP are approximated.; Residual vectors are formed for both and the guess space is augmented with; two correction vectors per iteration. The advantages and properties of this; algorithm are described in the literature [stratmann:1998] . Parameters:. engine (Type[SolverEngine]) – The engine drive all operations involving data structures that have at; least one “large” dimension. See SolverEngine for requirements; guess (List) – list {engine dependent}; At least nroot initial expansion vectors; nroot (int) – Number of roots desired; r_convergence (float) – Convergence tolerance for residual vectors; max_ss_size (int) – The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, 2 -> all but matrices, >2 -> everything). Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of w, computed on the last iteration of the solver; best_R (List[vector]) – (nroots) The best approximation of the right hand eigenvectors, \(X+Y\), computed on the last iteration of the solver.; best_L (List[vector]) – (nroots) The best approximation of the left hand eigenvectors, \(X-Y\), computed on the last iteration of the solver.; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue correspo",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.hamiltonian_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.hamiltonian_solver.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.hamiltonian_solver.html:3451,Integrability,depend,dependent,3451,"n the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, 2 -> all but matrices, >2 -> everything). Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of w, computed on the last iteration of the solver; best_R (List[vector]) – (nroots) The best approximation of the right hand eigenvectors, \(X+Y\), computed on the last iteration of the solver.; best_L (List[vector]) – (nroots) The best approximation of the left hand eigenvectors, \(X-Y\), computed on the last iteration of the solver.; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. Notes; The solution vector is normalized to 1/2; The solver will return even when maxiter iterations are performed without convergence.; The caller must check stats[-1]['done'] for failure and handle each case accordingly.; References; R. Eric Stratmann, G. E. Scuseria, and M. J. Frisch, “An efficient; implementation of time-dependent density-functional theory for the; calculation of excitation energies of large molecules.” J. Chem. Phys.,; 109, 8218 (1998). table of contents. hamiltonian_solver; hamiltonian_solver(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; hamiltonian_solver. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.hamiltonian_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.hamiltonian_solver.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.hamiltonian_solver.html:2989,Performance,perform,performed,2989,"n the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, 2 -> all but matrices, >2 -> everything). Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of w, computed on the last iteration of the solver; best_R (List[vector]) – (nroots) The best approximation of the right hand eigenvectors, \(X+Y\), computed on the last iteration of the solver.; best_L (List[vector]) – (nroots) The best approximation of the left hand eigenvectors, \(X-Y\), computed on the last iteration of the solver.; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. Notes; The solution vector is normalized to 1/2; The solver will return even when maxiter iterations are performed without convergence.; The caller must check stats[-1]['done'] for failure and handle each case accordingly.; References; R. Eric Stratmann, G. E. Scuseria, and M. J. Frisch, “An efficient; implementation of time-dependent density-functional theory for the; calculation of excitation energies of large molecules.” J. Chem. Phys.,; 109, 8218 (1998). table of contents. hamiltonian_solver; hamiltonian_solver(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; hamiltonian_solver. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.hamiltonian_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.hamiltonian_solver.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.hamiltonian_solver.html:3071,Performance,perform,performed,3071,"n the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, 2 -> all but matrices, >2 -> everything). Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of w, computed on the last iteration of the solver; best_R (List[vector]) – (nroots) The best approximation of the right hand eigenvectors, \(X+Y\), computed on the last iteration of the solver.; best_L (List[vector]) – (nroots) The best approximation of the left hand eigenvectors, \(X-Y\), computed on the last iteration of the solver.; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. Notes; The solution vector is normalized to 1/2; The solver will return even when maxiter iterations are performed without convergence.; The caller must check stats[-1]['done'] for failure and handle each case accordingly.; References; R. Eric Stratmann, G. E. Scuseria, and M. J. Frisch, “An efficient; implementation of time-dependent density-functional theory for the; calculation of excitation energies of large molecules.” J. Chem. Phys.,; 109, 8218 (1998). table of contents. hamiltonian_solver; hamiltonian_solver(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; hamiltonian_solver. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.hamiltonian_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.hamiltonian_solver.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.hamiltonian_solver.html:3229,Performance,perform,performed,3229,"n the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, 2 -> all but matrices, >2 -> everything). Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of w, computed on the last iteration of the solver; best_R (List[vector]) – (nroots) The best approximation of the right hand eigenvectors, \(X+Y\), computed on the last iteration of the solver.; best_L (List[vector]) – (nroots) The best approximation of the left hand eigenvectors, \(X-Y\), computed on the last iteration of the solver.; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. Notes; The solution vector is normalized to 1/2; The solver will return even when maxiter iterations are performed without convergence.; The caller must check stats[-1]['done'] for failure and handle each case accordingly.; References; R. Eric Stratmann, G. E. Scuseria, and M. J. Frisch, “An efficient; implementation of time-dependent density-functional theory for the; calculation of excitation energies of large molecules.” J. Chem. Phys.,; 109, 8218 (1998). table of contents. hamiltonian_solver; hamiltonian_solver(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; hamiltonian_solver. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.hamiltonian_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.hamiltonian_solver.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.hamiltonian_solver.html:2086,Testability,log,logging,2086,"he subspace defined by the trial vectors.; The subspace analog of the NxN hermitian EVP is diagonalized and left \((X-Y)\); and right \((X+Y)\) eigenvectors of the NxN non-hermitian EVP are approximated.; Residual vectors are formed for both and the guess space is augmented with; two correction vectors per iteration. The advantages and properties of this; algorithm are described in the literature [stratmann:1998] . Parameters:. engine (Type[SolverEngine]) – The engine drive all operations involving data structures that have at; least one “large” dimension. See SolverEngine for requirements; guess (List) – list {engine dependent}; At least nroot initial expansion vectors; nroot (int) – Number of roots desired; r_convergence (float) – Convergence tolerance for residual vectors; max_ss_size (int) – The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, 2 -> all but matrices, >2 -> everything). Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of w, computed on the last iteration of the solver; best_R (List[vector]) – (nroots) The best approximation of the right hand eigenvectors, \(X+Y\), computed on the last iteration of the solver.; best_L (List[vector]) – (nroots) The best approximation of the left hand eigenvectors, \(X-Y\), computed on the last iteration of the solver.; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done :",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.hamiltonian_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.hamiltonian_solver.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.hold_options_state.html:723,Deployability,update,updated,723,"﻿. hold_options_state. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; hold_options_state. hold_options_state¶. psi4.driver.p4util.hold_options_state()[source]¶; Return a context manager that will collect the current state of; Process:environment.options on entry to the with-statement and clear; and restore the collected keywords state when exiting the with-statement. Return type:; Iterator[None]. table of contents. hold_options_state; hold_options_state(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; hold_options_state. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.hold_options_state.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.hold_options_state.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.hold_options_state.html:346,Usability,clear,clear,346,"﻿. hold_options_state. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; hold_options_state. hold_options_state¶. psi4.driver.p4util.hold_options_state()[source]¶; Return a context manager that will collect the current state of; Process:environment.options on entry to the with-statement and clear; and restore the collected keywords state when exiting the with-statement. Return type:; Iterator[None]. table of contents. hold_options_state; hold_options_state(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; hold_options_state. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.hold_options_state.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.hold_options_state.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.import_ignorecase.html:669,Deployability,update,updated,669,"﻿. import_ignorecase. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; import_ignorecase. import_ignorecase¶. psi4.driver.p4util.import_ignorecase(module)[source]¶; Import loader for module in any possible lettercase permutation. Parameters:; module (str) – Name of module with uncertain case. Returns:; Module object. Return type:; types.ModuleType. table of contents. import_ignorecase; import_ignorecase(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; import_ignorecase. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.import_ignorecase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.import_ignorecase.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.import_ignorecase.html:227,Performance,load,loader,227,"﻿. import_ignorecase. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; import_ignorecase. import_ignorecase¶. psi4.driver.p4util.import_ignorecase(module)[source]¶; Import loader for module in any possible lettercase permutation. Parameters:; module (str) – Name of module with uncertain case. Returns:; Module object. Return type:; types.ModuleType. table of contents. import_ignorecase; import_ignorecase(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; import_ignorecase. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.import_ignorecase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.import_ignorecase.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.InPsight.html:5169,Deployability,update,updated,5169,"1.562, 1.562, 1.562, 1.562, 1.562, 1.562, 1.562, 1.562, 1.562, 1.562, 1.65, 1.727, 1.76, 1.771, 1.749, 1.727, 1.628, 1.606, 1.639, 1.639, 1.639, 1.639, 1.639, 1.639, 1.639, 1.639, 1.639, 1.639, 1.672, 1.804, 1.881, 1.892, 1.892, 1.881, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]¶. right = [1.0, 0.0, 0.0]¶. sky = [0.0, -1.0, 0.0]¶. up = [0.0, 0.75, 0.0]¶. width = 1200¶. zoom = 0.5¶. Methods Documentation. position_camera()[source]¶. save_density(filename='rho', overlap=2.0, n=[40, 40, 40], caxis=[0.0, 1.0])[source]¶. save_molecule(filename)[source]¶. set_camera(location, sky, up, right, look_at, light, light_color)[source]¶. set_color(Z, color)[source]¶. set_define(key, value)[source]¶. set_radius(Z, radius)[source]¶. set_size(width, height)[source]¶. set_view(azimuth, elevation, zoom=0.7)[source]¶. update_geometry()[source]¶. table of contents. InPsight; InPsight; InPsight.atoms; InPsight.azimuth; InPsight.bohr_per_ang; InPsight.bond_width; InPsight.bonding_alpha; InPsight.bonds; InPsight.colors; InPsight.defines; InPsight.elevation; InPsight.height; InPsight.light; InPsight.light_color; InPsight.location; InPsight.look_at; InPsight.radial_scale; InPsight.radii; InPsight.right; InPsight.sky; InPsight.up; InPsight.width; InPsight.zoom; InPsight.position_camera(); InPsight.save_density(); InPsight.save_molecule(); InPsight.set_camera(); InPsight.set_color(); InPsight.set_define(); InPsight.set_radius(); InPsight.set_size(); InPsight.set_view(); InPsight.update_geometry(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; InPsight. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.InPsight.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.InPsight.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.kwargs_lower.html:861,Deployability,update,updated,861,"﻿. kwargs_lower. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; kwargs_lower. kwargs_lower¶. psi4.driver.p4util.kwargs_lower(kwargs)[source]¶; Function to rebuild and return kwargs dictionary sanitized. Should be; called by every function that could be called directly by the user. Parameters:; kwargs (Dict[str, Any]) – Input kwargs for any user-facing function. Returns:; lowered – Sanitized kwargs with all keys made lowercase. Also turns boolean-like; values into actual booleans. Also turns values lowercase if sensible. Return type:; Dict[str, Any]. table of contents. kwargs_lower; kwargs_lower(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; kwargs_lower. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.kwargs_lower.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.kwargs_lower.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.kwargs_lower.html:249,Security,sanitiz,sanitized,249,"﻿. kwargs_lower. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; kwargs_lower. kwargs_lower¶. psi4.driver.p4util.kwargs_lower(kwargs)[source]¶; Function to rebuild and return kwargs dictionary sanitized. Should be; called by every function that could be called directly by the user. Parameters:; kwargs (Dict[str, Any]) – Input kwargs for any user-facing function. Returns:; lowered – Sanitized kwargs with all keys made lowercase. Also turns boolean-like; values into actual booleans. Also turns values lowercase if sensible. Return type:; Dict[str, Any]. table of contents. kwargs_lower; kwargs_lower(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; kwargs_lower. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.kwargs_lower.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.kwargs_lower.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.kwargs_lower.html:441,Security,Sanitiz,Sanitized,441,"﻿. kwargs_lower. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; kwargs_lower. kwargs_lower¶. psi4.driver.p4util.kwargs_lower(kwargs)[source]¶; Function to rebuild and return kwargs dictionary sanitized. Should be; called by every function that could be called directly by the user. Parameters:; kwargs (Dict[str, Any]) – Input kwargs for any user-facing function. Returns:; lowered – Sanitized kwargs with all keys made lowercase. Also turns boolean-like; values into actual booleans. Also turns values lowercase if sensible. Return type:; Dict[str, Any]. table of contents. kwargs_lower; kwargs_lower(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; kwargs_lower. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.kwargs_lower.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.kwargs_lower.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.levenshtein.html:587,Deployability,update,updated,587,"﻿. levenshtein. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; levenshtein. levenshtein¶. psi4.driver.p4util.levenshtein(seq1, seq2)[source]¶; Compute the Levenshtein distance between two strings. Parameters:. seq1 (str) – First string.; seq2 (str) – Second string. Return type:; int. table of contents. levenshtein; levenshtein(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; levenshtein. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.levenshtein.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.levenshtein.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.libint2_configuration.html:474,Deployability,configurat,configuration,474,"﻿. libint2_configuration. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; libint2_configuration. libint2_configuration¶. psi4.driver.p4util.libint2_configuration()[source]¶; Returns information on integral classes, derivatives, and AM from currently linked Libint2. Return type:; Dict[str, List[int]]. Returns:. Dictionary of integrals classes with values an array of max angular momentum per derivative level.; Usual configuration returns – {‘eri’: [5, 4, 3], ‘eri2’: [6, 5, 4], ‘eri3’: [6, 5, 4], ‘onebody’: [6, 5, 4]}. table of contents. libint2_configuration; libint2_configuration(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; libint2_configuration. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.libint2_configuration.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.libint2_configuration.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.libint2_configuration.html:853,Deployability,update,updated,853,"﻿. libint2_configuration. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; libint2_configuration. libint2_configuration¶. psi4.driver.p4util.libint2_configuration()[source]¶; Returns information on integral classes, derivatives, and AM from currently linked Libint2. Return type:; Dict[str, List[int]]. Returns:. Dictionary of integrals classes with values an array of max angular momentum per derivative level.; Usual configuration returns – {‘eri’: [5, 4, 3], ‘eri2’: [6, 5, 4], ‘eri3’: [6, 5, 4], ‘onebody’: [6, 5, 4]}. table of contents. libint2_configuration; libint2_configuration(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; libint2_configuration. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.libint2_configuration.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.libint2_configuration.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.libint2_configuration.html:474,Modifiability,config,configuration,474,"﻿. libint2_configuration. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; libint2_configuration. libint2_configuration¶. psi4.driver.p4util.libint2_configuration()[source]¶; Returns information on integral classes, derivatives, and AM from currently linked Libint2. Return type:; Dict[str, List[int]]. Returns:. Dictionary of integrals classes with values an array of max angular momentum per derivative level.; Usual configuration returns – {‘eri’: [5, 4, 3], ‘eri2’: [6, 5, 4], ‘eri3’: [6, 5, 4], ‘onebody’: [6, 5, 4]}. table of contents. libint2_configuration; libint2_configuration(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; libint2_configuration. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.libint2_configuration.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.libint2_configuration.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.libint2_print_out.html:497,Deployability,update,updated,497,"﻿. libint2_print_out. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; libint2_print_out. libint2_print_out¶. psi4.driver.p4util.libint2_print_out()[source]¶. Return type:; None. table of contents. libint2_print_out; libint2_print_out(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; libint2_print_out. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.libint2_print_out.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.libint2_print_out.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.Lineshape.html:1150,Deployability,update,updated,1150,"﻿. Lineshape. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; Lineshape. Lineshape¶. class psi4.driver.p4util.Lineshape(domain, gamma)[source]¶; Bases: object; Lineshape ABC. Parameters:. domain (ndarray | List[float]) – ; gamma (Callable[[float], float]) – . domain¶; Domain of the spectral band. gamma¶; A function returning the broadening factor. Notes; Why do we use a callable broadening factor?; For plots in the wavelength domain, the broadening factor depends on the location of the band’s maximum.; Methods Summary. lineshape(x_0). rtype:; ndarray. maximum(x_0). rtype:; float. Methods Documentation. abstract lineshape(x_0)[source]¶. Return type:; ndarray. Parameters:; x_0 (float) – . abstract maximum(x_0)[source]¶. Return type:; float. Parameters:; x_0 (float) – . table of contents. Lineshape; Lineshape; Lineshape.domain; Lineshape.gamma; Lineshape.lineshape(); Lineshape.maximum(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; Lineshape. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.Lineshape.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.Lineshape.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.Lineshape.html:516,Integrability,depend,depends,516,"﻿. Lineshape. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; Lineshape. Lineshape¶. class psi4.driver.p4util.Lineshape(domain, gamma)[source]¶; Bases: object; Lineshape ABC. Parameters:. domain (ndarray | List[float]) – ; gamma (Callable[[float], float]) – . domain¶; Domain of the spectral band. gamma¶; A function returning the broadening factor. Notes; Why do we use a callable broadening factor?; For plots in the wavelength domain, the broadening factor depends on the location of the band’s maximum.; Methods Summary. lineshape(x_0). rtype:; ndarray. maximum(x_0). rtype:; float. Methods Documentation. abstract lineshape(x_0)[source]¶. Return type:; ndarray. Parameters:; x_0 (float) – . abstract maximum(x_0)[source]¶. Return type:; float. Parameters:; x_0 (float) – . table of contents. Lineshape; Lineshape; Lineshape.domain; Lineshape.gamma; Lineshape.lineshape(); Lineshape.maximum(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; Lineshape. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.Lineshape.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.Lineshape.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.Lorentzian.html:1463,Deployability,update,updated,1463,"﻿. Lorentzian. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; Lorentzian. Lorentzian¶. class psi4.driver.p4util.Lorentzian(domain, gamma)[source]¶; Bases: Lineshape; Lorentzian function on domain, centered at x_0 with broadening gamma. Parameters:. domain (Union[ndarray, List[float]]) – The domain of the Lorentzian profile.; gamma (Callable[[float], float]) – Broadening parameter.; This is the full width at half maximum (FWHM). Notes; Use this profile to model homogeneous broadening.; Methods Summary. lineshape(x_0); Lorentzian function on Lineshape.domain, centered at x_0 with broadening Lineshape.gamma. maximum(x_0); Maximum value of Lorentzian profile centered at x_0. Methods Documentation. lineshape(x_0)[source]¶; Lorentzian function on Lineshape.domain, centered at x_0 with broadening Lineshape.gamma. Parameters:; x_0 (float) – Center of the Lorentzian, i.e. its maximum. Returns:; The Lorentzian profile. Return type:; numpy.ndarray. maximum(x_0)[source]¶; Maximum value of Lorentzian profile centered at x_0. Parameters:; x_0 (float) – Center of the Lorentzian, i.e. its maximum. Return type:; float. table of contents. Lorentzian; Lorentzian; Lorentzian.lineshape(); Lorentzian.maximum(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; Lorentzian. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.Lorentzian.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.Lorentzian.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.mat2arr.html:594,Deployability,update,updated,594,"﻿. mat2arr. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; mat2arr. mat2arr¶. psi4.driver.p4util.mat2arr(mat)[source]¶; Convert Matrix to List. Parameters:; mat (Matrix) – PSI4 matrix. Should be flat with respect to symmetry. Returns:; Pure Python representation of mat. Return type:; List[List[float]]. table of contents. mat2arr; mat2arr(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; mat2arr. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.mat2arr.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.mat2arr.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.message_box.html:769,Deployability,update,updated,769,"﻿. message_box. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. message_box¶. psi4.driver.p4util.message_box(message, max_width=80, min_width=30)[source]¶; Put a message string into a box for extra attention. Parameters:. message (str) – Message string to be boxed.; max_width (int) – Maximal character width of the box.; min_width (int) – Minimal character width of the box. Returns:; Box containing the message as a multiline string. Return type:; str. table of contents. message_box; message_box(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.message_box.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.message_box.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.message_box.html:178,Integrability,message,message,178,"﻿. message_box. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. message_box¶. psi4.driver.p4util.message_box(message, max_width=80, min_width=30)[source]¶; Put a message string into a box for extra attention. Parameters:. message (str) – Message string to be boxed.; max_width (int) – Maximal character width of the box.; min_width (int) – Minimal character width of the box. Returns:; Box containing the message as a multiline string. Return type:; str. table of contents. message_box; message_box(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.message_box.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.message_box.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.message_box.html:231,Integrability,message,message,231,"﻿. message_box. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. message_box¶. psi4.driver.p4util.message_box(message, max_width=80, min_width=30)[source]¶; Put a message string into a box for extra attention. Parameters:. message (str) – Message string to be boxed.; max_width (int) – Maximal character width of the box.; min_width (int) – Minimal character width of the box. Returns:; Box containing the message as a multiline string. Return type:; str. table of contents. message_box; message_box(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.message_box.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.message_box.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.message_box.html:291,Integrability,message,message,291,"﻿. message_box. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. message_box¶. psi4.driver.p4util.message_box(message, max_width=80, min_width=30)[source]¶; Put a message string into a box for extra attention. Parameters:. message (str) – Message string to be boxed.; max_width (int) – Maximal character width of the box.; min_width (int) – Minimal character width of the box. Returns:; Box containing the message as a multiline string. Return type:; str. table of contents. message_box; message_box(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.message_box.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.message_box.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.message_box.html:307,Integrability,Message,Message,307,"﻿. message_box. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. message_box¶. psi4.driver.p4util.message_box(message, max_width=80, min_width=30)[source]¶; Put a message string into a box for extra attention. Parameters:. message (str) – Message string to be boxed.; max_width (int) – Maximal character width of the box.; min_width (int) – Minimal character width of the box. Returns:; Box containing the message as a multiline string. Return type:; str. table of contents. message_box; message_box(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.message_box.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.message_box.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.message_box.html:474,Integrability,message,message,474,"﻿. message_box. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. message_box¶. psi4.driver.p4util.message_box(message, max_width=80, min_width=30)[source]¶; Put a message string into a box for extra attention. Parameters:. message (str) – Message string to be boxed.; max_width (int) – Maximal character width of the box.; min_width (int) – Minimal character width of the box. Returns:; Box containing the message as a multiline string. Return type:; str. table of contents. message_box; message_box(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.message_box.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.message_box.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.oeprop.html:421,Availability,Avail,Available,421,"﻿. oeprop. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; oeprop. oeprop¶. psi4.driver.p4util.oeprop(wfn, *args, **kwargs)[source]¶; Evaluate one-electron properties. Returns:; None. Parameters:. wfn (Wavefunction) – set of molecule, basis, orbitals from which to compute properties; args (List[str]) – Arbitrary-number of properties to be computed from wfn.; See Available One-Electron Properties.; title (str) – label prepended to all psivars computed. Examples:. >>> # [1] Moments with specific label; >>> E, wfn = energy('hf', return_wfn=True); >>> oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', title='H3O+ SCF'). table of contents. oeprop; oeprop(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; oeprop. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.oeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.oeprop.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.oeprop.html:895,Deployability,update,updated,895,"﻿. oeprop. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; oeprop. oeprop¶. psi4.driver.p4util.oeprop(wfn, *args, **kwargs)[source]¶; Evaluate one-electron properties. Returns:; None. Parameters:. wfn (Wavefunction) – set of molecule, basis, orbitals from which to compute properties; args (List[str]) – Arbitrary-number of properties to be computed from wfn.; See Available One-Electron Properties.; title (str) – label prepended to all psivars computed. Examples:. >>> # [1] Moments with specific label; >>> E, wfn = energy('hf', return_wfn=True); >>> oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', title='H3O+ SCF'). table of contents. oeprop; oeprop(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; oeprop. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.oeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.oeprop.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.oeprop.html:575,Energy Efficiency,energy,energy,575,"﻿. oeprop. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; oeprop. oeprop¶. psi4.driver.p4util.oeprop(wfn, *args, **kwargs)[source]¶; Evaluate one-electron properties. Returns:; None. Parameters:. wfn (Wavefunction) – set of molecule, basis, orbitals from which to compute properties; args (List[str]) – Arbitrary-number of properties to be computed from wfn.; See Available One-Electron Properties.; title (str) – label prepended to all psivars computed. Examples:. >>> # [1] Moments with specific label; >>> E, wfn = energy('hf', return_wfn=True); >>> oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', title='H3O+ SCF'). table of contents. oeprop; oeprop(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; oeprop. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.oeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.oeprop.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.OptionsState.html:1386,Deployability,update,updated,1386,"﻿. OptionsState. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptionsState. OptionsState¶. class psi4.driver.p4util.OptionsState(*largs)[source]¶; Bases: object; Store multiple OptionState() objects.; Use in driver functions to collect several keywords before altering them,; then restore them before function return. Parameters:; largs (List[List[str]]) – Specify which keywords to store value and has_changed state. Examples; >>> optstash = OptionsState(; ['DF_BASIS_SCF'],; ['SCF_TYPE'],; ['SCF', 'REFERENCE']). >>> print(optstash). >>> optstash.restore(). Methods Summary. add_option(item); Store info for another keyword, item. restore(); Restore value and has_changed status of each keyword to saved condition. Methods Documentation. add_option(item)[source]¶; Store info for another keyword, item. Parameters:; item (List[str]) – A one-membered list with a global keyword or a two-membered list; with a module keyword and module. restore()[source]¶; Restore value and has_changed status of each keyword to saved condition. table of contents. OptionsState; OptionsState; OptionsState.add_option(); OptionsState.restore(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptionsState. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.OptionsState.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.OptionsState.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.OptionsStateCM.html:727,Deployability,update,updated,727,"﻿. OptionsStateCM. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptionsStateCM. OptionsStateCM¶. psi4.driver.p4util.OptionsStateCM(osd)[source]¶; Return a context manager that will collect the state (value and changed; status) of a list of keywords osd that can initialize; OptionsState on entry to the with-statement and restore the; collected state when exiting the with-statement. Return type:; Iterator[None]. table of contents. OptionsStateCM; OptionsStateCM(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptionsStateCM. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.OptionsStateCM.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.OptionsStateCM.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.OptionState.html:1177,Deployability,update,updated,1177,"﻿. OptionState. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptionState. OptionState¶. class psi4.driver.p4util.OptionState(option, module=None)[source]¶; Bases: object; Store the state (value and changed status) of a single option. Parameters:. option (str) – Name of read_options keyword. All caps.; module (Optional[str]) – Name of read_options module or None if global. All caps.; If module given, the option value and has_changed value is stored; for global, local to module, and used by module scopes. Otherwise; (used for BASIS keywords), only global scope is stored. Examples; >>> OptionState('E_CONVERGENCE', 'SCF'). >>> print(OptionState('DF_BASIS_MP2')). Methods Summary. restore(); Restore value and has_changed status to saved condition. Methods Documentation. restore()[source]¶; Restore value and has_changed status to saved condition. table of contents. OptionState; OptionState; OptionState.restore(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; OptionState. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.OptionState.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.OptionState.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.pcm_helper.html:617,Deployability,update,updated,617,"﻿. pcm_helper. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; pcm_helper. pcm_helper¶. psi4.driver.p4util.pcm_helper(block)[source]¶; Helper to specify the multiline PCMSolver syntax for PCM.; Prefer to use set_options() with key ""PCM__INPUT"". Parameters:; block (str) – Text that goes in a PSIthon pcm = {...} block. table of contents. pcm_helper; pcm_helper(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; pcm_helper. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.pcm_helper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.pcm_helper.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.plump_qcvar.html:1048,Deployability,update,updated,1048,"﻿. plump_qcvar. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plump_qcvar. plump_qcvar¶. psi4.driver.p4util.plump_qcvar(key, val)[source]¶; Prepare serialized QCVariables for QCSchema AtomicResult.extras[“qcvars”] by; converting flat arrays into numpy, shaped ones and floating strings.; Unlike _qcvar_reshape_get/set, multipoles aren’t compressed or plumped, only reshaped. Parameters:. key (str) – Shape clue (usually QCVariable key) that includes (case insensitive) an identifier like; ‘gradient’ as a clue to the array’s natural dimensions.; val (Union[float, str, List]) – flat (?, ) list or scalar or string, probably from JSON storage. Returns:; Reshaped array of val with natural dimensions of key. Return type:; float or numpy.ndarray. table of contents. plump_qcvar; plump_qcvar(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; plump_qcvar. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.plump_qcvar.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.plump_qcvar.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.prefactor_ecd.html:1066,Deployability,update,updated,1066,"﻿. prefactor_ecd. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; prefactor_ecd. prefactor_ecd¶. psi4.driver.p4util.prefactor_ecd()[source]¶; Prefactor for converting microscopic observable to decadic molar; extinction coefficient in electronic circular dichroism. Return type:; float. Notes; This function implements the calculation of the following prefactor:. \[k = \frac{16\pi^{2}N_{\mathrm{A}}}{3\times 1000\times \ln(10) (4 \pi \epsilon_{0}) n \hbar c^{2}}\]; The prefactor is computed in SI units and then adjusted for the fact that; we use atomic units to express microscopic observables: excitation energies; and transition dipole moments.; The refractive index \(n\) is, in general, frequency-dependent. We; assume it to be constant and equal to 1. table of contents. prefactor_ecd; prefactor_ecd(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; prefactor_ecd. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.prefactor_ecd.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.prefactor_ecd.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.prefactor_ecd.html:759,Integrability,depend,dependent,759,"﻿. prefactor_ecd. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; prefactor_ecd. prefactor_ecd¶. psi4.driver.p4util.prefactor_ecd()[source]¶; Prefactor for converting microscopic observable to decadic molar; extinction coefficient in electronic circular dichroism. Return type:; float. Notes; This function implements the calculation of the following prefactor:. \[k = \frac{16\pi^{2}N_{\mathrm{A}}}{3\times 1000\times \ln(10) (4 \pi \epsilon_{0}) n \hbar c^{2}}\]; The prefactor is computed in SI units and then adjusted for the fact that; we use atomic units to express microscopic observables: excitation energies; and transition dipole moments.; The refractive index \(n\) is, in general, frequency-dependent. We; assume it to be constant and equal to 1. table of contents. prefactor_ecd; prefactor_ecd(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; prefactor_ecd. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.prefactor_ecd.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.prefactor_ecd.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.prefactor_opa.html:1053,Deployability,update,updated,1053,"﻿. prefactor_opa. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; prefactor_opa. prefactor_opa¶. psi4.driver.p4util.prefactor_opa()[source]¶; Prefactor for converting microscopic observable to decadic molar; extinction coefficient in one-photon absorption. Return type:; float. Notes; This function implements the calculation of the following prefactor:. \[k = \frac{4\pi^{2}N_{\mathrm{A}}}{3\times 1000\times \ln(10) (4 \pi \epsilon_{0}) n \hbar c}\]; The prefactor is computed in SI units and then adjusted for the fact that; we use atomic units to express microscopic observables: excitation energies; and transition dipole moments.; The refractive index \(n\) is, in general, frequency-dependent. We; assume it to be constant and equal to 1. table of contents. prefactor_opa; prefactor_opa(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; prefactor_opa. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.prefactor_opa.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.prefactor_opa.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.prefactor_opa.html:746,Integrability,depend,dependent,746,"﻿. prefactor_opa. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; prefactor_opa. prefactor_opa¶. psi4.driver.p4util.prefactor_opa()[source]¶; Prefactor for converting microscopic observable to decadic molar; extinction coefficient in one-photon absorption. Return type:; float. Notes; This function implements the calculation of the following prefactor:. \[k = \frac{4\pi^{2}N_{\mathrm{A}}}{3\times 1000\times \ln(10) (4 \pi \epsilon_{0}) n \hbar c}\]; The prefactor is computed in SI units and then adjusted for the fact that; we use atomic units to express microscopic observables: excitation energies; and transition dipole moments.; The refractive index \(n\) is, in general, frequency-dependent. We; assume it to be constant and equal to 1. table of contents. prefactor_opa; prefactor_opa(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; prefactor_opa. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.prefactor_opa.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.prefactor_opa.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.prepare_options_for_modules.html:1937,Deployability,update,updated,1937,"ns_for_modules. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; prepare_options_for_modules. prepare_options_for_modules¶. psi4.driver.p4util.prepare_options_for_modules(changedOnly=False, commandsInsteadDict=False, globalsOnly=False, stateInsteadMediated=False)[source]¶; Capture current state of psi4.core.Options information. Parameters:. changedOnly (bool) – Record info only for options that have been set (may still be default).; When False, records values for every option.; commandsInsteadDict (bool) – Return string of commands to exec to reset options in current form.; When False, return nested dictionary with globals in ‘GLOBALS’ subdictionary; and locals in subdictionaries by module.; globalsOnly (bool) – Record only global options to save time querying the; Options object.; When False, record module-level options, too.; stateInsteadMediated (bool) – When True, querying this function for options to be later reset into the same; state – the raw values and has_changed status at the global and local levels.; When False, querying this function for mediated options to be used – the results; of the globals/locals handshake as computed by the Options object itself. Here,; dict[module][option][value] is the value to be used by module. Return type:; Union[Dict, str]. Returns:. Dict – When commandsInsteadDict is False.; str – When commandsInsteadDict is True. Caution; Some features are not yet implemented. Buy a developer a coffee. command return doesn’t revoke has_changed setting for unchanged with changedOnly=False; not all kwargs are independent. table of contents. prepare_options_for_modules; prepare_options_for_modules(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; prepare_options_for_modules. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.prepare_options_for_modules.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.prepare_options_for_modules.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.prepare_options_for_modules.html:1138,Integrability,mediat,mediated,1138,"ns_for_modules. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; prepare_options_for_modules. prepare_options_for_modules¶. psi4.driver.p4util.prepare_options_for_modules(changedOnly=False, commandsInsteadDict=False, globalsOnly=False, stateInsteadMediated=False)[source]¶; Capture current state of psi4.core.Options information. Parameters:. changedOnly (bool) – Record info only for options that have been set (may still be default).; When False, records values for every option.; commandsInsteadDict (bool) – Return string of commands to exec to reset options in current form.; When False, return nested dictionary with globals in ‘GLOBALS’ subdictionary; and locals in subdictionaries by module.; globalsOnly (bool) – Record only global options to save time querying the; Options object.; When False, record module-level options, too.; stateInsteadMediated (bool) – When True, querying this function for options to be later reset into the same; state – the raw values and has_changed status at the global and local levels.; When False, querying this function for mediated options to be used – the results; of the globals/locals handshake as computed by the Options object itself. Here,; dict[module][option][value] is the value to be used by module. Return type:; Union[Dict, str]. Returns:. Dict – When commandsInsteadDict is False.; str – When commandsInsteadDict is True. Caution; Some features are not yet implemented. Buy a developer a coffee. command return doesn’t revoke has_changed setting for unchanged with changedOnly=False; not all kwargs are independent. table of contents. prepare_options_for_modules; prepare_options_for_modules(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; prepare_options_for_modules. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.prepare_options_for_modules.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.prepare_options_for_modules.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.prepare_options_for_set_options.html:877,Deployability,update,updated,877,"﻿. prepare_options_for_set_options. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; prepare_options_for_set_options. prepare_options_for_set_options¶. psi4.driver.p4util.prepare_options_for_set_options()[source]¶; Collect current state of psi4.core.Options information for; reloading by set_options(). Returns:; Dictionary where keys are keyword names, either plain for those to be; set globally or mangled “module__keyword” for those to be set locally,; and values are keyword values. Return type:; Dict[str, Any]. table of contents. prepare_options_for_set_options; prepare_options_for_set_options(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; prepare_options_for_set_options. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.prepare_options_for_set_options.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.prepare_options_for_set_options.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.provenance_stamp.html:912,Deployability,update,updated,912,"﻿. provenance_stamp. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; provenance_stamp. provenance_stamp¶. psi4.driver.p4util.provenance_stamp(routine, module=None)[source]¶; Prepare QCSchema Provenance with PSI4 credentials. Parameters:. routine (str) – Name of driver function generating the QCSchema.; module (str) – Primary contributing PSI4 library, like ccenergy or dfmp2. Returns:; provenance – Dictionary satisfying QCSchema, with PSI4 credentials for creator; and version.; https://github.com/MolSSI/QCSchema/blob/master/qcschema/dev/definitions.py#L23-L41. Return type:; Dict[str, str]. table of contents. provenance_stamp; provenance_stamp(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; provenance_stamp. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.provenance_stamp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.provenance_stamp.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.provenance_stamp.html:198,Integrability,rout,routine,198,"﻿. provenance_stamp. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; provenance_stamp. provenance_stamp¶. psi4.driver.p4util.provenance_stamp(routine, module=None)[source]¶; Prepare QCSchema Provenance with PSI4 credentials. Parameters:. routine (str) – Name of driver function generating the QCSchema.; module (str) – Primary contributing PSI4 library, like ccenergy or dfmp2. Returns:; provenance – Dictionary satisfying QCSchema, with PSI4 credentials for creator; and version.; https://github.com/MolSSI/QCSchema/blob/master/qcschema/dev/definitions.py#L23-L41. Return type:; Dict[str, str]. table of contents. provenance_stamp; provenance_stamp(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; provenance_stamp. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.provenance_stamp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.provenance_stamp.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.provenance_stamp.html:294,Integrability,rout,routine,294,"﻿. provenance_stamp. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; provenance_stamp. provenance_stamp¶. psi4.driver.p4util.provenance_stamp(routine, module=None)[source]¶; Prepare QCSchema Provenance with PSI4 credentials. Parameters:. routine (str) – Name of driver function generating the QCSchema.; module (str) – Primary contributing PSI4 library, like ccenergy or dfmp2. Returns:; provenance – Dictionary satisfying QCSchema, with PSI4 credentials for creator; and version.; https://github.com/MolSSI/QCSchema/blob/master/qcschema/dev/definitions.py#L23-L41. Return type:; Dict[str, str]. table of contents. provenance_stamp; provenance_stamp(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; provenance_stamp. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.provenance_stamp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.provenance_stamp.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.sanitize_method.html:688,Deployability,update,updated,688,"﻿. sanitize_method. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; sanitize_method. sanitize_method¶. psi4.driver.p4util.sanitize_method(name)[source]¶; Replace characters in method name so that suitable for function name or Sphinx table anchor; (both as-is) or HTML table link (replace underscore in returned string by dash). Return type:; str. Parameters:; name (str) – . table of contents. sanitize_method; sanitize_method(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; sanitize_method. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.sanitize_method.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.sanitize_method.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.set_memory.html:1970,Deployability,update,updated,1970," .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_memory. set_memory¶. psi4.driver.p4util.set_memory(inputval, execute=True, quiet=False)[source]¶; Reset the total memory allocation. Parameters:. inputval (Union[str, int, float]) – Memory value. An Integer or float is taken literally as bytes to be set.; A string is taken as a unit-containing value (e.g., 30 mb), which is; case-insensitive.; execute (bool) – When False, interpret inputval without setting in Psi4 core.; quiet (bool) – When True, do not print to the output file. Returns:; Number of bytes of memory set. Return type:; int. Raises:; ValidationError – When <500MiB or disallowed type or misformatted. Examples; >>> # [1] Passing absolute number of bytes; >>> psi4.set_memory(600000000); >>> psi4.get_memory(); Out[1]: 600000000L. >>> # [2] Passing memory value as string with units; >>> psi4.set_memory('30 GB'); >>> psi4.get_memory(); Out[2]: 30000000000L. >>> # Good examples; >>> psi4.set_memory(800000000) # 800000000; >>> psi4.set_memory(2004088624.9) # 2004088624; >>> psi4.set_memory(1.0e9) # 1000000000; >>> psi4.set_memory('600 mb') # 600000000; >>> psi4.set_memory('600.0 MiB') # 629145600; >>> psi4.set_memory('.6 Gb') # 600000000; >>> psi4.set_memory(' 100000000kB ') # 100000000000; >>> psi4.set_memory('2 eb') # 2000000000000000000. >>> # Bad examples; >>> psi4.set_memory({}) # odd type; >>> psi4.set_memory('') # no info; >>> psi4.set_memory(""8 dimms"") # unacceptable units; >>> psi4.set_memory(""1e5 gb"") # string w/ exponent; >>> psi4.set_memory(""5e5"") # string w/o units; >>> psi4.set_memory(2000) # mem too small; >>> psi4.set_memory(-5e5) # negative (and too small). table of contents. set_memory; set_memory(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_memory. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.set_memory.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.set_memory.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.set_memory.html:675,Security,Validat,ValidationError,675,"﻿. set_memory. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_memory. set_memory¶. psi4.driver.p4util.set_memory(inputval, execute=True, quiet=False)[source]¶; Reset the total memory allocation. Parameters:. inputval (Union[str, int, float]) – Memory value. An Integer or float is taken literally as bytes to be set.; A string is taken as a unit-containing value (e.g., 30 mb), which is; case-insensitive.; execute (bool) – When False, interpret inputval without setting in Psi4 core.; quiet (bool) – When True, do not print to the output file. Returns:; Number of bytes of memory set. Return type:; int. Raises:; ValidationError – When <500MiB or disallowed type or misformatted. Examples; >>> # [1] Passing absolute number of bytes; >>> psi4.set_memory(600000000); >>> psi4.get_memory(); Out[1]: 600000000L. >>> # [2] Passing memory value as string with units; >>> psi4.set_memory('30 GB'); >>> psi4.get_memory(); Out[2]: 30000000000L. >>> # Good examples; >>> psi4.set_memory(800000000) # 800000000; >>> psi4.set_memory(2004088624.9) # 2004088624; >>> psi4.set_memory(1.0e9) # 1000000000; >>> psi4.set_memory('600 mb') # 600000000; >>> psi4.set_memory('600.0 MiB') # 629145600; >>> psi4.set_memory('.6 Gb') # 600000000; >>> psi4.set_memory(' 100000000kB ') # 100000000000; >>> psi4.set_memory('2 eb') # 2000000000000000000. >>> # Bad examples; >>> psi4.set_memory({}) # odd type; >>> psi4.set_memory('') # no info; >>> psi4.set_memory(""8 dimms"") # unacceptable units; >>> psi4.set_memory(""1e5 gb"") # string w/ exponent; >>> psi4.set_memory(""5e5"") # string w/o units; >>> psi4.set_memory(2000) # mem too small; >>> psi4.set_memory(-5e5) # negative (and too small). table of contents. set_memory; set_memory(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_memory. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 Octobe",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.set_memory.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.set_memory.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.set_module_options.html:754,Deployability,update,updated,754,"﻿. set_module_options. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_module_options. set_module_options¶. psi4.driver.p4util.set_module_options(module, options_dict)[source]¶; Sets Psi4 module options from a module specification and input dictionary.; :rtype: None. Deprecated since version 1.5: Use psi4.driver.p4util.set_options() instead. Parameters:. module (str) – ; options_dict (Dict[str, Any]) – . Return type:; None. table of contents. set_module_options; set_module_options(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_module_options. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.set_module_options.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.set_module_options.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.set_options.html:1033,Deployability,update,updated,1033,"﻿. set_options. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_options. set_options¶. psi4.driver.p4util.set_options(options_dict, verbose=1)[source]¶; Sets Psi4 options from an input dictionary. Parameters:. options_dict (Dict[str, Any]) – Dictionary where keys are case insensitive and values are the option value. For global options, keys are ""<option_name>"".; For option local to “<module_name>”, keys are ""<module_name>__<option_name>""; (double underscore separation).; For contents that would be in pcm = {...}, use ""PCM__INPUT"" key. verbose (int) – Control print volume. Return type:; None. Examples; >>> psi4.set_options({; ""basis"": ""cc-pvtz"",; ""df_basis_scf"": ""cc-pvtz-jkfit"",; ""scf__reference"": ""uhf"",; ""print"": 2}). table of contents. set_options; set_options(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_options. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.set_options.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.set_options.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.SolverEngine.html:3875,Deployability,update,updated,3875,"- D_{i})^-1\) where; D is an approximation of the diagonal of the matrix that is being; diagonalized. Parameters:. R_k (single vector) – The residual vector; w_k (float) – The eigenvalue associated with this vector. Returns:; new_X_k – The preconditioned residual vector, a correction vector that will be; used to augment the guess space. Return type:; single vector. abstract residue(X, so_prop_ints)[source]¶; Compute residue. Parameters:. X – The single vector to use to compute the property.; so_prop_ints – Property integrals in SO basis for the desired transition property.; prefactor – Optional float scaling factor. Returns:; residue – The transition property. Return type:; Any. abstract vector_axpy(X, Y)[source]¶; Compute scaled vector addition operation a*X + Y. Parameters:. a (float) – The scale factor applied to X; X (singlet vector) – The vector which will be scaled and added to Y; Y (single vector) – The vector which the result of a*X is added to. Returns:; Y – The solver assumes that Y is updated, and returned. So it is safe to; avoid a copy of Y if possible. Return type:; single vector. abstract vector_copy()[source]¶; Make a copy of a vector. Parameters:; X (single vector) – The vector to copy. Returns:; X’ – A copy of X should be distinct object that can be modified; independently of the passed object, Has the same data when returned. Return type:; single vector. abstract static vector_dot(X, Y)[source]¶; Compute a dot product between two vectors. Parameters:. X (single vector) – ; Y (single vector) – . Returns:; a – The dot product (X x Y). Return type:; float. abstract vector_scale(X)[source]¶; Scale a vector by some factor. Parameters:. a (float) – The scale facor; X (single vector) – The vector that will be scaled. Returns:; X – The solver assumes that the passed vector is modifed. So it is save; to avoid a copy of X if possible. Return type:; single vector. table of contents. SolverEngine; SolverEngine; SolverEngine.compute_products(); SolverEngine.ne",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.SolverEngine.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.SolverEngine.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.SolverEngine.html:5240,Deployability,update,updated,5240,"e vector to use to compute the property.; so_prop_ints – Property integrals in SO basis for the desired transition property.; prefactor – Optional float scaling factor. Returns:; residue – The transition property. Return type:; Any. abstract vector_axpy(X, Y)[source]¶; Compute scaled vector addition operation a*X + Y. Parameters:. a (float) – The scale factor applied to X; X (singlet vector) – The vector which will be scaled and added to Y; Y (single vector) – The vector which the result of a*X is added to. Returns:; Y – The solver assumes that Y is updated, and returned. So it is safe to; avoid a copy of Y if possible. Return type:; single vector. abstract vector_copy()[source]¶; Make a copy of a vector. Parameters:; X (single vector) – The vector to copy. Returns:; X’ – A copy of X should be distinct object that can be modified; independently of the passed object, Has the same data when returned. Return type:; single vector. abstract static vector_dot(X, Y)[source]¶; Compute a dot product between two vectors. Parameters:. X (single vector) – ; Y (single vector) – . Returns:; a – The dot product (X x Y). Return type:; float. abstract vector_scale(X)[source]¶; Scale a vector by some factor. Parameters:. a (float) – The scale facor; X (single vector) – The vector that will be scaled. Returns:; X – The solver assumes that the passed vector is modifed. So it is save; to avoid a copy of X if possible. Return type:; single vector. table of contents. SolverEngine; SolverEngine; SolverEngine.compute_products(); SolverEngine.new_vector(); SolverEngine.precondition(); SolverEngine.residue(); SolverEngine.vector_axpy(); SolverEngine.vector_copy(); SolverEngine.vector_dot(); SolverEngine.vector_scale(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SolverEngine. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.SolverEngine.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.SolverEngine.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.SolverEngine.html:530,Modifiability,inherit,inherit,530,"﻿. SolverEngine. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SolverEngine. SolverEngine¶. class psi4.driver.p4util.SolverEngine[source]¶; Bases: ABC; Abstract Base Class defining the API for a matrix-vector product object; required by solvers.; Engines implement the correct product functions for iterative solvers that; do not require the target matrix be stored directly.; Classes intended to be used as an engine for davidson_solver() or; hamiltonian_solver() should inherit from this base class to ensure; that the required methods are defined. Note; The vector referred to here is intentionally vague, the solver; does not care what it is and only holds individual or sets of; them. In fact an individual vector could be split across two; elements in a list, such as for different spin.; Whatever data type is used and individual vector should be a; single element in a list such that len(list) returns the number; of vector-like objects. Methods Summary. compute_products(X); Compute a Matrix * trial vector products. new_vector(); Return a new vector object. precondition(R_k, w_k); Apply the preconditioner to a Residual vector. residue(X, so_prop_ints); Compute residue. vector_axpy(X, Y); Compute scaled vector addition operation a*X + Y. vector_copy(); Make a copy of a vector. vector_dot(X, Y); Compute a dot product between two vectors. vector_scale(X); Scale a vector by some factor. Methods Documentation. abstract compute_products(X)[source]¶; Compute a Matrix * trial vector products. Parameters:; X (List[vector]) – Trial vectors. Returns:. Expected by davidson_solver(); AX (List[vector]) – The product \(A x X_{i}\) for each X_{i} in X, in that; order. Where A is the hermitian matrix to be diagonalized.; len(AX) == len(X); n (int) – The number of products that were evaluated. If the object implements; product caching this may be less than len(X); Expected by hamiltonian_solver(); H1X (List[vector]) – The product \(H",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.SolverEngine.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.SolverEngine.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.SolverEngine.html:3907,Safety,safe,safe,3907,"l of the matrix that is being; diagonalized. Parameters:. R_k (single vector) – The residual vector; w_k (float) – The eigenvalue associated with this vector. Returns:; new_X_k – The preconditioned residual vector, a correction vector that will be; used to augment the guess space. Return type:; single vector. abstract residue(X, so_prop_ints)[source]¶; Compute residue. Parameters:. X – The single vector to use to compute the property.; so_prop_ints – Property integrals in SO basis for the desired transition property.; prefactor – Optional float scaling factor. Returns:; residue – The transition property. Return type:; Any. abstract vector_axpy(X, Y)[source]¶; Compute scaled vector addition operation a*X + Y. Parameters:. a (float) – The scale factor applied to X; X (singlet vector) – The vector which will be scaled and added to Y; Y (single vector) – The vector which the result of a*X is added to. Returns:; Y – The solver assumes that Y is updated, and returned. So it is safe to; avoid a copy of Y if possible. Return type:; single vector. abstract vector_copy()[source]¶; Make a copy of a vector. Parameters:; X (single vector) – The vector to copy. Returns:; X’ – A copy of X should be distinct object that can be modified; independently of the passed object, Has the same data when returned. Return type:; single vector. abstract static vector_dot(X, Y)[source]¶; Compute a dot product between two vectors. Parameters:. X (single vector) – ; Y (single vector) – . Returns:; a – The dot product (X x Y). Return type:; float. abstract vector_scale(X)[source]¶; Scale a vector by some factor. Parameters:. a (float) – The scale facor; X (single vector) – The vector that will be scaled. Returns:; X – The solver assumes that the passed vector is modifed. So it is save; to avoid a copy of X if possible. Return type:; single vector. table of contents. SolverEngine; SolverEngine; SolverEngine.compute_products(); SolverEngine.new_vector(); SolverEngine.precondition(); SolverEngine.resi",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.SolverEngine.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.SolverEngine.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.SolverEngine.html:3916,Safety,avoid,avoid,3916,"l of the matrix that is being; diagonalized. Parameters:. R_k (single vector) – The residual vector; w_k (float) – The eigenvalue associated with this vector. Returns:; new_X_k – The preconditioned residual vector, a correction vector that will be; used to augment the guess space. Return type:; single vector. abstract residue(X, so_prop_ints)[source]¶; Compute residue. Parameters:. X – The single vector to use to compute the property.; so_prop_ints – Property integrals in SO basis for the desired transition property.; prefactor – Optional float scaling factor. Returns:; residue – The transition property. Return type:; Any. abstract vector_axpy(X, Y)[source]¶; Compute scaled vector addition operation a*X + Y. Parameters:. a (float) – The scale factor applied to X; X (singlet vector) – The vector which will be scaled and added to Y; Y (single vector) – The vector which the result of a*X is added to. Returns:; Y – The solver assumes that Y is updated, and returned. So it is safe to; avoid a copy of Y if possible. Return type:; single vector. abstract vector_copy()[source]¶; Make a copy of a vector. Parameters:; X (single vector) – The vector to copy. Returns:; X’ – A copy of X should be distinct object that can be modified; independently of the passed object, Has the same data when returned. Return type:; single vector. abstract static vector_dot(X, Y)[source]¶; Compute a dot product between two vectors. Parameters:. X (single vector) – ; Y (single vector) – . Returns:; a – The dot product (X x Y). Return type:; float. abstract vector_scale(X)[source]¶; Scale a vector by some factor. Parameters:. a (float) – The scale facor; X (single vector) – The vector that will be scaled. Returns:; X – The solver assumes that the passed vector is modifed. So it is save; to avoid a copy of X if possible. Return type:; single vector. table of contents. SolverEngine; SolverEngine; SolverEngine.compute_products(); SolverEngine.new_vector(); SolverEngine.precondition(); SolverEngine.resi",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.SolverEngine.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.SolverEngine.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.SolverEngine.html:4709,Safety,avoid,avoid,4709,"e vector to use to compute the property.; so_prop_ints – Property integrals in SO basis for the desired transition property.; prefactor – Optional float scaling factor. Returns:; residue – The transition property. Return type:; Any. abstract vector_axpy(X, Y)[source]¶; Compute scaled vector addition operation a*X + Y. Parameters:. a (float) – The scale factor applied to X; X (singlet vector) – The vector which will be scaled and added to Y; Y (single vector) – The vector which the result of a*X is added to. Returns:; Y – The solver assumes that Y is updated, and returned. So it is safe to; avoid a copy of Y if possible. Return type:; single vector. abstract vector_copy()[source]¶; Make a copy of a vector. Parameters:; X (single vector) – The vector to copy. Returns:; X’ – A copy of X should be distinct object that can be modified; independently of the passed object, Has the same data when returned. Return type:; single vector. abstract static vector_dot(X, Y)[source]¶; Compute a dot product between two vectors. Parameters:. X (single vector) – ; Y (single vector) – . Returns:; a – The dot product (X x Y). Return type:; float. abstract vector_scale(X)[source]¶; Scale a vector by some factor. Parameters:. a (float) – The scale facor; X (single vector) – The vector that will be scaled. Returns:; X – The solver assumes that the passed vector is modifed. So it is save; to avoid a copy of X if possible. Return type:; single vector. table of contents. SolverEngine; SolverEngine; SolverEngine.compute_products(); SolverEngine.new_vector(); SolverEngine.precondition(); SolverEngine.residue(); SolverEngine.vector_axpy(); SolverEngine.vector_copy(); SolverEngine.vector_dot(); SolverEngine.vector_scale(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SolverEngine. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.SolverEngine.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.SolverEngine.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.spectrum.html:3652,Deployability,update,updated,3652," to use in the fitting. Default is gaussian.; gamma (float) – Full width at half maximum of the lineshape function.; Default is 0.2 au of angular frequency.; This value is expected in atomic units of angular frequency.; npoints (int) – How many points to generate for the x axis. Default is 5000.; out_units (str) – Units for the output array x, the x axis of the spectrum plot.; Default is wavelengths in nanometers.; Valid (and case-insensitive) values for the units are:. au atomic units of angular frequency; Eh atomic units of energy; eV; nm; THz. Returns:; spectrum – The fitted electronic absorption spectrum, with units for the x axis specified by the out_units parameter.; This is a dictionary containing the convoluted (key: convolution) and the infinitely narrow spectra (key: sticks).; {""convolution"": {""x"": np.ndarray, ""y"": np.ndarray},; ""sticks"": {""poles"": np.ndarray, ""residues"": np.ndarray}}. Return type:; Dict[str, numpy.ndarray]. Notes. Conversion of the broadening parameter \(\gamma\).; The lineshape functions are formulated as functions of the angular frequency \(\omega\).; When converting to other physical quantities, the broadening parameter has to be modified accordingly.; If \(\gamma_{\omega}\) is the chosen broadening parameter then:. Wavelength: \(gamma_{\lambda} = \frac{\lambda_{ij}^{2}}{2\pi c}\gamma_{\omega}\); Frequency: \(gamma_{\nu} = \frac{\gamma_{\omega}}{2\pi}\); Energy: \(gamma_{E} = \gamma_{\omega}\hbar\). References; A. Rizzo, S. Coriani, K. Ruud, “Response Function Theory Computational Approaches to Linear and Nonlinear Optical Spectroscopy”. In Computational Strategies for Spectroscopy.; https://doi.org/10.1002/9781118008720.ch2. table of contents. spectrum; spectrum(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; spectrum. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.spectrum.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.spectrum.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.spectrum.html:2263,Energy Efficiency,energy,energy,2263,"ation energies.; These are expected in atomic units of angular frequency.; residues (Union[List[float], ndarray]) – Residues of the linear response functions, i.e. transition dipole moments (OPA) and rotatory strengths (ECD).; These are expected in atomic units.; kind (str) – {“opa”, “ecd”}; Which kind of spectrum to generate, one-photon absorption (“opa”) or electronic circular dichroism (“ecd”).; Default is opa.; lineshape (str) – {“gaussian”, “lorentzian”}; The lineshape function to use in the fitting. Default is gaussian.; gamma (float) – Full width at half maximum of the lineshape function.; Default is 0.2 au of angular frequency.; This value is expected in atomic units of angular frequency.; npoints (int) – How many points to generate for the x axis. Default is 5000.; out_units (str) – Units for the output array x, the x axis of the spectrum plot.; Default is wavelengths in nanometers.; Valid (and case-insensitive) values for the units are:. au atomic units of angular frequency; Eh atomic units of energy; eV; nm; THz. Returns:; spectrum – The fitted electronic absorption spectrum, with units for the x axis specified by the out_units parameter.; This is a dictionary containing the convoluted (key: convolution) and the infinitely narrow spectra (key: sticks).; {""convolution"": {""x"": np.ndarray, ""y"": np.ndarray},; ""sticks"": {""poles"": np.ndarray, ""residues"": np.ndarray}}. Return type:; Dict[str, numpy.ndarray]. Notes. Conversion of the broadening parameter \(\gamma\).; The lineshape functions are formulated as functions of the angular frequency \(\omega\).; When converting to other physical quantities, the broadening parameter has to be modified accordingly.; If \(\gamma_{\omega}\) is the chosen broadening parameter then:. Wavelength: \(gamma_{\lambda} = \frac{\lambda_{ij}^{2}}{2\pi c}\gamma_{\omega}\); Frequency: \(gamma_{\nu} = \frac{\gamma_{\omega}}{2\pi}\); Energy: \(gamma_{E} = \gamma_{\omega}\hbar\). References; A. Rizzo, S. Coriani, K. Ruud, “Response Functi",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.spectrum.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.spectrum.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.spectrum.html:3139,Energy Efficiency,Energy,Energy,3139," to use in the fitting. Default is gaussian.; gamma (float) – Full width at half maximum of the lineshape function.; Default is 0.2 au of angular frequency.; This value is expected in atomic units of angular frequency.; npoints (int) – How many points to generate for the x axis. Default is 5000.; out_units (str) – Units for the output array x, the x axis of the spectrum plot.; Default is wavelengths in nanometers.; Valid (and case-insensitive) values for the units are:. au atomic units of angular frequency; Eh atomic units of energy; eV; nm; THz. Returns:; spectrum – The fitted electronic absorption spectrum, with units for the x axis specified by the out_units parameter.; This is a dictionary containing the convoluted (key: convolution) and the infinitely narrow spectra (key: sticks).; {""convolution"": {""x"": np.ndarray, ""y"": np.ndarray},; ""sticks"": {""poles"": np.ndarray, ""residues"": np.ndarray}}. Return type:; Dict[str, numpy.ndarray]. Notes. Conversion of the broadening parameter \(\gamma\).; The lineshape functions are formulated as functions of the angular frequency \(\omega\).; When converting to other physical quantities, the broadening parameter has to be modified accordingly.; If \(\gamma_{\omega}\) is the chosen broadening parameter then:. Wavelength: \(gamma_{\lambda} = \frac{\lambda_{ij}^{2}}{2\pi c}\gamma_{\omega}\); Frequency: \(gamma_{\nu} = \frac{\gamma_{\omega}}{2\pi}\); Energy: \(gamma_{E} = \gamma_{\omega}\hbar\). References; A. Rizzo, S. Coriani, K. Ruud, “Response Function Theory Computational Approaches to Linear and Nonlinear Optical Spectroscopy”. In Computational Strategies for Spectroscopy.; https://doi.org/10.1002/9781118008720.ch2. table of contents. spectrum; spectrum(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; spectrum. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.spectrum.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.spectrum.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.state_to_atomicinput.html:1153,Deployability,update,updated,1153,"﻿. state_to_atomicinput. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; state_to_atomicinput. state_to_atomicinput¶. psi4.driver.p4util.state_to_atomicinput(*, driver, method, basis=None, molecule=None, function_kwargs=None)[source]¶; Form a QCSchema for job input from the current state of PSI4 settings. Parameters:. driver (str) – {‘energy’, ‘gradient’, ‘hessian’}; Target derivative level.; method (str) – Level of theory for job.; basis (Optional[str]) – Basis set for job, if not to be extracted from BASIS.; molecule (Optional[Molecule]) – Molecule for job, if not the active one from; get_active_molecule().; function_kwargs (Optional[Dict[str, Any]]) – Additional keyword arguments to pass to the driver function. Returns:; QCSchema instance including current keyword set and provenance. Return type:; AtomicInput. table of contents. state_to_atomicinput; state_to_atomicinput(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; state_to_atomicinput. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.state_to_atomicinput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.state_to_atomicinput.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.state_to_atomicinput.html:393,Energy Efficiency,energy,energy,393,"﻿. state_to_atomicinput. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; state_to_atomicinput. state_to_atomicinput¶. psi4.driver.p4util.state_to_atomicinput(*, driver, method, basis=None, molecule=None, function_kwargs=None)[source]¶; Form a QCSchema for job input from the current state of PSI4 settings. Parameters:. driver (str) – {‘energy’, ‘gradient’, ‘hessian’}; Target derivative level.; method (str) – Level of theory for job.; basis (Optional[str]) – Basis set for job, if not to be extracted from BASIS.; molecule (Optional[Molecule]) – Molecule for job, if not the active one from; get_active_molecule().; function_kwargs (Optional[Dict[str, Any]]) – Additional keyword arguments to pass to the driver function. Returns:; QCSchema instance including current keyword set and provenance. Return type:; AtomicInput. table of contents. state_to_atomicinput; state_to_atomicinput(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; state_to_atomicinput. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.state_to_atomicinput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.state_to_atomicinput.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.temp_circular_import_blocker.html:554,Deployability,update,updated,554,"﻿. temp_circular_import_blocker. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; temp_circular_import_blocker. temp_circular_import_blocker¶. psi4.driver.p4util.temp_circular_import_blocker()[source]¶. table of contents. temp_circular_import_blocker; temp_circular_import_blocker(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; temp_circular_import_blocker. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.p4util.temp_circular_import_blocker.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.p4util.temp_circular_import_blocker.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ParsingError.html:200,Availability,Error,Error,200,"﻿. ParsingError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ParsingError. ParsingError¶. exception psi4.driver.ParsingError(msg)[source]¶; Error called for problems parsing a text file. Prints error message; msg to standard output stream and output file.; Only used by untested distributed CC response machinery. table of contents. ParsingError; ParsingError. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ParsingError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.ParsingError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ParsingError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ParsingError.html:254,Availability,error,error,254,"﻿. ParsingError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ParsingError. ParsingError¶. exception psi4.driver.ParsingError(msg)[source]¶; Error called for problems parsing a text file. Prints error message; msg to standard output stream and output file.; Only used by untested distributed CC response machinery. table of contents. ParsingError; ParsingError. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ParsingError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.ParsingError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ParsingError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ParsingError.html:620,Deployability,update,updated,620,"﻿. ParsingError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ParsingError. ParsingError¶. exception psi4.driver.ParsingError(msg)[source]¶; Error called for problems parsing a text file. Prints error message; msg to standard output stream and output file.; Only used by untested distributed CC response machinery. table of contents. ParsingError; ParsingError. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ParsingError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.ParsingError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ParsingError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ParsingError.html:260,Integrability,message,message,260,"﻿. ParsingError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ParsingError. ParsingError¶. exception psi4.driver.ParsingError(msg)[source]¶; Error called for problems parsing a text file. Prints error message; msg to standard output stream and output file.; Only used by untested distributed CC response machinery. table of contents. ParsingError; ParsingError. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ParsingError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.ParsingError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ParsingError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.PastureRequiredError.html:235,Availability,Error,Error,235,"﻿. PastureRequiredError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; PastureRequiredError. PastureRequiredError¶. exception psi4.driver.PastureRequiredError(option)[source]¶; Error called when the specified value of option requires some; module(s) from Psi4Pasture, but could not be imported. table of contents. PastureRequiredError; PastureRequiredError. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; PastureRequiredError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.PastureRequiredError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.PastureRequiredError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.PastureRequiredError.html:623,Deployability,update,updated,623,"﻿. PastureRequiredError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; PastureRequiredError. PastureRequiredError¶. exception psi4.driver.PastureRequiredError(option)[source]¶; Error called when the specified value of option requires some; module(s) from Psi4Pasture, but could not be imported. table of contents. PastureRequiredError; PastureRequiredError. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; PastureRequiredError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.PastureRequiredError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.PastureRequiredError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.pcm_helper.html:610,Deployability,update,updated,610,"﻿. pcm_helper. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; pcm_helper. pcm_helper¶. psi4.driver.pcm_helper(block)[source]¶; Helper to specify the multiline PCMSolver syntax for PCM.; Prefer to use set_options() with key ""PCM__INPUT"". Parameters:; block (str) – Text that goes in a PSIthon pcm = {...} block. table of contents. pcm_helper; pcm_helper(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; pcm_helper. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.pcm_helper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.pcm_helper.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.process_input.html:1130,Deployability,update,updated,1130,"﻿. process_input. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; process_input. process_input¶. psi4.driver.process_input(raw_input, print_level=1)[source]¶; Function to preprocess raw input, the text of the input file, then; parse it, validate it for format, and convert it into legitimate Python.; Does a series of regular expression filters, where the matching portion of the; input is replaced by the output of the corresponding function (in this; module) call. Returns a string concatenating module import lines, a copy; of the user’s .psi4rc files, a setting of the scratch directory, a dummy; molecule, and the processed raw_input. Parameters:. raw_input (str) – Input in a mixture of Python and PSIthon syntax.; print_level (int) – raw_input is printed to the output file unless print_level =0. Return type:; str. table of contents. process_input; process_input(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; process_input. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.process_input.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.process_input.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.process_input.html:293,Security,validat,validate,293,"﻿. process_input. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; process_input. process_input¶. psi4.driver.process_input(raw_input, print_level=1)[source]¶; Function to preprocess raw input, the text of the input file, then; parse it, validate it for format, and convert it into legitimate Python.; Does a series of regular expression filters, where the matching portion of the; input is replaced by the output of the corresponding function (in this; module) call. Returns a string concatenating module import lines, a copy; of the user’s .psi4rc files, a setting of the scratch directory, a dummy; molecule, and the processed raw_input. Parameters:. raw_input (str) – Input in a mixture of Python and PSIthon syntax.; print_level (int) – raw_input is printed to the output file unless print_level =0. Return type:; str. table of contents. process_input; process_input(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; process_input. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.process_input.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.process_input.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.prop.html:1607,Deployability,Configurat,Configuration,1607," mp2; MP2 with density fitting only (mp2_type df); RHF; Listed here. cc2; 2nd-order approximate CCSD; RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). table of contents. prop; prop(). «; hide menu. menu; sidebar; »; . Navigation. Index. m",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.prop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.prop.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.prop.html:1722,Deployability,configurat,configurational,1722,"ole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). table of contents. prop; prop(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; prop. © Copyright 2007-2023, The Psi4 P",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.prop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.prop.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.prop.html:2768,Deployability,update,updated,2768,"HF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). table of contents. prop; prop(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; prop. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.prop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.prop.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.prop.html:1607,Modifiability,Config,Configuration,1607," mp2; MP2 with density fitting only (mp2_type df); RHF; Listed here. cc2; 2nd-order approximate CCSD; RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). table of contents. prop; prop(). «; hide menu. menu; sidebar; »; . Navigation. Index. m",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.prop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.prop.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.prop.html:1722,Modifiability,config,configurational,1722,"ole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). table of contents. prop; prop(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; prop. © Copyright 2007-2023, The Psi4 P",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.prop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.prop.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.prop.html:998,Performance,optimiz,optimized,998,"    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; prop. prop¶. psi4.driver.prop(*args, **kwargs)¶; Function to compute various properties. Aliases:; prop(). Returns:; none. Caution; Some features are not yet implemented. Buy a developer a coffee. This function at present has a limited functionality.; Consult the keywords sections of other modules for further property capabilities. Name; Calls Method; Reference; Supported Properties. scf; Self-consistent field method(s); RHF/ROHF/UHF; Listed here. hf; HF Self-consistent field method(s); RHF/ROHF/UHF; Listed here. mp2; MP2 with density fitting only (mp2_type df); RHF; Listed here. cc2; 2nd-order approximate CCSD; RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.prop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.prop.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.prop.html:1113,Performance,optimiz,optimized,1113,"rgs)¶; Function to compute various properties. Aliases:; prop(). Returns:; none. Caution; Some features are not yet implemented. Buy a developer a coffee. This function at present has a limited functionality.; Consult the keywords sections of other modules for further property capabilities. Name; Calls Method; Reference; Supported Properties. scf; Self-consistent field method(s); RHF/ROHF/UHF; Listed here. hf; HF Self-consistent field method(s); RHF/ROHF/UHF; Listed here. mp2; MP2 with density fitting only (mp2_type df); RHF; Listed here. cc2; 2nd-order approximate CCSD; RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (Li",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.prop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.prop.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.prop.html:1229,Performance,optimiz,optimized,1229,"none. Caution; Some features are not yet implemented. Buy a developer a coffee. This function at present has a limited functionality.; Consult the keywords sections of other modules for further property capabilities. Name; Calls Method; Reference; Supported Properties. scf; Self-consistent field method(s); RHF/ROHF/UHF; Listed here. hf; HF Self-consistent field method(s); RHF/ROHF/UHF; Listed here. mp2; MP2 with density fitting only (mp2_type df); RHF; Listed here. cc2; 2nd-order approximate CCSD; RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.prop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.prop.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.prop.html:1314,Performance,optimiz,optimized,1314," limited functionality.; Consult the keywords sections of other modules for further property capabilities. Name; Calls Method; Reference; Supported Properties. scf; Self-consistent field method(s); RHF/ROHF/UHF; Listed here. hf; HF Self-consistent field method(s); RHF/ROHF/UHF; Listed here. mp2; MP2 with density fitting only (mp2_type df); RHF; Listed here. cc2; 2nd-order approximate CCSD; RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole a",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.prop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.prop.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.properties.html:1639,Deployability,Configurat,Configuration,1639," mp2; MP2 with density fitting only (mp2_type df); RHF; Listed here. cc2; 2nd-order approximate CCSD; RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). table of contents. properties; properties(). «; hide menu. menu; sidebar; »; . Navigati",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.properties.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.properties.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.properties.html:1754,Deployability,configurat,configurational,1754,"ole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). table of contents. properties; properties(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; properties. © Copyright 200",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.properties.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.properties.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.properties.html:2818,Deployability,update,updated,2818,"pole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). table of contents. properties; properties(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; properties. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.properties.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.properties.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.properties.html:1639,Modifiability,Config,Configuration,1639," mp2; MP2 with density fitting only (mp2_type df); RHF; Listed here. cc2; 2nd-order approximate CCSD; RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). table of contents. properties; properties(). «; hide menu. menu; sidebar; »; . Navigati",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.properties.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.properties.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.properties.html:1754,Modifiability,config,configurational,1754,"ole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). table of contents. properties; properties(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; properties. © Copyright 200",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.properties.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.properties.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.properties.html:1030,Performance,optimiz,optimized,1030,";  · . PSI4. PSI4 API: Linking C++ and Python; properties. properties¶. psi4.driver.properties(*args, **kwargs)[source]¶; Function to compute various properties. Aliases:; prop(). Returns:; none. Caution; Some features are not yet implemented. Buy a developer a coffee. This function at present has a limited functionality.; Consult the keywords sections of other modules for further property capabilities. Name; Calls Method; Reference; Supported Properties. scf; Self-consistent field method(s); RHF/ROHF/UHF; Listed here. hf; HF Self-consistent field method(s); RHF/ROHF/UHF; Listed here. mp2; MP2 with density fitting only (mp2_type df); RHF; Listed here. cc2; 2nd-order approximate CCSD; RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.properties.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.properties.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.properties.html:1145,Performance,optimiz,optimized,1145,"rce]¶; Function to compute various properties. Aliases:; prop(). Returns:; none. Caution; Some features are not yet implemented. Buy a developer a coffee. This function at present has a limited functionality.; Consult the keywords sections of other modules for further property capabilities. Name; Calls Method; Reference; Supported Properties. scf; Self-consistent field method(s); RHF/ROHF/UHF; Listed here. hf; HF Self-consistent field method(s); RHF/ROHF/UHF; Listed here. mp2; MP2 with density fitting only (mp2_type df); RHF; Listed here. cc2; 2nd-order approximate CCSD; RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (Li",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.properties.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.properties.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.properties.html:1261,Performance,optimiz,optimized,1261,"none. Caution; Some features are not yet implemented. Buy a developer a coffee. This function at present has a limited functionality.; Consult the keywords sections of other modules for further property capabilities. Name; Calls Method; Reference; Supported Properties. scf; Self-consistent field method(s); RHF/ROHF/UHF; Listed here. hf; HF Self-consistent field method(s); RHF/ROHF/UHF; Listed here. mp2; MP2 with density fitting only (mp2_type df); RHF; Listed here. cc2; 2nd-order approximate CCSD; RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.properties.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.properties.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.properties.html:1346,Performance,optimiz,optimized,1346," limited functionality.; Consult the keywords sections of other modules for further property capabilities. Name; Calls Method; Reference; Supported Properties. scf; Self-consistent field method(s); RHF/ROHF/UHF; Listed here. hf; HF Self-consistent field method(s); RHF/ROHF/UHF; Listed here. mp2; MP2 with density fitting only (mp2_type df); RHF; Listed here. cc2; 2nd-order approximate CCSD; RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole a",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.properties.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.properties.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.PsiException.html:195,Availability,Error,Error,195,"﻿. PsiException. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; PsiException. PsiException¶. exception psi4.driver.PsiException[source]¶; Error class for PSI4. Flags success as False (triggering coffee). table of contents. PsiException; PsiException. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; PsiException. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.PsiException.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.PsiException.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.PsiException.html:507,Deployability,update,updated,507,"﻿. PsiException. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; PsiException. PsiException¶. exception psi4.driver.PsiException[source]¶; Error class for PSI4. Flags success as False (triggering coffee). table of contents. PsiException; PsiException. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; PsiException. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.PsiException.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.PsiException.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html:482,Availability,toler,tolerance,482,"﻿. compare_vibinfos. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); compare_vibinfos. compare_vibinfos¶. psi4.driver.qcdb.vib.compare_vibinfos(expected, computed, tol, label, verbose=1, forgive=None, required=None, toldict=None)[source]¶; Returns True if two dictionaries of vibration Datum objects are equivalent within a tolerance. Parameters:. expected (Dict[str, Datum]) – Reference value against which computed is compared.; computed (Dict[str, Datum]) – Input value to compare against expected. Must contain all fields of expected.; tol (float) – Absolute tolerance.; label (str) – Label for passed and error messages.; verbose (int) – Control printing.; forgive (List) – Keys in top level which may change between expected and computed without triggering failure.; required (List) – Keys in top level which must be present in computed. (“omega” recc. for vibs.); toldict (Dict[str, float]) – Tolerances for specific keys. Returns:; allclose – Returns True if expected and computed are equal within tolerance; False otherwise. Return type:; bool. table of contents. compare_vibinfos; compare_vibinfos(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); compare_vibinfos. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html:721,Availability,toler,tolerance,721,"﻿. compare_vibinfos. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); compare_vibinfos. compare_vibinfos¶. psi4.driver.qcdb.vib.compare_vibinfos(expected, computed, tol, label, verbose=1, forgive=None, required=None, toldict=None)[source]¶; Returns True if two dictionaries of vibration Datum objects are equivalent within a tolerance. Parameters:. expected (Dict[str, Datum]) – Reference value against which computed is compared.; computed (Dict[str, Datum]) – Input value to compare against expected. Must contain all fields of expected.; tol (float) – Absolute tolerance.; label (str) – Label for passed and error messages.; verbose (int) – Control printing.; forgive (List) – Keys in top level which may change between expected and computed without triggering failure.; required (List) – Keys in top level which must be present in computed. (“omega” recc. for vibs.); toldict (Dict[str, float]) – Tolerances for specific keys. Returns:; allclose – Returns True if expected and computed are equal within tolerance; False otherwise. Return type:; bool. table of contents. compare_vibinfos; compare_vibinfos(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); compare_vibinfos. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html:768,Availability,error,error,768,"﻿. compare_vibinfos. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); compare_vibinfos. compare_vibinfos¶. psi4.driver.qcdb.vib.compare_vibinfos(expected, computed, tol, label, verbose=1, forgive=None, required=None, toldict=None)[source]¶; Returns True if two dictionaries of vibration Datum objects are equivalent within a tolerance. Parameters:. expected (Dict[str, Datum]) – Reference value against which computed is compared.; computed (Dict[str, Datum]) – Input value to compare against expected. Must contain all fields of expected.; tol (float) – Absolute tolerance.; label (str) – Label for passed and error messages.; verbose (int) – Control printing.; forgive (List) – Keys in top level which may change between expected and computed without triggering failure.; required (List) – Keys in top level which must be present in computed. (“omega” recc. for vibs.); toldict (Dict[str, float]) – Tolerances for specific keys. Returns:; allclose – Returns True if expected and computed are equal within tolerance; False otherwise. Return type:; bool. table of contents. compare_vibinfos; compare_vibinfos(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); compare_vibinfos. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html:921,Availability,failure,failure,921,"﻿. compare_vibinfos. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); compare_vibinfos. compare_vibinfos¶. psi4.driver.qcdb.vib.compare_vibinfos(expected, computed, tol, label, verbose=1, forgive=None, required=None, toldict=None)[source]¶; Returns True if two dictionaries of vibration Datum objects are equivalent within a tolerance. Parameters:. expected (Dict[str, Datum]) – Reference value against which computed is compared.; computed (Dict[str, Datum]) – Input value to compare against expected. Must contain all fields of expected.; tol (float) – Absolute tolerance.; label (str) – Label for passed and error messages.; verbose (int) – Control printing.; forgive (List) – Keys in top level which may change between expected and computed without triggering failure.; required (List) – Keys in top level which must be present in computed. (“omega” recc. for vibs.); toldict (Dict[str, float]) – Tolerances for specific keys. Returns:; allclose – Returns True if expected and computed are equal within tolerance; False otherwise. Return type:; bool. table of contents. compare_vibinfos; compare_vibinfos(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); compare_vibinfos. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html:1058,Availability,Toler,Tolerances,1058,"﻿. compare_vibinfos. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); compare_vibinfos. compare_vibinfos¶. psi4.driver.qcdb.vib.compare_vibinfos(expected, computed, tol, label, verbose=1, forgive=None, required=None, toldict=None)[source]¶; Returns True if two dictionaries of vibration Datum objects are equivalent within a tolerance. Parameters:. expected (Dict[str, Datum]) – Reference value against which computed is compared.; computed (Dict[str, Datum]) – Input value to compare against expected. Must contain all fields of expected.; tol (float) – Absolute tolerance.; label (str) – Label for passed and error messages.; verbose (int) – Control printing.; forgive (List) – Keys in top level which may change between expected and computed without triggering failure.; required (List) – Keys in top level which must be present in computed. (“omega” recc. for vibs.); toldict (Dict[str, float]) – Tolerances for specific keys. Returns:; allclose – Returns True if expected and computed are equal within tolerance; False otherwise. Return type:; bool. table of contents. compare_vibinfos; compare_vibinfos(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); compare_vibinfos. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html:1164,Availability,toler,tolerance,1164,"﻿. compare_vibinfos. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); compare_vibinfos. compare_vibinfos¶. psi4.driver.qcdb.vib.compare_vibinfos(expected, computed, tol, label, verbose=1, forgive=None, required=None, toldict=None)[source]¶; Returns True if two dictionaries of vibration Datum objects are equivalent within a tolerance. Parameters:. expected (Dict[str, Datum]) – Reference value against which computed is compared.; computed (Dict[str, Datum]) – Input value to compare against expected. Must contain all fields of expected.; tol (float) – Absolute tolerance.; label (str) – Label for passed and error messages.; verbose (int) – Control printing.; forgive (List) – Keys in top level which may change between expected and computed without triggering failure.; required (List) – Keys in top level which must be present in computed. (“omega” recc. for vibs.); toldict (Dict[str, float]) – Tolerances for specific keys. Returns:; allclose – Returns True if expected and computed are equal within tolerance; False otherwise. Return type:; bool. table of contents. compare_vibinfos; compare_vibinfos(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); compare_vibinfos. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html:1574,Deployability,update,updated,1574,"﻿. compare_vibinfos. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); compare_vibinfos. compare_vibinfos¶. psi4.driver.qcdb.vib.compare_vibinfos(expected, computed, tol, label, verbose=1, forgive=None, required=None, toldict=None)[source]¶; Returns True if two dictionaries of vibration Datum objects are equivalent within a tolerance. Parameters:. expected (Dict[str, Datum]) – Reference value against which computed is compared.; computed (Dict[str, Datum]) – Input value to compare against expected. Must contain all fields of expected.; tol (float) – Absolute tolerance.; label (str) – Label for passed and error messages.; verbose (int) – Control printing.; forgive (List) – Keys in top level which may change between expected and computed without triggering failure.; required (List) – Keys in top level which must be present in computed. (“omega” recc. for vibs.); toldict (Dict[str, float]) – Tolerances for specific keys. Returns:; allclose – Returns True if expected and computed are equal within tolerance; False otherwise. Return type:; bool. table of contents. compare_vibinfos; compare_vibinfos(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); compare_vibinfos. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html:774,Integrability,message,messages,774,"﻿. compare_vibinfos. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); compare_vibinfos. compare_vibinfos¶. psi4.driver.qcdb.vib.compare_vibinfos(expected, computed, tol, label, verbose=1, forgive=None, required=None, toldict=None)[source]¶; Returns True if two dictionaries of vibration Datum objects are equivalent within a tolerance. Parameters:. expected (Dict[str, Datum]) – Reference value against which computed is compared.; computed (Dict[str, Datum]) – Input value to compare against expected. Must contain all fields of expected.; tol (float) – Absolute tolerance.; label (str) – Label for passed and error messages.; verbose (int) – Control printing.; forgive (List) – Keys in top level which may change between expected and computed without triggering failure.; required (List) – Keys in top level which must be present in computed. (“omega” recc. for vibs.); toldict (Dict[str, float]) – Tolerances for specific keys. Returns:; allclose – Returns True if expected and computed are equal within tolerance; False otherwise. Return type:; bool. table of contents. compare_vibinfos; compare_vibinfos(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); compare_vibinfos. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.filter_nonvib.html:1388,Deployability,update,updated,1388,"﻿. filter_nonvib. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); filter_nonvib. filter_nonvib¶. psi4.driver.qcdb.vib.filter_nonvib(vibinfo, remove=None)[source]¶; From a dictionary of vibration Datum, remove normal coordinates. Parameters:. vibinfo (Dict[str, Datum]) – Results of Hessian analysis.; remove (List[int]) – 0-indexed indices of normal modes to remove from vibinfo. If; None, non-vibrations (R, T, or TR as labeled in vibinfo[‘TRV’]); will be removed. Returns:; Copy of input vibinfo with the specified modes removed from all; dictionary entries. Return type:; dict. Examples; >>> # after a harmonic analysis, remove first translations and rotations and then all non-A1 vibs; >>> allnormco = harmonic_analysis(...); >>> allvibs = filter_nonvib(allnormco); >>> a1vibs = filter_nonvib(allvibs, remove=[i for i, d in enumerate(allvibs['gamma'].data) if d != 'A1']). table of contents. filter_nonvib; filter_nonvib(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); filter_nonvib. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.qcdb.vib.filter_nonvib.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.filter_nonvib.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.filter_omega_to_real.html:865,Deployability,update,updated,865,"﻿. filter_omega_to_real. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); filter_omega_to_real. filter_omega_to_real¶. psi4.driver.qcdb.vib.filter_omega_to_real(omega)[source]¶; Returns ndarray (float) of omega (complex) where imaginary entries are converted to negative reals. Return type:; ndarray. Parameters:; omega (ndarray) – . table of contents. filter_omega_to_real; filter_omega_to_real(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); filter_omega_to_real. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.qcdb.vib.filter_omega_to_real.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.filter_omega_to_real.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.harmonic_analysis.html:2884,Deployability,update,updated,2884," units, [Eh a0/u] or [(e a0/a0)^2/u]; project_trans (bool) – Idealized translations projected out of final vibrational analysis.; project_rot (bool) – Idealized rotations projected out of final vibrational analysis. Returns:; Returns dictionary of vibration Datum objects (fields: label units data comment).; Also returns text suitable for printing. Return type:; dict, str. Notes. key; description (label & comment); units; data (real/imaginary modes). omega; frequency; cm^-1; ndarray(ndof) complex (real/imag). q; normal mode, normalized mass-weighted; a0 u^1/2; ndarray(ndof, ndof) float. w; normal mode, un-mass-weighted; a0; ndarray(ndof, ndof) float. x; normal mode, normalized un-mass-weighted; a0; ndarray(ndof, ndof) float. degeneracy; degree of degeneracy. ndarray(ndof) int. TRV; translation/rotation/vibration. ndarray(ndof) str ‘TR’ or ‘V’ or ‘-’ for partial. gamma; irreducible representation. ndarray(ndof) str irrep or None if unclassifiable. mu; reduced mass; u; ndarray(ndof) float (+/+). k; force constant; mDyne/A; ndarray(ndof) float (+/-). DQ0; RMS deviation v=0; a0 u^1/2; ndarray(ndof) float (+/0). Qtp0; Turning point v=0; a0 u^1/2; ndarray(ndof) float (+/0). Xtp0; Turning point v=0; a0; ndarray(ndof) float (+/0). theta_vib; char temp; K; ndarray(ndof) float (+/0). IR_intensity; infrared intensity; km/mol; ndarray(ndof) float (+/+). Examples; >>> # displacement of first atom in highest energy mode; >>> vibinfo['x'].data[:, -1].reshape(nat, 3)[0]. >>> # remove translations & rotations; >>> vibonly = filter_nonvib(vibinfo). table of contents. harmonic_analysis; harmonic_analysis(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); harmonic_analysis. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.qcdb.vib.harmonic_analysis.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.harmonic_analysis.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.harmonic_analysis.html:1927,Energy Efficiency,reduce,reduced,1927,"vatives in atomic units, [Eh a0/u] or [(e a0/a0)^2/u]; project_trans (bool) – Idealized translations projected out of final vibrational analysis.; project_rot (bool) – Idealized rotations projected out of final vibrational analysis. Returns:; Returns dictionary of vibration Datum objects (fields: label units data comment).; Also returns text suitable for printing. Return type:; dict, str. Notes. key; description (label & comment); units; data (real/imaginary modes). omega; frequency; cm^-1; ndarray(ndof) complex (real/imag). q; normal mode, normalized mass-weighted; a0 u^1/2; ndarray(ndof, ndof) float. w; normal mode, un-mass-weighted; a0; ndarray(ndof, ndof) float. x; normal mode, normalized un-mass-weighted; a0; ndarray(ndof, ndof) float. degeneracy; degree of degeneracy. ndarray(ndof) int. TRV; translation/rotation/vibration. ndarray(ndof) str ‘TR’ or ‘V’ or ‘-’ for partial. gamma; irreducible representation. ndarray(ndof) str irrep or None if unclassifiable. mu; reduced mass; u; ndarray(ndof) float (+/+). k; force constant; mDyne/A; ndarray(ndof) float (+/-). DQ0; RMS deviation v=0; a0 u^1/2; ndarray(ndof) float (+/0). Qtp0; Turning point v=0; a0 u^1/2; ndarray(ndof) float (+/0). Xtp0; Turning point v=0; a0; ndarray(ndof) float (+/0). theta_vib; char temp; K; ndarray(ndof) float (+/0). IR_intensity; infrared intensity; km/mol; ndarray(ndof) float (+/+). Examples; >>> # displacement of first atom in highest energy mode; >>> vibinfo['x'].data[:, -1].reshape(nat, 3)[0]. >>> # remove translations & rotations; >>> vibonly = filter_nonvib(vibinfo). table of contents. harmonic_analysis; harmonic_analysis(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); harmonic_analysis. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.qcdb.vib.harmonic_analysis.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.harmonic_analysis.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.harmonic_analysis.html:2380,Energy Efficiency,energy,energy,2380," units, [Eh a0/u] or [(e a0/a0)^2/u]; project_trans (bool) – Idealized translations projected out of final vibrational analysis.; project_rot (bool) – Idealized rotations projected out of final vibrational analysis. Returns:; Returns dictionary of vibration Datum objects (fields: label units data comment).; Also returns text suitable for printing. Return type:; dict, str. Notes. key; description (label & comment); units; data (real/imaginary modes). omega; frequency; cm^-1; ndarray(ndof) complex (real/imag). q; normal mode, normalized mass-weighted; a0 u^1/2; ndarray(ndof, ndof) float. w; normal mode, un-mass-weighted; a0; ndarray(ndof, ndof) float. x; normal mode, normalized un-mass-weighted; a0; ndarray(ndof, ndof) float. degeneracy; degree of degeneracy. ndarray(ndof) int. TRV; translation/rotation/vibration. ndarray(ndof) str ‘TR’ or ‘V’ or ‘-’ for partial. gamma; irreducible representation. ndarray(ndof) str irrep or None if unclassifiable. mu; reduced mass; u; ndarray(ndof) float (+/+). k; force constant; mDyne/A; ndarray(ndof) float (+/-). DQ0; RMS deviation v=0; a0 u^1/2; ndarray(ndof) float (+/0). Qtp0; Turning point v=0; a0 u^1/2; ndarray(ndof) float (+/0). Xtp0; Turning point v=0; a0; ndarray(ndof) float (+/0). theta_vib; char temp; K; ndarray(ndof) float (+/0). IR_intensity; infrared intensity; km/mol; ndarray(ndof) float (+/+). Examples; >>> # displacement of first atom in highest energy mode; >>> vibinfo['x'].data[:, -1].reshape(nat, 3)[0]. >>> # remove translations & rotations; >>> vibonly = filter_nonvib(vibinfo). table of contents. harmonic_analysis; harmonic_analysis(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); harmonic_analysis. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.qcdb.vib.harmonic_analysis.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.harmonic_analysis.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.hessian_symmetrize.html:1001,Deployability,update,updated,1001,"﻿. hessian_symmetrize. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); hessian_symmetrize. hessian_symmetrize¶. psi4.driver.qcdb.vib.hessian_symmetrize(hess, mol)[source]¶; Apply Abelian symmetry of mol to Hessian hess. Parameters:. hess (ndarray) – (3 * nat, 3 * nat) Hessian array perhaps with jitter unbecoming a symmetric molecule.; mol (Molecule) – Molecule at which Hessian computed. Returns:; (3 * nat, 3 * nat) symmetrized Hessian array. Return type:; numpy.ndarray. table of contents. hessian_symmetrize; hessian_symmetrize(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); hessian_symmetrize. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.qcdb.vib.hessian_symmetrize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.hessian_symmetrize.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.print_molden_vibs.html:1538,Deployability,update,updated,1538,"﻿. print_molden_vibs. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); print_molden_vibs. print_molden_vibs¶. psi4.driver.qcdb.vib.print_molden_vibs(vibinfo, atom_symbol, geom, standalone=True)[source]¶; Format vibrational analysis for Molden. Parameters:. vibinfo (Dict[str, Datum]) – Holds results of vibrational analysis.; atom_symbol (Union[ndarray, List[str]]) – (nat,) element symbols for geometry of vibrational analysis.; geom (Union[ndarray, List[List[float]]]) – (nat, 3) geometry of vibrational analysis [a0].; standalone (bool) – Whether returned string prefixed “[Molden Format]” for standalone rather than append. Returns:; vibinfo formatted for Molden, including FREQ, FR-COORD, & FR-NORM-COORD fields. Return type:; str. Notes; Molden format spec from http://www.cmbi.ru.nl/molden/molden_format.html; Specifies “atomic coordinates x,y,z and atomic displacements dx,dy,dz are all in Bohr (Atomic Unit of length)”; Despite it being quite wrong, imaginary modes are represented by a negative frequency. table of contents. print_molden_vibs; print_molden_vibs(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); print_molden_vibs. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.qcdb.vib.print_molden_vibs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.print_molden_vibs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.print_vibs.html:1679,Deployability,update,updated,1679,"﻿. print_vibs. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); print_vibs. print_vibs¶. psi4.driver.qcdb.vib.print_vibs(vibinfo, atom_lbl=None, *, normco='x', shortlong=True, groupby=None, prec=4, ncprec=None)[source]¶; Pretty printer for vibrational analysis. Parameters:. vibinfo (Dict[str, Datum]) – Results of a Hessian solution.; atom_lbl (List[str]) – Atomic symbols for printing. If None, integers used.; normco (str) – {‘q’, ‘w’, ‘x’}; Which normal coordinate definition to print (reduced mass, etc. unaffected by this parameter). Must be. q [a0 u^1/2], the mass-weighted normalized eigenvectors of the Hessian,; w [a0], the un-mass-weighted (Cartesian) of q, or; x [a0], the normalized w. shortlong (bool) – Whether normal coordinates should be in (nat, 3) True or (nat * 3, 1) False format.; groupby (int) – How many normal coordinates per row. Defaults to 3/6 for shortlong=T/F. Value of -1 uses one row.; prec (int) – Number of decimal places for frequencies, reduced masses, etc.; ncprec (int) – Number of decimal places for normal coordinates. Defaults to 2 for shortlong=short and 4 for shortlong=long. Returns:; String suitable for printing. Return type:; str. table of contents. print_vibs; print_vibs(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); print_vibs. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.qcdb.vib.print_vibs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.print_vibs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.print_vibs.html:647,Energy Efficiency,reduce,reduced,647,"﻿. print_vibs. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); print_vibs. print_vibs¶. psi4.driver.qcdb.vib.print_vibs(vibinfo, atom_lbl=None, *, normco='x', shortlong=True, groupby=None, prec=4, ncprec=None)[source]¶; Pretty printer for vibrational analysis. Parameters:. vibinfo (Dict[str, Datum]) – Results of a Hessian solution.; atom_lbl (List[str]) – Atomic symbols for printing. If None, integers used.; normco (str) – {‘q’, ‘w’, ‘x’}; Which normal coordinate definition to print (reduced mass, etc. unaffected by this parameter). Must be. q [a0 u^1/2], the mass-weighted normalized eigenvectors of the Hessian,; w [a0], the un-mass-weighted (Cartesian) of q, or; x [a0], the normalized w. shortlong (bool) – Whether normal coordinates should be in (nat, 3) True or (nat * 3, 1) False format.; groupby (int) – How many normal coordinates per row. Defaults to 3/6 for shortlong=T/F. Value of -1 uses one row.; prec (int) – Number of decimal places for frequencies, reduced masses, etc.; ncprec (int) – Number of decimal places for normal coordinates. Defaults to 2 for shortlong=short and 4 for shortlong=long. Returns:; String suitable for printing. Return type:; str. table of contents. print_vibs; print_vibs(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); print_vibs. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.qcdb.vib.print_vibs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.print_vibs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.print_vibs.html:1130,Energy Efficiency,reduce,reduced,1130,"﻿. print_vibs. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); print_vibs. print_vibs¶. psi4.driver.qcdb.vib.print_vibs(vibinfo, atom_lbl=None, *, normco='x', shortlong=True, groupby=None, prec=4, ncprec=None)[source]¶; Pretty printer for vibrational analysis. Parameters:. vibinfo (Dict[str, Datum]) – Results of a Hessian solution.; atom_lbl (List[str]) – Atomic symbols for printing. If None, integers used.; normco (str) – {‘q’, ‘w’, ‘x’}; Which normal coordinate definition to print (reduced mass, etc. unaffected by this parameter). Must be. q [a0 u^1/2], the mass-weighted normalized eigenvectors of the Hessian,; w [a0], the un-mass-weighted (Cartesian) of q, or; x [a0], the normalized w. shortlong (bool) – Whether normal coordinates should be in (nat, 3) True or (nat * 3, 1) False format.; groupby (int) – How many normal coordinates per row. Defaults to 3/6 for shortlong=T/F. Value of -1 uses one row.; prec (int) – Number of decimal places for frequencies, reduced masses, etc.; ncprec (int) – Number of decimal places for normal coordinates. Defaults to 2 for shortlong=short and 4 for shortlong=long. Returns:; String suitable for printing. Return type:; str. table of contents. print_vibs; print_vibs(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); print_vibs. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.qcdb.vib.print_vibs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.print_vibs.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.thermo.html:1579,Deployability,update,updated,1579,"﻿. thermo. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); thermo. thermo¶. psi4.driver.qcdb.vib.thermo(vibinfo, T, P, multiplicity, molecular_mass, E0, sigma, rot_const, rotor_type=None)[source]¶; Perform thermochemical analysis from vibrational output. Parameters:. E0 (float) – Electronic energy [Eh] at well bottom at 0 [K], CURRENT ENERGY.; molecular_mass (float) – Mass in [u] of molecule under analysis.; multiplicity (int) – Spin multiplicity of molecule under analysis.; rot_const (ndarray) – (3,) rotational constants in [cm^-1] of molecule under analysis.; sigma (int) – The rotational or external symmetry number determined from the point group.; rotor_type (str) – The rotor type for rotational stat mech purposes: RT_ATOM, RT_LINEAR, other.; T (float) – Temperature in [K]. Psi default 298.15. Note that 273.15 is IUPAC STP.; P (float) – Pressure in [Pa]. Psi default 101325. Note that 100000 is IUPAC STP. Returns:; First is every thermochemistry component in atomic units along with input conditions.; Second is formatted presentation of analysis. Return type:; dict, str. table of contents. thermo; thermo(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); thermo. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.qcdb.vib.thermo.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.thermo.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.thermo.html:450,Energy Efficiency,energy,energy,450,"﻿. thermo. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); thermo. thermo¶. psi4.driver.qcdb.vib.thermo(vibinfo, T, P, multiplicity, molecular_mass, E0, sigma, rot_const, rotor_type=None)[source]¶; Perform thermochemical analysis from vibrational output. Parameters:. E0 (float) – Electronic energy [Eh] at well bottom at 0 [K], CURRENT ENERGY.; molecular_mass (float) – Mass in [u] of molecule under analysis.; multiplicity (int) – Spin multiplicity of molecule under analysis.; rot_const (ndarray) – (3,) rotational constants in [cm^-1] of molecule under analysis.; sigma (int) – The rotational or external symmetry number determined from the point group.; rotor_type (str) – The rotor type for rotational stat mech purposes: RT_ATOM, RT_LINEAR, other.; T (float) – Temperature in [K]. Psi default 298.15. Note that 273.15 is IUPAC STP.; P (float) – Pressure in [Pa]. Psi default 101325. Note that 100000 is IUPAC STP. Returns:; First is every thermochemistry component in atomic units along with input conditions.; Second is formatted presentation of analysis. Return type:; dict, str. table of contents. thermo; thermo(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); thermo. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.qcdb.vib.thermo.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.thermo.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.thermo.html:495,Energy Efficiency,ENERGY,ENERGY,495,"﻿. thermo. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); thermo. thermo¶. psi4.driver.qcdb.vib.thermo(vibinfo, T, P, multiplicity, molecular_mass, E0, sigma, rot_const, rotor_type=None)[source]¶; Perform thermochemical analysis from vibrational output. Parameters:. E0 (float) – Electronic energy [Eh] at well bottom at 0 [K], CURRENT ENERGY.; molecular_mass (float) – Mass in [u] of molecule under analysis.; multiplicity (int) – Spin multiplicity of molecule under analysis.; rot_const (ndarray) – (3,) rotational constants in [cm^-1] of molecule under analysis.; sigma (int) – The rotational or external symmetry number determined from the point group.; rotor_type (str) – The rotor type for rotational stat mech purposes: RT_ATOM, RT_LINEAR, other.; T (float) – Temperature in [K]. Psi default 298.15. Note that 273.15 is IUPAC STP.; P (float) – Pressure in [Pa]. Psi default 101325. Note that 100000 is IUPAC STP. Returns:; First is every thermochemistry component in atomic units along with input conditions.; Second is formatted presentation of analysis. Return type:; dict, str. table of contents. thermo; thermo(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); thermo. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.qcdb.vib.thermo.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.thermo.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.thermo.html:356,Performance,Perform,Perform,356,"﻿. thermo. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); thermo. thermo¶. psi4.driver.qcdb.vib.thermo(vibinfo, T, P, multiplicity, molecular_mass, E0, sigma, rot_const, rotor_type=None)[source]¶; Perform thermochemical analysis from vibrational output. Parameters:. E0 (float) – Electronic energy [Eh] at well bottom at 0 [K], CURRENT ENERGY.; molecular_mass (float) – Mass in [u] of molecule under analysis.; multiplicity (int) – Spin multiplicity of molecule under analysis.; rot_const (ndarray) – (3,) rotational constants in [cm^-1] of molecule under analysis.; sigma (int) – The rotational or external symmetry number determined from the point group.; rotor_type (str) – The rotor type for rotational stat mech purposes: RT_ATOM, RT_LINEAR, other.; T (float) – Temperature in [K]. Psi default 298.15. Note that 273.15 is IUPAC STP.; P (float) – Pressure in [Pa]. Psi default 101325. Note that 100000 is IUPAC STP. Returns:; First is every thermochemistry component in atomic units along with input conditions.; Second is formatted presentation of analysis. Return type:; dict, str. table of contents. thermo; thermo(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); thermo. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.qcdb.vib.thermo.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.qcdb.vib.thermo.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.QMMM.html:476,Deployability,update,updated,476,"﻿. QMMM. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; QMMM. QMMM¶. class psi4.driver.QMMM[source]¶; Bases: object; Hold charges and psi4.core.ExternalPotential. Use psi4.driver.QMMMbohr instead. table of contents. QMMM; QMMM. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; QMMM. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.QMMM.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.QMMM.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.QMMM.html:179,Energy Efficiency,charge,charges,179,"﻿. QMMM. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; QMMM. QMMM¶. class psi4.driver.QMMM[source]¶; Bases: object; Hold charges and psi4.core.ExternalPotential. Use psi4.driver.QMMMbohr instead. table of contents. QMMM; QMMM. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; QMMM. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.QMMM.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.QMMM.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html:1574,Deployability,update,updated,1574,"﻿. QMMMbohr. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. QMMMbohr¶. class psi4.driver.QMMMbohr[source]¶; Bases: object; Hold charges and psi4.core.ExternalPotential. To add external charges to a calculation, prefer; passing the array of charges with kwarg external_potentials, as in extern2 example.; Methods Summary. addChargeAngstrom(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Bohr. addDiffuse(diffuse); Function to add a diffuse charge field diffuse. populateExtern(); Function to define a charge field external to the molecule through point and diffuse charges. Methods Documentation. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. table of contents. QMMMbohr; QMMMbohr; QMMMbohr.addChargeAngstrom(); QMMMbohr.addChargeBohr(); QMMMbohr.addDiffuse(); QMMMbohr.populateExtern(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html:195,Energy Efficiency,charge,charges,195,"﻿. QMMMbohr. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. QMMMbohr¶. class psi4.driver.QMMMbohr[source]¶; Bases: object; Hold charges and psi4.core.ExternalPotential. To add external charges to a calculation, prefer; passing the array of charges with kwarg external_potentials, as in extern2 example.; Methods Summary. addChargeAngstrom(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Bohr. addDiffuse(diffuse); Function to add a diffuse charge field diffuse. populateExtern(); Function to define a charge field external to the molecule through point and diffuse charges. Methods Documentation. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. table of contents. QMMMbohr; QMMMbohr; QMMMbohr.addChargeAngstrom(); QMMMbohr.addChargeBohr(); QMMMbohr.addDiffuse(); QMMMbohr.populateExtern(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html:252,Energy Efficiency,charge,charges,252,"﻿. QMMMbohr. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. QMMMbohr¶. class psi4.driver.QMMMbohr[source]¶; Bases: object; Hold charges and psi4.core.ExternalPotential. To add external charges to a calculation, prefer; passing the array of charges with kwarg external_potentials, as in extern2 example.; Methods Summary. addChargeAngstrom(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Bohr. addDiffuse(diffuse); Function to add a diffuse charge field diffuse. populateExtern(); Function to define a charge field external to the molecule through point and diffuse charges. Methods Documentation. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. table of contents. QMMMbohr; QMMMbohr; QMMMbohr.addChargeAngstrom(); QMMMbohr.addChargeBohr(); QMMMbohr.addDiffuse(); QMMMbohr.populateExtern(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html:307,Energy Efficiency,charge,charges,307,"﻿. QMMMbohr. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. QMMMbohr¶. class psi4.driver.QMMMbohr[source]¶; Bases: object; Hold charges and psi4.core.ExternalPotential. To add external charges to a calculation, prefer; passing the array of charges with kwarg external_potentials, as in extern2 example.; Methods Summary. addChargeAngstrom(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Bohr. addDiffuse(diffuse); Function to add a diffuse charge field diffuse. populateExtern(); Function to define a charge field external to the molecule through point and diffuse charges. Methods Documentation. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. table of contents. QMMMbohr; QMMMbohr; QMMMbohr.addChargeAngstrom(); QMMMbohr.addChargeBohr(); QMMMbohr.addDiffuse(); QMMMbohr.populateExtern(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html:443,Energy Efficiency,charge,charge,443,"﻿. QMMMbohr. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. QMMMbohr¶. class psi4.driver.QMMMbohr[source]¶; Bases: object; Hold charges and psi4.core.ExternalPotential. To add external charges to a calculation, prefer; passing the array of charges with kwarg external_potentials, as in extern2 example.; Methods Summary. addChargeAngstrom(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Bohr. addDiffuse(diffuse); Function to add a diffuse charge field diffuse. populateExtern(); Function to define a charge field external to the molecule through point and diffuse charges. Methods Documentation. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. table of contents. QMMMbohr; QMMMbohr; QMMMbohr.addChargeAngstrom(); QMMMbohr.addChargeBohr(); QMMMbohr.addDiffuse(); QMMMbohr.populateExtern(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html:549,Energy Efficiency,charge,charge,549,"﻿. QMMMbohr. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. QMMMbohr¶. class psi4.driver.QMMMbohr[source]¶; Bases: object; Hold charges and psi4.core.ExternalPotential. To add external charges to a calculation, prefer; passing the array of charges with kwarg external_potentials, as in extern2 example.; Methods Summary. addChargeAngstrom(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Bohr. addDiffuse(diffuse); Function to add a diffuse charge field diffuse. populateExtern(); Function to define a charge field external to the molecule through point and diffuse charges. Methods Documentation. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. table of contents. QMMMbohr; QMMMbohr; QMMMbohr.addChargeAngstrom(); QMMMbohr.addChargeBohr(); QMMMbohr.addDiffuse(); QMMMbohr.populateExtern(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html:646,Energy Efficiency,charge,charge,646,"﻿. QMMMbohr. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. QMMMbohr¶. class psi4.driver.QMMMbohr[source]¶; Bases: object; Hold charges and psi4.core.ExternalPotential. To add external charges to a calculation, prefer; passing the array of charges with kwarg external_potentials, as in extern2 example.; Methods Summary. addChargeAngstrom(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Bohr. addDiffuse(diffuse); Function to add a diffuse charge field diffuse. populateExtern(); Function to define a charge field external to the molecule through point and diffuse charges. Methods Documentation. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. table of contents. QMMMbohr; QMMMbohr; QMMMbohr.addChargeAngstrom(); QMMMbohr.addChargeBohr(); QMMMbohr.addDiffuse(); QMMMbohr.populateExtern(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html:707,Energy Efficiency,charge,charge,707,"﻿. QMMMbohr. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. QMMMbohr¶. class psi4.driver.QMMMbohr[source]¶; Bases: object; Hold charges and psi4.core.ExternalPotential. To add external charges to a calculation, prefer; passing the array of charges with kwarg external_potentials, as in extern2 example.; Methods Summary. addChargeAngstrom(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Bohr. addDiffuse(diffuse); Function to add a diffuse charge field diffuse. populateExtern(); Function to define a charge field external to the molecule through point and diffuse charges. Methods Documentation. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. table of contents. QMMMbohr; QMMMbohr; QMMMbohr.addChargeAngstrom(); QMMMbohr.addChargeBohr(); QMMMbohr.addDiffuse(); QMMMbohr.populateExtern(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html:771,Energy Efficiency,charge,charges,771,"﻿. QMMMbohr. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. QMMMbohr¶. class psi4.driver.QMMMbohr[source]¶; Bases: object; Hold charges and psi4.core.ExternalPotential. To add external charges to a calculation, prefer; passing the array of charges with kwarg external_potentials, as in extern2 example.; Methods Summary. addChargeAngstrom(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Bohr. addDiffuse(diffuse); Function to add a diffuse charge field diffuse. populateExtern(); Function to define a charge field external to the molecule through point and diffuse charges. Methods Documentation. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. table of contents. QMMMbohr; QMMMbohr; QMMMbohr.addChargeAngstrom(); QMMMbohr.addChargeBohr(); QMMMbohr.addDiffuse(); QMMMbohr.populateExtern(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html:867,Energy Efficiency,charge,charge,867,"﻿. QMMMbohr. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. QMMMbohr¶. class psi4.driver.QMMMbohr[source]¶; Bases: object; Hold charges and psi4.core.ExternalPotential. To add external charges to a calculation, prefer; passing the array of charges with kwarg external_potentials, as in extern2 example.; Methods Summary. addChargeAngstrom(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Bohr. addDiffuse(diffuse); Function to add a diffuse charge field diffuse. populateExtern(); Function to define a charge field external to the molecule through point and diffuse charges. Methods Documentation. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. table of contents. QMMMbohr; QMMMbohr; QMMMbohr.addChargeAngstrom(); QMMMbohr.addChargeBohr(); QMMMbohr.addDiffuse(); QMMMbohr.populateExtern(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html:983,Energy Efficiency,charge,charge,983,"﻿. QMMMbohr. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. QMMMbohr¶. class psi4.driver.QMMMbohr[source]¶; Bases: object; Hold charges and psi4.core.ExternalPotential. To add external charges to a calculation, prefer; passing the array of charges with kwarg external_potentials, as in extern2 example.; Methods Summary. addChargeAngstrom(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Bohr. addDiffuse(diffuse); Function to add a diffuse charge field diffuse. populateExtern(); Function to define a charge field external to the molecule through point and diffuse charges. Methods Documentation. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. table of contents. QMMMbohr; QMMMbohr; QMMMbohr.addChargeAngstrom(); QMMMbohr.addChargeBohr(); QMMMbohr.addDiffuse(); QMMMbohr.populateExtern(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html:1090,Energy Efficiency,charge,charge,1090,"﻿. QMMMbohr. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. QMMMbohr¶. class psi4.driver.QMMMbohr[source]¶; Bases: object; Hold charges and psi4.core.ExternalPotential. To add external charges to a calculation, prefer; passing the array of charges with kwarg external_potentials, as in extern2 example.; Methods Summary. addChargeAngstrom(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Bohr. addDiffuse(diffuse); Function to add a diffuse charge field diffuse. populateExtern(); Function to define a charge field external to the molecule through point and diffuse charges. Methods Documentation. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. table of contents. QMMMbohr; QMMMbohr; QMMMbohr.addChargeAngstrom(); QMMMbohr.addChargeBohr(); QMMMbohr.addDiffuse(); QMMMbohr.populateExtern(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html:1160,Energy Efficiency,charge,charge,1160,"﻿. QMMMbohr. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. QMMMbohr¶. class psi4.driver.QMMMbohr[source]¶; Bases: object; Hold charges and psi4.core.ExternalPotential. To add external charges to a calculation, prefer; passing the array of charges with kwarg external_potentials, as in extern2 example.; Methods Summary. addChargeAngstrom(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Bohr. addDiffuse(diffuse); Function to add a diffuse charge field diffuse. populateExtern(); Function to define a charge field external to the molecule through point and diffuse charges. Methods Documentation. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. table of contents. QMMMbohr; QMMMbohr; QMMMbohr.addChargeAngstrom(); QMMMbohr.addChargeBohr(); QMMMbohr.addDiffuse(); QMMMbohr.populateExtern(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html:1225,Energy Efficiency,charge,charges,1225,"﻿. QMMMbohr. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. QMMMbohr¶. class psi4.driver.QMMMbohr[source]¶; Bases: object; Hold charges and psi4.core.ExternalPotential. To add external charges to a calculation, prefer; passing the array of charges with kwarg external_potentials, as in extern2 example.; Methods Summary. addChargeAngstrom(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Bohr. addDiffuse(diffuse); Function to add a diffuse charge field diffuse. populateExtern(); Function to define a charge field external to the molecule through point and diffuse charges. Methods Documentation. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. table of contents. QMMMbohr; QMMMbohr; QMMMbohr.addChargeAngstrom(); QMMMbohr.addChargeBohr(); QMMMbohr.addDiffuse(); QMMMbohr.populateExtern(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.QMMMbohr.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.sanitize_method.html:681,Deployability,update,updated,681,"﻿. sanitize_method. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; sanitize_method. sanitize_method¶. psi4.driver.sanitize_method(name)[source]¶; Replace characters in method name so that suitable for function name or Sphinx table anchor; (both as-is) or HTML table link (replace underscore in returned string by dash). Return type:; str. Parameters:; name (str) – . table of contents. sanitize_method; sanitize_method(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; sanitize_method. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.sanitize_method.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.sanitize_method.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.sanitize_name.html:729,Deployability,update,updated,729,"﻿. sanitize_name. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; sanitize_name. sanitize_name¶. psi4.driver.sanitize_name(name)[source]¶; Function to return name in coded form, stripped of; characters that confuse filenames, characters into lowercase,; + into p, * into s, and (, ), -,; & , into _.; Also checks the sanitized name against a list of restricted C++ keywords. Return type:; str. Parameters:; name (str) – . table of contents. sanitize_name; sanitize_name(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; sanitize_name. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.sanitize_name.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.sanitize_name.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.sanitize_name.html:373,Security,sanitiz,sanitized,373,"﻿. sanitize_name. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; sanitize_name. sanitize_name¶. psi4.driver.sanitize_name(name)[source]¶; Function to return name in coded form, stripped of; characters that confuse filenames, characters into lowercase,; + into p, * into s, and (, ), -,; & , into _.; Also checks the sanitized name against a list of restricted C++ keywords. Return type:; str. Parameters:; name (str) – . table of contents. sanitize_name; sanitize_name(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; sanitize_name. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.sanitize_name.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.sanitize_name.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.SCFConvergenceError.html:272,Availability,Error,Error,272,"﻿. SCFConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SCFConvergenceError. SCFConvergenceError¶. exception psi4.driver.SCFConvergenceError(eqn_description, iteration, wfn, e_conv, d_conv)[source]¶; Error called for problems with SCF iterations. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., SCF preiterations).; iteration (int) – Iteration number on which routine failed.; wfn (Wavefunction) – Wavefunction at time of exception.; e_conv (float) – Change in energy for last iteration.; d_conv (float) – RMS change in density for last iteration. message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. wfn¶; Wavefunction at time of exception. e_conv¶; Change in energy for last iteration. d_conv¶; RMS change in density for last iteration. table of contents. SCFConvergenceError; SCFConvergenceError; SCFConvergenceError.message; SCFConvergenceError.iteration; SCFConvergenceError.wfn; SCFConvergenceError.e_conv; SCFConvergenceError.d_conv. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SCFConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.SCFConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.SCFConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.SCFConvergenceError.html:1309,Deployability,update,updated,1309,"﻿. SCFConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SCFConvergenceError. SCFConvergenceError¶. exception psi4.driver.SCFConvergenceError(eqn_description, iteration, wfn, e_conv, d_conv)[source]¶; Error called for problems with SCF iterations. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., SCF preiterations).; iteration (int) – Iteration number on which routine failed.; wfn (Wavefunction) – Wavefunction at time of exception.; e_conv (float) – Change in energy for last iteration.; d_conv (float) – RMS change in density for last iteration. message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. wfn¶; Wavefunction at time of exception. e_conv¶; Change in energy for last iteration. d_conv¶; RMS change in density for last iteration. table of contents. SCFConvergenceError; SCFConvergenceError; SCFConvergenceError.message; SCFConvergenceError.iteration; SCFConvergenceError.wfn; SCFConvergenceError.e_conv; SCFConvergenceError.d_conv. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SCFConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.SCFConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.SCFConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.SCFConvergenceError.html:564,Energy Efficiency,energy,energy,564,"﻿. SCFConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SCFConvergenceError. SCFConvergenceError¶. exception psi4.driver.SCFConvergenceError(eqn_description, iteration, wfn, e_conv, d_conv)[source]¶; Error called for problems with SCF iterations. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., SCF preiterations).; iteration (int) – Iteration number on which routine failed.; wfn (Wavefunction) – Wavefunction at time of exception.; e_conv (float) – Change in energy for last iteration.; d_conv (float) – RMS change in density for last iteration. message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. wfn¶; Wavefunction at time of exception. e_conv¶; Change in energy for last iteration. d_conv¶; RMS change in density for last iteration. table of contents. SCFConvergenceError; SCFConvergenceError; SCFConvergenceError.message; SCFConvergenceError.iteration; SCFConvergenceError.wfn; SCFConvergenceError.e_conv; SCFConvergenceError.d_conv. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SCFConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.SCFConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.SCFConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.SCFConvergenceError.html:823,Energy Efficiency,energy,energy,823,"﻿. SCFConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SCFConvergenceError. SCFConvergenceError¶. exception psi4.driver.SCFConvergenceError(eqn_description, iteration, wfn, e_conv, d_conv)[source]¶; Error called for problems with SCF iterations. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., SCF preiterations).; iteration (int) – Iteration number on which routine failed.; wfn (Wavefunction) – Wavefunction at time of exception.; e_conv (float) – Change in energy for last iteration.; d_conv (float) – RMS change in density for last iteration. message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. wfn¶; Wavefunction at time of exception. e_conv¶; Change in energy for last iteration. d_conv¶; RMS change in density for last iteration. table of contents. SCFConvergenceError; SCFConvergenceError; SCFConvergenceError.message; SCFConvergenceError.iteration; SCFConvergenceError.wfn; SCFConvergenceError.e_conv; SCFConvergenceError.d_conv. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SCFConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.SCFConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.SCFConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.SCFConvergenceError.html:367,Integrability,rout,routine,367,"﻿. SCFConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SCFConvergenceError. SCFConvergenceError¶. exception psi4.driver.SCFConvergenceError(eqn_description, iteration, wfn, e_conv, d_conv)[source]¶; Error called for problems with SCF iterations. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., SCF preiterations).; iteration (int) – Iteration number on which routine failed.; wfn (Wavefunction) – Wavefunction at time of exception.; e_conv (float) – Change in energy for last iteration.; d_conv (float) – RMS change in density for last iteration. message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. wfn¶; Wavefunction at time of exception. e_conv¶; Change in energy for last iteration. d_conv¶; RMS change in density for last iteration. table of contents. SCFConvergenceError; SCFConvergenceError; SCFConvergenceError.message; SCFConvergenceError.iteration; SCFConvergenceError.wfn; SCFConvergenceError.e_conv; SCFConvergenceError.d_conv. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SCFConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.SCFConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.SCFConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.SCFConvergenceError.html:463,Integrability,rout,routine,463,"﻿. SCFConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SCFConvergenceError. SCFConvergenceError¶. exception psi4.driver.SCFConvergenceError(eqn_description, iteration, wfn, e_conv, d_conv)[source]¶; Error called for problems with SCF iterations. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., SCF preiterations).; iteration (int) – Iteration number on which routine failed.; wfn (Wavefunction) – Wavefunction at time of exception.; e_conv (float) – Change in energy for last iteration.; d_conv (float) – RMS change in density for last iteration. message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. wfn¶; Wavefunction at time of exception. e_conv¶; Change in energy for last iteration. d_conv¶; RMS change in density for last iteration. table of contents. SCFConvergenceError; SCFConvergenceError; SCFConvergenceError.message; SCFConvergenceError.iteration; SCFConvergenceError.wfn; SCFConvergenceError.e_conv; SCFConvergenceError.d_conv. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SCFConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.SCFConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.SCFConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.SCFConvergenceError.html:651,Integrability,message,message,651,"﻿. SCFConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SCFConvergenceError. SCFConvergenceError¶. exception psi4.driver.SCFConvergenceError(eqn_description, iteration, wfn, e_conv, d_conv)[source]¶; Error called for problems with SCF iterations. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., SCF preiterations).; iteration (int) – Iteration number on which routine failed.; wfn (Wavefunction) – Wavefunction at time of exception.; e_conv (float) – Change in energy for last iteration.; d_conv (float) – RMS change in density for last iteration. message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. wfn¶; Wavefunction at time of exception. e_conv¶; Change in energy for last iteration. d_conv¶; RMS change in density for last iteration. table of contents. SCFConvergenceError; SCFConvergenceError; SCFConvergenceError.message; SCFConvergenceError.iteration; SCFConvergenceError.wfn; SCFConvergenceError.e_conv; SCFConvergenceError.d_conv. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SCFConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.SCFConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.SCFConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.SCFConvergenceError.html:747,Integrability,rout,routine,747,"﻿. SCFConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SCFConvergenceError. SCFConvergenceError¶. exception psi4.driver.SCFConvergenceError(eqn_description, iteration, wfn, e_conv, d_conv)[source]¶; Error called for problems with SCF iterations. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., SCF preiterations).; iteration (int) – Iteration number on which routine failed.; wfn (Wavefunction) – Wavefunction at time of exception.; e_conv (float) – Change in energy for last iteration.; d_conv (float) – RMS change in density for last iteration. message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. wfn¶; Wavefunction at time of exception. e_conv¶; Change in energy for last iteration. d_conv¶; RMS change in density for last iteration. table of contents. SCFConvergenceError; SCFConvergenceError; SCFConvergenceError.message; SCFConvergenceError.iteration; SCFConvergenceError.wfn; SCFConvergenceError.e_conv; SCFConvergenceError.d_conv. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SCFConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.SCFConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.SCFConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.SCFConvergenceError.html:982,Integrability,message,message,982,"﻿. SCFConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SCFConvergenceError. SCFConvergenceError¶. exception psi4.driver.SCFConvergenceError(eqn_description, iteration, wfn, e_conv, d_conv)[source]¶; Error called for problems with SCF iterations. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., SCF preiterations).; iteration (int) – Iteration number on which routine failed.; wfn (Wavefunction) – Wavefunction at time of exception.; e_conv (float) – Change in energy for last iteration.; d_conv (float) – RMS change in density for last iteration. message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. wfn¶; Wavefunction at time of exception. e_conv¶; Change in energy for last iteration. d_conv¶; RMS change in density for last iteration. table of contents. SCFConvergenceError; SCFConvergenceError; SCFConvergenceError.message; SCFConvergenceError.iteration; SCFConvergenceError.wfn; SCFConvergenceError.e_conv; SCFConvergenceError.d_conv. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SCFConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.SCFConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.SCFConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.scf_helper.html:802,Deployability,update,updated,802,"﻿. scf_helper. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; scf_helper. scf_helper¶. psi4.driver.scf_helper(name, post_scf=True, **kwargs)[source]¶; Function serving as helper to SCF, choosing whether to cast; up or just run SCF with a standard guess. This preserves; previous SCF options set by other procedures (e.g., SAPT; output file types for SCF). Most run_* functions should call; this function, common exceptions being when multireference; SCF is needed or when restarting from converged SCF. table of contents. scf_helper; scf_helper(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; scf_helper. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.scf_helper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.scf_helper.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.scf_wavefunction_factory.html:717,Deployability,update,updated,717,"﻿. scf_wavefunction_factory. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; scf_wavefunction_factory. scf_wavefunction_factory¶. psi4.driver.scf_wavefunction_factory(name, ref_wfn, reference, **kwargs)[source]¶; Builds the correct (R/U/RO/CU HF/KS) wavefunction from the; provided information, sets relevant auxiliary basis sets on it,; and prepares any empirical dispersion. table of contents. scf_wavefunction_factory; scf_wavefunction_factory(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; scf_wavefunction_factory. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.scf_wavefunction_factory.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.scf_wavefunction_factory.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.set_memory.html:1963,Deployability,update,updated,1963,"   .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_memory. set_memory¶. psi4.driver.set_memory(inputval, execute=True, quiet=False)[source]¶; Reset the total memory allocation. Parameters:. inputval (Union[str, int, float]) – Memory value. An Integer or float is taken literally as bytes to be set.; A string is taken as a unit-containing value (e.g., 30 mb), which is; case-insensitive.; execute (bool) – When False, interpret inputval without setting in Psi4 core.; quiet (bool) – When True, do not print to the output file. Returns:; Number of bytes of memory set. Return type:; int. Raises:; ValidationError – When <500MiB or disallowed type or misformatted. Examples; >>> # [1] Passing absolute number of bytes; >>> psi4.set_memory(600000000); >>> psi4.get_memory(); Out[1]: 600000000L. >>> # [2] Passing memory value as string with units; >>> psi4.set_memory('30 GB'); >>> psi4.get_memory(); Out[2]: 30000000000L. >>> # Good examples; >>> psi4.set_memory(800000000) # 800000000; >>> psi4.set_memory(2004088624.9) # 2004088624; >>> psi4.set_memory(1.0e9) # 1000000000; >>> psi4.set_memory('600 mb') # 600000000; >>> psi4.set_memory('600.0 MiB') # 629145600; >>> psi4.set_memory('.6 Gb') # 600000000; >>> psi4.set_memory(' 100000000kB ') # 100000000000; >>> psi4.set_memory('2 eb') # 2000000000000000000. >>> # Bad examples; >>> psi4.set_memory({}) # odd type; >>> psi4.set_memory('') # no info; >>> psi4.set_memory(""8 dimms"") # unacceptable units; >>> psi4.set_memory(""1e5 gb"") # string w/ exponent; >>> psi4.set_memory(""5e5"") # string w/o units; >>> psi4.set_memory(2000) # mem too small; >>> psi4.set_memory(-5e5) # negative (and too small). table of contents. set_memory; set_memory(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_memory. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.set_memory.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.set_memory.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.set_memory.html:668,Security,Validat,ValidationError,668,"﻿. set_memory. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_memory. set_memory¶. psi4.driver.set_memory(inputval, execute=True, quiet=False)[source]¶; Reset the total memory allocation. Parameters:. inputval (Union[str, int, float]) – Memory value. An Integer or float is taken literally as bytes to be set.; A string is taken as a unit-containing value (e.g., 30 mb), which is; case-insensitive.; execute (bool) – When False, interpret inputval without setting in Psi4 core.; quiet (bool) – When True, do not print to the output file. Returns:; Number of bytes of memory set. Return type:; int. Raises:; ValidationError – When <500MiB or disallowed type or misformatted. Examples; >>> # [1] Passing absolute number of bytes; >>> psi4.set_memory(600000000); >>> psi4.get_memory(); Out[1]: 600000000L. >>> # [2] Passing memory value as string with units; >>> psi4.set_memory('30 GB'); >>> psi4.get_memory(); Out[2]: 30000000000L. >>> # Good examples; >>> psi4.set_memory(800000000) # 800000000; >>> psi4.set_memory(2004088624.9) # 2004088624; >>> psi4.set_memory(1.0e9) # 1000000000; >>> psi4.set_memory('600 mb') # 600000000; >>> psi4.set_memory('600.0 MiB') # 629145600; >>> psi4.set_memory('.6 Gb') # 600000000; >>> psi4.set_memory(' 100000000kB ') # 100000000000; >>> psi4.set_memory('2 eb') # 2000000000000000000. >>> # Bad examples; >>> psi4.set_memory({}) # odd type; >>> psi4.set_memory('') # no info; >>> psi4.set_memory(""8 dimms"") # unacceptable units; >>> psi4.set_memory(""1e5 gb"") # string w/ exponent; >>> psi4.set_memory(""5e5"") # string w/o units; >>> psi4.set_memory(2000) # mem too small; >>> psi4.set_memory(-5e5) # negative (and too small). table of contents. set_memory; set_memory(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_memory. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.set_memory.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.set_memory.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.set_module_options.html:747,Deployability,update,updated,747,"﻿. set_module_options. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_module_options. set_module_options¶. psi4.driver.set_module_options(module, options_dict)[source]¶; Sets Psi4 module options from a module specification and input dictionary.; :rtype: None. Deprecated since version 1.5: Use psi4.driver.p4util.set_options() instead. Parameters:. module (str) – ; options_dict (Dict[str, Any]) – . Return type:; None. table of contents. set_module_options; set_module_options(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_module_options. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.set_module_options.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.set_module_options.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.set_options.html:1026,Deployability,update,updated,1026,"﻿. set_options. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_options. set_options¶. psi4.driver.set_options(options_dict, verbose=1)[source]¶; Sets Psi4 options from an input dictionary. Parameters:. options_dict (Dict[str, Any]) – Dictionary where keys are case insensitive and values are the option value. For global options, keys are ""<option_name>"".; For option local to “<module_name>”, keys are ""<module_name>__<option_name>""; (double underscore separation).; For contents that would be in pcm = {...}, use ""PCM__INPUT"" key. verbose (int) – Control print volume. Return type:; None. Examples; >>> psi4.set_options({; ""basis"": ""cc-pvtz"",; ""df_basis_scf"": ""cc-pvtz-jkfit"",; ""scf__reference"": ""uhf"",; ""print"": 2}). table of contents. set_options; set_options(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; set_options. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.set_options.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.set_options.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.tdscf.html:399,Deployability,update,updated,399,"﻿. tdscf. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; tdscf. tdscf¶. psi4.driver.tdscf(wfn, **kwargs)[source]¶. table of contents. tdscf; tdscf(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; tdscf. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.tdscf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.tdscf.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TDSCFConvergenceError.html:260,Availability,Error,Error,260,"﻿. TDSCFConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TDSCFConvergenceError. TDSCFConvergenceError¶. exception psi4.driver.TDSCFConvergenceError(iteration, wfn, what, stats)[source]¶; Error called for problems with TDSCF iterations. Parameters:. wfn (Wavefunction) – Wavefunction at time of exception; what (str) – What we were trying to solve for (singlets/triplets, irrep) when we failed to converge; stats (Dict[str, Any]) – Dictionary of convergence statistics of last iteration.; Keys are:. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. iteration (int) – . message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. wfn¶; Wavefunction at time of exception. what¶; What we were trying to solve for (singlets/triplets, irrep) when we; failed to converge. stats¶; Dictionary of convergence statistics of last iteration. See keys above. table of contents. TDSCFConvergenceError; TDSCFConvergenceError; TDSCFConvergenceError.message; TDSCFConvergenceError.iteration; TDSCFConvergenceError.wfn; TDSCFConvergenceError.what; TDSCFConvergenceError.stats. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TDSCFConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.TDSCFConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TDSCFConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TDSCFConvergenceError.html:1800,Deployability,update,updated,1800,"﻿. TDSCFConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TDSCFConvergenceError. TDSCFConvergenceError¶. exception psi4.driver.TDSCFConvergenceError(iteration, wfn, what, stats)[source]¶; Error called for problems with TDSCF iterations. Parameters:. wfn (Wavefunction) – Wavefunction at time of exception; what (str) – What we were trying to solve for (singlets/triplets, irrep) when we failed to converge; stats (Dict[str, Any]) – Dictionary of convergence statistics of last iteration.; Keys are:. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. iteration (int) – . message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. wfn¶; Wavefunction at time of exception. what¶; What we were trying to solve for (singlets/triplets, irrep) when we; failed to converge. stats¶; Dictionary of convergence statistics of last iteration. See keys above. table of contents. TDSCFConvergenceError; TDSCFConvergenceError; TDSCFConvergenceError.message; TDSCFConvergenceError.iteration; TDSCFConvergenceError.wfn; TDSCFConvergenceError.what; TDSCFConvergenceError.stats. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TDSCFConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.TDSCFConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TDSCFConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TDSCFConvergenceError.html:1050,Integrability,message,message,1050,"﻿. TDSCFConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TDSCFConvergenceError. TDSCFConvergenceError¶. exception psi4.driver.TDSCFConvergenceError(iteration, wfn, what, stats)[source]¶; Error called for problems with TDSCF iterations. Parameters:. wfn (Wavefunction) – Wavefunction at time of exception; what (str) – What we were trying to solve for (singlets/triplets, irrep) when we failed to converge; stats (Dict[str, Any]) – Dictionary of convergence statistics of last iteration.; Keys are:. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. iteration (int) – . message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. wfn¶; Wavefunction at time of exception. what¶; What we were trying to solve for (singlets/triplets, irrep) when we; failed to converge. stats¶; Dictionary of convergence statistics of last iteration. See keys above. table of contents. TDSCFConvergenceError; TDSCFConvergenceError; TDSCFConvergenceError.message; TDSCFConvergenceError.iteration; TDSCFConvergenceError.wfn; TDSCFConvergenceError.what; TDSCFConvergenceError.stats. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TDSCFConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.TDSCFConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TDSCFConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TDSCFConvergenceError.html:1146,Integrability,rout,routine,1146,"﻿. TDSCFConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TDSCFConvergenceError. TDSCFConvergenceError¶. exception psi4.driver.TDSCFConvergenceError(iteration, wfn, what, stats)[source]¶; Error called for problems with TDSCF iterations. Parameters:. wfn (Wavefunction) – Wavefunction at time of exception; what (str) – What we were trying to solve for (singlets/triplets, irrep) when we failed to converge; stats (Dict[str, Any]) – Dictionary of convergence statistics of last iteration.; Keys are:. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. iteration (int) – . message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. wfn¶; Wavefunction at time of exception. what¶; What we were trying to solve for (singlets/triplets, irrep) when we; failed to converge. stats¶; Dictionary of convergence statistics of last iteration. See keys above. table of contents. TDSCFConvergenceError; TDSCFConvergenceError; TDSCFConvergenceError.message; TDSCFConvergenceError.iteration; TDSCFConvergenceError.wfn; TDSCFConvergenceError.what; TDSCFConvergenceError.stats. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TDSCFConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.TDSCFConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TDSCFConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TDSCFConvergenceError.html:1466,Integrability,message,message,1466,"﻿. TDSCFConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TDSCFConvergenceError. TDSCFConvergenceError¶. exception psi4.driver.TDSCFConvergenceError(iteration, wfn, what, stats)[source]¶; Error called for problems with TDSCF iterations. Parameters:. wfn (Wavefunction) – Wavefunction at time of exception; what (str) – What we were trying to solve for (singlets/triplets, irrep) when we failed to converge; stats (Dict[str, Any]) – Dictionary of convergence statistics of last iteration.; Keys are:. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. iteration (int) – . message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. wfn¶; Wavefunction at time of exception. what¶; What we were trying to solve for (singlets/triplets, irrep) when we; failed to converge. stats¶; Dictionary of convergence statistics of last iteration. See keys above. table of contents. TDSCFConvergenceError; TDSCFConvergenceError; TDSCFConvergenceError.message; TDSCFConvergenceError.iteration; TDSCFConvergenceError.wfn; TDSCFConvergenceError.what; TDSCFConvergenceError.stats. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TDSCFConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.TDSCFConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TDSCFConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TDSCFConvergenceError.html:895,Performance,perform,performed,895,"﻿. TDSCFConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TDSCFConvergenceError. TDSCFConvergenceError¶. exception psi4.driver.TDSCFConvergenceError(iteration, wfn, what, stats)[source]¶; Error called for problems with TDSCF iterations. Parameters:. wfn (Wavefunction) – Wavefunction at time of exception; what (str) – What we were trying to solve for (singlets/triplets, irrep) when we failed to converge; stats (Dict[str, Any]) – Dictionary of convergence statistics of last iteration.; Keys are:. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. iteration (int) – . message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. wfn¶; Wavefunction at time of exception. what¶; What we were trying to solve for (singlets/triplets, irrep) when we; failed to converge. stats¶; Dictionary of convergence statistics of last iteration. See keys above. table of contents. TDSCFConvergenceError; TDSCFConvergenceError; TDSCFConvergenceError.message; TDSCFConvergenceError.iteration; TDSCFConvergenceError.wfn; TDSCFConvergenceError.what; TDSCFConvergenceError.stats. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TDSCFConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.TDSCFConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TDSCFConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TDSCFConvergenceError.html:977,Performance,perform,performed,977,"﻿. TDSCFConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TDSCFConvergenceError. TDSCFConvergenceError¶. exception psi4.driver.TDSCFConvergenceError(iteration, wfn, what, stats)[source]¶; Error called for problems with TDSCF iterations. Parameters:. wfn (Wavefunction) – Wavefunction at time of exception; what (str) – What we were trying to solve for (singlets/triplets, irrep) when we failed to converge; stats (Dict[str, Any]) – Dictionary of convergence statistics of last iteration.; Keys are:. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. iteration (int) – . message¶; Human readable string describing the exception. iteration¶; Iteration number on which routine failed. wfn¶; Wavefunction at time of exception. what¶; What we were trying to solve for (singlets/triplets, irrep) when we; failed to converge. stats¶; Dictionary of convergence statistics of last iteration. See keys above. table of contents. TDSCFConvergenceError; TDSCFConvergenceError; TDSCFConvergenceError.message; TDSCFConvergenceError.iteration; TDSCFConvergenceError.wfn; TDSCFConvergenceError.what; TDSCFConvergenceError.stats. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TDSCFConvergenceError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.TDSCFConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TDSCFConvergenceError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.temp_circular_import_blocker.html:547,Deployability,update,updated,547,"﻿. temp_circular_import_blocker. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; temp_circular_import_blocker. temp_circular_import_blocker¶. psi4.driver.temp_circular_import_blocker()[source]¶. table of contents. temp_circular_import_blocker; temp_circular_import_blocker(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; temp_circular_import_blocker. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.temp_circular_import_blocker.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.temp_circular_import_blocker.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html:228,Availability,Error,Error,228,"﻿. TestComparisonError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. TestComparisonError¶. exception psi4.driver.TestComparisonError(msg)[source]¶; Error called when a compare_values() or other comparison; function fails.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. Example; >>> psi4.compare_values(2, 3, 2, ""asdf""); asdf..................................................................................FAILED; psi4.driver.p4util.exceptions.TestComparisonError: asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by difference (1.0000).; !----------------------------------------------------------------------------------!; ! !; ! asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by !; ! difference (1.0000). !; ! !; !----------------------------------------------------------------------------------!. table of contents. TestComparisonError; TestComparisonError; TestComparisonError.message. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html:303,Availability,Error,Error,303,"﻿. TestComparisonError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. TestComparisonError¶. exception psi4.driver.TestComparisonError(msg)[source]¶; Error called when a compare_values() or other comparison; function fails.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. Example; >>> psi4.compare_values(2, 3, 2, ""asdf""); asdf..................................................................................FAILED; psi4.driver.p4util.exceptions.TestComparisonError: asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by difference (1.0000).; !----------------------------------------------------------------------------------!; ! !; ! asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by !; ! difference (1.0000). !; ! !; !----------------------------------------------------------------------------------!. table of contents. TestComparisonError; TestComparisonError; TestComparisonError.message. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html:1375,Deployability,update,updated,1375,"﻿. TestComparisonError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. TestComparisonError¶. exception psi4.driver.TestComparisonError(msg)[source]¶; Error called when a compare_values() or other comparison; function fails.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. Example; >>> psi4.compare_values(2, 3, 2, ""asdf""); asdf..................................................................................FAILED; psi4.driver.p4util.exceptions.TestComparisonError: asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by difference (1.0000).; !----------------------------------------------------------------------------------!; ! !; ! asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by !; ! difference (1.0000). !; ! !; !----------------------------------------------------------------------------------!. table of contents. TestComparisonError; TestComparisonError; TestComparisonError.message. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html:309,Integrability,message,message,309,"﻿. TestComparisonError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. TestComparisonError¶. exception psi4.driver.TestComparisonError(msg)[source]¶; Error called when a compare_values() or other comparison; function fails.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. Example; >>> psi4.compare_values(2, 3, 2, ""asdf""); asdf..................................................................................FAILED; psi4.driver.p4util.exceptions.TestComparisonError: asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by difference (1.0000).; !----------------------------------------------------------------------------------!; ! !; ! asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by !; ! difference (1.0000). !; ! !; !----------------------------------------------------------------------------------!. table of contents. TestComparisonError; TestComparisonError; TestComparisonError.message. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html:450,Integrability,message,message,450,"﻿. TestComparisonError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. TestComparisonError¶. exception psi4.driver.TestComparisonError(msg)[source]¶; Error called when a compare_values() or other comparison; function fails.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. Example; >>> psi4.compare_values(2, 3, 2, ""asdf""); asdf..................................................................................FAILED; psi4.driver.p4util.exceptions.TestComparisonError: asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by difference (1.0000).; !----------------------------------------------------------------------------------!; ! !; ! asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by !; ! difference (1.0000). !; ! !; !----------------------------------------------------------------------------------!. table of contents. TestComparisonError; TestComparisonError; TestComparisonError.message. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html:1160,Integrability,message,message,1160,"﻿. TestComparisonError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. TestComparisonError¶. exception psi4.driver.TestComparisonError(msg)[source]¶; Error called when a compare_values() or other comparison; function fails.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. Example; >>> psi4.compare_values(2, 3, 2, ""asdf""); asdf..................................................................................FAILED; psi4.driver.p4util.exceptions.TestComparisonError: asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by difference (1.0000).; !----------------------------------------------------------------------------------!; ! !; ! asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by !; ! difference (1.0000). !; ! !; !----------------------------------------------------------------------------------!. table of contents. TestComparisonError; TestComparisonError; TestComparisonError.message. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html:3,Testability,Test,TestComparisonError,3,"﻿. TestComparisonError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. TestComparisonError¶. exception psi4.driver.TestComparisonError(msg)[source]¶; Error called when a compare_values() or other comparison; function fails.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. Example; >>> psi4.compare_values(2, 3, 2, ""asdf""); asdf..................................................................................FAILED; psi4.driver.p4util.exceptions.TestComparisonError: asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by difference (1.0000).; !----------------------------------------------------------------------------------!; ! !; ! asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by !; ! difference (1.0000). !; ! !; !----------------------------------------------------------------------------------!. table of contents. TestComparisonError; TestComparisonError; TestComparisonError.message. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html:128,Testability,Test,TestComparisonError,128,"﻿. TestComparisonError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. TestComparisonError¶. exception psi4.driver.TestComparisonError(msg)[source]¶; Error called when a compare_values() or other comparison; function fails.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. Example; >>> psi4.compare_values(2, 3, 2, ""asdf""); asdf..................................................................................FAILED; psi4.driver.p4util.exceptions.TestComparisonError: asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by difference (1.0000).; !----------------------------------------------------------------------------------!; ! !; ! asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by !; ! difference (1.0000). !; ! !; !----------------------------------------------------------------------------------!. table of contents. TestComparisonError; TestComparisonError; TestComparisonError.message. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html:149,Testability,Test,TestComparisonError,149,"﻿. TestComparisonError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. TestComparisonError¶. exception psi4.driver.TestComparisonError(msg)[source]¶; Error called when a compare_values() or other comparison; function fails.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. Example; >>> psi4.compare_values(2, 3, 2, ""asdf""); asdf..................................................................................FAILED; psi4.driver.p4util.exceptions.TestComparisonError: asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by difference (1.0000).; !----------------------------------------------------------------------------------!; ! !; ! asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by !; ! difference (1.0000). !; ! !; !----------------------------------------------------------------------------------!. table of contents. TestComparisonError; TestComparisonError; TestComparisonError.message. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html:193,Testability,Test,TestComparisonError,193,"﻿. TestComparisonError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. TestComparisonError¶. exception psi4.driver.TestComparisonError(msg)[source]¶; Error called when a compare_values() or other comparison; function fails.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. Example; >>> psi4.compare_values(2, 3, 2, ""asdf""); asdf..................................................................................FAILED; psi4.driver.p4util.exceptions.TestComparisonError: asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by difference (1.0000).; !----------------------------------------------------------------------------------!; ! !; ! asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by !; ! difference (1.0000). !; ! !; !----------------------------------------------------------------------------------!. table of contents. TestComparisonError; TestComparisonError; TestComparisonError.message. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html:683,Testability,Test,TestComparisonError,683,"﻿. TestComparisonError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. TestComparisonError¶. exception psi4.driver.TestComparisonError(msg)[source]¶; Error called when a compare_values() or other comparison; function fails.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. Example; >>> psi4.compare_values(2, 3, 2, ""asdf""); asdf..................................................................................FAILED; psi4.driver.p4util.exceptions.TestComparisonError: asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by difference (1.0000).; !----------------------------------------------------------------------------------!; ! !; ! asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by !; ! difference (1.0000). !; ! !; !----------------------------------------------------------------------------------!. table of contents. TestComparisonError; TestComparisonError; TestComparisonError.message. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html:1098,Testability,Test,TestComparisonError,1098,"﻿. TestComparisonError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. TestComparisonError¶. exception psi4.driver.TestComparisonError(msg)[source]¶; Error called when a compare_values() or other comparison; function fails.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. Example; >>> psi4.compare_values(2, 3, 2, ""asdf""); asdf..................................................................................FAILED; psi4.driver.p4util.exceptions.TestComparisonError: asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by difference (1.0000).; !----------------------------------------------------------------------------------!; ! !; ! asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by !; ! difference (1.0000). !; ! !; !----------------------------------------------------------------------------------!. table of contents. TestComparisonError; TestComparisonError; TestComparisonError.message. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html:1119,Testability,Test,TestComparisonError,1119,"﻿. TestComparisonError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. TestComparisonError¶. exception psi4.driver.TestComparisonError(msg)[source]¶; Error called when a compare_values() or other comparison; function fails.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. Example; >>> psi4.compare_values(2, 3, 2, ""asdf""); asdf..................................................................................FAILED; psi4.driver.p4util.exceptions.TestComparisonError: asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by difference (1.0000).; !----------------------------------------------------------------------------------!; ! !; ! asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by !; ! difference (1.0000). !; ! !; !----------------------------------------------------------------------------------!. table of contents. TestComparisonError; TestComparisonError; TestComparisonError.message. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html:1140,Testability,Test,TestComparisonError,1140,"﻿. TestComparisonError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. TestComparisonError¶. exception psi4.driver.TestComparisonError(msg)[source]¶; Error called when a compare_values() or other comparison; function fails.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. Example; >>> psi4.compare_values(2, 3, 2, ""asdf""); asdf..................................................................................FAILED; psi4.driver.p4util.exceptions.TestComparisonError: asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by difference (1.0000).; !----------------------------------------------------------------------------------!; ! !; ! asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by !; ! difference (1.0000). !; ! !; !----------------------------------------------------------------------------------!. table of contents. TestComparisonError; TestComparisonError; TestComparisonError.message. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html:1307,Testability,Test,TestComparisonError,1307,"﻿. TestComparisonError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. TestComparisonError¶. exception psi4.driver.TestComparisonError(msg)[source]¶; Error called when a compare_values() or other comparison; function fails.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. Example; >>> psi4.compare_values(2, 3, 2, ""asdf""); asdf..................................................................................FAILED; psi4.driver.p4util.exceptions.TestComparisonError: asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by difference (1.0000).; !----------------------------------------------------------------------------------!; ! !; ! asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by !; ! difference (1.0000). !; ! !; !----------------------------------------------------------------------------------!. table of contents. TestComparisonError; TestComparisonError; TestComparisonError.message. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.TestComparisonError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html:231,Availability,Error,Error,231,"﻿. UpgradeHelper. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. UpgradeHelper¶. exception psi4.driver.UpgradeHelper(old, new, version, elaboration)[source]¶; Error called on previously valid syntax that now isn’t and a; simple syntax transition is possible.; It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation FutureWarning.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new.; An UpgradeHelper can also be used after the FutureWarning; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters:. old (str) – Previously valid syntax.; new (str) – Suggested replacement syntax.; version (str) – First Major.minor version at which old syntax won’t run. Generally; the next release at time of commit.; elaboration (str) – Any additional message to convey. Should start with a space. table of contents. UpgradeHelper; UpgradeHelper. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html:571,Availability,error,error,571,"﻿. UpgradeHelper. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. UpgradeHelper¶. exception psi4.driver.UpgradeHelper(old, new, version, elaboration)[source]¶; Error called on previously valid syntax that now isn’t and a; simple syntax transition is possible.; It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation FutureWarning.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new.; An UpgradeHelper can also be used after the FutureWarning; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters:. old (str) – Previously valid syntax.; new (str) – Suggested replacement syntax.; version (str) – First Major.minor version at which old syntax won’t run. Generally; the next release at time of commit.; elaboration (str) – Any additional message to convey. Should start with a space. table of contents. UpgradeHelper; UpgradeHelper. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html:3,Deployability,Upgrade,UpgradeHelper,3,"﻿. UpgradeHelper. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. UpgradeHelper¶. exception psi4.driver.UpgradeHelper(old, new, version, elaboration)[source]¶; Error called on previously valid syntax that now isn’t and a; simple syntax transition is possible.; It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation FutureWarning.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new.; An UpgradeHelper can also be used after the FutureWarning; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters:. old (str) – Previously valid syntax.; new (str) – Suggested replacement syntax.; version (str) – First Major.minor version at which old syntax won’t run. Generally; the next release at time of commit.; elaboration (str) – Any additional message to convey. Should start with a space. table of contents. UpgradeHelper; UpgradeHelper. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html:122,Deployability,Upgrade,UpgradeHelper,122,"﻿. UpgradeHelper. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. UpgradeHelper¶. exception psi4.driver.UpgradeHelper(old, new, version, elaboration)[source]¶; Error called on previously valid syntax that now isn’t and a; simple syntax transition is possible.; It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation FutureWarning.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new.; An UpgradeHelper can also be used after the FutureWarning; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters:. old (str) – Previously valid syntax.; new (str) – Suggested replacement syntax.; version (str) – First Major.minor version at which old syntax won’t run. Generally; the next release at time of commit.; elaboration (str) – Any additional message to convey. Should start with a space. table of contents. UpgradeHelper; UpgradeHelper. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html:137,Deployability,Upgrade,UpgradeHelper,137,"﻿. UpgradeHelper. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. UpgradeHelper¶. exception psi4.driver.UpgradeHelper(old, new, version, elaboration)[source]¶; Error called on previously valid syntax that now isn’t and a; simple syntax transition is possible.; It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation FutureWarning.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new.; An UpgradeHelper can also be used after the FutureWarning; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters:. old (str) – Previously valid syntax.; new (str) – Suggested replacement syntax.; version (str) – First Major.minor version at which old syntax won’t run. Generally; the next release at time of commit.; elaboration (str) – Any additional message to convey. Should start with a space. table of contents. UpgradeHelper; UpgradeHelper. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html:175,Deployability,Upgrade,UpgradeHelper,175,"﻿. UpgradeHelper. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. UpgradeHelper¶. exception psi4.driver.UpgradeHelper(old, new, version, elaboration)[source]¶; Error called on previously valid syntax that now isn’t and a; simple syntax transition is possible.; It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation FutureWarning.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new.; An UpgradeHelper can also be used after the FutureWarning; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters:. old (str) – Previously valid syntax.; new (str) – Suggested replacement syntax.; version (str) – First Major.minor version at which old syntax won’t run. Generally; the next release at time of commit.; elaboration (str) – Any additional message to convey. Should start with a space. table of contents. UpgradeHelper; UpgradeHelper. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html:389,Deployability,release,release,389,"﻿. UpgradeHelper. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. UpgradeHelper¶. exception psi4.driver.UpgradeHelper(old, new, version, elaboration)[source]¶; Error called on previously valid syntax that now isn’t and a; simple syntax transition is possible.; It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation FutureWarning.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new.; An UpgradeHelper can also be used after the FutureWarning; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters:. old (str) – Previously valid syntax.; new (str) – Suggested replacement syntax.; version (str) – First Major.minor version at which old syntax won’t run. Generally; the next release at time of commit.; elaboration (str) – Any additional message to convey. Should start with a space. table of contents. UpgradeHelper; UpgradeHelper. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html:512,Deployability,Upgrade,UpgradeHelper,512,"﻿. UpgradeHelper. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. UpgradeHelper¶. exception psi4.driver.UpgradeHelper(old, new, version, elaboration)[source]¶; Error called on previously valid syntax that now isn’t and a; simple syntax transition is possible.; It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation FutureWarning.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new.; An UpgradeHelper can also be used after the FutureWarning; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters:. old (str) – Previously valid syntax.; new (str) – Suggested replacement syntax.; version (str) – First Major.minor version at which old syntax won’t run. Generally; the next release at time of commit.; elaboration (str) – Any additional message to convey. Should start with a space. table of contents. UpgradeHelper; UpgradeHelper. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html:602,Deployability,Upgrade,UpgradeHelper,602,"﻿. UpgradeHelper. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. UpgradeHelper¶. exception psi4.driver.UpgradeHelper(old, new, version, elaboration)[source]¶; Error called on previously valid syntax that now isn’t and a; simple syntax transition is possible.; It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation FutureWarning.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new.; An UpgradeHelper can also be used after the FutureWarning; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters:. old (str) – Previously valid syntax.; new (str) – Suggested replacement syntax.; version (str) – First Major.minor version at which old syntax won’t run. Generally; the next release at time of commit.; elaboration (str) – Any additional message to convey. Should start with a space. table of contents. UpgradeHelper; UpgradeHelper. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html:771,Deployability,Upgrade,UpgradeHelper,771,"﻿. UpgradeHelper. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. UpgradeHelper¶. exception psi4.driver.UpgradeHelper(old, new, version, elaboration)[source]¶; Error called on previously valid syntax that now isn’t and a; simple syntax transition is possible.; It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation FutureWarning.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new.; An UpgradeHelper can also be used after the FutureWarning; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters:. old (str) – Previously valid syntax.; new (str) – Suggested replacement syntax.; version (str) – First Major.minor version at which old syntax won’t run. Generally; the next release at time of commit.; elaboration (str) – Any additional message to convey. Should start with a space. table of contents. UpgradeHelper; UpgradeHelper. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html:1037,Deployability,release,release,1037,"﻿. UpgradeHelper. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. UpgradeHelper¶. exception psi4.driver.UpgradeHelper(old, new, version, elaboration)[source]¶; Error called on previously valid syntax that now isn’t and a; simple syntax transition is possible.; It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation FutureWarning.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new.; An UpgradeHelper can also be used after the FutureWarning; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters:. old (str) – Previously valid syntax.; new (str) – Suggested replacement syntax.; version (str) – First Major.minor version at which old syntax won’t run. Generally; the next release at time of commit.; elaboration (str) – Any additional message to convey. Should start with a space. table of contents. UpgradeHelper; UpgradeHelper. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html:1165,Deployability,Upgrade,UpgradeHelper,1165,"﻿. UpgradeHelper. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. UpgradeHelper¶. exception psi4.driver.UpgradeHelper(old, new, version, elaboration)[source]¶; Error called on previously valid syntax that now isn’t and a; simple syntax transition is possible.; It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation FutureWarning.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new.; An UpgradeHelper can also be used after the FutureWarning; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters:. old (str) – Previously valid syntax.; new (str) – Suggested replacement syntax.; version (str) – First Major.minor version at which old syntax won’t run. Generally; the next release at time of commit.; elaboration (str) – Any additional message to convey. Should start with a space. table of contents. UpgradeHelper; UpgradeHelper. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html:1180,Deployability,Upgrade,UpgradeHelper,1180,"﻿. UpgradeHelper. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. UpgradeHelper¶. exception psi4.driver.UpgradeHelper(old, new, version, elaboration)[source]¶; Error called on previously valid syntax that now isn’t and a; simple syntax transition is possible.; It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation FutureWarning.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new.; An UpgradeHelper can also be used after the FutureWarning; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters:. old (str) – Previously valid syntax.; new (str) – Suggested replacement syntax.; version (str) – First Major.minor version at which old syntax won’t run. Generally; the next release at time of commit.; elaboration (str) – Any additional message to convey. Should start with a space. table of contents. UpgradeHelper; UpgradeHelper. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html:1333,Deployability,Upgrade,UpgradeHelper,1333,"﻿. UpgradeHelper. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. UpgradeHelper¶. exception psi4.driver.UpgradeHelper(old, new, version, elaboration)[source]¶; Error called on previously valid syntax that now isn’t and a; simple syntax transition is possible.; It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation FutureWarning.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new.; An UpgradeHelper can also be used after the FutureWarning; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters:. old (str) – Previously valid syntax.; new (str) – Suggested replacement syntax.; version (str) – First Major.minor version at which old syntax won’t run. Generally; the next release at time of commit.; elaboration (str) – Any additional message to convey. Should start with a space. table of contents. UpgradeHelper; UpgradeHelper. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html:1395,Deployability,update,updated,1395,"﻿. UpgradeHelper. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. UpgradeHelper¶. exception psi4.driver.UpgradeHelper(old, new, version, elaboration)[source]¶; Error called on previously valid syntax that now isn’t and a; simple syntax transition is possible.; It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation FutureWarning.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new.; An UpgradeHelper can also be used after the FutureWarning; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters:. old (str) – Previously valid syntax.; new (str) – Suggested replacement syntax.; version (str) – First Major.minor version at which old syntax won’t run. Generally; the next release at time of commit.; elaboration (str) – Any additional message to convey. Should start with a space. table of contents. UpgradeHelper; UpgradeHelper. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html:1100,Integrability,message,message,1100,"﻿. UpgradeHelper. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. UpgradeHelper¶. exception psi4.driver.UpgradeHelper(old, new, version, elaboration)[source]¶; Error called on previously valid syntax that now isn’t and a; simple syntax transition is possible.; It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation FutureWarning.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new.; An UpgradeHelper can also be used after the FutureWarning; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters:. old (str) – Previously valid syntax.; new (str) – Suggested replacement syntax.; version (str) – First Major.minor version at which old syntax won’t run. Generally; the next release at time of commit.; elaboration (str) – Any additional message to convey. Should start with a space. table of contents. UpgradeHelper; UpgradeHelper. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html:293,Usability,simpl,simple,293,"﻿. UpgradeHelper. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. UpgradeHelper¶. exception psi4.driver.UpgradeHelper(old, new, version, elaboration)[source]¶; Error called on previously valid syntax that now isn’t and a; simple syntax transition is possible.; It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation FutureWarning.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new.; An UpgradeHelper can also be used after the FutureWarning; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters:. old (str) – Previously valid syntax.; new (str) – Suggested replacement syntax.; version (str) – First Major.minor version at which old syntax won’t run. Generally; the next release at time of commit.; elaboration (str) – Any additional message to convey. Should start with a space. table of contents. UpgradeHelper; UpgradeHelper. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html:817,Usability,guid,guide,817,"﻿. UpgradeHelper. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. UpgradeHelper¶. exception psi4.driver.UpgradeHelper(old, new, version, elaboration)[source]¶; Error called on previously valid syntax that now isn’t and a; simple syntax transition is possible.; It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation FutureWarning.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new.; An UpgradeHelper can also be used after the FutureWarning; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters:. old (str) – Previously valid syntax.; new (str) – Suggested replacement syntax.; version (str) – First Major.minor version at which old syntax won’t run. Generally; the next release at time of commit.; elaboration (str) – Any additional message to convey. Should start with a space. table of contents. UpgradeHelper; UpgradeHelper. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.UpgradeHelper.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ValidationError.html:247,Availability,Error,Error,247,"﻿. ValidationError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. ValidationError¶. exception psi4.driver.ValidationError(msg)[source]¶; Input specification has problems.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. table of contents. ValidationError; ValidationError; ValidationError.message. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.ValidationError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ValidationError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ValidationError.html:732,Deployability,update,updated,732,"﻿. ValidationError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. ValidationError¶. exception psi4.driver.ValidationError(msg)[source]¶; Input specification has problems.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. table of contents. ValidationError; ValidationError; ValidationError.message. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.ValidationError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ValidationError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ValidationError.html:253,Integrability,message,message,253,"﻿. ValidationError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. ValidationError¶. exception psi4.driver.ValidationError(msg)[source]¶; Input specification has problems.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. table of contents. ValidationError; ValidationError; ValidationError.message. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.ValidationError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ValidationError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ValidationError.html:394,Integrability,message,message,394,"﻿. ValidationError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. ValidationError¶. exception psi4.driver.ValidationError(msg)[source]¶; Input specification has problems.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. table of contents. ValidationError; ValidationError; ValidationError.message. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.ValidationError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ValidationError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ValidationError.html:521,Integrability,message,message,521,"﻿. ValidationError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. ValidationError¶. exception psi4.driver.ValidationError(msg)[source]¶; Input specification has problems.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. table of contents. ValidationError; ValidationError; ValidationError.message. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.ValidationError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ValidationError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ValidationError.html:3,Security,Validat,ValidationError,3,"﻿. ValidationError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. ValidationError¶. exception psi4.driver.ValidationError(msg)[source]¶; Input specification has problems.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. table of contents. ValidationError; ValidationError; ValidationError.message. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.ValidationError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ValidationError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ValidationError.html:124,Security,Validat,ValidationError,124,"﻿. ValidationError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. ValidationError¶. exception psi4.driver.ValidationError(msg)[source]¶; Input specification has problems.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. table of contents. ValidationError; ValidationError; ValidationError.message. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.ValidationError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ValidationError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ValidationError.html:141,Security,Validat,ValidationError,141,"﻿. ValidationError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. ValidationError¶. exception psi4.driver.ValidationError(msg)[source]¶; Input specification has problems.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. table of contents. ValidationError; ValidationError; ValidationError.message. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.ValidationError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ValidationError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ValidationError.html:181,Security,Validat,ValidationError,181,"﻿. ValidationError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. ValidationError¶. exception psi4.driver.ValidationError(msg)[source]¶; Input specification has problems.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. table of contents. ValidationError; ValidationError; ValidationError.message. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.ValidationError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ValidationError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ValidationError.html:471,Security,Validat,ValidationError,471,"﻿. ValidationError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. ValidationError¶. exception psi4.driver.ValidationError(msg)[source]¶; Input specification has problems.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. table of contents. ValidationError; ValidationError; ValidationError.message. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.ValidationError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ValidationError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ValidationError.html:488,Security,Validat,ValidationError,488,"﻿. ValidationError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. ValidationError¶. exception psi4.driver.ValidationError(msg)[source]¶; Input specification has problems.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. table of contents. ValidationError; ValidationError; ValidationError.message. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.ValidationError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ValidationError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ValidationError.html:505,Security,Validat,ValidationError,505,"﻿. ValidationError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. ValidationError¶. exception psi4.driver.ValidationError(msg)[source]¶; Input specification has problems.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. table of contents. ValidationError; ValidationError; ValidationError.message. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.ValidationError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ValidationError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ValidationError.html:668,Security,Validat,ValidationError,668,"﻿. ValidationError. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. ValidationError¶. exception psi4.driver.ValidationError(msg)[source]¶; Input specification has problems.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. table of contents. ValidationError; ValidationError; ValidationError.message. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.ValidationError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.ValidationError.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.vibanal_wfn.html:1630,Deployability,update,updated,1630,"﻿. vibanal_wfn. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; vibanal_wfn. vibanal_wfn¶. psi4.driver.vibanal_wfn(wfn, hess=None, irrep=None, molecule=None, project_trans=True, project_rot=True)[source]¶; Function to perform analysis of a hessian or hessian block, specifically…; calling for and printing vibrational and thermochemical analysis, setting thermochemical variables,; and writing the vibrec and normal mode files. Parameters:. wfn (Wavefunction) – The wavefunction which had its Hessian computed.; hess (Optional[ndarray]) – Hessian to analyze, if not the hessian in wfn.; (3*nat, 3*nat) non-mass-weighted Hessian in atomic units, [Eh/a0/a0].; irrep (Union[int, str, None]) – The irrep for which frequencies are calculated. Thermochemical analysis; is skipped if this is specified (non-None),; as only one symmetry block of the hessian has been computed.; molecule (Molecule or qcdb.Molecule, optional) – The molecule to pull information from, if not the molecule in wfn. Must at least have similar; geometry to the molecule in wfn.; project_trans (bool) – Should translations be projected in the harmonic analysis?; project_rot (bool) – Should rotations be projected in the harmonic analysis?. Returns:; vibinfo – A dictionary of vibrational information. See harmonic_analysis(). Return type:; Dict[str, ndarray]. table of contents. vibanal_wfn; vibanal_wfn(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; vibanal_wfn. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.vibanal_wfn.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.vibanal_wfn.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.vibanal_wfn.html:426,Modifiability,variab,variables,426,"﻿. vibanal_wfn. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; vibanal_wfn. vibanal_wfn¶. psi4.driver.vibanal_wfn(wfn, hess=None, irrep=None, molecule=None, project_trans=True, project_rot=True)[source]¶; Function to perform analysis of a hessian or hessian block, specifically…; calling for and printing vibrational and thermochemical analysis, setting thermochemical variables,; and writing the vibrec and normal mode files. Parameters:. wfn (Wavefunction) – The wavefunction which had its Hessian computed.; hess (Optional[ndarray]) – Hessian to analyze, if not the hessian in wfn.; (3*nat, 3*nat) non-mass-weighted Hessian in atomic units, [Eh/a0/a0].; irrep (Union[int, str, None]) – The irrep for which frequencies are calculated. Thermochemical analysis; is skipped if this is specified (non-None),; as only one symmetry block of the hessian has been computed.; molecule (Molecule or qcdb.Molecule, optional) – The molecule to pull information from, if not the molecule in wfn. Must at least have similar; geometry to the molecule in wfn.; project_trans (bool) – Should translations be projected in the harmonic analysis?; project_rot (bool) – Should rotations be projected in the harmonic analysis?. Returns:; vibinfo – A dictionary of vibrational information. See harmonic_analysis(). Return type:; Dict[str, ndarray]. table of contents. vibanal_wfn; vibanal_wfn(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; vibanal_wfn. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.vibanal_wfn.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.vibanal_wfn.html
https://psicode.org/psi4manual/1.8.x/api/psi4.driver.vibanal_wfn.html:274,Performance,perform,perform,274,"﻿. vibanal_wfn. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; vibanal_wfn. vibanal_wfn¶. psi4.driver.vibanal_wfn(wfn, hess=None, irrep=None, molecule=None, project_trans=True, project_rot=True)[source]¶; Function to perform analysis of a hessian or hessian block, specifically…; calling for and printing vibrational and thermochemical analysis, setting thermochemical variables,; and writing the vibrec and normal mode files. Parameters:. wfn (Wavefunction) – The wavefunction which had its Hessian computed.; hess (Optional[ndarray]) – Hessian to analyze, if not the hessian in wfn.; (3*nat, 3*nat) non-mass-weighted Hessian in atomic units, [Eh/a0/a0].; irrep (Union[int, str, None]) – The irrep for which frequencies are calculated. Thermochemical analysis; is skipped if this is specified (non-None),; as only one symmetry block of the hessian has been computed.; molecule (Molecule or qcdb.Molecule, optional) – The molecule to pull information from, if not the molecule in wfn. Must at least have similar; geometry to the molecule in wfn.; project_trans (bool) – Should translations be projected in the harmonic analysis?; project_rot (bool) – Should rotations be projected in the harmonic analysis?. Returns:; vibinfo – A dictionary of vibrational information. See harmonic_analysis(). Return type:; Dict[str, ndarray]. table of contents. vibanal_wfn; vibanal_wfn(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; vibanal_wfn. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/api/psi4.driver.vibanal_wfn.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.vibanal_wfn.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/adc__cutoff_amps_print.html:168,Availability,Toler,Tolerance,168,"﻿. CUTOFF_AMPS_PRINT. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; ADC; CUTOFF_AMPS_PRINT. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; ADC; CUTOFF_AMPS_PRINT. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/adc__cutoff_amps_print.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/adc__cutoff_amps_print.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/adc__cutoff_amps_print.html:235,Availability,avail,available,235,"﻿. CUTOFF_AMPS_PRINT. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; ADC; CUTOFF_AMPS_PRINT. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; ADC; CUTOFF_AMPS_PRINT. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/adc__cutoff_amps_print.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/adc__cutoff_amps_print.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/adc__cutoff_amps_print.html:503,Deployability,update,updated,503,"﻿. CUTOFF_AMPS_PRINT. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; ADC; CUTOFF_AMPS_PRINT. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; ADC; CUTOFF_AMPS_PRINT. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/adc__cutoff_amps_print.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/adc__cutoff_amps_print.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/adc__gauge.html:520,Deployability,update,updated,520,"﻿. GAUGE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; ADC; GAUGE. GAUGE¶. Specifies the choice of representation of the electric dipole operator. * Acceptable values are LENGTH (default) and VELOCITY. Type: string; Possible Values: LENGTH, VELOCITY; Default: LENGTH. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; ADC; GAUGE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/adc__gauge.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/adc__gauge.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/adc__kind.html:437,Deployability,update,updated,437,"﻿. KIND. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; ADC; KIND. KIND¶. The kind of states to compute. Type: string; Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY; Default: SINGLET. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; ADC; KIND. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/adc__kind.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/adc__kind.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/adc__maxiter.html:393,Deployability,update,updated,393,"﻿. MAXITER. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; ADC; MAXITER. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; ADC; MAXITER. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/adc__maxiter.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/adc__maxiter.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/adc__max_num_vecs.html:290,Availability,avail,available,290,"﻿. MAX_NUM_VECS. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; ADC; MAX_NUM_VECS. MAX_NUM_VECS¶. Maximum number of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend. Type: integer; Default: -1. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; ADC; MAX_NUM_VECS. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/adc__max_num_vecs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/adc__max_num_vecs.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/adc__max_num_vecs.html:552,Deployability,update,updated,552,"﻿. MAX_NUM_VECS. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; ADC; MAX_NUM_VECS. MAX_NUM_VECS¶. Maximum number of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend. Type: integer; Default: -1. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; ADC; MAX_NUM_VECS. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/adc__max_num_vecs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/adc__max_num_vecs.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/adc__num_core_orbitals.html:229,Availability,avail,available,229,"﻿. NUM_CORE_ORBITALS. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; ADC; NUM_CORE_ORBITALS. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; ADC; NUM_CORE_ORBITALS. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/adc__num_core_orbitals.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/adc__num_core_orbitals.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/adc__num_core_orbitals.html:495,Deployability,update,updated,495,"﻿. NUM_CORE_ORBITALS. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; ADC; NUM_CORE_ORBITALS. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; ADC; NUM_CORE_ORBITALS. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/adc__num_core_orbitals.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/adc__num_core_orbitals.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/adc__num_guesses.html:288,Availability,avail,available,288,"﻿. NUM_GUESSES. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; ADC; NUM_GUESSES. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; ADC; NUM_GUESSES. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/adc__num_guesses.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/adc__num_guesses.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/adc__num_guesses.html:549,Deployability,update,updated,549,"﻿. NUM_GUESSES. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; ADC; NUM_GUESSES. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; ADC; NUM_GUESSES. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/adc__num_guesses.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/adc__num_guesses.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/adc__reference.html:427,Deployability,update,updated,427,"﻿. REFERENCE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; ADC; REFERENCE. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, UHF; Default: RHF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; ADC; REFERENCE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/adc__reference.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/adc__reference.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/adc__roots_per_irrep.html:466,Deployability,update,updated,466,"﻿. ROOTS_PER_IRREP. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; ADC; ROOTS_PER_IRREP. ROOTS_PER_IRREP¶. The number of poles / excited states to obtain per irrep vector. Type: array; Default: No Default. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; ADC; ROOTS_PER_IRREP. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/adc__roots_per_irrep.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/adc__roots_per_irrep.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/adc__r_convergence.html:493,Deployability,update,updated,493,"﻿. R_CONVERGENCE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; ADC; R_CONVERGENCE. R_CONVERGENCE¶. Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; ADC; R_CONVERGENCE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/adc__r_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/adc__r_convergence.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__ao_basis.html:491,Deployability,update,updated,491,"﻿. AO_BASIS. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; AO_BASIS. AO_BASIS¶. The algorithm to use for the \(\left\langle VV||VV\right \rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; AO_BASIS. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccdensity__ao_basis.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__ao_basis.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__cachelevel.html:428,Deployability,update,updated,428,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; CACHELEVEL. CACHELEVEL¶. The amount of caching of data to perform. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; CACHELEVEL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccdensity__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__cachelevel.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__cachelevel.html:3,Performance,CACHE,CACHELEVEL,3,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; CACHELEVEL. CACHELEVEL¶. The amount of caching of data to perform. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; CACHELEVEL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccdensity__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__cachelevel.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__cachelevel.html:128,Performance,CACHE,CACHELEVEL,128,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; CACHELEVEL. CACHELEVEL¶. The amount of caching of data to perform. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; CACHELEVEL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccdensity__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__cachelevel.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__cachelevel.html:140,Performance,CACHE,CACHELEVEL,140,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; CACHELEVEL. CACHELEVEL¶. The amount of caching of data to perform. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; CACHELEVEL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccdensity__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__cachelevel.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__cachelevel.html:186,Performance,perform,perform,186,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; CACHELEVEL. CACHELEVEL¶. The amount of caching of data to perform. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; CACHELEVEL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccdensity__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__cachelevel.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__cachelevel.html:369,Performance,CACHE,CACHELEVEL,369,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; CACHELEVEL. CACHELEVEL¶. The amount of caching of data to perform. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; CACHELEVEL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccdensity__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__cachelevel.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__debug.html:405,Deployability,update,updated,405,"﻿. DEBUG. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; DEBUG. DEBUG¶. Reproducing energies from densities ?. Type: integer; Default: 0. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; DEBUG. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccdensity__debug.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__debug.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__gauge.html:411,Deployability,update,updated,411,"﻿. GAUGE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; GAUGE. GAUGE¶. The type of gauge to use for properties. Type: string; Default: LENGTH. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; GAUGE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccdensity__gauge.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__gauge.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__ints_tolerance.html:493,Deployability,update,updated,493,"﻿. INTS_TOLERANCE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; INTS_TOLERANCE. INTS_TOLERANCE¶. Schwarz screening threshold. Mininum absolute value below which TEI are neglected. Type: conv double; Default: 1e-14. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; INTS_TOLERANCE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccdensity__ints_tolerance.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__ints_tolerance.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__opdm_only.html:491,Deployability,update,updated,491,"﻿. OPDM_ONLY. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; OPDM_ONLY. OPDM_ONLY¶. For internal use only! Compute the one-particle density matrix, but not the two-particle density matrix. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; OPDM_ONLY. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccdensity__opdm_only.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__opdm_only.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__opdm_relax.html:433,Deployability,update,updated,433,"﻿. OPDM_RELAX. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; OPDM_RELAX. OPDM_RELAX¶. Do relax the one-particle density matrix?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; OPDM_RELAX. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccdensity__opdm_relax.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__opdm_relax.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__prop_all.html:436,Deployability,update,updated,436,"﻿. PROP_ALL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; PROP_ALL. PROP_ALL¶. Compute non-relaxed properties for all excited states. Type: boolean; Default: true. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; PROP_ALL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccdensity__prop_all.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__prop_all.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__prop_root.html:439,Deployability,update,updated,439,"﻿. PROP_ROOT. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; PROP_ROOT. PROP_ROOT¶. Root number (within its irrep) for computing properties. Type: integer; Default: 1. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; PROP_ROOT. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccdensity__prop_root.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__prop_root.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__prop_sym.html:402,Deployability,update,updated,402,"﻿. PROP_SYM. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; PROP_SYM. PROP_SYM¶. The symmetry of states. Type: integer; Default: 1. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; PROP_SYM. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccdensity__prop_sym.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__prop_sym.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__reference.html:412,Deployability,update,updated,412,"﻿. REFERENCE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; REFERENCE. REFERENCE¶. Reference wavefunction type. Type: string; Default: RHF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; REFERENCE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccdensity__reference.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__reference.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__roots_per_irrep.html:490,Deployability,update,updated,490,"﻿. ROOTS_PER_IRREP. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; ROOTS_PER_IRREP. ROOTS_PER_IRREP¶. The number of electronic states to computed, per irreducible representation. Type: array; Default: No Default. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; ROOTS_PER_IRREP. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccdensity__roots_per_irrep.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__roots_per_irrep.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__wfn.html:378,Deployability,update,updated,378,"﻿. WFN. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; WFN. WFN¶. Wavefunction type. Type: string; Default: SCF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; WFN. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccdensity__wfn.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__wfn.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__write_nos.html:422,Deployability,update,updated,422,"﻿. WRITE_NOS. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; WRITE_NOS. WRITE_NOS¶. Do write natural orbitals (molden). Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; WRITE_NOS. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccdensity__write_nos.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__write_nos.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__xi.html:374,Deployability,update,updated,374,"﻿. XI. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; XI. XI¶. Do compute Xi?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; XI. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccdensity__xi.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__xi.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__xi_connect.html:441,Deployability,update,updated,441,"﻿. XI_CONNECT. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; XI_CONNECT. XI_CONNECT¶. Do require \(\bar{H}\) and \(R\) to be connected?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; XI_CONNECT. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccdensity__xi_connect.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__xi_connect.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__zeta.html:380,Deployability,update,updated,380,"﻿. ZETA. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; ZETA. ZETA¶. Do use zeta?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; ZETA. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccdensity__zeta.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccdensity__zeta.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__abcd.html:425,Deployability,update,updated,425,"﻿. ABCD. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; ABCD. ABCD¶. Type of ABCD algorithm will be used. Type: string; Possible Values: NEW, OLD; Default: NEW. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; ABCD. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__abcd.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__abcd.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__analyze.html:402,Deployability,update,updated,402,"﻿. ANALYZE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; ANALYZE. ANALYZE¶. Do analyze T2 amplitudes. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; ANALYZE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__analyze.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__analyze.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__ao_basis.html:1083,Deployability,update,updated,1083,"﻿. AO_BASIS. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; AO_BASIS. AO_BASIS¶. The algorithm to use for the \(\left\langle VV||VV\right\rangle\) terms If AO_BASIS is NONE, the MO-basis integrals will be used; if AO_BASIS is DISK, the AO-basis integrals stored on disk will be used; if AO_BASIS is DIRECT, the AO-basis integrals will be computed on the fly as necessary. NB: The DIRECT option is not fully implemented and should only be used by experts. Default is NONE. Note: The developers recommend use of this keyword only as a last resort because it significantly slows the calculation. The current algorithms for handling the MO-basis four-virtual-index integrals have been significantly improved and are preferable to the AO-based approach. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; AO_BASIS. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__ao_basis.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__ao_basis.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__bccd_maxiter.html:441,Deployability,update,updated,441,"﻿. BCCD_MAXITER. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; BCCD_MAXITER. BCCD_MAXITER¶. Maximum number of iterations for Brueckner CCD. Type: integer; Default: 50. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; BCCD_MAXITER. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__bccd_maxiter.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__bccd_maxiter.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__brueckner_orbs_r_convergence.html:623,Deployability,update,updated,623,"﻿. BRUECKNER_ORBS_R_CONVERGENCE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; BRUECKNER_ORBS_R_CONVERGENCE. BRUECKNER_ORBS_R_CONVERGENCE¶. Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; BRUECKNER_ORBS_R_CONVERGENCE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__brueckner_orbs_r_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__brueckner_orbs_r_convergence.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__brueckner_orbs_r_convergence.html:338,Integrability,depend,depending,338,"﻿. BRUECKNER_ORBS_R_CONVERGENCE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; BRUECKNER_ORBS_R_CONVERGENCE. BRUECKNER_ORBS_R_CONVERGENCE¶. Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; BRUECKNER_ORBS_R_CONVERGENCE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__brueckner_orbs_r_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__brueckner_orbs_r_convergence.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__cachelevel.html:873,Deployability,update,updated,873,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHELEVEL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__cachelevel.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__cachelevel.html:3,Performance,CACHE,CACHELEVEL,3,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHELEVEL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__cachelevel.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__cachelevel.html:127,Performance,CACHE,CACHELEVEL,127,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHELEVEL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__cachelevel.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__cachelevel.html:139,Performance,CACHE,CACHELEVEL,139,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHELEVEL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__cachelevel.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__cachelevel.html:302,Performance,cache,cache,302,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHELEVEL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__cachelevel.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__cachelevel.html:364,Performance,cache,cache,364,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHELEVEL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__cachelevel.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__cachelevel.html:634,Performance,cache,cache,634,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHELEVEL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__cachelevel.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__cachelevel.html:814,Performance,CACHE,CACHELEVEL,814,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHELEVEL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__cachelevel.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__cachetype.html:758,Deployability,update,updated,758,"﻿. CACHETYPE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHETYPE. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHETYPE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__cachetype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__cachetype.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__cachetype.html:3,Performance,CACHE,CACHETYPE,3,"﻿. CACHETYPE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHETYPE. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHETYPE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__cachetype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__cachetype.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__cachetype.html:126,Performance,CACHE,CACHETYPE,126,"﻿. CACHETYPE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHETYPE. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHETYPE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__cachetype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__cachetype.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__cachetype.html:137,Performance,CACHE,CACHETYPE,137,"﻿. CACHETYPE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHETYPE. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHETYPE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__cachetype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__cachetype.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__cachetype.html:212,Performance,cache,cache,212,"﻿. CACHETYPE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHETYPE. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHETYPE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__cachetype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__cachetype.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__cachetype.html:331,Performance,cache,cache,331,"﻿. CACHETYPE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHETYPE. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHETYPE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__cachetype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__cachetype.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__cachetype.html:462,Performance,cache,cache,462,"﻿. CACHETYPE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHETYPE. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHETYPE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__cachetype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__cachetype.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__cachetype.html:700,Performance,CACHE,CACHETYPE,700,"﻿. CACHETYPE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHETYPE. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHETYPE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__cachetype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__cachetype.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__cc_num_threads.html:419,Deployability,update,updated,419,"﻿. CC_NUM_THREADS. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CC_NUM_THREADS. CC_NUM_THREADS¶. Number of threads. Type: integer; Default: 1. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CC_NUM_THREADS. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__cc_num_threads.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__cc_num_threads.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__cc_os_scale.html:435,Deployability,update,updated,435,"﻿. CC_OS_SCALE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CC_OS_SCALE. CC_OS_SCALE¶. Coupled-cluster opposite-spin scaling value. Type: double; Default: 1.27. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CC_OS_SCALE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__cc_os_scale.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__cc_os_scale.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__cc_ss_scale.html:431,Deployability,update,updated,431,"﻿. CC_SS_SCALE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CC_SS_SCALE. CC_SS_SCALE¶. Coupled-cluster same-spin scaling value. Type: double; Default: 1.13. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CC_SS_SCALE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__cc_ss_scale.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__cc_ss_scale.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__diis.html:417,Deployability,update,updated,417,"﻿. DIIS. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; DIIS. DIIS¶. Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; DIIS. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__diis.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__diis.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__e_convergence.html:534,Deployability,update,updated,534,"﻿. E_CONVERGENCE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; E_CONVERGENCE. E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; E_CONVERGENCE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__e_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__e_convergence.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__e_convergence.html:187,Energy Efficiency,energy,energy,187,"﻿. E_CONVERGENCE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; E_CONVERGENCE. E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; E_CONVERGENCE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__e_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__e_convergence.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__force_restart.html:477,Deployability,update,updated,477,"﻿. FORCE_RESTART. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; FORCE_RESTART. FORCE_RESTART¶. Do restart the coupled-cluster iterations even if MO phases are screwed up?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; FORCE_RESTART. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__force_restart.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__force_restart.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__local.html:426,Deployability,update,updated,426,"﻿. LOCAL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; LOCAL. LOCAL¶. Do simulate the effects of local correlation techniques?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; LOCAL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__local.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__local.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__local_cphf_cutoff.html:469,Deployability,update,updated,469,"﻿. LOCAL_CPHF_CUTOFF. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; LOCAL_CPHF_CUTOFF. LOCAL_CPHF_CUTOFF¶. Cutoff value for local-coupled-perturbed-Hartree-Fock. Type: double; Default: 0.10. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; LOCAL_CPHF_CUTOFF. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__local_cphf_cutoff.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__local_cphf_cutoff.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__local_cutoff.html:668,Deployability,update,updated,668,"﻿. LOCAL_CUTOFF. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; LOCAL_CUTOFF. LOCAL_CUTOFF¶. Value (always between one and zero) for the Broughton-Pulay completeness check used to contruct orbital domains for local-CC calculations. See J. Broughton and P. Pulay, J. Comp. Chem. 14, 736-740 (1993) and C. Hampel and H.-J. Werner, J. Chem. Phys. 104, 6286-6297 (1996). Type: double; Default: 0.02. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; LOCAL_CUTOFF. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__local_cutoff.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__local_cutoff.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__local_method.html:639,Deployability,update,updated,639,"﻿. LOCAL_METHOD. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; LOCAL_METHOD. LOCAL_METHOD¶. Type of local-CCSD scheme to be simulated. WERNER selects the method developed by H.-J. Werner and co-workers, and AOBASIS selects the method developed by G.E. Scuseria and co-workers (currently inoperative). Type: string; Possible Values: WERNER, AOBASIS; Default: WERNER. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; LOCAL_METHOD. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__local_method.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__local_method.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__local_pairdef.html:492,Deployability,update,updated,492,"﻿. LOCAL_PAIRDEF. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; LOCAL_PAIRDEF. LOCAL_PAIRDEF¶. Definition of local pair domains, default is BP, Boughton-Pulay. Type: string; Possible Values: BP, RESPONSE; Default: BP. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; LOCAL_PAIRDEF. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__local_pairdef.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__local_pairdef.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__local_weakp.html:725,Deployability,update,updated,725,"﻿. LOCAL_WEAKP. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; LOCAL_WEAKP. LOCAL_WEAKP¶. Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, NEGLECT, MP2; Default: NONE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; LOCAL_WEAKP. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__local_weakp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__local_weakp.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__local_weakp.html:412,Energy Efficiency,energy,energy,412,"﻿. LOCAL_WEAKP. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; LOCAL_WEAKP. LOCAL_WEAKP¶. Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, NEGLECT, MP2; Default: NONE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; LOCAL_WEAKP. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__local_weakp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__local_weakp.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__maxiter.html:429,Deployability,update,updated,429,"﻿. MAXITER. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; MAXITER. MAXITER¶. Maximum number of iterations to solve the CC equations. Type: integer; Default: 50. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; MAXITER. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__maxiter.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__maxiter.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__mp2_amps_print.html:501,Deployability,update,updated,501,"﻿. MP2_AMPS_PRINT. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; MP2_AMPS_PRINT. MP2_AMPS_PRINT¶. Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; MP2_AMPS_PRINT. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__mp2_amps_print.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__mp2_amps_print.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__mp2_os_scale.html:427,Deployability,update,updated,427,"﻿. MP2_OS_SCALE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; MP2_OS_SCALE. MP2_OS_SCALE¶. MP2 opposite-spin scaling value. Type: double; Default: 1.20. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; MP2_OS_SCALE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__mp2_os_scale.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__mp2_os_scale.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__mp2_ss_scale.html:422,Deployability,update,updated,422,"﻿. MP2_SS_SCALE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; MP2_SS_SCALE. MP2_SS_SCALE¶. MP2 same-spin scaling value. Type: double; Default: 1.0. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; MP2_SS_SCALE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__mp2_ss_scale.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__mp2_ss_scale.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__new_triples.html:412,Deployability,update,updated,412,"﻿. NEW_TRIPLES. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; NEW_TRIPLES. NEW_TRIPLES¶. Do use new triples?. Type: boolean; Default: true. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; NEW_TRIPLES. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__new_triples.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__new_triples.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__num_amps_print.html:462,Deployability,update,updated,462,"﻿. NUM_AMPS_PRINT. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; NUM_AMPS_PRINT. NUM_AMPS_PRINT¶. Number of important \(t_1\) and \(t_2\) amplitudes to print. Type: integer; Default: 10. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; NUM_AMPS_PRINT. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__num_amps_print.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__num_amps_print.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__pair_energies_print.html:481,Deployability,update,updated,481,"﻿. PAIR_ENERGIES_PRINT. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; PAIR_ENERGIES_PRINT. PAIR_ENERGIES_PRINT¶. Do print MP2 and CCSD pair energies for RHF references?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; PAIR_ENERGIES_PRINT. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__pair_energies_print.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__pair_energies_print.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__property.html:660,Deployability,update,updated,660,"﻿. PROPERTY. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; PROPERTY. PROPERTY¶. The response property desired. Acceptable values are POLARIZABILITY (default) for dipole-polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity, and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, MAGNETIZABILITY, ROA, ALL; Default: POLARIZABILITY. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; PROPERTY. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__property.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__property.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__reference.html:443,Deployability,update,updated,443,"﻿. REFERENCE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; REFERENCE. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; REFERENCE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__reference.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__reference.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__restart.html:456,Deployability,update,updates,456,"﻿. RESTART. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; RESTART. RESTART¶. Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; RESTART. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__restart.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__restart.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__restart.html:786,Deployability,update,updated,786,"﻿. RESTART. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; RESTART. RESTART¶. Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; RESTART. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__restart.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__restart.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__restart.html:239,Performance,optimiz,optimizations,239,"﻿. RESTART. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; RESTART. RESTART¶. Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; RESTART. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__restart.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__restart.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__r_convergence.html:478,Deployability,update,updated,478,"﻿. R_CONVERGENCE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; R_CONVERGENCE. R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; R_CONVERGENCE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__r_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__r_convergence.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__scsn_mp2.html:437,Deployability,update,updated,437,"﻿. SCSN_MP2. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; SCSN_MP2. SCSN_MP2¶. Do SCS-MP2 with parameters optimized for nucleic acids?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; SCSN_MP2. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__scsn_mp2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__scsn_mp2.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__scsn_mp2.html:173,Performance,optimiz,optimized,173,"﻿. SCSN_MP2. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; SCSN_MP2. SCSN_MP2¶. Do SCS-MP2 with parameters optimized for nucleic acids?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; SCSN_MP2. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__scsn_mp2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__scsn_mp2.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__scs_ccsd.html:411,Deployability,update,updated,411,"﻿. SCS_CCSD. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; SCS_CCSD. SCS_CCSD¶. Do spin-component-scaled CCSD. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; SCS_CCSD. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__scs_ccsd.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__scs_ccsd.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__scs_mp2.html:417,Deployability,update,updated,417,"﻿. SCS_MP2. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; SCS_MP2. SCS_MP2¶. Do spin-component-scaled MP2 (SCS-MP2)?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; SCS_MP2. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__scs_mp2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__scs_mp2.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__semicanonical.html:438,Deployability,update,updated,438,"﻿. SEMICANONICAL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; SEMICANONICAL. SEMICANONICAL¶. Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; SEMICANONICAL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__semicanonical.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__semicanonical.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__t2_coupled.html:388,Deployability,update,updated,388,"﻿. T2_COUPLED. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; T2_COUPLED. T2_COUPLED¶. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; T2_COUPLED. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__t2_coupled.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__t2_coupled.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__t3_ws_incore.html:455,Deployability,update,updated,455,"﻿. T3_WS_INCORE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; T3_WS_INCORE. T3_WS_INCORE¶. Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; T3_WS_INCORE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__t3_ws_incore.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__t3_ws_incore.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__wfn.html:377,Deployability,update,updated,377,"﻿. WFN. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; WFN. WFN¶. Wavefunction type. Type: string; Default: NONE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCENERGY; WFN. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccenergy__wfn.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccenergy__wfn.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__abcd.html:419,Deployability,update,updated,419,"﻿. ABCD. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; ABCD. ABCD¶. Type of ABCD algorithm will be used. Type: string; Possible Values: NEW, OLD; Default: NEW. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; ABCD. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__abcd.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__abcd.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__cachelevel.html:878,Deployability,update,updated,878,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHELEVEL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__cachelevel.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__cachelevel.html:3,Performance,CACHE,CACHELEVEL,3,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHELEVEL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__cachelevel.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__cachelevel.html:124,Performance,CACHE,CACHELEVEL,124,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHELEVEL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__cachelevel.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__cachelevel.html:136,Performance,CACHE,CACHELEVEL,136,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHELEVEL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__cachelevel.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__cachelevel.html:299,Performance,cache,cache,299,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHELEVEL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__cachelevel.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__cachelevel.html:361,Performance,cache,cache,361,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHELEVEL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__cachelevel.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__cachelevel.html:642,Performance,cache,cache,642,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHELEVEL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__cachelevel.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__cachelevel.html:819,Performance,CACHE,CACHELEVEL,819,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHELEVEL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__cachelevel.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__cachetype.html:175,Deployability,release,release,175,"﻿. CACHETYPE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHETYPE. CACHETYPE¶. The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHETYPE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__cachetype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__cachetype.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__cachetype.html:452,Deployability,update,updated,452,"﻿. CACHETYPE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHETYPE. CACHETYPE¶. The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHETYPE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__cachetype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__cachetype.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__cachetype.html:3,Performance,CACHE,CACHETYPE,3,"﻿. CACHETYPE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHETYPE. CACHETYPE¶. The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHETYPE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__cachetype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__cachetype.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__cachetype.html:123,Performance,CACHE,CACHETYPE,123,"﻿. CACHETYPE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHETYPE. CACHETYPE¶. The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHETYPE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__cachetype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__cachetype.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__cachetype.html:134,Performance,CACHE,CACHETYPE,134,"﻿. CACHETYPE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHETYPE. CACHETYPE¶. The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHETYPE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__cachetype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__cachetype.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__cachetype.html:183,Performance,cache,cached,183,"﻿. CACHETYPE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHETYPE. CACHETYPE¶. The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHETYPE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__cachetype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__cachetype.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__cachetype.html:394,Performance,CACHE,CACHETYPE,394,"﻿. CACHETYPE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHETYPE. CACHETYPE¶. The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHETYPE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__cachetype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__cachetype.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__cc3_follow_root.html:437,Deployability,update,updated,437,"﻿. CC3_FOLLOW_ROOT. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; CC3_FOLLOW_ROOT. CC3_FOLLOW_ROOT¶. Do turn on root following for CC3. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; CC3_FOLLOW_ROOT. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__cc3_follow_root.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__cc3_follow_root.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__cc_num_threads.html:413,Deployability,update,updated,413,"﻿. CC_NUM_THREADS. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; CC_NUM_THREADS. CC_NUM_THREADS¶. Number of threads. Type: integer; Default: 1. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; CC_NUM_THREADS. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__cc_num_threads.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__cc_num_threads.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__collapse_with_last.html:604,Deployability,update,updated,604,"﻿. COLLAPSE_WITH_LAST. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; COLLAPSE_WITH_LAST. COLLAPSE_WITH_LAST¶. When collapsing Davidson subspace, whether to also include the previous approximate solution (for each root)? This doubles the number of resulting vectors but generally improves convergence. Type: boolean; Default: true. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; COLLAPSE_WITH_LAST. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__collapse_with_last.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__collapse_with_last.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__collapse_with_last_cc3.html:613,Deployability,update,updated,613,"﻿. COLLAPSE_WITH_LAST_CC3. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; COLLAPSE_WITH_LAST_CC3. COLLAPSE_WITH_LAST_CC3¶. Has the same effect as “COLLAPSE_WITH_LAST” but only in CC3 computations and after the initial solution of EOM CCSD. May help efficiency, but hazardous when solving for higher roots. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; COLLAPSE_WITH_LAST_CC3. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__collapse_with_last_cc3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__collapse_with_last_cc3.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__collapse_with_last_cc3.html:327,Safety,hazard,hazardous,327,"﻿. COLLAPSE_WITH_LAST_CC3. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; COLLAPSE_WITH_LAST_CC3. COLLAPSE_WITH_LAST_CC3¶. Has the same effect as “COLLAPSE_WITH_LAST” but only in CC3 computations and after the initial solution of EOM CCSD. May help efficiency, but hazardous when solving for higher roots. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; COLLAPSE_WITH_LAST_CC3. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__collapse_with_last_cc3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__collapse_with_last_cc3.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__complex_tolerance.html:178,Availability,toler,tolerance,178,"﻿. COMPLEX_TOLERANCE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; COMPLEX_TOLERANCE. COMPLEX_TOLERANCE¶. Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; COMPLEX_TOLERANCE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__complex_tolerance.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__complex_tolerance.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__complex_tolerance.html:463,Deployability,update,updated,463,"﻿. COMPLEX_TOLERANCE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; COMPLEX_TOLERANCE. COMPLEX_TOLERANCE¶. Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; COMPLEX_TOLERANCE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__complex_tolerance.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__complex_tolerance.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__eom_guess.html:542,Availability,avail,available,542,"﻿. EOM_GUESS. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; EOM_GUESS. EOM_GUESS¶. Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, guess vectors from a previous computation will be read from disk. If EOM_GUESS = INPUT, guess vectors will be specified in user input. The latter method is not currently available. Type: string; Possible Values: SINGLES, DISK, INPUT; Default: SINGLES. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; EOM_GUESS. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__eom_guess.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__eom_guess.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__eom_guess.html:825,Deployability,update,updated,825,"﻿. EOM_GUESS. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; EOM_GUESS. EOM_GUESS¶. Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, guess vectors from a previous computation will be read from disk. If EOM_GUESS = INPUT, guess vectors will be specified in user input. The latter method is not currently available. Type: string; Possible Values: SINGLES, DISK, INPUT; Default: SINGLES. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; EOM_GUESS. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__eom_guess.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__eom_guess.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__eom_reference.html:474,Deployability,update,updated,474,"﻿. EOM_REFERENCE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; EOM_REFERENCE. EOM_REFERENCE¶. Reference wavefunction type for EOM computations. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; EOM_REFERENCE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__eom_reference.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__eom_reference.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__excitation_range.html:748,Deployability,update,updated,748,"﻿. EXCITATION_RANGE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; EXCITATION_RANGE. EXCITATION_RANGE¶. The depth into the occupied and valence spaces from which one-electron excitations are seeded into the Davidson guess to the CIS (the default of 2 includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic excited states in the EOM-CC calculation. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; EXCITATION_RANGE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__excitation_range.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__excitation_range.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__e_convergence.html:585,Deployability,update,updated,585,"﻿. E_CONVERGENCE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; E_CONVERGENCE. E_CONVERGENCE¶. Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; E_CONVERGENCE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__e_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__e_convergence.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__e_convergence.html:195,Energy Efficiency,energy,energy,195,"﻿. E_CONVERGENCE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; E_CONVERGENCE. E_CONVERGENCE¶. Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; E_CONVERGENCE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__e_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__e_convergence.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__full_matrix.html:429,Deployability,update,updated,429,"﻿. FULL_MATRIX. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; FULL_MATRIX. FULL_MATRIX¶. Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; FULL_MATRIX. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__full_matrix.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__full_matrix.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__local.html:420,Deployability,update,updated,420,"﻿. LOCAL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; LOCAL. LOCAL¶. Do simulate the effects of local correlation techniques?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; LOCAL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__local.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__local.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__local_cutoff.html:662,Deployability,update,updated,662,"﻿. LOCAL_CUTOFF. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; LOCAL_CUTOFF. LOCAL_CUTOFF¶. Value (always between one and zero) for the Broughton-Pulay completeness check used to contruct orbital domains for local-CC calculations. See J. Broughton and P. Pulay, J. Comp. Chem. 14, 736-740 (1993) and C. Hampel and H.-J. Werner, J. Chem. Phys. 104, 6286-6297 (1996). Type: double; Default: 0.02. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; LOCAL_CUTOFF. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__local_cutoff.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__local_cutoff.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__local_do_singles.html:405,Deployability,update,updated,405,"﻿. LOCAL_DO_SINGLES. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; LOCAL_DO_SINGLES. LOCAL_DO_SINGLES¶. Type: boolean; Default: true. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; LOCAL_DO_SINGLES. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__local_do_singles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__local_do_singles.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__local_filter_singles.html:470,Deployability,update,updated,470,"﻿. LOCAL_FILTER_SINGLES. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; LOCAL_FILTER_SINGLES. LOCAL_FILTER_SINGLES¶. Do apply local filtering to singles amplitudes?. Type: boolean; Default: true. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; LOCAL_FILTER_SINGLES. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__local_filter_singles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__local_filter_singles.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__local_method.html:633,Deployability,update,updated,633,"﻿. LOCAL_METHOD. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; LOCAL_METHOD. LOCAL_METHOD¶. Type of local-CCSD scheme to be simulated. WERNER selects the method developed by H.-J. Werner and co-workers, and AOBASIS selects the method developed by G.E. Scuseria and co-workers (currently inoperative). Type: string; Possible Values: WERNER, AOBASIS; Default: WERNER. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; LOCAL_METHOD. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__local_method.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__local_method.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__local_preconditioner.html:503,Deployability,update,updated,503,"﻿. LOCAL_PRECONDITIONER. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; LOCAL_PRECONDITIONER. LOCAL_PRECONDITIONER¶. Preconditioner will be used in local CC computations. Type: string; Possible Values: HBAR, FOCK; Default: HBAR. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; LOCAL_PRECONDITIONER. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__local_preconditioner.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__local_preconditioner.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__local_weakp.html:719,Deployability,update,updated,719,"﻿. LOCAL_WEAKP. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; LOCAL_WEAKP. LOCAL_WEAKP¶. Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, MP2, NEGLECT; Default: NONE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; LOCAL_WEAKP. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__local_weakp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__local_weakp.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__local_weakp.html:409,Energy Efficiency,energy,energy,409,"﻿. LOCAL_WEAKP. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; LOCAL_WEAKP. LOCAL_WEAKP¶. Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, MP2, NEGLECT; Default: NONE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; LOCAL_WEAKP. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__local_weakp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__local_weakp.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__maxiter.html:397,Deployability,update,updated,397,"﻿. MAXITER. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; MAXITER. MAXITER¶. Maximum number of iterations. Type: integer; Default: 80. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; MAXITER. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__maxiter.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__maxiter.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__new_triples.html:406,Deployability,update,updated,406,"﻿. NEW_TRIPLES. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; NEW_TRIPLES. NEW_TRIPLES¶. Do use new triples?. Type: boolean; Default: true. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; NEW_TRIPLES. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__new_triples.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__new_triples.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__num_amps_print.html:438,Deployability,update,updated,438,"﻿. NUM_AMPS_PRINT. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; NUM_AMPS_PRINT. NUM_AMPS_PRINT¶. Number of important CC amplitudes to print. Type: integer; Default: 5. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; NUM_AMPS_PRINT. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__num_amps_print.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__num_amps_print.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__overlap_check.html:216,Availability,avail,available,216,"﻿. OVERLAP_CHECK. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; OVERLAP_CHECK. OVERLAP_CHECK¶. Report overlaps with old excited-state wave functions, if available, and store current wave functions for later use. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; OVERLAP_CHECK. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__overlap_check.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__overlap_check.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__overlap_check.html:511,Deployability,update,updated,511,"﻿. OVERLAP_CHECK. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; OVERLAP_CHECK. OVERLAP_CHECK¶. Report overlaps with old excited-state wave functions, if available, and store current wave functions for later use. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; OVERLAP_CHECK. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__overlap_check.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__overlap_check.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__prop_root.html:467,Deployability,update,updated,467,"﻿. PROP_ROOT. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; PROP_ROOT. PROP_ROOT¶. Root number (within its irrep) for computing properties. Defaults to highest root requested. Type: integer; Default: 0. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; PROP_ROOT. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__prop_root.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__prop_root.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__prop_sym.html:470,Deployability,update,updated,470,"﻿. PROP_SYM. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; PROP_SYM. PROP_SYM¶. Symmetry of the state to compute properties. Defaults to last irrep for which states are requested. Type: integer; Default: 1. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; PROP_SYM. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__prop_sym.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__prop_sym.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__reference.html:437,Deployability,update,updated,437,"﻿. REFERENCE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; REFERENCE. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; REFERENCE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__reference.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__reference.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__restart_eom_cc3.html:428,Deployability,update,updated,428,"﻿. RESTART_EOM_CC3. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; RESTART_EOM_CC3. RESTART_EOM_CC3¶. Do restart from on-disk?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; RESTART_EOM_CC3. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__restart_eom_cc3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__restart_eom_cc3.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__rhf_triplets.html:435,Deployability,update,updated,435,"﻿. RHF_TRIPLETS. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; RHF_TRIPLETS. RHF_TRIPLETS¶. Do form a triplet state from RHF reference?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; RHF_TRIPLETS. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__rhf_triplets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__rhf_triplets.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__roots_per_irrep.html:572,Deployability,update,updated,572,"﻿. ROOTS_PER_IRREP. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; ROOTS_PER_IRREP. ROOTS_PER_IRREP¶. Number of excited states per irreducible representation for EOM-CC and CC-LR calculations. Irreps denote the final state symmetry, not the symmetry of the transition. Type: array; Default: No Default. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; ROOTS_PER_IRREP. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__roots_per_irrep.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__roots_per_irrep.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__r_convergence.html:489,Deployability,update,updated,489,"﻿. R_CONVERGENCE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; R_CONVERGENCE. R_CONVERGENCE¶. Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; R_CONVERGENCE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__r_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__r_convergence.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__schmidt_add_residual_tolerance.html:595,Deployability,update,updated,595,"﻿. SCHMIDT_ADD_RESIDUAL_TOLERANCE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; SCHMIDT_ADD_RESIDUAL_TOLERANCE. SCHMIDT_ADD_RESIDUAL_TOLERANCE¶. Minimum absolute value above which a guess vector to a root is added to the Davidson algorithm in the EOM-CC iterative procedure. Type: conv double; Default: 1e-3. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; SCHMIDT_ADD_RESIDUAL_TOLERANCE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__schmidt_add_residual_tolerance.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__schmidt_add_residual_tolerance.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__semicanonical.html:432,Deployability,update,updated,432,"﻿. SEMICANONICAL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; SEMICANONICAL. SEMICANONICAL¶. Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; SEMICANONICAL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__semicanonical.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__semicanonical.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__singles_print.html:514,Deployability,update,updated,514,"﻿. SINGLES_PRINT. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; SINGLES_PRINT. SINGLES_PRINT¶. Do print information on the iterative solution to the single-excitation EOM-CC problem used as a guess to full EOM-CC?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; SINGLES_PRINT. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__singles_print.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__singles_print.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__ss_e_convergence.html:517,Deployability,update,updated,517,"﻿. SS_E_CONVERGENCE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; SS_E_CONVERGENCE. SS_E_CONVERGENCE¶. Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; SS_E_CONVERGENCE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__ss_e_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__ss_e_convergence.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__ss_e_convergence.html:204,Energy Efficiency,energy,energy,204,"﻿. SS_E_CONVERGENCE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; SS_E_CONVERGENCE. SS_E_CONVERGENCE¶. Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; SS_E_CONVERGENCE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__ss_e_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__ss_e_convergence.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__ss_r_convergence.html:518,Deployability,update,updated,518,"﻿. SS_R_CONVERGENCE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; SS_R_CONVERGENCE. SS_R_CONVERGENCE¶. Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; SS_R_CONVERGENCE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__ss_r_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__ss_r_convergence.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__ss_skip_diag.html:433,Deployability,update,updated,433,"﻿. SS_SKIP_DIAG. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; SS_SKIP_DIAG. SS_SKIP_DIAG¶. Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; SS_SKIP_DIAG. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__ss_skip_diag.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__ss_skip_diag.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__ss_vecs_per_root.html:430,Deployability,update,updated,430,"﻿. SS_VECS_PER_ROOT. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; SS_VECS_PER_ROOT. SS_VECS_PER_ROOT¶. SS vectors stored per root. Type: integer; Default: 5. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; SS_VECS_PER_ROOT. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__ss_vecs_per_root.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__ss_vecs_per_root.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__t3_ws_incore.html:453,Deployability,update,updated,453,"﻿. T3_WS_INCORE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; T3_WS_INCORE. T3_WS_INCORE¶. Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; T3_WS_INCORE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__t3_ws_incore.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__t3_ws_incore.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__vecs_cc3.html:407,Deployability,update,updated,407,"﻿. VECS_CC3. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; VECS_CC3. VECS_CC3¶. Vectors stored in CC3 computations. Type: integer; Default: 10. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; VECS_CC3. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__vecs_cc3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__vecs_cc3.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__vecs_per_root.html:416,Deployability,update,updated,416,"﻿. VECS_PER_ROOT. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; VECS_PER_ROOT. VECS_PER_ROOT¶. Vectors stored per root. Type: integer; Default: 12. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; VECS_PER_ROOT. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__vecs_per_root.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__vecs_per_root.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__wfn.html:420,Deployability,update,updated,420,"﻿. WFN. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; WFN. WFN¶. Wavefunction type. Type: string; Possible Values: EOM_CCSD, EOM_CC2, EOM_CC3; Default: EOM_CCSD. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCEOM; WFN. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cceom__wfn.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cceom__wfn.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cchbar__cachelevel.html:869,Deployability,update,updated,869,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCHBAR; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCHBAR; CACHELEVEL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cchbar__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cchbar__cachelevel.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cchbar__cachelevel.html:3,Performance,CACHE,CACHELEVEL,3,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCHBAR; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCHBAR; CACHELEVEL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cchbar__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cchbar__cachelevel.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cchbar__cachelevel.html:125,Performance,CACHE,CACHELEVEL,125,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCHBAR; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCHBAR; CACHELEVEL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cchbar__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cchbar__cachelevel.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cchbar__cachelevel.html:137,Performance,CACHE,CACHELEVEL,137,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCHBAR; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCHBAR; CACHELEVEL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cchbar__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cchbar__cachelevel.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cchbar__cachelevel.html:300,Performance,cache,cache,300,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCHBAR; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCHBAR; CACHELEVEL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cchbar__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cchbar__cachelevel.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cchbar__cachelevel.html:362,Performance,cache,cache,362,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCHBAR; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCHBAR; CACHELEVEL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cchbar__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cchbar__cachelevel.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cchbar__cachelevel.html:632,Performance,cache,cache,632,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCHBAR; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCHBAR; CACHELEVEL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cchbar__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cchbar__cachelevel.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cchbar__cachelevel.html:810,Performance,CACHE,CACHELEVEL,810,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCHBAR; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCHBAR; CACHELEVEL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cchbar__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cchbar__cachelevel.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cchbar__eom_reference.html:443,Deployability,update,updated,443,"﻿. EOM_REFERENCE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCHBAR; EOM_REFERENCE. EOM_REFERENCE¶. Reference wavefunction type for EOM computations. Type: string; Default: RHF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCHBAR; EOM_REFERENCE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cchbar__eom_reference.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cchbar__eom_reference.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cchbar__t_amps.html:422,Deployability,update,updated,422,"﻿. T_AMPS. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCHBAR; T_AMPS. T_AMPS¶. Do compute the T amplitude equation matrix elements?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCHBAR; T_AMPS. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cchbar__t_amps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cchbar__t_amps.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cchbar__wabei_lowdisk.html:458,Deployability,update,updated,458,"﻿. WABEI_LOWDISK. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCHBAR; WABEI_LOWDISK. WABEI_LOWDISK¶. Do use the minimal-disk algorithm for Wabei? It’s VERY slow!. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCHBAR; WABEI_LOWDISK. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cchbar__wabei_lowdisk.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cchbar__wabei_lowdisk.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cchbar__wfn.html:372,Deployability,update,updated,372,"﻿. WFN. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCHBAR; WFN. WFN¶. Wavefunction type. Type: string; Default: SCF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCHBAR; WFN. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cchbar__wfn.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cchbar__wfn.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__abcd.html:398,Deployability,update,updated,398,"﻿. ABCD. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; ABCD. ABCD¶. Type of ABCD algorithm will be used. Type: string; Default: NEW. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; ABCD. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cclambda__abcd.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__abcd.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__ao_basis.html:489,Deployability,update,updated,489,"﻿. AO_BASIS. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; AO_BASIS. AO_BASIS¶. The algorithm to use for the \(\left\langle VV||VV \right\rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; AO_BASIS. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cclambda__ao_basis.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__ao_basis.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__cachelevel.html:884,Deployability,update,updated,884,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; CACHELEVEL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cclambda__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__cachelevel.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__cachelevel.html:3,Performance,CACHE,CACHELEVEL,3,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; CACHELEVEL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cclambda__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__cachelevel.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__cachelevel.html:127,Performance,CACHE,CACHELEVEL,127,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; CACHELEVEL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cclambda__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__cachelevel.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__cachelevel.html:139,Performance,CACHE,CACHELEVEL,139,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; CACHELEVEL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cclambda__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__cachelevel.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__cachelevel.html:302,Performance,cache,cache,302,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; CACHELEVEL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cclambda__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__cachelevel.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__cachelevel.html:364,Performance,cache,cache,364,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; CACHELEVEL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cclambda__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__cachelevel.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__cachelevel.html:645,Performance,cache,cache,645,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; CACHELEVEL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cclambda__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__cachelevel.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__cachelevel.html:825,Performance,CACHE,CACHELEVEL,825,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; CACHELEVEL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cclambda__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__cachelevel.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__diis.html:417,Deployability,update,updated,417,"﻿. DIIS. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; DIIS. DIIS¶. Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; DIIS. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cclambda__diis.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__diis.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__jobtype.html:409,Deployability,update,updated,409,"﻿. JOBTYPE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; JOBTYPE. JOBTYPE¶. Type of job being performed. Type: string; Default: No Default. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; JOBTYPE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cclambda__jobtype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__jobtype.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__jobtype.html:161,Performance,perform,performed,161,"﻿. JOBTYPE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; JOBTYPE. JOBTYPE¶. Type of job being performed. Type: string; Default: No Default. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; JOBTYPE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cclambda__jobtype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__jobtype.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__local.html:426,Deployability,update,updated,426,"﻿. LOCAL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; LOCAL. LOCAL¶. Do simulate the effects of local correlation techniques?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; LOCAL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cclambda__local.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__local.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__local_cphf_cutoff.html:469,Deployability,update,updated,469,"﻿. LOCAL_CPHF_CUTOFF. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; LOCAL_CPHF_CUTOFF. LOCAL_CPHF_CUTOFF¶. Cutoff value for local-coupled-perturbed-Hartree-Fock. Type: double; Default: 0.10. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; LOCAL_CPHF_CUTOFF. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cclambda__local_cphf_cutoff.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__local_cphf_cutoff.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__local_cutoff.html:668,Deployability,update,updated,668,"﻿. LOCAL_CUTOFF. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; LOCAL_CUTOFF. LOCAL_CUTOFF¶. Value (always between one and zero) for the Broughton-Pulay completeness check used to contruct orbital domains for local-CC calculations. See J. Broughton and P. Pulay, J. Comp. Chem. 14, 736-740 (1993) and C. Hampel and H.-J. Werner, J. Chem. Phys. 104, 6286-6297 (1996). Type: double; Default: 0.02. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; LOCAL_CUTOFF. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cclambda__local_cutoff.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__local_cutoff.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__local_filter_singles.html:504,Deployability,update,updated,504,"﻿. LOCAL_FILTER_SINGLES. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; LOCAL_FILTER_SINGLES. LOCAL_FILTER_SINGLES¶. Do apply local filtering to single de-excitation (\(\lambda 1\) amplitudes?. Type: boolean; Default: true. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; LOCAL_FILTER_SINGLES. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cclambda__local_filter_singles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__local_filter_singles.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__local_method.html:216,Availability,avail,available,216,"﻿. LOCAL_METHOD. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; LOCAL_METHOD. LOCAL_METHOD¶. Type of local-CCSD scheme to be simulated. WERNER (unique available option) selects the method developed by H.-J. Werner and co-workers. Type: string; Default: WERNER. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; LOCAL_METHOD. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cclambda__local_method.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__local_method.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__local_method.html:533,Deployability,update,updated,533,"﻿. LOCAL_METHOD. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; LOCAL_METHOD. LOCAL_METHOD¶. Type of local-CCSD scheme to be simulated. WERNER (unique available option) selects the method developed by H.-J. Werner and co-workers. Type: string; Default: WERNER. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; LOCAL_METHOD. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cclambda__local_method.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__local_method.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__local_pairdef.html:438,Deployability,update,updated,438,"﻿. LOCAL_PAIRDEF. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; LOCAL_PAIRDEF. LOCAL_PAIRDEF¶. Definition of local pair domains. Type: string; Default: No Default. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; LOCAL_PAIRDEF. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cclambda__local_pairdef.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__local_pairdef.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__local_weakp.html:241,Availability,avail,available,241,"﻿. LOCAL_WEAKP. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; LOCAL_WEAKP. LOCAL_WEAKP¶. Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; LOCAL_WEAKP. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cclambda__local_weakp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__local_weakp.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__local_weakp.html:548,Deployability,update,updated,548,"﻿. LOCAL_WEAKP. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; LOCAL_WEAKP. LOCAL_WEAKP¶. Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; LOCAL_WEAKP. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cclambda__local_weakp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__local_weakp.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__maxiter.html:403,Deployability,update,updated,403,"﻿. MAXITER. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; MAXITER. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; MAXITER. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cclambda__maxiter.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__maxiter.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__num_amps_print.html:495,Deployability,update,updated,495,"﻿. NUM_AMPS_PRINT. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; NUM_AMPS_PRINT. NUM_AMPS_PRINT¶. Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT. Type: integer; Default: 10. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; NUM_AMPS_PRINT. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cclambda__num_amps_print.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__num_amps_print.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__prop_all.html:432,Deployability,update,updated,432,"﻿. PROP_ALL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; PROP_ALL. PROP_ALL¶. Compute unrelaxed properties for all excited states. Type: boolean; Default: true. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; PROP_ALL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cclambda__prop_all.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__prop_all.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__prop_root.html:437,Deployability,update,updated,437,"﻿. PROP_ROOT. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; PROP_ROOT. PROP_ROOT¶. Root number (within its irrep) for computing properties. Type: integer; Default: 1. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; PROP_ROOT. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cclambda__prop_root.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__prop_root.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__prop_sym.html:400,Deployability,update,updated,400,"﻿. PROP_SYM. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; PROP_SYM. PROP_SYM¶. The symmetry of states. Type: integer; Default: 1. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; PROP_SYM. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cclambda__prop_sym.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__prop_sym.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__restart.html:472,Deployability,update,updated,472,"﻿. RESTART. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; RESTART. RESTART¶. Do restart the coupled-cluster iterations from old \(\lambda_1\) and \(\lambda_2\) amplitudes?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; RESTART. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cclambda__restart.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__restart.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__roots_per_irrep.html:488,Deployability,update,updated,488,"﻿. ROOTS_PER_IRREP. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; ROOTS_PER_IRREP. ROOTS_PER_IRREP¶. The number of electronic states to computed, per irreducible representation. Type: array; Default: No Default. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; ROOTS_PER_IRREP. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cclambda__roots_per_irrep.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__roots_per_irrep.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__r_convergence.html:485,Deployability,update,updated,485,"﻿. R_CONVERGENCE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; R_CONVERGENCE. R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; R_CONVERGENCE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cclambda__r_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__r_convergence.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__sekino.html:418,Deployability,update,updated,418,"﻿. SEKINO. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; SEKINO. SEKINO¶. Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; SEKINO. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cclambda__sekino.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__sekino.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__wfn.html:376,Deployability,update,updated,376,"﻿. WFN. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; WFN. WFN¶. Wavefunction type. Type: string; Default: SCF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; WFN. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cclambda__wfn.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__wfn.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__zeta.html:378,Deployability,update,updated,378,"﻿. ZETA. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; ZETA. ZETA¶. Do use zeta?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; ZETA. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/cclambda__zeta.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/cclambda__zeta.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccresponse__abcd.html:402,Deployability,update,updated,402,"﻿. ABCD. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; ABCD. ABCD¶. Type of ABCD algorithm will be used. Type: string; Default: NEW. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; ABCD. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccresponse__abcd.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccresponse__abcd.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccresponse__analyze.html:406,Deployability,update,updated,406,"﻿. ANALYZE. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; ANALYZE. ANALYZE¶. Do analyze X2 amplitudes. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; ANALYZE. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccresponse__analyze.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccresponse__analyze.html
https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccresponse__cachelevel.html:414,Deployability,update,updated,414,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; CACHELEVEL. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4manual/1.8.x/autodir_options_c/ccresponse__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/ccresponse__cachelevel.html
